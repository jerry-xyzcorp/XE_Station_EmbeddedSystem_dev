/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>    //library to send string to usart
#include <stdio.h>
#include "hx711.h"		// hx711
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
// lidar
#define RxBuf_SIZE 512
#define MainBuf_SIZE 2048
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
uint8_t RxBuf[RxBuf_SIZE];
uint8_t MainBuf[MainBuf_SIZE];

int _write(int file, char *ptr, int len)
{
	if(HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 10) == HAL_OK)
		return len;
	return -1;
}
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_UART5_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM2_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay (uint16_t time)					//delay function in us
{
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);	 //
}

// hx711
hx711_t loadcellA, loadcellB;
float weight;

// hc-sr04
#define TRIG_PIN GPIO_PIN_11
#define TRIG_PORT GPIOE
uint32_t firstValue = 0;
uint32_t secondValue = 0;
uint32_t sub = 0;			//subtract value
uint8_t capturedOne = 0;
float distance  = 0.0;

// lidar
uint8_t lidar_req_packet[8]; // lidar request packet

char uartBuf[4000];			//used as buffer for the string to be send to PC
uint8_t uartRcvBuf[11];			//used as buffer for the string to be send to PC

//////////////////////////////////////////////////////////////////////////////////////
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
	{
		if (capturedOne==0) // check if first value is captured
		{
			firstValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);    //read the value
			capturedOne = 1;  									// change the value of the variable
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);  		//if the value is captured change the polarity to falling edge
		}

		else if (capturedOne==1)   // if the first value is captured
		{
			secondValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
			__HAL_TIM_SET_COUNTER(htim, 0);  							// reset the counter

			sub = secondValue-firstValue;				//subtraction of the two values

			distance = sub * .034/2;			//time in us * speed of sound in air in cm / 2 (the sound needs to go back to the sensor)
			capturedOne = 0; 					// set the capture value to 0

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);  //change the polarity back to rising edge
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);											//disable the TIM1 interrupt
		}
	}
}

void HCSR04_Read (void)
{
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);  // TRIG set to HIGH
	delay(10);  // wait for 10 us
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);  // TRIG set to LOW

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);				//Enable timer interrupt
}

void iceDetectionTest(void)
{
	float distance_arr[10] = {0.0,};

	HCSR04_Read();				//read the value

	distance_arr[0] = distance;
	float sum = distance_arr[0];

	for (uint8_t i=8; i>=1; i--){
		distance_arr[i+1] = distance_arr[i];
		sum += distance_arr[i+1];
//		sprintf(uartBuf, "distance_arr[%d]  = %d\r\n", i+1, (int)(distance_arr[i+1]*10));			//convert to string
//
//		HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);		//transfer the string to PC // (interface, address, buffer size, timeout)
	}
	distance_arr[1] = distance_arr[0];
//	sum += distance_arr[0];

//	sprintf(uartBuf, "distance_arr[1]  = %d\r\n",(int)(distance_arr[1]*10));			//convert to string
//	HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);		//transfer the string to PC // (interface, address, buffer size, timeout)
//	sprintf(uartBuf, "distance_arr[0]  = %d\r\n",(int)(distance_arr[0]*10));			//convert to string
//	HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);		//transfer the string to PC // (interface, address, buffer size, timeout)

	float avg = sum/9.0;

	//	sprintf(uartBuf, "Distance (mm)  = %d\r\n", (int)(distance*10));			//convert to string
//	HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);		//transfer the string to PC // (interface, address, buffer size, timeout)

	float trig_max_value = 1.15; // 6cm
	float trig_min_value = 0.6; // 6cm

	if ((avg < trig_max_value) && (avg > trig_min_value)){
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);	// led on
		sprintf(uartBuf, "[LED ON] avg (mm) = %d\r\n", (int)(avg*100));			//convert to string
	}
	else{
		sprintf(uartBuf, "[LED OFF] avg (mm) = %d\r\n", (int)(avg*100));			//convert to string
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);		// led off
	}
	HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);		//transfer the string to PC // (interface, address, buffer size, timeout)


	HAL_Delay(100);

//	return avg;
}


//int num_of_sample;
//double prev_average;
//
//double AvgFilter(double x){
//
//    double average, alpha;
//
//    // ?��?�� ?�� +1 (+1 the number of sample)
//    num_of_sample += 1;
//
//    // ?���??????????????????????????????????????????????????????? ?��?��?�� alpha �??????????????????????????????????????????????????????? (alpha of average filter)
//    alpha = (num_of_sample - 1) / (num_of_sample + 0.0);
//
//    // ?���??????????????????????????????????????????????????????? ?��?��?�� ?���????????????????????????????????????????????????????????�� (recursive expression of average filter)
//    average = alpha * prev_average + (1 - alpha) * x;
//
//    // ?���??????????????????????????????????????????????????????? ?��?��?�� ?��?�� ?��?���??????????????????????????????????????????????????????? ?��?��?��?�� (update previous state value of average filter)
//    prev_average = average;
//
//    return average;
//}
//////////////////////////////////////////////////////////////////////////////////////
void relayTest(void)
{
	uint32_t time = 5000; // 5sec
	HAL_GPIO_WritePin(GPIOE, Relay0_Pin, GPIO_PIN_SET);	// Relay Close
	HAL_Delay(time);
	sprintf(uartBuf, "reset\r\n");			//convert to string
	HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);		//transfer the string to PC // (interface, address, buffer size, timeout)

	HAL_GPIO_WritePin(GPIOE, Relay0_Pin, GPIO_PIN_RESET);	// Relay Open
	HAL_Delay(time);
	sprintf(uartBuf, "set\r\n");			//convert to string
	HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);		//transfer the string to PC // (interface, address, buffer size, timeout)
}
void iceDispenser_SetMode(void)
{
	uint32_t time = 1000; // 5sec

	HAL_GPIO_WritePin(ice01_GPIO_Port, ice01_Pin, GPIO_PIN_SET);
	HAL_Delay(100);
	HAL_GPIO_WritePin(ice01_GPIO_Port, ice01_Pin, GPIO_PIN_RESET);
	sprintf(uartBuf, "ice01\r\n");			//convert to string
	HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);		//transfer the string to PC // (interface, address, buffer size, timeout)

	HAL_Delay(time);

	HAL_GPIO_WritePin(ice02_GPIO_Port, ice02_Pin, GPIO_PIN_SET);
	HAL_Delay(100);
	HAL_GPIO_WritePin(ice02_GPIO_Port, ice02_Pin, GPIO_PIN_RESET);

	sprintf(uartBuf, "ice02\r\n");			//convert to string
	HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);		//transfer the string to PC // (interface, address, buffer size, timeout)

	HAL_Delay(time);

	HAL_GPIO_WritePin(ice03_GPIO_Port, ice03_Pin, GPIO_PIN_SET);
	HAL_Delay(100);
	HAL_GPIO_WritePin(ice03_GPIO_Port, ice03_Pin, GPIO_PIN_RESET);

	sprintf(uartBuf, "ice03r\n");			//convert to string
	HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);		//transfer the string to PC // (interface, address, buffer size, timeout)

}
//////////////////////////////////////////////////////////////////////////////////////
// DMA


void Lidar3dTest(uint8_t version)
{
	// make packet
//	uint8_t* lidar_req_packet = makePacket(0,0);

	uint8_t packet_cmd = 0;
	uint8_t packet_value = 0x00;
	uint32_t value = 115200;

	switch(packet_cmd){
	case 0: // Get Device Info
		packet_cmd = 0x10;
		packet_value = 0x00;
	case 1: // Run 2D Mode
		packet_cmd = 0x01;
	case 2: // Run 3D Mode
		packet_cmd = 0x08;
	case 3: // Run Dual Mode
		packet_cmd = 0x07;

	case 4: // Stop
		packet_cmd = 0x02;
	case 5: // Set 3D Pulse Duration Request
		packet_cmd = 0x0c;
	case 6: // Frequency Setting Request
		packet_cmd = 0x0f;
	case 7: // Sensitivity Setting Request
		packet_cmd = 0x11;
	case 8: // Set Serial Baud Rate
		packet_cmd = 0x12;
		switch(value){
		case 57600:
			packet_value = 0x39;
		case 115200:
			packet_value = 0xaa;
		case 250000:
			packet_value = 0x77;
		case 3000000:
			packet_value = 0x55;
		}
	}
//	uint8_t lidar_req_packet[] = {0x5A, 0x77, 0xFF, 0x02, 0x00, packet_cmd, packet_value, 0x00};

	uint8_t lidar_req_packet[] = {0x5a, 0x77, 0xff, 0x02, 0x00, 0x12, 0xaa, 0x00};
	if(version == 1)
	{
		// get device info -> checksum: 0x12
		lidar_req_packet[5] = 0x10;
		lidar_req_packet[6] = 0x00;

		// Run 2D Mode REQEST -> checksum: 0x03

//		lidar_req_packet[5] = 0x01;
//		lidar_req_packet[6] = 0x00;

		// Run Dual Mode REQEST
//		lidar_req_packet[5] = 0x07;
//		lidar_req_packet[6] = 0x00;
	}

	// checksum
	uint8_t CheckSum = 0;
	int PAYLOAD_LENGTH_LSB_INDEX = 3;
	for(int i = PAYLOAD_LENGTH_LSB_INDEX; i < sizeof(lidar_req_packet)- 2; i++)
	{
		CheckSum ^= lidar_req_packet[i];
	}
	lidar_req_packet[7] = CheckSum;

	// print request packet
//	sprintf(uartBuf, "request packet : \r");			//convert to string
//	HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);
//	for(int i=0; i<sizeof(lidar_req_packet); i++){
//		sprintf(uartBuf, "%0.2x \r", lidar_req_packet[i]);			//convert to string
//		HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);
//	}

	// request packet
	uint8_t tmpBuf[15] = {0,};
	HAL_UART_Transmit(&huart5, (uint8_t *)lidar_req_packet, sizeof(lidar_req_packet), 100);

	// receive packet
	while(1)
	{
		HAL_UART_Receive(&huart5, (uint8_t *)tmpBuf, sizeof(tmpBuf), 100);
		for(int i=0; i<sizeof(tmpBuf); i++){
			sprintf(uartBuf, "%0.2x \r", tmpBuf[i]);
			HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);
		}
		sprintf(uartBuf, "\n");
		HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);

		uint8_t stx = 0x5a;
		if(tmpBuf == stx)
		{
			sprintf(uartBuf, "received!\n");			//convert to string
			HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, sizeof(uartBuf), 100);
			break;
		}
	}

	HAL_Delay(1000);
}
//////////////////////////////////////////////////////////////////////////////////////
void loadCellTest(void)
{
	int offsetA = -4597;
	int offsetB = 21325-14202-7119;

	int weightA = (int)(hx711_weight(&loadcellA, 10)) - offsetA;
	int weightB = (int)(hx711_weight(&loadcellB, 10)) - offsetB;

	sprintf(uartBuf, "A:%d g \rB:%d g\n", weightA, weightB);			//convert to string
	HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);
	HAL_Delay(100);
}
//////////////////////////////////////////////////////////////////////////////////////
void motorSpeedSensorTest(void)
{
	int chk = 0;

	if(HAL_GPIO_ReadPin(MotorSpeedSensor_DI1_GPIO_Port, MotorSpeedSensor_DI1_Pin))
	{
		chk = 1;
	}
	sprintf(uartBuf, "check data : %d \n", chk);			//convert to string
	HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);
	HAL_Delay(100);
}
//////////////////////////////////////////////////////////////////////////////////////
uint8_t UART5_rxBuffer[16] = {0};
uint8_t USART2_rxBuffer[16] = {0};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart->Instance == UART5)
	{
		// print to serial monitor
	    HAL_UART_Transmit(&huart3, UART5_rxBuffer, sizeof(UART5_rxBuffer), 100);

	    // enable interrupt again
	    HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, sizeof(UART5_rxBuffer));
	}
	else if (huart->Instance == USART2)
	{
		// print to serial monitor
	    HAL_UART_Transmit(&huart3, USART2_rxBuffer, sizeof(USART2_rxBuffer), 100);

	    // enable interrupt again
	    HAL_UART_Receive_IT(&huart2, USART2_rxBuffer, sizeof(USART2_rxBuffer));
	}
}

void cup_lid_dispenserTest(void)
{
	// init packet
//	uint8_t dispenser_req_packet[] = {0x02, 0x01, 0x40, 0x03, 0x44}; 			// status check
	uint8_t dispenser_req_packet[] = {0x02, 0x03, 0x41, 0x01, 0x01, 0x03, 0x49}; // extract 1 cup

	// calc checksum
//	for(int i=1; i<1+dispenser_req_packet[1]+1;i++){
//		dispenser_req_packet[6] += dispenser_req_packet[i];
//	}

//	sprintf(uartBuf, "request packet : \r");			//convert to string
//	HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);
//	for(int i=0; i<sizeof(dispenser_req_packet); i++){
//		sprintf(uartBuf, "%0.2x \r", dispenser_req_packet[i]);			//convert to string
//		HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);
//	}
//	sprintf(uartBuf, "\n");			//convert to string
//	HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);

	// request packet
	HAL_UART_Transmit(&huart5, (uint8_t *)dispenser_req_packet, sizeof(dispenser_req_packet), 100);
	HAL_UART_Transmit(&huart3, (uint8_t *)dispenser_req_packet, sizeof(dispenser_req_packet), 100);

	HAL_Delay(10000);
}
//////////////////////////////////////////////////////////////////////////////////////
void SteppingMotorTest(void)
{
	// 90 degree rotation test
	TIM1->CCR3 = 16383;
	HAL_Delay(5500);
	TIM1->CCR3 = 0;
	HAL_Delay(2000);
}
//////////////////////////////////////////////////////////////////////////////////////
// L298N motor driver test
void L298Ntest(void)
{
	HAL_GPIO_WritePin(L298N_IN1_GPIO_Port, L298N_IN1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(L298N_IN2_GPIO_Port, L298N_IN2_Pin, GPIO_PIN_RESET);
	TIM1->CCR3 = 60000; // MAX :65535
	HAL_Delay(5000);
}

//////////////////////////////////////////////////////////////////////////////////////
// PC-baord communication
void pcSerialTest(void)
{
	uint8_t buf = 0;
	uint8_t stx = 0;
	uint8_t len = 0;

	uint8_t buf2 = 0;
	uint8_t rxbuf[16] = {0,};
	uint8_t txbuf[16] = {0,};
	uint8_t i=0;

	// receive packet
//	HAL_UART_Receive(&huart3, &buf1, sizeof(buf1), 10);
//	while(1){
//		HAL_UART_Receive(&huart3, &buf2, sizeof(buf2), 10);
//
//		if (buf1 == 0x02 && buf2 == 0x01){
//			rxbuf[0] = buf1;
//			rxbuf[1] = buf2;
//			i += 2;
//			break;
//		}
//		buf1 = buf2;
//	}

	while(1){
		HAL_UART_Receive(&huart3, &stx, sizeof(stx), 10);
		// STX
		if (stx == 0x02){
			rxbuf[0] = stx;

			break;
		}
	}
	// LEN
	HAL_UART_Receive(&huart3, &len, sizeof(len), 10);
	rxbuf[1] = len;
	uint8_t *data_arr = (uint8_t*)malloc(sizeof(uint8_t) * (len+2));
	for(int i=0; i<len+2; i++){
		data_arr[i] = 0;
	}
	i = 2;

	while(1){
		HAL_UART_Receive(&huart3, &buf, sizeof(buf), 10);

		if(buf != NULL){
			rxbuf[i] = buf;
			data_arr[i] = buf;
			i += 1;
			if (buf == 0x03){
				HAL_UART_Receive(&huart3, &buf, sizeof(buf), 10);
				rxbuf[i] = buf;
				data_arr[i] = buf;
				break;
			}
		}
	}
	data_arr[0] = stx;
	data_arr[1] = len;

	// check checksum
	uint8_t CheckSum = 0;
	for(int i = 2; i < len; i++)
	{
		CheckSum ^= data_arr[i];
	}
	data_arr[len+1] = CheckSum;

	// transmit packet
	HAL_UART_Transmit(&huart3, (uint8_t *)data_arr, (len+2), 100);
	free(data_arr);
}

//////////////////////////////////////////////////////////////////////////////////////
// TFminiS
//////////////////////////////////////////////////////////////////////////////////////
#define SLAVE_ADDR (0x10 << 1) // DEFAULT address:0x10

void TFminiSTest(void)
{
	// init packet : [header] [len]
//	uint8_t TFminiS_req_packet[] = {0x5a, 0x04, 0x01, 0x5f}; 		// Obtain firmware version
//	uint8_t TFminiS_req_packet[] = {0x5a, 0x05, 0x0a, 0x01, 0x00};  		// I2C setting - Communication interface	setup
//	uint8_t TFminiS_req_packet[] = {0x5a, 0x04, 0x11, 0x6f}; 		// save settings
//	uint8_t TFminiS_req_packet[] = {0x5a, 0x04, 0x02, 0x60}; 		// system reset

//	uint8_t TFminiS_req_packet[] = {0x5a, 0x05, 0x00, 0x01, 0x60}; 		// obtain data frame(9bytes-cm)
//	uint8_t TFminiS_req_packet[] = {0x5a, 0x05, 0x05, 0x01, 0x65}; 		// set Output format: standard 9 bytes(cm)

	uint8_t TFminiS_req_packet[] = {0x5a, 0x05, 0x00, 0x06, 0x65}; 		// obtain data frame(9bytes-mm)
//	uint8_t TFminiS_req_packet[] = {0x5a, 0x05, 0x05, 0x06, 0x6a}; 		// set Output format: standard 9 bytes(mm)

	// I2C
	// ver1.
//	uint8_t TFminiAddr[1] = {0x10};
//	HAL_StatusTypeDef error;
//	uint8_t buffer[128] = {0x10};
//	error = HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDR, buffer, 3, HAL_MAX_DELAY);
//	if (error != HAL_OK) while()
//	while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);

	// ver2.
	uint8_t buf[1] = {0x10};
	uint8_t rxbuf[1] = {0};
	uint8_t rxdata[20] = {0};

	//////////////////////////////////
	// 1. write
	uint8_t ret = HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDR, TFminiS_req_packet, sizeof(TFminiS_req_packet), 10);

	if ( ret != HAL_OK ) {
	   sprintf(uartBuf, "Error TX : %d\n", ret);
	   HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);
	}
	else
	{
		HAL_Delay(100);

		 // 2. read
		 ret = HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDR|0x01, buf, sizeof(buf), 10);

		 for(int i=0; i<sizeof(rxdata); i++){
			 if ( ret == HAL_OK ){
				 ret = HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDR|0x01, rxbuf, sizeof(rxbuf), HAL_MAX_DELAY);
				 if ( ret == HAL_OK ){
					 sprintf(uartBuf, "%x \r", rxbuf[0]);
					 HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);
					 rxdata[i] = rxbuf[0];
				 }
			 }
		 }

	}

	// calc distance
	uint16_t distance = 0;
	for(int i=0; i<sizeof(rxdata); i++){
		if(rxdata[i] == 0x59 && rxdata[i+1] == 0x59){
			distance = rxdata[i+2]|(rxdata[i+3]<<8);
			break;
		}
	}
	sprintf(uartBuf, " -- distance : %d\n\n", distance);
	HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);


	 // UART
//	for(int i=0; i<sizeof(TFminiS_req_packet); i++){
//		TFminiS_req_packet[sizeof(TFminiS_req_packet)-1] += TFminiS_req_packet[i];
//	}

//	HAL_UART_Transmit(&huart3, (uint8_t *)TFminiS_req_packet, sizeof(TFminiS_req_packet), 100);
//
//	// request packet
//	HAL_UART_Transmit(&huart2, (uint8_t *)TFminiS_req_packet, sizeof(TFminiS_req_packet), 100);
//
//	for(int i=0; i<20; i++){
//		uint8_t buf = 0;
//		HAL_UART_Receive(&huart2, &buf, sizeof(buf), 10);
//		HAL_UART_Transmit(&huart3, &buf, sizeof(buf), 100);
//	}

	HAL_Delay(500);
}
//////////////////////////////////////////////////////////////////////////////////////
// API END
//////////////////////////////////////////////////////////////////////////////////////
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  MX_USART3_UART_Init();
  MX_UART5_Init();
  MX_I2C1_Init();
  MX_TIM2_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  // cup_lid dispensor board
  HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, sizeof(UART5_rxBuffer));

  // ultrasonic sensor
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);

  // loadcell
  hx711_init(&loadcellA,  hx711_sck_GPIO_Port, hx711_sck_Pin,  hx711_dout_GPIO_Port, hx711_dout_Pin, 'A');
  hx711_coef_set(&loadcellA, 354.5); // read afer calibration
  hx711_tare(&loadcellA, 10);

  hx711_init(&loadcellB,  hx711_sck_GPIO_Port, hx711_sck_Pin,  hx711_dout_GPIO_Port, hx711_dout_Pin, 'B');
  hx711_coef_set(&loadcellB, 354.5); // read afer calibration
  hx711_tare(&loadcellB, 10);

  // TFmimiS
//  HAL_UART_Receive_IT(&huart2, USART2_rxBuffer, sizeof(USART2_rxBuffer));


  // stepping motor
  // prescaler : 3 -> 180Mhz => period :
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
//	HAL_GPIO_WritePin(CupD_EN_GPIO_Port, CupD_EN_Pin, GPIO_PIN_SET); //EN - SET = enable MOTOR
//	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET); // DIR - Motor direction
//  //	  	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);



  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  iceDispenser_SetMode();
//	  relayTest();
//	  iceDetectionTest();
//	  uart_rx_dma_handler();
//	  Lidar3dTest();
//	  cup_lid_dispenserTest();
//	  loadCellTest();
//	  motorSpeedSensorTest();
//	  TFminiSTest();
//	  pcSerialTest();
//	  SteppingMotorTest();
//	  L298Ntest();
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 10000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_IC_InitTypeDef sConfigIC = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 3-1;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
  huart5.Init.BaudRate = 9600;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart5) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay0_GPIO_Port, Relay0_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ice01_Pin|ice02_Pin|ice03_Pin|Trig_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L298N_IN1_Pin|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, L298N_IN2_Pin|CupD_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(hx711_sck_GPIO_Port, hx711_sck_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : Relay0_Pin */
  GPIO_InitStruct.Pin = Relay0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(Relay0_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : ice01_Pin ice02_Pin ice03_Pin Trig_Pin */
  GPIO_InitStruct.Pin = ice01_Pin|ice02_Pin|ice03_Pin|Trig_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : L298N_IN1_Pin PA7 */
  GPIO_InitStruct.Pin = L298N_IN1_Pin|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : L298N_IN2_Pin CupD_EN_Pin */
  GPIO_InitStruct.Pin = L298N_IN2_Pin|CupD_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /*Configure GPIO pin : hx711_dout_Pin */
  GPIO_InitStruct.Pin = hx711_dout_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(hx711_dout_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : hx711_sck_Pin */
  GPIO_InitStruct.Pin = hx711_sck_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(hx711_sck_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : MotorSpeedSensor_DI1_Pin */
  GPIO_InitStruct.Pin = MotorSpeedSensor_DI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MotorSpeedSensor_DI1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
