/*
 * User_Lidar.c
 *
 *  Created on: Jan 27, 2023
 *      Author: Ethan
 */

#include "User_Lidar.h"

extern UART_HandleTypeDef huart3; // PC
extern UART_HandleTypeDef huart5; // Lidar1
extern UART_HandleTypeDef huart6; // Lidar2

// lidar
uint8_t lidar_req_packet[8]; // lidar request packet

char uartBuf[4000];			//used as buffer for the string to be send to PC


void Lidar3dTest(uint8_t version)
{
	requestPacket(SET_BAUDRATE, 57600);
	requestPacket(GET_DEVICE_INFO, 57600);
  HAL_Delay(2000);
	requestPacket(SET_BAUDRATE, 115200);
	requestPacket(GET_DEVICE_INFO, 115200);
	  HAL_Delay(2000);

	requestPacket(SET_BAUDRATE, 250000);
	requestPacket(GET_DEVICE_INFO, 250000);
	  HAL_Delay(2000);

	requestPacket(SET_BAUDRATE, 3000000);
	requestPacket(GET_DEVICE_INFO, 3000000);
	  HAL_Delay(2000);

}


void requestPacket(uint8_t packet_cmd, uint32_t value)
{
	// make packet
//	uint8_t* lidar_req_packet = makePacket(0,0);

	uint8_t packet_cmd = 0;
	uint8_t packet_value = 0x00;
	uint32_t value = 115200;

	switch(packet_cmd){
	case GET_DEVICE_INFO: // Get Device Info
		packet_cmd = 0x10;
	case RUN_2D_MODE: // Run 2D Mode
		packet_cmd = 0x01;
	case RUN_3D_MODE: // Run 3D Mode
		packet_cmd = 0x08;
	case RUN_DUAL_MODE: // Run Dual Mode
		packet_cmd = 0x07;

	case STOP: // Stop
		packet_cmd = 0x02;
	case SET_3D_PULSE_DURATION_REQUEST: // Set 3D Pulse Duration Request
		packet_cmd = 0x0c;
	case SET_FREQ_REQUEST: // Frequency Setting Request
		packet_cmd = 0x0f;
	case SET_SENSITIVITY_REQUEST: // Sensitivity Setting Request
		packet_cmd = 0x11;
	case SET_BAUDRATE: // Set Serial Baud Rate
		packet_cmd = 0x12;
		switch(value){
		case 57600:
			packet_value = 0x39;
			huart5.Init.BaudRate = 57600;
		case 115200:
			packet_value = 0xaa;
			huart5.Init.BaudRate = 115200;
		case 250000:
			packet_value = 0x77;
			huart5.Init.BaudRate = 250000;
		case 3000000:
			packet_value = 0x55;
			huart5.Init.BaudRate = 3000000;
		}
		if (HAL_UART_Init(&huart5) != HAL_OK)
		{
			Error_Handler();
		}
		break;
	}
	uint8_t lidar_req_packet[] = {0x5A, 0x77, 0xFF, 0x02, 0x00, packet_cmd, packet_value, 0x00};

//	uint8_t lidar_req_packet[] = {0x5a, 0x77, 0xff, 0x02, 0x00, 0x12, 0xaa, 0x00};
//	if(version == 1)
//	{
//		// get device info -> checksum: 0x12
//		lidar_req_packet[5] = 0x10;
//		lidar_req_packet[6] = 0x00;
//
//		// Run 2D Mode REQEST -> checksum: 0x03
//
////		lidar_req_packet[5] = 0x01;
////		lidar_req_packet[6] = 0x00;
//
//		// Run Dual Mode REQEST
////		lidar_req_packet[5] = 0x07;
////		lidar_req_packet[6] = 0x00;
//	}

	// checksum
	uint8_t CheckSum = 0;
	int PAYLOAD_LENGTH_LSB_INDEX = 3;
	for(int i = PAYLOAD_LENGTH_LSB_INDEX; i < sizeof(lidar_req_packet)- 2; i++)
	{
		CheckSum ^= lidar_req_packet[i];
	}
	lidar_req_packet[7] = CheckSum;

	// print request packet
//	sprintf(uartBuf, "request packet : \r");			//convert to string
//	HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);
//	for(int i=0; i<sizeof(lidar_req_packet); i++){
//		sprintf(uartBuf, "%0.2x \r", lidar_req_packet[i]);			//convert to string
//		HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);
//	}

	// request packet
	uint8_t tmpBuf[15] = {0,};
	HAL_UART_Transmit(&huart5, (uint8_t *)lidar_req_packet, sizeof(lidar_req_packet), 100);

	// receive packet
	while(1)
	{
		HAL_UART_Receive(&huart5, (uint8_t *)tmpBuf, sizeof(tmpBuf), 100);
		for(int i=0; i<sizeof(tmpBuf); i++){
			sprintf(uartBuf, "%0.2x \r", tmpBuf[i]);
			HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);
		}
		sprintf(uartBuf, "\n");
		HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);

		uint8_t stx = 0x5a;
		if(tmpBuf == stx)
		{
			sprintf(uartBuf, "received!\n");			//convert to string
			HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, sizeof(uartBuf), 100);
			break;
		}
	}

	HAL_Delay(1000);
}
