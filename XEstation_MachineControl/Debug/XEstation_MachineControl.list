
XEstation_MachineControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000894c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08008afc  08008afc  00018afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d24  08008d24  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08008d24  08008d24  00018d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d2c  08008d2c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d2c  08008d2c  00018d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d30  08008d30  00018d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          00004cb0  200001f4  200001f4  000201f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004ea4  20004ea4  000201f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020601  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040dd  00000000  00000000  00040825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  00044908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001548  00000000  00000000  00045fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000533a  00000000  00000000  00047510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019874  00000000  00000000  0004c84a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e74b3  00000000  00000000  000660be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014d571  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006680  00000000  00000000  0014d5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008ae4 	.word	0x08008ae4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	08008ae4 	.word	0x08008ae4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);

int _write(int file, char *ptr, int len)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 10) == HAL_OK)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	b29a      	uxth	r2, r3
 8000598:	230a      	movs	r3, #10
 800059a:	68b9      	ldr	r1, [r7, #8]
 800059c:	4806      	ldr	r0, [pc, #24]	; (80005b8 <_write+0x30>)
 800059e:	f003 faa8 	bl	8003af2 <HAL_UART_Transmit>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d101      	bne.n	80005ac <_write+0x24>
		return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	e001      	b.n	80005b0 <_write+0x28>
	return -1;
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20004c5c 	.word	0x20004c5c

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f001 f869 	bl	8001698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f85f 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fb27 	bl	8000c1c <MX_GPIO_Init>
  MX_TIM1_Init();
 80005ce:	f000 f8cb 	bl	8000768 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005d2:	f000 f91b 	bl	800080c <MX_TIM2_Init>
  MX_TIM3_Init();
 80005d6:	f000 f99b 	bl	8000910 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005da:	f000 fa1d 	bl	8000a18 <MX_TIM4_Init>
  MX_UART5_Init();
 80005de:	f000 fa9f 	bl	8000b20 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80005e2:	f000 fac7 	bl	8000b74 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80005e6:	f000 faef 	bl	8000bc8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  initCupLidDispensor();
 80005ea:	f007 f945 	bl	8007878 <initCupLidDispensor>
  init_powderMachine();
 80005ee:	f006 ffbd 	bl	800756c <init_powderMachine>
  init_iceDispensor();
 80005f2:	f007 f94b 	bl	800788c <init_iceDispensor>

//  SteppingMotorTest();
  printf("ice dispenser test start !\n");
 80005f6:	4819      	ldr	r0, [pc, #100]	; (800065c <main+0xa0>)
 80005f8:	f007 fc16 	bl	8007e28 <puts>

  // HOT AMERICANO
  uint16_t water_time = 0;//3500;
 80005fc:	2300      	movs	r3, #0
 80005fe:	80fb      	strh	r3, [r7, #6]
  uint16_t ice_time = 10000;//3500;
 8000600:	f242 7310 	movw	r3, #10000	; 0x2710
 8000604:	80bb      	strh	r3, [r7, #4]
  startExit(water_time, ice_time);
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	88ba      	ldrh	r2, [r7, #4]
 800060a:	4611      	mov	r1, r2
 800060c:	4618      	mov	r0, r3
 800060e:	f007 f9cb 	bl	80079a8 <startExit>
//  HAL_Delay(1000);//0.8sec x 0.85sec
//  water_time = 0;
//  ice_time = 500;
//  startExit(water_time, ice_time);

  printf("ice dispenser test finished !\n\n");
 8000612:	4813      	ldr	r0, [pc, #76]	; (8000660 <main+0xa4>)
 8000614:	f007 fc08 	bl	8007e28 <puts>

//  MalchaTest((int)(16.25*1000)); //unit : mg<hot_water_amout>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000618:	f004 fa2a 	bl	8004a70 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800061c:	4a11      	ldr	r2, [pc, #68]	; (8000664 <main+0xa8>)
 800061e:	2100      	movs	r1, #0
 8000620:	4811      	ldr	r0, [pc, #68]	; (8000668 <main+0xac>)
 8000622:	f004 fa6f 	bl	8004b04 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a10      	ldr	r2, [pc, #64]	; (800066c <main+0xb0>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800062c:	4a10      	ldr	r2, [pc, #64]	; (8000670 <main+0xb4>)
 800062e:	2100      	movs	r1, #0
 8000630:	4810      	ldr	r0, [pc, #64]	; (8000674 <main+0xb8>)
 8000632:	f004 fa67 	bl	8004b04 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <main+0xbc>)
 800063a:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 800063c:	4a0f      	ldr	r2, [pc, #60]	; (800067c <main+0xc0>)
 800063e:	2100      	movs	r1, #0
 8000640:	480f      	ldr	r0, [pc, #60]	; (8000680 <main+0xc4>)
 8000642:	f004 fa5f 	bl	8004b04 <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <main+0xc8>)
 800064a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800064c:	f004 fa34 	bl	8004ab8 <osKernelStart>
    /* USER CODE BEGIN 3 */
//	  SteppingMotorTest();
//	  L298Ntest();
//	  heaterTest();

	HAL_Delay(500);
 8000650:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000654:	f001 f862 	bl	800171c <HAL_Delay>
 8000658:	e7fa      	b.n	8000650 <main+0x94>
 800065a:	bf00      	nop
 800065c:	08008b20 	.word	0x08008b20
 8000660:	08008b3c 	.word	0x08008b3c
 8000664:	08008c08 	.word	0x08008c08
 8000668:	08000ec9 	.word	0x08000ec9
 800066c:	20004c10 	.word	0x20004c10
 8000670:	08008c2c 	.word	0x08008c2c
 8000674:	08000eed 	.word	0x08000eed
 8000678:	20004d2c 	.word	0x20004d2c
 800067c:	08008c50 	.word	0x08008c50
 8000680:	08000f11 	.word	0x08000f11
 8000684:	20004d78 	.word	0x20004d78

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	; 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f007 fadd 	bl	8007c56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <SystemClock_Config+0xd8>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a2a      	ldr	r2, [pc, #168]	; (8000760 <SystemClock_Config+0xd8>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <SystemClock_Config+0xd8>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <SystemClock_Config+0xdc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a24      	ldr	r2, [pc, #144]	; (8000764 <SystemClock_Config+0xdc>)
 80006d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xdc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f8:	2308      	movs	r3, #8
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006fc:	23b4      	movs	r3, #180	; 0xb4
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f001 fbb3 	bl	8001e78 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000718:	f000 fc1e 	bl	8000f58 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800071c:	f001 fb5c 	bl	8001dd8 <HAL_PWREx_EnableOverDrive>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000726:	f000 fc17 	bl	8000f58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000736:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2105      	movs	r1, #5
 8000748:	4618      	mov	r0, r3
 800074a:	f001 fe0d 	bl	8002368 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000754:	f000 fc00 	bl	8000f58 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	; 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	463b      	mov	r3, r7
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_TIM1_Init+0x9c>)
 8000786:	4a20      	ldr	r2, [pc, #128]	; (8000808 <MX_TIM1_Init+0xa0>)
 8000788:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1800-1;
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_TIM1_Init+0x9c>)
 800078c:	f240 7207 	movw	r2, #1799	; 0x707
 8000790:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_TIM1_Init+0x9c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_TIM1_Init+0x9c>)
 800079a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800079e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_TIM1_Init+0x9c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_TIM1_Init+0x9c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_TIM1_Init+0x9c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007b2:	4814      	ldr	r0, [pc, #80]	; (8000804 <MX_TIM1_Init+0x9c>)
 80007b4:	f001 ffda 	bl	800276c <HAL_TIM_Base_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80007be:	f000 fbcb 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	4619      	mov	r1, r3
 80007ce:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_TIM1_Init+0x9c>)
 80007d0:	f002 fbe0 	bl	8002f94 <HAL_TIM_ConfigClockSource>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80007da:	f000 fbbd 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <MX_TIM1_Init+0x9c>)
 80007ec:	f003 f8a4 	bl	8003938 <HAL_TIMEx_MasterConfigSynchronization>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80007f6:	f000 fbaf 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20004d30 	.word	0x20004d30
 8000808:	40010000 	.word	0x40010000

0800080c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08e      	sub	sp, #56	; 0x38
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800082c:	463b      	mov	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
 800083a:	615a      	str	r2, [r3, #20]
 800083c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800083e:	4b33      	ldr	r3, [pc, #204]	; (800090c <MX_TIM2_Init+0x100>)
 8000840:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000844:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000846:	4b31      	ldr	r3, [pc, #196]	; (800090c <MX_TIM2_Init+0x100>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b2f      	ldr	r3, [pc, #188]	; (800090c <MX_TIM2_Init+0x100>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000852:	4b2e      	ldr	r3, [pc, #184]	; (800090c <MX_TIM2_Init+0x100>)
 8000854:	f04f 32ff 	mov.w	r2, #4294967295
 8000858:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085a:	4b2c      	ldr	r3, [pc, #176]	; (800090c <MX_TIM2_Init+0x100>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000860:	4b2a      	ldr	r3, [pc, #168]	; (800090c <MX_TIM2_Init+0x100>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000866:	4829      	ldr	r0, [pc, #164]	; (800090c <MX_TIM2_Init+0x100>)
 8000868:	f001 ff80 	bl	800276c <HAL_TIM_Base_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000872:	f000 fb71 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000876:	4825      	ldr	r0, [pc, #148]	; (800090c <MX_TIM2_Init+0x100>)
 8000878:	f002 f8a0 	bl	80029bc <HAL_TIM_PWM_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000882:	f000 fb69 	bl	8000f58 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800088e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000892:	4619      	mov	r1, r3
 8000894:	481d      	ldr	r0, [pc, #116]	; (800090c <MX_TIM2_Init+0x100>)
 8000896:	f002 fc44 	bl	8003122 <HAL_TIM_SlaveConfigSynchro>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80008a0:	f000 fb5a 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	4816      	ldr	r0, [pc, #88]	; (800090c <MX_TIM2_Init+0x100>)
 80008b4:	f003 f840 	bl	8003938 <HAL_TIMEx_MasterConfigSynchronization>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80008be:	f000 fb4b 	bl	8000f58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c2:	2360      	movs	r3, #96	; 0x60
 80008c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	2200      	movs	r2, #0
 80008d6:	4619      	mov	r1, r3
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <MX_TIM2_Init+0x100>)
 80008da:	f002 fa99 	bl	8002e10 <HAL_TIM_PWM_ConfigChannel>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80008e4:	f000 fb38 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	2204      	movs	r2, #4
 80008ec:	4619      	mov	r1, r3
 80008ee:	4807      	ldr	r0, [pc, #28]	; (800090c <MX_TIM2_Init+0x100>)
 80008f0:	f002 fa8e 	bl	8002e10 <HAL_TIM_PWM_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80008fa:	f000 fb2d 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008fe:	4803      	ldr	r0, [pc, #12]	; (800090c <MX_TIM2_Init+0x100>)
 8000900:	f000 fbc4 	bl	800108c <HAL_TIM_MspPostInit>

}
 8000904:	bf00      	nop
 8000906:	3738      	adds	r7, #56	; 0x38
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20004dc0 	.word	0x20004dc0

08000910 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08e      	sub	sp, #56	; 0x38
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
 800093e:	615a      	str	r2, [r3, #20]
 8000940:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000942:	4b33      	ldr	r3, [pc, #204]	; (8000a10 <MX_TIM3_Init+0x100>)
 8000944:	4a33      	ldr	r2, [pc, #204]	; (8000a14 <MX_TIM3_Init+0x104>)
 8000946:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000948:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <MX_TIM3_Init+0x100>)
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b30      	ldr	r3, [pc, #192]	; (8000a10 <MX_TIM3_Init+0x100>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000954:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <MX_TIM3_Init+0x100>)
 8000956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800095a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <MX_TIM3_Init+0x100>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <MX_TIM3_Init+0x100>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000968:	4829      	ldr	r0, [pc, #164]	; (8000a10 <MX_TIM3_Init+0x100>)
 800096a:	f001 feff 	bl	800276c <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000974:	f000 faf0 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000978:	4825      	ldr	r0, [pc, #148]	; (8000a10 <MX_TIM3_Init+0x100>)
 800097a:	f002 f81f 	bl	80029bc <HAL_TIM_PWM_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000984:	f000 fae8 	bl	8000f58 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000994:	4619      	mov	r1, r3
 8000996:	481e      	ldr	r0, [pc, #120]	; (8000a10 <MX_TIM3_Init+0x100>)
 8000998:	f002 fbc3 	bl	8003122 <HAL_TIM_SlaveConfigSynchro>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80009a2:	f000 fad9 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4816      	ldr	r0, [pc, #88]	; (8000a10 <MX_TIM3_Init+0x100>)
 80009b6:	f002 ffbf 	bl	8003938 <HAL_TIMEx_MasterConfigSynchronization>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80009c0:	f000 faca 	bl	8000f58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c4:	2360      	movs	r3, #96	; 0x60
 80009c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	2200      	movs	r2, #0
 80009d8:	4619      	mov	r1, r3
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <MX_TIM3_Init+0x100>)
 80009dc:	f002 fa18 	bl	8002e10 <HAL_TIM_PWM_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80009e6:	f000 fab7 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ea:	463b      	mov	r3, r7
 80009ec:	2204      	movs	r2, #4
 80009ee:	4619      	mov	r1, r3
 80009f0:	4807      	ldr	r0, [pc, #28]	; (8000a10 <MX_TIM3_Init+0x100>)
 80009f2:	f002 fa0d 	bl	8002e10 <HAL_TIM_PWM_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80009fc:	f000 faac 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a00:	4803      	ldr	r0, [pc, #12]	; (8000a10 <MX_TIM3_Init+0x100>)
 8000a02:	f000 fb43 	bl	800108c <HAL_TIM_MspPostInit>

}
 8000a06:	bf00      	nop
 8000a08:	3738      	adds	r7, #56	; 0x38
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20004ca0 	.word	0x20004ca0
 8000a14:	40000400 	.word	0x40000400

08000a18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08e      	sub	sp, #56	; 0x38
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
 8000a46:	615a      	str	r2, [r3, #20]
 8000a48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a4a:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <MX_TIM4_Init+0x100>)
 8000a4c:	4a33      	ldr	r2, [pc, #204]	; (8000b1c <MX_TIM4_Init+0x104>)
 8000a4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a50:	4b31      	ldr	r3, [pc, #196]	; (8000b18 <MX_TIM4_Init+0x100>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <MX_TIM4_Init+0x100>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	; (8000b18 <MX_TIM4_Init+0x100>)
 8000a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a64:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <MX_TIM4_Init+0x100>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6a:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <MX_TIM4_Init+0x100>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a70:	4829      	ldr	r0, [pc, #164]	; (8000b18 <MX_TIM4_Init+0x100>)
 8000a72:	f001 fe7b 	bl	800276c <HAL_TIM_Base_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000a7c:	f000 fa6c 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a80:	4825      	ldr	r0, [pc, #148]	; (8000b18 <MX_TIM4_Init+0x100>)
 8000a82:	f001 ff9b 	bl	80029bc <HAL_TIM_PWM_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000a8c:	f000 fa64 	bl	8000f58 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	481e      	ldr	r0, [pc, #120]	; (8000b18 <MX_TIM4_Init+0x100>)
 8000aa0:	f002 fb3f 	bl	8003122 <HAL_TIM_SlaveConfigSynchro>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000aaa:	f000 fa55 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4816      	ldr	r0, [pc, #88]	; (8000b18 <MX_TIM4_Init+0x100>)
 8000abe:	f002 ff3b 	bl	8003938 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000ac8:	f000 fa46 	bl	8000f58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000acc:	2360      	movs	r3, #96	; 0x60
 8000ace:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	2208      	movs	r2, #8
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_TIM4_Init+0x100>)
 8000ae4:	f002 f994 	bl	8002e10 <HAL_TIM_PWM_ConfigChannel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000aee:	f000 fa33 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000af2:	463b      	mov	r3, r7
 8000af4:	220c      	movs	r2, #12
 8000af6:	4619      	mov	r1, r3
 8000af8:	4807      	ldr	r0, [pc, #28]	; (8000b18 <MX_TIM4_Init+0x100>)
 8000afa:	f002 f989 	bl	8002e10 <HAL_TIM_PWM_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8000b04:	f000 fa28 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b08:	4803      	ldr	r0, [pc, #12]	; (8000b18 <MX_TIM4_Init+0x100>)
 8000b0a:	f000 fabf 	bl	800108c <HAL_TIM_MspPostInit>

}
 8000b0e:	bf00      	nop
 8000b10:	3738      	adds	r7, #56	; 0x38
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20004c14 	.word	0x20004c14
 8000b1c:	40000800 	.word	0x40000800

08000b20 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_UART5_Init+0x4c>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <MX_UART5_Init+0x50>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <MX_UART5_Init+0x4c>)
 8000b2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b30:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_UART5_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_UART5_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_UART5_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_UART5_Init+0x4c>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <MX_UART5_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_UART5_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_UART5_Init+0x4c>)
 8000b58:	f002 ff7e 	bl	8003a58 <HAL_UART_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000b62:	f000 f9f9 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20004ce8 	.word	0x20004ce8
 8000b70:	40005000 	.word	0x40005000

08000b74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <MX_USART3_UART_Init+0x50>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000bac:	f002 ff54 	bl	8003a58 <HAL_UART_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bb6:	f000 f9cf 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20004c5c 	.word	0x20004c5c
 8000bc4:	40004800 	.word	0x40004800

08000bc8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_USART6_UART_Init+0x4c>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <MX_USART6_UART_Init+0x50>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <MX_USART6_UART_Init+0x4c>)
 8000bd4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bd8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_USART6_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_USART6_UART_Init+0x4c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_USART6_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_USART6_UART_Init+0x4c>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_USART6_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_USART6_UART_Init+0x4c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_USART6_UART_Init+0x4c>)
 8000c00:	f002 ff2a 	bl	8003a58 <HAL_UART_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c0a:	f000 f9a5 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20004d7c 	.word	0x20004d7c
 8000c18:	40011400 	.word	0x40011400

08000c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08e      	sub	sp, #56	; 0x38
 8000c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	623b      	str	r3, [r7, #32]
 8000c36:	4b9b      	ldr	r3, [pc, #620]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a9a      	ldr	r2, [pc, #616]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000c3c:	f043 0310 	orr.w	r3, r3, #16
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b98      	ldr	r3, [pc, #608]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0310 	and.w	r3, r3, #16
 8000c4a:	623b      	str	r3, [r7, #32]
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
 8000c52:	4b94      	ldr	r3, [pc, #592]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a93      	ldr	r2, [pc, #588]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000c58:	f043 0320 	orr.w	r3, r3, #32
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b91      	ldr	r3, [pc, #580]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0320 	and.w	r3, r3, #32
 8000c66:	61fb      	str	r3, [r7, #28]
 8000c68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
 8000c6e:	4b8d      	ldr	r3, [pc, #564]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a8c      	ldr	r2, [pc, #560]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b8a      	ldr	r3, [pc, #552]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c82:	61bb      	str	r3, [r7, #24]
 8000c84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	4b86      	ldr	r3, [pc, #536]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a85      	ldr	r2, [pc, #532]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b83      	ldr	r3, [pc, #524]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b7f      	ldr	r3, [pc, #508]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a7e      	ldr	r2, [pc, #504]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b7c      	ldr	r3, [pc, #496]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b78      	ldr	r3, [pc, #480]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a77      	ldr	r2, [pc, #476]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b75      	ldr	r3, [pc, #468]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	4b71      	ldr	r3, [pc, #452]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a70      	ldr	r2, [pc, #448]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b6e      	ldr	r3, [pc, #440]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b6a      	ldr	r3, [pc, #424]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a69      	ldr	r2, [pc, #420]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000d00:	f043 0308 	orr.w	r3, r3, #8
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b67      	ldr	r3, [pc, #412]	; (8000ea4 <MX_GPIO_Init+0x288>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PD02_DCmix_EN_Pin|PD04_DCpowder_IN2_Pin|PD04_DCpowder_IN1_Pin|PD01_DCmix_IN2_Pin
 8000d12:	2200      	movs	r2, #0
 8000d14:	f64f 71cd 	movw	r1, #65485	; 0xffcd
 8000d18:	4863      	ldr	r0, [pc, #396]	; (8000ea8 <MX_GPIO_Init+0x28c>)
 8000d1a:	f001 f843 	bl	8001da4 <HAL_GPIO_WritePin>
                          |PD01_DCmix_IN1_Pin|CupD_STP_Pin|PD03_DCmix_IN1_Pin|CupD_DIR_Pin
                          |PD03_DCmix_IN2_Pin|LidD_STP_Pin|PD03_DCmix_EN_Pin|PD05_DCmix_IN1_Pin
                          |PD04_DCmix_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PD02_DCpowder_IN1_Pin|PD01_DCpowder_IN1_Pin|PD01_DCpowder_IN2_Pin|PD05_DCpowder_IN1_Pin
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f24f 71ac 	movw	r1, #63404	; 0xf7ac
 8000d24:	4861      	ldr	r0, [pc, #388]	; (8000eac <MX_GPIO_Init+0x290>)
 8000d26:	f001 f83d 	bl	8001da4 <HAL_GPIO_WritePin>
                          |PD04_DCpowder_EN_Pin|PD05_DCpowder_IN2_Pin|PD01_DCpowder_EN_Pin|CF01_heat_IN2_Pin
                          |CupD_EN_Pin|LidD_EN_Pin|LidD_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PD02_DCpowder_EN_Pin|PD02_DCpowder_IN2_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2103      	movs	r1, #3
 8000d2e:	4860      	ldr	r0, [pc, #384]	; (8000eb0 <MX_GPIO_Init+0x294>)
 8000d30:	f001 f838 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ICE01_water_Pin|ICE01_mix_Pin|PD01_heat_IN1_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2149      	movs	r1, #73	; 0x49
 8000d38:	485e      	ldr	r0, [pc, #376]	; (8000eb4 <MX_GPIO_Init+0x298>)
 8000d3a:	f001 f833 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PD04_DCmix_IN1_Pin|ICE01_ice_Pin|CF01_heat_IN1_Pin|PD03_heat_IN1_Pin
 8000d3e:	2200      	movs	r2, #0
 8000d40:	21f9      	movs	r1, #249	; 0xf9
 8000d42:	485d      	ldr	r0, [pc, #372]	; (8000eb8 <MX_GPIO_Init+0x29c>)
 8000d44:	f001 f82e 	bl	8001da4 <HAL_GPIO_WritePin>
                          |PD03_heat_IN2_Pin|PD04_heat_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PD04_DCmix_IN2_Pin|PD05_DCmix_IN2_Pin|PD05_DCmix_EN_Pin|PD02_heat_IN2_Pin
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f64b 4121 	movw	r1, #48161	; 0xbc21
 8000d4e:	485b      	ldr	r0, [pc, #364]	; (8000ebc <MX_GPIO_Init+0x2a0>)
 8000d50:	f001 f828 	bl	8001da4 <HAL_GPIO_WritePin>
                          |PD02_heat_IN1_Pin|PD01_heat_IN2_Pin|PD04_heat_IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PD03_DCpowder_EN_Pin|PD05_DCpowder_EN_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2103      	movs	r1, #3
 8000d58:	4859      	ldr	r0, [pc, #356]	; (8000ec0 <MX_GPIO_Init+0x2a4>)
 8000d5a:	f001 f823 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD02_DCmix_IN2_Pin|PD02_DCmix_IN1_Pin|PD01_DCmix_EN_Pin|PD05_heat_IN1_Pin
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f64f 01e3 	movw	r1, #63715	; 0xf8e3
 8000d64:	4857      	ldr	r0, [pc, #348]	; (8000ec4 <MX_GPIO_Init+0x2a8>)
 8000d66:	f001 f81d 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD02_DCmix_EN_Pin PD04_DCpowder_IN2_Pin PD04_DCpowder_IN1_Pin PD01_DCmix_IN2_Pin
                           PD01_DCmix_IN1_Pin CupD_STP_Pin PD03_DCmix_IN1_Pin CupD_DIR_Pin
                           PD03_DCmix_IN2_Pin LidD_STP_Pin PD03_DCmix_EN_Pin PD05_DCmix_IN1_Pin
                           PD04_DCmix_EN_Pin */
  GPIO_InitStruct.Pin = PD02_DCmix_EN_Pin|PD04_DCpowder_IN2_Pin|PD04_DCpowder_IN1_Pin|PD01_DCmix_IN2_Pin
 8000d6a:	f64f 73cd 	movw	r3, #65485	; 0xffcd
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD01_DCmix_IN1_Pin|CupD_STP_Pin|PD03_DCmix_IN1_Pin|CupD_DIR_Pin
                          |PD03_DCmix_IN2_Pin|LidD_STP_Pin|PD03_DCmix_EN_Pin|PD05_DCmix_IN1_Pin
                          |PD04_DCmix_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	4849      	ldr	r0, [pc, #292]	; (8000ea8 <MX_GPIO_Init+0x28c>)
 8000d84:	f000 fe62 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCpowder_IN1_Pin PD01_DCpowder_IN1_Pin PD01_DCpowder_IN2_Pin PD05_DCpowder_IN1_Pin
                           PD04_DCpowder_EN_Pin PD05_DCpowder_IN2_Pin PD01_DCpowder_EN_Pin CF01_heat_IN2_Pin
                           CupD_EN_Pin LidD_EN_Pin LidD_DIR_Pin */
  GPIO_InitStruct.Pin = PD02_DCpowder_IN1_Pin|PD01_DCpowder_IN1_Pin|PD01_DCpowder_IN2_Pin|PD05_DCpowder_IN1_Pin
 8000d88:	f24f 73ac 	movw	r3, #63404	; 0xf7ac
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD04_DCpowder_EN_Pin|PD05_DCpowder_IN2_Pin|PD01_DCpowder_EN_Pin|CF01_heat_IN2_Pin
                          |CupD_EN_Pin|LidD_EN_Pin|LidD_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4842      	ldr	r0, [pc, #264]	; (8000eac <MX_GPIO_Init+0x290>)
 8000da2:	f000 fe53 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : Lid_up_Pin */
  GPIO_InitStruct.Pin = Lid_up_Pin;
 8000da6:	2310      	movs	r3, #16
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Lid_up_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	483c      	ldr	r0, [pc, #240]	; (8000eac <MX_GPIO_Init+0x290>)
 8000dba:	f000 fe47 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCpowder_EN_Pin PD02_DCpowder_IN2_Pin */
  GPIO_InitStruct.Pin = PD02_DCpowder_EN_Pin|PD02_DCpowder_IN2_Pin;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4836      	ldr	r0, [pc, #216]	; (8000eb0 <MX_GPIO_Init+0x294>)
 8000dd6:	f000 fe39 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ICE01_water_Pin ICE01_mix_Pin PD01_heat_IN1_Pin */
  GPIO_InitStruct.Pin = ICE01_water_Pin|ICE01_mix_Pin|PD01_heat_IN1_Pin;
 8000dda:	2349      	movs	r3, #73	; 0x49
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dee:	4619      	mov	r1, r3
 8000df0:	4830      	ldr	r0, [pc, #192]	; (8000eb4 <MX_GPIO_Init+0x298>)
 8000df2:	f000 fe2b 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : Cup_down_Pin */
  GPIO_InitStruct.Pin = Cup_down_Pin;
 8000df6:	2304      	movs	r3, #4
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Cup_down_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	4619      	mov	r1, r3
 8000e08:	482a      	ldr	r0, [pc, #168]	; (8000eb4 <MX_GPIO_Init+0x298>)
 8000e0a:	f000 fe1f 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD04_DCmix_IN1_Pin ICE01_ice_Pin CF01_heat_IN1_Pin PD03_heat_IN1_Pin
                           PD03_heat_IN2_Pin PD04_heat_IN2_Pin */
  GPIO_InitStruct.Pin = PD04_DCmix_IN1_Pin|ICE01_ice_Pin|CF01_heat_IN1_Pin|PD03_heat_IN1_Pin
 8000e0e:	23f9      	movs	r3, #249	; 0xf9
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD03_heat_IN2_Pin|PD04_heat_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	4824      	ldr	r0, [pc, #144]	; (8000eb8 <MX_GPIO_Init+0x29c>)
 8000e26:	f000 fe11 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD04_DCmix_IN2_Pin PD05_DCmix_IN2_Pin PD05_DCmix_EN_Pin PD02_heat_IN2_Pin
                           PD02_heat_IN1_Pin PD01_heat_IN2_Pin PD04_heat_IN1_Pin */
  GPIO_InitStruct.Pin = PD04_DCmix_IN2_Pin|PD05_DCmix_IN2_Pin|PD05_DCmix_EN_Pin|PD02_heat_IN2_Pin
 8000e2a:	f64b 4321 	movw	r3, #48161	; 0xbc21
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD02_heat_IN1_Pin|PD01_heat_IN2_Pin|PD04_heat_IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e40:	4619      	mov	r1, r3
 8000e42:	481e      	ldr	r0, [pc, #120]	; (8000ebc <MX_GPIO_Init+0x2a0>)
 8000e44:	f000 fe02 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Cup_up_Pin Lid_down_Pin */
  GPIO_InitStruct.Pin = Cup_up_Pin|Lid_down_Pin;
 8000e48:	2342      	movs	r3, #66	; 0x42
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4818      	ldr	r0, [pc, #96]	; (8000ebc <MX_GPIO_Init+0x2a0>)
 8000e5c:	f000 fdf6 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD03_DCpowder_EN_Pin PD05_DCpowder_EN_Pin */
  GPIO_InitStruct.Pin = PD03_DCpowder_EN_Pin|PD05_DCpowder_EN_Pin;
 8000e60:	2303      	movs	r3, #3
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e74:	4619      	mov	r1, r3
 8000e76:	4812      	ldr	r0, [pc, #72]	; (8000ec0 <MX_GPIO_Init+0x2a4>)
 8000e78:	f000 fde8 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCmix_IN2_Pin PD02_DCmix_IN1_Pin PD01_DCmix_EN_Pin PD05_heat_IN1_Pin
                           PD05_heat_IN2_Pin PD03_DCpowder_IN1_Pin PD03_DCpowder_IN2_Pin PD_Fan02_relay_Pin
                           PD_Fan01_relay_Pin ICE01_relay_Pin */
  GPIO_InitStruct.Pin = PD02_DCmix_IN2_Pin|PD02_DCmix_IN1_Pin|PD01_DCmix_EN_Pin|PD05_heat_IN1_Pin
 8000e7c:	f64f 03e3 	movw	r3, #63715	; 0xf8e3
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD05_heat_IN2_Pin|PD03_DCpowder_IN1_Pin|PD03_DCpowder_IN2_Pin|PD_Fan02_relay_Pin
                          |PD_Fan01_relay_Pin|ICE01_relay_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e92:	4619      	mov	r1, r3
 8000e94:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <MX_GPIO_Init+0x2a8>)
 8000e96:	f000 fdd9 	bl	8001a4c <HAL_GPIO_Init>

}
 8000e9a:	bf00      	nop
 8000e9c:	3738      	adds	r7, #56	; 0x38
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40021400 	.word	0x40021400
 8000eb0:	40021c00 	.word	0x40021c00
 8000eb4:	40020800 	.word	0x40020800
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	40020400 	.word	0x40020400
 8000ec0:	40021800 	.word	0x40021800
 8000ec4:	40020c00 	.word	0x40020c00

08000ec8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("task01\n");
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <StartDefaultTask+0x20>)
 8000ed2:	f006 ffa9 	bl	8007e28 <puts>
	HAL_Delay(1000);
 8000ed6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eda:	f000 fc1f 	bl	800171c <HAL_Delay>
    osDelay(1);
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f003 fea2 	bl	8004c28 <osDelay>
	printf("task01\n");
 8000ee4:	e7f4      	b.n	8000ed0 <StartDefaultTask+0x8>
 8000ee6:	bf00      	nop
 8000ee8:	08008b5c 	.word	0x08008b5c

08000eec <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	printf("task02\n");
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <StartTask02+0x20>)
 8000ef6:	f006 ff97 	bl	8007e28 <puts>
	HAL_Delay(1000);
 8000efa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000efe:	f000 fc0d 	bl	800171c <HAL_Delay>

    osDelay(1);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f003 fe90 	bl	8004c28 <osDelay>
	printf("task02\n");
 8000f08:	e7f4      	b.n	8000ef4 <StartTask02+0x8>
 8000f0a:	bf00      	nop
 8000f0c:	08008b64 	.word	0x08008b64

08000f10 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	printf("task03\n");
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <StartTask03+0x20>)
 8000f1a:	f006 ff85 	bl	8007e28 <puts>
	HAL_Delay(1000);
 8000f1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f22:	f000 fbfb 	bl	800171c <HAL_Delay>

    osDelay(1);
 8000f26:	2001      	movs	r0, #1
 8000f28:	f003 fe7e 	bl	8004c28 <osDelay>
	printf("task03\n");
 8000f2c:	e7f4      	b.n	8000f18 <StartTask03+0x8>
 8000f2e:	bf00      	nop
 8000f30:	08008b6c 	.word	0x08008b6c

08000f34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f46:	f000 fbc9 	bl	80016dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40001c00 	.word	0x40001c00

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <Error_Handler+0x8>
	...

08000f64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f78:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	210f      	movs	r1, #15
 8000fa6:	f06f 0001 	mvn.w	r0, #1
 8000faa:	f000 fc93 	bl	80018d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800

08000fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a2c      	ldr	r2, [pc, #176]	; (800107c <HAL_TIM_Base_MspInit+0xc0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10e      	bne.n	8000fec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <HAL_TIM_Base_MspInit+0xc4>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a2a      	ldr	r2, [pc, #168]	; (8001080 <HAL_TIM_Base_MspInit+0xc4>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b28      	ldr	r3, [pc, #160]	; (8001080 <HAL_TIM_Base_MspInit+0xc4>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fea:	e042      	b.n	8001072 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff4:	d116      	bne.n	8001024 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <HAL_TIM_Base_MspInit+0xc4>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	4a20      	ldr	r2, [pc, #128]	; (8001080 <HAL_TIM_Base_MspInit+0xc4>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6413      	str	r3, [r2, #64]	; 0x40
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <HAL_TIM_Base_MspInit+0xc4>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2105      	movs	r1, #5
 8001016:	201c      	movs	r0, #28
 8001018:	f000 fc5c 	bl	80018d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800101c:	201c      	movs	r0, #28
 800101e:	f000 fc75 	bl	800190c <HAL_NVIC_EnableIRQ>
}
 8001022:	e026      	b.n	8001072 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a16      	ldr	r2, [pc, #88]	; (8001084 <HAL_TIM_Base_MspInit+0xc8>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d10e      	bne.n	800104c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <HAL_TIM_Base_MspInit+0xc4>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <HAL_TIM_Base_MspInit+0xc4>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6413      	str	r3, [r2, #64]	; 0x40
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_TIM_Base_MspInit+0xc4>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
}
 800104a:	e012      	b.n	8001072 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <HAL_TIM_Base_MspInit+0xcc>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d10d      	bne.n	8001072 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_TIM_Base_MspInit+0xc4>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <HAL_TIM_Base_MspInit+0xc4>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_TIM_Base_MspInit+0xc4>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40010000 	.word	0x40010000
 8001080:	40023800 	.word	0x40023800
 8001084:	40000400 	.word	0x40000400
 8001088:	40000800 	.word	0x40000800

0800108c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	; 0x30
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010ac:	d13d      	bne.n	800112a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
 80010b2:	4b53      	ldr	r3, [pc, #332]	; (8001200 <HAL_TIM_MspPostInit+0x174>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a52      	ldr	r2, [pc, #328]	; (8001200 <HAL_TIM_MspPostInit+0x174>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b50      	ldr	r3, [pc, #320]	; (8001200 <HAL_TIM_MspPostInit+0x174>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	4b4c      	ldr	r3, [pc, #304]	; (8001200 <HAL_TIM_MspPostInit+0x174>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a4b      	ldr	r2, [pc, #300]	; (8001200 <HAL_TIM_MspPostInit+0x174>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b49      	ldr	r3, [pc, #292]	; (8001200 <HAL_TIM_MspPostInit+0x174>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PD03_heat_EN_Pin;
 80010e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010f8:	2301      	movs	r3, #1
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD03_heat_EN_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	4840      	ldr	r0, [pc, #256]	; (8001204 <HAL_TIM_MspPostInit+0x178>)
 8001104:	f000 fca2 	bl	8001a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PD05_heat_EN_Pin;
 8001108:	2308      	movs	r3, #8
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001118:	2301      	movs	r3, #1
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD05_heat_EN_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	4619      	mov	r1, r3
 8001122:	4839      	ldr	r0, [pc, #228]	; (8001208 <HAL_TIM_MspPostInit+0x17c>)
 8001124:	f000 fc92 	bl	8001a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001128:	e065      	b.n	80011f6 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM3)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a37      	ldr	r2, [pc, #220]	; (800120c <HAL_TIM_MspPostInit+0x180>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d13c      	bne.n	80011ae <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <HAL_TIM_MspPostInit+0x174>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	4a30      	ldr	r2, [pc, #192]	; (8001200 <HAL_TIM_MspPostInit+0x174>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6313      	str	r3, [r2, #48]	; 0x30
 8001144:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <HAL_TIM_MspPostInit+0x174>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <HAL_TIM_MspPostInit+0x174>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	4a29      	ldr	r2, [pc, #164]	; (8001200 <HAL_TIM_MspPostInit+0x174>)
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	6313      	str	r3, [r2, #48]	; 0x30
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <HAL_TIM_MspPostInit+0x174>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PD04_heat_EN_Pin;
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800117c:	2302      	movs	r3, #2
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD04_heat_EN_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	4822      	ldr	r0, [pc, #136]	; (8001210 <HAL_TIM_MspPostInit+0x184>)
 8001188:	f000 fc60 	bl	8001a4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CF01_heat_EN_Pin;
 800118c:	2310      	movs	r3, #16
 800118e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800119c:	2302      	movs	r3, #2
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CF01_heat_EN_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	4818      	ldr	r0, [pc, #96]	; (8001208 <HAL_TIM_MspPostInit+0x17c>)
 80011a8:	f000 fc50 	bl	8001a4c <HAL_GPIO_Init>
}
 80011ac:	e023      	b.n	80011f6 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM4)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a18      	ldr	r2, [pc, #96]	; (8001214 <HAL_TIM_MspPostInit+0x188>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d11e      	bne.n	80011f6 <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <HAL_TIM_MspPostInit+0x174>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <HAL_TIM_MspPostInit+0x174>)
 80011c2:	f043 0302 	orr.w	r3, r3, #2
 80011c6:	6313      	str	r3, [r2, #48]	; 0x30
 80011c8:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <HAL_TIM_MspPostInit+0x174>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PD01_heat_EN_Pin|PD02_heat_EN_Pin;
 80011d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011e6:	2302      	movs	r3, #2
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <HAL_TIM_MspPostInit+0x17c>)
 80011f2:	f000 fc2b 	bl	8001a4c <HAL_GPIO_Init>
}
 80011f6:	bf00      	nop
 80011f8:	3730      	adds	r7, #48	; 0x30
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40020000 	.word	0x40020000
 8001208:	40020400 	.word	0x40020400
 800120c:	40000400 	.word	0x40000400
 8001210:	40020800 	.word	0x40020800
 8001214:	40000800 	.word	0x40000800

08001218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08e      	sub	sp, #56	; 0x38
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a63      	ldr	r2, [pc, #396]	; (80013c4 <HAL_UART_MspInit+0x1ac>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d153      	bne.n	80012e2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
 800123e:	4b62      	ldr	r3, [pc, #392]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a61      	ldr	r2, [pc, #388]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 8001244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b5f      	ldr	r3, [pc, #380]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001252:	623b      	str	r3, [r7, #32]
 8001254:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
 800125a:	4b5b      	ldr	r3, [pc, #364]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a5a      	ldr	r2, [pc, #360]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b58      	ldr	r3, [pc, #352]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	61fb      	str	r3, [r7, #28]
 8001270:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	4b54      	ldr	r3, [pc, #336]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a53      	ldr	r2, [pc, #332]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b51      	ldr	r3, [pc, #324]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = CupD_TX_Pin;
 800128e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80012a0:	2308      	movs	r3, #8
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CupD_TX_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4619      	mov	r1, r3
 80012aa:	4848      	ldr	r0, [pc, #288]	; (80013cc <HAL_UART_MspInit+0x1b4>)
 80012ac:	f000 fbce 	bl	8001a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CupD_RX_Pin;
 80012b0:	2304      	movs	r3, #4
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80012c0:	2308      	movs	r3, #8
 80012c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CupD_RX_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c8:	4619      	mov	r1, r3
 80012ca:	4841      	ldr	r0, [pc, #260]	; (80013d0 <HAL_UART_MspInit+0x1b8>)
 80012cc:	f000 fbbe 	bl	8001a4c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2105      	movs	r1, #5
 80012d4:	2035      	movs	r0, #53	; 0x35
 80012d6:	f000 fafd 	bl	80018d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80012da:	2035      	movs	r0, #53	; 0x35
 80012dc:	f000 fb16 	bl	800190c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80012e0:	e06c      	b.n	80013bc <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART3)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a3b      	ldr	r2, [pc, #236]	; (80013d4 <HAL_UART_MspInit+0x1bc>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d12d      	bne.n	8001348 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	4a34      	ldr	r2, [pc, #208]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 80012f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012fa:	6413      	str	r3, [r2, #64]	; 0x40
 80012fc:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4a2d      	ldr	r2, [pc, #180]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
 8001318:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 8001324:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001336:	2307      	movs	r3, #7
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	4822      	ldr	r0, [pc, #136]	; (80013cc <HAL_UART_MspInit+0x1b4>)
 8001342:	f000 fb83 	bl	8001a4c <HAL_GPIO_Init>
}
 8001346:	e039      	b.n	80013bc <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART6)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <HAL_UART_MspInit+0x1c0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d134      	bne.n	80013bc <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 800135c:	f043 0320 	orr.w	r3, r3, #32
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f003 0320 	and.w	r3, r3, #32
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 8001378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_UART_MspInit+0x1b0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LidD_RX_Pin|LidD_TX_Pin;
 800138a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800139c:	2308      	movs	r3, #8
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a4:	4619      	mov	r1, r3
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <HAL_UART_MspInit+0x1c4>)
 80013a8:	f000 fb50 	bl	8001a4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2105      	movs	r1, #5
 80013b0:	2047      	movs	r0, #71	; 0x47
 80013b2:	f000 fa8f 	bl	80018d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80013b6:	2047      	movs	r0, #71	; 0x47
 80013b8:	f000 faa8 	bl	800190c <HAL_NVIC_EnableIRQ>
}
 80013bc:	bf00      	nop
 80013be:	3738      	adds	r7, #56	; 0x38
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40005000 	.word	0x40005000
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020800 	.word	0x40020800
 80013d0:	40020c00 	.word	0x40020c00
 80013d4:	40004800 	.word	0x40004800
 80013d8:	40011400 	.word	0x40011400
 80013dc:	40021800 	.word	0x40021800

080013e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08c      	sub	sp, #48	; 0x30
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	202c      	movs	r0, #44	; 0x2c
 80013f6:	f000 fa6d 	bl	80018d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80013fa:	202c      	movs	r0, #44	; 0x2c
 80013fc:	f000 fa86 	bl	800190c <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <HAL_InitTick+0xa4>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	4a1e      	ldr	r2, [pc, #120]	; (8001484 <HAL_InitTick+0xa4>)
 800140a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800140e:	6413      	str	r3, [r2, #64]	; 0x40
 8001410:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <HAL_InitTick+0xa4>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800141c:	f107 0210 	add.w	r2, r7, #16
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f001 f96e 	bl	8002708 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800142c:	f001 f944 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 8001430:	4603      	mov	r3, r0
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001438:	4a13      	ldr	r2, [pc, #76]	; (8001488 <HAL_InitTick+0xa8>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	0c9b      	lsrs	r3, r3, #18
 8001440:	3b01      	subs	r3, #1
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <HAL_InitTick+0xac>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <HAL_InitTick+0xb0>)
 8001448:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <HAL_InitTick+0xac>)
 800144c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001450:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001452:	4a0e      	ldr	r2, [pc, #56]	; (800148c <HAL_InitTick+0xac>)
 8001454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001456:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_InitTick+0xac>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_InitTick+0xac>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8001464:	4809      	ldr	r0, [pc, #36]	; (800148c <HAL_InitTick+0xac>)
 8001466:	f001 f981 	bl	800276c <HAL_TIM_Base_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d104      	bne.n	800147a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001470:	4806      	ldr	r0, [pc, #24]	; (800148c <HAL_InitTick+0xac>)
 8001472:	f001 fa33 	bl	80028dc <HAL_TIM_Base_Start_IT>
 8001476:	4603      	mov	r3, r0
 8001478:	e000      	b.n	800147c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	3730      	adds	r7, #48	; 0x30
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	431bde83 	.word	0x431bde83
 800148c:	20004e08 	.word	0x20004e08
 8001490:	40001c00 	.word	0x40001c00

08001494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <NMI_Handler+0x4>

0800149a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <HardFault_Handler+0x4>

080014a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <MemManage_Handler+0x4>

080014a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <BusFault_Handler+0x4>

080014ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <UsageFault_Handler+0x4>

080014b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <TIM2_IRQHandler+0x10>)
 80014c6:	f001 fb9b 	bl	8002c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20004dc0 	.word	0x20004dc0

080014d4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80014da:	f001 fb91 	bl	8002c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20004e08 	.word	0x20004e08

080014e8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <UART5_IRQHandler+0x10>)
 80014ee:	f002 fbc3 	bl	8003c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20004ce8 	.word	0x20004ce8

080014fc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <USART6_IRQHandler+0x10>)
 8001502:	f002 fbb9 	bl	8003c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20004d7c 	.word	0x20004d7c

08001510 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e00a      	b.n	8001538 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001522:	f3af 8000 	nop.w
 8001526:	4601      	mov	r1, r0
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	60ba      	str	r2, [r7, #8]
 800152e:	b2ca      	uxtb	r2, r1
 8001530:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	dbf0      	blt.n	8001522 <_read+0x12>
	}

return len;
 8001540:	687b      	ldr	r3, [r7, #4]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <_close>:
	}
	return len;
}

int _close(int file)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
	return -1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001572:	605a      	str	r2, [r3, #4]
	return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <_isatty>:

int _isatty(int file)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
	return 1;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
	return 0;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015bc:	4a14      	ldr	r2, [pc, #80]	; (8001610 <_sbrk+0x5c>)
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <_sbrk+0x60>)
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <_sbrk+0x64>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <_sbrk+0x68>)
 80015d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d207      	bcs.n	80015f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e4:	f006 fa06 	bl	80079f4 <__errno>
 80015e8:	4603      	mov	r3, r0
 80015ea:	220c      	movs	r2, #12
 80015ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	e009      	b.n	8001608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <_sbrk+0x64>)
 8001604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001606:	68fb      	ldr	r3, [r7, #12]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20030000 	.word	0x20030000
 8001614:	00000400 	.word	0x00000400
 8001618:	20000234 	.word	0x20000234
 800161c:	20004ea8 	.word	0x20004ea8

08001620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <SystemInit+0x20>)
 8001626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <SystemInit+0x20>)
 800162c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800167c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001648:	480d      	ldr	r0, [pc, #52]	; (8001680 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800164a:	490e      	ldr	r1, [pc, #56]	; (8001684 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0b      	ldr	r2, [pc, #44]	; (800168c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001660:	4c0b      	ldr	r4, [pc, #44]	; (8001690 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800166e:	f7ff ffd7 	bl	8001620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001672:	f006 fabb 	bl	8007bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001676:	f7fe ffa1 	bl	80005bc <main>
  bx  lr    
 800167a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800167c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001684:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001688:	08008d34 	.word	0x08008d34
  ldr r2, =_sbss
 800168c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001690:	20004ea4 	.word	0x20004ea4

08001694 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001694:	e7fe      	b.n	8001694 <ADC_IRQHandler>
	...

08001698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800169c:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <HAL_Init+0x40>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <HAL_Init+0x40>)
 80016a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_Init+0x40>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <HAL_Init+0x40>)
 80016ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_Init+0x40>)
 80016ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c0:	2003      	movs	r0, #3
 80016c2:	f000 f8fc 	bl	80018be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c6:	200f      	movs	r0, #15
 80016c8:	f7ff fe8a 	bl	80013e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016cc:	f7ff fc4a 	bl	8000f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023c00 	.word	0x40023c00

080016dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x20>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x24>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_IncTick+0x24>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000008 	.word	0x20000008
 8001700:	20004e50 	.word	0x20004e50

08001704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <HAL_GetTick+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20004e50 	.word	0x20004e50

0800171c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff ffee 	bl	8001704 <HAL_GetTick>
 8001728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001734:	d005      	beq.n	8001742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_Delay+0x44>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001742:	bf00      	nop
 8001744:	f7ff ffde 	bl	8001704 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	429a      	cmp	r2, r3
 8001752:	d8f7      	bhi.n	8001744 <HAL_Delay+0x28>
  {
  }
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000008 	.word	0x20000008

08001764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001780:	4013      	ands	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800178c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	60d3      	str	r3, [r2, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db0b      	blt.n	80017f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	4907      	ldr	r1, [pc, #28]	; (8001800 <__NVIC_EnableIRQ+0x38>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db0a      	blt.n	800182e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <__NVIC_SetPriority+0x4c>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	440b      	add	r3, r1
 8001828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800182c:	e00a      	b.n	8001844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <__NVIC_SetPriority+0x50>)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3b04      	subs	r3, #4
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	440b      	add	r3, r1
 8001842:	761a      	strb	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f1c3 0307 	rsb	r3, r3, #7
 8001872:	2b04      	cmp	r3, #4
 8001874:	bf28      	it	cs
 8001876:	2304      	movcs	r3, #4
 8001878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3304      	adds	r3, #4
 800187e:	2b06      	cmp	r3, #6
 8001880:	d902      	bls.n	8001888 <NVIC_EncodePriority+0x30>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3b03      	subs	r3, #3
 8001886:	e000      	b.n	800188a <NVIC_EncodePriority+0x32>
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43da      	mvns	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43d9      	mvns	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	4313      	orrs	r3, r2
         );
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ff4c 	bl	8001764 <__NVIC_SetPriorityGrouping>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e6:	f7ff ff61 	bl	80017ac <__NVIC_GetPriorityGrouping>
 80018ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	68b9      	ldr	r1, [r7, #8]
 80018f0:	6978      	ldr	r0, [r7, #20]
 80018f2:	f7ff ffb1 	bl	8001858 <NVIC_EncodePriority>
 80018f6:	4602      	mov	r2, r0
 80018f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff80 	bl	8001804 <__NVIC_SetPriority>
}
 8001904:	bf00      	nop
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff54 	bl	80017c8 <__NVIC_EnableIRQ>
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001934:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001936:	f7ff fee5 	bl	8001704 <HAL_GetTick>
 800193a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d008      	beq.n	800195a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e052      	b.n	8001a00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0216 	bic.w	r2, r2, #22
 8001968:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695a      	ldr	r2, [r3, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001978:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	2b00      	cmp	r3, #0
 8001980:	d103      	bne.n	800198a <HAL_DMA_Abort+0x62>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001986:	2b00      	cmp	r3, #0
 8001988:	d007      	beq.n	800199a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0208 	bic.w	r2, r2, #8
 8001998:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0201 	bic.w	r2, r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019aa:	e013      	b.n	80019d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ac:	f7ff feaa 	bl	8001704 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b05      	cmp	r3, #5
 80019b8:	d90c      	bls.n	80019d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2220      	movs	r2, #32
 80019be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2203      	movs	r2, #3
 80019c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e015      	b.n	8001a00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1e4      	bne.n	80019ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e6:	223f      	movs	r2, #63	; 0x3f
 80019e8:	409a      	lsls	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d004      	beq.n	8001a26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2280      	movs	r2, #128	; 0x80
 8001a20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00c      	b.n	8001a40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2205      	movs	r2, #5
 8001a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0201 	bic.w	r2, r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	; 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	e177      	b.n	8001d58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	f040 8166 	bne.w	8001d52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d005      	beq.n	8001a9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d130      	bne.n	8001b00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	091b      	lsrs	r3, r3, #4
 8001aea:	f003 0201 	and.w	r2, r3, #1
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d017      	beq.n	8001b3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d123      	bne.n	8001b90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	08da      	lsrs	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3208      	adds	r2, #8
 8001b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	220f      	movs	r2, #15
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	08da      	lsrs	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3208      	adds	r2, #8
 8001b8a:	69b9      	ldr	r1, [r7, #24]
 8001b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0203 	and.w	r2, r3, #3
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80c0 	beq.w	8001d52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b66      	ldr	r3, [pc, #408]	; (8001d70 <HAL_GPIO_Init+0x324>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	4a65      	ldr	r2, [pc, #404]	; (8001d70 <HAL_GPIO_Init+0x324>)
 8001bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be0:	6453      	str	r3, [r2, #68]	; 0x44
 8001be2:	4b63      	ldr	r3, [pc, #396]	; (8001d70 <HAL_GPIO_Init+0x324>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bee:	4a61      	ldr	r2, [pc, #388]	; (8001d74 <HAL_GPIO_Init+0x328>)
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	220f      	movs	r2, #15
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <HAL_GPIO_Init+0x32c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d037      	beq.n	8001c8a <HAL_GPIO_Init+0x23e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a57      	ldr	r2, [pc, #348]	; (8001d7c <HAL_GPIO_Init+0x330>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d031      	beq.n	8001c86 <HAL_GPIO_Init+0x23a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a56      	ldr	r2, [pc, #344]	; (8001d80 <HAL_GPIO_Init+0x334>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d02b      	beq.n	8001c82 <HAL_GPIO_Init+0x236>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a55      	ldr	r2, [pc, #340]	; (8001d84 <HAL_GPIO_Init+0x338>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d025      	beq.n	8001c7e <HAL_GPIO_Init+0x232>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a54      	ldr	r2, [pc, #336]	; (8001d88 <HAL_GPIO_Init+0x33c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d01f      	beq.n	8001c7a <HAL_GPIO_Init+0x22e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a53      	ldr	r2, [pc, #332]	; (8001d8c <HAL_GPIO_Init+0x340>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d019      	beq.n	8001c76 <HAL_GPIO_Init+0x22a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a52      	ldr	r2, [pc, #328]	; (8001d90 <HAL_GPIO_Init+0x344>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d013      	beq.n	8001c72 <HAL_GPIO_Init+0x226>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a51      	ldr	r2, [pc, #324]	; (8001d94 <HAL_GPIO_Init+0x348>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d00d      	beq.n	8001c6e <HAL_GPIO_Init+0x222>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a50      	ldr	r2, [pc, #320]	; (8001d98 <HAL_GPIO_Init+0x34c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d007      	beq.n	8001c6a <HAL_GPIO_Init+0x21e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4f      	ldr	r2, [pc, #316]	; (8001d9c <HAL_GPIO_Init+0x350>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d101      	bne.n	8001c66 <HAL_GPIO_Init+0x21a>
 8001c62:	2309      	movs	r3, #9
 8001c64:	e012      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c66:	230a      	movs	r3, #10
 8001c68:	e010      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c6a:	2308      	movs	r3, #8
 8001c6c:	e00e      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c6e:	2307      	movs	r3, #7
 8001c70:	e00c      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c72:	2306      	movs	r3, #6
 8001c74:	e00a      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c76:	2305      	movs	r3, #5
 8001c78:	e008      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	e006      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e004      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e002      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	f002 0203 	and.w	r2, r2, #3
 8001c92:	0092      	lsls	r2, r2, #2
 8001c94:	4093      	lsls	r3, r2
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c9c:	4935      	ldr	r1, [pc, #212]	; (8001d74 <HAL_GPIO_Init+0x328>)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001caa:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cce:	4a34      	ldr	r2, [pc, #208]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cd4:	4b32      	ldr	r3, [pc, #200]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf8:	4a29      	ldr	r2, [pc, #164]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cfe:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d22:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d4c:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3301      	adds	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	2b0f      	cmp	r3, #15
 8001d5c:	f67f ae84 	bls.w	8001a68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3724      	adds	r7, #36	; 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40013800 	.word	0x40013800
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40020400 	.word	0x40020400
 8001d80:	40020800 	.word	0x40020800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40021400 	.word	0x40021400
 8001d90:	40021800 	.word	0x40021800
 8001d94:	40021c00 	.word	0x40021c00
 8001d98:	40022000 	.word	0x40022000
 8001d9c:	40022400 	.word	0x40022400
 8001da0:	40013c00 	.word	0x40013c00

08001da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]
 8001db0:	4613      	mov	r3, r2
 8001db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db4:	787b      	ldrb	r3, [r7, #1]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dc0:	e003      	b.n	8001dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	041a      	lsls	r2, r3, #16
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	619a      	str	r2, [r3, #24]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	603b      	str	r3, [r7, #0]
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <HAL_PWREx_EnableOverDrive+0x90>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	4a1f      	ldr	r2, [pc, #124]	; (8001e68 <HAL_PWREx_EnableOverDrive+0x90>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df0:	6413      	str	r3, [r2, #64]	; 0x40
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <HAL_PWREx_EnableOverDrive+0x90>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001dfe:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <HAL_PWREx_EnableOverDrive+0x94>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e04:	f7ff fc7e 	bl	8001704 <HAL_GetTick>
 8001e08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e0a:	e009      	b.n	8001e20 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e0c:	f7ff fc7a 	bl	8001704 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e1a:	d901      	bls.n	8001e20 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e01f      	b.n	8001e60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2c:	d1ee      	bne.n	8001e0c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e34:	f7ff fc66 	bl	8001704 <HAL_GetTick>
 8001e38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e3a:	e009      	b.n	8001e50 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e3c:	f7ff fc62 	bl	8001704 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e4a:	d901      	bls.n	8001e50 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e007      	b.n	8001e60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e50:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e5c:	d1ee      	bne.n	8001e3c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	420e0040 	.word	0x420e0040
 8001e70:	40007000 	.word	0x40007000
 8001e74:	420e0044 	.word	0x420e0044

08001e78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e264      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d075      	beq.n	8001f82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e96:	4ba3      	ldr	r3, [pc, #652]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d00c      	beq.n	8001ebc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ea2:	4ba0      	ldr	r3, [pc, #640]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d112      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eae:	4b9d      	ldr	r3, [pc, #628]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eba:	d10b      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebc:	4b99      	ldr	r3, [pc, #612]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d05b      	beq.n	8001f80 <HAL_RCC_OscConfig+0x108>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d157      	bne.n	8001f80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e23f      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001edc:	d106      	bne.n	8001eec <HAL_RCC_OscConfig+0x74>
 8001ede:	4b91      	ldr	r3, [pc, #580]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a90      	ldr	r2, [pc, #576]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e01d      	b.n	8001f28 <HAL_RCC_OscConfig+0xb0>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x98>
 8001ef6:	4b8b      	ldr	r3, [pc, #556]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a8a      	ldr	r2, [pc, #552]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b88      	ldr	r3, [pc, #544]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a87      	ldr	r2, [pc, #540]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCC_OscConfig+0xb0>
 8001f10:	4b84      	ldr	r3, [pc, #528]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a83      	ldr	r2, [pc, #524]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b81      	ldr	r3, [pc, #516]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a80      	ldr	r2, [pc, #512]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d013      	beq.n	8001f58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff fbe8 	bl	8001704 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff fbe4 	bl	8001704 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e204      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	4b76      	ldr	r3, [pc, #472]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0xc0>
 8001f56:	e014      	b.n	8001f82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff fbd4 	bl	8001704 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f60:	f7ff fbd0 	bl	8001704 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	; 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e1f0      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f72:	4b6c      	ldr	r3, [pc, #432]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0xe8>
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d063      	beq.n	8002056 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f8e:	4b65      	ldr	r3, [pc, #404]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00b      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f9a:	4b62      	ldr	r3, [pc, #392]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d11c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa6:	4b5f      	ldr	r3, [pc, #380]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d116      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	4b5c      	ldr	r3, [pc, #368]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <HAL_RCC_OscConfig+0x152>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e1c4      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fca:	4b56      	ldr	r3, [pc, #344]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4952      	ldr	r1, [pc, #328]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	e03a      	b.n	8002056 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d020      	beq.n	800202a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe8:	4b4f      	ldr	r3, [pc, #316]	; (8002128 <HAL_RCC_OscConfig+0x2b0>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fee:	f7ff fb89 	bl	8001704 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff6:	f7ff fb85 	bl	8001704 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e1a5      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	4b46      	ldr	r3, [pc, #280]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002014:	4b43      	ldr	r3, [pc, #268]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4940      	ldr	r1, [pc, #256]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
 8002028:	e015      	b.n	8002056 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202a:	4b3f      	ldr	r3, [pc, #252]	; (8002128 <HAL_RCC_OscConfig+0x2b0>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7ff fb68 	bl	8001704 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002038:	f7ff fb64 	bl	8001704 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e184      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	4b36      	ldr	r3, [pc, #216]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d030      	beq.n	80020c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d016      	beq.n	8002098 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206a:	4b30      	ldr	r3, [pc, #192]	; (800212c <HAL_RCC_OscConfig+0x2b4>)
 800206c:	2201      	movs	r2, #1
 800206e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002070:	f7ff fb48 	bl	8001704 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002078:	f7ff fb44 	bl	8001704 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e164      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208a:	4b26      	ldr	r3, [pc, #152]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 800208c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x200>
 8002096:	e015      	b.n	80020c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002098:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_RCC_OscConfig+0x2b4>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209e:	f7ff fb31 	bl	8001704 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a6:	f7ff fb2d 	bl	8001704 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e14d      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 80020ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f0      	bne.n	80020a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 80a0 	beq.w	8002212 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d6:	4b13      	ldr	r3, [pc, #76]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10f      	bne.n	8002102 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020fe:	2301      	movs	r3, #1
 8002100:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002102:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_RCC_OscConfig+0x2b8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d121      	bne.n	8002152 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <HAL_RCC_OscConfig+0x2b8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a07      	ldr	r2, [pc, #28]	; (8002130 <HAL_RCC_OscConfig+0x2b8>)
 8002114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211a:	f7ff faf3 	bl	8001704 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	e011      	b.n	8002146 <HAL_RCC_OscConfig+0x2ce>
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	42470000 	.word	0x42470000
 800212c:	42470e80 	.word	0x42470e80
 8002130:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002134:	f7ff fae6 	bl	8001704 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e106      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002146:	4b85      	ldr	r3, [pc, #532]	; (800235c <HAL_RCC_OscConfig+0x4e4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d106      	bne.n	8002168 <HAL_RCC_OscConfig+0x2f0>
 800215a:	4b81      	ldr	r3, [pc, #516]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215e:	4a80      	ldr	r2, [pc, #512]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6713      	str	r3, [r2, #112]	; 0x70
 8002166:	e01c      	b.n	80021a2 <HAL_RCC_OscConfig+0x32a>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b05      	cmp	r3, #5
 800216e:	d10c      	bne.n	800218a <HAL_RCC_OscConfig+0x312>
 8002170:	4b7b      	ldr	r3, [pc, #492]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002174:	4a7a      	ldr	r2, [pc, #488]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	6713      	str	r3, [r2, #112]	; 0x70
 800217c:	4b78      	ldr	r3, [pc, #480]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	4a77      	ldr	r2, [pc, #476]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6713      	str	r3, [r2, #112]	; 0x70
 8002188:	e00b      	b.n	80021a2 <HAL_RCC_OscConfig+0x32a>
 800218a:	4b75      	ldr	r3, [pc, #468]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	4a74      	ldr	r2, [pc, #464]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	6713      	str	r3, [r2, #112]	; 0x70
 8002196:	4b72      	ldr	r3, [pc, #456]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	4a71      	ldr	r2, [pc, #452]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 800219c:	f023 0304 	bic.w	r3, r3, #4
 80021a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d015      	beq.n	80021d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021aa:	f7ff faab 	bl	8001704 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7ff faa7 	bl	8001704 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e0c5      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c8:	4b65      	ldr	r3, [pc, #404]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0ee      	beq.n	80021b2 <HAL_RCC_OscConfig+0x33a>
 80021d4:	e014      	b.n	8002200 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d6:	f7ff fa95 	bl	8001704 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021dc:	e00a      	b.n	80021f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7ff fa91 	bl	8001704 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e0af      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f4:	4b5a      	ldr	r3, [pc, #360]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1ee      	bne.n	80021de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002200:	7dfb      	ldrb	r3, [r7, #23]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d105      	bne.n	8002212 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002206:	4b56      	ldr	r3, [pc, #344]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a55      	ldr	r2, [pc, #340]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 800220c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 809b 	beq.w	8002352 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800221c:	4b50      	ldr	r3, [pc, #320]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b08      	cmp	r3, #8
 8002226:	d05c      	beq.n	80022e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d141      	bne.n	80022b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002230:	4b4c      	ldr	r3, [pc, #304]	; (8002364 <HAL_RCC_OscConfig+0x4ec>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7ff fa65 	bl	8001704 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223e:	f7ff fa61 	bl	8001704 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e081      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002250:	4b43      	ldr	r3, [pc, #268]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f0      	bne.n	800223e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69da      	ldr	r2, [r3, #28]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	019b      	lsls	r3, r3, #6
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002272:	085b      	lsrs	r3, r3, #1
 8002274:	3b01      	subs	r3, #1
 8002276:	041b      	lsls	r3, r3, #16
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	061b      	lsls	r3, r3, #24
 8002280:	4937      	ldr	r1, [pc, #220]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002286:	4b37      	ldr	r3, [pc, #220]	; (8002364 <HAL_RCC_OscConfig+0x4ec>)
 8002288:	2201      	movs	r2, #1
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7ff fa3a 	bl	8001704 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002294:	f7ff fa36 	bl	8001704 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e056      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a6:	4b2e      	ldr	r3, [pc, #184]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x41c>
 80022b2:	e04e      	b.n	8002352 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b4:	4b2b      	ldr	r3, [pc, #172]	; (8002364 <HAL_RCC_OscConfig+0x4ec>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7ff fa23 	bl	8001704 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c2:	f7ff fa1f 	bl	8001704 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e03f      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d4:	4b22      	ldr	r3, [pc, #136]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f0      	bne.n	80022c2 <HAL_RCC_OscConfig+0x44a>
 80022e0:	e037      	b.n	8002352 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e032      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022ee:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d028      	beq.n	800234e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d121      	bne.n	800234e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d11a      	bne.n	800234e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800231e:	4013      	ands	r3, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002324:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002326:	4293      	cmp	r3, r2
 8002328:	d111      	bne.n	800234e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	085b      	lsrs	r3, r3, #1
 8002336:	3b01      	subs	r3, #1
 8002338:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d107      	bne.n	800234e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d001      	beq.n	8002352 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40007000 	.word	0x40007000
 8002360:	40023800 	.word	0x40023800
 8002364:	42470060 	.word	0x42470060

08002368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0cc      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800237c:	4b68      	ldr	r3, [pc, #416]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d90c      	bls.n	80023a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b65      	ldr	r3, [pc, #404]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002392:	4b63      	ldr	r3, [pc, #396]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0b8      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d020      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023bc:	4b59      	ldr	r3, [pc, #356]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4a58      	ldr	r2, [pc, #352]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d4:	4b53      	ldr	r3, [pc, #332]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a52      	ldr	r2, [pc, #328]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e0:	4b50      	ldr	r3, [pc, #320]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	494d      	ldr	r1, [pc, #308]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d044      	beq.n	8002488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	4b47      	ldr	r3, [pc, #284]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d119      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e07f      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d003      	beq.n	8002426 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002422:	2b03      	cmp	r3, #3
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002426:	4b3f      	ldr	r3, [pc, #252]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e06f      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002436:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e067      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002446:	4b37      	ldr	r3, [pc, #220]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f023 0203 	bic.w	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4934      	ldr	r1, [pc, #208]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	4313      	orrs	r3, r2
 8002456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002458:	f7ff f954 	bl	8001704 <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	e00a      	b.n	8002476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002460:	f7ff f950 	bl	8001704 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	; 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e04f      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 020c 	and.w	r2, r3, #12
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	429a      	cmp	r2, r3
 8002486:	d1eb      	bne.n	8002460 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002488:	4b25      	ldr	r3, [pc, #148]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d20c      	bcs.n	80024b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b22      	ldr	r3, [pc, #136]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b20      	ldr	r3, [pc, #128]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e032      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024bc:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4916      	ldr	r1, [pc, #88]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024da:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	490e      	ldr	r1, [pc, #56]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ee:	f000 f821 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80024f2:	4602      	mov	r2, r0
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	490a      	ldr	r1, [pc, #40]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	5ccb      	ldrb	r3, [r1, r3]
 8002502:	fa22 f303 	lsr.w	r3, r2, r3
 8002506:	4a09      	ldr	r2, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <HAL_RCC_ClockConfig+0x1c8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe ff66 	bl	80013e0 <HAL_InitTick>

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40023c00 	.word	0x40023c00
 8002524:	40023800 	.word	0x40023800
 8002528:	08008c74 	.word	0x08008c74
 800252c:	20000000 	.word	0x20000000
 8002530:	20000004 	.word	0x20000004

08002534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002534:	b5b0      	push	{r4, r5, r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800253a:	2100      	movs	r1, #0
 800253c:	6079      	str	r1, [r7, #4]
 800253e:	2100      	movs	r1, #0
 8002540:	60f9      	str	r1, [r7, #12]
 8002542:	2100      	movs	r1, #0
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002546:	2100      	movs	r1, #0
 8002548:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800254a:	4952      	ldr	r1, [pc, #328]	; (8002694 <HAL_RCC_GetSysClockFreq+0x160>)
 800254c:	6889      	ldr	r1, [r1, #8]
 800254e:	f001 010c 	and.w	r1, r1, #12
 8002552:	2908      	cmp	r1, #8
 8002554:	d00d      	beq.n	8002572 <HAL_RCC_GetSysClockFreq+0x3e>
 8002556:	2908      	cmp	r1, #8
 8002558:	f200 8094 	bhi.w	8002684 <HAL_RCC_GetSysClockFreq+0x150>
 800255c:	2900      	cmp	r1, #0
 800255e:	d002      	beq.n	8002566 <HAL_RCC_GetSysClockFreq+0x32>
 8002560:	2904      	cmp	r1, #4
 8002562:	d003      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0x38>
 8002564:	e08e      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002566:	4b4c      	ldr	r3, [pc, #304]	; (8002698 <HAL_RCC_GetSysClockFreq+0x164>)
 8002568:	60bb      	str	r3, [r7, #8]
       break;
 800256a:	e08e      	b.n	800268a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800256c:	4b4b      	ldr	r3, [pc, #300]	; (800269c <HAL_RCC_GetSysClockFreq+0x168>)
 800256e:	60bb      	str	r3, [r7, #8]
      break;
 8002570:	e08b      	b.n	800268a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002572:	4948      	ldr	r1, [pc, #288]	; (8002694 <HAL_RCC_GetSysClockFreq+0x160>)
 8002574:	6849      	ldr	r1, [r1, #4]
 8002576:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800257a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800257c:	4945      	ldr	r1, [pc, #276]	; (8002694 <HAL_RCC_GetSysClockFreq+0x160>)
 800257e:	6849      	ldr	r1, [r1, #4]
 8002580:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002584:	2900      	cmp	r1, #0
 8002586:	d024      	beq.n	80025d2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002588:	4942      	ldr	r1, [pc, #264]	; (8002694 <HAL_RCC_GetSysClockFreq+0x160>)
 800258a:	6849      	ldr	r1, [r1, #4]
 800258c:	0989      	lsrs	r1, r1, #6
 800258e:	4608      	mov	r0, r1
 8002590:	f04f 0100 	mov.w	r1, #0
 8002594:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002598:	f04f 0500 	mov.w	r5, #0
 800259c:	ea00 0204 	and.w	r2, r0, r4
 80025a0:	ea01 0305 	and.w	r3, r1, r5
 80025a4:	493d      	ldr	r1, [pc, #244]	; (800269c <HAL_RCC_GetSysClockFreq+0x168>)
 80025a6:	fb01 f003 	mul.w	r0, r1, r3
 80025aa:	2100      	movs	r1, #0
 80025ac:	fb01 f102 	mul.w	r1, r1, r2
 80025b0:	1844      	adds	r4, r0, r1
 80025b2:	493a      	ldr	r1, [pc, #232]	; (800269c <HAL_RCC_GetSysClockFreq+0x168>)
 80025b4:	fba2 0101 	umull	r0, r1, r2, r1
 80025b8:	1863      	adds	r3, r4, r1
 80025ba:	4619      	mov	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	461a      	mov	r2, r3
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	f7fd fe64 	bl	8000290 <__aeabi_uldivmod>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4613      	mov	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	e04a      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d2:	4b30      	ldr	r3, [pc, #192]	; (8002694 <HAL_RCC_GetSysClockFreq+0x160>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	099b      	lsrs	r3, r3, #6
 80025d8:	461a      	mov	r2, r3
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025e2:	f04f 0100 	mov.w	r1, #0
 80025e6:	ea02 0400 	and.w	r4, r2, r0
 80025ea:	ea03 0501 	and.w	r5, r3, r1
 80025ee:	4620      	mov	r0, r4
 80025f0:	4629      	mov	r1, r5
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	014b      	lsls	r3, r1, #5
 80025fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002600:	0142      	lsls	r2, r0, #5
 8002602:	4610      	mov	r0, r2
 8002604:	4619      	mov	r1, r3
 8002606:	1b00      	subs	r0, r0, r4
 8002608:	eb61 0105 	sbc.w	r1, r1, r5
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	018b      	lsls	r3, r1, #6
 8002616:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800261a:	0182      	lsls	r2, r0, #6
 800261c:	1a12      	subs	r2, r2, r0
 800261e:	eb63 0301 	sbc.w	r3, r3, r1
 8002622:	f04f 0000 	mov.w	r0, #0
 8002626:	f04f 0100 	mov.w	r1, #0
 800262a:	00d9      	lsls	r1, r3, #3
 800262c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002630:	00d0      	lsls	r0, r2, #3
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	1912      	adds	r2, r2, r4
 8002638:	eb45 0303 	adc.w	r3, r5, r3
 800263c:	f04f 0000 	mov.w	r0, #0
 8002640:	f04f 0100 	mov.w	r1, #0
 8002644:	0299      	lsls	r1, r3, #10
 8002646:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800264a:	0290      	lsls	r0, r2, #10
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	461a      	mov	r2, r3
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	f7fd fe18 	bl	8000290 <__aeabi_uldivmod>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4613      	mov	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002668:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <HAL_RCC_GetSysClockFreq+0x160>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	3301      	adds	r3, #1
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002680:	60bb      	str	r3, [r7, #8]
      break;
 8002682:	e002      	b.n	800268a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <HAL_RCC_GetSysClockFreq+0x164>)
 8002686:	60bb      	str	r3, [r7, #8]
      break;
 8002688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800268a:	68bb      	ldr	r3, [r7, #8]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bdb0      	pop	{r4, r5, r7, pc}
 8002694:	40023800 	.word	0x40023800
 8002698:	00f42400 	.word	0x00f42400
 800269c:	017d7840 	.word	0x017d7840

080026a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20000000 	.word	0x20000000

080026b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026bc:	f7ff fff0 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026c0:	4602      	mov	r2, r0
 80026c2:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	0a9b      	lsrs	r3, r3, #10
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	4903      	ldr	r1, [pc, #12]	; (80026dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ce:	5ccb      	ldrb	r3, [r1, r3]
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40023800 	.word	0x40023800
 80026dc:	08008c84 	.word	0x08008c84

080026e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026e4:	f7ff ffdc 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	0b5b      	lsrs	r3, r3, #13
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	4903      	ldr	r1, [pc, #12]	; (8002704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40023800 	.word	0x40023800
 8002704:	08008c84 	.word	0x08008c84

08002708 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	220f      	movs	r2, #15
 8002716:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_RCC_GetClockConfig+0x5c>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0203 	and.w	r2, r3, #3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <HAL_RCC_GetClockConfig+0x5c>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <HAL_RCC_GetClockConfig+0x5c>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCC_GetClockConfig+0x5c>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	08db      	lsrs	r3, r3, #3
 8002742:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <HAL_RCC_GetClockConfig+0x60>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 020f 	and.w	r2, r3, #15
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	601a      	str	r2, [r3, #0]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	40023c00 	.word	0x40023c00

0800276c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e041      	b.n	8002802 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fe fc12 	bl	8000fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3304      	adds	r3, #4
 80027a8:	4619      	mov	r1, r3
 80027aa:	4610      	mov	r0, r2
 80027ac:	f000 fd24 	bl	80031f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d001      	beq.n	8002824 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e046      	b.n	80028b2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2202      	movs	r2, #2
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <HAL_TIM_Base_Start+0xb4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d022      	beq.n	800287c <HAL_TIM_Base_Start+0x70>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283e:	d01d      	beq.n	800287c <HAL_TIM_Base_Start+0x70>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1f      	ldr	r2, [pc, #124]	; (80028c4 <HAL_TIM_Base_Start+0xb8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d018      	beq.n	800287c <HAL_TIM_Base_Start+0x70>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a1e      	ldr	r2, [pc, #120]	; (80028c8 <HAL_TIM_Base_Start+0xbc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d013      	beq.n	800287c <HAL_TIM_Base_Start+0x70>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1c      	ldr	r2, [pc, #112]	; (80028cc <HAL_TIM_Base_Start+0xc0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00e      	beq.n	800287c <HAL_TIM_Base_Start+0x70>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1b      	ldr	r2, [pc, #108]	; (80028d0 <HAL_TIM_Base_Start+0xc4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d009      	beq.n	800287c <HAL_TIM_Base_Start+0x70>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a19      	ldr	r2, [pc, #100]	; (80028d4 <HAL_TIM_Base_Start+0xc8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d004      	beq.n	800287c <HAL_TIM_Base_Start+0x70>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <HAL_TIM_Base_Start+0xcc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d111      	bne.n	80028a0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b06      	cmp	r3, #6
 800288c:	d010      	beq.n	80028b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289e:	e007      	b.n	80028b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40010000 	.word	0x40010000
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800
 80028cc:	40000c00 	.word	0x40000c00
 80028d0:	40010400 	.word	0x40010400
 80028d4:	40014000 	.word	0x40014000
 80028d8:	40001800 	.word	0x40001800

080028dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d001      	beq.n	80028f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e04e      	b.n	8002992 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a23      	ldr	r2, [pc, #140]	; (80029a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d022      	beq.n	800295c <HAL_TIM_Base_Start_IT+0x80>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291e:	d01d      	beq.n	800295c <HAL_TIM_Base_Start_IT+0x80>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1f      	ldr	r2, [pc, #124]	; (80029a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d018      	beq.n	800295c <HAL_TIM_Base_Start_IT+0x80>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a1e      	ldr	r2, [pc, #120]	; (80029a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d013      	beq.n	800295c <HAL_TIM_Base_Start_IT+0x80>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <HAL_TIM_Base_Start_IT+0xd0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00e      	beq.n	800295c <HAL_TIM_Base_Start_IT+0x80>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a1b      	ldr	r2, [pc, #108]	; (80029b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d009      	beq.n	800295c <HAL_TIM_Base_Start_IT+0x80>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a19      	ldr	r2, [pc, #100]	; (80029b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d004      	beq.n	800295c <HAL_TIM_Base_Start_IT+0x80>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a18      	ldr	r2, [pc, #96]	; (80029b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d111      	bne.n	8002980 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b06      	cmp	r3, #6
 800296c:	d010      	beq.n	8002990 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 0201 	orr.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800297e:	e007      	b.n	8002990 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40010000 	.word	0x40010000
 80029a4:	40000400 	.word	0x40000400
 80029a8:	40000800 	.word	0x40000800
 80029ac:	40000c00 	.word	0x40000c00
 80029b0:	40010400 	.word	0x40010400
 80029b4:	40014000 	.word	0x40014000
 80029b8:	40001800 	.word	0x40001800

080029bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e041      	b.n	8002a52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f839 	bl	8002a5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	4619      	mov	r1, r3
 80029fa:	4610      	mov	r0, r2
 80029fc:	f000 fbfc 	bl	80031f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d109      	bne.n	8002a94 <HAL_TIM_PWM_Start+0x24>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	bf14      	ite	ne
 8002a8c:	2301      	movne	r3, #1
 8002a8e:	2300      	moveq	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	e022      	b.n	8002ada <HAL_TIM_PWM_Start+0x6a>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d109      	bne.n	8002aae <HAL_TIM_PWM_Start+0x3e>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	bf14      	ite	ne
 8002aa6:	2301      	movne	r3, #1
 8002aa8:	2300      	moveq	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	e015      	b.n	8002ada <HAL_TIM_PWM_Start+0x6a>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d109      	bne.n	8002ac8 <HAL_TIM_PWM_Start+0x58>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	bf14      	ite	ne
 8002ac0:	2301      	movne	r3, #1
 8002ac2:	2300      	moveq	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	e008      	b.n	8002ada <HAL_TIM_PWM_Start+0x6a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	bf14      	ite	ne
 8002ad4:	2301      	movne	r3, #1
 8002ad6:	2300      	moveq	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e07c      	b.n	8002bdc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d104      	bne.n	8002af2 <HAL_TIM_PWM_Start+0x82>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af0:	e013      	b.n	8002b1a <HAL_TIM_PWM_Start+0xaa>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d104      	bne.n	8002b02 <HAL_TIM_PWM_Start+0x92>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b00:	e00b      	b.n	8002b1a <HAL_TIM_PWM_Start+0xaa>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d104      	bne.n	8002b12 <HAL_TIM_PWM_Start+0xa2>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b10:	e003      	b.n	8002b1a <HAL_TIM_PWM_Start+0xaa>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2202      	movs	r2, #2
 8002b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	6839      	ldr	r1, [r7, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fee3 	bl	80038ee <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a2d      	ldr	r2, [pc, #180]	; (8002be4 <HAL_TIM_PWM_Start+0x174>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d004      	beq.n	8002b3c <HAL_TIM_PWM_Start+0xcc>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a2c      	ldr	r2, [pc, #176]	; (8002be8 <HAL_TIM_PWM_Start+0x178>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d101      	bne.n	8002b40 <HAL_TIM_PWM_Start+0xd0>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <HAL_TIM_PWM_Start+0xd2>
 8002b40:	2300      	movs	r3, #0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d007      	beq.n	8002b56 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a22      	ldr	r2, [pc, #136]	; (8002be4 <HAL_TIM_PWM_Start+0x174>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d022      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x136>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b68:	d01d      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x136>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <HAL_TIM_PWM_Start+0x17c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d018      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x136>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a1d      	ldr	r2, [pc, #116]	; (8002bf0 <HAL_TIM_PWM_Start+0x180>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d013      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x136>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1c      	ldr	r2, [pc, #112]	; (8002bf4 <HAL_TIM_PWM_Start+0x184>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00e      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x136>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a16      	ldr	r2, [pc, #88]	; (8002be8 <HAL_TIM_PWM_Start+0x178>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d009      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x136>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a18      	ldr	r2, [pc, #96]	; (8002bf8 <HAL_TIM_PWM_Start+0x188>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d004      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x136>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a16      	ldr	r2, [pc, #88]	; (8002bfc <HAL_TIM_PWM_Start+0x18c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d111      	bne.n	8002bca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b06      	cmp	r3, #6
 8002bb6:	d010      	beq.n	8002bda <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc8:	e007      	b.n	8002bda <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0201 	orr.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40010000 	.word	0x40010000
 8002be8:	40010400 	.word	0x40010400
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	40000800 	.word	0x40000800
 8002bf4:	40000c00 	.word	0x40000c00
 8002bf8:	40014000 	.word	0x40014000
 8002bfc:	40001800 	.word	0x40001800

08002c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d122      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d11b      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0202 	mvn.w	r2, #2
 8002c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fab9 	bl	80031ba <HAL_TIM_IC_CaptureCallback>
 8002c48:	e005      	b.n	8002c56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 faab 	bl	80031a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fabc 	bl	80031ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d122      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d11b      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0204 	mvn.w	r2, #4
 8002c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2202      	movs	r2, #2
 8002c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fa8f 	bl	80031ba <HAL_TIM_IC_CaptureCallback>
 8002c9c:	e005      	b.n	8002caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fa81 	bl	80031a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fa92 	bl	80031ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d122      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d11b      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0208 	mvn.w	r2, #8
 8002cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2204      	movs	r2, #4
 8002cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fa65 	bl	80031ba <HAL_TIM_IC_CaptureCallback>
 8002cf0:	e005      	b.n	8002cfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fa57 	bl	80031a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fa68 	bl	80031ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b10      	cmp	r3, #16
 8002d10:	d122      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b10      	cmp	r3, #16
 8002d1e:	d11b      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0210 	mvn.w	r2, #16
 8002d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fa3b 	bl	80031ba <HAL_TIM_IC_CaptureCallback>
 8002d44:	e005      	b.n	8002d52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fa2d 	bl	80031a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fa3e 	bl	80031ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d10e      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d107      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0201 	mvn.w	r2, #1
 8002d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fe f8d8 	bl	8000f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8e:	2b80      	cmp	r3, #128	; 0x80
 8002d90:	d10e      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9c:	2b80      	cmp	r3, #128	; 0x80
 8002d9e:	d107      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fe4a 	bl	8003a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dba:	2b40      	cmp	r3, #64	; 0x40
 8002dbc:	d10e      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b40      	cmp	r3, #64	; 0x40
 8002dca:	d107      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fa03 	bl	80031e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d10e      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0320 	and.w	r3, r3, #32
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	d107      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0220 	mvn.w	r2, #32
 8002e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fe14 	bl	8003a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e0ae      	b.n	8002f8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b0c      	cmp	r3, #12
 8002e3a:	f200 809f 	bhi.w	8002f7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e3e:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002e79 	.word	0x08002e79
 8002e48:	08002f7d 	.word	0x08002f7d
 8002e4c:	08002f7d 	.word	0x08002f7d
 8002e50:	08002f7d 	.word	0x08002f7d
 8002e54:	08002eb9 	.word	0x08002eb9
 8002e58:	08002f7d 	.word	0x08002f7d
 8002e5c:	08002f7d 	.word	0x08002f7d
 8002e60:	08002f7d 	.word	0x08002f7d
 8002e64:	08002efb 	.word	0x08002efb
 8002e68:	08002f7d 	.word	0x08002f7d
 8002e6c:	08002f7d 	.word	0x08002f7d
 8002e70:	08002f7d 	.word	0x08002f7d
 8002e74:	08002f3b 	.word	0x08002f3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fa5a 	bl	8003338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699a      	ldr	r2, [r3, #24]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0208 	orr.w	r2, r2, #8
 8002e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0204 	bic.w	r2, r2, #4
 8002ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6999      	ldr	r1, [r3, #24]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	619a      	str	r2, [r3, #24]
      break;
 8002eb6:	e064      	b.n	8002f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 faaa 	bl	8003418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6999      	ldr	r1, [r3, #24]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	021a      	lsls	r2, r3, #8
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	619a      	str	r2, [r3, #24]
      break;
 8002ef8:	e043      	b.n	8002f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 faff 	bl	8003504 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0208 	orr.w	r2, r2, #8
 8002f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0204 	bic.w	r2, r2, #4
 8002f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69d9      	ldr	r1, [r3, #28]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	61da      	str	r2, [r3, #28]
      break;
 8002f38:	e023      	b.n	8002f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68b9      	ldr	r1, [r7, #8]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 fb53 	bl	80035ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69da      	ldr	r2, [r3, #28]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69da      	ldr	r2, [r3, #28]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69d9      	ldr	r1, [r3, #28]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	021a      	lsls	r2, r3, #8
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	61da      	str	r2, [r3, #28]
      break;
 8002f7a:	e002      	b.n	8002f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e0b4      	b.n	800311a <HAL_TIM_ConfigClockSource+0x186>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe8:	d03e      	beq.n	8003068 <HAL_TIM_ConfigClockSource+0xd4>
 8002fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fee:	f200 8087 	bhi.w	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff6:	f000 8086 	beq.w	8003106 <HAL_TIM_ConfigClockSource+0x172>
 8002ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffe:	d87f      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003000:	2b70      	cmp	r3, #112	; 0x70
 8003002:	d01a      	beq.n	800303a <HAL_TIM_ConfigClockSource+0xa6>
 8003004:	2b70      	cmp	r3, #112	; 0x70
 8003006:	d87b      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003008:	2b60      	cmp	r3, #96	; 0x60
 800300a:	d050      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x11a>
 800300c:	2b60      	cmp	r3, #96	; 0x60
 800300e:	d877      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003010:	2b50      	cmp	r3, #80	; 0x50
 8003012:	d03c      	beq.n	800308e <HAL_TIM_ConfigClockSource+0xfa>
 8003014:	2b50      	cmp	r3, #80	; 0x50
 8003016:	d873      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	d058      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0x13a>
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d86f      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003020:	2b30      	cmp	r3, #48	; 0x30
 8003022:	d064      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 8003024:	2b30      	cmp	r3, #48	; 0x30
 8003026:	d86b      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003028:	2b20      	cmp	r3, #32
 800302a:	d060      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 800302c:	2b20      	cmp	r3, #32
 800302e:	d867      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d05c      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 8003034:	2b10      	cmp	r3, #16
 8003036:	d05a      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 8003038:	e062      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6899      	ldr	r1, [r3, #8]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f000 fc30 	bl	80038ae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800305c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	609a      	str	r2, [r3, #8]
      break;
 8003066:	e04f      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	6899      	ldr	r1, [r3, #8]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f000 fc19 	bl	80038ae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800308a:	609a      	str	r2, [r3, #8]
      break;
 800308c:	e03c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6859      	ldr	r1, [r3, #4]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	461a      	mov	r2, r3
 800309c:	f000 fb8d 	bl	80037ba <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2150      	movs	r1, #80	; 0x50
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fbe6 	bl	8003878 <TIM_ITRx_SetConfig>
      break;
 80030ac:	e02c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6859      	ldr	r1, [r3, #4]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f000 fbac 	bl	8003818 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2160      	movs	r1, #96	; 0x60
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fbd6 	bl	8003878 <TIM_ITRx_SetConfig>
      break;
 80030cc:	e01c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	6859      	ldr	r1, [r3, #4]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	461a      	mov	r2, r3
 80030dc:	f000 fb6d 	bl	80037ba <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2140      	movs	r1, #64	; 0x40
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fbc6 	bl	8003878 <TIM_ITRx_SetConfig>
      break;
 80030ec:	e00c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4619      	mov	r1, r3
 80030f8:	4610      	mov	r0, r2
 80030fa:	f000 fbbd 	bl	8003878 <TIM_ITRx_SetConfig>
      break;
 80030fe:	e003      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      break;
 8003104:	e000      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_TIM_SlaveConfigSynchro+0x18>
 8003136:	2302      	movs	r3, #2
 8003138:	e031      	b.n	800319e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2202      	movs	r2, #2
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800314a:	6839      	ldr	r1, [r7, #0]
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 faa3 	bl	8003698 <TIM_SlaveTimer_SetConfig>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d009      	beq.n	800316c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e018      	b.n	800319e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800317a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800318a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a40      	ldr	r2, [pc, #256]	; (800330c <TIM_Base_SetConfig+0x114>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d013      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003216:	d00f      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a3d      	ldr	r2, [pc, #244]	; (8003310 <TIM_Base_SetConfig+0x118>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00b      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a3c      	ldr	r2, [pc, #240]	; (8003314 <TIM_Base_SetConfig+0x11c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d007      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a3b      	ldr	r2, [pc, #236]	; (8003318 <TIM_Base_SetConfig+0x120>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d003      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a3a      	ldr	r2, [pc, #232]	; (800331c <TIM_Base_SetConfig+0x124>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d108      	bne.n	800324a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a2f      	ldr	r2, [pc, #188]	; (800330c <TIM_Base_SetConfig+0x114>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d02b      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003258:	d027      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a2c      	ldr	r2, [pc, #176]	; (8003310 <TIM_Base_SetConfig+0x118>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d023      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a2b      	ldr	r2, [pc, #172]	; (8003314 <TIM_Base_SetConfig+0x11c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01f      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a2a      	ldr	r2, [pc, #168]	; (8003318 <TIM_Base_SetConfig+0x120>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d01b      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a29      	ldr	r2, [pc, #164]	; (800331c <TIM_Base_SetConfig+0x124>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d017      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a28      	ldr	r2, [pc, #160]	; (8003320 <TIM_Base_SetConfig+0x128>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a27      	ldr	r2, [pc, #156]	; (8003324 <TIM_Base_SetConfig+0x12c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00f      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a26      	ldr	r2, [pc, #152]	; (8003328 <TIM_Base_SetConfig+0x130>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00b      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a25      	ldr	r2, [pc, #148]	; (800332c <TIM_Base_SetConfig+0x134>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d007      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a24      	ldr	r2, [pc, #144]	; (8003330 <TIM_Base_SetConfig+0x138>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d003      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a23      	ldr	r2, [pc, #140]	; (8003334 <TIM_Base_SetConfig+0x13c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d108      	bne.n	80032bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a0a      	ldr	r2, [pc, #40]	; (800330c <TIM_Base_SetConfig+0x114>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d003      	beq.n	80032f0 <TIM_Base_SetConfig+0xf8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a0c      	ldr	r2, [pc, #48]	; (800331c <TIM_Base_SetConfig+0x124>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d103      	bne.n	80032f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	615a      	str	r2, [r3, #20]
}
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40010000 	.word	0x40010000
 8003310:	40000400 	.word	0x40000400
 8003314:	40000800 	.word	0x40000800
 8003318:	40000c00 	.word	0x40000c00
 800331c:	40010400 	.word	0x40010400
 8003320:	40014000 	.word	0x40014000
 8003324:	40014400 	.word	0x40014400
 8003328:	40014800 	.word	0x40014800
 800332c:	40001800 	.word	0x40001800
 8003330:	40001c00 	.word	0x40001c00
 8003334:	40002000 	.word	0x40002000

08003338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	f023 0201 	bic.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0303 	bic.w	r3, r3, #3
 800336e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f023 0302 	bic.w	r3, r3, #2
 8003380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a20      	ldr	r2, [pc, #128]	; (8003410 <TIM_OC1_SetConfig+0xd8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d003      	beq.n	800339c <TIM_OC1_SetConfig+0x64>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a1f      	ldr	r2, [pc, #124]	; (8003414 <TIM_OC1_SetConfig+0xdc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d10c      	bne.n	80033b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f023 0308 	bic.w	r3, r3, #8
 80033a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f023 0304 	bic.w	r3, r3, #4
 80033b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a15      	ldr	r2, [pc, #84]	; (8003410 <TIM_OC1_SetConfig+0xd8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d003      	beq.n	80033c6 <TIM_OC1_SetConfig+0x8e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a14      	ldr	r2, [pc, #80]	; (8003414 <TIM_OC1_SetConfig+0xdc>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d111      	bne.n	80033ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	621a      	str	r2, [r3, #32]
}
 8003404:	bf00      	nop
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	40010000 	.word	0x40010000
 8003414:	40010400 	.word	0x40010400

08003418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	f023 0210 	bic.w	r2, r3, #16
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f023 0320 	bic.w	r3, r3, #32
 8003462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a22      	ldr	r2, [pc, #136]	; (80034fc <TIM_OC2_SetConfig+0xe4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d003      	beq.n	8003480 <TIM_OC2_SetConfig+0x68>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a21      	ldr	r2, [pc, #132]	; (8003500 <TIM_OC2_SetConfig+0xe8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d10d      	bne.n	800349c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800349a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a17      	ldr	r2, [pc, #92]	; (80034fc <TIM_OC2_SetConfig+0xe4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d003      	beq.n	80034ac <TIM_OC2_SetConfig+0x94>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a16      	ldr	r2, [pc, #88]	; (8003500 <TIM_OC2_SetConfig+0xe8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d113      	bne.n	80034d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	621a      	str	r2, [r3, #32]
}
 80034ee:	bf00      	nop
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40010000 	.word	0x40010000
 8003500:	40010400 	.word	0x40010400

08003504 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0303 	bic.w	r3, r3, #3
 800353a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800354c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	021b      	lsls	r3, r3, #8
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a21      	ldr	r2, [pc, #132]	; (80035e4 <TIM_OC3_SetConfig+0xe0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d003      	beq.n	800356a <TIM_OC3_SetConfig+0x66>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a20      	ldr	r2, [pc, #128]	; (80035e8 <TIM_OC3_SetConfig+0xe4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d10d      	bne.n	8003586 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a16      	ldr	r2, [pc, #88]	; (80035e4 <TIM_OC3_SetConfig+0xe0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d003      	beq.n	8003596 <TIM_OC3_SetConfig+0x92>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <TIM_OC3_SetConfig+0xe4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d113      	bne.n	80035be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800359c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	621a      	str	r2, [r3, #32]
}
 80035d8:	bf00      	nop
 80035da:	371c      	adds	r7, #28
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	40010000 	.word	0x40010000
 80035e8:	40010400 	.word	0x40010400

080035ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800361a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	021b      	lsls	r3, r3, #8
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	031b      	lsls	r3, r3, #12
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a12      	ldr	r2, [pc, #72]	; (8003690 <TIM_OC4_SetConfig+0xa4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d003      	beq.n	8003654 <TIM_OC4_SetConfig+0x68>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a11      	ldr	r2, [pc, #68]	; (8003694 <TIM_OC4_SetConfig+0xa8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d109      	bne.n	8003668 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800365a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	019b      	lsls	r3, r3, #6
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	621a      	str	r2, [r3, #32]
}
 8003682:	bf00      	nop
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40010000 	.word	0x40010000
 8003694:	40010400 	.word	0x40010400

08003698 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f023 0307 	bic.w	r3, r3, #7
 80036c6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b70      	cmp	r3, #112	; 0x70
 80036e0:	d01a      	beq.n	8003718 <TIM_SlaveTimer_SetConfig+0x80>
 80036e2:	2b70      	cmp	r3, #112	; 0x70
 80036e4:	d860      	bhi.n	80037a8 <TIM_SlaveTimer_SetConfig+0x110>
 80036e6:	2b60      	cmp	r3, #96	; 0x60
 80036e8:	d054      	beq.n	8003794 <TIM_SlaveTimer_SetConfig+0xfc>
 80036ea:	2b60      	cmp	r3, #96	; 0x60
 80036ec:	d85c      	bhi.n	80037a8 <TIM_SlaveTimer_SetConfig+0x110>
 80036ee:	2b50      	cmp	r3, #80	; 0x50
 80036f0:	d046      	beq.n	8003780 <TIM_SlaveTimer_SetConfig+0xe8>
 80036f2:	2b50      	cmp	r3, #80	; 0x50
 80036f4:	d858      	bhi.n	80037a8 <TIM_SlaveTimer_SetConfig+0x110>
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	d019      	beq.n	800372e <TIM_SlaveTimer_SetConfig+0x96>
 80036fa:	2b40      	cmp	r3, #64	; 0x40
 80036fc:	d854      	bhi.n	80037a8 <TIM_SlaveTimer_SetConfig+0x110>
 80036fe:	2b30      	cmp	r3, #48	; 0x30
 8003700:	d055      	beq.n	80037ae <TIM_SlaveTimer_SetConfig+0x116>
 8003702:	2b30      	cmp	r3, #48	; 0x30
 8003704:	d850      	bhi.n	80037a8 <TIM_SlaveTimer_SetConfig+0x110>
 8003706:	2b20      	cmp	r3, #32
 8003708:	d051      	beq.n	80037ae <TIM_SlaveTimer_SetConfig+0x116>
 800370a:	2b20      	cmp	r3, #32
 800370c:	d84c      	bhi.n	80037a8 <TIM_SlaveTimer_SetConfig+0x110>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d04d      	beq.n	80037ae <TIM_SlaveTimer_SetConfig+0x116>
 8003712:	2b10      	cmp	r3, #16
 8003714:	d04b      	beq.n	80037ae <TIM_SlaveTimer_SetConfig+0x116>
 8003716:	e047      	b.n	80037a8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68d9      	ldr	r1, [r3, #12]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f000 f8c1 	bl	80038ae <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800372c:	e040      	b.n	80037b0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b05      	cmp	r3, #5
 8003734:	d101      	bne.n	800373a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e03b      	b.n	80037b2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6a1a      	ldr	r2, [r3, #32]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003760:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	4313      	orrs	r3, r2
 800376c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	621a      	str	r2, [r3, #32]
      break;
 800377e:	e017      	b.n	80037b0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	6899      	ldr	r1, [r3, #8]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	461a      	mov	r2, r3
 800378e:	f000 f814 	bl	80037ba <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003792:	e00d      	b.n	80037b0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	6899      	ldr	r1, [r3, #8]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	461a      	mov	r2, r3
 80037a2:	f000 f839 	bl	8003818 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80037a6:	e003      	b.n	80037b0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	75fb      	strb	r3, [r7, #23]
      break;
 80037ac:	e000      	b.n	80037b0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80037ae:	bf00      	nop
  }

  return status;
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b087      	sub	sp, #28
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	f023 0201 	bic.w	r2, r3, #1
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f023 030a 	bic.w	r3, r3, #10
 80037f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	621a      	str	r2, [r3, #32]
}
 800380c:	bf00      	nop
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	f023 0210 	bic.w	r2, r3, #16
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003842:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	031b      	lsls	r3, r3, #12
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003854:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	621a      	str	r2, [r3, #32]
}
 800386c:	bf00      	nop
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	f043 0307 	orr.w	r3, r3, #7
 800389a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	609a      	str	r2, [r3, #8]
}
 80038a2:	bf00      	nop
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b087      	sub	sp, #28
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	021a      	lsls	r2, r3, #8
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	609a      	str	r2, [r3, #8]
}
 80038e2:	bf00      	nop
 80038e4:	371c      	adds	r7, #28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b087      	sub	sp, #28
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	2201      	movs	r2, #1
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a1a      	ldr	r2, [r3, #32]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	43db      	mvns	r3, r3
 8003910:	401a      	ands	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a1a      	ldr	r2, [r3, #32]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	fa01 f303 	lsl.w	r3, r1, r3
 8003926:	431a      	orrs	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	621a      	str	r2, [r3, #32]
}
 800392c:	bf00      	nop
 800392e:	371c      	adds	r7, #28
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800394c:	2302      	movs	r3, #2
 800394e:	e05a      	b.n	8003a06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a21      	ldr	r2, [pc, #132]	; (8003a14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d022      	beq.n	80039da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399c:	d01d      	beq.n	80039da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1d      	ldr	r2, [pc, #116]	; (8003a18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d018      	beq.n	80039da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1b      	ldr	r2, [pc, #108]	; (8003a1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d013      	beq.n	80039da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a1a      	ldr	r2, [pc, #104]	; (8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00e      	beq.n	80039da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a18      	ldr	r2, [pc, #96]	; (8003a24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d009      	beq.n	80039da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a17      	ldr	r2, [pc, #92]	; (8003a28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d004      	beq.n	80039da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d10c      	bne.n	80039f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40010000 	.word	0x40010000
 8003a18:	40000400 	.word	0x40000400
 8003a1c:	40000800 	.word	0x40000800
 8003a20:	40000c00 	.word	0x40000c00
 8003a24:	40010400 	.word	0x40010400
 8003a28:	40014000 	.word	0x40014000
 8003a2c:	40001800 	.word	0x40001800

08003a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e03f      	b.n	8003aea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fd fbca 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2224      	movs	r2, #36	; 0x24
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fddb 	bl	8004658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b08a      	sub	sp, #40	; 0x28
 8003af6:	af02      	add	r7, sp, #8
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	603b      	str	r3, [r7, #0]
 8003afe:	4613      	mov	r3, r2
 8003b00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d17c      	bne.n	8003c0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <HAL_UART_Transmit+0x2c>
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e075      	b.n	8003c0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_UART_Transmit+0x3e>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e06e      	b.n	8003c0e <HAL_UART_Transmit+0x11c>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2221      	movs	r2, #33	; 0x21
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b46:	f7fd fddd 	bl	8001704 <HAL_GetTick>
 8003b4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	88fa      	ldrh	r2, [r7, #6]
 8003b50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	88fa      	ldrh	r2, [r7, #6]
 8003b56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b60:	d108      	bne.n	8003b74 <HAL_UART_Transmit+0x82>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d104      	bne.n	8003b74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	e003      	b.n	8003b7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b84:	e02a      	b.n	8003bdc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2180      	movs	r1, #128	; 0x80
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 fb1f 	bl	80041d4 <UART_WaitOnFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e036      	b.n	8003c0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10b      	bne.n	8003bbe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	3302      	adds	r3, #2
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	e007      	b.n	8003bce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	781a      	ldrb	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1cf      	bne.n	8003b86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2200      	movs	r2, #0
 8003bee:	2140      	movs	r1, #64	; 0x40
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 faef 	bl	80041d4 <UART_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e006      	b.n	8003c0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e000      	b.n	8003c0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c0c:	2302      	movs	r3, #2
  }
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3720      	adds	r7, #32
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	4613      	mov	r3, r2
 8003c22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d11d      	bne.n	8003c6c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_UART_Receive_IT+0x26>
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e016      	b.n	8003c6e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_UART_Receive_IT+0x38>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e00f      	b.n	8003c6e <HAL_UART_Receive_IT+0x58>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fb24 	bl	80042b0 <UART_Start_Receive_IT>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	e000      	b.n	8003c6e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003c6c:	2302      	movs	r3, #2
  }
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b0ba      	sub	sp, #232	; 0xe8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10f      	bne.n	8003cde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <HAL_UART_IRQHandler+0x66>
 8003cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fc03 	bl	80044e2 <UART_Receive_IT>
      return;
 8003cdc:	e256      	b.n	800418c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 80de 	beq.w	8003ea4 <HAL_UART_IRQHandler+0x22c>
 8003ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d106      	bne.n	8003d02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 80d1 	beq.w	8003ea4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00b      	beq.n	8003d26 <HAL_UART_IRQHandler+0xae>
 8003d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	f043 0201 	orr.w	r2, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <HAL_UART_IRQHandler+0xd2>
 8003d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d005      	beq.n	8003d4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f043 0202 	orr.w	r2, r3, #2
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00b      	beq.n	8003d6e <HAL_UART_IRQHandler+0xf6>
 8003d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d005      	beq.n	8003d6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f043 0204 	orr.w	r2, r3, #4
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d011      	beq.n	8003d9e <HAL_UART_IRQHandler+0x126>
 8003d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d105      	bne.n	8003d92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	f043 0208 	orr.w	r2, r3, #8
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 81ed 	beq.w	8004182 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x14e>
 8003db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 fb8e 	bl	80044e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd0:	2b40      	cmp	r3, #64	; 0x40
 8003dd2:	bf0c      	ite	eq
 8003dd4:	2301      	moveq	r3, #1
 8003dd6:	2300      	movne	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d103      	bne.n	8003df2 <HAL_UART_IRQHandler+0x17a>
 8003dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d04f      	beq.n	8003e92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fa96 	bl	8004324 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d141      	bne.n	8003e8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3314      	adds	r3, #20
 8003e0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e14:	e853 3f00 	ldrex	r3, [r3]
 8003e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3314      	adds	r3, #20
 8003e2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1d9      	bne.n	8003e06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d013      	beq.n	8003e82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	4a7d      	ldr	r2, [pc, #500]	; (8004054 <HAL_UART_IRQHandler+0x3dc>)
 8003e60:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fd fdce 	bl	8001a08 <HAL_DMA_Abort_IT>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d016      	beq.n	8003ea0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e80:	e00e      	b.n	8003ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f990 	bl	80041a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e88:	e00a      	b.n	8003ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f98c 	bl	80041a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e90:	e006      	b.n	8003ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f988 	bl	80041a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e9e:	e170      	b.n	8004182 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea0:	bf00      	nop
    return;
 8003ea2:	e16e      	b.n	8004182 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	f040 814a 	bne.w	8004142 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb2:	f003 0310 	and.w	r3, r3, #16
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 8143 	beq.w	8004142 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 813c 	beq.w	8004142 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eea:	2b40      	cmp	r3, #64	; 0x40
 8003eec:	f040 80b4 	bne.w	8004058 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003efc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 8140 	beq.w	8004186 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	f080 8139 	bcs.w	8004186 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f26:	f000 8088 	beq.w	800403a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	330c      	adds	r3, #12
 8003f30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	330c      	adds	r3, #12
 8003f52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1d9      	bne.n	8003f2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3314      	adds	r3, #20
 8003f7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3314      	adds	r3, #20
 8003f96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e1      	bne.n	8003f76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3314      	adds	r3, #20
 8003fb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3314      	adds	r3, #20
 8003fd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003fd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003fdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fde:	e841 2300 	strex	r3, r2, [r1]
 8003fe2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e3      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	330c      	adds	r3, #12
 8003ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800400a:	f023 0310 	bic.w	r3, r3, #16
 800400e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	330c      	adds	r3, #12
 8004018:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800401c:	65ba      	str	r2, [r7, #88]	; 0x58
 800401e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004020:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004022:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004024:	e841 2300 	strex	r3, r2, [r1]
 8004028:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800402a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e3      	bne.n	8003ff8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	4618      	mov	r0, r3
 8004036:	f7fd fc77 	bl	8001928 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004042:	b29b      	uxth	r3, r3
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	b29b      	uxth	r3, r3
 8004048:	4619      	mov	r1, r3
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f8b6 	bl	80041bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004050:	e099      	b.n	8004186 <HAL_UART_IRQHandler+0x50e>
 8004052:	bf00      	nop
 8004054:	080043eb 	.word	0x080043eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004060:	b29b      	uxth	r3, r3
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 808b 	beq.w	800418a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004074:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 8086 	beq.w	800418a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	330c      	adds	r3, #12
 8004084:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004088:	e853 3f00 	ldrex	r3, [r3]
 800408c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800408e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004090:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004094:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	330c      	adds	r3, #12
 800409e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80040a2:	647a      	str	r2, [r7, #68]	; 0x44
 80040a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1e3      	bne.n	800407e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3314      	adds	r3, #20
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	623b      	str	r3, [r7, #32]
   return(result);
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3314      	adds	r3, #20
 80040d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040da:	633a      	str	r2, [r7, #48]	; 0x30
 80040dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e3      	bne.n	80040b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	330c      	adds	r3, #12
 8004102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	60fb      	str	r3, [r7, #12]
   return(result);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0310 	bic.w	r3, r3, #16
 8004112:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	330c      	adds	r3, #12
 800411c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004120:	61fa      	str	r2, [r7, #28]
 8004122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	69b9      	ldr	r1, [r7, #24]
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	617b      	str	r3, [r7, #20]
   return(result);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e3      	bne.n	80040fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004134:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004138:	4619      	mov	r1, r3
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f83e 	bl	80041bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004140:	e023      	b.n	800418a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414a:	2b00      	cmp	r3, #0
 800414c:	d009      	beq.n	8004162 <HAL_UART_IRQHandler+0x4ea>
 800414e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f959 	bl	8004412 <UART_Transmit_IT>
    return;
 8004160:	e014      	b.n	800418c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00e      	beq.n	800418c <HAL_UART_IRQHandler+0x514>
 800416e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f999 	bl	80044b2 <UART_EndTransmit_IT>
    return;
 8004180:	e004      	b.n	800418c <HAL_UART_IRQHandler+0x514>
    return;
 8004182:	bf00      	nop
 8004184:	e002      	b.n	800418c <HAL_UART_IRQHandler+0x514>
      return;
 8004186:	bf00      	nop
 8004188:	e000      	b.n	800418c <HAL_UART_IRQHandler+0x514>
      return;
 800418a:	bf00      	nop
  }
}
 800418c:	37e8      	adds	r7, #232	; 0xe8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop

08004194 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b090      	sub	sp, #64	; 0x40
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	4613      	mov	r3, r2
 80041e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e4:	e050      	b.n	8004288 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ec:	d04c      	beq.n	8004288 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d007      	beq.n	8004204 <UART_WaitOnFlagUntilTimeout+0x30>
 80041f4:	f7fd fa86 	bl	8001704 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004200:	429a      	cmp	r2, r3
 8004202:	d241      	bcs.n	8004288 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	330c      	adds	r3, #12
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800421a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004224:	637a      	str	r2, [r7, #52]	; 0x34
 8004226:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800422a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e5      	bne.n	8004204 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3314      	adds	r3, #20
 800423e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	e853 3f00 	ldrex	r3, [r3]
 8004246:	613b      	str	r3, [r7, #16]
   return(result);
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3314      	adds	r3, #20
 8004256:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004258:	623a      	str	r2, [r7, #32]
 800425a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425c:	69f9      	ldr	r1, [r7, #28]
 800425e:	6a3a      	ldr	r2, [r7, #32]
 8004260:	e841 2300 	strex	r3, r2, [r1]
 8004264:	61bb      	str	r3, [r7, #24]
   return(result);
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e5      	bne.n	8004238 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e00f      	b.n	80042a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4013      	ands	r3, r2
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	429a      	cmp	r2, r3
 8004296:	bf0c      	ite	eq
 8004298:	2301      	moveq	r3, #1
 800429a:	2300      	movne	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d09f      	beq.n	80041e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3740      	adds	r7, #64	; 0x40
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	88fa      	ldrh	r2, [r7, #6]
 80042c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	88fa      	ldrh	r2, [r7, #6]
 80042ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2222      	movs	r2, #34	; 0x22
 80042da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0220 	orr.w	r2, r2, #32
 8004314:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004324:	b480      	push	{r7}
 8004326:	b095      	sub	sp, #84	; 0x54
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	330c      	adds	r3, #12
 8004332:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	330c      	adds	r3, #12
 800434a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800434c:	643a      	str	r2, [r7, #64]	; 0x40
 800434e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004352:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e5      	bne.n	800432c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3314      	adds	r3, #20
 8004366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	e853 3f00 	ldrex	r3, [r3]
 800436e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f023 0301 	bic.w	r3, r3, #1
 8004376:	64bb      	str	r3, [r7, #72]	; 0x48
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3314      	adds	r3, #20
 800437e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004380:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e5      	bne.n	8004360 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	2b01      	cmp	r3, #1
 800439a:	d119      	bne.n	80043d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	330c      	adds	r3, #12
 80043a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f023 0310 	bic.w	r3, r3, #16
 80043b2:	647b      	str	r3, [r7, #68]	; 0x44
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	330c      	adds	r3, #12
 80043ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043bc:	61ba      	str	r2, [r7, #24]
 80043be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	6979      	ldr	r1, [r7, #20]
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	613b      	str	r3, [r7, #16]
   return(result);
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e5      	bne.n	800439c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043de:	bf00      	nop
 80043e0:	3754      	adds	r7, #84	; 0x54
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f7ff fecf 	bl	80041a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800440a:	bf00      	nop
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004412:	b480      	push	{r7}
 8004414:	b085      	sub	sp, #20
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b21      	cmp	r3, #33	; 0x21
 8004424:	d13e      	bne.n	80044a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800442e:	d114      	bne.n	800445a <UART_Transmit_IT+0x48>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d110      	bne.n	800445a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800444c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	1c9a      	adds	r2, r3, #2
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	621a      	str	r2, [r3, #32]
 8004458:	e008      	b.n	800446c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	1c59      	adds	r1, r3, #1
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6211      	str	r1, [r2, #32]
 8004464:	781a      	ldrb	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004470:	b29b      	uxth	r3, r3
 8004472:	3b01      	subs	r3, #1
 8004474:	b29b      	uxth	r3, r3
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	4619      	mov	r1, r3
 800447a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10f      	bne.n	80044a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800448e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800449e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	e000      	b.n	80044a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044a4:	2302      	movs	r3, #2
  }
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff fe5e 	bl	8004194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b08c      	sub	sp, #48	; 0x30
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b22      	cmp	r3, #34	; 0x22
 80044f4:	f040 80ab 	bne.w	800464e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004500:	d117      	bne.n	8004532 <UART_Receive_IT+0x50>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d113      	bne.n	8004532 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800450a:	2300      	movs	r3, #0
 800450c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	b29b      	uxth	r3, r3
 800451c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004520:	b29a      	uxth	r2, r3
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452a:	1c9a      	adds	r2, r3, #2
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	629a      	str	r2, [r3, #40]	; 0x28
 8004530:	e026      	b.n	8004580 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004538:	2300      	movs	r3, #0
 800453a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004544:	d007      	beq.n	8004556 <UART_Receive_IT+0x74>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10a      	bne.n	8004564 <UART_Receive_IT+0x82>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	b2da      	uxtb	r2, r3
 800455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	e008      	b.n	8004576 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004570:	b2da      	uxtb	r2, r3
 8004572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004574:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004584:	b29b      	uxth	r3, r3
 8004586:	3b01      	subs	r3, #1
 8004588:	b29b      	uxth	r3, r3
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	4619      	mov	r1, r3
 800458e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004590:	2b00      	cmp	r3, #0
 8004592:	d15a      	bne.n	800464a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0220 	bic.w	r2, r2, #32
 80045a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695a      	ldr	r2, [r3, #20]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0201 	bic.w	r2, r2, #1
 80045c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d135      	bne.n	8004640 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	330c      	adds	r3, #12
 80045e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	613b      	str	r3, [r7, #16]
   return(result);
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f023 0310 	bic.w	r3, r3, #16
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fa:	623a      	str	r2, [r7, #32]
 80045fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	69f9      	ldr	r1, [r7, #28]
 8004600:	6a3a      	ldr	r2, [r7, #32]
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	61bb      	str	r3, [r7, #24]
   return(result);
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e5      	bne.n	80045da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b10      	cmp	r3, #16
 800461a:	d10a      	bne.n	8004632 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004636:	4619      	mov	r1, r3
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff fdbf 	bl	80041bc <HAL_UARTEx_RxEventCallback>
 800463e:	e002      	b.n	8004646 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f003 f8a7 	bl	8007794 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	e002      	b.n	8004650 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e000      	b.n	8004650 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800464e:	2302      	movs	r3, #2
  }
}
 8004650:	4618      	mov	r0, r3
 8004652:	3730      	adds	r7, #48	; 0x30
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800465c:	b09f      	sub	sp, #124	; 0x7c
 800465e:	af00      	add	r7, sp, #0
 8004660:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800466c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466e:	68d9      	ldr	r1, [r3, #12]
 8004670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	ea40 0301 	orr.w	r3, r0, r1
 8004678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800467a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	431a      	orrs	r2, r3
 8004684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	431a      	orrs	r2, r3
 800468a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	4313      	orrs	r3, r2
 8004690:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800469c:	f021 010c 	bic.w	r1, r1, #12
 80046a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046a6:	430b      	orrs	r3, r1
 80046a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b6:	6999      	ldr	r1, [r3, #24]
 80046b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	ea40 0301 	orr.w	r3, r0, r1
 80046c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	4bc5      	ldr	r3, [pc, #788]	; (80049dc <UART_SetConfig+0x384>)
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d004      	beq.n	80046d6 <UART_SetConfig+0x7e>
 80046cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	4bc3      	ldr	r3, [pc, #780]	; (80049e0 <UART_SetConfig+0x388>)
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d103      	bne.n	80046de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046d6:	f7fe f803 	bl	80026e0 <HAL_RCC_GetPCLK2Freq>
 80046da:	6778      	str	r0, [r7, #116]	; 0x74
 80046dc:	e002      	b.n	80046e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046de:	f7fd ffeb 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 80046e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ec:	f040 80b6 	bne.w	800485c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046f2:	461c      	mov	r4, r3
 80046f4:	f04f 0500 	mov.w	r5, #0
 80046f8:	4622      	mov	r2, r4
 80046fa:	462b      	mov	r3, r5
 80046fc:	1891      	adds	r1, r2, r2
 80046fe:	6439      	str	r1, [r7, #64]	; 0x40
 8004700:	415b      	adcs	r3, r3
 8004702:	647b      	str	r3, [r7, #68]	; 0x44
 8004704:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004708:	1912      	adds	r2, r2, r4
 800470a:	eb45 0303 	adc.w	r3, r5, r3
 800470e:	f04f 0000 	mov.w	r0, #0
 8004712:	f04f 0100 	mov.w	r1, #0
 8004716:	00d9      	lsls	r1, r3, #3
 8004718:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800471c:	00d0      	lsls	r0, r2, #3
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	1911      	adds	r1, r2, r4
 8004724:	6639      	str	r1, [r7, #96]	; 0x60
 8004726:	416b      	adcs	r3, r5
 8004728:	667b      	str	r3, [r7, #100]	; 0x64
 800472a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	461a      	mov	r2, r3
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	1891      	adds	r1, r2, r2
 8004736:	63b9      	str	r1, [r7, #56]	; 0x38
 8004738:	415b      	adcs	r3, r3
 800473a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800473c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004740:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004744:	f7fb fda4 	bl	8000290 <__aeabi_uldivmod>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4ba5      	ldr	r3, [pc, #660]	; (80049e4 <UART_SetConfig+0x38c>)
 800474e:	fba3 2302 	umull	r2, r3, r3, r2
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	011e      	lsls	r6, r3, #4
 8004756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004758:	461c      	mov	r4, r3
 800475a:	f04f 0500 	mov.w	r5, #0
 800475e:	4622      	mov	r2, r4
 8004760:	462b      	mov	r3, r5
 8004762:	1891      	adds	r1, r2, r2
 8004764:	6339      	str	r1, [r7, #48]	; 0x30
 8004766:	415b      	adcs	r3, r3
 8004768:	637b      	str	r3, [r7, #52]	; 0x34
 800476a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800476e:	1912      	adds	r2, r2, r4
 8004770:	eb45 0303 	adc.w	r3, r5, r3
 8004774:	f04f 0000 	mov.w	r0, #0
 8004778:	f04f 0100 	mov.w	r1, #0
 800477c:	00d9      	lsls	r1, r3, #3
 800477e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004782:	00d0      	lsls	r0, r2, #3
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	1911      	adds	r1, r2, r4
 800478a:	65b9      	str	r1, [r7, #88]	; 0x58
 800478c:	416b      	adcs	r3, r5
 800478e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	461a      	mov	r2, r3
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	1891      	adds	r1, r2, r2
 800479c:	62b9      	str	r1, [r7, #40]	; 0x28
 800479e:	415b      	adcs	r3, r3
 80047a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80047aa:	f7fb fd71 	bl	8000290 <__aeabi_uldivmod>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4b8c      	ldr	r3, [pc, #560]	; (80049e4 <UART_SetConfig+0x38c>)
 80047b4:	fba3 1302 	umull	r1, r3, r3, r2
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	2164      	movs	r1, #100	; 0x64
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	3332      	adds	r3, #50	; 0x32
 80047c6:	4a87      	ldr	r2, [pc, #540]	; (80049e4 <UART_SetConfig+0x38c>)
 80047c8:	fba2 2303 	umull	r2, r3, r2, r3
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047d4:	441e      	add	r6, r3
 80047d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047d8:	4618      	mov	r0, r3
 80047da:	f04f 0100 	mov.w	r1, #0
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	1894      	adds	r4, r2, r2
 80047e4:	623c      	str	r4, [r7, #32]
 80047e6:	415b      	adcs	r3, r3
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047ee:	1812      	adds	r2, r2, r0
 80047f0:	eb41 0303 	adc.w	r3, r1, r3
 80047f4:	f04f 0400 	mov.w	r4, #0
 80047f8:	f04f 0500 	mov.w	r5, #0
 80047fc:	00dd      	lsls	r5, r3, #3
 80047fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004802:	00d4      	lsls	r4, r2, #3
 8004804:	4622      	mov	r2, r4
 8004806:	462b      	mov	r3, r5
 8004808:	1814      	adds	r4, r2, r0
 800480a:	653c      	str	r4, [r7, #80]	; 0x50
 800480c:	414b      	adcs	r3, r1
 800480e:	657b      	str	r3, [r7, #84]	; 0x54
 8004810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	461a      	mov	r2, r3
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	1891      	adds	r1, r2, r2
 800481c:	61b9      	str	r1, [r7, #24]
 800481e:	415b      	adcs	r3, r3
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004826:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800482a:	f7fb fd31 	bl	8000290 <__aeabi_uldivmod>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	4b6c      	ldr	r3, [pc, #432]	; (80049e4 <UART_SetConfig+0x38c>)
 8004834:	fba3 1302 	umull	r1, r3, r3, r2
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	2164      	movs	r1, #100	; 0x64
 800483c:	fb01 f303 	mul.w	r3, r1, r3
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	3332      	adds	r3, #50	; 0x32
 8004846:	4a67      	ldr	r2, [pc, #412]	; (80049e4 <UART_SetConfig+0x38c>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	f003 0207 	and.w	r2, r3, #7
 8004852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4432      	add	r2, r6
 8004858:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800485a:	e0b9      	b.n	80049d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800485c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800485e:	461c      	mov	r4, r3
 8004860:	f04f 0500 	mov.w	r5, #0
 8004864:	4622      	mov	r2, r4
 8004866:	462b      	mov	r3, r5
 8004868:	1891      	adds	r1, r2, r2
 800486a:	6139      	str	r1, [r7, #16]
 800486c:	415b      	adcs	r3, r3
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004874:	1912      	adds	r2, r2, r4
 8004876:	eb45 0303 	adc.w	r3, r5, r3
 800487a:	f04f 0000 	mov.w	r0, #0
 800487e:	f04f 0100 	mov.w	r1, #0
 8004882:	00d9      	lsls	r1, r3, #3
 8004884:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004888:	00d0      	lsls	r0, r2, #3
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	eb12 0804 	adds.w	r8, r2, r4
 8004892:	eb43 0905 	adc.w	r9, r3, r5
 8004896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4618      	mov	r0, r3
 800489c:	f04f 0100 	mov.w	r1, #0
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	008b      	lsls	r3, r1, #2
 80048aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048ae:	0082      	lsls	r2, r0, #2
 80048b0:	4640      	mov	r0, r8
 80048b2:	4649      	mov	r1, r9
 80048b4:	f7fb fcec 	bl	8000290 <__aeabi_uldivmod>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4b49      	ldr	r3, [pc, #292]	; (80049e4 <UART_SetConfig+0x38c>)
 80048be:	fba3 2302 	umull	r2, r3, r3, r2
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	011e      	lsls	r6, r3, #4
 80048c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048c8:	4618      	mov	r0, r3
 80048ca:	f04f 0100 	mov.w	r1, #0
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	1894      	adds	r4, r2, r2
 80048d4:	60bc      	str	r4, [r7, #8]
 80048d6:	415b      	adcs	r3, r3
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048de:	1812      	adds	r2, r2, r0
 80048e0:	eb41 0303 	adc.w	r3, r1, r3
 80048e4:	f04f 0400 	mov.w	r4, #0
 80048e8:	f04f 0500 	mov.w	r5, #0
 80048ec:	00dd      	lsls	r5, r3, #3
 80048ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80048f2:	00d4      	lsls	r4, r2, #3
 80048f4:	4622      	mov	r2, r4
 80048f6:	462b      	mov	r3, r5
 80048f8:	1814      	adds	r4, r2, r0
 80048fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80048fc:	414b      	adcs	r3, r1
 80048fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	4618      	mov	r0, r3
 8004906:	f04f 0100 	mov.w	r1, #0
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	f04f 0300 	mov.w	r3, #0
 8004912:	008b      	lsls	r3, r1, #2
 8004914:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004918:	0082      	lsls	r2, r0, #2
 800491a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800491e:	f7fb fcb7 	bl	8000290 <__aeabi_uldivmod>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4b2f      	ldr	r3, [pc, #188]	; (80049e4 <UART_SetConfig+0x38c>)
 8004928:	fba3 1302 	umull	r1, r3, r3, r2
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	2164      	movs	r1, #100	; 0x64
 8004930:	fb01 f303 	mul.w	r3, r1, r3
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	3332      	adds	r3, #50	; 0x32
 800493a:	4a2a      	ldr	r2, [pc, #168]	; (80049e4 <UART_SetConfig+0x38c>)
 800493c:	fba2 2303 	umull	r2, r3, r2, r3
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004946:	441e      	add	r6, r3
 8004948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800494a:	4618      	mov	r0, r3
 800494c:	f04f 0100 	mov.w	r1, #0
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	1894      	adds	r4, r2, r2
 8004956:	603c      	str	r4, [r7, #0]
 8004958:	415b      	adcs	r3, r3
 800495a:	607b      	str	r3, [r7, #4]
 800495c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004960:	1812      	adds	r2, r2, r0
 8004962:	eb41 0303 	adc.w	r3, r1, r3
 8004966:	f04f 0400 	mov.w	r4, #0
 800496a:	f04f 0500 	mov.w	r5, #0
 800496e:	00dd      	lsls	r5, r3, #3
 8004970:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004974:	00d4      	lsls	r4, r2, #3
 8004976:	4622      	mov	r2, r4
 8004978:	462b      	mov	r3, r5
 800497a:	eb12 0a00 	adds.w	sl, r2, r0
 800497e:	eb43 0b01 	adc.w	fp, r3, r1
 8004982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	4618      	mov	r0, r3
 8004988:	f04f 0100 	mov.w	r1, #0
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	008b      	lsls	r3, r1, #2
 8004996:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800499a:	0082      	lsls	r2, r0, #2
 800499c:	4650      	mov	r0, sl
 800499e:	4659      	mov	r1, fp
 80049a0:	f7fb fc76 	bl	8000290 <__aeabi_uldivmod>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4b0e      	ldr	r3, [pc, #56]	; (80049e4 <UART_SetConfig+0x38c>)
 80049aa:	fba3 1302 	umull	r1, r3, r3, r2
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	2164      	movs	r1, #100	; 0x64
 80049b2:	fb01 f303 	mul.w	r3, r1, r3
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	3332      	adds	r3, #50	; 0x32
 80049bc:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <UART_SetConfig+0x38c>)
 80049be:	fba2 2303 	umull	r2, r3, r2, r3
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	f003 020f 	and.w	r2, r3, #15
 80049c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4432      	add	r2, r6
 80049ce:	609a      	str	r2, [r3, #8]
}
 80049d0:	bf00      	nop
 80049d2:	377c      	adds	r7, #124	; 0x7c
 80049d4:	46bd      	mov	sp, r7
 80049d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049da:	bf00      	nop
 80049dc:	40011000 	.word	0x40011000
 80049e0:	40011400 	.word	0x40011400
 80049e4:	51eb851f 	.word	0x51eb851f

080049e8 <__NVIC_SetPriority>:
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	6039      	str	r1, [r7, #0]
 80049f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	db0a      	blt.n	8004a12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	490c      	ldr	r1, [pc, #48]	; (8004a34 <__NVIC_SetPriority+0x4c>)
 8004a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a06:	0112      	lsls	r2, r2, #4
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a10:	e00a      	b.n	8004a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	4908      	ldr	r1, [pc, #32]	; (8004a38 <__NVIC_SetPriority+0x50>)
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	3b04      	subs	r3, #4
 8004a20:	0112      	lsls	r2, r2, #4
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	440b      	add	r3, r1
 8004a26:	761a      	strb	r2, [r3, #24]
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	e000e100 	.word	0xe000e100
 8004a38:	e000ed00 	.word	0xe000ed00

08004a3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <SysTick_Handler+0x1c>)
 8004a42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004a44:	f001 fd28 	bl	8006498 <xTaskGetSchedulerState>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d001      	beq.n	8004a52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004a4e:	f002 fb13 	bl	8007078 <xPortSysTickHandler>
  }
}
 8004a52:	bf00      	nop
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	e000e010 	.word	0xe000e010

08004a5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004a60:	2100      	movs	r1, #0
 8004a62:	f06f 0004 	mvn.w	r0, #4
 8004a66:	f7ff ffbf 	bl	80049e8 <__NVIC_SetPriority>
#endif
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a76:	f3ef 8305 	mrs	r3, IPSR
 8004a7a:	603b      	str	r3, [r7, #0]
  return(result);
 8004a7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004a82:	f06f 0305 	mvn.w	r3, #5
 8004a86:	607b      	str	r3, [r7, #4]
 8004a88:	e00c      	b.n	8004aa4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <osKernelInitialize+0x44>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d105      	bne.n	8004a9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004a92:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <osKernelInitialize+0x44>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	607b      	str	r3, [r7, #4]
 8004a9c:	e002      	b.n	8004aa4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004aa4:	687b      	ldr	r3, [r7, #4]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	20000238 	.word	0x20000238

08004ab8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004abe:	f3ef 8305 	mrs	r3, IPSR
 8004ac2:	603b      	str	r3, [r7, #0]
  return(result);
 8004ac4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004aca:	f06f 0305 	mvn.w	r3, #5
 8004ace:	607b      	str	r3, [r7, #4]
 8004ad0:	e010      	b.n	8004af4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <osKernelStart+0x48>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d109      	bne.n	8004aee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ada:	f7ff ffbf 	bl	8004a5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004ade:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <osKernelStart+0x48>)
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004ae4:	f001 f87c 	bl	8005be0 <vTaskStartScheduler>
      stat = osOK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	607b      	str	r3, [r7, #4]
 8004aec:	e002      	b.n	8004af4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004aee:	f04f 33ff 	mov.w	r3, #4294967295
 8004af2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004af4:	687b      	ldr	r3, [r7, #4]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20000238 	.word	0x20000238

08004b04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08e      	sub	sp, #56	; 0x38
 8004b08:	af04      	add	r7, sp, #16
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b14:	f3ef 8305 	mrs	r3, IPSR
 8004b18:	617b      	str	r3, [r7, #20]
  return(result);
 8004b1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d17e      	bne.n	8004c1e <osThreadNew+0x11a>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d07b      	beq.n	8004c1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004b26:	2380      	movs	r3, #128	; 0x80
 8004b28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004b2a:	2318      	movs	r3, #24
 8004b2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004b32:	f04f 33ff 	mov.w	r3, #4294967295
 8004b36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d045      	beq.n	8004bca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <osThreadNew+0x48>
        name = attr->name;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <osThreadNew+0x6e>
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	2b38      	cmp	r3, #56	; 0x38
 8004b64:	d805      	bhi.n	8004b72 <osThreadNew+0x6e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <osThreadNew+0x72>
        return (NULL);
 8004b72:	2300      	movs	r3, #0
 8004b74:	e054      	b.n	8004c20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	089b      	lsrs	r3, r3, #2
 8004b84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00e      	beq.n	8004bac <osThreadNew+0xa8>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	2bbb      	cmp	r3, #187	; 0xbb
 8004b94:	d90a      	bls.n	8004bac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d006      	beq.n	8004bac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <osThreadNew+0xa8>
        mem = 1;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	e010      	b.n	8004bce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10c      	bne.n	8004bce <osThreadNew+0xca>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d108      	bne.n	8004bce <osThreadNew+0xca>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d104      	bne.n	8004bce <osThreadNew+0xca>
          mem = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61bb      	str	r3, [r7, #24]
 8004bc8:	e001      	b.n	8004bce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d110      	bne.n	8004bf6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bdc:	9202      	str	r2, [sp, #8]
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	6a3a      	ldr	r2, [r7, #32]
 8004be8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 fe0c 	bl	8005808 <xTaskCreateStatic>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	e013      	b.n	8004c1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d110      	bne.n	8004c1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	f107 0310 	add.w	r3, r7, #16
 8004c04:	9301      	str	r3, [sp, #4]
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 fe57 	bl	80058c2 <xTaskCreate>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d001      	beq.n	8004c1e <osThreadNew+0x11a>
            hTask = NULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c1e:	693b      	ldr	r3, [r7, #16]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3728      	adds	r7, #40	; 0x28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c30:	f3ef 8305 	mrs	r3, IPSR
 8004c34:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <osDelay+0x1c>
    stat = osErrorISR;
 8004c3c:	f06f 0305 	mvn.w	r3, #5
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	e007      	b.n	8004c54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 ff92 	bl	8005b78 <vTaskDelay>
    }
  }

  return (stat);
 8004c54:	68fb      	ldr	r3, [r7, #12]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4a07      	ldr	r2, [pc, #28]	; (8004c8c <vApplicationGetIdleTaskMemory+0x2c>)
 8004c70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4a06      	ldr	r2, [pc, #24]	; (8004c90 <vApplicationGetIdleTaskMemory+0x30>)
 8004c76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2280      	movs	r2, #128	; 0x80
 8004c7c:	601a      	str	r2, [r3, #0]
}
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	2000023c 	.word	0x2000023c
 8004c90:	200002f8 	.word	0x200002f8

08004c94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4a07      	ldr	r2, [pc, #28]	; (8004cc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004ca4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	4a06      	ldr	r2, [pc, #24]	; (8004cc4 <vApplicationGetTimerTaskMemory+0x30>)
 8004caa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cb2:	601a      	str	r2, [r3, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	200004f8 	.word	0x200004f8
 8004cc4:	200005b4 	.word	0x200005b4

08004cc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f103 0208 	add.w	r2, r3, #8
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f103 0208 	add.w	r2, r3, #8
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f103 0208 	add.w	r2, r3, #8
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d22:	b480      	push	{r7}
 8004d24:	b085      	sub	sp, #20
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	601a      	str	r2, [r3, #0]
}
 8004d5e:	bf00      	nop
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b085      	sub	sp, #20
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d80:	d103      	bne.n	8004d8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	e00c      	b.n	8004da4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3308      	adds	r3, #8
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	e002      	b.n	8004d98 <vListInsert+0x2e>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d2f6      	bcs.n	8004d92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	601a      	str	r2, [r3, #0]
}
 8004dd0:	bf00      	nop
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6892      	ldr	r2, [r2, #8]
 8004df2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6852      	ldr	r2, [r2, #4]
 8004dfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d103      	bne.n	8004e10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	1e5a      	subs	r2, r3, #1
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10a      	bne.n	8004e5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e56:	bf00      	nop
 8004e58:	e7fe      	b.n	8004e58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e5a:	f002 f87b 	bl	8006f54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	441a      	add	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	68f9      	ldr	r1, [r7, #12]
 8004e8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e90:	fb01 f303 	mul.w	r3, r1, r3
 8004e94:	441a      	add	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	22ff      	movs	r2, #255	; 0xff
 8004e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	22ff      	movs	r2, #255	; 0xff
 8004ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d114      	bne.n	8004eda <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01a      	beq.n	8004eee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3310      	adds	r3, #16
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f001 f929 	bl	8006114 <xTaskRemoveFromEventList>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d012      	beq.n	8004eee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <xQueueGenericReset+0xcc>)
 8004eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	e009      	b.n	8004eee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3310      	adds	r3, #16
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fef2 	bl	8004cc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3324      	adds	r3, #36	; 0x24
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff feed 	bl	8004cc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004eee:	f002 f861 	bl	8006fb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ef2:	2301      	movs	r3, #1
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	e000ed04 	.word	0xe000ed04

08004f00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08e      	sub	sp, #56	; 0x38
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10a      	bne.n	8004f2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f26:	bf00      	nop
 8004f28:	e7fe      	b.n	8004f28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10a      	bne.n	8004f46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f42:	bf00      	nop
 8004f44:	e7fe      	b.n	8004f44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <xQueueGenericCreateStatic+0x52>
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <xQueueGenericCreateStatic+0x56>
 8004f52:	2301      	movs	r3, #1
 8004f54:	e000      	b.n	8004f58 <xQueueGenericCreateStatic+0x58>
 8004f56:	2300      	movs	r3, #0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	623b      	str	r3, [r7, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	e7fe      	b.n	8004f70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d102      	bne.n	8004f7e <xQueueGenericCreateStatic+0x7e>
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <xQueueGenericCreateStatic+0x82>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <xQueueGenericCreateStatic+0x84>
 8004f82:	2300      	movs	r3, #0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10a      	bne.n	8004f9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	61fb      	str	r3, [r7, #28]
}
 8004f9a:	bf00      	nop
 8004f9c:	e7fe      	b.n	8004f9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f9e:	2350      	movs	r3, #80	; 0x50
 8004fa0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2b50      	cmp	r3, #80	; 0x50
 8004fa6:	d00a      	beq.n	8004fbe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	61bb      	str	r3, [r7, #24]
}
 8004fba:	bf00      	nop
 8004fbc:	e7fe      	b.n	8004fbc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004fbe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00d      	beq.n	8004fe6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fd2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f805 	bl	8004ff0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3730      	adds	r7, #48	; 0x30
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d103      	bne.n	800500c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	e002      	b.n	8005012 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800501e:	2101      	movs	r1, #1
 8005020:	69b8      	ldr	r0, [r7, #24]
 8005022:	f7ff ff05 	bl	8004e30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	78fa      	ldrb	r2, [r7, #3]
 800502a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08e      	sub	sp, #56	; 0x38
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005046:	2300      	movs	r3, #0
 8005048:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10a      	bne.n	800506a <xQueueGenericSend+0x32>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005066:	bf00      	nop
 8005068:	e7fe      	b.n	8005068 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d103      	bne.n	8005078 <xQueueGenericSend+0x40>
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <xQueueGenericSend+0x44>
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <xQueueGenericSend+0x46>
 800507c:	2300      	movs	r3, #0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10a      	bne.n	8005098 <xQueueGenericSend+0x60>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005094:	bf00      	nop
 8005096:	e7fe      	b.n	8005096 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d103      	bne.n	80050a6 <xQueueGenericSend+0x6e>
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <xQueueGenericSend+0x72>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e000      	b.n	80050ac <xQueueGenericSend+0x74>
 80050aa:	2300      	movs	r3, #0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10a      	bne.n	80050c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	623b      	str	r3, [r7, #32]
}
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050c6:	f001 f9e7 	bl	8006498 <xTaskGetSchedulerState>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d102      	bne.n	80050d6 <xQueueGenericSend+0x9e>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <xQueueGenericSend+0xa2>
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <xQueueGenericSend+0xa4>
 80050da:	2300      	movs	r3, #0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10a      	bne.n	80050f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	61fb      	str	r3, [r7, #28]
}
 80050f2:	bf00      	nop
 80050f4:	e7fe      	b.n	80050f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050f6:	f001 ff2d 	bl	8006f54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005102:	429a      	cmp	r2, r3
 8005104:	d302      	bcc.n	800510c <xQueueGenericSend+0xd4>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b02      	cmp	r3, #2
 800510a:	d129      	bne.n	8005160 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005112:	f000 fa0b 	bl	800552c <prvCopyDataToQueue>
 8005116:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	2b00      	cmp	r3, #0
 800511e:	d010      	beq.n	8005142 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	3324      	adds	r3, #36	; 0x24
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fff5 	bl	8006114 <xTaskRemoveFromEventList>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d013      	beq.n	8005158 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005130:	4b3f      	ldr	r3, [pc, #252]	; (8005230 <xQueueGenericSend+0x1f8>)
 8005132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	e00a      	b.n	8005158 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005148:	4b39      	ldr	r3, [pc, #228]	; (8005230 <xQueueGenericSend+0x1f8>)
 800514a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005158:	f001 ff2c 	bl	8006fb4 <vPortExitCritical>
				return pdPASS;
 800515c:	2301      	movs	r3, #1
 800515e:	e063      	b.n	8005228 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d103      	bne.n	800516e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005166:	f001 ff25 	bl	8006fb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800516a:	2300      	movs	r3, #0
 800516c:	e05c      	b.n	8005228 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800516e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005170:	2b00      	cmp	r3, #0
 8005172:	d106      	bne.n	8005182 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005174:	f107 0314 	add.w	r3, r7, #20
 8005178:	4618      	mov	r0, r3
 800517a:	f001 f82f 	bl	80061dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800517e:	2301      	movs	r3, #1
 8005180:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005182:	f001 ff17 	bl	8006fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005186:	f000 fd9b 	bl	8005cc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800518a:	f001 fee3 	bl	8006f54 <vPortEnterCritical>
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005194:	b25b      	sxtb	r3, r3
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519a:	d103      	bne.n	80051a4 <xQueueGenericSend+0x16c>
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051aa:	b25b      	sxtb	r3, r3
 80051ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b0:	d103      	bne.n	80051ba <xQueueGenericSend+0x182>
 80051b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051ba:	f001 fefb 	bl	8006fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051be:	1d3a      	adds	r2, r7, #4
 80051c0:	f107 0314 	add.w	r3, r7, #20
 80051c4:	4611      	mov	r1, r2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f001 f81e 	bl	8006208 <xTaskCheckForTimeOut>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d124      	bne.n	800521c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051d4:	f000 faa2 	bl	800571c <prvIsQueueFull>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d018      	beq.n	8005210 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	3310      	adds	r3, #16
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	4611      	mov	r1, r2
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 ff44 	bl	8006074 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80051ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051ee:	f000 fa2d 	bl	800564c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80051f2:	f000 fd73 	bl	8005cdc <xTaskResumeAll>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f47f af7c 	bne.w	80050f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80051fe:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <xQueueGenericSend+0x1f8>)
 8005200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	e772      	b.n	80050f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005212:	f000 fa1b 	bl	800564c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005216:	f000 fd61 	bl	8005cdc <xTaskResumeAll>
 800521a:	e76c      	b.n	80050f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800521c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800521e:	f000 fa15 	bl	800564c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005222:	f000 fd5b 	bl	8005cdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005226:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005228:	4618      	mov	r0, r3
 800522a:	3738      	adds	r7, #56	; 0x38
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	e000ed04 	.word	0xe000ed04

08005234 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b090      	sub	sp, #64	; 0x40
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10a      	bne.n	8005262 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800525e:	bf00      	nop
 8005260:	e7fe      	b.n	8005260 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d103      	bne.n	8005270 <xQueueGenericSendFromISR+0x3c>
 8005268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <xQueueGenericSendFromISR+0x40>
 8005270:	2301      	movs	r3, #1
 8005272:	e000      	b.n	8005276 <xQueueGenericSendFromISR+0x42>
 8005274:	2300      	movs	r3, #0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b02      	cmp	r3, #2
 8005294:	d103      	bne.n	800529e <xQueueGenericSendFromISR+0x6a>
 8005296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <xQueueGenericSendFromISR+0x6e>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <xQueueGenericSendFromISR+0x70>
 80052a2:	2300      	movs	r3, #0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	623b      	str	r3, [r7, #32]
}
 80052ba:	bf00      	nop
 80052bc:	e7fe      	b.n	80052bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052be:	f001 ff2b 	bl	8007118 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052c2:	f3ef 8211 	mrs	r2, BASEPRI
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	61fa      	str	r2, [r7, #28]
 80052d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80052da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d302      	bcc.n	80052f0 <xQueueGenericSendFromISR+0xbc>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d12f      	bne.n	8005350 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80052f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005306:	f000 f911 	bl	800552c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800530a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d112      	bne.n	800533a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	2b00      	cmp	r3, #0
 800531a:	d016      	beq.n	800534a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800531c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531e:	3324      	adds	r3, #36	; 0x24
 8005320:	4618      	mov	r0, r3
 8005322:	f000 fef7 	bl	8006114 <xTaskRemoveFromEventList>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00e      	beq.n	800534a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00b      	beq.n	800534a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	e007      	b.n	800534a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800533a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800533e:	3301      	adds	r3, #1
 8005340:	b2db      	uxtb	r3, r3
 8005342:	b25a      	sxtb	r2, r3
 8005344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800534a:	2301      	movs	r3, #1
 800534c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800534e:	e001      	b.n	8005354 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005350:	2300      	movs	r3, #0
 8005352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005356:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800535e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005362:	4618      	mov	r0, r3
 8005364:	3740      	adds	r7, #64	; 0x40
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08c      	sub	sp, #48	; 0x30
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005378:	2300      	movs	r3, #0
 800537a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <xQueueReceive+0x30>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	623b      	str	r3, [r7, #32]
}
 8005398:	bf00      	nop
 800539a:	e7fe      	b.n	800539a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d103      	bne.n	80053aa <xQueueReceive+0x3e>
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <xQueueReceive+0x42>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <xQueueReceive+0x44>
 80053ae:	2300      	movs	r3, #0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10a      	bne.n	80053ca <xQueueReceive+0x5e>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	61fb      	str	r3, [r7, #28]
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053ca:	f001 f865 	bl	8006498 <xTaskGetSchedulerState>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d102      	bne.n	80053da <xQueueReceive+0x6e>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <xQueueReceive+0x72>
 80053da:	2301      	movs	r3, #1
 80053dc:	e000      	b.n	80053e0 <xQueueReceive+0x74>
 80053de:	2300      	movs	r3, #0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10a      	bne.n	80053fa <xQueueReceive+0x8e>
	__asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	61bb      	str	r3, [r7, #24]
}
 80053f6:	bf00      	nop
 80053f8:	e7fe      	b.n	80053f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053fa:	f001 fdab 	bl	8006f54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	2b00      	cmp	r3, #0
 8005408:	d01f      	beq.n	800544a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800540e:	f000 f8f7 	bl	8005600 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	1e5a      	subs	r2, r3, #1
 8005416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005418:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800541a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00f      	beq.n	8005442 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005424:	3310      	adds	r3, #16
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fe74 	bl	8006114 <xTaskRemoveFromEventList>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d007      	beq.n	8005442 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005432:	4b3d      	ldr	r3, [pc, #244]	; (8005528 <xQueueReceive+0x1bc>)
 8005434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005442:	f001 fdb7 	bl	8006fb4 <vPortExitCritical>
				return pdPASS;
 8005446:	2301      	movs	r3, #1
 8005448:	e069      	b.n	800551e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d103      	bne.n	8005458 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005450:	f001 fdb0 	bl	8006fb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005454:	2300      	movs	r3, #0
 8005456:	e062      	b.n	800551e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800545e:	f107 0310 	add.w	r3, r7, #16
 8005462:	4618      	mov	r0, r3
 8005464:	f000 feba 	bl	80061dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800546c:	f001 fda2 	bl	8006fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005470:	f000 fc26 	bl	8005cc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005474:	f001 fd6e 	bl	8006f54 <vPortEnterCritical>
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800547e:	b25b      	sxtb	r3, r3
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005484:	d103      	bne.n	800548e <xQueueReceive+0x122>
 8005486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800548e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005490:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005494:	b25b      	sxtb	r3, r3
 8005496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549a:	d103      	bne.n	80054a4 <xQueueReceive+0x138>
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054a4:	f001 fd86 	bl	8006fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054a8:	1d3a      	adds	r2, r7, #4
 80054aa:	f107 0310 	add.w	r3, r7, #16
 80054ae:	4611      	mov	r1, r2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 fea9 	bl	8006208 <xTaskCheckForTimeOut>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d123      	bne.n	8005504 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054be:	f000 f917 	bl	80056f0 <prvIsQueueEmpty>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d017      	beq.n	80054f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	3324      	adds	r3, #36	; 0x24
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	4611      	mov	r1, r2
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fdcf 	bl	8006074 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054d8:	f000 f8b8 	bl	800564c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054dc:	f000 fbfe 	bl	8005cdc <xTaskResumeAll>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d189      	bne.n	80053fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80054e6:	4b10      	ldr	r3, [pc, #64]	; (8005528 <xQueueReceive+0x1bc>)
 80054e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	e780      	b.n	80053fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80054f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054fa:	f000 f8a7 	bl	800564c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054fe:	f000 fbed 	bl	8005cdc <xTaskResumeAll>
 8005502:	e77a      	b.n	80053fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005506:	f000 f8a1 	bl	800564c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800550a:	f000 fbe7 	bl	8005cdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800550e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005510:	f000 f8ee 	bl	80056f0 <prvIsQueueEmpty>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	f43f af6f 	beq.w	80053fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800551c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800551e:	4618      	mov	r0, r3
 8005520:	3730      	adds	r7, #48	; 0x30
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	e000ed04 	.word	0xe000ed04

0800552c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005538:	2300      	movs	r3, #0
 800553a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10d      	bne.n	8005566 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d14d      	bne.n	80055ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	4618      	mov	r0, r3
 8005558:	f000 ffbc 	bl	80064d4 <xTaskPriorityDisinherit>
 800555c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	609a      	str	r2, [r3, #8]
 8005564:	e043      	b.n	80055ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d119      	bne.n	80055a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6858      	ldr	r0, [r3, #4]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005574:	461a      	mov	r2, r3
 8005576:	68b9      	ldr	r1, [r7, #8]
 8005578:	f002 fb5f 	bl	8007c3a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	441a      	add	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	429a      	cmp	r2, r3
 8005594:	d32b      	bcc.n	80055ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	605a      	str	r2, [r3, #4]
 800559e:	e026      	b.n	80055ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	68d8      	ldr	r0, [r3, #12]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a8:	461a      	mov	r2, r3
 80055aa:	68b9      	ldr	r1, [r7, #8]
 80055ac:	f002 fb45 	bl	8007c3a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b8:	425b      	negs	r3, r3
 80055ba:	441a      	add	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	68da      	ldr	r2, [r3, #12]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d207      	bcs.n	80055dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	425b      	negs	r3, r3
 80055d6:	441a      	add	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d105      	bne.n	80055ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80055f6:	697b      	ldr	r3, [r7, #20]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	d018      	beq.n	8005644 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	441a      	add	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68da      	ldr	r2, [r3, #12]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	429a      	cmp	r2, r3
 800562a:	d303      	bcc.n	8005634 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68d9      	ldr	r1, [r3, #12]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563c:	461a      	mov	r2, r3
 800563e:	6838      	ldr	r0, [r7, #0]
 8005640:	f002 fafb 	bl	8007c3a <memcpy>
	}
}
 8005644:	bf00      	nop
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005654:	f001 fc7e 	bl	8006f54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800565e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005660:	e011      	b.n	8005686 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	2b00      	cmp	r3, #0
 8005668:	d012      	beq.n	8005690 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	3324      	adds	r3, #36	; 0x24
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fd50 	bl	8006114 <xTaskRemoveFromEventList>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800567a:	f000 fe27 	bl	80062cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	3b01      	subs	r3, #1
 8005682:	b2db      	uxtb	r3, r3
 8005684:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800568a:	2b00      	cmp	r3, #0
 800568c:	dce9      	bgt.n	8005662 <prvUnlockQueue+0x16>
 800568e:	e000      	b.n	8005692 <prvUnlockQueue+0x46>
					break;
 8005690:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	22ff      	movs	r2, #255	; 0xff
 8005696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800569a:	f001 fc8b 	bl	8006fb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800569e:	f001 fc59 	bl	8006f54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056aa:	e011      	b.n	80056d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d012      	beq.n	80056da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3310      	adds	r3, #16
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 fd2b 	bl	8006114 <xTaskRemoveFromEventList>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056c4:	f000 fe02 	bl	80062cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056c8:	7bbb      	ldrb	r3, [r7, #14]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	dce9      	bgt.n	80056ac <prvUnlockQueue+0x60>
 80056d8:	e000      	b.n	80056dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	22ff      	movs	r2, #255	; 0xff
 80056e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80056e4:	f001 fc66 	bl	8006fb4 <vPortExitCritical>
}
 80056e8:	bf00      	nop
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056f8:	f001 fc2c 	bl	8006f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	2b00      	cmp	r3, #0
 8005702:	d102      	bne.n	800570a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005704:	2301      	movs	r3, #1
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	e001      	b.n	800570e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800570e:	f001 fc51 	bl	8006fb4 <vPortExitCritical>

	return xReturn;
 8005712:	68fb      	ldr	r3, [r7, #12]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005724:	f001 fc16 	bl	8006f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005730:	429a      	cmp	r2, r3
 8005732:	d102      	bne.n	800573a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005734:	2301      	movs	r3, #1
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	e001      	b.n	800573e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800573a:	2300      	movs	r3, #0
 800573c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800573e:	f001 fc39 	bl	8006fb4 <vPortExitCritical>

	return xReturn;
 8005742:	68fb      	ldr	r3, [r7, #12]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	e014      	b.n	8005786 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800575c:	4a0f      	ldr	r2, [pc, #60]	; (800579c <vQueueAddToRegistry+0x50>)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10b      	bne.n	8005780 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005768:	490c      	ldr	r1, [pc, #48]	; (800579c <vQueueAddToRegistry+0x50>)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005772:	4a0a      	ldr	r2, [pc, #40]	; (800579c <vQueueAddToRegistry+0x50>)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	4413      	add	r3, r2
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800577e:	e006      	b.n	800578e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3301      	adds	r3, #1
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b07      	cmp	r3, #7
 800578a:	d9e7      	bls.n	800575c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800578c:	bf00      	nop
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	20004e54 	.word	0x20004e54

080057a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80057b0:	f001 fbd0 	bl	8006f54 <vPortEnterCritical>
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057ba:	b25b      	sxtb	r3, r3
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c0:	d103      	bne.n	80057ca <vQueueWaitForMessageRestricted+0x2a>
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057d0:	b25b      	sxtb	r3, r3
 80057d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d6:	d103      	bne.n	80057e0 <vQueueWaitForMessageRestricted+0x40>
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057e0:	f001 fbe8 	bl	8006fb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d106      	bne.n	80057fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	3324      	adds	r3, #36	; 0x24
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	68b9      	ldr	r1, [r7, #8]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fc61 	bl	80060bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80057fa:	6978      	ldr	r0, [r7, #20]
 80057fc:	f7ff ff26 	bl	800564c <prvUnlockQueue>
	}
 8005800:	bf00      	nop
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08e      	sub	sp, #56	; 0x38
 800580c:	af04      	add	r7, sp, #16
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10a      	bne.n	8005832 <xTaskCreateStatic+0x2a>
	__asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	623b      	str	r3, [r7, #32]
}
 800582e:	bf00      	nop
 8005830:	e7fe      	b.n	8005830 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <xTaskCreateStatic+0x46>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	61fb      	str	r3, [r7, #28]
}
 800584a:	bf00      	nop
 800584c:	e7fe      	b.n	800584c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800584e:	23bc      	movs	r3, #188	; 0xbc
 8005850:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2bbc      	cmp	r3, #188	; 0xbc
 8005856:	d00a      	beq.n	800586e <xTaskCreateStatic+0x66>
	__asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	61bb      	str	r3, [r7, #24]
}
 800586a:	bf00      	nop
 800586c:	e7fe      	b.n	800586c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800586e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005872:	2b00      	cmp	r3, #0
 8005874:	d01e      	beq.n	80058b4 <xTaskCreateStatic+0xac>
 8005876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005878:	2b00      	cmp	r3, #0
 800587a:	d01b      	beq.n	80058b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800587c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005884:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	2202      	movs	r2, #2
 800588a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800588e:	2300      	movs	r3, #0
 8005890:	9303      	str	r3, [sp, #12]
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	9302      	str	r3, [sp, #8]
 8005896:	f107 0314 	add.w	r3, r7, #20
 800589a:	9301      	str	r3, [sp, #4]
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	68b9      	ldr	r1, [r7, #8]
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 f850 	bl	800594c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058ae:	f000 f8f3 	bl	8005a98 <prvAddNewTaskToReadyList>
 80058b2:	e001      	b.n	80058b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058b8:	697b      	ldr	r3, [r7, #20]
	}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3728      	adds	r7, #40	; 0x28
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b08c      	sub	sp, #48	; 0x30
 80058c6:	af04      	add	r7, sp, #16
 80058c8:	60f8      	str	r0, [r7, #12]
 80058ca:	60b9      	str	r1, [r7, #8]
 80058cc:	603b      	str	r3, [r7, #0]
 80058ce:	4613      	mov	r3, r2
 80058d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058d2:	88fb      	ldrh	r3, [r7, #6]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4618      	mov	r0, r3
 80058d8:	f001 fc5e 	bl	8007198 <pvPortMalloc>
 80058dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00e      	beq.n	8005902 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058e4:	20bc      	movs	r0, #188	; 0xbc
 80058e6:	f001 fc57 	bl	8007198 <pvPortMalloc>
 80058ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	631a      	str	r2, [r3, #48]	; 0x30
 80058f8:	e005      	b.n	8005906 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058fa:	6978      	ldr	r0, [r7, #20]
 80058fc:	f001 fd18 	bl	8007330 <vPortFree>
 8005900:	e001      	b.n	8005906 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005902:	2300      	movs	r3, #0
 8005904:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d017      	beq.n	800593c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005914:	88fa      	ldrh	r2, [r7, #6]
 8005916:	2300      	movs	r3, #0
 8005918:	9303      	str	r3, [sp, #12]
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	9302      	str	r3, [sp, #8]
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005920:	9301      	str	r3, [sp, #4]
 8005922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 f80e 	bl	800594c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005930:	69f8      	ldr	r0, [r7, #28]
 8005932:	f000 f8b1 	bl	8005a98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005936:	2301      	movs	r3, #1
 8005938:	61bb      	str	r3, [r7, #24]
 800593a:	e002      	b.n	8005942 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800593c:	f04f 33ff 	mov.w	r3, #4294967295
 8005940:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005942:	69bb      	ldr	r3, [r7, #24]
	}
 8005944:	4618      	mov	r0, r3
 8005946:	3720      	adds	r7, #32
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b088      	sub	sp, #32
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
 8005958:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	461a      	mov	r2, r3
 8005964:	21a5      	movs	r1, #165	; 0xa5
 8005966:	f002 f976 	bl	8007c56 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005974:	3b01      	subs	r3, #1
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f023 0307 	bic.w	r3, r3, #7
 8005982:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	617b      	str	r3, [r7, #20]
}
 80059a0:	bf00      	nop
 80059a2:	e7fe      	b.n	80059a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d01f      	beq.n	80059ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059aa:	2300      	movs	r3, #0
 80059ac:	61fb      	str	r3, [r7, #28]
 80059ae:	e012      	b.n	80059d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	4413      	add	r3, r2
 80059b6:	7819      	ldrb	r1, [r3, #0]
 80059b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	4413      	add	r3, r2
 80059be:	3334      	adds	r3, #52	; 0x34
 80059c0:	460a      	mov	r2, r1
 80059c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	4413      	add	r3, r2
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d006      	beq.n	80059de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	3301      	adds	r3, #1
 80059d4:	61fb      	str	r3, [r7, #28]
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	2b0f      	cmp	r3, #15
 80059da:	d9e9      	bls.n	80059b0 <prvInitialiseNewTask+0x64>
 80059dc:	e000      	b.n	80059e0 <prvInitialiseNewTask+0x94>
			{
				break;
 80059de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059e8:	e003      	b.n	80059f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	2b37      	cmp	r3, #55	; 0x37
 80059f6:	d901      	bls.n	80059fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059f8:	2337      	movs	r3, #55	; 0x37
 80059fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a10:	3304      	adds	r3, #4
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff f978 	bl	8004d08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	3318      	adds	r3, #24
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff f973 	bl	8004d08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4a:	3354      	adds	r3, #84	; 0x54
 8005a4c:	2260      	movs	r2, #96	; 0x60
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4618      	mov	r0, r3
 8005a52:	f002 f900 	bl	8007c56 <memset>
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	4a0c      	ldr	r2, [pc, #48]	; (8005a8c <prvInitialiseNewTask+0x140>)
 8005a5a:	659a      	str	r2, [r3, #88]	; 0x58
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	4a0c      	ldr	r2, [pc, #48]	; (8005a90 <prvInitialiseNewTask+0x144>)
 8005a60:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	4a0b      	ldr	r2, [pc, #44]	; (8005a94 <prvInitialiseNewTask+0x148>)
 8005a66:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	68f9      	ldr	r1, [r7, #12]
 8005a6c:	69b8      	ldr	r0, [r7, #24]
 8005a6e:	f001 f941 	bl	8006cf4 <pxPortInitialiseStack>
 8005a72:	4602      	mov	r2, r0
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a84:	bf00      	nop
 8005a86:	3720      	adds	r7, #32
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	08008cac 	.word	0x08008cac
 8005a90:	08008ccc 	.word	0x08008ccc
 8005a94:	08008c8c 	.word	0x08008c8c

08005a98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005aa0:	f001 fa58 	bl	8006f54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005aa4:	4b2d      	ldr	r3, [pc, #180]	; (8005b5c <prvAddNewTaskToReadyList+0xc4>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	4a2c      	ldr	r2, [pc, #176]	; (8005b5c <prvAddNewTaskToReadyList+0xc4>)
 8005aac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005aae:	4b2c      	ldr	r3, [pc, #176]	; (8005b60 <prvAddNewTaskToReadyList+0xc8>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d109      	bne.n	8005aca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ab6:	4a2a      	ldr	r2, [pc, #168]	; (8005b60 <prvAddNewTaskToReadyList+0xc8>)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005abc:	4b27      	ldr	r3, [pc, #156]	; (8005b5c <prvAddNewTaskToReadyList+0xc4>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d110      	bne.n	8005ae6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ac4:	f000 fc26 	bl	8006314 <prvInitialiseTaskLists>
 8005ac8:	e00d      	b.n	8005ae6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005aca:	4b26      	ldr	r3, [pc, #152]	; (8005b64 <prvAddNewTaskToReadyList+0xcc>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ad2:	4b23      	ldr	r3, [pc, #140]	; (8005b60 <prvAddNewTaskToReadyList+0xc8>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d802      	bhi.n	8005ae6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ae0:	4a1f      	ldr	r2, [pc, #124]	; (8005b60 <prvAddNewTaskToReadyList+0xc8>)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ae6:	4b20      	ldr	r3, [pc, #128]	; (8005b68 <prvAddNewTaskToReadyList+0xd0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3301      	adds	r3, #1
 8005aec:	4a1e      	ldr	r2, [pc, #120]	; (8005b68 <prvAddNewTaskToReadyList+0xd0>)
 8005aee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005af0:	4b1d      	ldr	r3, [pc, #116]	; (8005b68 <prvAddNewTaskToReadyList+0xd0>)
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afc:	4b1b      	ldr	r3, [pc, #108]	; (8005b6c <prvAddNewTaskToReadyList+0xd4>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d903      	bls.n	8005b0c <prvAddNewTaskToReadyList+0x74>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	4a18      	ldr	r2, [pc, #96]	; (8005b6c <prvAddNewTaskToReadyList+0xd4>)
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4a15      	ldr	r2, [pc, #84]	; (8005b70 <prvAddNewTaskToReadyList+0xd8>)
 8005b1a:	441a      	add	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	4619      	mov	r1, r3
 8005b22:	4610      	mov	r0, r2
 8005b24:	f7ff f8fd 	bl	8004d22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b28:	f001 fa44 	bl	8006fb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b2c:	4b0d      	ldr	r3, [pc, #52]	; (8005b64 <prvAddNewTaskToReadyList+0xcc>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00e      	beq.n	8005b52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b34:	4b0a      	ldr	r3, [pc, #40]	; (8005b60 <prvAddNewTaskToReadyList+0xc8>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d207      	bcs.n	8005b52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b42:	4b0c      	ldr	r3, [pc, #48]	; (8005b74 <prvAddNewTaskToReadyList+0xdc>)
 8005b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000e88 	.word	0x20000e88
 8005b60:	200009b4 	.word	0x200009b4
 8005b64:	20000e94 	.word	0x20000e94
 8005b68:	20000ea4 	.word	0x20000ea4
 8005b6c:	20000e90 	.word	0x20000e90
 8005b70:	200009b8 	.word	0x200009b8
 8005b74:	e000ed04 	.word	0xe000ed04

08005b78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d017      	beq.n	8005bba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b8a:	4b13      	ldr	r3, [pc, #76]	; (8005bd8 <vTaskDelay+0x60>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <vTaskDelay+0x30>
	__asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	60bb      	str	r3, [r7, #8]
}
 8005ba4:	bf00      	nop
 8005ba6:	e7fe      	b.n	8005ba6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ba8:	f000 f88a 	bl	8005cc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bac:	2100      	movs	r1, #0
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fcfe 	bl	80065b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bb4:	f000 f892 	bl	8005cdc <xTaskResumeAll>
 8005bb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d107      	bne.n	8005bd0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005bc0:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <vTaskDelay+0x64>)
 8005bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bd0:	bf00      	nop
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	20000eb0 	.word	0x20000eb0
 8005bdc:	e000ed04 	.word	0xe000ed04

08005be0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08a      	sub	sp, #40	; 0x28
 8005be4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bee:	463a      	mov	r2, r7
 8005bf0:	1d39      	adds	r1, r7, #4
 8005bf2:	f107 0308 	add.w	r3, r7, #8
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7ff f832 	bl	8004c60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005bfc:	6839      	ldr	r1, [r7, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	9202      	str	r2, [sp, #8]
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	2300      	movs	r3, #0
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	460a      	mov	r2, r1
 8005c0e:	4924      	ldr	r1, [pc, #144]	; (8005ca0 <vTaskStartScheduler+0xc0>)
 8005c10:	4824      	ldr	r0, [pc, #144]	; (8005ca4 <vTaskStartScheduler+0xc4>)
 8005c12:	f7ff fdf9 	bl	8005808 <xTaskCreateStatic>
 8005c16:	4603      	mov	r3, r0
 8005c18:	4a23      	ldr	r2, [pc, #140]	; (8005ca8 <vTaskStartScheduler+0xc8>)
 8005c1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c1c:	4b22      	ldr	r3, [pc, #136]	; (8005ca8 <vTaskStartScheduler+0xc8>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c24:	2301      	movs	r3, #1
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	e001      	b.n	8005c2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d102      	bne.n	8005c3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c34:	f000 fd10 	bl	8006658 <xTimerCreateTimerTask>
 8005c38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d11b      	bne.n	8005c78 <vTaskStartScheduler+0x98>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	613b      	str	r3, [r7, #16]
}
 8005c52:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c54:	4b15      	ldr	r3, [pc, #84]	; (8005cac <vTaskStartScheduler+0xcc>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3354      	adds	r3, #84	; 0x54
 8005c5a:	4a15      	ldr	r2, [pc, #84]	; (8005cb0 <vTaskStartScheduler+0xd0>)
 8005c5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c5e:	4b15      	ldr	r3, [pc, #84]	; (8005cb4 <vTaskStartScheduler+0xd4>)
 8005c60:	f04f 32ff 	mov.w	r2, #4294967295
 8005c64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c66:	4b14      	ldr	r3, [pc, #80]	; (8005cb8 <vTaskStartScheduler+0xd8>)
 8005c68:	2201      	movs	r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c6c:	4b13      	ldr	r3, [pc, #76]	; (8005cbc <vTaskStartScheduler+0xdc>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c72:	f001 f8cd 	bl	8006e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c76:	e00e      	b.n	8005c96 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7e:	d10a      	bne.n	8005c96 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	60fb      	str	r3, [r7, #12]
}
 8005c92:	bf00      	nop
 8005c94:	e7fe      	b.n	8005c94 <vTaskStartScheduler+0xb4>
}
 8005c96:	bf00      	nop
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	08008b74 	.word	0x08008b74
 8005ca4:	080062e5 	.word	0x080062e5
 8005ca8:	20000eac 	.word	0x20000eac
 8005cac:	200009b4 	.word	0x200009b4
 8005cb0:	20000190 	.word	0x20000190
 8005cb4:	20000ea8 	.word	0x20000ea8
 8005cb8:	20000e94 	.word	0x20000e94
 8005cbc:	20000e8c 	.word	0x20000e8c

08005cc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005cc4:	4b04      	ldr	r3, [pc, #16]	; (8005cd8 <vTaskSuspendAll+0x18>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	4a03      	ldr	r2, [pc, #12]	; (8005cd8 <vTaskSuspendAll+0x18>)
 8005ccc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005cce:	bf00      	nop
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	20000eb0 	.word	0x20000eb0

08005cdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cea:	4b42      	ldr	r3, [pc, #264]	; (8005df4 <xTaskResumeAll+0x118>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10a      	bne.n	8005d08 <xTaskResumeAll+0x2c>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	603b      	str	r3, [r7, #0]
}
 8005d04:	bf00      	nop
 8005d06:	e7fe      	b.n	8005d06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d08:	f001 f924 	bl	8006f54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d0c:	4b39      	ldr	r3, [pc, #228]	; (8005df4 <xTaskResumeAll+0x118>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	4a38      	ldr	r2, [pc, #224]	; (8005df4 <xTaskResumeAll+0x118>)
 8005d14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d16:	4b37      	ldr	r3, [pc, #220]	; (8005df4 <xTaskResumeAll+0x118>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d162      	bne.n	8005de4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d1e:	4b36      	ldr	r3, [pc, #216]	; (8005df8 <xTaskResumeAll+0x11c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d05e      	beq.n	8005de4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d26:	e02f      	b.n	8005d88 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d28:	4b34      	ldr	r3, [pc, #208]	; (8005dfc <xTaskResumeAll+0x120>)
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	3318      	adds	r3, #24
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7ff f851 	bl	8004ddc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff f84c 	bl	8004ddc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d48:	4b2d      	ldr	r3, [pc, #180]	; (8005e00 <xTaskResumeAll+0x124>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d903      	bls.n	8005d58 <xTaskResumeAll+0x7c>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	4a2a      	ldr	r2, [pc, #168]	; (8005e00 <xTaskResumeAll+0x124>)
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4a27      	ldr	r2, [pc, #156]	; (8005e04 <xTaskResumeAll+0x128>)
 8005d66:	441a      	add	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4610      	mov	r0, r2
 8005d70:	f7fe ffd7 	bl	8004d22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d78:	4b23      	ldr	r3, [pc, #140]	; (8005e08 <xTaskResumeAll+0x12c>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d302      	bcc.n	8005d88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005d82:	4b22      	ldr	r3, [pc, #136]	; (8005e0c <xTaskResumeAll+0x130>)
 8005d84:	2201      	movs	r2, #1
 8005d86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d88:	4b1c      	ldr	r3, [pc, #112]	; (8005dfc <xTaskResumeAll+0x120>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1cb      	bne.n	8005d28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d96:	f000 fb5f 	bl	8006458 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d9a:	4b1d      	ldr	r3, [pc, #116]	; (8005e10 <xTaskResumeAll+0x134>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d010      	beq.n	8005dc8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005da6:	f000 f847 	bl	8005e38 <xTaskIncrementTick>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005db0:	4b16      	ldr	r3, [pc, #88]	; (8005e0c <xTaskResumeAll+0x130>)
 8005db2:	2201      	movs	r2, #1
 8005db4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1f1      	bne.n	8005da6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005dc2:	4b13      	ldr	r3, [pc, #76]	; (8005e10 <xTaskResumeAll+0x134>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005dc8:	4b10      	ldr	r3, [pc, #64]	; (8005e0c <xTaskResumeAll+0x130>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d009      	beq.n	8005de4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005dd4:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <xTaskResumeAll+0x138>)
 8005dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005de4:	f001 f8e6 	bl	8006fb4 <vPortExitCritical>

	return xAlreadyYielded;
 8005de8:	68bb      	ldr	r3, [r7, #8]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	20000eb0 	.word	0x20000eb0
 8005df8:	20000e88 	.word	0x20000e88
 8005dfc:	20000e48 	.word	0x20000e48
 8005e00:	20000e90 	.word	0x20000e90
 8005e04:	200009b8 	.word	0x200009b8
 8005e08:	200009b4 	.word	0x200009b4
 8005e0c:	20000e9c 	.word	0x20000e9c
 8005e10:	20000e98 	.word	0x20000e98
 8005e14:	e000ed04 	.word	0xe000ed04

08005e18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e1e:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <xTaskGetTickCount+0x1c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e24:	687b      	ldr	r3, [r7, #4]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	20000e8c 	.word	0x20000e8c

08005e38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e42:	4b4f      	ldr	r3, [pc, #316]	; (8005f80 <xTaskIncrementTick+0x148>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f040 808f 	bne.w	8005f6a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e4c:	4b4d      	ldr	r3, [pc, #308]	; (8005f84 <xTaskIncrementTick+0x14c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3301      	adds	r3, #1
 8005e52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e54:	4a4b      	ldr	r2, [pc, #300]	; (8005f84 <xTaskIncrementTick+0x14c>)
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d120      	bne.n	8005ea2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e60:	4b49      	ldr	r3, [pc, #292]	; (8005f88 <xTaskIncrementTick+0x150>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <xTaskIncrementTick+0x48>
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	603b      	str	r3, [r7, #0]
}
 8005e7c:	bf00      	nop
 8005e7e:	e7fe      	b.n	8005e7e <xTaskIncrementTick+0x46>
 8005e80:	4b41      	ldr	r3, [pc, #260]	; (8005f88 <xTaskIncrementTick+0x150>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	4b41      	ldr	r3, [pc, #260]	; (8005f8c <xTaskIncrementTick+0x154>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a3f      	ldr	r2, [pc, #252]	; (8005f88 <xTaskIncrementTick+0x150>)
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	4a3f      	ldr	r2, [pc, #252]	; (8005f8c <xTaskIncrementTick+0x154>)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	4b3e      	ldr	r3, [pc, #248]	; (8005f90 <xTaskIncrementTick+0x158>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	4a3d      	ldr	r2, [pc, #244]	; (8005f90 <xTaskIncrementTick+0x158>)
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	f000 fadb 	bl	8006458 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ea2:	4b3c      	ldr	r3, [pc, #240]	; (8005f94 <xTaskIncrementTick+0x15c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d349      	bcc.n	8005f40 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eac:	4b36      	ldr	r3, [pc, #216]	; (8005f88 <xTaskIncrementTick+0x150>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d104      	bne.n	8005ec0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eb6:	4b37      	ldr	r3, [pc, #220]	; (8005f94 <xTaskIncrementTick+0x15c>)
 8005eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ebc:	601a      	str	r2, [r3, #0]
					break;
 8005ebe:	e03f      	b.n	8005f40 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ec0:	4b31      	ldr	r3, [pc, #196]	; (8005f88 <xTaskIncrementTick+0x150>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d203      	bcs.n	8005ee0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ed8:	4a2e      	ldr	r2, [pc, #184]	; (8005f94 <xTaskIncrementTick+0x15c>)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ede:	e02f      	b.n	8005f40 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fe ff79 	bl	8004ddc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d004      	beq.n	8005efc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	3318      	adds	r3, #24
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fe ff70 	bl	8004ddc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f00:	4b25      	ldr	r3, [pc, #148]	; (8005f98 <xTaskIncrementTick+0x160>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d903      	bls.n	8005f10 <xTaskIncrementTick+0xd8>
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0c:	4a22      	ldr	r2, [pc, #136]	; (8005f98 <xTaskIncrementTick+0x160>)
 8005f0e:	6013      	str	r3, [r2, #0]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f14:	4613      	mov	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4a1f      	ldr	r2, [pc, #124]	; (8005f9c <xTaskIncrementTick+0x164>)
 8005f1e:	441a      	add	r2, r3
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	3304      	adds	r3, #4
 8005f24:	4619      	mov	r1, r3
 8005f26:	4610      	mov	r0, r2
 8005f28:	f7fe fefb 	bl	8004d22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f30:	4b1b      	ldr	r3, [pc, #108]	; (8005fa0 <xTaskIncrementTick+0x168>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d3b8      	bcc.n	8005eac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f3e:	e7b5      	b.n	8005eac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f40:	4b17      	ldr	r3, [pc, #92]	; (8005fa0 <xTaskIncrementTick+0x168>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f46:	4915      	ldr	r1, [pc, #84]	; (8005f9c <xTaskIncrementTick+0x164>)
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	440b      	add	r3, r1
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d901      	bls.n	8005f5c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f5c:	4b11      	ldr	r3, [pc, #68]	; (8005fa4 <xTaskIncrementTick+0x16c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d007      	beq.n	8005f74 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005f64:	2301      	movs	r3, #1
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	e004      	b.n	8005f74 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f6a:	4b0f      	ldr	r3, [pc, #60]	; (8005fa8 <xTaskIncrementTick+0x170>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	4a0d      	ldr	r2, [pc, #52]	; (8005fa8 <xTaskIncrementTick+0x170>)
 8005f72:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f74:	697b      	ldr	r3, [r7, #20]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000eb0 	.word	0x20000eb0
 8005f84:	20000e8c 	.word	0x20000e8c
 8005f88:	20000e40 	.word	0x20000e40
 8005f8c:	20000e44 	.word	0x20000e44
 8005f90:	20000ea0 	.word	0x20000ea0
 8005f94:	20000ea8 	.word	0x20000ea8
 8005f98:	20000e90 	.word	0x20000e90
 8005f9c:	200009b8 	.word	0x200009b8
 8005fa0:	200009b4 	.word	0x200009b4
 8005fa4:	20000e9c 	.word	0x20000e9c
 8005fa8:	20000e98 	.word	0x20000e98

08005fac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fb2:	4b2a      	ldr	r3, [pc, #168]	; (800605c <vTaskSwitchContext+0xb0>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fba:	4b29      	ldr	r3, [pc, #164]	; (8006060 <vTaskSwitchContext+0xb4>)
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fc0:	e046      	b.n	8006050 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005fc2:	4b27      	ldr	r3, [pc, #156]	; (8006060 <vTaskSwitchContext+0xb4>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fc8:	4b26      	ldr	r3, [pc, #152]	; (8006064 <vTaskSwitchContext+0xb8>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	e010      	b.n	8005ff2 <vTaskSwitchContext+0x46>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10a      	bne.n	8005fec <vTaskSwitchContext+0x40>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	607b      	str	r3, [r7, #4]
}
 8005fe8:	bf00      	nop
 8005fea:	e7fe      	b.n	8005fea <vTaskSwitchContext+0x3e>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	491d      	ldr	r1, [pc, #116]	; (8006068 <vTaskSwitchContext+0xbc>)
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	440b      	add	r3, r1
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0e4      	beq.n	8005fd0 <vTaskSwitchContext+0x24>
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4a15      	ldr	r2, [pc, #84]	; (8006068 <vTaskSwitchContext+0xbc>)
 8006012:	4413      	add	r3, r2
 8006014:	60bb      	str	r3, [r7, #8]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	605a      	str	r2, [r3, #4]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	3308      	adds	r3, #8
 8006028:	429a      	cmp	r2, r3
 800602a:	d104      	bne.n	8006036 <vTaskSwitchContext+0x8a>
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	605a      	str	r2, [r3, #4]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	4a0b      	ldr	r2, [pc, #44]	; (800606c <vTaskSwitchContext+0xc0>)
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	4a08      	ldr	r2, [pc, #32]	; (8006064 <vTaskSwitchContext+0xb8>)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006046:	4b09      	ldr	r3, [pc, #36]	; (800606c <vTaskSwitchContext+0xc0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3354      	adds	r3, #84	; 0x54
 800604c:	4a08      	ldr	r2, [pc, #32]	; (8006070 <vTaskSwitchContext+0xc4>)
 800604e:	6013      	str	r3, [r2, #0]
}
 8006050:	bf00      	nop
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	20000eb0 	.word	0x20000eb0
 8006060:	20000e9c 	.word	0x20000e9c
 8006064:	20000e90 	.word	0x20000e90
 8006068:	200009b8 	.word	0x200009b8
 800606c:	200009b4 	.word	0x200009b4
 8006070:	20000190 	.word	0x20000190

08006074 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10a      	bne.n	800609a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	60fb      	str	r3, [r7, #12]
}
 8006096:	bf00      	nop
 8006098:	e7fe      	b.n	8006098 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800609a:	4b07      	ldr	r3, [pc, #28]	; (80060b8 <vTaskPlaceOnEventList+0x44>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3318      	adds	r3, #24
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7fe fe61 	bl	8004d6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060a8:	2101      	movs	r1, #1
 80060aa:	6838      	ldr	r0, [r7, #0]
 80060ac:	f000 fa80 	bl	80065b0 <prvAddCurrentTaskToDelayedList>
}
 80060b0:	bf00      	nop
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	200009b4 	.word	0x200009b4

080060bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10a      	bne.n	80060e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	617b      	str	r3, [r7, #20]
}
 80060e0:	bf00      	nop
 80060e2:	e7fe      	b.n	80060e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060e4:	4b0a      	ldr	r3, [pc, #40]	; (8006110 <vTaskPlaceOnEventListRestricted+0x54>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3318      	adds	r3, #24
 80060ea:	4619      	mov	r1, r3
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f7fe fe18 	bl	8004d22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80060f8:	f04f 33ff 	mov.w	r3, #4294967295
 80060fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	68b8      	ldr	r0, [r7, #8]
 8006102:	f000 fa55 	bl	80065b0 <prvAddCurrentTaskToDelayedList>
	}
 8006106:	bf00      	nop
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	200009b4 	.word	0x200009b4

08006114 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10a      	bne.n	8006140 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800612a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	60fb      	str	r3, [r7, #12]
}
 800613c:	bf00      	nop
 800613e:	e7fe      	b.n	800613e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	3318      	adds	r3, #24
 8006144:	4618      	mov	r0, r3
 8006146:	f7fe fe49 	bl	8004ddc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800614a:	4b1e      	ldr	r3, [pc, #120]	; (80061c4 <xTaskRemoveFromEventList+0xb0>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d11d      	bne.n	800618e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	3304      	adds	r3, #4
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe fe40 	bl	8004ddc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006160:	4b19      	ldr	r3, [pc, #100]	; (80061c8 <xTaskRemoveFromEventList+0xb4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d903      	bls.n	8006170 <xTaskRemoveFromEventList+0x5c>
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	4a16      	ldr	r2, [pc, #88]	; (80061c8 <xTaskRemoveFromEventList+0xb4>)
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006174:	4613      	mov	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4a13      	ldr	r2, [pc, #76]	; (80061cc <xTaskRemoveFromEventList+0xb8>)
 800617e:	441a      	add	r2, r3
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	3304      	adds	r3, #4
 8006184:	4619      	mov	r1, r3
 8006186:	4610      	mov	r0, r2
 8006188:	f7fe fdcb 	bl	8004d22 <vListInsertEnd>
 800618c:	e005      	b.n	800619a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	3318      	adds	r3, #24
 8006192:	4619      	mov	r1, r3
 8006194:	480e      	ldr	r0, [pc, #56]	; (80061d0 <xTaskRemoveFromEventList+0xbc>)
 8006196:	f7fe fdc4 	bl	8004d22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619e:	4b0d      	ldr	r3, [pc, #52]	; (80061d4 <xTaskRemoveFromEventList+0xc0>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d905      	bls.n	80061b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061a8:	2301      	movs	r3, #1
 80061aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80061ac:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <xTaskRemoveFromEventList+0xc4>)
 80061ae:	2201      	movs	r2, #1
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	e001      	b.n	80061b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80061b4:	2300      	movs	r3, #0
 80061b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80061b8:	697b      	ldr	r3, [r7, #20]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20000eb0 	.word	0x20000eb0
 80061c8:	20000e90 	.word	0x20000e90
 80061cc:	200009b8 	.word	0x200009b8
 80061d0:	20000e48 	.word	0x20000e48
 80061d4:	200009b4 	.word	0x200009b4
 80061d8:	20000e9c 	.word	0x20000e9c

080061dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061e4:	4b06      	ldr	r3, [pc, #24]	; (8006200 <vTaskInternalSetTimeOutState+0x24>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80061ec:	4b05      	ldr	r3, [pc, #20]	; (8006204 <vTaskInternalSetTimeOutState+0x28>)
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	605a      	str	r2, [r3, #4]
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	20000ea0 	.word	0x20000ea0
 8006204:	20000e8c 	.word	0x20000e8c

08006208 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10a      	bne.n	800622e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	613b      	str	r3, [r7, #16]
}
 800622a:	bf00      	nop
 800622c:	e7fe      	b.n	800622c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10a      	bne.n	800624a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	60fb      	str	r3, [r7, #12]
}
 8006246:	bf00      	nop
 8006248:	e7fe      	b.n	8006248 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800624a:	f000 fe83 	bl	8006f54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800624e:	4b1d      	ldr	r3, [pc, #116]	; (80062c4 <xTaskCheckForTimeOut+0xbc>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006266:	d102      	bne.n	800626e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006268:	2300      	movs	r3, #0
 800626a:	61fb      	str	r3, [r7, #28]
 800626c:	e023      	b.n	80062b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	4b15      	ldr	r3, [pc, #84]	; (80062c8 <xTaskCheckForTimeOut+0xc0>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d007      	beq.n	800628a <xTaskCheckForTimeOut+0x82>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	429a      	cmp	r2, r3
 8006282:	d302      	bcc.n	800628a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006284:	2301      	movs	r3, #1
 8006286:	61fb      	str	r3, [r7, #28]
 8006288:	e015      	b.n	80062b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	429a      	cmp	r2, r3
 8006292:	d20b      	bcs.n	80062ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	1ad2      	subs	r2, r2, r3
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff ff9b 	bl	80061dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80062a6:	2300      	movs	r3, #0
 80062a8:	61fb      	str	r3, [r7, #28]
 80062aa:	e004      	b.n	80062b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80062b2:	2301      	movs	r3, #1
 80062b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80062b6:	f000 fe7d 	bl	8006fb4 <vPortExitCritical>

	return xReturn;
 80062ba:	69fb      	ldr	r3, [r7, #28]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3720      	adds	r7, #32
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	20000e8c 	.word	0x20000e8c
 80062c8:	20000ea0 	.word	0x20000ea0

080062cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80062d0:	4b03      	ldr	r3, [pc, #12]	; (80062e0 <vTaskMissedYield+0x14>)
 80062d2:	2201      	movs	r2, #1
 80062d4:	601a      	str	r2, [r3, #0]
}
 80062d6:	bf00      	nop
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	20000e9c 	.word	0x20000e9c

080062e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062ec:	f000 f852 	bl	8006394 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062f0:	4b06      	ldr	r3, [pc, #24]	; (800630c <prvIdleTask+0x28>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d9f9      	bls.n	80062ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80062f8:	4b05      	ldr	r3, [pc, #20]	; (8006310 <prvIdleTask+0x2c>)
 80062fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006308:	e7f0      	b.n	80062ec <prvIdleTask+0x8>
 800630a:	bf00      	nop
 800630c:	200009b8 	.word	0x200009b8
 8006310:	e000ed04 	.word	0xe000ed04

08006314 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800631a:	2300      	movs	r3, #0
 800631c:	607b      	str	r3, [r7, #4]
 800631e:	e00c      	b.n	800633a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4a12      	ldr	r2, [pc, #72]	; (8006374 <prvInitialiseTaskLists+0x60>)
 800632c:	4413      	add	r3, r2
 800632e:	4618      	mov	r0, r3
 8006330:	f7fe fcca 	bl	8004cc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3301      	adds	r3, #1
 8006338:	607b      	str	r3, [r7, #4]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b37      	cmp	r3, #55	; 0x37
 800633e:	d9ef      	bls.n	8006320 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006340:	480d      	ldr	r0, [pc, #52]	; (8006378 <prvInitialiseTaskLists+0x64>)
 8006342:	f7fe fcc1 	bl	8004cc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006346:	480d      	ldr	r0, [pc, #52]	; (800637c <prvInitialiseTaskLists+0x68>)
 8006348:	f7fe fcbe 	bl	8004cc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800634c:	480c      	ldr	r0, [pc, #48]	; (8006380 <prvInitialiseTaskLists+0x6c>)
 800634e:	f7fe fcbb 	bl	8004cc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006352:	480c      	ldr	r0, [pc, #48]	; (8006384 <prvInitialiseTaskLists+0x70>)
 8006354:	f7fe fcb8 	bl	8004cc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006358:	480b      	ldr	r0, [pc, #44]	; (8006388 <prvInitialiseTaskLists+0x74>)
 800635a:	f7fe fcb5 	bl	8004cc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800635e:	4b0b      	ldr	r3, [pc, #44]	; (800638c <prvInitialiseTaskLists+0x78>)
 8006360:	4a05      	ldr	r2, [pc, #20]	; (8006378 <prvInitialiseTaskLists+0x64>)
 8006362:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006364:	4b0a      	ldr	r3, [pc, #40]	; (8006390 <prvInitialiseTaskLists+0x7c>)
 8006366:	4a05      	ldr	r2, [pc, #20]	; (800637c <prvInitialiseTaskLists+0x68>)
 8006368:	601a      	str	r2, [r3, #0]
}
 800636a:	bf00      	nop
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	200009b8 	.word	0x200009b8
 8006378:	20000e18 	.word	0x20000e18
 800637c:	20000e2c 	.word	0x20000e2c
 8006380:	20000e48 	.word	0x20000e48
 8006384:	20000e5c 	.word	0x20000e5c
 8006388:	20000e74 	.word	0x20000e74
 800638c:	20000e40 	.word	0x20000e40
 8006390:	20000e44 	.word	0x20000e44

08006394 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800639a:	e019      	b.n	80063d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800639c:	f000 fdda 	bl	8006f54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a0:	4b10      	ldr	r3, [pc, #64]	; (80063e4 <prvCheckTasksWaitingTermination+0x50>)
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3304      	adds	r3, #4
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fe fd15 	bl	8004ddc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063b2:	4b0d      	ldr	r3, [pc, #52]	; (80063e8 <prvCheckTasksWaitingTermination+0x54>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	4a0b      	ldr	r2, [pc, #44]	; (80063e8 <prvCheckTasksWaitingTermination+0x54>)
 80063ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063bc:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <prvCheckTasksWaitingTermination+0x58>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	4a0a      	ldr	r2, [pc, #40]	; (80063ec <prvCheckTasksWaitingTermination+0x58>)
 80063c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063c6:	f000 fdf5 	bl	8006fb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f810 	bl	80063f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063d0:	4b06      	ldr	r3, [pc, #24]	; (80063ec <prvCheckTasksWaitingTermination+0x58>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e1      	bne.n	800639c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063d8:	bf00      	nop
 80063da:	bf00      	nop
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	20000e5c 	.word	0x20000e5c
 80063e8:	20000e88 	.word	0x20000e88
 80063ec:	20000e70 	.word	0x20000e70

080063f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3354      	adds	r3, #84	; 0x54
 80063fc:	4618      	mov	r0, r3
 80063fe:	f001 fd29 	bl	8007e54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006408:	2b00      	cmp	r3, #0
 800640a:	d108      	bne.n	800641e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006410:	4618      	mov	r0, r3
 8006412:	f000 ff8d 	bl	8007330 <vPortFree>
				vPortFree( pxTCB );
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 ff8a 	bl	8007330 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800641c:	e018      	b.n	8006450 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006424:	2b01      	cmp	r3, #1
 8006426:	d103      	bne.n	8006430 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 ff81 	bl	8007330 <vPortFree>
	}
 800642e:	e00f      	b.n	8006450 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006436:	2b02      	cmp	r3, #2
 8006438:	d00a      	beq.n	8006450 <prvDeleteTCB+0x60>
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	60fb      	str	r3, [r7, #12]
}
 800644c:	bf00      	nop
 800644e:	e7fe      	b.n	800644e <prvDeleteTCB+0x5e>
	}
 8006450:	bf00      	nop
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800645e:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <prvResetNextTaskUnblockTime+0x38>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d104      	bne.n	8006472 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006468:	4b0a      	ldr	r3, [pc, #40]	; (8006494 <prvResetNextTaskUnblockTime+0x3c>)
 800646a:	f04f 32ff 	mov.w	r2, #4294967295
 800646e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006470:	e008      	b.n	8006484 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006472:	4b07      	ldr	r3, [pc, #28]	; (8006490 <prvResetNextTaskUnblockTime+0x38>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	4a04      	ldr	r2, [pc, #16]	; (8006494 <prvResetNextTaskUnblockTime+0x3c>)
 8006482:	6013      	str	r3, [r2, #0]
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	20000e40 	.word	0x20000e40
 8006494:	20000ea8 	.word	0x20000ea8

08006498 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800649e:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <xTaskGetSchedulerState+0x34>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d102      	bne.n	80064ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064a6:	2301      	movs	r3, #1
 80064a8:	607b      	str	r3, [r7, #4]
 80064aa:	e008      	b.n	80064be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064ac:	4b08      	ldr	r3, [pc, #32]	; (80064d0 <xTaskGetSchedulerState+0x38>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d102      	bne.n	80064ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80064b4:	2302      	movs	r3, #2
 80064b6:	607b      	str	r3, [r7, #4]
 80064b8:	e001      	b.n	80064be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80064ba:	2300      	movs	r3, #0
 80064bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80064be:	687b      	ldr	r3, [r7, #4]
	}
 80064c0:	4618      	mov	r0, r3
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	20000e94 	.word	0x20000e94
 80064d0:	20000eb0 	.word	0x20000eb0

080064d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80064e0:	2300      	movs	r3, #0
 80064e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d056      	beq.n	8006598 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80064ea:	4b2e      	ldr	r3, [pc, #184]	; (80065a4 <xTaskPriorityDisinherit+0xd0>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d00a      	beq.n	800650a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	60fb      	str	r3, [r7, #12]
}
 8006506:	bf00      	nop
 8006508:	e7fe      	b.n	8006508 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10a      	bne.n	8006528 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	60bb      	str	r3, [r7, #8]
}
 8006524:	bf00      	nop
 8006526:	e7fe      	b.n	8006526 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800652c:	1e5a      	subs	r2, r3, #1
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653a:	429a      	cmp	r2, r3
 800653c:	d02c      	beq.n	8006598 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006542:	2b00      	cmp	r3, #0
 8006544:	d128      	bne.n	8006598 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	3304      	adds	r3, #4
 800654a:	4618      	mov	r0, r3
 800654c:	f7fe fc46 	bl	8004ddc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006568:	4b0f      	ldr	r3, [pc, #60]	; (80065a8 <xTaskPriorityDisinherit+0xd4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	429a      	cmp	r2, r3
 800656e:	d903      	bls.n	8006578 <xTaskPriorityDisinherit+0xa4>
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	4a0c      	ldr	r2, [pc, #48]	; (80065a8 <xTaskPriorityDisinherit+0xd4>)
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657c:	4613      	mov	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4a09      	ldr	r2, [pc, #36]	; (80065ac <xTaskPriorityDisinherit+0xd8>)
 8006586:	441a      	add	r2, r3
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	3304      	adds	r3, #4
 800658c:	4619      	mov	r1, r3
 800658e:	4610      	mov	r0, r2
 8006590:	f7fe fbc7 	bl	8004d22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006594:	2301      	movs	r3, #1
 8006596:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006598:	697b      	ldr	r3, [r7, #20]
	}
 800659a:	4618      	mov	r0, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	200009b4 	.word	0x200009b4
 80065a8:	20000e90 	.word	0x20000e90
 80065ac:	200009b8 	.word	0x200009b8

080065b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065ba:	4b21      	ldr	r3, [pc, #132]	; (8006640 <prvAddCurrentTaskToDelayedList+0x90>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065c0:	4b20      	ldr	r3, [pc, #128]	; (8006644 <prvAddCurrentTaskToDelayedList+0x94>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3304      	adds	r3, #4
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fe fc08 	bl	8004ddc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d2:	d10a      	bne.n	80065ea <prvAddCurrentTaskToDelayedList+0x3a>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d007      	beq.n	80065ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065da:	4b1a      	ldr	r3, [pc, #104]	; (8006644 <prvAddCurrentTaskToDelayedList+0x94>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3304      	adds	r3, #4
 80065e0:	4619      	mov	r1, r3
 80065e2:	4819      	ldr	r0, [pc, #100]	; (8006648 <prvAddCurrentTaskToDelayedList+0x98>)
 80065e4:	f7fe fb9d 	bl	8004d22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065e8:	e026      	b.n	8006638 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4413      	add	r3, r2
 80065f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065f2:	4b14      	ldr	r3, [pc, #80]	; (8006644 <prvAddCurrentTaskToDelayedList+0x94>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d209      	bcs.n	8006616 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006602:	4b12      	ldr	r3, [pc, #72]	; (800664c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <prvAddCurrentTaskToDelayedList+0x94>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3304      	adds	r3, #4
 800660c:	4619      	mov	r1, r3
 800660e:	4610      	mov	r0, r2
 8006610:	f7fe fbab 	bl	8004d6a <vListInsert>
}
 8006614:	e010      	b.n	8006638 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006616:	4b0e      	ldr	r3, [pc, #56]	; (8006650 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	4b0a      	ldr	r3, [pc, #40]	; (8006644 <prvAddCurrentTaskToDelayedList+0x94>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3304      	adds	r3, #4
 8006620:	4619      	mov	r1, r3
 8006622:	4610      	mov	r0, r2
 8006624:	f7fe fba1 	bl	8004d6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006628:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <prvAddCurrentTaskToDelayedList+0xa4>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	429a      	cmp	r2, r3
 8006630:	d202      	bcs.n	8006638 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006632:	4a08      	ldr	r2, [pc, #32]	; (8006654 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	6013      	str	r3, [r2, #0]
}
 8006638:	bf00      	nop
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	20000e8c 	.word	0x20000e8c
 8006644:	200009b4 	.word	0x200009b4
 8006648:	20000e74 	.word	0x20000e74
 800664c:	20000e44 	.word	0x20000e44
 8006650:	20000e40 	.word	0x20000e40
 8006654:	20000ea8 	.word	0x20000ea8

08006658 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08a      	sub	sp, #40	; 0x28
 800665c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006662:	f000 fb07 	bl	8006c74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006666:	4b1c      	ldr	r3, [pc, #112]	; (80066d8 <xTimerCreateTimerTask+0x80>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d021      	beq.n	80066b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006672:	2300      	movs	r3, #0
 8006674:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006676:	1d3a      	adds	r2, r7, #4
 8006678:	f107 0108 	add.w	r1, r7, #8
 800667c:	f107 030c 	add.w	r3, r7, #12
 8006680:	4618      	mov	r0, r3
 8006682:	f7fe fb07 	bl	8004c94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	9202      	str	r2, [sp, #8]
 800668e:	9301      	str	r3, [sp, #4]
 8006690:	2302      	movs	r3, #2
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	2300      	movs	r3, #0
 8006696:	460a      	mov	r2, r1
 8006698:	4910      	ldr	r1, [pc, #64]	; (80066dc <xTimerCreateTimerTask+0x84>)
 800669a:	4811      	ldr	r0, [pc, #68]	; (80066e0 <xTimerCreateTimerTask+0x88>)
 800669c:	f7ff f8b4 	bl	8005808 <xTaskCreateStatic>
 80066a0:	4603      	mov	r3, r0
 80066a2:	4a10      	ldr	r2, [pc, #64]	; (80066e4 <xTimerCreateTimerTask+0x8c>)
 80066a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80066a6:	4b0f      	ldr	r3, [pc, #60]	; (80066e4 <xTimerCreateTimerTask+0x8c>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80066ae:	2301      	movs	r3, #1
 80066b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10a      	bne.n	80066ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	613b      	str	r3, [r7, #16]
}
 80066ca:	bf00      	nop
 80066cc:	e7fe      	b.n	80066cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80066ce:	697b      	ldr	r3, [r7, #20]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3718      	adds	r7, #24
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	20000ee4 	.word	0x20000ee4
 80066dc:	08008b7c 	.word	0x08008b7c
 80066e0:	0800681d 	.word	0x0800681d
 80066e4:	20000ee8 	.word	0x20000ee8

080066e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08a      	sub	sp, #40	; 0x28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10a      	bne.n	8006716 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	623b      	str	r3, [r7, #32]
}
 8006712:	bf00      	nop
 8006714:	e7fe      	b.n	8006714 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006716:	4b1a      	ldr	r3, [pc, #104]	; (8006780 <xTimerGenericCommand+0x98>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d02a      	beq.n	8006774 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2b05      	cmp	r3, #5
 800672e:	dc18      	bgt.n	8006762 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006730:	f7ff feb2 	bl	8006498 <xTaskGetSchedulerState>
 8006734:	4603      	mov	r3, r0
 8006736:	2b02      	cmp	r3, #2
 8006738:	d109      	bne.n	800674e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800673a:	4b11      	ldr	r3, [pc, #68]	; (8006780 <xTimerGenericCommand+0x98>)
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	f107 0110 	add.w	r1, r7, #16
 8006742:	2300      	movs	r3, #0
 8006744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006746:	f7fe fc77 	bl	8005038 <xQueueGenericSend>
 800674a:	6278      	str	r0, [r7, #36]	; 0x24
 800674c:	e012      	b.n	8006774 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800674e:	4b0c      	ldr	r3, [pc, #48]	; (8006780 <xTimerGenericCommand+0x98>)
 8006750:	6818      	ldr	r0, [r3, #0]
 8006752:	f107 0110 	add.w	r1, r7, #16
 8006756:	2300      	movs	r3, #0
 8006758:	2200      	movs	r2, #0
 800675a:	f7fe fc6d 	bl	8005038 <xQueueGenericSend>
 800675e:	6278      	str	r0, [r7, #36]	; 0x24
 8006760:	e008      	b.n	8006774 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006762:	4b07      	ldr	r3, [pc, #28]	; (8006780 <xTimerGenericCommand+0x98>)
 8006764:	6818      	ldr	r0, [r3, #0]
 8006766:	f107 0110 	add.w	r1, r7, #16
 800676a:	2300      	movs	r3, #0
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	f7fe fd61 	bl	8005234 <xQueueGenericSendFromISR>
 8006772:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006776:	4618      	mov	r0, r3
 8006778:	3728      	adds	r7, #40	; 0x28
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	20000ee4 	.word	0x20000ee4

08006784 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af02      	add	r7, sp, #8
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800678e:	4b22      	ldr	r3, [pc, #136]	; (8006818 <prvProcessExpiredTimer+0x94>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	3304      	adds	r3, #4
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe fb1d 	bl	8004ddc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d022      	beq.n	80067f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	699a      	ldr	r2, [r3, #24]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	18d1      	adds	r1, r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	6978      	ldr	r0, [r7, #20]
 80067be:	f000 f8d1 	bl	8006964 <prvInsertTimerInActiveList>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d01f      	beq.n	8006808 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067c8:	2300      	movs	r3, #0
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	2300      	movs	r3, #0
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	2100      	movs	r1, #0
 80067d2:	6978      	ldr	r0, [r7, #20]
 80067d4:	f7ff ff88 	bl	80066e8 <xTimerGenericCommand>
 80067d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d113      	bne.n	8006808 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	60fb      	str	r3, [r7, #12]
}
 80067f2:	bf00      	nop
 80067f4:	e7fe      	b.n	80067f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067fc:	f023 0301 	bic.w	r3, r3, #1
 8006800:	b2da      	uxtb	r2, r3
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	6978      	ldr	r0, [r7, #20]
 800680e:	4798      	blx	r3
}
 8006810:	bf00      	nop
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	20000edc 	.word	0x20000edc

0800681c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006824:	f107 0308 	add.w	r3, r7, #8
 8006828:	4618      	mov	r0, r3
 800682a:	f000 f857 	bl	80068dc <prvGetNextExpireTime>
 800682e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	4619      	mov	r1, r3
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f000 f803 	bl	8006840 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800683a:	f000 f8d5 	bl	80069e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800683e:	e7f1      	b.n	8006824 <prvTimerTask+0x8>

08006840 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800684a:	f7ff fa39 	bl	8005cc0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800684e:	f107 0308 	add.w	r3, r7, #8
 8006852:	4618      	mov	r0, r3
 8006854:	f000 f866 	bl	8006924 <prvSampleTimeNow>
 8006858:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d130      	bne.n	80068c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <prvProcessTimerOrBlockTask+0x3c>
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	429a      	cmp	r2, r3
 800686c:	d806      	bhi.n	800687c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800686e:	f7ff fa35 	bl	8005cdc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006872:	68f9      	ldr	r1, [r7, #12]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7ff ff85 	bl	8006784 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800687a:	e024      	b.n	80068c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d008      	beq.n	8006894 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006882:	4b13      	ldr	r3, [pc, #76]	; (80068d0 <prvProcessTimerOrBlockTask+0x90>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <prvProcessTimerOrBlockTask+0x50>
 800688c:	2301      	movs	r3, #1
 800688e:	e000      	b.n	8006892 <prvProcessTimerOrBlockTask+0x52>
 8006890:	2300      	movs	r3, #0
 8006892:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006894:	4b0f      	ldr	r3, [pc, #60]	; (80068d4 <prvProcessTimerOrBlockTask+0x94>)
 8006896:	6818      	ldr	r0, [r3, #0]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	4619      	mov	r1, r3
 80068a2:	f7fe ff7d 	bl	80057a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80068a6:	f7ff fa19 	bl	8005cdc <xTaskResumeAll>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10a      	bne.n	80068c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80068b0:	4b09      	ldr	r3, [pc, #36]	; (80068d8 <prvProcessTimerOrBlockTask+0x98>)
 80068b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	f3bf 8f6f 	isb	sy
}
 80068c0:	e001      	b.n	80068c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80068c2:	f7ff fa0b 	bl	8005cdc <xTaskResumeAll>
}
 80068c6:	bf00      	nop
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	20000ee0 	.word	0x20000ee0
 80068d4:	20000ee4 	.word	0x20000ee4
 80068d8:	e000ed04 	.word	0xe000ed04

080068dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80068e4:	4b0e      	ldr	r3, [pc, #56]	; (8006920 <prvGetNextExpireTime+0x44>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <prvGetNextExpireTime+0x16>
 80068ee:	2201      	movs	r2, #1
 80068f0:	e000      	b.n	80068f4 <prvGetNextExpireTime+0x18>
 80068f2:	2200      	movs	r2, #0
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d105      	bne.n	800690c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006900:	4b07      	ldr	r3, [pc, #28]	; (8006920 <prvGetNextExpireTime+0x44>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	e001      	b.n	8006910 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006910:	68fb      	ldr	r3, [r7, #12]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	20000edc 	.word	0x20000edc

08006924 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800692c:	f7ff fa74 	bl	8005e18 <xTaskGetTickCount>
 8006930:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006932:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <prvSampleTimeNow+0x3c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	429a      	cmp	r2, r3
 800693a:	d205      	bcs.n	8006948 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800693c:	f000 f936 	bl	8006bac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	e002      	b.n	800694e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800694e:	4a04      	ldr	r2, [pc, #16]	; (8006960 <prvSampleTimeNow+0x3c>)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006954:	68fb      	ldr	r3, [r7, #12]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20000eec 	.word	0x20000eec

08006964 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006972:	2300      	movs	r3, #0
 8006974:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	429a      	cmp	r2, r3
 8006988:	d812      	bhi.n	80069b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	1ad2      	subs	r2, r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	429a      	cmp	r2, r3
 8006996:	d302      	bcc.n	800699e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006998:	2301      	movs	r3, #1
 800699a:	617b      	str	r3, [r7, #20]
 800699c:	e01b      	b.n	80069d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800699e:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <prvInsertTimerInActiveList+0x7c>)
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	3304      	adds	r3, #4
 80069a6:	4619      	mov	r1, r3
 80069a8:	4610      	mov	r0, r2
 80069aa:	f7fe f9de 	bl	8004d6a <vListInsert>
 80069ae:	e012      	b.n	80069d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d206      	bcs.n	80069c6 <prvInsertTimerInActiveList+0x62>
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d302      	bcc.n	80069c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80069c0:	2301      	movs	r3, #1
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	e007      	b.n	80069d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069c6:	4b07      	ldr	r3, [pc, #28]	; (80069e4 <prvInsertTimerInActiveList+0x80>)
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	3304      	adds	r3, #4
 80069ce:	4619      	mov	r1, r3
 80069d0:	4610      	mov	r0, r2
 80069d2:	f7fe f9ca 	bl	8004d6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80069d6:	697b      	ldr	r3, [r7, #20]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	20000ee0 	.word	0x20000ee0
 80069e4:	20000edc 	.word	0x20000edc

080069e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08e      	sub	sp, #56	; 0x38
 80069ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069ee:	e0ca      	b.n	8006b86 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	da18      	bge.n	8006a28 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80069f6:	1d3b      	adds	r3, r7, #4
 80069f8:	3304      	adds	r3, #4
 80069fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80069fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	61fb      	str	r3, [r7, #28]
}
 8006a14:	bf00      	nop
 8006a16:	e7fe      	b.n	8006a16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a1e:	6850      	ldr	r0, [r2, #4]
 8006a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a22:	6892      	ldr	r2, [r2, #8]
 8006a24:	4611      	mov	r1, r2
 8006a26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f2c0 80aa 	blt.w	8006b84 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d004      	beq.n	8006a46 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	3304      	adds	r3, #4
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fe f9cb 	bl	8004ddc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a46:	463b      	mov	r3, r7
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff ff6b 	bl	8006924 <prvSampleTimeNow>
 8006a4e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b09      	cmp	r3, #9
 8006a54:	f200 8097 	bhi.w	8006b86 <prvProcessReceivedCommands+0x19e>
 8006a58:	a201      	add	r2, pc, #4	; (adr r2, 8006a60 <prvProcessReceivedCommands+0x78>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006a89 	.word	0x08006a89
 8006a64:	08006a89 	.word	0x08006a89
 8006a68:	08006a89 	.word	0x08006a89
 8006a6c:	08006afd 	.word	0x08006afd
 8006a70:	08006b11 	.word	0x08006b11
 8006a74:	08006b5b 	.word	0x08006b5b
 8006a78:	08006a89 	.word	0x08006a89
 8006a7c:	08006a89 	.word	0x08006a89
 8006a80:	08006afd 	.word	0x08006afd
 8006a84:	08006b11 	.word	0x08006b11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a8e:	f043 0301 	orr.w	r3, r3, #1
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	18d1      	adds	r1, r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aa8:	f7ff ff5c 	bl	8006964 <prvInsertTimerInActiveList>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d069      	beq.n	8006b86 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ab8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d05e      	beq.n	8006b86 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	441a      	add	r2, r3
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ada:	f7ff fe05 	bl	80066e8 <xTimerGenericCommand>
 8006ade:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d14f      	bne.n	8006b86 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	61bb      	str	r3, [r7, #24]
}
 8006af8:	bf00      	nop
 8006afa:	e7fe      	b.n	8006afa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b02:	f023 0301 	bic.w	r3, r3, #1
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006b0e:	e03a      	b.n	8006b86 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b16:	f043 0301 	orr.w	r3, r3, #1
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10a      	bne.n	8006b46 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	617b      	str	r3, [r7, #20]
}
 8006b42:	bf00      	nop
 8006b44:	e7fe      	b.n	8006b44 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	699a      	ldr	r2, [r3, #24]
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	18d1      	adds	r1, r2, r3
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b54:	f7ff ff06 	bl	8006964 <prvInsertTimerInActiveList>
					break;
 8006b58:	e015      	b.n	8006b86 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d103      	bne.n	8006b70 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006b68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b6a:	f000 fbe1 	bl	8007330 <vPortFree>
 8006b6e:	e00a      	b.n	8006b86 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b76:	f023 0301 	bic.w	r3, r3, #1
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b82:	e000      	b.n	8006b86 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006b84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b86:	4b08      	ldr	r3, [pc, #32]	; (8006ba8 <prvProcessReceivedCommands+0x1c0>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	1d39      	adds	r1, r7, #4
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fe fbec 	bl	800536c <xQueueReceive>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f47f af2a 	bne.w	80069f0 <prvProcessReceivedCommands+0x8>
	}
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	3730      	adds	r7, #48	; 0x30
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000ee4 	.word	0x20000ee4

08006bac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b088      	sub	sp, #32
 8006bb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bb2:	e048      	b.n	8006c46 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bb4:	4b2d      	ldr	r3, [pc, #180]	; (8006c6c <prvSwitchTimerLists+0xc0>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bbe:	4b2b      	ldr	r3, [pc, #172]	; (8006c6c <prvSwitchTimerLists+0xc0>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3304      	adds	r3, #4
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fe f905 	bl	8004ddc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d02e      	beq.n	8006c46 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	4413      	add	r3, r2
 8006bf0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d90e      	bls.n	8006c18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c06:	4b19      	ldr	r3, [pc, #100]	; (8006c6c <prvSwitchTimerLists+0xc0>)
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	4619      	mov	r1, r3
 8006c10:	4610      	mov	r0, r2
 8006c12:	f7fe f8aa 	bl	8004d6a <vListInsert>
 8006c16:	e016      	b.n	8006c46 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c18:	2300      	movs	r3, #0
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	2100      	movs	r1, #0
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f7ff fd60 	bl	80066e8 <xTimerGenericCommand>
 8006c28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10a      	bne.n	8006c46 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	603b      	str	r3, [r7, #0]
}
 8006c42:	bf00      	nop
 8006c44:	e7fe      	b.n	8006c44 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c46:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <prvSwitchTimerLists+0xc0>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1b1      	bne.n	8006bb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c50:	4b06      	ldr	r3, [pc, #24]	; (8006c6c <prvSwitchTimerLists+0xc0>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c56:	4b06      	ldr	r3, [pc, #24]	; (8006c70 <prvSwitchTimerLists+0xc4>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a04      	ldr	r2, [pc, #16]	; (8006c6c <prvSwitchTimerLists+0xc0>)
 8006c5c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c5e:	4a04      	ldr	r2, [pc, #16]	; (8006c70 <prvSwitchTimerLists+0xc4>)
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	6013      	str	r3, [r2, #0]
}
 8006c64:	bf00      	nop
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20000edc 	.word	0x20000edc
 8006c70:	20000ee0 	.word	0x20000ee0

08006c74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c7a:	f000 f96b 	bl	8006f54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c7e:	4b15      	ldr	r3, [pc, #84]	; (8006cd4 <prvCheckForValidListAndQueue+0x60>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d120      	bne.n	8006cc8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c86:	4814      	ldr	r0, [pc, #80]	; (8006cd8 <prvCheckForValidListAndQueue+0x64>)
 8006c88:	f7fe f81e 	bl	8004cc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c8c:	4813      	ldr	r0, [pc, #76]	; (8006cdc <prvCheckForValidListAndQueue+0x68>)
 8006c8e:	f7fe f81b 	bl	8004cc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c92:	4b13      	ldr	r3, [pc, #76]	; (8006ce0 <prvCheckForValidListAndQueue+0x6c>)
 8006c94:	4a10      	ldr	r2, [pc, #64]	; (8006cd8 <prvCheckForValidListAndQueue+0x64>)
 8006c96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c98:	4b12      	ldr	r3, [pc, #72]	; (8006ce4 <prvCheckForValidListAndQueue+0x70>)
 8006c9a:	4a10      	ldr	r2, [pc, #64]	; (8006cdc <prvCheckForValidListAndQueue+0x68>)
 8006c9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	4b11      	ldr	r3, [pc, #68]	; (8006ce8 <prvCheckForValidListAndQueue+0x74>)
 8006ca4:	4a11      	ldr	r2, [pc, #68]	; (8006cec <prvCheckForValidListAndQueue+0x78>)
 8006ca6:	2110      	movs	r1, #16
 8006ca8:	200a      	movs	r0, #10
 8006caa:	f7fe f929 	bl	8004f00 <xQueueGenericCreateStatic>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4a08      	ldr	r2, [pc, #32]	; (8006cd4 <prvCheckForValidListAndQueue+0x60>)
 8006cb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006cb4:	4b07      	ldr	r3, [pc, #28]	; (8006cd4 <prvCheckForValidListAndQueue+0x60>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d005      	beq.n	8006cc8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006cbc:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <prvCheckForValidListAndQueue+0x60>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	490b      	ldr	r1, [pc, #44]	; (8006cf0 <prvCheckForValidListAndQueue+0x7c>)
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fe fd42 	bl	800574c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cc8:	f000 f974 	bl	8006fb4 <vPortExitCritical>
}
 8006ccc:	bf00      	nop
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20000ee4 	.word	0x20000ee4
 8006cd8:	20000eb4 	.word	0x20000eb4
 8006cdc:	20000ec8 	.word	0x20000ec8
 8006ce0:	20000edc 	.word	0x20000edc
 8006ce4:	20000ee0 	.word	0x20000ee0
 8006ce8:	20000f90 	.word	0x20000f90
 8006cec:	20000ef0 	.word	0x20000ef0
 8006cf0:	08008b84 	.word	0x08008b84

08006cf4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3b04      	subs	r3, #4
 8006d04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3b04      	subs	r3, #4
 8006d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	f023 0201 	bic.w	r2, r3, #1
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3b04      	subs	r3, #4
 8006d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d24:	4a0c      	ldr	r2, [pc, #48]	; (8006d58 <pxPortInitialiseStack+0x64>)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3b14      	subs	r3, #20
 8006d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	3b04      	subs	r3, #4
 8006d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f06f 0202 	mvn.w	r2, #2
 8006d42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3b20      	subs	r3, #32
 8006d48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	08006d5d 	.word	0x08006d5d

08006d5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d66:	4b12      	ldr	r3, [pc, #72]	; (8006db0 <prvTaskExitError+0x54>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6e:	d00a      	beq.n	8006d86 <prvTaskExitError+0x2a>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	60fb      	str	r3, [r7, #12]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <prvTaskExitError+0x28>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	60bb      	str	r3, [r7, #8]
}
 8006d98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d9a:	bf00      	nop
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d0fc      	beq.n	8006d9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006da2:	bf00      	nop
 8006da4:	bf00      	nop
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	2000000c 	.word	0x2000000c
	...

08006dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006dc0:	4b07      	ldr	r3, [pc, #28]	; (8006de0 <pxCurrentTCBConst2>)
 8006dc2:	6819      	ldr	r1, [r3, #0]
 8006dc4:	6808      	ldr	r0, [r1, #0]
 8006dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dca:	f380 8809 	msr	PSP, r0
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f04f 0000 	mov.w	r0, #0
 8006dd6:	f380 8811 	msr	BASEPRI, r0
 8006dda:	4770      	bx	lr
 8006ddc:	f3af 8000 	nop.w

08006de0 <pxCurrentTCBConst2>:
 8006de0:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006de4:	bf00      	nop
 8006de6:	bf00      	nop

08006de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006de8:	4808      	ldr	r0, [pc, #32]	; (8006e0c <prvPortStartFirstTask+0x24>)
 8006dea:	6800      	ldr	r0, [r0, #0]
 8006dec:	6800      	ldr	r0, [r0, #0]
 8006dee:	f380 8808 	msr	MSP, r0
 8006df2:	f04f 0000 	mov.w	r0, #0
 8006df6:	f380 8814 	msr	CONTROL, r0
 8006dfa:	b662      	cpsie	i
 8006dfc:	b661      	cpsie	f
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	df00      	svc	0
 8006e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e0a:	bf00      	nop
 8006e0c:	e000ed08 	.word	0xe000ed08

08006e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e16:	4b46      	ldr	r3, [pc, #280]	; (8006f30 <xPortStartScheduler+0x120>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a46      	ldr	r2, [pc, #280]	; (8006f34 <xPortStartScheduler+0x124>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d10a      	bne.n	8006e36 <xPortStartScheduler+0x26>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	613b      	str	r3, [r7, #16]
}
 8006e32:	bf00      	nop
 8006e34:	e7fe      	b.n	8006e34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e36:	4b3e      	ldr	r3, [pc, #248]	; (8006f30 <xPortStartScheduler+0x120>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a3f      	ldr	r2, [pc, #252]	; (8006f38 <xPortStartScheduler+0x128>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d10a      	bne.n	8006e56 <xPortStartScheduler+0x46>
	__asm volatile
 8006e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	60fb      	str	r3, [r7, #12]
}
 8006e52:	bf00      	nop
 8006e54:	e7fe      	b.n	8006e54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e56:	4b39      	ldr	r3, [pc, #228]	; (8006f3c <xPortStartScheduler+0x12c>)
 8006e58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	22ff      	movs	r2, #255	; 0xff
 8006e66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	4b31      	ldr	r3, [pc, #196]	; (8006f40 <xPortStartScheduler+0x130>)
 8006e7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e7e:	4b31      	ldr	r3, [pc, #196]	; (8006f44 <xPortStartScheduler+0x134>)
 8006e80:	2207      	movs	r2, #7
 8006e82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e84:	e009      	b.n	8006e9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006e86:	4b2f      	ldr	r3, [pc, #188]	; (8006f44 <xPortStartScheduler+0x134>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	4a2d      	ldr	r2, [pc, #180]	; (8006f44 <xPortStartScheduler+0x134>)
 8006e8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e90:	78fb      	ldrb	r3, [r7, #3]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	005b      	lsls	r3, r3, #1
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e9a:	78fb      	ldrb	r3, [r7, #3]
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea2:	2b80      	cmp	r3, #128	; 0x80
 8006ea4:	d0ef      	beq.n	8006e86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ea6:	4b27      	ldr	r3, [pc, #156]	; (8006f44 <xPortStartScheduler+0x134>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f1c3 0307 	rsb	r3, r3, #7
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d00a      	beq.n	8006ec8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb6:	f383 8811 	msr	BASEPRI, r3
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	60bb      	str	r3, [r7, #8]
}
 8006ec4:	bf00      	nop
 8006ec6:	e7fe      	b.n	8006ec6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ec8:	4b1e      	ldr	r3, [pc, #120]	; (8006f44 <xPortStartScheduler+0x134>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	021b      	lsls	r3, r3, #8
 8006ece:	4a1d      	ldr	r2, [pc, #116]	; (8006f44 <xPortStartScheduler+0x134>)
 8006ed0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ed2:	4b1c      	ldr	r3, [pc, #112]	; (8006f44 <xPortStartScheduler+0x134>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006eda:	4a1a      	ldr	r2, [pc, #104]	; (8006f44 <xPortStartScheduler+0x134>)
 8006edc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ee6:	4b18      	ldr	r3, [pc, #96]	; (8006f48 <xPortStartScheduler+0x138>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a17      	ldr	r2, [pc, #92]	; (8006f48 <xPortStartScheduler+0x138>)
 8006eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ef0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ef2:	4b15      	ldr	r3, [pc, #84]	; (8006f48 <xPortStartScheduler+0x138>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a14      	ldr	r2, [pc, #80]	; (8006f48 <xPortStartScheduler+0x138>)
 8006ef8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006efc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006efe:	f000 f8dd 	bl	80070bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f02:	4b12      	ldr	r3, [pc, #72]	; (8006f4c <xPortStartScheduler+0x13c>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f08:	f000 f8fc 	bl	8007104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f0c:	4b10      	ldr	r3, [pc, #64]	; (8006f50 <xPortStartScheduler+0x140>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a0f      	ldr	r2, [pc, #60]	; (8006f50 <xPortStartScheduler+0x140>)
 8006f12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f18:	f7ff ff66 	bl	8006de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f1c:	f7ff f846 	bl	8005fac <vTaskSwitchContext>
	prvTaskExitError();
 8006f20:	f7ff ff1c 	bl	8006d5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	e000ed00 	.word	0xe000ed00
 8006f34:	410fc271 	.word	0x410fc271
 8006f38:	410fc270 	.word	0x410fc270
 8006f3c:	e000e400 	.word	0xe000e400
 8006f40:	20000fe0 	.word	0x20000fe0
 8006f44:	20000fe4 	.word	0x20000fe4
 8006f48:	e000ed20 	.word	0xe000ed20
 8006f4c:	2000000c 	.word	0x2000000c
 8006f50:	e000ef34 	.word	0xe000ef34

08006f54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	607b      	str	r3, [r7, #4]
}
 8006f6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f6e:	4b0f      	ldr	r3, [pc, #60]	; (8006fac <vPortEnterCritical+0x58>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3301      	adds	r3, #1
 8006f74:	4a0d      	ldr	r2, [pc, #52]	; (8006fac <vPortEnterCritical+0x58>)
 8006f76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f78:	4b0c      	ldr	r3, [pc, #48]	; (8006fac <vPortEnterCritical+0x58>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d10f      	bne.n	8006fa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f80:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <vPortEnterCritical+0x5c>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00a      	beq.n	8006fa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	603b      	str	r3, [r7, #0]
}
 8006f9c:	bf00      	nop
 8006f9e:	e7fe      	b.n	8006f9e <vPortEnterCritical+0x4a>
	}
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	2000000c 	.word	0x2000000c
 8006fb0:	e000ed04 	.word	0xe000ed04

08006fb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006fba:	4b12      	ldr	r3, [pc, #72]	; (8007004 <vPortExitCritical+0x50>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10a      	bne.n	8006fd8 <vPortExitCritical+0x24>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	607b      	str	r3, [r7, #4]
}
 8006fd4:	bf00      	nop
 8006fd6:	e7fe      	b.n	8006fd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006fd8:	4b0a      	ldr	r3, [pc, #40]	; (8007004 <vPortExitCritical+0x50>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	4a09      	ldr	r2, [pc, #36]	; (8007004 <vPortExitCritical+0x50>)
 8006fe0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006fe2:	4b08      	ldr	r3, [pc, #32]	; (8007004 <vPortExitCritical+0x50>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d105      	bne.n	8006ff6 <vPortExitCritical+0x42>
 8006fea:	2300      	movs	r3, #0
 8006fec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	f383 8811 	msr	BASEPRI, r3
}
 8006ff4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	2000000c 	.word	0x2000000c
	...

08007010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007010:	f3ef 8009 	mrs	r0, PSP
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	4b15      	ldr	r3, [pc, #84]	; (8007070 <pxCurrentTCBConst>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	f01e 0f10 	tst.w	lr, #16
 8007020:	bf08      	it	eq
 8007022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702a:	6010      	str	r0, [r2, #0]
 800702c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007034:	f380 8811 	msr	BASEPRI, r0
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f7fe ffb4 	bl	8005fac <vTaskSwitchContext>
 8007044:	f04f 0000 	mov.w	r0, #0
 8007048:	f380 8811 	msr	BASEPRI, r0
 800704c:	bc09      	pop	{r0, r3}
 800704e:	6819      	ldr	r1, [r3, #0]
 8007050:	6808      	ldr	r0, [r1, #0]
 8007052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007056:	f01e 0f10 	tst.w	lr, #16
 800705a:	bf08      	it	eq
 800705c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007060:	f380 8809 	msr	PSP, r0
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	f3af 8000 	nop.w

08007070 <pxCurrentTCBConst>:
 8007070:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007074:	bf00      	nop
 8007076:	bf00      	nop

08007078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	607b      	str	r3, [r7, #4]
}
 8007090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007092:	f7fe fed1 	bl	8005e38 <xTaskIncrementTick>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800709c:	4b06      	ldr	r3, [pc, #24]	; (80070b8 <xPortSysTickHandler+0x40>)
 800709e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	2300      	movs	r3, #0
 80070a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	f383 8811 	msr	BASEPRI, r3
}
 80070ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80070b0:	bf00      	nop
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	e000ed04 	.word	0xe000ed04

080070bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070bc:	b480      	push	{r7}
 80070be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070c0:	4b0b      	ldr	r3, [pc, #44]	; (80070f0 <vPortSetupTimerInterrupt+0x34>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070c6:	4b0b      	ldr	r3, [pc, #44]	; (80070f4 <vPortSetupTimerInterrupt+0x38>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070cc:	4b0a      	ldr	r3, [pc, #40]	; (80070f8 <vPortSetupTimerInterrupt+0x3c>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a0a      	ldr	r2, [pc, #40]	; (80070fc <vPortSetupTimerInterrupt+0x40>)
 80070d2:	fba2 2303 	umull	r2, r3, r2, r3
 80070d6:	099b      	lsrs	r3, r3, #6
 80070d8:	4a09      	ldr	r2, [pc, #36]	; (8007100 <vPortSetupTimerInterrupt+0x44>)
 80070da:	3b01      	subs	r3, #1
 80070dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070de:	4b04      	ldr	r3, [pc, #16]	; (80070f0 <vPortSetupTimerInterrupt+0x34>)
 80070e0:	2207      	movs	r2, #7
 80070e2:	601a      	str	r2, [r3, #0]
}
 80070e4:	bf00      	nop
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	e000e010 	.word	0xe000e010
 80070f4:	e000e018 	.word	0xe000e018
 80070f8:	20000000 	.word	0x20000000
 80070fc:	10624dd3 	.word	0x10624dd3
 8007100:	e000e014 	.word	0xe000e014

08007104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007104:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007114 <vPortEnableVFP+0x10>
 8007108:	6801      	ldr	r1, [r0, #0]
 800710a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800710e:	6001      	str	r1, [r0, #0]
 8007110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007112:	bf00      	nop
 8007114:	e000ed88 	.word	0xe000ed88

08007118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800711e:	f3ef 8305 	mrs	r3, IPSR
 8007122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b0f      	cmp	r3, #15
 8007128:	d914      	bls.n	8007154 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800712a:	4a17      	ldr	r2, [pc, #92]	; (8007188 <vPortValidateInterruptPriority+0x70>)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4413      	add	r3, r2
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007134:	4b15      	ldr	r3, [pc, #84]	; (800718c <vPortValidateInterruptPriority+0x74>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	7afa      	ldrb	r2, [r7, #11]
 800713a:	429a      	cmp	r2, r3
 800713c:	d20a      	bcs.n	8007154 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	607b      	str	r3, [r7, #4]
}
 8007150:	bf00      	nop
 8007152:	e7fe      	b.n	8007152 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007154:	4b0e      	ldr	r3, [pc, #56]	; (8007190 <vPortValidateInterruptPriority+0x78>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800715c:	4b0d      	ldr	r3, [pc, #52]	; (8007194 <vPortValidateInterruptPriority+0x7c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	429a      	cmp	r2, r3
 8007162:	d90a      	bls.n	800717a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	603b      	str	r3, [r7, #0]
}
 8007176:	bf00      	nop
 8007178:	e7fe      	b.n	8007178 <vPortValidateInterruptPriority+0x60>
	}
 800717a:	bf00      	nop
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	e000e3f0 	.word	0xe000e3f0
 800718c:	20000fe0 	.word	0x20000fe0
 8007190:	e000ed0c 	.word	0xe000ed0c
 8007194:	20000fe4 	.word	0x20000fe4

08007198 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08a      	sub	sp, #40	; 0x28
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071a0:	2300      	movs	r3, #0
 80071a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071a4:	f7fe fd8c 	bl	8005cc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071a8:	4b5b      	ldr	r3, [pc, #364]	; (8007318 <pvPortMalloc+0x180>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071b0:	f000 f920 	bl	80073f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071b4:	4b59      	ldr	r3, [pc, #356]	; (800731c <pvPortMalloc+0x184>)
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4013      	ands	r3, r2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f040 8093 	bne.w	80072e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01d      	beq.n	8007204 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80071c8:	2208      	movs	r2, #8
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4413      	add	r3, r2
 80071ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d014      	beq.n	8007204 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f023 0307 	bic.w	r3, r3, #7
 80071e0:	3308      	adds	r3, #8
 80071e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f003 0307 	and.w	r3, r3, #7
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00a      	beq.n	8007204 <pvPortMalloc+0x6c>
	__asm volatile
 80071ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	617b      	str	r3, [r7, #20]
}
 8007200:	bf00      	nop
 8007202:	e7fe      	b.n	8007202 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d06e      	beq.n	80072e8 <pvPortMalloc+0x150>
 800720a:	4b45      	ldr	r3, [pc, #276]	; (8007320 <pvPortMalloc+0x188>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	429a      	cmp	r2, r3
 8007212:	d869      	bhi.n	80072e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007214:	4b43      	ldr	r3, [pc, #268]	; (8007324 <pvPortMalloc+0x18c>)
 8007216:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007218:	4b42      	ldr	r3, [pc, #264]	; (8007324 <pvPortMalloc+0x18c>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800721e:	e004      	b.n	800722a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	429a      	cmp	r2, r3
 8007232:	d903      	bls.n	800723c <pvPortMalloc+0xa4>
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1f1      	bne.n	8007220 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800723c:	4b36      	ldr	r3, [pc, #216]	; (8007318 <pvPortMalloc+0x180>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007242:	429a      	cmp	r2, r3
 8007244:	d050      	beq.n	80072e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2208      	movs	r2, #8
 800724c:	4413      	add	r3, r2
 800724e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	1ad2      	subs	r2, r2, r3
 8007260:	2308      	movs	r3, #8
 8007262:	005b      	lsls	r3, r3, #1
 8007264:	429a      	cmp	r2, r3
 8007266:	d91f      	bls.n	80072a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4413      	add	r3, r2
 800726e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	f003 0307 	and.w	r3, r3, #7
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <pvPortMalloc+0xf8>
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	613b      	str	r3, [r7, #16]
}
 800728c:	bf00      	nop
 800728e:	e7fe      	b.n	800728e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	1ad2      	subs	r2, r2, r3
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072a2:	69b8      	ldr	r0, [r7, #24]
 80072a4:	f000 f908 	bl	80074b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072a8:	4b1d      	ldr	r3, [pc, #116]	; (8007320 <pvPortMalloc+0x188>)
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	4a1b      	ldr	r2, [pc, #108]	; (8007320 <pvPortMalloc+0x188>)
 80072b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072b6:	4b1a      	ldr	r3, [pc, #104]	; (8007320 <pvPortMalloc+0x188>)
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	4b1b      	ldr	r3, [pc, #108]	; (8007328 <pvPortMalloc+0x190>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d203      	bcs.n	80072ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072c2:	4b17      	ldr	r3, [pc, #92]	; (8007320 <pvPortMalloc+0x188>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a18      	ldr	r2, [pc, #96]	; (8007328 <pvPortMalloc+0x190>)
 80072c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	4b13      	ldr	r3, [pc, #76]	; (800731c <pvPortMalloc+0x184>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	431a      	orrs	r2, r3
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	2200      	movs	r2, #0
 80072dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80072de:	4b13      	ldr	r3, [pc, #76]	; (800732c <pvPortMalloc+0x194>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3301      	adds	r3, #1
 80072e4:	4a11      	ldr	r2, [pc, #68]	; (800732c <pvPortMalloc+0x194>)
 80072e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072e8:	f7fe fcf8 	bl	8005cdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	f003 0307 	and.w	r3, r3, #7
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <pvPortMalloc+0x174>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	60fb      	str	r3, [r7, #12]
}
 8007308:	bf00      	nop
 800730a:	e7fe      	b.n	800730a <pvPortMalloc+0x172>
	return pvReturn;
 800730c:	69fb      	ldr	r3, [r7, #28]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3728      	adds	r7, #40	; 0x28
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20004bf0 	.word	0x20004bf0
 800731c:	20004c04 	.word	0x20004c04
 8007320:	20004bf4 	.word	0x20004bf4
 8007324:	20004be8 	.word	0x20004be8
 8007328:	20004bf8 	.word	0x20004bf8
 800732c:	20004bfc 	.word	0x20004bfc

08007330 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d04d      	beq.n	80073de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007342:	2308      	movs	r3, #8
 8007344:	425b      	negs	r3, r3
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	4413      	add	r3, r2
 800734a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	685a      	ldr	r2, [r3, #4]
 8007354:	4b24      	ldr	r3, [pc, #144]	; (80073e8 <vPortFree+0xb8>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4013      	ands	r3, r2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10a      	bne.n	8007374 <vPortFree+0x44>
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	60fb      	str	r3, [r7, #12]
}
 8007370:	bf00      	nop
 8007372:	e7fe      	b.n	8007372 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00a      	beq.n	8007392 <vPortFree+0x62>
	__asm volatile
 800737c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	60bb      	str	r3, [r7, #8]
}
 800738e:	bf00      	nop
 8007390:	e7fe      	b.n	8007390 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	4b14      	ldr	r3, [pc, #80]	; (80073e8 <vPortFree+0xb8>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4013      	ands	r3, r2
 800739c:	2b00      	cmp	r3, #0
 800739e:	d01e      	beq.n	80073de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d11a      	bne.n	80073de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	4b0e      	ldr	r3, [pc, #56]	; (80073e8 <vPortFree+0xb8>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	43db      	mvns	r3, r3
 80073b2:	401a      	ands	r2, r3
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073b8:	f7fe fc82 	bl	8005cc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	4b0a      	ldr	r3, [pc, #40]	; (80073ec <vPortFree+0xbc>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4413      	add	r3, r2
 80073c6:	4a09      	ldr	r2, [pc, #36]	; (80073ec <vPortFree+0xbc>)
 80073c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073ca:	6938      	ldr	r0, [r7, #16]
 80073cc:	f000 f874 	bl	80074b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80073d0:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <vPortFree+0xc0>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3301      	adds	r3, #1
 80073d6:	4a06      	ldr	r2, [pc, #24]	; (80073f0 <vPortFree+0xc0>)
 80073d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80073da:	f7fe fc7f 	bl	8005cdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073de:	bf00      	nop
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20004c04 	.word	0x20004c04
 80073ec:	20004bf4 	.word	0x20004bf4
 80073f0:	20004c00 	.word	0x20004c00

080073f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80073fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007400:	4b27      	ldr	r3, [pc, #156]	; (80074a0 <prvHeapInit+0xac>)
 8007402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00c      	beq.n	8007428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	3307      	adds	r3, #7
 8007412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f023 0307 	bic.w	r3, r3, #7
 800741a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	4a1f      	ldr	r2, [pc, #124]	; (80074a0 <prvHeapInit+0xac>)
 8007424:	4413      	add	r3, r2
 8007426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800742c:	4a1d      	ldr	r2, [pc, #116]	; (80074a4 <prvHeapInit+0xb0>)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007432:	4b1c      	ldr	r3, [pc, #112]	; (80074a4 <prvHeapInit+0xb0>)
 8007434:	2200      	movs	r2, #0
 8007436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	4413      	add	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007440:	2208      	movs	r2, #8
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	1a9b      	subs	r3, r3, r2
 8007446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 0307 	bic.w	r3, r3, #7
 800744e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4a15      	ldr	r2, [pc, #84]	; (80074a8 <prvHeapInit+0xb4>)
 8007454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007456:	4b14      	ldr	r3, [pc, #80]	; (80074a8 <prvHeapInit+0xb4>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2200      	movs	r2, #0
 800745c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800745e:	4b12      	ldr	r3, [pc, #72]	; (80074a8 <prvHeapInit+0xb4>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	1ad2      	subs	r2, r2, r3
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007474:	4b0c      	ldr	r3, [pc, #48]	; (80074a8 <prvHeapInit+0xb4>)
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	4a0a      	ldr	r2, [pc, #40]	; (80074ac <prvHeapInit+0xb8>)
 8007482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	4a09      	ldr	r2, [pc, #36]	; (80074b0 <prvHeapInit+0xbc>)
 800748a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800748c:	4b09      	ldr	r3, [pc, #36]	; (80074b4 <prvHeapInit+0xc0>)
 800748e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007492:	601a      	str	r2, [r3, #0]
}
 8007494:	bf00      	nop
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	20000fe8 	.word	0x20000fe8
 80074a4:	20004be8 	.word	0x20004be8
 80074a8:	20004bf0 	.word	0x20004bf0
 80074ac:	20004bf8 	.word	0x20004bf8
 80074b0:	20004bf4 	.word	0x20004bf4
 80074b4:	20004c04 	.word	0x20004c04

080074b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074c0:	4b28      	ldr	r3, [pc, #160]	; (8007564 <prvInsertBlockIntoFreeList+0xac>)
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	e002      	b.n	80074cc <prvInsertBlockIntoFreeList+0x14>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d8f7      	bhi.n	80074c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	4413      	add	r3, r2
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d108      	bne.n	80074fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	441a      	add	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	441a      	add	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	429a      	cmp	r2, r3
 800750c:	d118      	bne.n	8007540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	4b15      	ldr	r3, [pc, #84]	; (8007568 <prvInsertBlockIntoFreeList+0xb0>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	429a      	cmp	r2, r3
 8007518:	d00d      	beq.n	8007536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	441a      	add	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	e008      	b.n	8007548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007536:	4b0c      	ldr	r3, [pc, #48]	; (8007568 <prvInsertBlockIntoFreeList+0xb0>)
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	e003      	b.n	8007548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	429a      	cmp	r2, r3
 800754e:	d002      	beq.n	8007556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007556:	bf00      	nop
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	20004be8 	.word	0x20004be8
 8007568:	20004bf0 	.word	0x20004bf0

0800756c <init_powderMachine>:
								{PD05_heat_EN_Pin, PD05_heat_IN1_Pin, PD05_heat_IN2_Pin},
								{CF01_heat_EN_Pin, CF01_heat_IN1_Pin, CF01_heat_IN2_Pin}};
/*********************************** Pin configuration ***********************************/

void init_powderMachine(void)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
	// powder motor direction must be fixed!
	// init DCpowder motor direction & disable motor
	for(uint8_t i = 0; i<sizeof(PD_DCpowder_GPIO_Port) / sizeof(PD_DCpowder_GPIO_Port[0]); i++){
 8007572:	2300      	movs	r3, #0
 8007574:	71fb      	strb	r3, [r7, #7]
 8007576:	e045      	b.n	8007604 <init_powderMachine+0x98>
		HAL_GPIO_WritePin(PD_DCpowder_GPIO_Port[i][IN1], PD_DCpowder_Pin[i][IN1], GPIO_PIN_RESET);
 8007578:	79fa      	ldrb	r2, [r7, #7]
 800757a:	497d      	ldr	r1, [pc, #500]	; (8007770 <init_powderMachine+0x204>)
 800757c:	4613      	mov	r3, r2
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	4413      	add	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	440b      	add	r3, r1
 8007586:	3304      	adds	r3, #4
 8007588:	6818      	ldr	r0, [r3, #0]
 800758a:	79fa      	ldrb	r2, [r7, #7]
 800758c:	4979      	ldr	r1, [pc, #484]	; (8007774 <init_powderMachine+0x208>)
 800758e:	4613      	mov	r3, r2
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	4413      	add	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	440b      	add	r3, r1
 8007598:	3304      	adds	r3, #4
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	b29b      	uxth	r3, r3
 800759e:	2200      	movs	r2, #0
 80075a0:	4619      	mov	r1, r3
 80075a2:	f7fa fbff 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCpowder_GPIO_Port[i][IN2], PD_DCpowder_Pin[i][IN2], GPIO_PIN_SET);
 80075a6:	79fa      	ldrb	r2, [r7, #7]
 80075a8:	4971      	ldr	r1, [pc, #452]	; (8007770 <init_powderMachine+0x204>)
 80075aa:	4613      	mov	r3, r2
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	4413      	add	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	440b      	add	r3, r1
 80075b4:	3308      	adds	r3, #8
 80075b6:	6818      	ldr	r0, [r3, #0]
 80075b8:	79fa      	ldrb	r2, [r7, #7]
 80075ba:	496e      	ldr	r1, [pc, #440]	; (8007774 <init_powderMachine+0x208>)
 80075bc:	4613      	mov	r3, r2
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	4413      	add	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	440b      	add	r3, r1
 80075c6:	3308      	adds	r3, #8
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	2201      	movs	r2, #1
 80075ce:	4619      	mov	r1, r3
 80075d0:	f7fa fbe8 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCpowder_GPIO_Port[i][EN], PD_DCpowder_Pin[i][EN], GPIO_PIN_RESET);
 80075d4:	79fa      	ldrb	r2, [r7, #7]
 80075d6:	4966      	ldr	r1, [pc, #408]	; (8007770 <init_powderMachine+0x204>)
 80075d8:	4613      	mov	r3, r2
 80075da:	005b      	lsls	r3, r3, #1
 80075dc:	4413      	add	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	440b      	add	r3, r1
 80075e2:	6818      	ldr	r0, [r3, #0]
 80075e4:	79fa      	ldrb	r2, [r7, #7]
 80075e6:	4963      	ldr	r1, [pc, #396]	; (8007774 <init_powderMachine+0x208>)
 80075e8:	4613      	mov	r3, r2
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2200      	movs	r2, #0
 80075f8:	4619      	mov	r1, r3
 80075fa:	f7fa fbd3 	bl	8001da4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i<sizeof(PD_DCpowder_GPIO_Port) / sizeof(PD_DCpowder_GPIO_Port[0]); i++){
 80075fe:	79fb      	ldrb	r3, [r7, #7]
 8007600:	3301      	adds	r3, #1
 8007602:	71fb      	strb	r3, [r7, #7]
 8007604:	79fb      	ldrb	r3, [r7, #7]
 8007606:	2b04      	cmp	r3, #4
 8007608:	d9b6      	bls.n	8007578 <init_powderMachine+0xc>
	}

	// init DCmix motor direction & disable motor
	for(uint8_t i = 0; i<sizeof(PD_DCmix_GPIO_Port) / sizeof(PD_DCmix_GPIO_Port[0]); i++){
 800760a:	2300      	movs	r3, #0
 800760c:	71bb      	strb	r3, [r7, #6]
 800760e:	e045      	b.n	800769c <init_powderMachine+0x130>
		HAL_GPIO_WritePin(PD_DCmix_GPIO_Port[i][IN1], PD_DCmix_Pin[i][IN1], GPIO_PIN_SET);
 8007610:	79ba      	ldrb	r2, [r7, #6]
 8007612:	4959      	ldr	r1, [pc, #356]	; (8007778 <init_powderMachine+0x20c>)
 8007614:	4613      	mov	r3, r2
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	4413      	add	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	440b      	add	r3, r1
 800761e:	3304      	adds	r3, #4
 8007620:	6818      	ldr	r0, [r3, #0]
 8007622:	79ba      	ldrb	r2, [r7, #6]
 8007624:	4955      	ldr	r1, [pc, #340]	; (800777c <init_powderMachine+0x210>)
 8007626:	4613      	mov	r3, r2
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	440b      	add	r3, r1
 8007630:	3304      	adds	r3, #4
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	b29b      	uxth	r3, r3
 8007636:	2201      	movs	r2, #1
 8007638:	4619      	mov	r1, r3
 800763a:	f7fa fbb3 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCmix_GPIO_Port[i][IN2], PD_DCmix_Pin[i][IN2], GPIO_PIN_RESET);
 800763e:	79ba      	ldrb	r2, [r7, #6]
 8007640:	494d      	ldr	r1, [pc, #308]	; (8007778 <init_powderMachine+0x20c>)
 8007642:	4613      	mov	r3, r2
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	4413      	add	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	440b      	add	r3, r1
 800764c:	3308      	adds	r3, #8
 800764e:	6818      	ldr	r0, [r3, #0]
 8007650:	79ba      	ldrb	r2, [r7, #6]
 8007652:	494a      	ldr	r1, [pc, #296]	; (800777c <init_powderMachine+0x210>)
 8007654:	4613      	mov	r3, r2
 8007656:	005b      	lsls	r3, r3, #1
 8007658:	4413      	add	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	440b      	add	r3, r1
 800765e:	3308      	adds	r3, #8
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	b29b      	uxth	r3, r3
 8007664:	2200      	movs	r2, #0
 8007666:	4619      	mov	r1, r3
 8007668:	f7fa fb9c 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCmix_GPIO_Port[i][EN], PD_DCmix_Pin[i][EN], GPIO_PIN_RESET);
 800766c:	79ba      	ldrb	r2, [r7, #6]
 800766e:	4942      	ldr	r1, [pc, #264]	; (8007778 <init_powderMachine+0x20c>)
 8007670:	4613      	mov	r3, r2
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	4413      	add	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	440b      	add	r3, r1
 800767a:	6818      	ldr	r0, [r3, #0]
 800767c:	79ba      	ldrb	r2, [r7, #6]
 800767e:	493f      	ldr	r1, [pc, #252]	; (800777c <init_powderMachine+0x210>)
 8007680:	4613      	mov	r3, r2
 8007682:	005b      	lsls	r3, r3, #1
 8007684:	4413      	add	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	440b      	add	r3, r1
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	b29b      	uxth	r3, r3
 800768e:	2200      	movs	r2, #0
 8007690:	4619      	mov	r1, r3
 8007692:	f7fa fb87 	bl	8001da4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i<sizeof(PD_DCmix_GPIO_Port) / sizeof(PD_DCmix_GPIO_Port[0]); i++){
 8007696:	79bb      	ldrb	r3, [r7, #6]
 8007698:	3301      	adds	r3, #1
 800769a:	71bb      	strb	r3, [r7, #6]
 800769c:	79bb      	ldrb	r3, [r7, #6]
 800769e:	2b04      	cmp	r3, #4
 80076a0:	d9b6      	bls.n	8007610 <init_powderMachine+0xa4>
	}

	// init heater motor direction
	for(uint8_t i = 0; i<sizeof(heat_GPIO_Port) / sizeof(heat_GPIO_Port[0]); i++){
 80076a2:	2300      	movs	r3, #0
 80076a4:	717b      	strb	r3, [r7, #5]
 80076a6:	e030      	b.n	800770a <init_powderMachine+0x19e>
		HAL_GPIO_WritePin(heat_GPIO_Port[i][IN1], heat_Pin[i][IN1], GPIO_PIN_SET);
 80076a8:	797a      	ldrb	r2, [r7, #5]
 80076aa:	4935      	ldr	r1, [pc, #212]	; (8007780 <init_powderMachine+0x214>)
 80076ac:	4613      	mov	r3, r2
 80076ae:	005b      	lsls	r3, r3, #1
 80076b0:	4413      	add	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	440b      	add	r3, r1
 80076b6:	3304      	adds	r3, #4
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	797a      	ldrb	r2, [r7, #5]
 80076bc:	4931      	ldr	r1, [pc, #196]	; (8007784 <init_powderMachine+0x218>)
 80076be:	4613      	mov	r3, r2
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	4413      	add	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	440b      	add	r3, r1
 80076c8:	3304      	adds	r3, #4
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	2201      	movs	r2, #1
 80076d0:	4619      	mov	r1, r3
 80076d2:	f7fa fb67 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(heat_GPIO_Port[i][IN2], heat_Pin[i][IN2], GPIO_PIN_RESET);
 80076d6:	797a      	ldrb	r2, [r7, #5]
 80076d8:	4929      	ldr	r1, [pc, #164]	; (8007780 <init_powderMachine+0x214>)
 80076da:	4613      	mov	r3, r2
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	4413      	add	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	440b      	add	r3, r1
 80076e4:	3308      	adds	r3, #8
 80076e6:	6818      	ldr	r0, [r3, #0]
 80076e8:	797a      	ldrb	r2, [r7, #5]
 80076ea:	4926      	ldr	r1, [pc, #152]	; (8007784 <init_powderMachine+0x218>)
 80076ec:	4613      	mov	r3, r2
 80076ee:	005b      	lsls	r3, r3, #1
 80076f0:	4413      	add	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	440b      	add	r3, r1
 80076f6:	3308      	adds	r3, #8
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	2200      	movs	r2, #0
 80076fe:	4619      	mov	r1, r3
 8007700:	f7fa fb50 	bl	8001da4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i<sizeof(heat_GPIO_Port) / sizeof(heat_GPIO_Port[0]); i++){
 8007704:	797b      	ldrb	r3, [r7, #5]
 8007706:	3301      	adds	r3, #1
 8007708:	717b      	strb	r3, [r7, #5]
 800770a:	797b      	ldrb	r3, [r7, #5]
 800770c:	2b05      	cmp	r3, #5
 800770e:	d9cb      	bls.n	80076a8 <init_powderMachine+0x13c>
	}

	// init PWM
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //PD01_heat
 8007710:	2108      	movs	r1, #8
 8007712:	481d      	ldr	r0, [pc, #116]	; (8007788 <init_powderMachine+0x21c>)
 8007714:	f7fb f9ac 	bl	8002a70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //PD02_heat
 8007718:	210c      	movs	r1, #12
 800771a:	481b      	ldr	r0, [pc, #108]	; (8007788 <init_powderMachine+0x21c>)
 800771c:	f7fb f9a8 	bl	8002a70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //PD03_heat
 8007720:	2100      	movs	r1, #0
 8007722:	481a      	ldr	r0, [pc, #104]	; (800778c <init_powderMachine+0x220>)
 8007724:	f7fb f9a4 	bl	8002a70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //PD04_heat
 8007728:	2104      	movs	r1, #4
 800772a:	4817      	ldr	r0, [pc, #92]	; (8007788 <init_powderMachine+0x21c>)
 800772c:	f7fb f9a0 	bl	8002a70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //PD05_heat
 8007730:	2104      	movs	r1, #4
 8007732:	4816      	ldr	r0, [pc, #88]	; (800778c <init_powderMachine+0x220>)
 8007734:	f7fb f99c 	bl	8002a70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //CF01_heat
 8007738:	2108      	movs	r1, #8
 800773a:	4813      	ldr	r0, [pc, #76]	; (8007788 <init_powderMachine+0x21c>)
 800773c:	f7fb f998 	bl	8002a70 <HAL_TIM_PWM_Start>

	// motor stop
	TIM4->CCR3 = HEATER_MOTOR_STOP;
 8007740:	4b13      	ldr	r3, [pc, #76]	; (8007790 <init_powderMachine+0x224>)
 8007742:	2200      	movs	r2, #0
 8007744:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = HEATER_MOTOR_STOP;
 8007746:	4b12      	ldr	r3, [pc, #72]	; (8007790 <init_powderMachine+0x224>)
 8007748:	2200      	movs	r2, #0
 800774a:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR1 = HEATER_MOTOR_STOP;
 800774c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007750:	2200      	movs	r2, #0
 8007752:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = HEATER_MOTOR_STOP;
 8007754:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <init_powderMachine+0x224>)
 8007756:	2200      	movs	r2, #0
 8007758:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR2 = HEATER_MOTOR_STOP;
 800775a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800775e:	2200      	movs	r2, #0
 8007760:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = HEATER_MOTOR_STOP;
 8007762:	4b0b      	ldr	r3, [pc, #44]	; (8007790 <init_powderMachine+0x224>)
 8007764:	2200      	movs	r2, #0
 8007766:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007768:	bf00      	nop
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	20000010 	.word	0x20000010
 8007774:	200000d0 	.word	0x200000d0
 8007778:	2000004c 	.word	0x2000004c
 800777c:	2000010c 	.word	0x2000010c
 8007780:	20000088 	.word	0x20000088
 8007784:	20000148 	.word	0x20000148
 8007788:	20004c14 	.word	0x20004c14
 800778c:	20004dc0 	.word	0x20004dc0
 8007790:	40000800 	.word	0x40000800

08007794 <HAL_UART_RxCpltCallback>:

bool 	is_running[OFFSET] 				= {false, false};
char uartBuf[4000];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a2d      	ldr	r2, [pc, #180]	; (8007858 <HAL_UART_RxCpltCallback+0xc4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d105      	bne.n	80077b2 <HAL_UART_RxCpltCallback+0x1e>
	{
//		HAL_UART_Transmit(&huart3, cupD_res_packet, sizeof(cupD_res_packet), 100);
	    HAL_UART_Receive_IT(&huart3, pc_res_packet, sizeof(pc_res_packet));
 80077a6:	220a      	movs	r2, #10
 80077a8:	492c      	ldr	r1, [pc, #176]	; (800785c <HAL_UART_RxCpltCallback+0xc8>)
 80077aa:	482d      	ldr	r0, [pc, #180]	; (8007860 <HAL_UART_RxCpltCallback+0xcc>)
 80077ac:	f7fc fa33 	bl	8003c16 <HAL_UART_Receive_IT>
		if (LidD_res_packet[RES_PACKET_BCC] == chksum)
			printf("check sus error!");

//	    HAL_UART_Receive_IT(&huart6, LidD_res_packet, sizeof(LidD_res_packet));
	}
}
 80077b0:	e04e      	b.n	8007850 <HAL_UART_RxCpltCallback+0xbc>
	else if (huart->Instance == UART5)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a2b      	ldr	r2, [pc, #172]	; (8007864 <HAL_UART_RxCpltCallback+0xd0>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d122      	bne.n	8007802 <HAL_UART_RxCpltCallback+0x6e>
		HAL_UART_Transmit(&huart3, cupD_res_packet, sizeof(cupD_res_packet), 100);
 80077bc:	2364      	movs	r3, #100	; 0x64
 80077be:	220b      	movs	r2, #11
 80077c0:	4929      	ldr	r1, [pc, #164]	; (8007868 <HAL_UART_RxCpltCallback+0xd4>)
 80077c2:	4827      	ldr	r0, [pc, #156]	; (8007860 <HAL_UART_RxCpltCallback+0xcc>)
 80077c4:	f7fc f995 	bl	8003af2 <HAL_UART_Transmit>
		int chksum = 0x00;
 80077c8:	2300      	movs	r3, #0
 80077ca:	617b      	str	r3, [r7, #20]
		for(int i=1; i<RES_PACKET_BCC; i++){
 80077cc:	2301      	movs	r3, #1
 80077ce:	613b      	str	r3, [r7, #16]
 80077d0:	e00a      	b.n	80077e8 <HAL_UART_RxCpltCallback+0x54>
			chksum += cupD_res_packet[i];
 80077d2:	4a25      	ldr	r2, [pc, #148]	; (8007868 <HAL_UART_RxCpltCallback+0xd4>)
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	4413      	add	r3, r2
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	4413      	add	r3, r2
 80077e0:	617b      	str	r3, [r7, #20]
		for(int i=1; i<RES_PACKET_BCC; i++){
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	3301      	adds	r3, #1
 80077e6:	613b      	str	r3, [r7, #16]
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	2b09      	cmp	r3, #9
 80077ec:	ddf1      	ble.n	80077d2 <HAL_UART_RxCpltCallback+0x3e>
		if (cupD_res_packet[RES_PACKET_BCC] == chksum)
 80077ee:	4b1e      	ldr	r3, [pc, #120]	; (8007868 <HAL_UART_RxCpltCallback+0xd4>)
 80077f0:	7a9b      	ldrb	r3, [r3, #10]
 80077f2:	461a      	mov	r2, r3
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d12a      	bne.n	8007850 <HAL_UART_RxCpltCallback+0xbc>
			printf("check sus error!");
 80077fa:	481c      	ldr	r0, [pc, #112]	; (800786c <HAL_UART_RxCpltCallback+0xd8>)
 80077fc:	f000 fa8e 	bl	8007d1c <iprintf>
}
 8007800:	e026      	b.n	8007850 <HAL_UART_RxCpltCallback+0xbc>
	else if (huart->Instance == USART6)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a1a      	ldr	r2, [pc, #104]	; (8007870 <HAL_UART_RxCpltCallback+0xdc>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d121      	bne.n	8007850 <HAL_UART_RxCpltCallback+0xbc>
		HAL_UART_Transmit(&huart3, LidD_res_packet, sizeof(LidD_res_packet), 100);
 800780c:	2364      	movs	r3, #100	; 0x64
 800780e:	220b      	movs	r2, #11
 8007810:	4918      	ldr	r1, [pc, #96]	; (8007874 <HAL_UART_RxCpltCallback+0xe0>)
 8007812:	4813      	ldr	r0, [pc, #76]	; (8007860 <HAL_UART_RxCpltCallback+0xcc>)
 8007814:	f7fc f96d 	bl	8003af2 <HAL_UART_Transmit>
		int chksum = 0x00;
 8007818:	2300      	movs	r3, #0
 800781a:	60fb      	str	r3, [r7, #12]
		for(int i=1; i<RES_PACKET_BCC; i++){
 800781c:	2301      	movs	r3, #1
 800781e:	60bb      	str	r3, [r7, #8]
 8007820:	e00a      	b.n	8007838 <HAL_UART_RxCpltCallback+0xa4>
			chksum += LidD_res_packet[i];
 8007822:	4a14      	ldr	r2, [pc, #80]	; (8007874 <HAL_UART_RxCpltCallback+0xe0>)
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	4413      	add	r3, r2
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4413      	add	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]
		for(int i=1; i<RES_PACKET_BCC; i++){
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	3301      	adds	r3, #1
 8007836:	60bb      	str	r3, [r7, #8]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2b09      	cmp	r3, #9
 800783c:	ddf1      	ble.n	8007822 <HAL_UART_RxCpltCallback+0x8e>
		if (LidD_res_packet[RES_PACKET_BCC] == chksum)
 800783e:	4b0d      	ldr	r3, [pc, #52]	; (8007874 <HAL_UART_RxCpltCallback+0xe0>)
 8007840:	7a9b      	ldrb	r3, [r3, #10]
 8007842:	461a      	mov	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	4293      	cmp	r3, r2
 8007848:	d102      	bne.n	8007850 <HAL_UART_RxCpltCallback+0xbc>
			printf("check sus error!");
 800784a:	4808      	ldr	r0, [pc, #32]	; (800786c <HAL_UART_RxCpltCallback+0xd8>)
 800784c:	f000 fa66 	bl	8007d1c <iprintf>
}
 8007850:	bf00      	nop
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	40004800 	.word	0x40004800
 800785c:	20000210 	.word	0x20000210
 8007860:	20004c5c 	.word	0x20004c5c
 8007864:	40005000 	.word	0x40005000
 8007868:	2000021c 	.word	0x2000021c
 800786c:	08008b8c 	.word	0x08008b8c
 8007870:	40011400 	.word	0x40011400
 8007874:	20000228 	.word	0x20000228

08007878 <initCupLidDispensor>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
}

void initCupLidDispensor(void)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);
 800787c:	4802      	ldr	r0, [pc, #8]	; (8007888 <initCupLidDispensor+0x10>)
 800787e:	f7fa ffc5 	bl	800280c <HAL_TIM_Base_Start>
}
 8007882:	bf00      	nop
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	20004d30 	.word	0x20004d30

0800788c <init_iceDispensor>:


#include "User_IceDispenser.h"

void init_iceDispensor(void)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICE01_relay_GPIO_Port, ICE01_relay_Pin, GPIO_PIN_SET);	// Relay Open
 8007890:	2201      	movs	r2, #1
 8007892:	2180      	movs	r1, #128	; 0x80
 8007894:	480b      	ldr	r0, [pc, #44]	; (80078c4 <init_iceDispensor+0x38>)
 8007896:	f7fa fa85 	bl	8001da4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ICE01_water_GPIO_Port, ICE01_water_Pin, GPIO_PIN_SET);
 800789a:	2201      	movs	r2, #1
 800789c:	2101      	movs	r1, #1
 800789e:	480a      	ldr	r0, [pc, #40]	; (80078c8 <init_iceDispensor+0x3c>)
 80078a0:	f7fa fa80 	bl	8001da4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICE01_ice_GPIO_Port, ICE01_ice_Pin, GPIO_PIN_SET);
 80078a4:	2201      	movs	r2, #1
 80078a6:	2108      	movs	r1, #8
 80078a8:	4808      	ldr	r0, [pc, #32]	; (80078cc <init_iceDispensor+0x40>)
 80078aa:	f7fa fa7b 	bl	8001da4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICE01_mix_GPIO_Port, ICE01_mix_Pin, GPIO_PIN_SET);
 80078ae:	2201      	movs	r2, #1
 80078b0:	2108      	movs	r1, #8
 80078b2:	4805      	ldr	r0, [pc, #20]	; (80078c8 <init_iceDispensor+0x3c>)
 80078b4:	f7fa fa76 	bl	8001da4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80078b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80078bc:	f7f9 ff2e 	bl	800171c <HAL_Delay>
}
 80078c0:	bf00      	nop
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	40020c00 	.word	0x40020c00
 80078c8:	40020800 	.word	0x40020800
 80078cc:	40020000 	.word	0x40020000

080078d0 <lever_control>:

void lever_control(uint32_t exit_time)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
	// lever on
	HAL_GPIO_WritePin(ICE01_relay_GPIO_Port, ICE01_relay_Pin, GPIO_PIN_RESET);	// Relay Close
 80078d8:	2200      	movs	r2, #0
 80078da:	2180      	movs	r1, #128	; 0x80
 80078dc:	4807      	ldr	r0, [pc, #28]	; (80078fc <lever_control+0x2c>)
 80078de:	f7fa fa61 	bl	8001da4 <HAL_GPIO_WritePin>
	HAL_Delay(exit_time); // unit : ms
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7f9 ff1a 	bl	800171c <HAL_Delay>

	// lever off
	HAL_GPIO_WritePin(ICE01_relay_GPIO_Port, ICE01_relay_Pin, GPIO_PIN_SET);	// Relay Open
 80078e8:	2201      	movs	r2, #1
 80078ea:	2180      	movs	r1, #128	; 0x80
 80078ec:	4803      	ldr	r0, [pc, #12]	; (80078fc <lever_control+0x2c>)
 80078ee:	f7fa fa59 	bl	8001da4 <HAL_GPIO_WritePin>
}
 80078f2:	bf00      	nop
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	40020c00 	.word	0x40020c00

08007900 <iceDispenser_SetMode>:

void iceDispenser_SetMode(uint16_t water_time, uint16_t ice_time)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	4603      	mov	r3, r0
 8007908:	460a      	mov	r2, r1
 800790a:	80fb      	strh	r3, [r7, #6]
 800790c:	4613      	mov	r3, r2
 800790e:	80bb      	strh	r3, [r7, #4]
	uint16_t wait_time = 500; // 5sec
 8007910:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007914:	81fb      	strh	r3, [r7, #14]

	if(ice_time == 0){
 8007916:	88bb      	ldrh	r3, [r7, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d111      	bne.n	8007940 <iceDispenser_SetMode+0x40>
		HAL_GPIO_WritePin(ICE01_water_GPIO_Port, ICE01_water_Pin, GPIO_PIN_RESET);
 800791c:	2200      	movs	r2, #0
 800791e:	2101      	movs	r1, #1
 8007920:	481c      	ldr	r0, [pc, #112]	; (8007994 <iceDispenser_SetMode+0x94>)
 8007922:	f7fa fa3f 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_Delay(wait_time);
 8007926:	89fb      	ldrh	r3, [r7, #14]
 8007928:	4618      	mov	r0, r3
 800792a:	f7f9 fef7 	bl	800171c <HAL_Delay>
		HAL_GPIO_WritePin(ICE01_water_GPIO_Port, ICE01_water_Pin, GPIO_PIN_SET);
 800792e:	2201      	movs	r2, #1
 8007930:	2101      	movs	r1, #1
 8007932:	4818      	ldr	r0, [pc, #96]	; (8007994 <iceDispenser_SetMode+0x94>)
 8007934:	f7fa fa36 	bl	8001da4 <HAL_GPIO_WritePin>
		printf("mode : water\n");
 8007938:	4817      	ldr	r0, [pc, #92]	; (8007998 <iceDispenser_SetMode+0x98>)
 800793a:	f000 fa75 	bl	8007e28 <puts>
		HAL_GPIO_WritePin(ICE01_mix_GPIO_Port, ICE01_mix_Pin, GPIO_PIN_RESET);
		HAL_Delay(wait_time);
		HAL_GPIO_WritePin(ICE01_mix_GPIO_Port, ICE01_mix_Pin, GPIO_PIN_SET);
		printf("mode : mix\n");
	}
}
 800793e:	e025      	b.n	800798c <iceDispenser_SetMode+0x8c>
	else if(water_time == 0){
 8007940:	88fb      	ldrh	r3, [r7, #6]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d111      	bne.n	800796a <iceDispenser_SetMode+0x6a>
		HAL_GPIO_WritePin(ICE01_ice_GPIO_Port, ICE01_ice_Pin, GPIO_PIN_RESET);
 8007946:	2200      	movs	r2, #0
 8007948:	2108      	movs	r1, #8
 800794a:	4814      	ldr	r0, [pc, #80]	; (800799c <iceDispenser_SetMode+0x9c>)
 800794c:	f7fa fa2a 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_Delay(wait_time);
 8007950:	89fb      	ldrh	r3, [r7, #14]
 8007952:	4618      	mov	r0, r3
 8007954:	f7f9 fee2 	bl	800171c <HAL_Delay>
		HAL_GPIO_WritePin(ICE01_ice_GPIO_Port, ICE01_ice_Pin, GPIO_PIN_SET);
 8007958:	2201      	movs	r2, #1
 800795a:	2108      	movs	r1, #8
 800795c:	480f      	ldr	r0, [pc, #60]	; (800799c <iceDispenser_SetMode+0x9c>)
 800795e:	f7fa fa21 	bl	8001da4 <HAL_GPIO_WritePin>
		printf("mode : ice\n");
 8007962:	480f      	ldr	r0, [pc, #60]	; (80079a0 <iceDispenser_SetMode+0xa0>)
 8007964:	f000 fa60 	bl	8007e28 <puts>
}
 8007968:	e010      	b.n	800798c <iceDispenser_SetMode+0x8c>
		HAL_GPIO_WritePin(ICE01_mix_GPIO_Port, ICE01_mix_Pin, GPIO_PIN_RESET);
 800796a:	2200      	movs	r2, #0
 800796c:	2108      	movs	r1, #8
 800796e:	4809      	ldr	r0, [pc, #36]	; (8007994 <iceDispenser_SetMode+0x94>)
 8007970:	f7fa fa18 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_Delay(wait_time);
 8007974:	89fb      	ldrh	r3, [r7, #14]
 8007976:	4618      	mov	r0, r3
 8007978:	f7f9 fed0 	bl	800171c <HAL_Delay>
		HAL_GPIO_WritePin(ICE01_mix_GPIO_Port, ICE01_mix_Pin, GPIO_PIN_SET);
 800797c:	2201      	movs	r2, #1
 800797e:	2108      	movs	r1, #8
 8007980:	4804      	ldr	r0, [pc, #16]	; (8007994 <iceDispenser_SetMode+0x94>)
 8007982:	f7fa fa0f 	bl	8001da4 <HAL_GPIO_WritePin>
		printf("mode : mix\n");
 8007986:	4807      	ldr	r0, [pc, #28]	; (80079a4 <iceDispenser_SetMode+0xa4>)
 8007988:	f000 fa4e 	bl	8007e28 <puts>
}
 800798c:	bf00      	nop
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	40020800 	.word	0x40020800
 8007998:	08008bd0 	.word	0x08008bd0
 800799c:	40020000 	.word	0x40020000
 80079a0:	08008be0 	.word	0x08008be0
 80079a4:	08008bec 	.word	0x08008bec

080079a8 <startExit>:
{
	return ERROR;
}

bool startExit(uint32_t water_time, uint32_t ice_time)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
	// set mode - ice, water, mix
	iceDispenser_SetMode(water_time, ice_time);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	b292      	uxth	r2, r2
 80079ba:	4611      	mov	r1, r2
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff ff9f 	bl	8007900 <iceDispenser_SetMode>

	// set exit time
	uint32_t exit_time = 0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]
	if(water_time > ice_time)
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d902      	bls.n	80079d4 <startExit+0x2c>
		exit_time = water_time;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	60fb      	str	r3, [r7, #12]
 80079d2:	e001      	b.n	80079d8 <startExit+0x30>
	else
		exit_time = ice_time;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	60fb      	str	r3, [r7, #12]
	printf("exit_time : %d\n", exit_time);
 80079d8:	68f9      	ldr	r1, [r7, #12]
 80079da:	4805      	ldr	r0, [pc, #20]	; (80079f0 <startExit+0x48>)
 80079dc:	f000 f99e 	bl	8007d1c <iprintf>

	// lever control
	lever_control(exit_time);
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f7ff ff75 	bl	80078d0 <lever_control>

	return true;
 80079e6:	2301      	movs	r3, #1
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	08008bf8 	.word	0x08008bf8

080079f4 <__errno>:
 80079f4:	4b01      	ldr	r3, [pc, #4]	; (80079fc <__errno+0x8>)
 80079f6:	6818      	ldr	r0, [r3, #0]
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	20000190 	.word	0x20000190

08007a00 <std>:
 8007a00:	2300      	movs	r3, #0
 8007a02:	b510      	push	{r4, lr}
 8007a04:	4604      	mov	r4, r0
 8007a06:	e9c0 3300 	strd	r3, r3, [r0]
 8007a0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a0e:	6083      	str	r3, [r0, #8]
 8007a10:	8181      	strh	r1, [r0, #12]
 8007a12:	6643      	str	r3, [r0, #100]	; 0x64
 8007a14:	81c2      	strh	r2, [r0, #14]
 8007a16:	6183      	str	r3, [r0, #24]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	2208      	movs	r2, #8
 8007a1c:	305c      	adds	r0, #92	; 0x5c
 8007a1e:	f000 f91a 	bl	8007c56 <memset>
 8007a22:	4b05      	ldr	r3, [pc, #20]	; (8007a38 <std+0x38>)
 8007a24:	6263      	str	r3, [r4, #36]	; 0x24
 8007a26:	4b05      	ldr	r3, [pc, #20]	; (8007a3c <std+0x3c>)
 8007a28:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a2a:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <std+0x40>)
 8007a2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a2e:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <std+0x44>)
 8007a30:	6224      	str	r4, [r4, #32]
 8007a32:	6323      	str	r3, [r4, #48]	; 0x30
 8007a34:	bd10      	pop	{r4, pc}
 8007a36:	bf00      	nop
 8007a38:	08007f2d 	.word	0x08007f2d
 8007a3c:	08007f4f 	.word	0x08007f4f
 8007a40:	08007f87 	.word	0x08007f87
 8007a44:	08007fab 	.word	0x08007fab

08007a48 <_cleanup_r>:
 8007a48:	4901      	ldr	r1, [pc, #4]	; (8007a50 <_cleanup_r+0x8>)
 8007a4a:	f000 b8af 	b.w	8007bac <_fwalk_reent>
 8007a4e:	bf00      	nop
 8007a50:	08008285 	.word	0x08008285

08007a54 <__sfmoreglue>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	1e4a      	subs	r2, r1, #1
 8007a58:	2568      	movs	r5, #104	; 0x68
 8007a5a:	4355      	muls	r5, r2
 8007a5c:	460e      	mov	r6, r1
 8007a5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a62:	f000 f901 	bl	8007c68 <_malloc_r>
 8007a66:	4604      	mov	r4, r0
 8007a68:	b140      	cbz	r0, 8007a7c <__sfmoreglue+0x28>
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	e9c0 1600 	strd	r1, r6, [r0]
 8007a70:	300c      	adds	r0, #12
 8007a72:	60a0      	str	r0, [r4, #8]
 8007a74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a78:	f000 f8ed 	bl	8007c56 <memset>
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	bd70      	pop	{r4, r5, r6, pc}

08007a80 <__sfp_lock_acquire>:
 8007a80:	4801      	ldr	r0, [pc, #4]	; (8007a88 <__sfp_lock_acquire+0x8>)
 8007a82:	f000 b8d8 	b.w	8007c36 <__retarget_lock_acquire_recursive>
 8007a86:	bf00      	nop
 8007a88:	20004e9c 	.word	0x20004e9c

08007a8c <__sfp_lock_release>:
 8007a8c:	4801      	ldr	r0, [pc, #4]	; (8007a94 <__sfp_lock_release+0x8>)
 8007a8e:	f000 b8d3 	b.w	8007c38 <__retarget_lock_release_recursive>
 8007a92:	bf00      	nop
 8007a94:	20004e9c 	.word	0x20004e9c

08007a98 <__sinit_lock_acquire>:
 8007a98:	4801      	ldr	r0, [pc, #4]	; (8007aa0 <__sinit_lock_acquire+0x8>)
 8007a9a:	f000 b8cc 	b.w	8007c36 <__retarget_lock_acquire_recursive>
 8007a9e:	bf00      	nop
 8007aa0:	20004e97 	.word	0x20004e97

08007aa4 <__sinit_lock_release>:
 8007aa4:	4801      	ldr	r0, [pc, #4]	; (8007aac <__sinit_lock_release+0x8>)
 8007aa6:	f000 b8c7 	b.w	8007c38 <__retarget_lock_release_recursive>
 8007aaa:	bf00      	nop
 8007aac:	20004e97 	.word	0x20004e97

08007ab0 <__sinit>:
 8007ab0:	b510      	push	{r4, lr}
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	f7ff fff0 	bl	8007a98 <__sinit_lock_acquire>
 8007ab8:	69a3      	ldr	r3, [r4, #24]
 8007aba:	b11b      	cbz	r3, 8007ac4 <__sinit+0x14>
 8007abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ac0:	f7ff bff0 	b.w	8007aa4 <__sinit_lock_release>
 8007ac4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ac8:	6523      	str	r3, [r4, #80]	; 0x50
 8007aca:	4b13      	ldr	r3, [pc, #76]	; (8007b18 <__sinit+0x68>)
 8007acc:	4a13      	ldr	r2, [pc, #76]	; (8007b1c <__sinit+0x6c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007ad2:	42a3      	cmp	r3, r4
 8007ad4:	bf04      	itt	eq
 8007ad6:	2301      	moveq	r3, #1
 8007ad8:	61a3      	streq	r3, [r4, #24]
 8007ada:	4620      	mov	r0, r4
 8007adc:	f000 f820 	bl	8007b20 <__sfp>
 8007ae0:	6060      	str	r0, [r4, #4]
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f000 f81c 	bl	8007b20 <__sfp>
 8007ae8:	60a0      	str	r0, [r4, #8]
 8007aea:	4620      	mov	r0, r4
 8007aec:	f000 f818 	bl	8007b20 <__sfp>
 8007af0:	2200      	movs	r2, #0
 8007af2:	60e0      	str	r0, [r4, #12]
 8007af4:	2104      	movs	r1, #4
 8007af6:	6860      	ldr	r0, [r4, #4]
 8007af8:	f7ff ff82 	bl	8007a00 <std>
 8007afc:	68a0      	ldr	r0, [r4, #8]
 8007afe:	2201      	movs	r2, #1
 8007b00:	2109      	movs	r1, #9
 8007b02:	f7ff ff7d 	bl	8007a00 <std>
 8007b06:	68e0      	ldr	r0, [r4, #12]
 8007b08:	2202      	movs	r2, #2
 8007b0a:	2112      	movs	r1, #18
 8007b0c:	f7ff ff78 	bl	8007a00 <std>
 8007b10:	2301      	movs	r3, #1
 8007b12:	61a3      	str	r3, [r4, #24]
 8007b14:	e7d2      	b.n	8007abc <__sinit+0xc>
 8007b16:	bf00      	nop
 8007b18:	08008cec 	.word	0x08008cec
 8007b1c:	08007a49 	.word	0x08007a49

08007b20 <__sfp>:
 8007b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b22:	4607      	mov	r7, r0
 8007b24:	f7ff ffac 	bl	8007a80 <__sfp_lock_acquire>
 8007b28:	4b1e      	ldr	r3, [pc, #120]	; (8007ba4 <__sfp+0x84>)
 8007b2a:	681e      	ldr	r6, [r3, #0]
 8007b2c:	69b3      	ldr	r3, [r6, #24]
 8007b2e:	b913      	cbnz	r3, 8007b36 <__sfp+0x16>
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7ff ffbd 	bl	8007ab0 <__sinit>
 8007b36:	3648      	adds	r6, #72	; 0x48
 8007b38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	d503      	bpl.n	8007b48 <__sfp+0x28>
 8007b40:	6833      	ldr	r3, [r6, #0]
 8007b42:	b30b      	cbz	r3, 8007b88 <__sfp+0x68>
 8007b44:	6836      	ldr	r6, [r6, #0]
 8007b46:	e7f7      	b.n	8007b38 <__sfp+0x18>
 8007b48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b4c:	b9d5      	cbnz	r5, 8007b84 <__sfp+0x64>
 8007b4e:	4b16      	ldr	r3, [pc, #88]	; (8007ba8 <__sfp+0x88>)
 8007b50:	60e3      	str	r3, [r4, #12]
 8007b52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b56:	6665      	str	r5, [r4, #100]	; 0x64
 8007b58:	f000 f86c 	bl	8007c34 <__retarget_lock_init_recursive>
 8007b5c:	f7ff ff96 	bl	8007a8c <__sfp_lock_release>
 8007b60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b68:	6025      	str	r5, [r4, #0]
 8007b6a:	61a5      	str	r5, [r4, #24]
 8007b6c:	2208      	movs	r2, #8
 8007b6e:	4629      	mov	r1, r5
 8007b70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b74:	f000 f86f 	bl	8007c56 <memset>
 8007b78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b80:	4620      	mov	r0, r4
 8007b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b84:	3468      	adds	r4, #104	; 0x68
 8007b86:	e7d9      	b.n	8007b3c <__sfp+0x1c>
 8007b88:	2104      	movs	r1, #4
 8007b8a:	4638      	mov	r0, r7
 8007b8c:	f7ff ff62 	bl	8007a54 <__sfmoreglue>
 8007b90:	4604      	mov	r4, r0
 8007b92:	6030      	str	r0, [r6, #0]
 8007b94:	2800      	cmp	r0, #0
 8007b96:	d1d5      	bne.n	8007b44 <__sfp+0x24>
 8007b98:	f7ff ff78 	bl	8007a8c <__sfp_lock_release>
 8007b9c:	230c      	movs	r3, #12
 8007b9e:	603b      	str	r3, [r7, #0]
 8007ba0:	e7ee      	b.n	8007b80 <__sfp+0x60>
 8007ba2:	bf00      	nop
 8007ba4:	08008cec 	.word	0x08008cec
 8007ba8:	ffff0001 	.word	0xffff0001

08007bac <_fwalk_reent>:
 8007bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bb0:	4606      	mov	r6, r0
 8007bb2:	4688      	mov	r8, r1
 8007bb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007bb8:	2700      	movs	r7, #0
 8007bba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bbe:	f1b9 0901 	subs.w	r9, r9, #1
 8007bc2:	d505      	bpl.n	8007bd0 <_fwalk_reent+0x24>
 8007bc4:	6824      	ldr	r4, [r4, #0]
 8007bc6:	2c00      	cmp	r4, #0
 8007bc8:	d1f7      	bne.n	8007bba <_fwalk_reent+0xe>
 8007bca:	4638      	mov	r0, r7
 8007bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bd0:	89ab      	ldrh	r3, [r5, #12]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d907      	bls.n	8007be6 <_fwalk_reent+0x3a>
 8007bd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	d003      	beq.n	8007be6 <_fwalk_reent+0x3a>
 8007bde:	4629      	mov	r1, r5
 8007be0:	4630      	mov	r0, r6
 8007be2:	47c0      	blx	r8
 8007be4:	4307      	orrs	r7, r0
 8007be6:	3568      	adds	r5, #104	; 0x68
 8007be8:	e7e9      	b.n	8007bbe <_fwalk_reent+0x12>
	...

08007bec <__libc_init_array>:
 8007bec:	b570      	push	{r4, r5, r6, lr}
 8007bee:	4d0d      	ldr	r5, [pc, #52]	; (8007c24 <__libc_init_array+0x38>)
 8007bf0:	4c0d      	ldr	r4, [pc, #52]	; (8007c28 <__libc_init_array+0x3c>)
 8007bf2:	1b64      	subs	r4, r4, r5
 8007bf4:	10a4      	asrs	r4, r4, #2
 8007bf6:	2600      	movs	r6, #0
 8007bf8:	42a6      	cmp	r6, r4
 8007bfa:	d109      	bne.n	8007c10 <__libc_init_array+0x24>
 8007bfc:	4d0b      	ldr	r5, [pc, #44]	; (8007c2c <__libc_init_array+0x40>)
 8007bfe:	4c0c      	ldr	r4, [pc, #48]	; (8007c30 <__libc_init_array+0x44>)
 8007c00:	f000 ff70 	bl	8008ae4 <_init>
 8007c04:	1b64      	subs	r4, r4, r5
 8007c06:	10a4      	asrs	r4, r4, #2
 8007c08:	2600      	movs	r6, #0
 8007c0a:	42a6      	cmp	r6, r4
 8007c0c:	d105      	bne.n	8007c1a <__libc_init_array+0x2e>
 8007c0e:	bd70      	pop	{r4, r5, r6, pc}
 8007c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c14:	4798      	blx	r3
 8007c16:	3601      	adds	r6, #1
 8007c18:	e7ee      	b.n	8007bf8 <__libc_init_array+0xc>
 8007c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c1e:	4798      	blx	r3
 8007c20:	3601      	adds	r6, #1
 8007c22:	e7f2      	b.n	8007c0a <__libc_init_array+0x1e>
 8007c24:	08008d2c 	.word	0x08008d2c
 8007c28:	08008d2c 	.word	0x08008d2c
 8007c2c:	08008d2c 	.word	0x08008d2c
 8007c30:	08008d30 	.word	0x08008d30

08007c34 <__retarget_lock_init_recursive>:
 8007c34:	4770      	bx	lr

08007c36 <__retarget_lock_acquire_recursive>:
 8007c36:	4770      	bx	lr

08007c38 <__retarget_lock_release_recursive>:
 8007c38:	4770      	bx	lr

08007c3a <memcpy>:
 8007c3a:	440a      	add	r2, r1
 8007c3c:	4291      	cmp	r1, r2
 8007c3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c42:	d100      	bne.n	8007c46 <memcpy+0xc>
 8007c44:	4770      	bx	lr
 8007c46:	b510      	push	{r4, lr}
 8007c48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c50:	4291      	cmp	r1, r2
 8007c52:	d1f9      	bne.n	8007c48 <memcpy+0xe>
 8007c54:	bd10      	pop	{r4, pc}

08007c56 <memset>:
 8007c56:	4402      	add	r2, r0
 8007c58:	4603      	mov	r3, r0
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d100      	bne.n	8007c60 <memset+0xa>
 8007c5e:	4770      	bx	lr
 8007c60:	f803 1b01 	strb.w	r1, [r3], #1
 8007c64:	e7f9      	b.n	8007c5a <memset+0x4>
	...

08007c68 <_malloc_r>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	1ccd      	adds	r5, r1, #3
 8007c6c:	f025 0503 	bic.w	r5, r5, #3
 8007c70:	3508      	adds	r5, #8
 8007c72:	2d0c      	cmp	r5, #12
 8007c74:	bf38      	it	cc
 8007c76:	250c      	movcc	r5, #12
 8007c78:	2d00      	cmp	r5, #0
 8007c7a:	4606      	mov	r6, r0
 8007c7c:	db01      	blt.n	8007c82 <_malloc_r+0x1a>
 8007c7e:	42a9      	cmp	r1, r5
 8007c80:	d903      	bls.n	8007c8a <_malloc_r+0x22>
 8007c82:	230c      	movs	r3, #12
 8007c84:	6033      	str	r3, [r6, #0]
 8007c86:	2000      	movs	r0, #0
 8007c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c8a:	f000 fbad 	bl	80083e8 <__malloc_lock>
 8007c8e:	4921      	ldr	r1, [pc, #132]	; (8007d14 <_malloc_r+0xac>)
 8007c90:	680a      	ldr	r2, [r1, #0]
 8007c92:	4614      	mov	r4, r2
 8007c94:	b99c      	cbnz	r4, 8007cbe <_malloc_r+0x56>
 8007c96:	4f20      	ldr	r7, [pc, #128]	; (8007d18 <_malloc_r+0xb0>)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	b923      	cbnz	r3, 8007ca6 <_malloc_r+0x3e>
 8007c9c:	4621      	mov	r1, r4
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	f000 f934 	bl	8007f0c <_sbrk_r>
 8007ca4:	6038      	str	r0, [r7, #0]
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f000 f92f 	bl	8007f0c <_sbrk_r>
 8007cae:	1c43      	adds	r3, r0, #1
 8007cb0:	d123      	bne.n	8007cfa <_malloc_r+0x92>
 8007cb2:	230c      	movs	r3, #12
 8007cb4:	6033      	str	r3, [r6, #0]
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	f000 fb9c 	bl	80083f4 <__malloc_unlock>
 8007cbc:	e7e3      	b.n	8007c86 <_malloc_r+0x1e>
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	1b5b      	subs	r3, r3, r5
 8007cc2:	d417      	bmi.n	8007cf4 <_malloc_r+0x8c>
 8007cc4:	2b0b      	cmp	r3, #11
 8007cc6:	d903      	bls.n	8007cd0 <_malloc_r+0x68>
 8007cc8:	6023      	str	r3, [r4, #0]
 8007cca:	441c      	add	r4, r3
 8007ccc:	6025      	str	r5, [r4, #0]
 8007cce:	e004      	b.n	8007cda <_malloc_r+0x72>
 8007cd0:	6863      	ldr	r3, [r4, #4]
 8007cd2:	42a2      	cmp	r2, r4
 8007cd4:	bf0c      	ite	eq
 8007cd6:	600b      	streq	r3, [r1, #0]
 8007cd8:	6053      	strne	r3, [r2, #4]
 8007cda:	4630      	mov	r0, r6
 8007cdc:	f000 fb8a 	bl	80083f4 <__malloc_unlock>
 8007ce0:	f104 000b 	add.w	r0, r4, #11
 8007ce4:	1d23      	adds	r3, r4, #4
 8007ce6:	f020 0007 	bic.w	r0, r0, #7
 8007cea:	1ac2      	subs	r2, r0, r3
 8007cec:	d0cc      	beq.n	8007c88 <_malloc_r+0x20>
 8007cee:	1a1b      	subs	r3, r3, r0
 8007cf0:	50a3      	str	r3, [r4, r2]
 8007cf2:	e7c9      	b.n	8007c88 <_malloc_r+0x20>
 8007cf4:	4622      	mov	r2, r4
 8007cf6:	6864      	ldr	r4, [r4, #4]
 8007cf8:	e7cc      	b.n	8007c94 <_malloc_r+0x2c>
 8007cfa:	1cc4      	adds	r4, r0, #3
 8007cfc:	f024 0403 	bic.w	r4, r4, #3
 8007d00:	42a0      	cmp	r0, r4
 8007d02:	d0e3      	beq.n	8007ccc <_malloc_r+0x64>
 8007d04:	1a21      	subs	r1, r4, r0
 8007d06:	4630      	mov	r0, r6
 8007d08:	f000 f900 	bl	8007f0c <_sbrk_r>
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	d1dd      	bne.n	8007ccc <_malloc_r+0x64>
 8007d10:	e7cf      	b.n	8007cb2 <_malloc_r+0x4a>
 8007d12:	bf00      	nop
 8007d14:	20004c08 	.word	0x20004c08
 8007d18:	20004c0c 	.word	0x20004c0c

08007d1c <iprintf>:
 8007d1c:	b40f      	push	{r0, r1, r2, r3}
 8007d1e:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <iprintf+0x2c>)
 8007d20:	b513      	push	{r0, r1, r4, lr}
 8007d22:	681c      	ldr	r4, [r3, #0]
 8007d24:	b124      	cbz	r4, 8007d30 <iprintf+0x14>
 8007d26:	69a3      	ldr	r3, [r4, #24]
 8007d28:	b913      	cbnz	r3, 8007d30 <iprintf+0x14>
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f7ff fec0 	bl	8007ab0 <__sinit>
 8007d30:	ab05      	add	r3, sp, #20
 8007d32:	9a04      	ldr	r2, [sp, #16]
 8007d34:	68a1      	ldr	r1, [r4, #8]
 8007d36:	9301      	str	r3, [sp, #4]
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 fbdb 	bl	80084f4 <_vfiprintf_r>
 8007d3e:	b002      	add	sp, #8
 8007d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d44:	b004      	add	sp, #16
 8007d46:	4770      	bx	lr
 8007d48:	20000190 	.word	0x20000190

08007d4c <_puts_r>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	460e      	mov	r6, r1
 8007d50:	4605      	mov	r5, r0
 8007d52:	b118      	cbz	r0, 8007d5c <_puts_r+0x10>
 8007d54:	6983      	ldr	r3, [r0, #24]
 8007d56:	b90b      	cbnz	r3, 8007d5c <_puts_r+0x10>
 8007d58:	f7ff feaa 	bl	8007ab0 <__sinit>
 8007d5c:	69ab      	ldr	r3, [r5, #24]
 8007d5e:	68ac      	ldr	r4, [r5, #8]
 8007d60:	b913      	cbnz	r3, 8007d68 <_puts_r+0x1c>
 8007d62:	4628      	mov	r0, r5
 8007d64:	f7ff fea4 	bl	8007ab0 <__sinit>
 8007d68:	4b2c      	ldr	r3, [pc, #176]	; (8007e1c <_puts_r+0xd0>)
 8007d6a:	429c      	cmp	r4, r3
 8007d6c:	d120      	bne.n	8007db0 <_puts_r+0x64>
 8007d6e:	686c      	ldr	r4, [r5, #4]
 8007d70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d72:	07db      	lsls	r3, r3, #31
 8007d74:	d405      	bmi.n	8007d82 <_puts_r+0x36>
 8007d76:	89a3      	ldrh	r3, [r4, #12]
 8007d78:	0598      	lsls	r0, r3, #22
 8007d7a:	d402      	bmi.n	8007d82 <_puts_r+0x36>
 8007d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d7e:	f7ff ff5a 	bl	8007c36 <__retarget_lock_acquire_recursive>
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	0719      	lsls	r1, r3, #28
 8007d86:	d51d      	bpl.n	8007dc4 <_puts_r+0x78>
 8007d88:	6923      	ldr	r3, [r4, #16]
 8007d8a:	b1db      	cbz	r3, 8007dc4 <_puts_r+0x78>
 8007d8c:	3e01      	subs	r6, #1
 8007d8e:	68a3      	ldr	r3, [r4, #8]
 8007d90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d94:	3b01      	subs	r3, #1
 8007d96:	60a3      	str	r3, [r4, #8]
 8007d98:	bb39      	cbnz	r1, 8007dea <_puts_r+0x9e>
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	da38      	bge.n	8007e10 <_puts_r+0xc4>
 8007d9e:	4622      	mov	r2, r4
 8007da0:	210a      	movs	r1, #10
 8007da2:	4628      	mov	r0, r5
 8007da4:	f000 f906 	bl	8007fb4 <__swbuf_r>
 8007da8:	3001      	adds	r0, #1
 8007daa:	d011      	beq.n	8007dd0 <_puts_r+0x84>
 8007dac:	250a      	movs	r5, #10
 8007dae:	e011      	b.n	8007dd4 <_puts_r+0x88>
 8007db0:	4b1b      	ldr	r3, [pc, #108]	; (8007e20 <_puts_r+0xd4>)
 8007db2:	429c      	cmp	r4, r3
 8007db4:	d101      	bne.n	8007dba <_puts_r+0x6e>
 8007db6:	68ac      	ldr	r4, [r5, #8]
 8007db8:	e7da      	b.n	8007d70 <_puts_r+0x24>
 8007dba:	4b1a      	ldr	r3, [pc, #104]	; (8007e24 <_puts_r+0xd8>)
 8007dbc:	429c      	cmp	r4, r3
 8007dbe:	bf08      	it	eq
 8007dc0:	68ec      	ldreq	r4, [r5, #12]
 8007dc2:	e7d5      	b.n	8007d70 <_puts_r+0x24>
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f000 f958 	bl	800807c <__swsetup_r>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d0dd      	beq.n	8007d8c <_puts_r+0x40>
 8007dd0:	f04f 35ff 	mov.w	r5, #4294967295
 8007dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dd6:	07da      	lsls	r2, r3, #31
 8007dd8:	d405      	bmi.n	8007de6 <_puts_r+0x9a>
 8007dda:	89a3      	ldrh	r3, [r4, #12]
 8007ddc:	059b      	lsls	r3, r3, #22
 8007dde:	d402      	bmi.n	8007de6 <_puts_r+0x9a>
 8007de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007de2:	f7ff ff29 	bl	8007c38 <__retarget_lock_release_recursive>
 8007de6:	4628      	mov	r0, r5
 8007de8:	bd70      	pop	{r4, r5, r6, pc}
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	da04      	bge.n	8007df8 <_puts_r+0xac>
 8007dee:	69a2      	ldr	r2, [r4, #24]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	dc06      	bgt.n	8007e02 <_puts_r+0xb6>
 8007df4:	290a      	cmp	r1, #10
 8007df6:	d004      	beq.n	8007e02 <_puts_r+0xb6>
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	1c5a      	adds	r2, r3, #1
 8007dfc:	6022      	str	r2, [r4, #0]
 8007dfe:	7019      	strb	r1, [r3, #0]
 8007e00:	e7c5      	b.n	8007d8e <_puts_r+0x42>
 8007e02:	4622      	mov	r2, r4
 8007e04:	4628      	mov	r0, r5
 8007e06:	f000 f8d5 	bl	8007fb4 <__swbuf_r>
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d1bf      	bne.n	8007d8e <_puts_r+0x42>
 8007e0e:	e7df      	b.n	8007dd0 <_puts_r+0x84>
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	250a      	movs	r5, #10
 8007e14:	1c5a      	adds	r2, r3, #1
 8007e16:	6022      	str	r2, [r4, #0]
 8007e18:	701d      	strb	r5, [r3, #0]
 8007e1a:	e7db      	b.n	8007dd4 <_puts_r+0x88>
 8007e1c:	08008cac 	.word	0x08008cac
 8007e20:	08008ccc 	.word	0x08008ccc
 8007e24:	08008c8c 	.word	0x08008c8c

08007e28 <puts>:
 8007e28:	4b02      	ldr	r3, [pc, #8]	; (8007e34 <puts+0xc>)
 8007e2a:	4601      	mov	r1, r0
 8007e2c:	6818      	ldr	r0, [r3, #0]
 8007e2e:	f7ff bf8d 	b.w	8007d4c <_puts_r>
 8007e32:	bf00      	nop
 8007e34:	20000190 	.word	0x20000190

08007e38 <cleanup_glue>:
 8007e38:	b538      	push	{r3, r4, r5, lr}
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	6809      	ldr	r1, [r1, #0]
 8007e3e:	4605      	mov	r5, r0
 8007e40:	b109      	cbz	r1, 8007e46 <cleanup_glue+0xe>
 8007e42:	f7ff fff9 	bl	8007e38 <cleanup_glue>
 8007e46:	4621      	mov	r1, r4
 8007e48:	4628      	mov	r0, r5
 8007e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e4e:	f000 bad7 	b.w	8008400 <_free_r>
	...

08007e54 <_reclaim_reent>:
 8007e54:	4b2c      	ldr	r3, [pc, #176]	; (8007f08 <_reclaim_reent+0xb4>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4283      	cmp	r3, r0
 8007e5a:	b570      	push	{r4, r5, r6, lr}
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	d051      	beq.n	8007f04 <_reclaim_reent+0xb0>
 8007e60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007e62:	b143      	cbz	r3, 8007e76 <_reclaim_reent+0x22>
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d14a      	bne.n	8007f00 <_reclaim_reent+0xac>
 8007e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e6c:	6819      	ldr	r1, [r3, #0]
 8007e6e:	b111      	cbz	r1, 8007e76 <_reclaim_reent+0x22>
 8007e70:	4620      	mov	r0, r4
 8007e72:	f000 fac5 	bl	8008400 <_free_r>
 8007e76:	6961      	ldr	r1, [r4, #20]
 8007e78:	b111      	cbz	r1, 8007e80 <_reclaim_reent+0x2c>
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f000 fac0 	bl	8008400 <_free_r>
 8007e80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007e82:	b111      	cbz	r1, 8007e8a <_reclaim_reent+0x36>
 8007e84:	4620      	mov	r0, r4
 8007e86:	f000 fabb 	bl	8008400 <_free_r>
 8007e8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e8c:	b111      	cbz	r1, 8007e94 <_reclaim_reent+0x40>
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f000 fab6 	bl	8008400 <_free_r>
 8007e94:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007e96:	b111      	cbz	r1, 8007e9e <_reclaim_reent+0x4a>
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f000 fab1 	bl	8008400 <_free_r>
 8007e9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007ea0:	b111      	cbz	r1, 8007ea8 <_reclaim_reent+0x54>
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f000 faac 	bl	8008400 <_free_r>
 8007ea8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007eaa:	b111      	cbz	r1, 8007eb2 <_reclaim_reent+0x5e>
 8007eac:	4620      	mov	r0, r4
 8007eae:	f000 faa7 	bl	8008400 <_free_r>
 8007eb2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007eb4:	b111      	cbz	r1, 8007ebc <_reclaim_reent+0x68>
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f000 faa2 	bl	8008400 <_free_r>
 8007ebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ebe:	b111      	cbz	r1, 8007ec6 <_reclaim_reent+0x72>
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f000 fa9d 	bl	8008400 <_free_r>
 8007ec6:	69a3      	ldr	r3, [r4, #24]
 8007ec8:	b1e3      	cbz	r3, 8007f04 <_reclaim_reent+0xb0>
 8007eca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007ecc:	4620      	mov	r0, r4
 8007ece:	4798      	blx	r3
 8007ed0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007ed2:	b1b9      	cbz	r1, 8007f04 <_reclaim_reent+0xb0>
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007eda:	f7ff bfad 	b.w	8007e38 <cleanup_glue>
 8007ede:	5949      	ldr	r1, [r1, r5]
 8007ee0:	b941      	cbnz	r1, 8007ef4 <_reclaim_reent+0xa0>
 8007ee2:	3504      	adds	r5, #4
 8007ee4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ee6:	2d80      	cmp	r5, #128	; 0x80
 8007ee8:	68d9      	ldr	r1, [r3, #12]
 8007eea:	d1f8      	bne.n	8007ede <_reclaim_reent+0x8a>
 8007eec:	4620      	mov	r0, r4
 8007eee:	f000 fa87 	bl	8008400 <_free_r>
 8007ef2:	e7ba      	b.n	8007e6a <_reclaim_reent+0x16>
 8007ef4:	680e      	ldr	r6, [r1, #0]
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f000 fa82 	bl	8008400 <_free_r>
 8007efc:	4631      	mov	r1, r6
 8007efe:	e7ef      	b.n	8007ee0 <_reclaim_reent+0x8c>
 8007f00:	2500      	movs	r5, #0
 8007f02:	e7ef      	b.n	8007ee4 <_reclaim_reent+0x90>
 8007f04:	bd70      	pop	{r4, r5, r6, pc}
 8007f06:	bf00      	nop
 8007f08:	20000190 	.word	0x20000190

08007f0c <_sbrk_r>:
 8007f0c:	b538      	push	{r3, r4, r5, lr}
 8007f0e:	4d06      	ldr	r5, [pc, #24]	; (8007f28 <_sbrk_r+0x1c>)
 8007f10:	2300      	movs	r3, #0
 8007f12:	4604      	mov	r4, r0
 8007f14:	4608      	mov	r0, r1
 8007f16:	602b      	str	r3, [r5, #0]
 8007f18:	f7f9 fb4c 	bl	80015b4 <_sbrk>
 8007f1c:	1c43      	adds	r3, r0, #1
 8007f1e:	d102      	bne.n	8007f26 <_sbrk_r+0x1a>
 8007f20:	682b      	ldr	r3, [r5, #0]
 8007f22:	b103      	cbz	r3, 8007f26 <_sbrk_r+0x1a>
 8007f24:	6023      	str	r3, [r4, #0]
 8007f26:	bd38      	pop	{r3, r4, r5, pc}
 8007f28:	20004ea0 	.word	0x20004ea0

08007f2c <__sread>:
 8007f2c:	b510      	push	{r4, lr}
 8007f2e:	460c      	mov	r4, r1
 8007f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f34:	f000 fda2 	bl	8008a7c <_read_r>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	bfab      	itete	ge
 8007f3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f3e:	89a3      	ldrhlt	r3, [r4, #12]
 8007f40:	181b      	addge	r3, r3, r0
 8007f42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f46:	bfac      	ite	ge
 8007f48:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f4a:	81a3      	strhlt	r3, [r4, #12]
 8007f4c:	bd10      	pop	{r4, pc}

08007f4e <__swrite>:
 8007f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f52:	461f      	mov	r7, r3
 8007f54:	898b      	ldrh	r3, [r1, #12]
 8007f56:	05db      	lsls	r3, r3, #23
 8007f58:	4605      	mov	r5, r0
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	4616      	mov	r6, r2
 8007f5e:	d505      	bpl.n	8007f6c <__swrite+0x1e>
 8007f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f64:	2302      	movs	r3, #2
 8007f66:	2200      	movs	r2, #0
 8007f68:	f000 f9c8 	bl	80082fc <_lseek_r>
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f76:	81a3      	strh	r3, [r4, #12]
 8007f78:	4632      	mov	r2, r6
 8007f7a:	463b      	mov	r3, r7
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f82:	f000 b869 	b.w	8008058 <_write_r>

08007f86 <__sseek>:
 8007f86:	b510      	push	{r4, lr}
 8007f88:	460c      	mov	r4, r1
 8007f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f8e:	f000 f9b5 	bl	80082fc <_lseek_r>
 8007f92:	1c43      	adds	r3, r0, #1
 8007f94:	89a3      	ldrh	r3, [r4, #12]
 8007f96:	bf15      	itete	ne
 8007f98:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007fa2:	81a3      	strheq	r3, [r4, #12]
 8007fa4:	bf18      	it	ne
 8007fa6:	81a3      	strhne	r3, [r4, #12]
 8007fa8:	bd10      	pop	{r4, pc}

08007faa <__sclose>:
 8007faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fae:	f000 b8d3 	b.w	8008158 <_close_r>
	...

08007fb4 <__swbuf_r>:
 8007fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb6:	460e      	mov	r6, r1
 8007fb8:	4614      	mov	r4, r2
 8007fba:	4605      	mov	r5, r0
 8007fbc:	b118      	cbz	r0, 8007fc6 <__swbuf_r+0x12>
 8007fbe:	6983      	ldr	r3, [r0, #24]
 8007fc0:	b90b      	cbnz	r3, 8007fc6 <__swbuf_r+0x12>
 8007fc2:	f7ff fd75 	bl	8007ab0 <__sinit>
 8007fc6:	4b21      	ldr	r3, [pc, #132]	; (800804c <__swbuf_r+0x98>)
 8007fc8:	429c      	cmp	r4, r3
 8007fca:	d12b      	bne.n	8008024 <__swbuf_r+0x70>
 8007fcc:	686c      	ldr	r4, [r5, #4]
 8007fce:	69a3      	ldr	r3, [r4, #24]
 8007fd0:	60a3      	str	r3, [r4, #8]
 8007fd2:	89a3      	ldrh	r3, [r4, #12]
 8007fd4:	071a      	lsls	r2, r3, #28
 8007fd6:	d52f      	bpl.n	8008038 <__swbuf_r+0x84>
 8007fd8:	6923      	ldr	r3, [r4, #16]
 8007fda:	b36b      	cbz	r3, 8008038 <__swbuf_r+0x84>
 8007fdc:	6923      	ldr	r3, [r4, #16]
 8007fde:	6820      	ldr	r0, [r4, #0]
 8007fe0:	1ac0      	subs	r0, r0, r3
 8007fe2:	6963      	ldr	r3, [r4, #20]
 8007fe4:	b2f6      	uxtb	r6, r6
 8007fe6:	4283      	cmp	r3, r0
 8007fe8:	4637      	mov	r7, r6
 8007fea:	dc04      	bgt.n	8007ff6 <__swbuf_r+0x42>
 8007fec:	4621      	mov	r1, r4
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f000 f948 	bl	8008284 <_fflush_r>
 8007ff4:	bb30      	cbnz	r0, 8008044 <__swbuf_r+0x90>
 8007ff6:	68a3      	ldr	r3, [r4, #8]
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	60a3      	str	r3, [r4, #8]
 8007ffc:	6823      	ldr	r3, [r4, #0]
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	6022      	str	r2, [r4, #0]
 8008002:	701e      	strb	r6, [r3, #0]
 8008004:	6963      	ldr	r3, [r4, #20]
 8008006:	3001      	adds	r0, #1
 8008008:	4283      	cmp	r3, r0
 800800a:	d004      	beq.n	8008016 <__swbuf_r+0x62>
 800800c:	89a3      	ldrh	r3, [r4, #12]
 800800e:	07db      	lsls	r3, r3, #31
 8008010:	d506      	bpl.n	8008020 <__swbuf_r+0x6c>
 8008012:	2e0a      	cmp	r6, #10
 8008014:	d104      	bne.n	8008020 <__swbuf_r+0x6c>
 8008016:	4621      	mov	r1, r4
 8008018:	4628      	mov	r0, r5
 800801a:	f000 f933 	bl	8008284 <_fflush_r>
 800801e:	b988      	cbnz	r0, 8008044 <__swbuf_r+0x90>
 8008020:	4638      	mov	r0, r7
 8008022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008024:	4b0a      	ldr	r3, [pc, #40]	; (8008050 <__swbuf_r+0x9c>)
 8008026:	429c      	cmp	r4, r3
 8008028:	d101      	bne.n	800802e <__swbuf_r+0x7a>
 800802a:	68ac      	ldr	r4, [r5, #8]
 800802c:	e7cf      	b.n	8007fce <__swbuf_r+0x1a>
 800802e:	4b09      	ldr	r3, [pc, #36]	; (8008054 <__swbuf_r+0xa0>)
 8008030:	429c      	cmp	r4, r3
 8008032:	bf08      	it	eq
 8008034:	68ec      	ldreq	r4, [r5, #12]
 8008036:	e7ca      	b.n	8007fce <__swbuf_r+0x1a>
 8008038:	4621      	mov	r1, r4
 800803a:	4628      	mov	r0, r5
 800803c:	f000 f81e 	bl	800807c <__swsetup_r>
 8008040:	2800      	cmp	r0, #0
 8008042:	d0cb      	beq.n	8007fdc <__swbuf_r+0x28>
 8008044:	f04f 37ff 	mov.w	r7, #4294967295
 8008048:	e7ea      	b.n	8008020 <__swbuf_r+0x6c>
 800804a:	bf00      	nop
 800804c:	08008cac 	.word	0x08008cac
 8008050:	08008ccc 	.word	0x08008ccc
 8008054:	08008c8c 	.word	0x08008c8c

08008058 <_write_r>:
 8008058:	b538      	push	{r3, r4, r5, lr}
 800805a:	4d07      	ldr	r5, [pc, #28]	; (8008078 <_write_r+0x20>)
 800805c:	4604      	mov	r4, r0
 800805e:	4608      	mov	r0, r1
 8008060:	4611      	mov	r1, r2
 8008062:	2200      	movs	r2, #0
 8008064:	602a      	str	r2, [r5, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	f7f8 fa8e 	bl	8000588 <_write>
 800806c:	1c43      	adds	r3, r0, #1
 800806e:	d102      	bne.n	8008076 <_write_r+0x1e>
 8008070:	682b      	ldr	r3, [r5, #0]
 8008072:	b103      	cbz	r3, 8008076 <_write_r+0x1e>
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	bd38      	pop	{r3, r4, r5, pc}
 8008078:	20004ea0 	.word	0x20004ea0

0800807c <__swsetup_r>:
 800807c:	4b32      	ldr	r3, [pc, #200]	; (8008148 <__swsetup_r+0xcc>)
 800807e:	b570      	push	{r4, r5, r6, lr}
 8008080:	681d      	ldr	r5, [r3, #0]
 8008082:	4606      	mov	r6, r0
 8008084:	460c      	mov	r4, r1
 8008086:	b125      	cbz	r5, 8008092 <__swsetup_r+0x16>
 8008088:	69ab      	ldr	r3, [r5, #24]
 800808a:	b913      	cbnz	r3, 8008092 <__swsetup_r+0x16>
 800808c:	4628      	mov	r0, r5
 800808e:	f7ff fd0f 	bl	8007ab0 <__sinit>
 8008092:	4b2e      	ldr	r3, [pc, #184]	; (800814c <__swsetup_r+0xd0>)
 8008094:	429c      	cmp	r4, r3
 8008096:	d10f      	bne.n	80080b8 <__swsetup_r+0x3c>
 8008098:	686c      	ldr	r4, [r5, #4]
 800809a:	89a3      	ldrh	r3, [r4, #12]
 800809c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080a0:	0719      	lsls	r1, r3, #28
 80080a2:	d42c      	bmi.n	80080fe <__swsetup_r+0x82>
 80080a4:	06dd      	lsls	r5, r3, #27
 80080a6:	d411      	bmi.n	80080cc <__swsetup_r+0x50>
 80080a8:	2309      	movs	r3, #9
 80080aa:	6033      	str	r3, [r6, #0]
 80080ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080b0:	81a3      	strh	r3, [r4, #12]
 80080b2:	f04f 30ff 	mov.w	r0, #4294967295
 80080b6:	e03e      	b.n	8008136 <__swsetup_r+0xba>
 80080b8:	4b25      	ldr	r3, [pc, #148]	; (8008150 <__swsetup_r+0xd4>)
 80080ba:	429c      	cmp	r4, r3
 80080bc:	d101      	bne.n	80080c2 <__swsetup_r+0x46>
 80080be:	68ac      	ldr	r4, [r5, #8]
 80080c0:	e7eb      	b.n	800809a <__swsetup_r+0x1e>
 80080c2:	4b24      	ldr	r3, [pc, #144]	; (8008154 <__swsetup_r+0xd8>)
 80080c4:	429c      	cmp	r4, r3
 80080c6:	bf08      	it	eq
 80080c8:	68ec      	ldreq	r4, [r5, #12]
 80080ca:	e7e6      	b.n	800809a <__swsetup_r+0x1e>
 80080cc:	0758      	lsls	r0, r3, #29
 80080ce:	d512      	bpl.n	80080f6 <__swsetup_r+0x7a>
 80080d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080d2:	b141      	cbz	r1, 80080e6 <__swsetup_r+0x6a>
 80080d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080d8:	4299      	cmp	r1, r3
 80080da:	d002      	beq.n	80080e2 <__swsetup_r+0x66>
 80080dc:	4630      	mov	r0, r6
 80080de:	f000 f98f 	bl	8008400 <_free_r>
 80080e2:	2300      	movs	r3, #0
 80080e4:	6363      	str	r3, [r4, #52]	; 0x34
 80080e6:	89a3      	ldrh	r3, [r4, #12]
 80080e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080ec:	81a3      	strh	r3, [r4, #12]
 80080ee:	2300      	movs	r3, #0
 80080f0:	6063      	str	r3, [r4, #4]
 80080f2:	6923      	ldr	r3, [r4, #16]
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	89a3      	ldrh	r3, [r4, #12]
 80080f8:	f043 0308 	orr.w	r3, r3, #8
 80080fc:	81a3      	strh	r3, [r4, #12]
 80080fe:	6923      	ldr	r3, [r4, #16]
 8008100:	b94b      	cbnz	r3, 8008116 <__swsetup_r+0x9a>
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800810c:	d003      	beq.n	8008116 <__swsetup_r+0x9a>
 800810e:	4621      	mov	r1, r4
 8008110:	4630      	mov	r0, r6
 8008112:	f000 f929 	bl	8008368 <__smakebuf_r>
 8008116:	89a0      	ldrh	r0, [r4, #12]
 8008118:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800811c:	f010 0301 	ands.w	r3, r0, #1
 8008120:	d00a      	beq.n	8008138 <__swsetup_r+0xbc>
 8008122:	2300      	movs	r3, #0
 8008124:	60a3      	str	r3, [r4, #8]
 8008126:	6963      	ldr	r3, [r4, #20]
 8008128:	425b      	negs	r3, r3
 800812a:	61a3      	str	r3, [r4, #24]
 800812c:	6923      	ldr	r3, [r4, #16]
 800812e:	b943      	cbnz	r3, 8008142 <__swsetup_r+0xc6>
 8008130:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008134:	d1ba      	bne.n	80080ac <__swsetup_r+0x30>
 8008136:	bd70      	pop	{r4, r5, r6, pc}
 8008138:	0781      	lsls	r1, r0, #30
 800813a:	bf58      	it	pl
 800813c:	6963      	ldrpl	r3, [r4, #20]
 800813e:	60a3      	str	r3, [r4, #8]
 8008140:	e7f4      	b.n	800812c <__swsetup_r+0xb0>
 8008142:	2000      	movs	r0, #0
 8008144:	e7f7      	b.n	8008136 <__swsetup_r+0xba>
 8008146:	bf00      	nop
 8008148:	20000190 	.word	0x20000190
 800814c:	08008cac 	.word	0x08008cac
 8008150:	08008ccc 	.word	0x08008ccc
 8008154:	08008c8c 	.word	0x08008c8c

08008158 <_close_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4d06      	ldr	r5, [pc, #24]	; (8008174 <_close_r+0x1c>)
 800815c:	2300      	movs	r3, #0
 800815e:	4604      	mov	r4, r0
 8008160:	4608      	mov	r0, r1
 8008162:	602b      	str	r3, [r5, #0]
 8008164:	f7f9 f9f1 	bl	800154a <_close>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	d102      	bne.n	8008172 <_close_r+0x1a>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	b103      	cbz	r3, 8008172 <_close_r+0x1a>
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	20004ea0 	.word	0x20004ea0

08008178 <__sflush_r>:
 8008178:	898a      	ldrh	r2, [r1, #12]
 800817a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800817e:	4605      	mov	r5, r0
 8008180:	0710      	lsls	r0, r2, #28
 8008182:	460c      	mov	r4, r1
 8008184:	d458      	bmi.n	8008238 <__sflush_r+0xc0>
 8008186:	684b      	ldr	r3, [r1, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	dc05      	bgt.n	8008198 <__sflush_r+0x20>
 800818c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800818e:	2b00      	cmp	r3, #0
 8008190:	dc02      	bgt.n	8008198 <__sflush_r+0x20>
 8008192:	2000      	movs	r0, #0
 8008194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800819a:	2e00      	cmp	r6, #0
 800819c:	d0f9      	beq.n	8008192 <__sflush_r+0x1a>
 800819e:	2300      	movs	r3, #0
 80081a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081a4:	682f      	ldr	r7, [r5, #0]
 80081a6:	602b      	str	r3, [r5, #0]
 80081a8:	d032      	beq.n	8008210 <__sflush_r+0x98>
 80081aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	075a      	lsls	r2, r3, #29
 80081b0:	d505      	bpl.n	80081be <__sflush_r+0x46>
 80081b2:	6863      	ldr	r3, [r4, #4]
 80081b4:	1ac0      	subs	r0, r0, r3
 80081b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081b8:	b10b      	cbz	r3, 80081be <__sflush_r+0x46>
 80081ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081bc:	1ac0      	subs	r0, r0, r3
 80081be:	2300      	movs	r3, #0
 80081c0:	4602      	mov	r2, r0
 80081c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081c4:	6a21      	ldr	r1, [r4, #32]
 80081c6:	4628      	mov	r0, r5
 80081c8:	47b0      	blx	r6
 80081ca:	1c43      	adds	r3, r0, #1
 80081cc:	89a3      	ldrh	r3, [r4, #12]
 80081ce:	d106      	bne.n	80081de <__sflush_r+0x66>
 80081d0:	6829      	ldr	r1, [r5, #0]
 80081d2:	291d      	cmp	r1, #29
 80081d4:	d82c      	bhi.n	8008230 <__sflush_r+0xb8>
 80081d6:	4a2a      	ldr	r2, [pc, #168]	; (8008280 <__sflush_r+0x108>)
 80081d8:	40ca      	lsrs	r2, r1
 80081da:	07d6      	lsls	r6, r2, #31
 80081dc:	d528      	bpl.n	8008230 <__sflush_r+0xb8>
 80081de:	2200      	movs	r2, #0
 80081e0:	6062      	str	r2, [r4, #4]
 80081e2:	04d9      	lsls	r1, r3, #19
 80081e4:	6922      	ldr	r2, [r4, #16]
 80081e6:	6022      	str	r2, [r4, #0]
 80081e8:	d504      	bpl.n	80081f4 <__sflush_r+0x7c>
 80081ea:	1c42      	adds	r2, r0, #1
 80081ec:	d101      	bne.n	80081f2 <__sflush_r+0x7a>
 80081ee:	682b      	ldr	r3, [r5, #0]
 80081f0:	b903      	cbnz	r3, 80081f4 <__sflush_r+0x7c>
 80081f2:	6560      	str	r0, [r4, #84]	; 0x54
 80081f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081f6:	602f      	str	r7, [r5, #0]
 80081f8:	2900      	cmp	r1, #0
 80081fa:	d0ca      	beq.n	8008192 <__sflush_r+0x1a>
 80081fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008200:	4299      	cmp	r1, r3
 8008202:	d002      	beq.n	800820a <__sflush_r+0x92>
 8008204:	4628      	mov	r0, r5
 8008206:	f000 f8fb 	bl	8008400 <_free_r>
 800820a:	2000      	movs	r0, #0
 800820c:	6360      	str	r0, [r4, #52]	; 0x34
 800820e:	e7c1      	b.n	8008194 <__sflush_r+0x1c>
 8008210:	6a21      	ldr	r1, [r4, #32]
 8008212:	2301      	movs	r3, #1
 8008214:	4628      	mov	r0, r5
 8008216:	47b0      	blx	r6
 8008218:	1c41      	adds	r1, r0, #1
 800821a:	d1c7      	bne.n	80081ac <__sflush_r+0x34>
 800821c:	682b      	ldr	r3, [r5, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d0c4      	beq.n	80081ac <__sflush_r+0x34>
 8008222:	2b1d      	cmp	r3, #29
 8008224:	d001      	beq.n	800822a <__sflush_r+0xb2>
 8008226:	2b16      	cmp	r3, #22
 8008228:	d101      	bne.n	800822e <__sflush_r+0xb6>
 800822a:	602f      	str	r7, [r5, #0]
 800822c:	e7b1      	b.n	8008192 <__sflush_r+0x1a>
 800822e:	89a3      	ldrh	r3, [r4, #12]
 8008230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008234:	81a3      	strh	r3, [r4, #12]
 8008236:	e7ad      	b.n	8008194 <__sflush_r+0x1c>
 8008238:	690f      	ldr	r7, [r1, #16]
 800823a:	2f00      	cmp	r7, #0
 800823c:	d0a9      	beq.n	8008192 <__sflush_r+0x1a>
 800823e:	0793      	lsls	r3, r2, #30
 8008240:	680e      	ldr	r6, [r1, #0]
 8008242:	bf08      	it	eq
 8008244:	694b      	ldreq	r3, [r1, #20]
 8008246:	600f      	str	r7, [r1, #0]
 8008248:	bf18      	it	ne
 800824a:	2300      	movne	r3, #0
 800824c:	eba6 0807 	sub.w	r8, r6, r7
 8008250:	608b      	str	r3, [r1, #8]
 8008252:	f1b8 0f00 	cmp.w	r8, #0
 8008256:	dd9c      	ble.n	8008192 <__sflush_r+0x1a>
 8008258:	6a21      	ldr	r1, [r4, #32]
 800825a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800825c:	4643      	mov	r3, r8
 800825e:	463a      	mov	r2, r7
 8008260:	4628      	mov	r0, r5
 8008262:	47b0      	blx	r6
 8008264:	2800      	cmp	r0, #0
 8008266:	dc06      	bgt.n	8008276 <__sflush_r+0xfe>
 8008268:	89a3      	ldrh	r3, [r4, #12]
 800826a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800826e:	81a3      	strh	r3, [r4, #12]
 8008270:	f04f 30ff 	mov.w	r0, #4294967295
 8008274:	e78e      	b.n	8008194 <__sflush_r+0x1c>
 8008276:	4407      	add	r7, r0
 8008278:	eba8 0800 	sub.w	r8, r8, r0
 800827c:	e7e9      	b.n	8008252 <__sflush_r+0xda>
 800827e:	bf00      	nop
 8008280:	20400001 	.word	0x20400001

08008284 <_fflush_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	690b      	ldr	r3, [r1, #16]
 8008288:	4605      	mov	r5, r0
 800828a:	460c      	mov	r4, r1
 800828c:	b913      	cbnz	r3, 8008294 <_fflush_r+0x10>
 800828e:	2500      	movs	r5, #0
 8008290:	4628      	mov	r0, r5
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	b118      	cbz	r0, 800829e <_fflush_r+0x1a>
 8008296:	6983      	ldr	r3, [r0, #24]
 8008298:	b90b      	cbnz	r3, 800829e <_fflush_r+0x1a>
 800829a:	f7ff fc09 	bl	8007ab0 <__sinit>
 800829e:	4b14      	ldr	r3, [pc, #80]	; (80082f0 <_fflush_r+0x6c>)
 80082a0:	429c      	cmp	r4, r3
 80082a2:	d11b      	bne.n	80082dc <_fflush_r+0x58>
 80082a4:	686c      	ldr	r4, [r5, #4]
 80082a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0ef      	beq.n	800828e <_fflush_r+0xa>
 80082ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082b0:	07d0      	lsls	r0, r2, #31
 80082b2:	d404      	bmi.n	80082be <_fflush_r+0x3a>
 80082b4:	0599      	lsls	r1, r3, #22
 80082b6:	d402      	bmi.n	80082be <_fflush_r+0x3a>
 80082b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082ba:	f7ff fcbc 	bl	8007c36 <__retarget_lock_acquire_recursive>
 80082be:	4628      	mov	r0, r5
 80082c0:	4621      	mov	r1, r4
 80082c2:	f7ff ff59 	bl	8008178 <__sflush_r>
 80082c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082c8:	07da      	lsls	r2, r3, #31
 80082ca:	4605      	mov	r5, r0
 80082cc:	d4e0      	bmi.n	8008290 <_fflush_r+0xc>
 80082ce:	89a3      	ldrh	r3, [r4, #12]
 80082d0:	059b      	lsls	r3, r3, #22
 80082d2:	d4dd      	bmi.n	8008290 <_fflush_r+0xc>
 80082d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082d6:	f7ff fcaf 	bl	8007c38 <__retarget_lock_release_recursive>
 80082da:	e7d9      	b.n	8008290 <_fflush_r+0xc>
 80082dc:	4b05      	ldr	r3, [pc, #20]	; (80082f4 <_fflush_r+0x70>)
 80082de:	429c      	cmp	r4, r3
 80082e0:	d101      	bne.n	80082e6 <_fflush_r+0x62>
 80082e2:	68ac      	ldr	r4, [r5, #8]
 80082e4:	e7df      	b.n	80082a6 <_fflush_r+0x22>
 80082e6:	4b04      	ldr	r3, [pc, #16]	; (80082f8 <_fflush_r+0x74>)
 80082e8:	429c      	cmp	r4, r3
 80082ea:	bf08      	it	eq
 80082ec:	68ec      	ldreq	r4, [r5, #12]
 80082ee:	e7da      	b.n	80082a6 <_fflush_r+0x22>
 80082f0:	08008cac 	.word	0x08008cac
 80082f4:	08008ccc 	.word	0x08008ccc
 80082f8:	08008c8c 	.word	0x08008c8c

080082fc <_lseek_r>:
 80082fc:	b538      	push	{r3, r4, r5, lr}
 80082fe:	4d07      	ldr	r5, [pc, #28]	; (800831c <_lseek_r+0x20>)
 8008300:	4604      	mov	r4, r0
 8008302:	4608      	mov	r0, r1
 8008304:	4611      	mov	r1, r2
 8008306:	2200      	movs	r2, #0
 8008308:	602a      	str	r2, [r5, #0]
 800830a:	461a      	mov	r2, r3
 800830c:	f7f9 f944 	bl	8001598 <_lseek>
 8008310:	1c43      	adds	r3, r0, #1
 8008312:	d102      	bne.n	800831a <_lseek_r+0x1e>
 8008314:	682b      	ldr	r3, [r5, #0]
 8008316:	b103      	cbz	r3, 800831a <_lseek_r+0x1e>
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	bd38      	pop	{r3, r4, r5, pc}
 800831c:	20004ea0 	.word	0x20004ea0

08008320 <__swhatbuf_r>:
 8008320:	b570      	push	{r4, r5, r6, lr}
 8008322:	460e      	mov	r6, r1
 8008324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008328:	2900      	cmp	r1, #0
 800832a:	b096      	sub	sp, #88	; 0x58
 800832c:	4614      	mov	r4, r2
 800832e:	461d      	mov	r5, r3
 8008330:	da07      	bge.n	8008342 <__swhatbuf_r+0x22>
 8008332:	2300      	movs	r3, #0
 8008334:	602b      	str	r3, [r5, #0]
 8008336:	89b3      	ldrh	r3, [r6, #12]
 8008338:	061a      	lsls	r2, r3, #24
 800833a:	d410      	bmi.n	800835e <__swhatbuf_r+0x3e>
 800833c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008340:	e00e      	b.n	8008360 <__swhatbuf_r+0x40>
 8008342:	466a      	mov	r2, sp
 8008344:	f000 fbac 	bl	8008aa0 <_fstat_r>
 8008348:	2800      	cmp	r0, #0
 800834a:	dbf2      	blt.n	8008332 <__swhatbuf_r+0x12>
 800834c:	9a01      	ldr	r2, [sp, #4]
 800834e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008352:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008356:	425a      	negs	r2, r3
 8008358:	415a      	adcs	r2, r3
 800835a:	602a      	str	r2, [r5, #0]
 800835c:	e7ee      	b.n	800833c <__swhatbuf_r+0x1c>
 800835e:	2340      	movs	r3, #64	; 0x40
 8008360:	2000      	movs	r0, #0
 8008362:	6023      	str	r3, [r4, #0]
 8008364:	b016      	add	sp, #88	; 0x58
 8008366:	bd70      	pop	{r4, r5, r6, pc}

08008368 <__smakebuf_r>:
 8008368:	898b      	ldrh	r3, [r1, #12]
 800836a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800836c:	079d      	lsls	r5, r3, #30
 800836e:	4606      	mov	r6, r0
 8008370:	460c      	mov	r4, r1
 8008372:	d507      	bpl.n	8008384 <__smakebuf_r+0x1c>
 8008374:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	6123      	str	r3, [r4, #16]
 800837c:	2301      	movs	r3, #1
 800837e:	6163      	str	r3, [r4, #20]
 8008380:	b002      	add	sp, #8
 8008382:	bd70      	pop	{r4, r5, r6, pc}
 8008384:	ab01      	add	r3, sp, #4
 8008386:	466a      	mov	r2, sp
 8008388:	f7ff ffca 	bl	8008320 <__swhatbuf_r>
 800838c:	9900      	ldr	r1, [sp, #0]
 800838e:	4605      	mov	r5, r0
 8008390:	4630      	mov	r0, r6
 8008392:	f7ff fc69 	bl	8007c68 <_malloc_r>
 8008396:	b948      	cbnz	r0, 80083ac <__smakebuf_r+0x44>
 8008398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800839c:	059a      	lsls	r2, r3, #22
 800839e:	d4ef      	bmi.n	8008380 <__smakebuf_r+0x18>
 80083a0:	f023 0303 	bic.w	r3, r3, #3
 80083a4:	f043 0302 	orr.w	r3, r3, #2
 80083a8:	81a3      	strh	r3, [r4, #12]
 80083aa:	e7e3      	b.n	8008374 <__smakebuf_r+0xc>
 80083ac:	4b0d      	ldr	r3, [pc, #52]	; (80083e4 <__smakebuf_r+0x7c>)
 80083ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	6020      	str	r0, [r4, #0]
 80083b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b8:	81a3      	strh	r3, [r4, #12]
 80083ba:	9b00      	ldr	r3, [sp, #0]
 80083bc:	6163      	str	r3, [r4, #20]
 80083be:	9b01      	ldr	r3, [sp, #4]
 80083c0:	6120      	str	r0, [r4, #16]
 80083c2:	b15b      	cbz	r3, 80083dc <__smakebuf_r+0x74>
 80083c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083c8:	4630      	mov	r0, r6
 80083ca:	f000 fb7b 	bl	8008ac4 <_isatty_r>
 80083ce:	b128      	cbz	r0, 80083dc <__smakebuf_r+0x74>
 80083d0:	89a3      	ldrh	r3, [r4, #12]
 80083d2:	f023 0303 	bic.w	r3, r3, #3
 80083d6:	f043 0301 	orr.w	r3, r3, #1
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	89a0      	ldrh	r0, [r4, #12]
 80083de:	4305      	orrs	r5, r0
 80083e0:	81a5      	strh	r5, [r4, #12]
 80083e2:	e7cd      	b.n	8008380 <__smakebuf_r+0x18>
 80083e4:	08007a49 	.word	0x08007a49

080083e8 <__malloc_lock>:
 80083e8:	4801      	ldr	r0, [pc, #4]	; (80083f0 <__malloc_lock+0x8>)
 80083ea:	f7ff bc24 	b.w	8007c36 <__retarget_lock_acquire_recursive>
 80083ee:	bf00      	nop
 80083f0:	20004e98 	.word	0x20004e98

080083f4 <__malloc_unlock>:
 80083f4:	4801      	ldr	r0, [pc, #4]	; (80083fc <__malloc_unlock+0x8>)
 80083f6:	f7ff bc1f 	b.w	8007c38 <__retarget_lock_release_recursive>
 80083fa:	bf00      	nop
 80083fc:	20004e98 	.word	0x20004e98

08008400 <_free_r>:
 8008400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008402:	2900      	cmp	r1, #0
 8008404:	d048      	beq.n	8008498 <_free_r+0x98>
 8008406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800840a:	9001      	str	r0, [sp, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	f1a1 0404 	sub.w	r4, r1, #4
 8008412:	bfb8      	it	lt
 8008414:	18e4      	addlt	r4, r4, r3
 8008416:	f7ff ffe7 	bl	80083e8 <__malloc_lock>
 800841a:	4a20      	ldr	r2, [pc, #128]	; (800849c <_free_r+0x9c>)
 800841c:	9801      	ldr	r0, [sp, #4]
 800841e:	6813      	ldr	r3, [r2, #0]
 8008420:	4615      	mov	r5, r2
 8008422:	b933      	cbnz	r3, 8008432 <_free_r+0x32>
 8008424:	6063      	str	r3, [r4, #4]
 8008426:	6014      	str	r4, [r2, #0]
 8008428:	b003      	add	sp, #12
 800842a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800842e:	f7ff bfe1 	b.w	80083f4 <__malloc_unlock>
 8008432:	42a3      	cmp	r3, r4
 8008434:	d90b      	bls.n	800844e <_free_r+0x4e>
 8008436:	6821      	ldr	r1, [r4, #0]
 8008438:	1862      	adds	r2, r4, r1
 800843a:	4293      	cmp	r3, r2
 800843c:	bf04      	itt	eq
 800843e:	681a      	ldreq	r2, [r3, #0]
 8008440:	685b      	ldreq	r3, [r3, #4]
 8008442:	6063      	str	r3, [r4, #4]
 8008444:	bf04      	itt	eq
 8008446:	1852      	addeq	r2, r2, r1
 8008448:	6022      	streq	r2, [r4, #0]
 800844a:	602c      	str	r4, [r5, #0]
 800844c:	e7ec      	b.n	8008428 <_free_r+0x28>
 800844e:	461a      	mov	r2, r3
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	b10b      	cbz	r3, 8008458 <_free_r+0x58>
 8008454:	42a3      	cmp	r3, r4
 8008456:	d9fa      	bls.n	800844e <_free_r+0x4e>
 8008458:	6811      	ldr	r1, [r2, #0]
 800845a:	1855      	adds	r5, r2, r1
 800845c:	42a5      	cmp	r5, r4
 800845e:	d10b      	bne.n	8008478 <_free_r+0x78>
 8008460:	6824      	ldr	r4, [r4, #0]
 8008462:	4421      	add	r1, r4
 8008464:	1854      	adds	r4, r2, r1
 8008466:	42a3      	cmp	r3, r4
 8008468:	6011      	str	r1, [r2, #0]
 800846a:	d1dd      	bne.n	8008428 <_free_r+0x28>
 800846c:	681c      	ldr	r4, [r3, #0]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	6053      	str	r3, [r2, #4]
 8008472:	4421      	add	r1, r4
 8008474:	6011      	str	r1, [r2, #0]
 8008476:	e7d7      	b.n	8008428 <_free_r+0x28>
 8008478:	d902      	bls.n	8008480 <_free_r+0x80>
 800847a:	230c      	movs	r3, #12
 800847c:	6003      	str	r3, [r0, #0]
 800847e:	e7d3      	b.n	8008428 <_free_r+0x28>
 8008480:	6825      	ldr	r5, [r4, #0]
 8008482:	1961      	adds	r1, r4, r5
 8008484:	428b      	cmp	r3, r1
 8008486:	bf04      	itt	eq
 8008488:	6819      	ldreq	r1, [r3, #0]
 800848a:	685b      	ldreq	r3, [r3, #4]
 800848c:	6063      	str	r3, [r4, #4]
 800848e:	bf04      	itt	eq
 8008490:	1949      	addeq	r1, r1, r5
 8008492:	6021      	streq	r1, [r4, #0]
 8008494:	6054      	str	r4, [r2, #4]
 8008496:	e7c7      	b.n	8008428 <_free_r+0x28>
 8008498:	b003      	add	sp, #12
 800849a:	bd30      	pop	{r4, r5, pc}
 800849c:	20004c08 	.word	0x20004c08

080084a0 <__sfputc_r>:
 80084a0:	6893      	ldr	r3, [r2, #8]
 80084a2:	3b01      	subs	r3, #1
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	b410      	push	{r4}
 80084a8:	6093      	str	r3, [r2, #8]
 80084aa:	da08      	bge.n	80084be <__sfputc_r+0x1e>
 80084ac:	6994      	ldr	r4, [r2, #24]
 80084ae:	42a3      	cmp	r3, r4
 80084b0:	db01      	blt.n	80084b6 <__sfputc_r+0x16>
 80084b2:	290a      	cmp	r1, #10
 80084b4:	d103      	bne.n	80084be <__sfputc_r+0x1e>
 80084b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084ba:	f7ff bd7b 	b.w	8007fb4 <__swbuf_r>
 80084be:	6813      	ldr	r3, [r2, #0]
 80084c0:	1c58      	adds	r0, r3, #1
 80084c2:	6010      	str	r0, [r2, #0]
 80084c4:	7019      	strb	r1, [r3, #0]
 80084c6:	4608      	mov	r0, r1
 80084c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <__sfputs_r>:
 80084ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d0:	4606      	mov	r6, r0
 80084d2:	460f      	mov	r7, r1
 80084d4:	4614      	mov	r4, r2
 80084d6:	18d5      	adds	r5, r2, r3
 80084d8:	42ac      	cmp	r4, r5
 80084da:	d101      	bne.n	80084e0 <__sfputs_r+0x12>
 80084dc:	2000      	movs	r0, #0
 80084de:	e007      	b.n	80084f0 <__sfputs_r+0x22>
 80084e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e4:	463a      	mov	r2, r7
 80084e6:	4630      	mov	r0, r6
 80084e8:	f7ff ffda 	bl	80084a0 <__sfputc_r>
 80084ec:	1c43      	adds	r3, r0, #1
 80084ee:	d1f3      	bne.n	80084d8 <__sfputs_r+0xa>
 80084f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084f4 <_vfiprintf_r>:
 80084f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f8:	460d      	mov	r5, r1
 80084fa:	b09d      	sub	sp, #116	; 0x74
 80084fc:	4614      	mov	r4, r2
 80084fe:	4698      	mov	r8, r3
 8008500:	4606      	mov	r6, r0
 8008502:	b118      	cbz	r0, 800850c <_vfiprintf_r+0x18>
 8008504:	6983      	ldr	r3, [r0, #24]
 8008506:	b90b      	cbnz	r3, 800850c <_vfiprintf_r+0x18>
 8008508:	f7ff fad2 	bl	8007ab0 <__sinit>
 800850c:	4b89      	ldr	r3, [pc, #548]	; (8008734 <_vfiprintf_r+0x240>)
 800850e:	429d      	cmp	r5, r3
 8008510:	d11b      	bne.n	800854a <_vfiprintf_r+0x56>
 8008512:	6875      	ldr	r5, [r6, #4]
 8008514:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008516:	07d9      	lsls	r1, r3, #31
 8008518:	d405      	bmi.n	8008526 <_vfiprintf_r+0x32>
 800851a:	89ab      	ldrh	r3, [r5, #12]
 800851c:	059a      	lsls	r2, r3, #22
 800851e:	d402      	bmi.n	8008526 <_vfiprintf_r+0x32>
 8008520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008522:	f7ff fb88 	bl	8007c36 <__retarget_lock_acquire_recursive>
 8008526:	89ab      	ldrh	r3, [r5, #12]
 8008528:	071b      	lsls	r3, r3, #28
 800852a:	d501      	bpl.n	8008530 <_vfiprintf_r+0x3c>
 800852c:	692b      	ldr	r3, [r5, #16]
 800852e:	b9eb      	cbnz	r3, 800856c <_vfiprintf_r+0x78>
 8008530:	4629      	mov	r1, r5
 8008532:	4630      	mov	r0, r6
 8008534:	f7ff fda2 	bl	800807c <__swsetup_r>
 8008538:	b1c0      	cbz	r0, 800856c <_vfiprintf_r+0x78>
 800853a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800853c:	07dc      	lsls	r4, r3, #31
 800853e:	d50e      	bpl.n	800855e <_vfiprintf_r+0x6a>
 8008540:	f04f 30ff 	mov.w	r0, #4294967295
 8008544:	b01d      	add	sp, #116	; 0x74
 8008546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854a:	4b7b      	ldr	r3, [pc, #492]	; (8008738 <_vfiprintf_r+0x244>)
 800854c:	429d      	cmp	r5, r3
 800854e:	d101      	bne.n	8008554 <_vfiprintf_r+0x60>
 8008550:	68b5      	ldr	r5, [r6, #8]
 8008552:	e7df      	b.n	8008514 <_vfiprintf_r+0x20>
 8008554:	4b79      	ldr	r3, [pc, #484]	; (800873c <_vfiprintf_r+0x248>)
 8008556:	429d      	cmp	r5, r3
 8008558:	bf08      	it	eq
 800855a:	68f5      	ldreq	r5, [r6, #12]
 800855c:	e7da      	b.n	8008514 <_vfiprintf_r+0x20>
 800855e:	89ab      	ldrh	r3, [r5, #12]
 8008560:	0598      	lsls	r0, r3, #22
 8008562:	d4ed      	bmi.n	8008540 <_vfiprintf_r+0x4c>
 8008564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008566:	f7ff fb67 	bl	8007c38 <__retarget_lock_release_recursive>
 800856a:	e7e9      	b.n	8008540 <_vfiprintf_r+0x4c>
 800856c:	2300      	movs	r3, #0
 800856e:	9309      	str	r3, [sp, #36]	; 0x24
 8008570:	2320      	movs	r3, #32
 8008572:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008576:	f8cd 800c 	str.w	r8, [sp, #12]
 800857a:	2330      	movs	r3, #48	; 0x30
 800857c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008740 <_vfiprintf_r+0x24c>
 8008580:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008584:	f04f 0901 	mov.w	r9, #1
 8008588:	4623      	mov	r3, r4
 800858a:	469a      	mov	sl, r3
 800858c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008590:	b10a      	cbz	r2, 8008596 <_vfiprintf_r+0xa2>
 8008592:	2a25      	cmp	r2, #37	; 0x25
 8008594:	d1f9      	bne.n	800858a <_vfiprintf_r+0x96>
 8008596:	ebba 0b04 	subs.w	fp, sl, r4
 800859a:	d00b      	beq.n	80085b4 <_vfiprintf_r+0xc0>
 800859c:	465b      	mov	r3, fp
 800859e:	4622      	mov	r2, r4
 80085a0:	4629      	mov	r1, r5
 80085a2:	4630      	mov	r0, r6
 80085a4:	f7ff ff93 	bl	80084ce <__sfputs_r>
 80085a8:	3001      	adds	r0, #1
 80085aa:	f000 80aa 	beq.w	8008702 <_vfiprintf_r+0x20e>
 80085ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085b0:	445a      	add	r2, fp
 80085b2:	9209      	str	r2, [sp, #36]	; 0x24
 80085b4:	f89a 3000 	ldrb.w	r3, [sl]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 80a2 	beq.w	8008702 <_vfiprintf_r+0x20e>
 80085be:	2300      	movs	r3, #0
 80085c0:	f04f 32ff 	mov.w	r2, #4294967295
 80085c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085c8:	f10a 0a01 	add.w	sl, sl, #1
 80085cc:	9304      	str	r3, [sp, #16]
 80085ce:	9307      	str	r3, [sp, #28]
 80085d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085d4:	931a      	str	r3, [sp, #104]	; 0x68
 80085d6:	4654      	mov	r4, sl
 80085d8:	2205      	movs	r2, #5
 80085da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085de:	4858      	ldr	r0, [pc, #352]	; (8008740 <_vfiprintf_r+0x24c>)
 80085e0:	f7f7 fe06 	bl	80001f0 <memchr>
 80085e4:	9a04      	ldr	r2, [sp, #16]
 80085e6:	b9d8      	cbnz	r0, 8008620 <_vfiprintf_r+0x12c>
 80085e8:	06d1      	lsls	r1, r2, #27
 80085ea:	bf44      	itt	mi
 80085ec:	2320      	movmi	r3, #32
 80085ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085f2:	0713      	lsls	r3, r2, #28
 80085f4:	bf44      	itt	mi
 80085f6:	232b      	movmi	r3, #43	; 0x2b
 80085f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008600:	2b2a      	cmp	r3, #42	; 0x2a
 8008602:	d015      	beq.n	8008630 <_vfiprintf_r+0x13c>
 8008604:	9a07      	ldr	r2, [sp, #28]
 8008606:	4654      	mov	r4, sl
 8008608:	2000      	movs	r0, #0
 800860a:	f04f 0c0a 	mov.w	ip, #10
 800860e:	4621      	mov	r1, r4
 8008610:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008614:	3b30      	subs	r3, #48	; 0x30
 8008616:	2b09      	cmp	r3, #9
 8008618:	d94e      	bls.n	80086b8 <_vfiprintf_r+0x1c4>
 800861a:	b1b0      	cbz	r0, 800864a <_vfiprintf_r+0x156>
 800861c:	9207      	str	r2, [sp, #28]
 800861e:	e014      	b.n	800864a <_vfiprintf_r+0x156>
 8008620:	eba0 0308 	sub.w	r3, r0, r8
 8008624:	fa09 f303 	lsl.w	r3, r9, r3
 8008628:	4313      	orrs	r3, r2
 800862a:	9304      	str	r3, [sp, #16]
 800862c:	46a2      	mov	sl, r4
 800862e:	e7d2      	b.n	80085d6 <_vfiprintf_r+0xe2>
 8008630:	9b03      	ldr	r3, [sp, #12]
 8008632:	1d19      	adds	r1, r3, #4
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	9103      	str	r1, [sp, #12]
 8008638:	2b00      	cmp	r3, #0
 800863a:	bfbb      	ittet	lt
 800863c:	425b      	neglt	r3, r3
 800863e:	f042 0202 	orrlt.w	r2, r2, #2
 8008642:	9307      	strge	r3, [sp, #28]
 8008644:	9307      	strlt	r3, [sp, #28]
 8008646:	bfb8      	it	lt
 8008648:	9204      	strlt	r2, [sp, #16]
 800864a:	7823      	ldrb	r3, [r4, #0]
 800864c:	2b2e      	cmp	r3, #46	; 0x2e
 800864e:	d10c      	bne.n	800866a <_vfiprintf_r+0x176>
 8008650:	7863      	ldrb	r3, [r4, #1]
 8008652:	2b2a      	cmp	r3, #42	; 0x2a
 8008654:	d135      	bne.n	80086c2 <_vfiprintf_r+0x1ce>
 8008656:	9b03      	ldr	r3, [sp, #12]
 8008658:	1d1a      	adds	r2, r3, #4
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	9203      	str	r2, [sp, #12]
 800865e:	2b00      	cmp	r3, #0
 8008660:	bfb8      	it	lt
 8008662:	f04f 33ff 	movlt.w	r3, #4294967295
 8008666:	3402      	adds	r4, #2
 8008668:	9305      	str	r3, [sp, #20]
 800866a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008750 <_vfiprintf_r+0x25c>
 800866e:	7821      	ldrb	r1, [r4, #0]
 8008670:	2203      	movs	r2, #3
 8008672:	4650      	mov	r0, sl
 8008674:	f7f7 fdbc 	bl	80001f0 <memchr>
 8008678:	b140      	cbz	r0, 800868c <_vfiprintf_r+0x198>
 800867a:	2340      	movs	r3, #64	; 0x40
 800867c:	eba0 000a 	sub.w	r0, r0, sl
 8008680:	fa03 f000 	lsl.w	r0, r3, r0
 8008684:	9b04      	ldr	r3, [sp, #16]
 8008686:	4303      	orrs	r3, r0
 8008688:	3401      	adds	r4, #1
 800868a:	9304      	str	r3, [sp, #16]
 800868c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008690:	482c      	ldr	r0, [pc, #176]	; (8008744 <_vfiprintf_r+0x250>)
 8008692:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008696:	2206      	movs	r2, #6
 8008698:	f7f7 fdaa 	bl	80001f0 <memchr>
 800869c:	2800      	cmp	r0, #0
 800869e:	d03f      	beq.n	8008720 <_vfiprintf_r+0x22c>
 80086a0:	4b29      	ldr	r3, [pc, #164]	; (8008748 <_vfiprintf_r+0x254>)
 80086a2:	bb1b      	cbnz	r3, 80086ec <_vfiprintf_r+0x1f8>
 80086a4:	9b03      	ldr	r3, [sp, #12]
 80086a6:	3307      	adds	r3, #7
 80086a8:	f023 0307 	bic.w	r3, r3, #7
 80086ac:	3308      	adds	r3, #8
 80086ae:	9303      	str	r3, [sp, #12]
 80086b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b2:	443b      	add	r3, r7
 80086b4:	9309      	str	r3, [sp, #36]	; 0x24
 80086b6:	e767      	b.n	8008588 <_vfiprintf_r+0x94>
 80086b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80086bc:	460c      	mov	r4, r1
 80086be:	2001      	movs	r0, #1
 80086c0:	e7a5      	b.n	800860e <_vfiprintf_r+0x11a>
 80086c2:	2300      	movs	r3, #0
 80086c4:	3401      	adds	r4, #1
 80086c6:	9305      	str	r3, [sp, #20]
 80086c8:	4619      	mov	r1, r3
 80086ca:	f04f 0c0a 	mov.w	ip, #10
 80086ce:	4620      	mov	r0, r4
 80086d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086d4:	3a30      	subs	r2, #48	; 0x30
 80086d6:	2a09      	cmp	r2, #9
 80086d8:	d903      	bls.n	80086e2 <_vfiprintf_r+0x1ee>
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0c5      	beq.n	800866a <_vfiprintf_r+0x176>
 80086de:	9105      	str	r1, [sp, #20]
 80086e0:	e7c3      	b.n	800866a <_vfiprintf_r+0x176>
 80086e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80086e6:	4604      	mov	r4, r0
 80086e8:	2301      	movs	r3, #1
 80086ea:	e7f0      	b.n	80086ce <_vfiprintf_r+0x1da>
 80086ec:	ab03      	add	r3, sp, #12
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	462a      	mov	r2, r5
 80086f2:	4b16      	ldr	r3, [pc, #88]	; (800874c <_vfiprintf_r+0x258>)
 80086f4:	a904      	add	r1, sp, #16
 80086f6:	4630      	mov	r0, r6
 80086f8:	f3af 8000 	nop.w
 80086fc:	4607      	mov	r7, r0
 80086fe:	1c78      	adds	r0, r7, #1
 8008700:	d1d6      	bne.n	80086b0 <_vfiprintf_r+0x1bc>
 8008702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008704:	07d9      	lsls	r1, r3, #31
 8008706:	d405      	bmi.n	8008714 <_vfiprintf_r+0x220>
 8008708:	89ab      	ldrh	r3, [r5, #12]
 800870a:	059a      	lsls	r2, r3, #22
 800870c:	d402      	bmi.n	8008714 <_vfiprintf_r+0x220>
 800870e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008710:	f7ff fa92 	bl	8007c38 <__retarget_lock_release_recursive>
 8008714:	89ab      	ldrh	r3, [r5, #12]
 8008716:	065b      	lsls	r3, r3, #25
 8008718:	f53f af12 	bmi.w	8008540 <_vfiprintf_r+0x4c>
 800871c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800871e:	e711      	b.n	8008544 <_vfiprintf_r+0x50>
 8008720:	ab03      	add	r3, sp, #12
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	462a      	mov	r2, r5
 8008726:	4b09      	ldr	r3, [pc, #36]	; (800874c <_vfiprintf_r+0x258>)
 8008728:	a904      	add	r1, sp, #16
 800872a:	4630      	mov	r0, r6
 800872c:	f000 f880 	bl	8008830 <_printf_i>
 8008730:	e7e4      	b.n	80086fc <_vfiprintf_r+0x208>
 8008732:	bf00      	nop
 8008734:	08008cac 	.word	0x08008cac
 8008738:	08008ccc 	.word	0x08008ccc
 800873c:	08008c8c 	.word	0x08008c8c
 8008740:	08008cf0 	.word	0x08008cf0
 8008744:	08008cfa 	.word	0x08008cfa
 8008748:	00000000 	.word	0x00000000
 800874c:	080084cf 	.word	0x080084cf
 8008750:	08008cf6 	.word	0x08008cf6

08008754 <_printf_common>:
 8008754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008758:	4616      	mov	r6, r2
 800875a:	4699      	mov	r9, r3
 800875c:	688a      	ldr	r2, [r1, #8]
 800875e:	690b      	ldr	r3, [r1, #16]
 8008760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008764:	4293      	cmp	r3, r2
 8008766:	bfb8      	it	lt
 8008768:	4613      	movlt	r3, r2
 800876a:	6033      	str	r3, [r6, #0]
 800876c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008770:	4607      	mov	r7, r0
 8008772:	460c      	mov	r4, r1
 8008774:	b10a      	cbz	r2, 800877a <_printf_common+0x26>
 8008776:	3301      	adds	r3, #1
 8008778:	6033      	str	r3, [r6, #0]
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	0699      	lsls	r1, r3, #26
 800877e:	bf42      	ittt	mi
 8008780:	6833      	ldrmi	r3, [r6, #0]
 8008782:	3302      	addmi	r3, #2
 8008784:	6033      	strmi	r3, [r6, #0]
 8008786:	6825      	ldr	r5, [r4, #0]
 8008788:	f015 0506 	ands.w	r5, r5, #6
 800878c:	d106      	bne.n	800879c <_printf_common+0x48>
 800878e:	f104 0a19 	add.w	sl, r4, #25
 8008792:	68e3      	ldr	r3, [r4, #12]
 8008794:	6832      	ldr	r2, [r6, #0]
 8008796:	1a9b      	subs	r3, r3, r2
 8008798:	42ab      	cmp	r3, r5
 800879a:	dc26      	bgt.n	80087ea <_printf_common+0x96>
 800879c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087a0:	1e13      	subs	r3, r2, #0
 80087a2:	6822      	ldr	r2, [r4, #0]
 80087a4:	bf18      	it	ne
 80087a6:	2301      	movne	r3, #1
 80087a8:	0692      	lsls	r2, r2, #26
 80087aa:	d42b      	bmi.n	8008804 <_printf_common+0xb0>
 80087ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087b0:	4649      	mov	r1, r9
 80087b2:	4638      	mov	r0, r7
 80087b4:	47c0      	blx	r8
 80087b6:	3001      	adds	r0, #1
 80087b8:	d01e      	beq.n	80087f8 <_printf_common+0xa4>
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	68e5      	ldr	r5, [r4, #12]
 80087be:	6832      	ldr	r2, [r6, #0]
 80087c0:	f003 0306 	and.w	r3, r3, #6
 80087c4:	2b04      	cmp	r3, #4
 80087c6:	bf08      	it	eq
 80087c8:	1aad      	subeq	r5, r5, r2
 80087ca:	68a3      	ldr	r3, [r4, #8]
 80087cc:	6922      	ldr	r2, [r4, #16]
 80087ce:	bf0c      	ite	eq
 80087d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087d4:	2500      	movne	r5, #0
 80087d6:	4293      	cmp	r3, r2
 80087d8:	bfc4      	itt	gt
 80087da:	1a9b      	subgt	r3, r3, r2
 80087dc:	18ed      	addgt	r5, r5, r3
 80087de:	2600      	movs	r6, #0
 80087e0:	341a      	adds	r4, #26
 80087e2:	42b5      	cmp	r5, r6
 80087e4:	d11a      	bne.n	800881c <_printf_common+0xc8>
 80087e6:	2000      	movs	r0, #0
 80087e8:	e008      	b.n	80087fc <_printf_common+0xa8>
 80087ea:	2301      	movs	r3, #1
 80087ec:	4652      	mov	r2, sl
 80087ee:	4649      	mov	r1, r9
 80087f0:	4638      	mov	r0, r7
 80087f2:	47c0      	blx	r8
 80087f4:	3001      	adds	r0, #1
 80087f6:	d103      	bne.n	8008800 <_printf_common+0xac>
 80087f8:	f04f 30ff 	mov.w	r0, #4294967295
 80087fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008800:	3501      	adds	r5, #1
 8008802:	e7c6      	b.n	8008792 <_printf_common+0x3e>
 8008804:	18e1      	adds	r1, r4, r3
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	2030      	movs	r0, #48	; 0x30
 800880a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800880e:	4422      	add	r2, r4
 8008810:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008818:	3302      	adds	r3, #2
 800881a:	e7c7      	b.n	80087ac <_printf_common+0x58>
 800881c:	2301      	movs	r3, #1
 800881e:	4622      	mov	r2, r4
 8008820:	4649      	mov	r1, r9
 8008822:	4638      	mov	r0, r7
 8008824:	47c0      	blx	r8
 8008826:	3001      	adds	r0, #1
 8008828:	d0e6      	beq.n	80087f8 <_printf_common+0xa4>
 800882a:	3601      	adds	r6, #1
 800882c:	e7d9      	b.n	80087e2 <_printf_common+0x8e>
	...

08008830 <_printf_i>:
 8008830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008834:	460c      	mov	r4, r1
 8008836:	4691      	mov	r9, r2
 8008838:	7e27      	ldrb	r7, [r4, #24]
 800883a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800883c:	2f78      	cmp	r7, #120	; 0x78
 800883e:	4680      	mov	r8, r0
 8008840:	469a      	mov	sl, r3
 8008842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008846:	d807      	bhi.n	8008858 <_printf_i+0x28>
 8008848:	2f62      	cmp	r7, #98	; 0x62
 800884a:	d80a      	bhi.n	8008862 <_printf_i+0x32>
 800884c:	2f00      	cmp	r7, #0
 800884e:	f000 80d8 	beq.w	8008a02 <_printf_i+0x1d2>
 8008852:	2f58      	cmp	r7, #88	; 0x58
 8008854:	f000 80a3 	beq.w	800899e <_printf_i+0x16e>
 8008858:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800885c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008860:	e03a      	b.n	80088d8 <_printf_i+0xa8>
 8008862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008866:	2b15      	cmp	r3, #21
 8008868:	d8f6      	bhi.n	8008858 <_printf_i+0x28>
 800886a:	a001      	add	r0, pc, #4	; (adr r0, 8008870 <_printf_i+0x40>)
 800886c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008870:	080088c9 	.word	0x080088c9
 8008874:	080088dd 	.word	0x080088dd
 8008878:	08008859 	.word	0x08008859
 800887c:	08008859 	.word	0x08008859
 8008880:	08008859 	.word	0x08008859
 8008884:	08008859 	.word	0x08008859
 8008888:	080088dd 	.word	0x080088dd
 800888c:	08008859 	.word	0x08008859
 8008890:	08008859 	.word	0x08008859
 8008894:	08008859 	.word	0x08008859
 8008898:	08008859 	.word	0x08008859
 800889c:	080089e9 	.word	0x080089e9
 80088a0:	0800890d 	.word	0x0800890d
 80088a4:	080089cb 	.word	0x080089cb
 80088a8:	08008859 	.word	0x08008859
 80088ac:	08008859 	.word	0x08008859
 80088b0:	08008a0b 	.word	0x08008a0b
 80088b4:	08008859 	.word	0x08008859
 80088b8:	0800890d 	.word	0x0800890d
 80088bc:	08008859 	.word	0x08008859
 80088c0:	08008859 	.word	0x08008859
 80088c4:	080089d3 	.word	0x080089d3
 80088c8:	680b      	ldr	r3, [r1, #0]
 80088ca:	1d1a      	adds	r2, r3, #4
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	600a      	str	r2, [r1, #0]
 80088d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80088d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088d8:	2301      	movs	r3, #1
 80088da:	e0a3      	b.n	8008a24 <_printf_i+0x1f4>
 80088dc:	6825      	ldr	r5, [r4, #0]
 80088de:	6808      	ldr	r0, [r1, #0]
 80088e0:	062e      	lsls	r6, r5, #24
 80088e2:	f100 0304 	add.w	r3, r0, #4
 80088e6:	d50a      	bpl.n	80088fe <_printf_i+0xce>
 80088e8:	6805      	ldr	r5, [r0, #0]
 80088ea:	600b      	str	r3, [r1, #0]
 80088ec:	2d00      	cmp	r5, #0
 80088ee:	da03      	bge.n	80088f8 <_printf_i+0xc8>
 80088f0:	232d      	movs	r3, #45	; 0x2d
 80088f2:	426d      	negs	r5, r5
 80088f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088f8:	485e      	ldr	r0, [pc, #376]	; (8008a74 <_printf_i+0x244>)
 80088fa:	230a      	movs	r3, #10
 80088fc:	e019      	b.n	8008932 <_printf_i+0x102>
 80088fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008902:	6805      	ldr	r5, [r0, #0]
 8008904:	600b      	str	r3, [r1, #0]
 8008906:	bf18      	it	ne
 8008908:	b22d      	sxthne	r5, r5
 800890a:	e7ef      	b.n	80088ec <_printf_i+0xbc>
 800890c:	680b      	ldr	r3, [r1, #0]
 800890e:	6825      	ldr	r5, [r4, #0]
 8008910:	1d18      	adds	r0, r3, #4
 8008912:	6008      	str	r0, [r1, #0]
 8008914:	0628      	lsls	r0, r5, #24
 8008916:	d501      	bpl.n	800891c <_printf_i+0xec>
 8008918:	681d      	ldr	r5, [r3, #0]
 800891a:	e002      	b.n	8008922 <_printf_i+0xf2>
 800891c:	0669      	lsls	r1, r5, #25
 800891e:	d5fb      	bpl.n	8008918 <_printf_i+0xe8>
 8008920:	881d      	ldrh	r5, [r3, #0]
 8008922:	4854      	ldr	r0, [pc, #336]	; (8008a74 <_printf_i+0x244>)
 8008924:	2f6f      	cmp	r7, #111	; 0x6f
 8008926:	bf0c      	ite	eq
 8008928:	2308      	moveq	r3, #8
 800892a:	230a      	movne	r3, #10
 800892c:	2100      	movs	r1, #0
 800892e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008932:	6866      	ldr	r6, [r4, #4]
 8008934:	60a6      	str	r6, [r4, #8]
 8008936:	2e00      	cmp	r6, #0
 8008938:	bfa2      	ittt	ge
 800893a:	6821      	ldrge	r1, [r4, #0]
 800893c:	f021 0104 	bicge.w	r1, r1, #4
 8008940:	6021      	strge	r1, [r4, #0]
 8008942:	b90d      	cbnz	r5, 8008948 <_printf_i+0x118>
 8008944:	2e00      	cmp	r6, #0
 8008946:	d04d      	beq.n	80089e4 <_printf_i+0x1b4>
 8008948:	4616      	mov	r6, r2
 800894a:	fbb5 f1f3 	udiv	r1, r5, r3
 800894e:	fb03 5711 	mls	r7, r3, r1, r5
 8008952:	5dc7      	ldrb	r7, [r0, r7]
 8008954:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008958:	462f      	mov	r7, r5
 800895a:	42bb      	cmp	r3, r7
 800895c:	460d      	mov	r5, r1
 800895e:	d9f4      	bls.n	800894a <_printf_i+0x11a>
 8008960:	2b08      	cmp	r3, #8
 8008962:	d10b      	bne.n	800897c <_printf_i+0x14c>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	07df      	lsls	r7, r3, #31
 8008968:	d508      	bpl.n	800897c <_printf_i+0x14c>
 800896a:	6923      	ldr	r3, [r4, #16]
 800896c:	6861      	ldr	r1, [r4, #4]
 800896e:	4299      	cmp	r1, r3
 8008970:	bfde      	ittt	le
 8008972:	2330      	movle	r3, #48	; 0x30
 8008974:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008978:	f106 36ff 	addle.w	r6, r6, #4294967295
 800897c:	1b92      	subs	r2, r2, r6
 800897e:	6122      	str	r2, [r4, #16]
 8008980:	f8cd a000 	str.w	sl, [sp]
 8008984:	464b      	mov	r3, r9
 8008986:	aa03      	add	r2, sp, #12
 8008988:	4621      	mov	r1, r4
 800898a:	4640      	mov	r0, r8
 800898c:	f7ff fee2 	bl	8008754 <_printf_common>
 8008990:	3001      	adds	r0, #1
 8008992:	d14c      	bne.n	8008a2e <_printf_i+0x1fe>
 8008994:	f04f 30ff 	mov.w	r0, #4294967295
 8008998:	b004      	add	sp, #16
 800899a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899e:	4835      	ldr	r0, [pc, #212]	; (8008a74 <_printf_i+0x244>)
 80089a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80089a4:	6823      	ldr	r3, [r4, #0]
 80089a6:	680e      	ldr	r6, [r1, #0]
 80089a8:	061f      	lsls	r7, r3, #24
 80089aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80089ae:	600e      	str	r6, [r1, #0]
 80089b0:	d514      	bpl.n	80089dc <_printf_i+0x1ac>
 80089b2:	07d9      	lsls	r1, r3, #31
 80089b4:	bf44      	itt	mi
 80089b6:	f043 0320 	orrmi.w	r3, r3, #32
 80089ba:	6023      	strmi	r3, [r4, #0]
 80089bc:	b91d      	cbnz	r5, 80089c6 <_printf_i+0x196>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	f023 0320 	bic.w	r3, r3, #32
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	2310      	movs	r3, #16
 80089c8:	e7b0      	b.n	800892c <_printf_i+0xfc>
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	f043 0320 	orr.w	r3, r3, #32
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	2378      	movs	r3, #120	; 0x78
 80089d4:	4828      	ldr	r0, [pc, #160]	; (8008a78 <_printf_i+0x248>)
 80089d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089da:	e7e3      	b.n	80089a4 <_printf_i+0x174>
 80089dc:	065e      	lsls	r6, r3, #25
 80089de:	bf48      	it	mi
 80089e0:	b2ad      	uxthmi	r5, r5
 80089e2:	e7e6      	b.n	80089b2 <_printf_i+0x182>
 80089e4:	4616      	mov	r6, r2
 80089e6:	e7bb      	b.n	8008960 <_printf_i+0x130>
 80089e8:	680b      	ldr	r3, [r1, #0]
 80089ea:	6826      	ldr	r6, [r4, #0]
 80089ec:	6960      	ldr	r0, [r4, #20]
 80089ee:	1d1d      	adds	r5, r3, #4
 80089f0:	600d      	str	r5, [r1, #0]
 80089f2:	0635      	lsls	r5, r6, #24
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	d501      	bpl.n	80089fc <_printf_i+0x1cc>
 80089f8:	6018      	str	r0, [r3, #0]
 80089fa:	e002      	b.n	8008a02 <_printf_i+0x1d2>
 80089fc:	0671      	lsls	r1, r6, #25
 80089fe:	d5fb      	bpl.n	80089f8 <_printf_i+0x1c8>
 8008a00:	8018      	strh	r0, [r3, #0]
 8008a02:	2300      	movs	r3, #0
 8008a04:	6123      	str	r3, [r4, #16]
 8008a06:	4616      	mov	r6, r2
 8008a08:	e7ba      	b.n	8008980 <_printf_i+0x150>
 8008a0a:	680b      	ldr	r3, [r1, #0]
 8008a0c:	1d1a      	adds	r2, r3, #4
 8008a0e:	600a      	str	r2, [r1, #0]
 8008a10:	681e      	ldr	r6, [r3, #0]
 8008a12:	6862      	ldr	r2, [r4, #4]
 8008a14:	2100      	movs	r1, #0
 8008a16:	4630      	mov	r0, r6
 8008a18:	f7f7 fbea 	bl	80001f0 <memchr>
 8008a1c:	b108      	cbz	r0, 8008a22 <_printf_i+0x1f2>
 8008a1e:	1b80      	subs	r0, r0, r6
 8008a20:	6060      	str	r0, [r4, #4]
 8008a22:	6863      	ldr	r3, [r4, #4]
 8008a24:	6123      	str	r3, [r4, #16]
 8008a26:	2300      	movs	r3, #0
 8008a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a2c:	e7a8      	b.n	8008980 <_printf_i+0x150>
 8008a2e:	6923      	ldr	r3, [r4, #16]
 8008a30:	4632      	mov	r2, r6
 8008a32:	4649      	mov	r1, r9
 8008a34:	4640      	mov	r0, r8
 8008a36:	47d0      	blx	sl
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d0ab      	beq.n	8008994 <_printf_i+0x164>
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	079b      	lsls	r3, r3, #30
 8008a40:	d413      	bmi.n	8008a6a <_printf_i+0x23a>
 8008a42:	68e0      	ldr	r0, [r4, #12]
 8008a44:	9b03      	ldr	r3, [sp, #12]
 8008a46:	4298      	cmp	r0, r3
 8008a48:	bfb8      	it	lt
 8008a4a:	4618      	movlt	r0, r3
 8008a4c:	e7a4      	b.n	8008998 <_printf_i+0x168>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	4632      	mov	r2, r6
 8008a52:	4649      	mov	r1, r9
 8008a54:	4640      	mov	r0, r8
 8008a56:	47d0      	blx	sl
 8008a58:	3001      	adds	r0, #1
 8008a5a:	d09b      	beq.n	8008994 <_printf_i+0x164>
 8008a5c:	3501      	adds	r5, #1
 8008a5e:	68e3      	ldr	r3, [r4, #12]
 8008a60:	9903      	ldr	r1, [sp, #12]
 8008a62:	1a5b      	subs	r3, r3, r1
 8008a64:	42ab      	cmp	r3, r5
 8008a66:	dcf2      	bgt.n	8008a4e <_printf_i+0x21e>
 8008a68:	e7eb      	b.n	8008a42 <_printf_i+0x212>
 8008a6a:	2500      	movs	r5, #0
 8008a6c:	f104 0619 	add.w	r6, r4, #25
 8008a70:	e7f5      	b.n	8008a5e <_printf_i+0x22e>
 8008a72:	bf00      	nop
 8008a74:	08008d01 	.word	0x08008d01
 8008a78:	08008d12 	.word	0x08008d12

08008a7c <_read_r>:
 8008a7c:	b538      	push	{r3, r4, r5, lr}
 8008a7e:	4d07      	ldr	r5, [pc, #28]	; (8008a9c <_read_r+0x20>)
 8008a80:	4604      	mov	r4, r0
 8008a82:	4608      	mov	r0, r1
 8008a84:	4611      	mov	r1, r2
 8008a86:	2200      	movs	r2, #0
 8008a88:	602a      	str	r2, [r5, #0]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	f7f8 fd40 	bl	8001510 <_read>
 8008a90:	1c43      	adds	r3, r0, #1
 8008a92:	d102      	bne.n	8008a9a <_read_r+0x1e>
 8008a94:	682b      	ldr	r3, [r5, #0]
 8008a96:	b103      	cbz	r3, 8008a9a <_read_r+0x1e>
 8008a98:	6023      	str	r3, [r4, #0]
 8008a9a:	bd38      	pop	{r3, r4, r5, pc}
 8008a9c:	20004ea0 	.word	0x20004ea0

08008aa0 <_fstat_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4d07      	ldr	r5, [pc, #28]	; (8008ac0 <_fstat_r+0x20>)
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	4608      	mov	r0, r1
 8008aaa:	4611      	mov	r1, r2
 8008aac:	602b      	str	r3, [r5, #0]
 8008aae:	f7f8 fd58 	bl	8001562 <_fstat>
 8008ab2:	1c43      	adds	r3, r0, #1
 8008ab4:	d102      	bne.n	8008abc <_fstat_r+0x1c>
 8008ab6:	682b      	ldr	r3, [r5, #0]
 8008ab8:	b103      	cbz	r3, 8008abc <_fstat_r+0x1c>
 8008aba:	6023      	str	r3, [r4, #0]
 8008abc:	bd38      	pop	{r3, r4, r5, pc}
 8008abe:	bf00      	nop
 8008ac0:	20004ea0 	.word	0x20004ea0

08008ac4 <_isatty_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4d06      	ldr	r5, [pc, #24]	; (8008ae0 <_isatty_r+0x1c>)
 8008ac8:	2300      	movs	r3, #0
 8008aca:	4604      	mov	r4, r0
 8008acc:	4608      	mov	r0, r1
 8008ace:	602b      	str	r3, [r5, #0]
 8008ad0:	f7f8 fd57 	bl	8001582 <_isatty>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_isatty_r+0x1a>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_isatty_r+0x1a>
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	20004ea0 	.word	0x20004ea0

08008ae4 <_init>:
 8008ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae6:	bf00      	nop
 8008ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aea:	bc08      	pop	{r3}
 8008aec:	469e      	mov	lr, r3
 8008aee:	4770      	bx	lr

08008af0 <_fini>:
 8008af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af2:	bf00      	nop
 8008af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008af6:	bc08      	pop	{r3}
 8008af8:	469e      	mov	lr, r3
 8008afa:	4770      	bx	lr
