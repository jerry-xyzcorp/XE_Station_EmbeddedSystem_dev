
XEstation_MachineControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060a8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006258  08006258  00016258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006358  08006358  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08006358  08006358  00016358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006360  08006360  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006364  08006364  00016364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08006368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          00000784  200001f0  200001f0  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000974  20000974  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b966  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003786  00000000  00000000  0003bb86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001428  00000000  00000000  0003f310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012e0  00000000  00000000  00040738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004c60  00000000  00000000  00041a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016b7d  00000000  00000000  00046678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e63c5  00000000  00000000  0005d1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001435ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b4c  00000000  00000000  00143610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006240 	.word	0x08006240

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	08006240 	.word	0x08006240

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <HAL_UART_RxCpltCallback>:
//	if(HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 10) == HAL_OK)
//		return len;
//	return -1;
//}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a2a      	ldr	r2, [pc, #168]	; (8000640 <HAL_UART_RxCpltCallback+0xb8>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d04e      	beq.n	8000638 <HAL_UART_RxCpltCallback+0xb0>
//		HAL_UART_Transmit(&huart3, (uint8_t *)test_arr, sizeof(test_arr), 100);
//		pc_comm_flag = true;
//
//		HAL_UART_Receive_IT(&huart3, pc_res_packet, sizeof(pc_res_packet));
	}
	else if (huart->Instance == UART5)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a29      	ldr	r2, [pc, #164]	; (8000644 <HAL_UART_RxCpltCallback+0xbc>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d122      	bne.n	80005ea <HAL_UART_RxCpltCallback+0x62>
	{
		HAL_UART_Transmit(&huart3, cupD_res_packet, sizeof(cupD_res_packet), 100);
 80005a4:	2364      	movs	r3, #100	; 0x64
 80005a6:	220a      	movs	r2, #10
 80005a8:	4927      	ldr	r1, [pc, #156]	; (8000648 <HAL_UART_RxCpltCallback+0xc0>)
 80005aa:	4828      	ldr	r0, [pc, #160]	; (800064c <HAL_UART_RxCpltCallback+0xc4>)
 80005ac:	f003 fb27 	bl	8003bfe <HAL_UART_Transmit>

		// calc checksum
		int chksum = 0x00;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
		for(int i=1; i<RES_PACKET_BCC; i++){
 80005b4:	2301      	movs	r3, #1
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	e00a      	b.n	80005d0 <HAL_UART_RxCpltCallback+0x48>
			chksum += cupD_res_packet[i];
 80005ba:	4a23      	ldr	r2, [pc, #140]	; (8000648 <HAL_UART_RxCpltCallback+0xc0>)
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	4413      	add	r3, r2
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	461a      	mov	r2, r3
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	4413      	add	r3, r2
 80005c8:	617b      	str	r3, [r7, #20]
		for(int i=1; i<RES_PACKET_BCC; i++){
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	3301      	adds	r3, #1
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]
 80005d2:	2b09      	cmp	r3, #9
 80005d4:	ddf1      	ble.n	80005ba <HAL_UART_RxCpltCallback+0x32>
		}
		if (cupD_res_packet[RES_PACKET_BCC] == chksum)
 80005d6:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <HAL_UART_RxCpltCallback+0xc0>)
 80005d8:	7a9b      	ldrb	r3, [r3, #10]
 80005da:	461a      	mov	r2, r3
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	4293      	cmp	r3, r2
 80005e0:	d12a      	bne.n	8000638 <HAL_UART_RxCpltCallback+0xb0>
			printf("check sum error!");
 80005e2:	481b      	ldr	r0, [pc, #108]	; (8000650 <HAL_UART_RxCpltCallback+0xc8>)
 80005e4:	f005 f878 	bl	80056d8 <iprintf>
		if (LidD_res_packet[RES_PACKET_BCC] == chksum)
			printf("check sum error!");

//	    HAL_UART_Receive_IT(&huart6, LidD_res_packet, sizeof(LidD_res_packet));
	}
}
 80005e8:	e026      	b.n	8000638 <HAL_UART_RxCpltCallback+0xb0>
	else if (huart->Instance == USART6)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a19      	ldr	r2, [pc, #100]	; (8000654 <HAL_UART_RxCpltCallback+0xcc>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d121      	bne.n	8000638 <HAL_UART_RxCpltCallback+0xb0>
		HAL_UART_Transmit(&huart3, LidD_res_packet, sizeof(LidD_res_packet), 100);
 80005f4:	2364      	movs	r3, #100	; 0x64
 80005f6:	220a      	movs	r2, #10
 80005f8:	4917      	ldr	r1, [pc, #92]	; (8000658 <HAL_UART_RxCpltCallback+0xd0>)
 80005fa:	4814      	ldr	r0, [pc, #80]	; (800064c <HAL_UART_RxCpltCallback+0xc4>)
 80005fc:	f003 faff 	bl	8003bfe <HAL_UART_Transmit>
		int chksum = 0x00;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
		for(int i=1; i<RES_PACKET_BCC; i++){
 8000604:	2301      	movs	r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	e00a      	b.n	8000620 <HAL_UART_RxCpltCallback+0x98>
			chksum += LidD_res_packet[i];
 800060a:	4a13      	ldr	r2, [pc, #76]	; (8000658 <HAL_UART_RxCpltCallback+0xd0>)
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	4413      	add	r3, r2
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
		for(int i=1; i<RES_PACKET_BCC; i++){
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	3301      	adds	r3, #1
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	2b09      	cmp	r3, #9
 8000624:	ddf1      	ble.n	800060a <HAL_UART_RxCpltCallback+0x82>
		if (LidD_res_packet[RES_PACKET_BCC] == chksum)
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <HAL_UART_RxCpltCallback+0xd0>)
 8000628:	7a9b      	ldrb	r3, [r3, #10]
 800062a:	461a      	mov	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4293      	cmp	r3, r2
 8000630:	d102      	bne.n	8000638 <HAL_UART_RxCpltCallback+0xb0>
			printf("check sum error!");
 8000632:	4807      	ldr	r0, [pc, #28]	; (8000650 <HAL_UART_RxCpltCallback+0xc8>)
 8000634:	f005 f850 	bl	80056d8 <iprintf>
}
 8000638:	bf00      	nop
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40004800 	.word	0x40004800
 8000644:	40005000 	.word	0x40005000
 8000648:	20000270 	.word	0x20000270
 800064c:	2000076c 	.word	0x2000076c
 8000650:	0800627c 	.word	0x0800627c
 8000654:	40011400 	.word	0x40011400
 8000658:	2000027c 	.word	0x2000027c

0800065c <pcSerialTest>:


void pcSerialTest(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
	uint8_t buf = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	70fb      	strb	r3, [r7, #3]
	uint8_t stx = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	70bb      	strb	r3, [r7, #2]
	uint8_t len = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	707b      	strb	r3, [r7, #1]

	// receive packet
	HAL_UART_Receive(&huart3, &stx, sizeof(stx), 10);
 800066e:	1cb9      	adds	r1, r7, #2
 8000670:	230a      	movs	r3, #10
 8000672:	2201      	movs	r2, #1
 8000674:	4836      	ldr	r0, [pc, #216]	; (8000750 <pcSerialTest+0xf4>)
 8000676:	f003 fb54 	bl	8003d22 <HAL_UART_Receive>


	// STX
	if (stx == 0x02){
 800067a:	78bb      	ldrb	r3, [r7, #2]
 800067c:	2b02      	cmp	r3, #2
 800067e:	d162      	bne.n	8000746 <pcSerialTest+0xea>

		// LEN
		HAL_UART_Receive(&huart3, &len, sizeof(len), 10);
 8000680:	1c79      	adds	r1, r7, #1
 8000682:	230a      	movs	r3, #10
 8000684:	2201      	movs	r2, #1
 8000686:	4832      	ldr	r0, [pc, #200]	; (8000750 <pcSerialTest+0xf4>)
 8000688:	f003 fb4b 	bl	8003d22 <HAL_UART_Receive>
		uint8_t *data_arr = (uint8_t*)malloc(sizeof(uint8_t) * (len+3));
 800068c:	787b      	ldrb	r3, [r7, #1]
 800068e:	3303      	adds	r3, #3
 8000690:	4618      	mov	r0, r3
 8000692:	f004 ff5f 	bl	8005554 <malloc>
 8000696:	4603      	mov	r3, r0
 8000698:	607b      	str	r3, [r7, #4]

		for(int i=0; i<len+3; i++){
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
 800069e:	e007      	b.n	80006b0 <pcSerialTest+0x54>
			data_arr[i] = 0;
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<len+3; i++){
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	3301      	adds	r3, #1
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	787b      	ldrb	r3, [r7, #1]
 80006b2:	3302      	adds	r3, #2
 80006b4:	697a      	ldr	r2, [r7, #20]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	ddf2      	ble.n	80006a0 <pcSerialTest+0x44>
		}

		data_arr[0] = 0x02;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2202      	movs	r2, #2
 80006be:	701a      	strb	r2, [r3, #0]
		data_arr[1] = len;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3301      	adds	r3, #1
 80006c4:	787a      	ldrb	r2, [r7, #1]
 80006c6:	701a      	strb	r2, [r3, #0]

		for(int i=2; i<len+2; i++)
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	e010      	b.n	80006f0 <pcSerialTest+0x94>
		{
			HAL_UART_Receive(&huart3, &buf, sizeof(buf), 10);
 80006ce:	1cf9      	adds	r1, r7, #3
 80006d0:	230a      	movs	r3, #10
 80006d2:	2201      	movs	r2, #1
 80006d4:	481e      	ldr	r0, [pc, #120]	; (8000750 <pcSerialTest+0xf4>)
 80006d6:	f003 fb24 	bl	8003d22 <HAL_UART_Receive>

			if(buf != NULL)
 80006da:	78fb      	ldrb	r3, [r7, #3]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d004      	beq.n	80006ea <pcSerialTest+0x8e>
				data_arr[i] = buf;
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	78fa      	ldrb	r2, [r7, #3]
 80006e8:	701a      	strb	r2, [r3, #0]
		for(int i=2; i<len+2; i++)
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	3301      	adds	r3, #1
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	787b      	ldrb	r3, [r7, #1]
 80006f2:	3301      	adds	r3, #1
 80006f4:	693a      	ldr	r2, [r7, #16]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	dde9      	ble.n	80006ce <pcSerialTest+0x72>
		}


		// check checksum
		uint8_t CheckSum = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
		for(int i = 2; i < len; i++)
 80006fe:	2302      	movs	r3, #2
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	e009      	b.n	8000718 <pcSerialTest+0xbc>
			CheckSum ^= data_arr[i];
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	781a      	ldrb	r2, [r3, #0]
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	4053      	eors	r3, r2
 8000710:	73fb      	strb	r3, [r7, #15]
		for(int i = 2; i < len; i++)
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	3301      	adds	r3, #1
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	787b      	ldrb	r3, [r7, #1]
 800071a:	461a      	mov	r2, r3
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	4293      	cmp	r3, r2
 8000720:	dbf0      	blt.n	8000704 <pcSerialTest+0xa8>

		data_arr[len+2] = CheckSum;
 8000722:	787b      	ldrb	r3, [r7, #1]
 8000724:	3302      	adds	r3, #2
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	7bfa      	ldrb	r2, [r7, #15]
 800072c:	701a      	strb	r2, [r3, #0]

		// transmit packet
		HAL_UART_Transmit(&huart3, (uint8_t *)data_arr, (len+3), 100);
 800072e:	787b      	ldrb	r3, [r7, #1]
 8000730:	b29b      	uxth	r3, r3
 8000732:	3303      	adds	r3, #3
 8000734:	b29a      	uxth	r2, r3
 8000736:	2364      	movs	r3, #100	; 0x64
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <pcSerialTest+0xf4>)
 800073c:	f003 fa5f 	bl	8003bfe <HAL_UART_Transmit>
		free(data_arr);
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f004 ff0f 	bl	8005564 <free>
	}

//		HAL_UART_Receive(&huart3, &stx, sizeof(stx), 10);

}
 8000746:	bf00      	nop
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000076c 	.word	0x2000076c

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f001 f824 	bl	80017a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f822 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000760:	f000 faea 	bl	8000d38 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000764:	f000 f88e 	bl	8000884 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000768:	f000 f8de 	bl	8000928 <MX_TIM2_Init>
  MX_TIM3_Init();
 800076c:	f000 f95e 	bl	8000a2c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000770:	f000 f9e0 	bl	8000b34 <MX_TIM4_Init>
  MX_UART5_Init();
 8000774:	f000 fa62 	bl	8000c3c <MX_UART5_Init>
  MX_USART3_UART_Init();
 8000778:	f000 fa8a 	bl	8000c90 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800077c:	f000 fab2 	bl	8000ce4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  initCupLidDispensor();
 8000780:	f004 fd98 	bl	80052b4 <initCupLidDispensor>
  init_powderMachine();
 8000784:	f004 fc82 	bl	800508c <init_powderMachine>
  init_iceDispensor();
 8000788:	f004 fd9e 	bl	80052c8 <init_iceDispensor>

  HAL_UART_Receive_IT(&huart3, pc_res_packet, sizeof(pc_res_packet));
 800078c:	2264      	movs	r2, #100	; 0x64
 800078e:	4903      	ldr	r1, [pc, #12]	; (800079c <main+0x48>)
 8000790:	4803      	ldr	r0, [pc, #12]	; (80007a0 <main+0x4c>)
 8000792:	f003 fb68 	bl	8003e66 <HAL_UART_Receive_IT>

    /* USER CODE BEGIN 3 */
//	  SteppingMotorTest();
//	  L298Ntest();
//	  heaterTest();
	  pcSerialTest();
 8000796:	f7ff ff61 	bl	800065c <pcSerialTest>
 800079a:	e7fc      	b.n	8000796 <main+0x42>
 800079c:	2000020c 	.word	0x2000020c
 80007a0:	2000076c 	.word	0x2000076c

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	; 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	2230      	movs	r2, #48	; 0x30
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f004 fede 	bl	8005574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	4b2b      	ldr	r3, [pc, #172]	; (800087c <SystemClock_Config+0xd8>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a2a      	ldr	r2, [pc, #168]	; (800087c <SystemClock_Config+0xd8>)
 80007d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <SystemClock_Config+0xd8>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <SystemClock_Config+0xdc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a24      	ldr	r2, [pc, #144]	; (8000880 <SystemClock_Config+0xdc>)
 80007ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <SystemClock_Config+0xdc>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000800:	2302      	movs	r3, #2
 8000802:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000808:	2310      	movs	r3, #16
 800080a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080c:	2302      	movs	r3, #2
 800080e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000810:	2300      	movs	r3, #0
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000814:	2308      	movs	r3, #8
 8000816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000818:	23b4      	movs	r3, #180	; 0xb4
 800081a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800081c:	2302      	movs	r3, #2
 800081e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000820:	2304      	movs	r3, #4
 8000822:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 0320 	add.w	r3, r7, #32
 8000828:	4618      	mov	r0, r3
 800082a:	f001 fbab 	bl	8001f84 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000834:	f000 fbe8 	bl	8001008 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000838:	f001 fb54 	bl	8001ee4 <HAL_PWREx_EnableOverDrive>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000842:	f000 fbe1 	bl	8001008 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2302      	movs	r3, #2
 800084c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000852:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000856:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2105      	movs	r1, #5
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fe05 	bl	8002474 <HAL_RCC_ClockConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000870:	f000 fbca 	bl	8001008 <Error_Handler>
  }
}
 8000874:	bf00      	nop
 8000876:	3750      	adds	r7, #80	; 0x50
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000898:	463b      	mov	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <MX_TIM1_Init+0x9c>)
 80008a2:	4a20      	ldr	r2, [pc, #128]	; (8000924 <MX_TIM1_Init+0xa0>)
 80008a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1800-1;
 80008a6:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <MX_TIM1_Init+0x9c>)
 80008a8:	f240 7207 	movw	r2, #1799	; 0x707
 80008ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ae:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <MX_TIM1_Init+0x9c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_TIM1_Init+0x9c>)
 80008b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <MX_TIM1_Init+0x9c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_TIM1_Init+0x9c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_TIM1_Init+0x9c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ce:	4814      	ldr	r0, [pc, #80]	; (8000920 <MX_TIM1_Init+0x9c>)
 80008d0:	f001 ffd2 	bl	8002878 <HAL_TIM_Base_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80008da:	f000 fb95 	bl	8001008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	4619      	mov	r1, r3
 80008ea:	480d      	ldr	r0, [pc, #52]	; (8000920 <MX_TIM1_Init+0x9c>)
 80008ec:	f002 fbd8 	bl	80030a0 <HAL_TIM_ConfigClockSource>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80008f6:	f000 fb87 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	4619      	mov	r1, r3
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <MX_TIM1_Init+0x9c>)
 8000908:	f003 f89c 	bl	8003a44 <HAL_TIMEx_MasterConfigSynchronization>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000912:	f000 fb79 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000840 	.word	0x20000840
 8000924:	40010000 	.word	0x40010000

08000928 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08e      	sub	sp, #56	; 0x38
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800092e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000948:	463b      	mov	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
 8000956:	615a      	str	r2, [r3, #20]
 8000958:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800095a:	4b33      	ldr	r3, [pc, #204]	; (8000a28 <MX_TIM2_Init+0x100>)
 800095c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000960:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000962:	4b31      	ldr	r3, [pc, #196]	; (8000a28 <MX_TIM2_Init+0x100>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <MX_TIM2_Init+0x100>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800096e:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <MX_TIM2_Init+0x100>)
 8000970:	f04f 32ff 	mov.w	r2, #4294967295
 8000974:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <MX_TIM2_Init+0x100>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <MX_TIM2_Init+0x100>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000982:	4829      	ldr	r0, [pc, #164]	; (8000a28 <MX_TIM2_Init+0x100>)
 8000984:	f001 ff78 	bl	8002878 <HAL_TIM_Base_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800098e:	f000 fb3b 	bl	8001008 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000992:	4825      	ldr	r0, [pc, #148]	; (8000a28 <MX_TIM2_Init+0x100>)
 8000994:	f002 f898 	bl	8002ac8 <HAL_TIM_PWM_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800099e:	f000 fb33 	bl	8001008 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4619      	mov	r1, r3
 80009b0:	481d      	ldr	r0, [pc, #116]	; (8000a28 <MX_TIM2_Init+0x100>)
 80009b2:	f002 fc3c 	bl	800322e <HAL_TIM_SlaveConfigSynchro>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80009bc:	f000 fb24 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4816      	ldr	r0, [pc, #88]	; (8000a28 <MX_TIM2_Init+0x100>)
 80009d0:	f003 f838 	bl	8003a44 <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80009da:	f000 fb15 	bl	8001008 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009de:	2360      	movs	r3, #96	; 0x60
 80009e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	2200      	movs	r2, #0
 80009f2:	4619      	mov	r1, r3
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <MX_TIM2_Init+0x100>)
 80009f6:	f002 fa91 	bl	8002f1c <HAL_TIM_PWM_ConfigChannel>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000a00:	f000 fb02 	bl	8001008 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a04:	463b      	mov	r3, r7
 8000a06:	2204      	movs	r2, #4
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4807      	ldr	r0, [pc, #28]	; (8000a28 <MX_TIM2_Init+0x100>)
 8000a0c:	f002 fa86 	bl	8002f1c <HAL_TIM_PWM_ConfigChannel>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000a16:	f000 faf7 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a1a:	4803      	ldr	r0, [pc, #12]	; (8000a28 <MX_TIM2_Init+0x100>)
 8000a1c:	f000 fb8e 	bl	800113c <HAL_TIM_MspPostInit>

}
 8000a20:	bf00      	nop
 8000a22:	3738      	adds	r7, #56	; 0x38
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200008d0 	.word	0x200008d0

08000a2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08e      	sub	sp, #56	; 0x38
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
 8000a5a:	615a      	str	r2, [r3, #20]
 8000a5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a5e:	4b33      	ldr	r3, [pc, #204]	; (8000b2c <MX_TIM3_Init+0x100>)
 8000a60:	4a33      	ldr	r2, [pc, #204]	; (8000b30 <MX_TIM3_Init+0x104>)
 8000a62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a64:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <MX_TIM3_Init+0x100>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6a:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <MX_TIM3_Init+0x100>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a70:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <MX_TIM3_Init+0x100>)
 8000a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a78:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <MX_TIM3_Init+0x100>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7e:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <MX_TIM3_Init+0x100>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a84:	4829      	ldr	r0, [pc, #164]	; (8000b2c <MX_TIM3_Init+0x100>)
 8000a86:	f001 fef7 	bl	8002878 <HAL_TIM_Base_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000a90:	f000 faba 	bl	8001008 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a94:	4825      	ldr	r0, [pc, #148]	; (8000b2c <MX_TIM3_Init+0x100>)
 8000a96:	f002 f817 	bl	8002ac8 <HAL_TIM_PWM_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000aa0:	f000 fab2 	bl	8001008 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	481e      	ldr	r0, [pc, #120]	; (8000b2c <MX_TIM3_Init+0x100>)
 8000ab4:	f002 fbbb 	bl	800322e <HAL_TIM_SlaveConfigSynchro>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000abe:	f000 faa3 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4816      	ldr	r0, [pc, #88]	; (8000b2c <MX_TIM3_Init+0x100>)
 8000ad2:	f002 ffb7 	bl	8003a44 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000adc:	f000 fa94 	bl	8001008 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae0:	2360      	movs	r3, #96	; 0x60
 8000ae2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af0:	463b      	mov	r3, r7
 8000af2:	2200      	movs	r2, #0
 8000af4:	4619      	mov	r1, r3
 8000af6:	480d      	ldr	r0, [pc, #52]	; (8000b2c <MX_TIM3_Init+0x100>)
 8000af8:	f002 fa10 	bl	8002f1c <HAL_TIM_PWM_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000b02:	f000 fa81 	bl	8001008 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b06:	463b      	mov	r3, r7
 8000b08:	2204      	movs	r2, #4
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4807      	ldr	r0, [pc, #28]	; (8000b2c <MX_TIM3_Init+0x100>)
 8000b0e:	f002 fa05 	bl	8002f1c <HAL_TIM_PWM_ConfigChannel>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000b18:	f000 fa76 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b1c:	4803      	ldr	r0, [pc, #12]	; (8000b2c <MX_TIM3_Init+0x100>)
 8000b1e:	f000 fb0d 	bl	800113c <HAL_TIM_MspPostInit>

}
 8000b22:	bf00      	nop
 8000b24:	3738      	adds	r7, #56	; 0x38
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200007b0 	.word	0x200007b0
 8000b30:	40000400 	.word	0x40000400

08000b34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08e      	sub	sp, #56	; 0x38
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b54:	463b      	mov	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
 8000b62:	615a      	str	r2, [r3, #20]
 8000b64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b66:	4b33      	ldr	r3, [pc, #204]	; (8000c34 <MX_TIM4_Init+0x100>)
 8000b68:	4a33      	ldr	r2, [pc, #204]	; (8000c38 <MX_TIM4_Init+0x104>)
 8000b6a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b6c:	4b31      	ldr	r3, [pc, #196]	; (8000c34 <MX_TIM4_Init+0x100>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b72:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <MX_TIM4_Init+0x100>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b78:	4b2e      	ldr	r3, [pc, #184]	; (8000c34 <MX_TIM4_Init+0x100>)
 8000b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b2c      	ldr	r3, [pc, #176]	; (8000c34 <MX_TIM4_Init+0x100>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b86:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <MX_TIM4_Init+0x100>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b8c:	4829      	ldr	r0, [pc, #164]	; (8000c34 <MX_TIM4_Init+0x100>)
 8000b8e:	f001 fe73 	bl	8002878 <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000b98:	f000 fa36 	bl	8001008 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b9c:	4825      	ldr	r0, [pc, #148]	; (8000c34 <MX_TIM4_Init+0x100>)
 8000b9e:	f001 ff93 	bl	8002ac8 <HAL_TIM_PWM_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000ba8:	f000 fa2e 	bl	8001008 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	481e      	ldr	r0, [pc, #120]	; (8000c34 <MX_TIM4_Init+0x100>)
 8000bbc:	f002 fb37 	bl	800322e <HAL_TIM_SlaveConfigSynchro>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000bc6:	f000 fa1f 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4816      	ldr	r0, [pc, #88]	; (8000c34 <MX_TIM4_Init+0x100>)
 8000bda:	f002 ff33 	bl	8003a44 <HAL_TIMEx_MasterConfigSynchronization>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000be4:	f000 fa10 	bl	8001008 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be8:	2360      	movs	r3, #96	; 0x60
 8000bea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	2208      	movs	r2, #8
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480d      	ldr	r0, [pc, #52]	; (8000c34 <MX_TIM4_Init+0x100>)
 8000c00:	f002 f98c 	bl	8002f1c <HAL_TIM_PWM_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000c0a:	f000 f9fd 	bl	8001008 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c0e:	463b      	mov	r3, r7
 8000c10:	220c      	movs	r2, #12
 8000c12:	4619      	mov	r1, r3
 8000c14:	4807      	ldr	r0, [pc, #28]	; (8000c34 <MX_TIM4_Init+0x100>)
 8000c16:	f002 f981 	bl	8002f1c <HAL_TIM_PWM_ConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8000c20:	f000 f9f2 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c24:	4803      	ldr	r0, [pc, #12]	; (8000c34 <MX_TIM4_Init+0x100>)
 8000c26:	f000 fa89 	bl	800113c <HAL_TIM_MspPostInit>

}
 8000c2a:	bf00      	nop
 8000c2c:	3738      	adds	r7, #56	; 0x38
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000724 	.word	0x20000724
 8000c38:	40000800 	.word	0x40000800

08000c3c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_UART5_Init+0x4c>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <MX_UART5_Init+0x50>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MX_UART5_Init+0x4c>)
 8000c48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c4c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_UART5_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_UART5_Init+0x4c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_UART5_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_UART5_Init+0x4c>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_UART5_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_UART5_Init+0x4c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_UART5_Init+0x4c>)
 8000c74:	f002 ff76 	bl	8003b64 <HAL_UART_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000c7e:	f000 f9c3 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200007f8 	.word	0x200007f8
 8000c8c:	40005000 	.word	0x40005000

08000c90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_USART3_UART_Init+0x4c>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <MX_USART3_UART_Init+0x50>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_USART3_UART_Init+0x4c>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_USART3_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_USART3_UART_Init+0x4c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_USART3_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_USART3_UART_Init+0x4c>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_USART3_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_USART3_UART_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_USART3_UART_Init+0x4c>)
 8000cc8:	f002 ff4c 	bl	8003b64 <HAL_UART_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cd2:	f000 f999 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000076c 	.word	0x2000076c
 8000ce0:	40004800 	.word	0x40004800

08000ce4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_USART6_UART_Init+0x4c>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <MX_USART6_UART_Init+0x50>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <MX_USART6_UART_Init+0x4c>)
 8000cf0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cf4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_USART6_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_USART6_UART_Init+0x4c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <MX_USART6_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_USART6_UART_Init+0x4c>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <MX_USART6_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_USART6_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_USART6_UART_Init+0x4c>)
 8000d1c:	f002 ff22 	bl	8003b64 <HAL_UART_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d26:	f000 f96f 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000088c 	.word	0x2000088c
 8000d34:	40011400 	.word	0x40011400

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08e      	sub	sp, #56	; 0x38
 8000d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
 8000d52:	4b9b      	ldr	r3, [pc, #620]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a9a      	ldr	r2, [pc, #616]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b98      	ldr	r3, [pc, #608]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	623b      	str	r3, [r7, #32]
 8000d68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
 8000d6e:	4b94      	ldr	r3, [pc, #592]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a93      	ldr	r2, [pc, #588]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000d74:	f043 0320 	orr.w	r3, r3, #32
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b91      	ldr	r3, [pc, #580]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0320 	and.w	r3, r3, #32
 8000d82:	61fb      	str	r3, [r7, #28]
 8000d84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
 8000d8a:	4b8d      	ldr	r3, [pc, #564]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a8c      	ldr	r2, [pc, #560]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b8a      	ldr	r3, [pc, #552]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9e:	61bb      	str	r3, [r7, #24]
 8000da0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	4b86      	ldr	r3, [pc, #536]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a85      	ldr	r2, [pc, #532]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b83      	ldr	r3, [pc, #524]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b7f      	ldr	r3, [pc, #508]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a7e      	ldr	r2, [pc, #504]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b7c      	ldr	r3, [pc, #496]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b78      	ldr	r3, [pc, #480]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a77      	ldr	r2, [pc, #476]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b75      	ldr	r3, [pc, #468]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	4b71      	ldr	r3, [pc, #452]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a70      	ldr	r2, [pc, #448]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b6e      	ldr	r3, [pc, #440]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4b6a      	ldr	r3, [pc, #424]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a69      	ldr	r2, [pc, #420]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b67      	ldr	r3, [pc, #412]	; (8000fc0 <MX_GPIO_Init+0x288>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PD02_DCmix_EN_Pin|PD04_DCpowder_IN2_Pin|PD04_DCpowder_IN1_Pin|PD01_DCmix_IN2_Pin
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f64f 71cd 	movw	r1, #65485	; 0xffcd
 8000e34:	4863      	ldr	r0, [pc, #396]	; (8000fc4 <MX_GPIO_Init+0x28c>)
 8000e36:	f001 f83b 	bl	8001eb0 <HAL_GPIO_WritePin>
                          |PD01_DCmix_IN1_Pin|CupD_STP_Pin|PD03_DCmix_IN1_Pin|CupD_DIR_Pin
                          |PD03_DCmix_IN2_Pin|LidD_STP_Pin|PD03_DCmix_EN_Pin|PD05_DCmix_IN1_Pin
                          |PD04_DCmix_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PD02_DCpowder_IN1_Pin|PD01_DCpowder_IN1_Pin|PD01_DCpowder_IN2_Pin|PD05_DCpowder_IN1_Pin
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f24f 71ac 	movw	r1, #63404	; 0xf7ac
 8000e40:	4861      	ldr	r0, [pc, #388]	; (8000fc8 <MX_GPIO_Init+0x290>)
 8000e42:	f001 f835 	bl	8001eb0 <HAL_GPIO_WritePin>
                          |PD04_DCpowder_EN_Pin|PD05_DCpowder_IN2_Pin|PD01_DCpowder_EN_Pin|CF01_heat_IN2_Pin
                          |CupD_EN_Pin|LidD_EN_Pin|LidD_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PD02_DCpowder_EN_Pin|PD02_DCpowder_IN2_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2103      	movs	r1, #3
 8000e4a:	4860      	ldr	r0, [pc, #384]	; (8000fcc <MX_GPIO_Init+0x294>)
 8000e4c:	f001 f830 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ICE01_water_Pin|ICE01_mix_Pin|PD01_heat_IN1_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2149      	movs	r1, #73	; 0x49
 8000e54:	485e      	ldr	r0, [pc, #376]	; (8000fd0 <MX_GPIO_Init+0x298>)
 8000e56:	f001 f82b 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PD04_DCmix_IN1_Pin|ICE01_ice_Pin|CF01_heat_IN1_Pin|PD03_heat_IN1_Pin
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	21f9      	movs	r1, #249	; 0xf9
 8000e5e:	485d      	ldr	r0, [pc, #372]	; (8000fd4 <MX_GPIO_Init+0x29c>)
 8000e60:	f001 f826 	bl	8001eb0 <HAL_GPIO_WritePin>
                          |PD03_heat_IN2_Pin|PD04_heat_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PD04_DCmix_IN2_Pin|PD05_DCmix_IN2_Pin|PD05_DCmix_EN_Pin|PD02_heat_IN2_Pin
 8000e64:	2200      	movs	r2, #0
 8000e66:	f64b 4121 	movw	r1, #48161	; 0xbc21
 8000e6a:	485b      	ldr	r0, [pc, #364]	; (8000fd8 <MX_GPIO_Init+0x2a0>)
 8000e6c:	f001 f820 	bl	8001eb0 <HAL_GPIO_WritePin>
                          |PD02_heat_IN1_Pin|PD01_heat_IN2_Pin|PD04_heat_IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PD03_DCpowder_EN_Pin|PD05_DCpowder_EN_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2103      	movs	r1, #3
 8000e74:	4859      	ldr	r0, [pc, #356]	; (8000fdc <MX_GPIO_Init+0x2a4>)
 8000e76:	f001 f81b 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD02_DCmix_IN2_Pin|PD02_DCmix_IN1_Pin|PD01_DCmix_EN_Pin|PD05_heat_IN1_Pin
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f64f 01e3 	movw	r1, #63715	; 0xf8e3
 8000e80:	4857      	ldr	r0, [pc, #348]	; (8000fe0 <MX_GPIO_Init+0x2a8>)
 8000e82:	f001 f815 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD02_DCmix_EN_Pin PD04_DCpowder_IN2_Pin PD04_DCpowder_IN1_Pin PD01_DCmix_IN2_Pin
                           PD01_DCmix_IN1_Pin CupD_STP_Pin PD03_DCmix_IN1_Pin CupD_DIR_Pin
                           PD03_DCmix_IN2_Pin LidD_STP_Pin PD03_DCmix_EN_Pin PD05_DCmix_IN1_Pin
                           PD04_DCmix_EN_Pin */
  GPIO_InitStruct.Pin = PD02_DCmix_EN_Pin|PD04_DCpowder_IN2_Pin|PD04_DCpowder_IN1_Pin|PD01_DCmix_IN2_Pin
 8000e86:	f64f 73cd 	movw	r3, #65485	; 0xffcd
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD01_DCmix_IN1_Pin|CupD_STP_Pin|PD03_DCmix_IN1_Pin|CupD_DIR_Pin
                          |PD03_DCmix_IN2_Pin|LidD_STP_Pin|PD03_DCmix_EN_Pin|PD05_DCmix_IN1_Pin
                          |PD04_DCmix_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4849      	ldr	r0, [pc, #292]	; (8000fc4 <MX_GPIO_Init+0x28c>)
 8000ea0:	f000 fe5a 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCpowder_IN1_Pin PD01_DCpowder_IN1_Pin PD01_DCpowder_IN2_Pin PD05_DCpowder_IN1_Pin
                           PD04_DCpowder_EN_Pin PD05_DCpowder_IN2_Pin PD01_DCpowder_EN_Pin CF01_heat_IN2_Pin
                           CupD_EN_Pin LidD_EN_Pin LidD_DIR_Pin */
  GPIO_InitStruct.Pin = PD02_DCpowder_IN1_Pin|PD01_DCpowder_IN1_Pin|PD01_DCpowder_IN2_Pin|PD05_DCpowder_IN1_Pin
 8000ea4:	f24f 73ac 	movw	r3, #63404	; 0xf7ac
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD04_DCpowder_EN_Pin|PD05_DCpowder_IN2_Pin|PD01_DCpowder_EN_Pin|CF01_heat_IN2_Pin
                          |CupD_EN_Pin|LidD_EN_Pin|LidD_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4842      	ldr	r0, [pc, #264]	; (8000fc8 <MX_GPIO_Init+0x290>)
 8000ebe:	f000 fe4b 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : Lid_up_Pin */
  GPIO_InitStruct.Pin = Lid_up_Pin;
 8000ec2:	2310      	movs	r3, #16
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Lid_up_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	483c      	ldr	r0, [pc, #240]	; (8000fc8 <MX_GPIO_Init+0x290>)
 8000ed6:	f000 fe3f 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCpowder_EN_Pin PD02_DCpowder_IN2_Pin */
  GPIO_InitStruct.Pin = PD02_DCpowder_EN_Pin|PD02_DCpowder_IN2_Pin;
 8000eda:	2303      	movs	r3, #3
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4836      	ldr	r0, [pc, #216]	; (8000fcc <MX_GPIO_Init+0x294>)
 8000ef2:	f000 fe31 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ICE01_water_Pin ICE01_mix_Pin PD01_heat_IN1_Pin */
  GPIO_InitStruct.Pin = ICE01_water_Pin|ICE01_mix_Pin|PD01_heat_IN1_Pin;
 8000ef6:	2349      	movs	r3, #73	; 0x49
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4830      	ldr	r0, [pc, #192]	; (8000fd0 <MX_GPIO_Init+0x298>)
 8000f0e:	f000 fe23 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : Cup_down_Pin */
  GPIO_InitStruct.Pin = Cup_down_Pin;
 8000f12:	2304      	movs	r3, #4
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Cup_down_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	4619      	mov	r1, r3
 8000f24:	482a      	ldr	r0, [pc, #168]	; (8000fd0 <MX_GPIO_Init+0x298>)
 8000f26:	f000 fe17 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD04_DCmix_IN1_Pin ICE01_ice_Pin CF01_heat_IN1_Pin PD03_heat_IN1_Pin
                           PD03_heat_IN2_Pin PD04_heat_IN2_Pin */
  GPIO_InitStruct.Pin = PD04_DCmix_IN1_Pin|ICE01_ice_Pin|CF01_heat_IN1_Pin|PD03_heat_IN1_Pin
 8000f2a:	23f9      	movs	r3, #249	; 0xf9
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD03_heat_IN2_Pin|PD04_heat_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4824      	ldr	r0, [pc, #144]	; (8000fd4 <MX_GPIO_Init+0x29c>)
 8000f42:	f000 fe09 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD04_DCmix_IN2_Pin PD05_DCmix_IN2_Pin PD05_DCmix_EN_Pin PD02_heat_IN2_Pin
                           PD02_heat_IN1_Pin PD01_heat_IN2_Pin PD04_heat_IN1_Pin */
  GPIO_InitStruct.Pin = PD04_DCmix_IN2_Pin|PD05_DCmix_IN2_Pin|PD05_DCmix_EN_Pin|PD02_heat_IN2_Pin
 8000f46:	f64b 4321 	movw	r3, #48161	; 0xbc21
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD02_heat_IN1_Pin|PD01_heat_IN2_Pin|PD04_heat_IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	481e      	ldr	r0, [pc, #120]	; (8000fd8 <MX_GPIO_Init+0x2a0>)
 8000f60:	f000 fdfa 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : Cup_up_Pin Lid_down_Pin */
  GPIO_InitStruct.Pin = Cup_up_Pin|Lid_down_Pin;
 8000f64:	2342      	movs	r3, #66	; 0x42
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f74:	4619      	mov	r1, r3
 8000f76:	4818      	ldr	r0, [pc, #96]	; (8000fd8 <MX_GPIO_Init+0x2a0>)
 8000f78:	f000 fdee 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD03_DCpowder_EN_Pin PD05_DCpowder_EN_Pin */
  GPIO_InitStruct.Pin = PD03_DCpowder_EN_Pin|PD05_DCpowder_EN_Pin;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f90:	4619      	mov	r1, r3
 8000f92:	4812      	ldr	r0, [pc, #72]	; (8000fdc <MX_GPIO_Init+0x2a4>)
 8000f94:	f000 fde0 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCmix_IN2_Pin PD02_DCmix_IN1_Pin PD01_DCmix_EN_Pin PD05_heat_IN1_Pin
                           PD05_heat_IN2_Pin PD03_DCpowder_IN1_Pin PD03_DCpowder_IN2_Pin PD_Fan02_relay_Pin
                           PD_Fan01_relay_Pin ICE01_relay_Pin */
  GPIO_InitStruct.Pin = PD02_DCmix_IN2_Pin|PD02_DCmix_IN1_Pin|PD01_DCmix_EN_Pin|PD05_heat_IN1_Pin
 8000f98:	f64f 03e3 	movw	r3, #63715	; 0xf8e3
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD05_heat_IN2_Pin|PD03_DCpowder_IN1_Pin|PD03_DCpowder_IN2_Pin|PD_Fan02_relay_Pin
                          |PD_Fan01_relay_Pin|ICE01_relay_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <MX_GPIO_Init+0x2a8>)
 8000fb2:	f000 fdd1 	bl	8001b58 <HAL_GPIO_Init>

}
 8000fb6:	bf00      	nop
 8000fb8:	3738      	adds	r7, #56	; 0x38
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40021400 	.word	0x40021400
 8000fcc:	40021c00 	.word	0x40021c00
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40021800 	.word	0x40021800
 8000fe0:	40020c00 	.word	0x40020c00

08000fe4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d101      	bne.n	8000ffa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ff6:	f000 fbf7 	bl	80017e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40001c00 	.word	0x40001c00

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001010:	e7fe      	b.n	8001010 <Error_Handler+0x8>
	...

08001014 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_MspInit+0x54>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a11      	ldr	r2, [pc, #68]	; (8001068 <HAL_MspInit+0x54>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <HAL_MspInit+0x54>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <HAL_MspInit+0x54>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <HAL_MspInit+0x54>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_MspInit+0x54>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	210f      	movs	r1, #15
 8001056:	f06f 0001 	mvn.w	r0, #1
 800105a:	f000 fcc1 	bl	80019e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800

0800106c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a2c      	ldr	r2, [pc, #176]	; (800112c <HAL_TIM_Base_MspInit+0xc0>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d10e      	bne.n	800109c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <HAL_TIM_Base_MspInit+0xc4>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a2a      	ldr	r2, [pc, #168]	; (8001130 <HAL_TIM_Base_MspInit+0xc4>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <HAL_TIM_Base_MspInit+0xc4>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800109a:	e042      	b.n	8001122 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a4:	d116      	bne.n	80010d4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <HAL_TIM_Base_MspInit+0xc4>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a20      	ldr	r2, [pc, #128]	; (8001130 <HAL_TIM_Base_MspInit+0xc4>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <HAL_TIM_Base_MspInit+0xc4>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2105      	movs	r1, #5
 80010c6:	201c      	movs	r0, #28
 80010c8:	f000 fc8a 	bl	80019e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010cc:	201c      	movs	r0, #28
 80010ce:	f000 fca3 	bl	8001a18 <HAL_NVIC_EnableIRQ>
}
 80010d2:	e026      	b.n	8001122 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a16      	ldr	r2, [pc, #88]	; (8001134 <HAL_TIM_Base_MspInit+0xc8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d10e      	bne.n	80010fc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_TIM_Base_MspInit+0xc4>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <HAL_TIM_Base_MspInit+0xc4>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6413      	str	r3, [r2, #64]	; 0x40
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <HAL_TIM_Base_MspInit+0xc4>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
}
 80010fa:	e012      	b.n	8001122 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <HAL_TIM_Base_MspInit+0xcc>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d10d      	bne.n	8001122 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_TIM_Base_MspInit+0xc4>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_TIM_Base_MspInit+0xc4>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_TIM_Base_MspInit+0xc4>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40010000 	.word	0x40010000
 8001130:	40023800 	.word	0x40023800
 8001134:	40000400 	.word	0x40000400
 8001138:	40000800 	.word	0x40000800

0800113c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	; 0x30
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800115c:	d13d      	bne.n	80011da <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
 8001162:	4b53      	ldr	r3, [pc, #332]	; (80012b0 <HAL_TIM_MspPostInit+0x174>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a52      	ldr	r2, [pc, #328]	; (80012b0 <HAL_TIM_MspPostInit+0x174>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b50      	ldr	r3, [pc, #320]	; (80012b0 <HAL_TIM_MspPostInit+0x174>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	61bb      	str	r3, [r7, #24]
 8001178:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <HAL_TIM_MspPostInit+0x174>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a4b      	ldr	r2, [pc, #300]	; (80012b0 <HAL_TIM_MspPostInit+0x174>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b49      	ldr	r3, [pc, #292]	; (80012b0 <HAL_TIM_MspPostInit+0x174>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PD03_heat_EN_Pin;
 8001196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011a8:	2301      	movs	r3, #1
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD03_heat_EN_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	4840      	ldr	r0, [pc, #256]	; (80012b4 <HAL_TIM_MspPostInit+0x178>)
 80011b4:	f000 fcd0 	bl	8001b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PD05_heat_EN_Pin;
 80011b8:	2308      	movs	r3, #8
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011c8:	2301      	movs	r3, #1
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD05_heat_EN_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	4839      	ldr	r0, [pc, #228]	; (80012b8 <HAL_TIM_MspPostInit+0x17c>)
 80011d4:	f000 fcc0 	bl	8001b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80011d8:	e065      	b.n	80012a6 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM3)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a37      	ldr	r2, [pc, #220]	; (80012bc <HAL_TIM_MspPostInit+0x180>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d13c      	bne.n	800125e <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <HAL_TIM_MspPostInit+0x174>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a30      	ldr	r2, [pc, #192]	; (80012b0 <HAL_TIM_MspPostInit+0x174>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
 80011f4:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <HAL_TIM_MspPostInit+0x174>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <HAL_TIM_MspPostInit+0x174>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a29      	ldr	r2, [pc, #164]	; (80012b0 <HAL_TIM_MspPostInit+0x174>)
 800120a:	f043 0302 	orr.w	r3, r3, #2
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <HAL_TIM_MspPostInit+0x174>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PD04_heat_EN_Pin;
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800122c:	2302      	movs	r3, #2
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD04_heat_EN_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	4822      	ldr	r0, [pc, #136]	; (80012c0 <HAL_TIM_MspPostInit+0x184>)
 8001238:	f000 fc8e 	bl	8001b58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CF01_heat_EN_Pin;
 800123c:	2310      	movs	r3, #16
 800123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800124c:	2302      	movs	r3, #2
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CF01_heat_EN_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	4818      	ldr	r0, [pc, #96]	; (80012b8 <HAL_TIM_MspPostInit+0x17c>)
 8001258:	f000 fc7e 	bl	8001b58 <HAL_GPIO_Init>
}
 800125c:	e023      	b.n	80012a6 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM4)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a18      	ldr	r2, [pc, #96]	; (80012c4 <HAL_TIM_MspPostInit+0x188>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d11e      	bne.n	80012a6 <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <HAL_TIM_MspPostInit+0x174>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <HAL_TIM_MspPostInit+0x174>)
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	6313      	str	r3, [r2, #48]	; 0x30
 8001278:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <HAL_TIM_MspPostInit+0x174>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PD01_heat_EN_Pin|PD02_heat_EN_Pin;
 8001284:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001296:	2302      	movs	r3, #2
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <HAL_TIM_MspPostInit+0x17c>)
 80012a2:	f000 fc59 	bl	8001b58 <HAL_GPIO_Init>
}
 80012a6:	bf00      	nop
 80012a8:	3730      	adds	r7, #48	; 0x30
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020000 	.word	0x40020000
 80012b8:	40020400 	.word	0x40020400
 80012bc:	40000400 	.word	0x40000400
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40000800 	.word	0x40000800

080012c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08e      	sub	sp, #56	; 0x38
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a67      	ldr	r2, [pc, #412]	; (8001484 <HAL_UART_MspInit+0x1bc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d153      	bne.n	8001392 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
 80012ee:	4b66      	ldr	r3, [pc, #408]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	4a65      	ldr	r2, [pc, #404]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 80012f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012f8:	6413      	str	r3, [r2, #64]	; 0x40
 80012fa:	4b63      	ldr	r3, [pc, #396]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001302:	623b      	str	r3, [r7, #32]
 8001304:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
 800130a:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a5e      	ldr	r2, [pc, #376]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b5c      	ldr	r3, [pc, #368]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
 8001326:	4b58      	ldr	r3, [pc, #352]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a57      	ldr	r2, [pc, #348]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b55      	ldr	r3, [pc, #340]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = CupD_TX_Pin;
 800133e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001350:	2308      	movs	r3, #8
 8001352:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CupD_TX_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	4619      	mov	r1, r3
 800135a:	484c      	ldr	r0, [pc, #304]	; (800148c <HAL_UART_MspInit+0x1c4>)
 800135c:	f000 fbfc 	bl	8001b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CupD_RX_Pin;
 8001360:	2304      	movs	r3, #4
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001370:	2308      	movs	r3, #8
 8001372:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CupD_RX_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001378:	4619      	mov	r1, r3
 800137a:	4845      	ldr	r0, [pc, #276]	; (8001490 <HAL_UART_MspInit+0x1c8>)
 800137c:	f000 fbec 	bl	8001b58 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2105      	movs	r1, #5
 8001384:	2035      	movs	r0, #53	; 0x35
 8001386:	f000 fb2b 	bl	80019e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800138a:	2035      	movs	r0, #53	; 0x35
 800138c:	f000 fb44 	bl	8001a18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001390:	e074      	b.n	800147c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a3f      	ldr	r2, [pc, #252]	; (8001494 <HAL_UART_MspInit+0x1cc>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d135      	bne.n	8001408 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART3_CLK_ENABLE();
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	4b39      	ldr	r3, [pc, #228]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	4a38      	ldr	r2, [pc, #224]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 80013a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013aa:	6413      	str	r3, [r2, #64]	; 0x40
 80013ac:	4b36      	ldr	r3, [pc, #216]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	4b32      	ldr	r3, [pc, #200]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	4a31      	ldr	r2, [pc, #196]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6313      	str	r3, [r2, #48]	; 0x30
 80013c8:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 80013d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013e6:	2307      	movs	r3, #7
 80013e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	4619      	mov	r1, r3
 80013f0:	4826      	ldr	r0, [pc, #152]	; (800148c <HAL_UART_MspInit+0x1c4>)
 80013f2:	f000 fbb1 	bl	8001b58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2105      	movs	r1, #5
 80013fa:	2027      	movs	r0, #39	; 0x27
 80013fc:	f000 faf0 	bl	80019e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001400:	2027      	movs	r0, #39	; 0x27
 8001402:	f000 fb09 	bl	8001a18 <HAL_NVIC_EnableIRQ>
}
 8001406:	e039      	b.n	800147c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART6)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a22      	ldr	r2, [pc, #136]	; (8001498 <HAL_UART_MspInit+0x1d0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d134      	bne.n	800147c <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 800141c:	f043 0320 	orr.w	r3, r3, #32
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a14      	ldr	r2, [pc, #80]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 8001438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_UART_MspInit+0x1c0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LidD_RX_Pin|LidD_TX_Pin;
 800144a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800145c:	2308      	movs	r3, #8
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	480d      	ldr	r0, [pc, #52]	; (800149c <HAL_UART_MspInit+0x1d4>)
 8001468:	f000 fb76 	bl	8001b58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2105      	movs	r1, #5
 8001470:	2047      	movs	r0, #71	; 0x47
 8001472:	f000 fab5 	bl	80019e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001476:	2047      	movs	r0, #71	; 0x47
 8001478:	f000 face 	bl	8001a18 <HAL_NVIC_EnableIRQ>
}
 800147c:	bf00      	nop
 800147e:	3738      	adds	r7, #56	; 0x38
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40005000 	.word	0x40005000
 8001488:	40023800 	.word	0x40023800
 800148c:	40020800 	.word	0x40020800
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40004800 	.word	0x40004800
 8001498:	40011400 	.word	0x40011400
 800149c:	40021800 	.word	0x40021800

080014a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	202c      	movs	r0, #44	; 0x2c
 80014b6:	f000 fa93 	bl	80019e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80014ba:	202c      	movs	r0, #44	; 0x2c
 80014bc:	f000 faac 	bl	8001a18 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <HAL_InitTick+0xa4>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	4a1e      	ldr	r2, [pc, #120]	; (8001544 <HAL_InitTick+0xa4>)
 80014ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ce:	6413      	str	r3, [r2, #64]	; 0x40
 80014d0:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <HAL_InitTick+0xa4>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014dc:	f107 0210 	add.w	r2, r7, #16
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 f994 	bl	8002814 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80014ec:	f001 f96a 	bl	80027c4 <HAL_RCC_GetPCLK1Freq>
 80014f0:	4603      	mov	r3, r0
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f8:	4a13      	ldr	r2, [pc, #76]	; (8001548 <HAL_InitTick+0xa8>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	0c9b      	lsrs	r3, r3, #18
 8001500:	3b01      	subs	r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <HAL_InitTick+0xac>)
 8001506:	4a12      	ldr	r2, [pc, #72]	; (8001550 <HAL_InitTick+0xb0>)
 8001508:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_InitTick+0xac>)
 800150c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001510:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_InitTick+0xac>)
 8001514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001516:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <HAL_InitTick+0xac>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_InitTick+0xac>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8001524:	4809      	ldr	r0, [pc, #36]	; (800154c <HAL_InitTick+0xac>)
 8001526:	f001 f9a7 	bl	8002878 <HAL_TIM_Base_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d104      	bne.n	800153a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001530:	4806      	ldr	r0, [pc, #24]	; (800154c <HAL_InitTick+0xac>)
 8001532:	f001 fa59 	bl	80029e8 <HAL_TIM_Base_Start_IT>
 8001536:	4603      	mov	r3, r0
 8001538:	e000      	b.n	800153c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	3730      	adds	r7, #48	; 0x30
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	431bde83 	.word	0x431bde83
 800154c:	20000918 	.word	0x20000918
 8001550:	40001c00 	.word	0x40001c00

08001554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <NMI_Handler+0x4>

0800155a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <HardFault_Handler+0x4>

08001560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <MemManage_Handler+0x4>

08001566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <UsageFault_Handler+0x4>

08001572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <TIM2_IRQHandler+0x10>)
 8001586:	f001 fbc1 	bl	8002d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200008d0 	.word	0x200008d0

08001594 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <USART3_IRQHandler+0x10>)
 800159a:	f002 fc95 	bl	8003ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000076c 	.word	0x2000076c

080015a8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80015ae:	f001 fbad 	bl	8002d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000918 	.word	0x20000918

080015bc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <UART5_IRQHandler+0x10>)
 80015c2:	f002 fc81 	bl	8003ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200007f8 	.word	0x200007f8

080015d0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <USART6_IRQHandler+0x10>)
 80015d6:	f002 fc77 	bl	8003ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000088c 	.word	0x2000088c

080015e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e00a      	b.n	800160c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015f6:	f3af 8000 	nop.w
 80015fa:	4601      	mov	r1, r0
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	60ba      	str	r2, [r7, #8]
 8001602:	b2ca      	uxtb	r2, r1
 8001604:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	429a      	cmp	r2, r3
 8001612:	dbf0      	blt.n	80015f6 <_read+0x12>
	}

return len;
 8001614:	687b      	ldr	r3, [r7, #4]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e009      	b.n	8001644 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	60ba      	str	r2, [r7, #8]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbf1      	blt.n	8001630 <_write+0x12>
	}
	return len;
 800164c:	687b      	ldr	r3, [r7, #4]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_close>:

int _close(int file)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
	return -1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800167e:	605a      	str	r2, [r3, #4]
	return 0;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_isatty>:

int _isatty(int file)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
	return 1;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
	return 0;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c8:	4a14      	ldr	r2, [pc, #80]	; (800171c <_sbrk+0x5c>)
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <_sbrk+0x60>)
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <_sbrk+0x64>)
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <_sbrk+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d207      	bcs.n	8001700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f0:	f003 fe0c 	bl	800530c <__errno>
 80016f4:	4603      	mov	r3, r0
 80016f6:	220c      	movs	r2, #12
 80016f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	e009      	b.n	8001714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001706:	4b07      	ldr	r3, [pc, #28]	; (8001724 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <_sbrk+0x64>)
 8001710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20030000 	.word	0x20030000
 8001720:	00000400 	.word	0x00000400
 8001724:	20000288 	.word	0x20000288
 8001728:	20000978 	.word	0x20000978

0800172c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <SystemInit+0x20>)
 8001732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <SystemInit+0x20>)
 8001738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800173c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001788 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001754:	480d      	ldr	r0, [pc, #52]	; (800178c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001756:	490e      	ldr	r1, [pc, #56]	; (8001790 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001758:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800175c:	e002      	b.n	8001764 <LoopCopyDataInit>

0800175e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001762:	3304      	adds	r3, #4

08001764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001768:	d3f9      	bcc.n	800175e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176a:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800176c:	4c0b      	ldr	r4, [pc, #44]	; (800179c <LoopFillZerobss+0x26>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001770:	e001      	b.n	8001776 <LoopFillZerobss>

08001772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001774:	3204      	adds	r2, #4

08001776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001778:	d3fb      	bcc.n	8001772 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800177a:	f7ff ffd7 	bl	800172c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800177e:	f003 fec1 	bl	8005504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001782:	f7fe ffe7 	bl	8000754 <main>
  bx  lr    
 8001786:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001788:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800178c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001790:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001794:	08006368 	.word	0x08006368
  ldr r2, =_sbss
 8001798:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800179c:	20000974 	.word	0x20000974

080017a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a0:	e7fe      	b.n	80017a0 <ADC_IRQHandler>
	...

080017a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a8:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <HAL_Init+0x40>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0d      	ldr	r2, [pc, #52]	; (80017e4 <HAL_Init+0x40>)
 80017ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_Init+0x40>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <HAL_Init+0x40>)
 80017ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_Init+0x40>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <HAL_Init+0x40>)
 80017c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017cc:	2003      	movs	r0, #3
 80017ce:	f000 f8fc 	bl	80019ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017d2:	200f      	movs	r0, #15
 80017d4:	f7ff fe64 	bl	80014a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d8:	f7ff fc1c 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023c00 	.word	0x40023c00

080017e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_IncTick+0x20>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x24>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_IncTick+0x24>)
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000008 	.word	0x20000008
 800180c:	20000960 	.word	0x20000960

08001810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_GetTick+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000960 	.word	0x20000960

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff ffee 	bl	8001810 <HAL_GetTick>
 8001834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_Delay+0x44>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800184e:	bf00      	nop
 8001850:	f7ff ffde 	bl	8001810 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
  {
  }
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000008 	.word	0x20000008

08001870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800189c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a2:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	60d3      	str	r3, [r2, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <__NVIC_GetPriorityGrouping+0x18>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	f003 0307 	and.w	r3, r3, #7
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	db0b      	blt.n	80018fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	4907      	ldr	r1, [pc, #28]	; (800190c <__NVIC_EnableIRQ+0x38>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	2001      	movs	r0, #1
 80018f6:	fa00 f202 	lsl.w	r2, r0, r2
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000e100 	.word	0xe000e100

08001910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	; (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	; (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 32ff 	mov.w	r2, #4294967295
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	401a      	ands	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4313      	orrs	r3, r2
         );
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	; 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ff4c 	bl	8001870 <__NVIC_SetPriorityGrouping>
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f2:	f7ff ff61 	bl	80018b8 <__NVIC_GetPriorityGrouping>
 80019f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	68b9      	ldr	r1, [r7, #8]
 80019fc:	6978      	ldr	r0, [r7, #20]
 80019fe:	f7ff ffb1 	bl	8001964 <NVIC_EncodePriority>
 8001a02:	4602      	mov	r2, r0
 8001a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a08:	4611      	mov	r1, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff80 	bl	8001910 <__NVIC_SetPriority>
}
 8001a10:	bf00      	nop
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff ff54 	bl	80018d4 <__NVIC_EnableIRQ>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a42:	f7ff fee5 	bl	8001810 <HAL_GetTick>
 8001a46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d008      	beq.n	8001a66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2280      	movs	r2, #128	; 0x80
 8001a58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e052      	b.n	8001b0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0216 	bic.w	r2, r2, #22
 8001a74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d103      	bne.n	8001a96 <HAL_DMA_Abort+0x62>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d007      	beq.n	8001aa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0208 	bic.w	r2, r2, #8
 8001aa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab6:	e013      	b.n	8001ae0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ab8:	f7ff feaa 	bl	8001810 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b05      	cmp	r3, #5
 8001ac4:	d90c      	bls.n	8001ae0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2220      	movs	r2, #32
 8001aca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e015      	b.n	8001b0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1e4      	bne.n	8001ab8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af2:	223f      	movs	r2, #63	; 0x3f
 8001af4:	409a      	lsls	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d004      	beq.n	8001b32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2280      	movs	r2, #128	; 0x80
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00c      	b.n	8001b4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2205      	movs	r2, #5
 8001b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	e177      	b.n	8001e64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b74:	2201      	movs	r2, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	f040 8166 	bne.w	8001e5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d005      	beq.n	8001baa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d130      	bne.n	8001c0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be0:	2201      	movs	r2, #1
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f003 0201 	and.w	r2, r3, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d017      	beq.n	8001c48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d123      	bne.n	8001c9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	08da      	lsrs	r2, r3, #3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3208      	adds	r2, #8
 8001c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	220f      	movs	r2, #15
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	08da      	lsrs	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3208      	adds	r2, #8
 8001c96:	69b9      	ldr	r1, [r7, #24]
 8001c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0203 	and.w	r2, r3, #3
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 80c0 	beq.w	8001e5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4b66      	ldr	r3, [pc, #408]	; (8001e7c <HAL_GPIO_Init+0x324>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	4a65      	ldr	r2, [pc, #404]	; (8001e7c <HAL_GPIO_Init+0x324>)
 8001ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cec:	6453      	str	r3, [r2, #68]	; 0x44
 8001cee:	4b63      	ldr	r3, [pc, #396]	; (8001e7c <HAL_GPIO_Init+0x324>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cfa:	4a61      	ldr	r2, [pc, #388]	; (8001e80 <HAL_GPIO_Init+0x328>)
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	3302      	adds	r3, #2
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	220f      	movs	r2, #15
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a58      	ldr	r2, [pc, #352]	; (8001e84 <HAL_GPIO_Init+0x32c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d037      	beq.n	8001d96 <HAL_GPIO_Init+0x23e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a57      	ldr	r2, [pc, #348]	; (8001e88 <HAL_GPIO_Init+0x330>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d031      	beq.n	8001d92 <HAL_GPIO_Init+0x23a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a56      	ldr	r2, [pc, #344]	; (8001e8c <HAL_GPIO_Init+0x334>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d02b      	beq.n	8001d8e <HAL_GPIO_Init+0x236>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a55      	ldr	r2, [pc, #340]	; (8001e90 <HAL_GPIO_Init+0x338>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d025      	beq.n	8001d8a <HAL_GPIO_Init+0x232>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a54      	ldr	r2, [pc, #336]	; (8001e94 <HAL_GPIO_Init+0x33c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d01f      	beq.n	8001d86 <HAL_GPIO_Init+0x22e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a53      	ldr	r2, [pc, #332]	; (8001e98 <HAL_GPIO_Init+0x340>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d019      	beq.n	8001d82 <HAL_GPIO_Init+0x22a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a52      	ldr	r2, [pc, #328]	; (8001e9c <HAL_GPIO_Init+0x344>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_GPIO_Init+0x226>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a51      	ldr	r2, [pc, #324]	; (8001ea0 <HAL_GPIO_Init+0x348>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00d      	beq.n	8001d7a <HAL_GPIO_Init+0x222>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a50      	ldr	r2, [pc, #320]	; (8001ea4 <HAL_GPIO_Init+0x34c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d007      	beq.n	8001d76 <HAL_GPIO_Init+0x21e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4f      	ldr	r2, [pc, #316]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <HAL_GPIO_Init+0x21a>
 8001d6e:	2309      	movs	r3, #9
 8001d70:	e012      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d72:	230a      	movs	r3, #10
 8001d74:	e010      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d76:	2308      	movs	r3, #8
 8001d78:	e00e      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d7a:	2307      	movs	r3, #7
 8001d7c:	e00c      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d7e:	2306      	movs	r3, #6
 8001d80:	e00a      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d82:	2305      	movs	r3, #5
 8001d84:	e008      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d86:	2304      	movs	r3, #4
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e004      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e002      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d96:	2300      	movs	r3, #0
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	f002 0203 	and.w	r2, r2, #3
 8001d9e:	0092      	lsls	r2, r2, #2
 8001da0:	4093      	lsls	r3, r2
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da8:	4935      	ldr	r1, [pc, #212]	; (8001e80 <HAL_GPIO_Init+0x328>)
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	089b      	lsrs	r3, r3, #2
 8001dae:	3302      	adds	r3, #2
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db6:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dda:	4a34      	ldr	r2, [pc, #208]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001de0:	4b32      	ldr	r3, [pc, #200]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e04:	4a29      	ldr	r2, [pc, #164]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e0a:	4b28      	ldr	r3, [pc, #160]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e2e:	4a1f      	ldr	r2, [pc, #124]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e34:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e58:	4a14      	ldr	r2, [pc, #80]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3301      	adds	r3, #1
 8001e62:	61fb      	str	r3, [r7, #28]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	2b0f      	cmp	r3, #15
 8001e68:	f67f ae84 	bls.w	8001b74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3724      	adds	r7, #36	; 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40013800 	.word	0x40013800
 8001e84:	40020000 	.word	0x40020000
 8001e88:	40020400 	.word	0x40020400
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	40020c00 	.word	0x40020c00
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40021400 	.word	0x40021400
 8001e9c:	40021800 	.word	0x40021800
 8001ea0:	40021c00 	.word	0x40021c00
 8001ea4:	40022000 	.word	0x40022000
 8001ea8:	40022400 	.word	0x40022400
 8001eac:	40013c00 	.word	0x40013c00

08001eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec0:	787b      	ldrb	r3, [r7, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	041a      	lsls	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	619a      	str	r2, [r3, #24]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efc:	6413      	str	r3, [r2, #64]	; 0x40
 8001efe:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_PWREx_EnableOverDrive+0x94>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f10:	f7ff fc7e 	bl	8001810 <HAL_GetTick>
 8001f14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f16:	e009      	b.n	8001f2c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f18:	f7ff fc7a 	bl	8001810 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f26:	d901      	bls.n	8001f2c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e01f      	b.n	8001f6c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f2c:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f38:	d1ee      	bne.n	8001f18 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f40:	f7ff fc66 	bl	8001810 <HAL_GetTick>
 8001f44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f46:	e009      	b.n	8001f5c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f48:	f7ff fc62 	bl	8001810 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f56:	d901      	bls.n	8001f5c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e007      	b.n	8001f6c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f68:	d1ee      	bne.n	8001f48 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40023800 	.word	0x40023800
 8001f78:	420e0040 	.word	0x420e0040
 8001f7c:	40007000 	.word	0x40007000
 8001f80:	420e0044 	.word	0x420e0044

08001f84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e264      	b.n	8002460 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d075      	beq.n	800208e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fa2:	4ba3      	ldr	r3, [pc, #652]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d00c      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fae:	4ba0      	ldr	r3, [pc, #640]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d112      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fba:	4b9d      	ldr	r3, [pc, #628]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fc6:	d10b      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	4b99      	ldr	r3, [pc, #612]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d05b      	beq.n	800208c <HAL_RCC_OscConfig+0x108>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d157      	bne.n	800208c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e23f      	b.n	8002460 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe8:	d106      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x74>
 8001fea:	4b91      	ldr	r3, [pc, #580]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a90      	ldr	r2, [pc, #576]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e01d      	b.n	8002034 <HAL_RCC_OscConfig+0xb0>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x98>
 8002002:	4b8b      	ldr	r3, [pc, #556]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a8a      	ldr	r2, [pc, #552]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 8002008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b88      	ldr	r3, [pc, #544]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a87      	ldr	r2, [pc, #540]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e00b      	b.n	8002034 <HAL_RCC_OscConfig+0xb0>
 800201c:	4b84      	ldr	r3, [pc, #528]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a83      	ldr	r2, [pc, #524]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 8002022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	4b81      	ldr	r3, [pc, #516]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a80      	ldr	r2, [pc, #512]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 800202e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d013      	beq.n	8002064 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7ff fbe8 	bl	8001810 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002044:	f7ff fbe4 	bl	8001810 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	; 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e204      	b.n	8002460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	4b76      	ldr	r3, [pc, #472]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0xc0>
 8002062:	e014      	b.n	800208e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7ff fbd4 	bl	8001810 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800206c:	f7ff fbd0 	bl	8001810 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	; 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e1f0      	b.n	8002460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	4b6c      	ldr	r3, [pc, #432]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0xe8>
 800208a:	e000      	b.n	800208e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d063      	beq.n	8002162 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800209a:	4b65      	ldr	r3, [pc, #404]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00b      	beq.n	80020be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020a6:	4b62      	ldr	r3, [pc, #392]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d11c      	bne.n	80020ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020b2:	4b5f      	ldr	r3, [pc, #380]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d116      	bne.n	80020ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020be:	4b5c      	ldr	r3, [pc, #368]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_RCC_OscConfig+0x152>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e1c4      	b.n	8002460 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d6:	4b56      	ldr	r3, [pc, #344]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4952      	ldr	r1, [pc, #328]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ea:	e03a      	b.n	8002162 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d020      	beq.n	8002136 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f4:	4b4f      	ldr	r3, [pc, #316]	; (8002234 <HAL_RCC_OscConfig+0x2b0>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fa:	f7ff fb89 	bl	8001810 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002102:	f7ff fb85 	bl	8001810 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e1a5      	b.n	8002460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002114:	4b46      	ldr	r3, [pc, #280]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002120:	4b43      	ldr	r3, [pc, #268]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4940      	ldr	r1, [pc, #256]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 8002130:	4313      	orrs	r3, r2
 8002132:	600b      	str	r3, [r1, #0]
 8002134:	e015      	b.n	8002162 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002136:	4b3f      	ldr	r3, [pc, #252]	; (8002234 <HAL_RCC_OscConfig+0x2b0>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff fb68 	bl	8001810 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002144:	f7ff fb64 	bl	8001810 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e184      	b.n	8002460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002156:	4b36      	ldr	r3, [pc, #216]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d030      	beq.n	80021d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d016      	beq.n	80021a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002176:	4b30      	ldr	r3, [pc, #192]	; (8002238 <HAL_RCC_OscConfig+0x2b4>)
 8002178:	2201      	movs	r2, #1
 800217a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217c:	f7ff fb48 	bl	8001810 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002184:	f7ff fb44 	bl	8001810 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e164      	b.n	8002460 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002196:	4b26      	ldr	r3, [pc, #152]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 8002198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0x200>
 80021a2:	e015      	b.n	80021d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a4:	4b24      	ldr	r3, [pc, #144]	; (8002238 <HAL_RCC_OscConfig+0x2b4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021aa:	f7ff fb31 	bl	8001810 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b2:	f7ff fb2d 	bl	8001810 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e14d      	b.n	8002460 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c4:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 80021c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f0      	bne.n	80021b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80a0 	beq.w	800231e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10f      	bne.n	800220e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220a:	2301      	movs	r3, #1
 800220c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220e:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_RCC_OscConfig+0x2b8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d121      	bne.n	800225e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221a:	4b08      	ldr	r3, [pc, #32]	; (800223c <HAL_RCC_OscConfig+0x2b8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a07      	ldr	r2, [pc, #28]	; (800223c <HAL_RCC_OscConfig+0x2b8>)
 8002220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002226:	f7ff faf3 	bl	8001810 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	e011      	b.n	8002252 <HAL_RCC_OscConfig+0x2ce>
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800
 8002234:	42470000 	.word	0x42470000
 8002238:	42470e80 	.word	0x42470e80
 800223c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002240:	f7ff fae6 	bl	8001810 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e106      	b.n	8002460 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002252:	4b85      	ldr	r3, [pc, #532]	; (8002468 <HAL_RCC_OscConfig+0x4e4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d106      	bne.n	8002274 <HAL_RCC_OscConfig+0x2f0>
 8002266:	4b81      	ldr	r3, [pc, #516]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226a:	4a80      	ldr	r2, [pc, #512]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6713      	str	r3, [r2, #112]	; 0x70
 8002272:	e01c      	b.n	80022ae <HAL_RCC_OscConfig+0x32a>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b05      	cmp	r3, #5
 800227a:	d10c      	bne.n	8002296 <HAL_RCC_OscConfig+0x312>
 800227c:	4b7b      	ldr	r3, [pc, #492]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	4a7a      	ldr	r2, [pc, #488]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 8002282:	f043 0304 	orr.w	r3, r3, #4
 8002286:	6713      	str	r3, [r2, #112]	; 0x70
 8002288:	4b78      	ldr	r3, [pc, #480]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	4a77      	ldr	r2, [pc, #476]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6713      	str	r3, [r2, #112]	; 0x70
 8002294:	e00b      	b.n	80022ae <HAL_RCC_OscConfig+0x32a>
 8002296:	4b75      	ldr	r3, [pc, #468]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229a:	4a74      	ldr	r2, [pc, #464]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	6713      	str	r3, [r2, #112]	; 0x70
 80022a2:	4b72      	ldr	r3, [pc, #456]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	4a71      	ldr	r2, [pc, #452]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 80022a8:	f023 0304 	bic.w	r3, r3, #4
 80022ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d015      	beq.n	80022e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b6:	f7ff faab 	bl	8001810 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022bc:	e00a      	b.n	80022d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022be:	f7ff faa7 	bl	8001810 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e0c5      	b.n	8002460 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d4:	4b65      	ldr	r3, [pc, #404]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 80022d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0ee      	beq.n	80022be <HAL_RCC_OscConfig+0x33a>
 80022e0:	e014      	b.n	800230c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e2:	f7ff fa95 	bl	8001810 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e8:	e00a      	b.n	8002300 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7ff fa91 	bl	8001810 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e0af      	b.n	8002460 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002300:	4b5a      	ldr	r3, [pc, #360]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 8002302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1ee      	bne.n	80022ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d105      	bne.n	800231e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002312:	4b56      	ldr	r3, [pc, #344]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	4a55      	ldr	r2, [pc, #340]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 8002318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 809b 	beq.w	800245e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002328:	4b50      	ldr	r3, [pc, #320]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b08      	cmp	r3, #8
 8002332:	d05c      	beq.n	80023ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d141      	bne.n	80023c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233c:	4b4c      	ldr	r3, [pc, #304]	; (8002470 <HAL_RCC_OscConfig+0x4ec>)
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002342:	f7ff fa65 	bl	8001810 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234a:	f7ff fa61 	bl	8001810 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e081      	b.n	8002460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235c:	4b43      	ldr	r3, [pc, #268]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f0      	bne.n	800234a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69da      	ldr	r2, [r3, #28]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	019b      	lsls	r3, r3, #6
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	085b      	lsrs	r3, r3, #1
 8002380:	3b01      	subs	r3, #1
 8002382:	041b      	lsls	r3, r3, #16
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	061b      	lsls	r3, r3, #24
 800238c:	4937      	ldr	r1, [pc, #220]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002392:	4b37      	ldr	r3, [pc, #220]	; (8002470 <HAL_RCC_OscConfig+0x4ec>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7ff fa3a 	bl	8001810 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a0:	f7ff fa36 	bl	8001810 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e056      	b.n	8002460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b2:	4b2e      	ldr	r3, [pc, #184]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x41c>
 80023be:	e04e      	b.n	800245e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c0:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <HAL_RCC_OscConfig+0x4ec>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7ff fa23 	bl	8001810 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ce:	f7ff fa1f 	bl	8001810 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e03f      	b.n	8002460 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e0:	4b22      	ldr	r3, [pc, #136]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f0      	bne.n	80023ce <HAL_RCC_OscConfig+0x44a>
 80023ec:	e037      	b.n	800245e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e032      	b.n	8002460 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023fa:	4b1c      	ldr	r3, [pc, #112]	; (800246c <HAL_RCC_OscConfig+0x4e8>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d028      	beq.n	800245a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d121      	bne.n	800245a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d11a      	bne.n	800245a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800242a:	4013      	ands	r3, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002430:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002432:	4293      	cmp	r3, r2
 8002434:	d111      	bne.n	800245a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	085b      	lsrs	r3, r3, #1
 8002442:	3b01      	subs	r3, #1
 8002444:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d107      	bne.n	800245a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002456:	429a      	cmp	r2, r3
 8002458:	d001      	beq.n	800245e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40007000 	.word	0x40007000
 800246c:	40023800 	.word	0x40023800
 8002470:	42470060 	.word	0x42470060

08002474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0cc      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002488:	4b68      	ldr	r3, [pc, #416]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d90c      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b65      	ldr	r3, [pc, #404]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b63      	ldr	r3, [pc, #396]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0b8      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c8:	4b59      	ldr	r3, [pc, #356]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a58      	ldr	r2, [pc, #352]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e0:	4b53      	ldr	r3, [pc, #332]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a52      	ldr	r2, [pc, #328]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b50      	ldr	r3, [pc, #320]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	494d      	ldr	r1, [pc, #308]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d044      	beq.n	8002594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b47      	ldr	r3, [pc, #284]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d119      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e07f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d003      	beq.n	8002532 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800252e:	2b03      	cmp	r3, #3
 8002530:	d107      	bne.n	8002542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002532:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e06f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002542:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e067      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002552:	4b37      	ldr	r3, [pc, #220]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f023 0203 	bic.w	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4934      	ldr	r1, [pc, #208]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002564:	f7ff f954 	bl	8001810 <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	e00a      	b.n	8002582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256c:	f7ff f950 	bl	8001810 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	; 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e04f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 020c 	and.w	r2, r3, #12
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	429a      	cmp	r2, r3
 8002592:	d1eb      	bne.n	800256c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002594:	4b25      	ldr	r3, [pc, #148]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d20c      	bcs.n	80025bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4b22      	ldr	r3, [pc, #136]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b20      	ldr	r3, [pc, #128]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e032      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4916      	ldr	r1, [pc, #88]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	490e      	ldr	r1, [pc, #56]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025fa:	f000 f821 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025fe:	4602      	mov	r2, r0
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	490a      	ldr	r1, [pc, #40]	; (8002634 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	5ccb      	ldrb	r3, [r1, r3]
 800260e:	fa22 f303 	lsr.w	r3, r2, r3
 8002612:	4a09      	ldr	r2, [pc, #36]	; (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe ff40 	bl	80014a0 <HAL_InitTick>

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023c00 	.word	0x40023c00
 8002630:	40023800 	.word	0x40023800
 8002634:	080062a8 	.word	0x080062a8
 8002638:	20000000 	.word	0x20000000
 800263c:	20000004 	.word	0x20000004

08002640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b5b0      	push	{r4, r5, r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002646:	2100      	movs	r1, #0
 8002648:	6079      	str	r1, [r7, #4]
 800264a:	2100      	movs	r1, #0
 800264c:	60f9      	str	r1, [r7, #12]
 800264e:	2100      	movs	r1, #0
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002652:	2100      	movs	r1, #0
 8002654:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002656:	4952      	ldr	r1, [pc, #328]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002658:	6889      	ldr	r1, [r1, #8]
 800265a:	f001 010c 	and.w	r1, r1, #12
 800265e:	2908      	cmp	r1, #8
 8002660:	d00d      	beq.n	800267e <HAL_RCC_GetSysClockFreq+0x3e>
 8002662:	2908      	cmp	r1, #8
 8002664:	f200 8094 	bhi.w	8002790 <HAL_RCC_GetSysClockFreq+0x150>
 8002668:	2900      	cmp	r1, #0
 800266a:	d002      	beq.n	8002672 <HAL_RCC_GetSysClockFreq+0x32>
 800266c:	2904      	cmp	r1, #4
 800266e:	d003      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x38>
 8002670:	e08e      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002672:	4b4c      	ldr	r3, [pc, #304]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002674:	60bb      	str	r3, [r7, #8]
       break;
 8002676:	e08e      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002678:	4b4b      	ldr	r3, [pc, #300]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x168>)
 800267a:	60bb      	str	r3, [r7, #8]
      break;
 800267c:	e08b      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800267e:	4948      	ldr	r1, [pc, #288]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002680:	6849      	ldr	r1, [r1, #4]
 8002682:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002686:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002688:	4945      	ldr	r1, [pc, #276]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x160>)
 800268a:	6849      	ldr	r1, [r1, #4]
 800268c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002690:	2900      	cmp	r1, #0
 8002692:	d024      	beq.n	80026de <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002694:	4942      	ldr	r1, [pc, #264]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002696:	6849      	ldr	r1, [r1, #4]
 8002698:	0989      	lsrs	r1, r1, #6
 800269a:	4608      	mov	r0, r1
 800269c:	f04f 0100 	mov.w	r1, #0
 80026a0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80026a4:	f04f 0500 	mov.w	r5, #0
 80026a8:	ea00 0204 	and.w	r2, r0, r4
 80026ac:	ea01 0305 	and.w	r3, r1, r5
 80026b0:	493d      	ldr	r1, [pc, #244]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80026b2:	fb01 f003 	mul.w	r0, r1, r3
 80026b6:	2100      	movs	r1, #0
 80026b8:	fb01 f102 	mul.w	r1, r1, r2
 80026bc:	1844      	adds	r4, r0, r1
 80026be:	493a      	ldr	r1, [pc, #232]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80026c0:	fba2 0101 	umull	r0, r1, r2, r1
 80026c4:	1863      	adds	r3, r4, r1
 80026c6:	4619      	mov	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	461a      	mov	r2, r3
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	f7fd fdde 	bl	8000290 <__aeabi_uldivmod>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4613      	mov	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	e04a      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026de:	4b30      	ldr	r3, [pc, #192]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	099b      	lsrs	r3, r3, #6
 80026e4:	461a      	mov	r2, r3
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026ee:	f04f 0100 	mov.w	r1, #0
 80026f2:	ea02 0400 	and.w	r4, r2, r0
 80026f6:	ea03 0501 	and.w	r5, r3, r1
 80026fa:	4620      	mov	r0, r4
 80026fc:	4629      	mov	r1, r5
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	014b      	lsls	r3, r1, #5
 8002708:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800270c:	0142      	lsls	r2, r0, #5
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	1b00      	subs	r0, r0, r4
 8002714:	eb61 0105 	sbc.w	r1, r1, r5
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	018b      	lsls	r3, r1, #6
 8002722:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002726:	0182      	lsls	r2, r0, #6
 8002728:	1a12      	subs	r2, r2, r0
 800272a:	eb63 0301 	sbc.w	r3, r3, r1
 800272e:	f04f 0000 	mov.w	r0, #0
 8002732:	f04f 0100 	mov.w	r1, #0
 8002736:	00d9      	lsls	r1, r3, #3
 8002738:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800273c:	00d0      	lsls	r0, r2, #3
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	1912      	adds	r2, r2, r4
 8002744:	eb45 0303 	adc.w	r3, r5, r3
 8002748:	f04f 0000 	mov.w	r0, #0
 800274c:	f04f 0100 	mov.w	r1, #0
 8002750:	0299      	lsls	r1, r3, #10
 8002752:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002756:	0290      	lsls	r0, r2, #10
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	461a      	mov	r2, r3
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	f7fd fd92 	bl	8000290 <__aeabi_uldivmod>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4613      	mov	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	0c1b      	lsrs	r3, r3, #16
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	3301      	adds	r3, #1
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	fbb2 f3f3 	udiv	r3, r2, r3
 800278c:	60bb      	str	r3, [r7, #8]
      break;
 800278e:	e002      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002792:	60bb      	str	r3, [r7, #8]
      break;
 8002794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002796:	68bb      	ldr	r3, [r7, #8]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bdb0      	pop	{r4, r5, r7, pc}
 80027a0:	40023800 	.word	0x40023800
 80027a4:	00f42400 	.word	0x00f42400
 80027a8:	017d7840 	.word	0x017d7840

080027ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000000 	.word	0x20000000

080027c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027c8:	f7ff fff0 	bl	80027ac <HAL_RCC_GetHCLKFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	0a9b      	lsrs	r3, r3, #10
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	4903      	ldr	r1, [pc, #12]	; (80027e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40023800 	.word	0x40023800
 80027e8:	080062b8 	.word	0x080062b8

080027ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027f0:	f7ff ffdc 	bl	80027ac <HAL_RCC_GetHCLKFreq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_RCC_GetPCLK2Freq+0x20>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	0b5b      	lsrs	r3, r3, #13
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	4903      	ldr	r1, [pc, #12]	; (8002810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002802:	5ccb      	ldrb	r3, [r1, r3]
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40023800 	.word	0x40023800
 8002810:	080062b8 	.word	0x080062b8

08002814 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	220f      	movs	r2, #15
 8002822:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002824:	4b12      	ldr	r3, [pc, #72]	; (8002870 <HAL_RCC_GetClockConfig+0x5c>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0203 	and.w	r2, r3, #3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002830:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_RCC_GetClockConfig+0x5c>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <HAL_RCC_GetClockConfig+0x5c>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002848:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_RCC_GetClockConfig+0x5c>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	08db      	lsrs	r3, r3, #3
 800284e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002856:	4b07      	ldr	r3, [pc, #28]	; (8002874 <HAL_RCC_GetClockConfig+0x60>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 020f 	and.w	r2, r3, #15
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	601a      	str	r2, [r3, #0]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	40023c00 	.word	0x40023c00

08002878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e041      	b.n	800290e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7fe fbe4 	bl	800106c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3304      	adds	r3, #4
 80028b4:	4619      	mov	r1, r3
 80028b6:	4610      	mov	r0, r2
 80028b8:	f000 fd24 	bl	8003304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	d001      	beq.n	8002930 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e046      	b.n	80029be <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a23      	ldr	r2, [pc, #140]	; (80029cc <HAL_TIM_Base_Start+0xb4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d022      	beq.n	8002988 <HAL_TIM_Base_Start+0x70>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294a:	d01d      	beq.n	8002988 <HAL_TIM_Base_Start+0x70>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1f      	ldr	r2, [pc, #124]	; (80029d0 <HAL_TIM_Base_Start+0xb8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d018      	beq.n	8002988 <HAL_TIM_Base_Start+0x70>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1e      	ldr	r2, [pc, #120]	; (80029d4 <HAL_TIM_Base_Start+0xbc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d013      	beq.n	8002988 <HAL_TIM_Base_Start+0x70>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1c      	ldr	r2, [pc, #112]	; (80029d8 <HAL_TIM_Base_Start+0xc0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00e      	beq.n	8002988 <HAL_TIM_Base_Start+0x70>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <HAL_TIM_Base_Start+0xc4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d009      	beq.n	8002988 <HAL_TIM_Base_Start+0x70>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a19      	ldr	r2, [pc, #100]	; (80029e0 <HAL_TIM_Base_Start+0xc8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d004      	beq.n	8002988 <HAL_TIM_Base_Start+0x70>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a18      	ldr	r2, [pc, #96]	; (80029e4 <HAL_TIM_Base_Start+0xcc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d111      	bne.n	80029ac <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b06      	cmp	r3, #6
 8002998:	d010      	beq.n	80029bc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029aa:	e007      	b.n	80029bc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40010000 	.word	0x40010000
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40000800 	.word	0x40000800
 80029d8:	40000c00 	.word	0x40000c00
 80029dc:	40010400 	.word	0x40010400
 80029e0:	40014000 	.word	0x40014000
 80029e4:	40001800 	.word	0x40001800

080029e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d001      	beq.n	8002a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e04e      	b.n	8002a9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a23      	ldr	r2, [pc, #140]	; (8002aac <HAL_TIM_Base_Start_IT+0xc4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d022      	beq.n	8002a68 <HAL_TIM_Base_Start_IT+0x80>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2a:	d01d      	beq.n	8002a68 <HAL_TIM_Base_Start_IT+0x80>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1f      	ldr	r2, [pc, #124]	; (8002ab0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d018      	beq.n	8002a68 <HAL_TIM_Base_Start_IT+0x80>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1e      	ldr	r2, [pc, #120]	; (8002ab4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d013      	beq.n	8002a68 <HAL_TIM_Base_Start_IT+0x80>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1c      	ldr	r2, [pc, #112]	; (8002ab8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00e      	beq.n	8002a68 <HAL_TIM_Base_Start_IT+0x80>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <HAL_TIM_Base_Start_IT+0xd4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d009      	beq.n	8002a68 <HAL_TIM_Base_Start_IT+0x80>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a19      	ldr	r2, [pc, #100]	; (8002ac0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d004      	beq.n	8002a68 <HAL_TIM_Base_Start_IT+0x80>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d111      	bne.n	8002a8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b06      	cmp	r3, #6
 8002a78:	d010      	beq.n	8002a9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0201 	orr.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8a:	e007      	b.n	8002a9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40010000 	.word	0x40010000
 8002ab0:	40000400 	.word	0x40000400
 8002ab4:	40000800 	.word	0x40000800
 8002ab8:	40000c00 	.word	0x40000c00
 8002abc:	40010400 	.word	0x40010400
 8002ac0:	40014000 	.word	0x40014000
 8002ac4:	40001800 	.word	0x40001800

08002ac8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e041      	b.n	8002b5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f839 	bl	8002b66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	4619      	mov	r1, r3
 8002b06:	4610      	mov	r0, r2
 8002b08:	f000 fbfc 	bl	8003304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d109      	bne.n	8002ba0 <HAL_TIM_PWM_Start+0x24>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	bf14      	ite	ne
 8002b98:	2301      	movne	r3, #1
 8002b9a:	2300      	moveq	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	e022      	b.n	8002be6 <HAL_TIM_PWM_Start+0x6a>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d109      	bne.n	8002bba <HAL_TIM_PWM_Start+0x3e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	bf14      	ite	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	2300      	moveq	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	e015      	b.n	8002be6 <HAL_TIM_PWM_Start+0x6a>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d109      	bne.n	8002bd4 <HAL_TIM_PWM_Start+0x58>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	bf14      	ite	ne
 8002bcc:	2301      	movne	r3, #1
 8002bce:	2300      	moveq	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	e008      	b.n	8002be6 <HAL_TIM_PWM_Start+0x6a>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	bf14      	ite	ne
 8002be0:	2301      	movne	r3, #1
 8002be2:	2300      	moveq	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e07c      	b.n	8002ce8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d104      	bne.n	8002bfe <HAL_TIM_PWM_Start+0x82>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bfc:	e013      	b.n	8002c26 <HAL_TIM_PWM_Start+0xaa>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d104      	bne.n	8002c0e <HAL_TIM_PWM_Start+0x92>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c0c:	e00b      	b.n	8002c26 <HAL_TIM_PWM_Start+0xaa>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d104      	bne.n	8002c1e <HAL_TIM_PWM_Start+0xa2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c1c:	e003      	b.n	8002c26 <HAL_TIM_PWM_Start+0xaa>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2202      	movs	r2, #2
 8002c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	6839      	ldr	r1, [r7, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 fee3 	bl	80039fa <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a2d      	ldr	r2, [pc, #180]	; (8002cf0 <HAL_TIM_PWM_Start+0x174>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d004      	beq.n	8002c48 <HAL_TIM_PWM_Start+0xcc>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2c      	ldr	r2, [pc, #176]	; (8002cf4 <HAL_TIM_PWM_Start+0x178>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d101      	bne.n	8002c4c <HAL_TIM_PWM_Start+0xd0>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <HAL_TIM_PWM_Start+0xd2>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a22      	ldr	r2, [pc, #136]	; (8002cf0 <HAL_TIM_PWM_Start+0x174>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d022      	beq.n	8002cb2 <HAL_TIM_PWM_Start+0x136>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c74:	d01d      	beq.n	8002cb2 <HAL_TIM_PWM_Start+0x136>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a1f      	ldr	r2, [pc, #124]	; (8002cf8 <HAL_TIM_PWM_Start+0x17c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d018      	beq.n	8002cb2 <HAL_TIM_PWM_Start+0x136>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1d      	ldr	r2, [pc, #116]	; (8002cfc <HAL_TIM_PWM_Start+0x180>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <HAL_TIM_PWM_Start+0x136>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1c      	ldr	r2, [pc, #112]	; (8002d00 <HAL_TIM_PWM_Start+0x184>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00e      	beq.n	8002cb2 <HAL_TIM_PWM_Start+0x136>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a16      	ldr	r2, [pc, #88]	; (8002cf4 <HAL_TIM_PWM_Start+0x178>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d009      	beq.n	8002cb2 <HAL_TIM_PWM_Start+0x136>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a18      	ldr	r2, [pc, #96]	; (8002d04 <HAL_TIM_PWM_Start+0x188>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d004      	beq.n	8002cb2 <HAL_TIM_PWM_Start+0x136>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a16      	ldr	r2, [pc, #88]	; (8002d08 <HAL_TIM_PWM_Start+0x18c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d111      	bne.n	8002cd6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b06      	cmp	r3, #6
 8002cc2:	d010      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd4:	e007      	b.n	8002ce6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0201 	orr.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	40010400 	.word	0x40010400
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40000800 	.word	0x40000800
 8002d00:	40000c00 	.word	0x40000c00
 8002d04:	40014000 	.word	0x40014000
 8002d08:	40001800 	.word	0x40001800

08002d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d122      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d11b      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0202 	mvn.w	r2, #2
 8002d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fab9 	bl	80032c6 <HAL_TIM_IC_CaptureCallback>
 8002d54:	e005      	b.n	8002d62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 faab 	bl	80032b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fabc 	bl	80032da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d122      	bne.n	8002dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d11b      	bne.n	8002dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0204 	mvn.w	r2, #4
 8002d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2202      	movs	r2, #2
 8002d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fa8f 	bl	80032c6 <HAL_TIM_IC_CaptureCallback>
 8002da8:	e005      	b.n	8002db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fa81 	bl	80032b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fa92 	bl	80032da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d122      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d11b      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0208 	mvn.w	r2, #8
 8002de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2204      	movs	r2, #4
 8002de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fa65 	bl	80032c6 <HAL_TIM_IC_CaptureCallback>
 8002dfc:	e005      	b.n	8002e0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fa57 	bl	80032b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fa68 	bl	80032da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b10      	cmp	r3, #16
 8002e1c:	d122      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b10      	cmp	r3, #16
 8002e2a:	d11b      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0210 	mvn.w	r2, #16
 8002e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2208      	movs	r2, #8
 8002e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fa3b 	bl	80032c6 <HAL_TIM_IC_CaptureCallback>
 8002e50:	e005      	b.n	8002e5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fa2d 	bl	80032b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fa3e 	bl	80032da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d10e      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d107      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0201 	mvn.w	r2, #1
 8002e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fe f8aa 	bl	8000fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9a:	2b80      	cmp	r3, #128	; 0x80
 8002e9c:	d10e      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea8:	2b80      	cmp	r3, #128	; 0x80
 8002eaa:	d107      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fe4a 	bl	8003b50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec6:	2b40      	cmp	r3, #64	; 0x40
 8002ec8:	d10e      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d107      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fa03 	bl	80032ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d10e      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d107      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0220 	mvn.w	r2, #32
 8002f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fe14 	bl	8003b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e0ae      	b.n	8003098 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b0c      	cmp	r3, #12
 8002f46:	f200 809f 	bhi.w	8003088 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f4a:	a201      	add	r2, pc, #4	; (adr r2, 8002f50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f50:	08002f85 	.word	0x08002f85
 8002f54:	08003089 	.word	0x08003089
 8002f58:	08003089 	.word	0x08003089
 8002f5c:	08003089 	.word	0x08003089
 8002f60:	08002fc5 	.word	0x08002fc5
 8002f64:	08003089 	.word	0x08003089
 8002f68:	08003089 	.word	0x08003089
 8002f6c:	08003089 	.word	0x08003089
 8002f70:	08003007 	.word	0x08003007
 8002f74:	08003089 	.word	0x08003089
 8002f78:	08003089 	.word	0x08003089
 8002f7c:	08003089 	.word	0x08003089
 8002f80:	08003047 	.word	0x08003047
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fa5a 	bl	8003444 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0208 	orr.w	r2, r2, #8
 8002f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0204 	bic.w	r2, r2, #4
 8002fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6999      	ldr	r1, [r3, #24]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	619a      	str	r2, [r3, #24]
      break;
 8002fc2:	e064      	b.n	800308e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 faaa 	bl	8003524 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6999      	ldr	r1, [r3, #24]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	021a      	lsls	r2, r3, #8
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	619a      	str	r2, [r3, #24]
      break;
 8003004:	e043      	b.n	800308e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	4618      	mov	r0, r3
 800300e:	f000 faff 	bl	8003610 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0208 	orr.w	r2, r2, #8
 8003020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0204 	bic.w	r2, r2, #4
 8003030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69d9      	ldr	r1, [r3, #28]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	61da      	str	r2, [r3, #28]
      break;
 8003044:	e023      	b.n	800308e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fb53 	bl	80036f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69da      	ldr	r2, [r3, #28]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69d9      	ldr	r1, [r3, #28]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	021a      	lsls	r2, r3, #8
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	61da      	str	r2, [r3, #28]
      break;
 8003086:	e002      	b.n	800308e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	75fb      	strb	r3, [r7, #23]
      break;
 800308c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003096:	7dfb      	ldrb	r3, [r7, #23]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_TIM_ConfigClockSource+0x1c>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e0b4      	b.n	8003226 <HAL_TIM_ConfigClockSource+0x186>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f4:	d03e      	beq.n	8003174 <HAL_TIM_ConfigClockSource+0xd4>
 80030f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030fa:	f200 8087 	bhi.w	800320c <HAL_TIM_ConfigClockSource+0x16c>
 80030fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003102:	f000 8086 	beq.w	8003212 <HAL_TIM_ConfigClockSource+0x172>
 8003106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310a:	d87f      	bhi.n	800320c <HAL_TIM_ConfigClockSource+0x16c>
 800310c:	2b70      	cmp	r3, #112	; 0x70
 800310e:	d01a      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0xa6>
 8003110:	2b70      	cmp	r3, #112	; 0x70
 8003112:	d87b      	bhi.n	800320c <HAL_TIM_ConfigClockSource+0x16c>
 8003114:	2b60      	cmp	r3, #96	; 0x60
 8003116:	d050      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x11a>
 8003118:	2b60      	cmp	r3, #96	; 0x60
 800311a:	d877      	bhi.n	800320c <HAL_TIM_ConfigClockSource+0x16c>
 800311c:	2b50      	cmp	r3, #80	; 0x50
 800311e:	d03c      	beq.n	800319a <HAL_TIM_ConfigClockSource+0xfa>
 8003120:	2b50      	cmp	r3, #80	; 0x50
 8003122:	d873      	bhi.n	800320c <HAL_TIM_ConfigClockSource+0x16c>
 8003124:	2b40      	cmp	r3, #64	; 0x40
 8003126:	d058      	beq.n	80031da <HAL_TIM_ConfigClockSource+0x13a>
 8003128:	2b40      	cmp	r3, #64	; 0x40
 800312a:	d86f      	bhi.n	800320c <HAL_TIM_ConfigClockSource+0x16c>
 800312c:	2b30      	cmp	r3, #48	; 0x30
 800312e:	d064      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0x15a>
 8003130:	2b30      	cmp	r3, #48	; 0x30
 8003132:	d86b      	bhi.n	800320c <HAL_TIM_ConfigClockSource+0x16c>
 8003134:	2b20      	cmp	r3, #32
 8003136:	d060      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0x15a>
 8003138:	2b20      	cmp	r3, #32
 800313a:	d867      	bhi.n	800320c <HAL_TIM_ConfigClockSource+0x16c>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d05c      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0x15a>
 8003140:	2b10      	cmp	r3, #16
 8003142:	d05a      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0x15a>
 8003144:	e062      	b.n	800320c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6899      	ldr	r1, [r3, #8]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f000 fc30 	bl	80039ba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003168:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	609a      	str	r2, [r3, #8]
      break;
 8003172:	e04f      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	6899      	ldr	r1, [r3, #8]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f000 fc19 	bl	80039ba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003196:	609a      	str	r2, [r3, #8]
      break;
 8003198:	e03c      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6859      	ldr	r1, [r3, #4]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	461a      	mov	r2, r3
 80031a8:	f000 fb8d 	bl	80038c6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2150      	movs	r1, #80	; 0x50
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fbe6 	bl	8003984 <TIM_ITRx_SetConfig>
      break;
 80031b8:	e02c      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6859      	ldr	r1, [r3, #4]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f000 fbac 	bl	8003924 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2160      	movs	r1, #96	; 0x60
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fbd6 	bl	8003984 <TIM_ITRx_SetConfig>
      break;
 80031d8:	e01c      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6859      	ldr	r1, [r3, #4]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	461a      	mov	r2, r3
 80031e8:	f000 fb6d 	bl	80038c6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2140      	movs	r1, #64	; 0x40
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fbc6 	bl	8003984 <TIM_ITRx_SetConfig>
      break;
 80031f8:	e00c      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4619      	mov	r1, r3
 8003204:	4610      	mov	r0, r2
 8003206:	f000 fbbd 	bl	8003984 <TIM_ITRx_SetConfig>
      break;
 800320a:	e003      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
      break;
 8003210:	e000      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003212:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003224:	7bfb      	ldrb	r3, [r7, #15]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003242:	2302      	movs	r3, #2
 8003244:	e031      	b.n	80032aa <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2202      	movs	r2, #2
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003256:	6839      	ldr	r1, [r7, #0]
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 faa3 	bl	80037a4 <TIM_SlaveTimer_SetConfig>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d009      	beq.n	8003278 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e018      	b.n	80032aa <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003286:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003296:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a40      	ldr	r2, [pc, #256]	; (8003418 <TIM_Base_SetConfig+0x114>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d013      	beq.n	8003344 <TIM_Base_SetConfig+0x40>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003322:	d00f      	beq.n	8003344 <TIM_Base_SetConfig+0x40>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a3d      	ldr	r2, [pc, #244]	; (800341c <TIM_Base_SetConfig+0x118>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d00b      	beq.n	8003344 <TIM_Base_SetConfig+0x40>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a3c      	ldr	r2, [pc, #240]	; (8003420 <TIM_Base_SetConfig+0x11c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d007      	beq.n	8003344 <TIM_Base_SetConfig+0x40>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a3b      	ldr	r2, [pc, #236]	; (8003424 <TIM_Base_SetConfig+0x120>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d003      	beq.n	8003344 <TIM_Base_SetConfig+0x40>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a3a      	ldr	r2, [pc, #232]	; (8003428 <TIM_Base_SetConfig+0x124>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d108      	bne.n	8003356 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a2f      	ldr	r2, [pc, #188]	; (8003418 <TIM_Base_SetConfig+0x114>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d02b      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003364:	d027      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a2c      	ldr	r2, [pc, #176]	; (800341c <TIM_Base_SetConfig+0x118>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d023      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a2b      	ldr	r2, [pc, #172]	; (8003420 <TIM_Base_SetConfig+0x11c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d01f      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a2a      	ldr	r2, [pc, #168]	; (8003424 <TIM_Base_SetConfig+0x120>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d01b      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a29      	ldr	r2, [pc, #164]	; (8003428 <TIM_Base_SetConfig+0x124>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d017      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a28      	ldr	r2, [pc, #160]	; (800342c <TIM_Base_SetConfig+0x128>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d013      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a27      	ldr	r2, [pc, #156]	; (8003430 <TIM_Base_SetConfig+0x12c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00f      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a26      	ldr	r2, [pc, #152]	; (8003434 <TIM_Base_SetConfig+0x130>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00b      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a25      	ldr	r2, [pc, #148]	; (8003438 <TIM_Base_SetConfig+0x134>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d007      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a24      	ldr	r2, [pc, #144]	; (800343c <TIM_Base_SetConfig+0x138>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d003      	beq.n	80033b6 <TIM_Base_SetConfig+0xb2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a23      	ldr	r2, [pc, #140]	; (8003440 <TIM_Base_SetConfig+0x13c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d108      	bne.n	80033c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <TIM_Base_SetConfig+0x114>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <TIM_Base_SetConfig+0xf8>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a0c      	ldr	r2, [pc, #48]	; (8003428 <TIM_Base_SetConfig+0x124>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d103      	bne.n	8003404 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	615a      	str	r2, [r3, #20]
}
 800340a:	bf00      	nop
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40010000 	.word	0x40010000
 800341c:	40000400 	.word	0x40000400
 8003420:	40000800 	.word	0x40000800
 8003424:	40000c00 	.word	0x40000c00
 8003428:	40010400 	.word	0x40010400
 800342c:	40014000 	.word	0x40014000
 8003430:	40014400 	.word	0x40014400
 8003434:	40014800 	.word	0x40014800
 8003438:	40001800 	.word	0x40001800
 800343c:	40001c00 	.word	0x40001c00
 8003440:	40002000 	.word	0x40002000

08003444 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	f023 0201 	bic.w	r2, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0303 	bic.w	r3, r3, #3
 800347a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f023 0302 	bic.w	r3, r3, #2
 800348c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a20      	ldr	r2, [pc, #128]	; (800351c <TIM_OC1_SetConfig+0xd8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d003      	beq.n	80034a8 <TIM_OC1_SetConfig+0x64>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a1f      	ldr	r2, [pc, #124]	; (8003520 <TIM_OC1_SetConfig+0xdc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d10c      	bne.n	80034c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f023 0308 	bic.w	r3, r3, #8
 80034ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f023 0304 	bic.w	r3, r3, #4
 80034c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a15      	ldr	r2, [pc, #84]	; (800351c <TIM_OC1_SetConfig+0xd8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d003      	beq.n	80034d2 <TIM_OC1_SetConfig+0x8e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a14      	ldr	r2, [pc, #80]	; (8003520 <TIM_OC1_SetConfig+0xdc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d111      	bne.n	80034f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	621a      	str	r2, [r3, #32]
}
 8003510:	bf00      	nop
 8003512:	371c      	adds	r7, #28
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	40010000 	.word	0x40010000
 8003520:	40010400 	.word	0x40010400

08003524 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	f023 0210 	bic.w	r2, r3, #16
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800355a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	021b      	lsls	r3, r3, #8
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f023 0320 	bic.w	r3, r3, #32
 800356e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a22      	ldr	r2, [pc, #136]	; (8003608 <TIM_OC2_SetConfig+0xe4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <TIM_OC2_SetConfig+0x68>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a21      	ldr	r2, [pc, #132]	; (800360c <TIM_OC2_SetConfig+0xe8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d10d      	bne.n	80035a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	4313      	orrs	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a17      	ldr	r2, [pc, #92]	; (8003608 <TIM_OC2_SetConfig+0xe4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d003      	beq.n	80035b8 <TIM_OC2_SetConfig+0x94>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a16      	ldr	r2, [pc, #88]	; (800360c <TIM_OC2_SetConfig+0xe8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d113      	bne.n	80035e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	621a      	str	r2, [r3, #32]
}
 80035fa:	bf00      	nop
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40010000 	.word	0x40010000
 800360c:	40010400 	.word	0x40010400

08003610 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0303 	bic.w	r3, r3, #3
 8003646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	021b      	lsls	r3, r3, #8
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a21      	ldr	r2, [pc, #132]	; (80036f0 <TIM_OC3_SetConfig+0xe0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d003      	beq.n	8003676 <TIM_OC3_SetConfig+0x66>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a20      	ldr	r2, [pc, #128]	; (80036f4 <TIM_OC3_SetConfig+0xe4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d10d      	bne.n	8003692 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800367c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a16      	ldr	r2, [pc, #88]	; (80036f0 <TIM_OC3_SetConfig+0xe0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d003      	beq.n	80036a2 <TIM_OC3_SetConfig+0x92>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a15      	ldr	r2, [pc, #84]	; (80036f4 <TIM_OC3_SetConfig+0xe4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d113      	bne.n	80036ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	621a      	str	r2, [r3, #32]
}
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	40010000 	.word	0x40010000
 80036f4:	40010400 	.word	0x40010400

080036f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	021b      	lsls	r3, r3, #8
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4313      	orrs	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	031b      	lsls	r3, r3, #12
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a12      	ldr	r2, [pc, #72]	; (800379c <TIM_OC4_SetConfig+0xa4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_OC4_SetConfig+0x68>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a11      	ldr	r2, [pc, #68]	; (80037a0 <TIM_OC4_SetConfig+0xa8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d109      	bne.n	8003774 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003766:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	019b      	lsls	r3, r3, #6
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	621a      	str	r2, [r3, #32]
}
 800378e:	bf00      	nop
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40010000 	.word	0x40010000
 80037a0:	40010400 	.word	0x40010400

080037a4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f023 0307 	bic.w	r3, r3, #7
 80037d2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b70      	cmp	r3, #112	; 0x70
 80037ec:	d01a      	beq.n	8003824 <TIM_SlaveTimer_SetConfig+0x80>
 80037ee:	2b70      	cmp	r3, #112	; 0x70
 80037f0:	d860      	bhi.n	80038b4 <TIM_SlaveTimer_SetConfig+0x110>
 80037f2:	2b60      	cmp	r3, #96	; 0x60
 80037f4:	d054      	beq.n	80038a0 <TIM_SlaveTimer_SetConfig+0xfc>
 80037f6:	2b60      	cmp	r3, #96	; 0x60
 80037f8:	d85c      	bhi.n	80038b4 <TIM_SlaveTimer_SetConfig+0x110>
 80037fa:	2b50      	cmp	r3, #80	; 0x50
 80037fc:	d046      	beq.n	800388c <TIM_SlaveTimer_SetConfig+0xe8>
 80037fe:	2b50      	cmp	r3, #80	; 0x50
 8003800:	d858      	bhi.n	80038b4 <TIM_SlaveTimer_SetConfig+0x110>
 8003802:	2b40      	cmp	r3, #64	; 0x40
 8003804:	d019      	beq.n	800383a <TIM_SlaveTimer_SetConfig+0x96>
 8003806:	2b40      	cmp	r3, #64	; 0x40
 8003808:	d854      	bhi.n	80038b4 <TIM_SlaveTimer_SetConfig+0x110>
 800380a:	2b30      	cmp	r3, #48	; 0x30
 800380c:	d055      	beq.n	80038ba <TIM_SlaveTimer_SetConfig+0x116>
 800380e:	2b30      	cmp	r3, #48	; 0x30
 8003810:	d850      	bhi.n	80038b4 <TIM_SlaveTimer_SetConfig+0x110>
 8003812:	2b20      	cmp	r3, #32
 8003814:	d051      	beq.n	80038ba <TIM_SlaveTimer_SetConfig+0x116>
 8003816:	2b20      	cmp	r3, #32
 8003818:	d84c      	bhi.n	80038b4 <TIM_SlaveTimer_SetConfig+0x110>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d04d      	beq.n	80038ba <TIM_SlaveTimer_SetConfig+0x116>
 800381e:	2b10      	cmp	r3, #16
 8003820:	d04b      	beq.n	80038ba <TIM_SlaveTimer_SetConfig+0x116>
 8003822:	e047      	b.n	80038b4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68d9      	ldr	r1, [r3, #12]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	f000 f8c1 	bl	80039ba <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003838:	e040      	b.n	80038bc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b05      	cmp	r3, #5
 8003840:	d101      	bne.n	8003846 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e03b      	b.n	80038be <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6a1a      	ldr	r2, [r3, #32]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800386c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	4313      	orrs	r3, r2
 8003878:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	621a      	str	r2, [r3, #32]
      break;
 800388a:	e017      	b.n	80038bc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	6899      	ldr	r1, [r3, #8]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	461a      	mov	r2, r3
 800389a:	f000 f814 	bl	80038c6 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800389e:	e00d      	b.n	80038bc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	6899      	ldr	r1, [r3, #8]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	461a      	mov	r2, r3
 80038ae:	f000 f839 	bl	8003924 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80038b2:	e003      	b.n	80038bc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	75fb      	strb	r3, [r7, #23]
      break;
 80038b8:	e000      	b.n	80038bc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80038ba:	bf00      	nop
  }

  return status;
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b087      	sub	sp, #28
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	f023 0201 	bic.w	r2, r3, #1
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f023 030a 	bic.w	r3, r3, #10
 8003902:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	621a      	str	r2, [r3, #32]
}
 8003918:	bf00      	nop
 800391a:	371c      	adds	r7, #28
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f023 0210 	bic.w	r2, r3, #16
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800394e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	031b      	lsls	r3, r3, #12
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003960:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	621a      	str	r2, [r3, #32]
}
 8003978:	bf00      	nop
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f043 0307 	orr.w	r3, r3, #7
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	609a      	str	r2, [r3, #8]
}
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b087      	sub	sp, #28
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	021a      	lsls	r2, r3, #8
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	431a      	orrs	r2, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	609a      	str	r2, [r3, #8]
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b087      	sub	sp, #28
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a1a      	ldr	r2, [r3, #32]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	401a      	ands	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a1a      	ldr	r2, [r3, #32]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a32:	431a      	orrs	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	621a      	str	r2, [r3, #32]
}
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e05a      	b.n	8003b12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a21      	ldr	r2, [pc, #132]	; (8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d022      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa8:	d01d      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1d      	ldr	r2, [pc, #116]	; (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d018      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1b      	ldr	r2, [pc, #108]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1a      	ldr	r2, [pc, #104]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a18      	ldr	r2, [pc, #96]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a17      	ldr	r2, [pc, #92]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a15      	ldr	r2, [pc, #84]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d10c      	bne.n	8003b00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40010000 	.word	0x40010000
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40000800 	.word	0x40000800
 8003b2c:	40000c00 	.word	0x40000c00
 8003b30:	40010400 	.word	0x40010400
 8003b34:	40014000 	.word	0x40014000
 8003b38:	40001800 	.word	0x40001800

08003b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e03f      	b.n	8003bf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fd fb9c 	bl	80012c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2224      	movs	r2, #36	; 0x24
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fe7d 	bl	80048a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695a      	ldr	r2, [r3, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b08a      	sub	sp, #40	; 0x28
 8003c02:	af02      	add	r7, sp, #8
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d17c      	bne.n	8003d18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <HAL_UART_Transmit+0x2c>
 8003c24:	88fb      	ldrh	r3, [r7, #6]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e075      	b.n	8003d1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_UART_Transmit+0x3e>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e06e      	b.n	8003d1a <HAL_UART_Transmit+0x11c>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2221      	movs	r2, #33	; 0x21
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c52:	f7fd fddd 	bl	8001810 <HAL_GetTick>
 8003c56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	88fa      	ldrh	r2, [r7, #6]
 8003c62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6c:	d108      	bne.n	8003c80 <HAL_UART_Transmit+0x82>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d104      	bne.n	8003c80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	61bb      	str	r3, [r7, #24]
 8003c7e:	e003      	b.n	8003c88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c90:	e02a      	b.n	8003ce8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2180      	movs	r1, #128	; 0x80
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 fbc1 	bl	8004424 <UART_WaitOnFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e036      	b.n	8003d1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10b      	bne.n	8003cca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	3302      	adds	r3, #2
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	e007      	b.n	8003cda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	781a      	ldrb	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1cf      	bne.n	8003c92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2140      	movs	r1, #64	; 0x40
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 fb91 	bl	8004424 <UART_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e006      	b.n	8003d1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	e000      	b.n	8003d1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d18:	2302      	movs	r3, #2
  }
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b08a      	sub	sp, #40	; 0x28
 8003d26:	af02      	add	r7, sp, #8
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	603b      	str	r3, [r7, #0]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	f040 808c 	bne.w	8003e5c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_UART_Receive+0x2e>
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e084      	b.n	8003e5e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_UART_Receive+0x40>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e07d      	b.n	8003e5e <HAL_UART_Receive+0x13c>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2222      	movs	r2, #34	; 0x22
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d7e:	f7fd fd47 	bl	8001810 <HAL_GetTick>
 8003d82:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	88fa      	ldrh	r2, [r7, #6]
 8003d88:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	88fa      	ldrh	r2, [r7, #6]
 8003d8e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d98:	d108      	bne.n	8003dac <HAL_UART_Receive+0x8a>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d104      	bne.n	8003dac <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	e003      	b.n	8003db4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003dbc:	e043      	b.n	8003e46 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2120      	movs	r1, #32
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 fb2b 	bl	8004424 <UART_WaitOnFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e042      	b.n	8003e5e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10c      	bne.n	8003df8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	3302      	adds	r3, #2
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	e01f      	b.n	8003e38 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e00:	d007      	beq.n	8003e12 <HAL_UART_Receive+0xf0>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10a      	bne.n	8003e20 <HAL_UART_Receive+0xfe>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	e008      	b.n	8003e32 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	3301      	adds	r3, #1
 8003e36:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1b6      	bne.n	8003dbe <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e000      	b.n	8003e5e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
  }
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3720      	adds	r7, #32
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	4613      	mov	r3, r2
 8003e72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d11d      	bne.n	8003ebc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_UART_Receive_IT+0x26>
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e016      	b.n	8003ebe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_UART_Receive_IT+0x38>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e00f      	b.n	8003ebe <HAL_UART_Receive_IT+0x58>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 fb24 	bl	8004500 <UART_Start_Receive_IT>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	e000      	b.n	8003ebe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003ebc:	2302      	movs	r3, #2
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b0ba      	sub	sp, #232	; 0xe8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10f      	bne.n	8003f2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d009      	beq.n	8003f2e <HAL_UART_IRQHandler+0x66>
 8003f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fc03 	bl	8004732 <UART_Receive_IT>
      return;
 8003f2c:	e256      	b.n	80043dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 80de 	beq.w	80040f4 <HAL_UART_IRQHandler+0x22c>
 8003f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d106      	bne.n	8003f52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80d1 	beq.w	80040f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00b      	beq.n	8003f76 <HAL_UART_IRQHandler+0xae>
 8003f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f043 0201 	orr.w	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00b      	beq.n	8003f9a <HAL_UART_IRQHandler+0xd2>
 8003f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d005      	beq.n	8003f9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	f043 0202 	orr.w	r2, r3, #2
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <HAL_UART_IRQHandler+0xf6>
 8003fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f043 0204 	orr.w	r2, r3, #4
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d011      	beq.n	8003fee <HAL_UART_IRQHandler+0x126>
 8003fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d105      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	f043 0208 	orr.w	r2, r3, #8
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 81ed 	beq.w	80043d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_UART_IRQHandler+0x14e>
 8004004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fb8e 	bl	8004732 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004020:	2b40      	cmp	r3, #64	; 0x40
 8004022:	bf0c      	ite	eq
 8004024:	2301      	moveq	r3, #1
 8004026:	2300      	movne	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d103      	bne.n	8004042 <HAL_UART_IRQHandler+0x17a>
 800403a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800403e:	2b00      	cmp	r3, #0
 8004040:	d04f      	beq.n	80040e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fa96 	bl	8004574 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b40      	cmp	r3, #64	; 0x40
 8004054:	d141      	bne.n	80040da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3314      	adds	r3, #20
 800405c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800406c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004074:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3314      	adds	r3, #20
 800407e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004082:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004086:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800408e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800409a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1d9      	bne.n	8004056 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d013      	beq.n	80040d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ae:	4a7d      	ldr	r2, [pc, #500]	; (80042a4 <HAL_UART_IRQHandler+0x3dc>)
 80040b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fd fd2c 	bl	8001b14 <HAL_DMA_Abort_IT>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d016      	beq.n	80040f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040cc:	4610      	mov	r0, r2
 80040ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d0:	e00e      	b.n	80040f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f990 	bl	80043f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d8:	e00a      	b.n	80040f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f98c 	bl	80043f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	e006      	b.n	80040f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f988 	bl	80043f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80040ee:	e170      	b.n	80043d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f0:	bf00      	nop
    return;
 80040f2:	e16e      	b.n	80043d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	f040 814a 	bne.w	8004392 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004102:	f003 0310 	and.w	r3, r3, #16
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 8143 	beq.w	8004392 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800410c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004110:	f003 0310 	and.w	r3, r3, #16
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 813c 	beq.w	8004392 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413a:	2b40      	cmp	r3, #64	; 0x40
 800413c:	f040 80b4 	bne.w	80042a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800414c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8140 	beq.w	80043d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800415a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800415e:	429a      	cmp	r2, r3
 8004160:	f080 8139 	bcs.w	80043d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800416a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004176:	f000 8088 	beq.w	800428a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	330c      	adds	r3, #12
 8004180:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004190:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004198:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	330c      	adds	r3, #12
 80041a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80041a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1d9      	bne.n	800417a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3314      	adds	r3, #20
 80041cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3314      	adds	r3, #20
 80041e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e1      	bne.n	80041c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3314      	adds	r3, #20
 8004208:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3314      	adds	r3, #20
 8004222:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004226:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004228:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800422c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e3      	bne.n	8004202 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	330c      	adds	r3, #12
 800424e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800425a:	f023 0310 	bic.w	r3, r3, #16
 800425e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800426c:	65ba      	str	r2, [r7, #88]	; 0x58
 800426e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004272:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004274:	e841 2300 	strex	r3, r2, [r1]
 8004278:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800427a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e3      	bne.n	8004248 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004284:	4618      	mov	r0, r3
 8004286:	f7fd fbd5 	bl	8001a34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004292:	b29b      	uxth	r3, r3
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	b29b      	uxth	r3, r3
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f8b6 	bl	800440c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042a0:	e099      	b.n	80043d6 <HAL_UART_IRQHandler+0x50e>
 80042a2:	bf00      	nop
 80042a4:	0800463b 	.word	0x0800463b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 808b 	beq.w	80043da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80042c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 8086 	beq.w	80043da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	330c      	adds	r3, #12
 80042d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	330c      	adds	r3, #12
 80042ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80042f2:	647a      	str	r2, [r7, #68]	; 0x44
 80042f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e3      	bne.n	80042ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3314      	adds	r3, #20
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	623b      	str	r3, [r7, #32]
   return(result);
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	f023 0301 	bic.w	r3, r3, #1
 800431c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3314      	adds	r3, #20
 8004326:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800432a:	633a      	str	r2, [r7, #48]	; 0x30
 800432c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e3      	bne.n	8004306 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	330c      	adds	r3, #12
 8004352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	60fb      	str	r3, [r7, #12]
   return(result);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0310 	bic.w	r3, r3, #16
 8004362:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	330c      	adds	r3, #12
 800436c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004370:	61fa      	str	r2, [r7, #28]
 8004372:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	69b9      	ldr	r1, [r7, #24]
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	617b      	str	r3, [r7, #20]
   return(result);
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e3      	bne.n	800434c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004384:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004388:	4619      	mov	r1, r3
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f83e 	bl	800440c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004390:	e023      	b.n	80043da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_UART_IRQHandler+0x4ea>
 800439e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f959 	bl	8004662 <UART_Transmit_IT>
    return;
 80043b0:	e014      	b.n	80043dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00e      	beq.n	80043dc <HAL_UART_IRQHandler+0x514>
 80043be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d008      	beq.n	80043dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f999 	bl	8004702 <UART_EndTransmit_IT>
    return;
 80043d0:	e004      	b.n	80043dc <HAL_UART_IRQHandler+0x514>
    return;
 80043d2:	bf00      	nop
 80043d4:	e002      	b.n	80043dc <HAL_UART_IRQHandler+0x514>
      return;
 80043d6:	bf00      	nop
 80043d8:	e000      	b.n	80043dc <HAL_UART_IRQHandler+0x514>
      return;
 80043da:	bf00      	nop
  }
}
 80043dc:	37e8      	adds	r7, #232	; 0xe8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop

080043e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b090      	sub	sp, #64	; 0x40
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	4613      	mov	r3, r2
 8004432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004434:	e050      	b.n	80044d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443c:	d04c      	beq.n	80044d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800443e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004440:	2b00      	cmp	r3, #0
 8004442:	d007      	beq.n	8004454 <UART_WaitOnFlagUntilTimeout+0x30>
 8004444:	f7fd f9e4 	bl	8001810 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004450:	429a      	cmp	r2, r3
 8004452:	d241      	bcs.n	80044d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	330c      	adds	r3, #12
 800445a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	e853 3f00 	ldrex	r3, [r3]
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800446a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	330c      	adds	r3, #12
 8004472:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004474:	637a      	str	r2, [r7, #52]	; 0x34
 8004476:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800447a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800447c:	e841 2300 	strex	r3, r2, [r1]
 8004480:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e5      	bne.n	8004454 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3314      	adds	r3, #20
 800448e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	e853 3f00 	ldrex	r3, [r3]
 8004496:	613b      	str	r3, [r7, #16]
   return(result);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	63bb      	str	r3, [r7, #56]	; 0x38
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3314      	adds	r3, #20
 80044a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044a8:	623a      	str	r2, [r7, #32]
 80044aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ac:	69f9      	ldr	r1, [r7, #28]
 80044ae:	6a3a      	ldr	r2, [r7, #32]
 80044b0:	e841 2300 	strex	r3, r2, [r1]
 80044b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e5      	bne.n	8004488 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e00f      	b.n	80044f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4013      	ands	r3, r2
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	bf0c      	ite	eq
 80044e8:	2301      	moveq	r3, #1
 80044ea:	2300      	movne	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d09f      	beq.n	8004436 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3740      	adds	r7, #64	; 0x40
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	4613      	mov	r3, r2
 800450c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	88fa      	ldrh	r2, [r7, #6]
 8004518:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	88fa      	ldrh	r2, [r7, #6]
 800451e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2222      	movs	r2, #34	; 0x22
 800452a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004544:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695a      	ldr	r2, [r3, #20]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0220 	orr.w	r2, r2, #32
 8004564:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004574:	b480      	push	{r7}
 8004576:	b095      	sub	sp, #84	; 0x54
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	330c      	adds	r3, #12
 800459a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800459c:	643a      	str	r2, [r7, #64]	; 0x40
 800459e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e5      	bne.n	800457c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3314      	adds	r3, #20
 80045b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	e853 3f00 	ldrex	r3, [r3]
 80045be:	61fb      	str	r3, [r7, #28]
   return(result);
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f023 0301 	bic.w	r3, r3, #1
 80045c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3314      	adds	r3, #20
 80045ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045d8:	e841 2300 	strex	r3, r2, [r1]
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e5      	bne.n	80045b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d119      	bne.n	8004620 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	330c      	adds	r3, #12
 80045f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	e853 3f00 	ldrex	r3, [r3]
 80045fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f023 0310 	bic.w	r3, r3, #16
 8004602:	647b      	str	r3, [r7, #68]	; 0x44
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	330c      	adds	r3, #12
 800460a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800460c:	61ba      	str	r2, [r7, #24]
 800460e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004610:	6979      	ldr	r1, [r7, #20]
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	e841 2300 	strex	r3, r2, [r1]
 8004618:	613b      	str	r3, [r7, #16]
   return(result);
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1e5      	bne.n	80045ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800462e:	bf00      	nop
 8004630:	3754      	adds	r7, #84	; 0x54
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004646:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f7ff fecf 	bl	80043f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800465a:	bf00      	nop
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004662:	b480      	push	{r7}
 8004664:	b085      	sub	sp, #20
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b21      	cmp	r3, #33	; 0x21
 8004674:	d13e      	bne.n	80046f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467e:	d114      	bne.n	80046aa <UART_Transmit_IT+0x48>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d110      	bne.n	80046aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800469c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	1c9a      	adds	r2, r3, #2
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	621a      	str	r2, [r3, #32]
 80046a8:	e008      	b.n	80046bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	1c59      	adds	r1, r3, #1
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6211      	str	r1, [r2, #32]
 80046b4:	781a      	ldrb	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	4619      	mov	r1, r3
 80046ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10f      	bne.n	80046f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e000      	b.n	80046f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046f4:	2302      	movs	r3, #2
  }
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004718:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7ff fe5e 	bl	80043e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b08c      	sub	sp, #48	; 0x30
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b22      	cmp	r3, #34	; 0x22
 8004744:	f040 80ab 	bne.w	800489e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004750:	d117      	bne.n	8004782 <UART_Receive_IT+0x50>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d113      	bne.n	8004782 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800475a:	2300      	movs	r3, #0
 800475c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004762:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	b29b      	uxth	r3, r3
 800476c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004770:	b29a      	uxth	r2, r3
 8004772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004774:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	1c9a      	adds	r2, r3, #2
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	629a      	str	r2, [r3, #40]	; 0x28
 8004780:	e026      	b.n	80047d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004788:	2300      	movs	r3, #0
 800478a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004794:	d007      	beq.n	80047a6 <UART_Receive_IT+0x74>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10a      	bne.n	80047b4 <UART_Receive_IT+0x82>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	e008      	b.n	80047c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29b      	uxth	r3, r3
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	4619      	mov	r1, r3
 80047de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d15a      	bne.n	800489a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0220 	bic.w	r2, r2, #32
 80047f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004802:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695a      	ldr	r2, [r3, #20]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0201 	bic.w	r2, r2, #1
 8004812:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004820:	2b01      	cmp	r3, #1
 8004822:	d135      	bne.n	8004890 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	330c      	adds	r3, #12
 8004830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	e853 3f00 	ldrex	r3, [r3]
 8004838:	613b      	str	r3, [r7, #16]
   return(result);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f023 0310 	bic.w	r3, r3, #16
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	330c      	adds	r3, #12
 8004848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484a:	623a      	str	r2, [r7, #32]
 800484c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484e:	69f9      	ldr	r1, [r7, #28]
 8004850:	6a3a      	ldr	r2, [r7, #32]
 8004852:	e841 2300 	strex	r3, r2, [r1]
 8004856:	61bb      	str	r3, [r7, #24]
   return(result);
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1e5      	bne.n	800482a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	2b10      	cmp	r3, #16
 800486a:	d10a      	bne.n	8004882 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004886:	4619      	mov	r1, r3
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff fdbf 	bl	800440c <HAL_UARTEx_RxEventCallback>
 800488e:	e002      	b.n	8004896 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7fb fe79 	bl	8000588 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	e002      	b.n	80048a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	e000      	b.n	80048a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800489e:	2302      	movs	r3, #2
  }
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3730      	adds	r7, #48	; 0x30
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ac:	b09f      	sub	sp, #124	; 0x7c
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048be:	68d9      	ldr	r1, [r3, #12]
 80048c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	ea40 0301 	orr.w	r3, r0, r1
 80048c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	431a      	orrs	r2, r3
 80048d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	431a      	orrs	r2, r3
 80048da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	4313      	orrs	r3, r2
 80048e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80048e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048ec:	f021 010c 	bic.w	r1, r1, #12
 80048f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048f6:	430b      	orrs	r3, r1
 80048f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004906:	6999      	ldr	r1, [r3, #24]
 8004908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	ea40 0301 	orr.w	r3, r0, r1
 8004910:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4bc5      	ldr	r3, [pc, #788]	; (8004c2c <UART_SetConfig+0x384>)
 8004918:	429a      	cmp	r2, r3
 800491a:	d004      	beq.n	8004926 <UART_SetConfig+0x7e>
 800491c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	4bc3      	ldr	r3, [pc, #780]	; (8004c30 <UART_SetConfig+0x388>)
 8004922:	429a      	cmp	r2, r3
 8004924:	d103      	bne.n	800492e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004926:	f7fd ff61 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 800492a:	6778      	str	r0, [r7, #116]	; 0x74
 800492c:	e002      	b.n	8004934 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800492e:	f7fd ff49 	bl	80027c4 <HAL_RCC_GetPCLK1Freq>
 8004932:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800493c:	f040 80b6 	bne.w	8004aac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004942:	461c      	mov	r4, r3
 8004944:	f04f 0500 	mov.w	r5, #0
 8004948:	4622      	mov	r2, r4
 800494a:	462b      	mov	r3, r5
 800494c:	1891      	adds	r1, r2, r2
 800494e:	6439      	str	r1, [r7, #64]	; 0x40
 8004950:	415b      	adcs	r3, r3
 8004952:	647b      	str	r3, [r7, #68]	; 0x44
 8004954:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004958:	1912      	adds	r2, r2, r4
 800495a:	eb45 0303 	adc.w	r3, r5, r3
 800495e:	f04f 0000 	mov.w	r0, #0
 8004962:	f04f 0100 	mov.w	r1, #0
 8004966:	00d9      	lsls	r1, r3, #3
 8004968:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800496c:	00d0      	lsls	r0, r2, #3
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	1911      	adds	r1, r2, r4
 8004974:	6639      	str	r1, [r7, #96]	; 0x60
 8004976:	416b      	adcs	r3, r5
 8004978:	667b      	str	r3, [r7, #100]	; 0x64
 800497a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	461a      	mov	r2, r3
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	1891      	adds	r1, r2, r2
 8004986:	63b9      	str	r1, [r7, #56]	; 0x38
 8004988:	415b      	adcs	r3, r3
 800498a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800498c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004990:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004994:	f7fb fc7c 	bl	8000290 <__aeabi_uldivmod>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4ba5      	ldr	r3, [pc, #660]	; (8004c34 <UART_SetConfig+0x38c>)
 800499e:	fba3 2302 	umull	r2, r3, r3, r2
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	011e      	lsls	r6, r3, #4
 80049a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049a8:	461c      	mov	r4, r3
 80049aa:	f04f 0500 	mov.w	r5, #0
 80049ae:	4622      	mov	r2, r4
 80049b0:	462b      	mov	r3, r5
 80049b2:	1891      	adds	r1, r2, r2
 80049b4:	6339      	str	r1, [r7, #48]	; 0x30
 80049b6:	415b      	adcs	r3, r3
 80049b8:	637b      	str	r3, [r7, #52]	; 0x34
 80049ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80049be:	1912      	adds	r2, r2, r4
 80049c0:	eb45 0303 	adc.w	r3, r5, r3
 80049c4:	f04f 0000 	mov.w	r0, #0
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	00d9      	lsls	r1, r3, #3
 80049ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049d2:	00d0      	lsls	r0, r2, #3
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	1911      	adds	r1, r2, r4
 80049da:	65b9      	str	r1, [r7, #88]	; 0x58
 80049dc:	416b      	adcs	r3, r5
 80049de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	461a      	mov	r2, r3
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	1891      	adds	r1, r2, r2
 80049ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80049ee:	415b      	adcs	r3, r3
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80049fa:	f7fb fc49 	bl	8000290 <__aeabi_uldivmod>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4b8c      	ldr	r3, [pc, #560]	; (8004c34 <UART_SetConfig+0x38c>)
 8004a04:	fba3 1302 	umull	r1, r3, r3, r2
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	2164      	movs	r1, #100	; 0x64
 8004a0c:	fb01 f303 	mul.w	r3, r1, r3
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	3332      	adds	r3, #50	; 0x32
 8004a16:	4a87      	ldr	r2, [pc, #540]	; (8004c34 <UART_SetConfig+0x38c>)
 8004a18:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a24:	441e      	add	r6, r3
 8004a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f04f 0100 	mov.w	r1, #0
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	1894      	adds	r4, r2, r2
 8004a34:	623c      	str	r4, [r7, #32]
 8004a36:	415b      	adcs	r3, r3
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a3e:	1812      	adds	r2, r2, r0
 8004a40:	eb41 0303 	adc.w	r3, r1, r3
 8004a44:	f04f 0400 	mov.w	r4, #0
 8004a48:	f04f 0500 	mov.w	r5, #0
 8004a4c:	00dd      	lsls	r5, r3, #3
 8004a4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a52:	00d4      	lsls	r4, r2, #3
 8004a54:	4622      	mov	r2, r4
 8004a56:	462b      	mov	r3, r5
 8004a58:	1814      	adds	r4, r2, r0
 8004a5a:	653c      	str	r4, [r7, #80]	; 0x50
 8004a5c:	414b      	adcs	r3, r1
 8004a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	461a      	mov	r2, r3
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	1891      	adds	r1, r2, r2
 8004a6c:	61b9      	str	r1, [r7, #24]
 8004a6e:	415b      	adcs	r3, r3
 8004a70:	61fb      	str	r3, [r7, #28]
 8004a72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004a7a:	f7fb fc09 	bl	8000290 <__aeabi_uldivmod>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4b6c      	ldr	r3, [pc, #432]	; (8004c34 <UART_SetConfig+0x38c>)
 8004a84:	fba3 1302 	umull	r1, r3, r3, r2
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	2164      	movs	r1, #100	; 0x64
 8004a8c:	fb01 f303 	mul.w	r3, r1, r3
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	3332      	adds	r3, #50	; 0x32
 8004a96:	4a67      	ldr	r2, [pc, #412]	; (8004c34 <UART_SetConfig+0x38c>)
 8004a98:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9c:	095b      	lsrs	r3, r3, #5
 8004a9e:	f003 0207 	and.w	r2, r3, #7
 8004aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4432      	add	r2, r6
 8004aa8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004aaa:	e0b9      	b.n	8004c20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aae:	461c      	mov	r4, r3
 8004ab0:	f04f 0500 	mov.w	r5, #0
 8004ab4:	4622      	mov	r2, r4
 8004ab6:	462b      	mov	r3, r5
 8004ab8:	1891      	adds	r1, r2, r2
 8004aba:	6139      	str	r1, [r7, #16]
 8004abc:	415b      	adcs	r3, r3
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ac4:	1912      	adds	r2, r2, r4
 8004ac6:	eb45 0303 	adc.w	r3, r5, r3
 8004aca:	f04f 0000 	mov.w	r0, #0
 8004ace:	f04f 0100 	mov.w	r1, #0
 8004ad2:	00d9      	lsls	r1, r3, #3
 8004ad4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ad8:	00d0      	lsls	r0, r2, #3
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	eb12 0804 	adds.w	r8, r2, r4
 8004ae2:	eb43 0905 	adc.w	r9, r3, r5
 8004ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f04f 0100 	mov.w	r1, #0
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	008b      	lsls	r3, r1, #2
 8004afa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004afe:	0082      	lsls	r2, r0, #2
 8004b00:	4640      	mov	r0, r8
 8004b02:	4649      	mov	r1, r9
 8004b04:	f7fb fbc4 	bl	8000290 <__aeabi_uldivmod>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4b49      	ldr	r3, [pc, #292]	; (8004c34 <UART_SetConfig+0x38c>)
 8004b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	011e      	lsls	r6, r3, #4
 8004b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f04f 0100 	mov.w	r1, #0
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	1894      	adds	r4, r2, r2
 8004b24:	60bc      	str	r4, [r7, #8]
 8004b26:	415b      	adcs	r3, r3
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b2e:	1812      	adds	r2, r2, r0
 8004b30:	eb41 0303 	adc.w	r3, r1, r3
 8004b34:	f04f 0400 	mov.w	r4, #0
 8004b38:	f04f 0500 	mov.w	r5, #0
 8004b3c:	00dd      	lsls	r5, r3, #3
 8004b3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b42:	00d4      	lsls	r4, r2, #3
 8004b44:	4622      	mov	r2, r4
 8004b46:	462b      	mov	r3, r5
 8004b48:	1814      	adds	r4, r2, r0
 8004b4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004b4c:	414b      	adcs	r3, r1
 8004b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f04f 0100 	mov.w	r1, #0
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	008b      	lsls	r3, r1, #2
 8004b64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b68:	0082      	lsls	r2, r0, #2
 8004b6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004b6e:	f7fb fb8f 	bl	8000290 <__aeabi_uldivmod>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4b2f      	ldr	r3, [pc, #188]	; (8004c34 <UART_SetConfig+0x38c>)
 8004b78:	fba3 1302 	umull	r1, r3, r3, r2
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	2164      	movs	r1, #100	; 0x64
 8004b80:	fb01 f303 	mul.w	r3, r1, r3
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	3332      	adds	r3, #50	; 0x32
 8004b8a:	4a2a      	ldr	r2, [pc, #168]	; (8004c34 <UART_SetConfig+0x38c>)
 8004b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b90:	095b      	lsrs	r3, r3, #5
 8004b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b96:	441e      	add	r6, r3
 8004b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f04f 0100 	mov.w	r1, #0
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	1894      	adds	r4, r2, r2
 8004ba6:	603c      	str	r4, [r7, #0]
 8004ba8:	415b      	adcs	r3, r3
 8004baa:	607b      	str	r3, [r7, #4]
 8004bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bb0:	1812      	adds	r2, r2, r0
 8004bb2:	eb41 0303 	adc.w	r3, r1, r3
 8004bb6:	f04f 0400 	mov.w	r4, #0
 8004bba:	f04f 0500 	mov.w	r5, #0
 8004bbe:	00dd      	lsls	r5, r3, #3
 8004bc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bc4:	00d4      	lsls	r4, r2, #3
 8004bc6:	4622      	mov	r2, r4
 8004bc8:	462b      	mov	r3, r5
 8004bca:	eb12 0a00 	adds.w	sl, r2, r0
 8004bce:	eb43 0b01 	adc.w	fp, r3, r1
 8004bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f04f 0100 	mov.w	r1, #0
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	008b      	lsls	r3, r1, #2
 8004be6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bea:	0082      	lsls	r2, r0, #2
 8004bec:	4650      	mov	r0, sl
 8004bee:	4659      	mov	r1, fp
 8004bf0:	f7fb fb4e 	bl	8000290 <__aeabi_uldivmod>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4b0e      	ldr	r3, [pc, #56]	; (8004c34 <UART_SetConfig+0x38c>)
 8004bfa:	fba3 1302 	umull	r1, r3, r3, r2
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	2164      	movs	r1, #100	; 0x64
 8004c02:	fb01 f303 	mul.w	r3, r1, r3
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	3332      	adds	r3, #50	; 0x32
 8004c0c:	4a09      	ldr	r2, [pc, #36]	; (8004c34 <UART_SetConfig+0x38c>)
 8004c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	f003 020f 	and.w	r2, r3, #15
 8004c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4432      	add	r2, r6
 8004c1e:	609a      	str	r2, [r3, #8]
}
 8004c20:	bf00      	nop
 8004c22:	377c      	adds	r7, #124	; 0x7c
 8004c24:	46bd      	mov	sp, r7
 8004c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40011000 	.word	0x40011000
 8004c30:	40011400 	.word	0x40011400
 8004c34:	51eb851f 	.word	0x51eb851f

08004c38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004c3c:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <SysTick_Handler+0x1c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004c40:	f000 f996 	bl	8004f70 <xTaskGetSchedulerState>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d001      	beq.n	8004c4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004c4a:	f000 f9fd 	bl	8005048 <xPortSysTickHandler>
  }
}
 8004c4e:	bf00      	nop
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	e000e010 	.word	0xe000e010

08004c58 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	601a      	str	r2, [r3, #0]
}
 8004c94:	bf00      	nop
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6892      	ldr	r2, [r2, #8]
 8004cb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6852      	ldr	r2, [r2, #4]
 8004cc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d103      	bne.n	8004cd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	1e5a      	subs	r2, r3, #1
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cfe:	4b4f      	ldr	r3, [pc, #316]	; (8004e3c <xTaskIncrementTick+0x148>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f040 808f 	bne.w	8004e26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d08:	4b4d      	ldr	r3, [pc, #308]	; (8004e40 <xTaskIncrementTick+0x14c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d10:	4a4b      	ldr	r2, [pc, #300]	; (8004e40 <xTaskIncrementTick+0x14c>)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d120      	bne.n	8004d5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d1c:	4b49      	ldr	r3, [pc, #292]	; (8004e44 <xTaskIncrementTick+0x150>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d38:	bf00      	nop
 8004d3a:	e7fe      	b.n	8004d3a <xTaskIncrementTick+0x46>
 8004d3c:	4b41      	ldr	r3, [pc, #260]	; (8004e44 <xTaskIncrementTick+0x150>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	4b41      	ldr	r3, [pc, #260]	; (8004e48 <xTaskIncrementTick+0x154>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a3f      	ldr	r2, [pc, #252]	; (8004e44 <xTaskIncrementTick+0x150>)
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	4a3f      	ldr	r2, [pc, #252]	; (8004e48 <xTaskIncrementTick+0x154>)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	4b3e      	ldr	r3, [pc, #248]	; (8004e4c <xTaskIncrementTick+0x158>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3301      	adds	r3, #1
 8004d56:	4a3d      	ldr	r2, [pc, #244]	; (8004e4c <xTaskIncrementTick+0x158>)
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	f000 f8e9 	bl	8004f30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d5e:	4b3c      	ldr	r3, [pc, #240]	; (8004e50 <xTaskIncrementTick+0x15c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d349      	bcc.n	8004dfc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d68:	4b36      	ldr	r3, [pc, #216]	; (8004e44 <xTaskIncrementTick+0x150>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d104      	bne.n	8004d7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d72:	4b37      	ldr	r3, [pc, #220]	; (8004e50 <xTaskIncrementTick+0x15c>)
 8004d74:	f04f 32ff 	mov.w	r2, #4294967295
 8004d78:	601a      	str	r2, [r3, #0]
					break;
 8004d7a:	e03f      	b.n	8004dfc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d7c:	4b31      	ldr	r3, [pc, #196]	; (8004e44 <xTaskIncrementTick+0x150>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d203      	bcs.n	8004d9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d94:	4a2e      	ldr	r2, [pc, #184]	; (8004e50 <xTaskIncrementTick+0x15c>)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d9a:	e02f      	b.n	8004dfc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff ff7d 	bl	8004ca0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d004      	beq.n	8004db8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	3318      	adds	r3, #24
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff ff74 	bl	8004ca0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbc:	4b25      	ldr	r3, [pc, #148]	; (8004e54 <xTaskIncrementTick+0x160>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d903      	bls.n	8004dcc <xTaskIncrementTick+0xd8>
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	4a22      	ldr	r2, [pc, #136]	; (8004e54 <xTaskIncrementTick+0x160>)
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4a1f      	ldr	r2, [pc, #124]	; (8004e58 <xTaskIncrementTick+0x164>)
 8004dda:	441a      	add	r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	3304      	adds	r3, #4
 8004de0:	4619      	mov	r1, r3
 8004de2:	4610      	mov	r0, r2
 8004de4:	f7ff ff38 	bl	8004c58 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dec:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <xTaskIncrementTick+0x168>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d3b8      	bcc.n	8004d68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004df6:	2301      	movs	r3, #1
 8004df8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dfa:	e7b5      	b.n	8004d68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004dfc:	4b17      	ldr	r3, [pc, #92]	; (8004e5c <xTaskIncrementTick+0x168>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e02:	4915      	ldr	r1, [pc, #84]	; (8004e58 <xTaskIncrementTick+0x164>)
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d901      	bls.n	8004e18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004e14:	2301      	movs	r3, #1
 8004e16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e18:	4b11      	ldr	r3, [pc, #68]	; (8004e60 <xTaskIncrementTick+0x16c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d007      	beq.n	8004e30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004e20:	2301      	movs	r3, #1
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	e004      	b.n	8004e30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e26:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <xTaskIncrementTick+0x170>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	4a0d      	ldr	r2, [pc, #52]	; (8004e64 <xTaskIncrementTick+0x170>)
 8004e2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e30:	697b      	ldr	r3, [r7, #20]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000714 	.word	0x20000714
 8004e40:	200006f8 	.word	0x200006f8
 8004e44:	200006f0 	.word	0x200006f0
 8004e48:	200006f4 	.word	0x200006f4
 8004e4c:	2000070c 	.word	0x2000070c
 8004e50:	20000710 	.word	0x20000710
 8004e54:	200006fc 	.word	0x200006fc
 8004e58:	20000290 	.word	0x20000290
 8004e5c:	2000028c 	.word	0x2000028c
 8004e60:	20000708 	.word	0x20000708
 8004e64:	20000704 	.word	0x20000704

08004e68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e6e:	4b2a      	ldr	r3, [pc, #168]	; (8004f18 <vTaskSwitchContext+0xb0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e76:	4b29      	ldr	r3, [pc, #164]	; (8004f1c <vTaskSwitchContext+0xb4>)
 8004e78:	2201      	movs	r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e7c:	e046      	b.n	8004f0c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004e7e:	4b27      	ldr	r3, [pc, #156]	; (8004f1c <vTaskSwitchContext+0xb4>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e84:	4b26      	ldr	r3, [pc, #152]	; (8004f20 <vTaskSwitchContext+0xb8>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	e010      	b.n	8004eae <vTaskSwitchContext+0x46>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10a      	bne.n	8004ea8 <vTaskSwitchContext+0x40>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	607b      	str	r3, [r7, #4]
}
 8004ea4:	bf00      	nop
 8004ea6:	e7fe      	b.n	8004ea6 <vTaskSwitchContext+0x3e>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	491d      	ldr	r1, [pc, #116]	; (8004f24 <vTaskSwitchContext+0xbc>)
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0e4      	beq.n	8004e8c <vTaskSwitchContext+0x24>
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4a15      	ldr	r2, [pc, #84]	; (8004f24 <vTaskSwitchContext+0xbc>)
 8004ece:	4413      	add	r3, r2
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	605a      	str	r2, [r3, #4]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d104      	bne.n	8004ef2 <vTaskSwitchContext+0x8a>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	605a      	str	r2, [r3, #4]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4a0b      	ldr	r2, [pc, #44]	; (8004f28 <vTaskSwitchContext+0xc0>)
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	4a08      	ldr	r2, [pc, #32]	; (8004f20 <vTaskSwitchContext+0xb8>)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f02:	4b09      	ldr	r3, [pc, #36]	; (8004f28 <vTaskSwitchContext+0xc0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3354      	adds	r3, #84	; 0x54
 8004f08:	4a08      	ldr	r2, [pc, #32]	; (8004f2c <vTaskSwitchContext+0xc4>)
 8004f0a:	6013      	str	r3, [r2, #0]
}
 8004f0c:	bf00      	nop
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	20000714 	.word	0x20000714
 8004f1c:	20000708 	.word	0x20000708
 8004f20:	200006fc 	.word	0x200006fc
 8004f24:	20000290 	.word	0x20000290
 8004f28:	2000028c 	.word	0x2000028c
 8004f2c:	2000018c 	.word	0x2000018c

08004f30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f36:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <prvResetNextTaskUnblockTime+0x38>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d104      	bne.n	8004f4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f40:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <prvResetNextTaskUnblockTime+0x3c>)
 8004f42:	f04f 32ff 	mov.w	r2, #4294967295
 8004f46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f48:	e008      	b.n	8004f5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f4a:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <prvResetNextTaskUnblockTime+0x38>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	4a04      	ldr	r2, [pc, #16]	; (8004f6c <prvResetNextTaskUnblockTime+0x3c>)
 8004f5a:	6013      	str	r3, [r2, #0]
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	200006f0 	.word	0x200006f0
 8004f6c:	20000710 	.word	0x20000710

08004f70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f76:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <xTaskGetSchedulerState+0x34>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d102      	bne.n	8004f84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	607b      	str	r3, [r7, #4]
 8004f82:	e008      	b.n	8004f96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f84:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <xTaskGetSchedulerState+0x38>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	607b      	str	r3, [r7, #4]
 8004f90:	e001      	b.n	8004f96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f92:	2300      	movs	r3, #0
 8004f94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f96:	687b      	ldr	r3, [r7, #4]
	}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	20000700 	.word	0x20000700
 8004fa8:	20000714 	.word	0x20000714
 8004fac:	00000000 	.word	0x00000000

08004fb0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fb0:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <pxCurrentTCBConst2>)
 8004fb2:	6819      	ldr	r1, [r3, #0]
 8004fb4:	6808      	ldr	r0, [r1, #0]
 8004fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fba:	f380 8809 	msr	PSP, r0
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f04f 0000 	mov.w	r0, #0
 8004fc6:	f380 8811 	msr	BASEPRI, r0
 8004fca:	4770      	bx	lr
 8004fcc:	f3af 8000 	nop.w

08004fd0 <pxCurrentTCBConst2>:
 8004fd0:	2000028c 	.word	0x2000028c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
	...

08004fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fe0:	f3ef 8009 	mrs	r0, PSP
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	4b15      	ldr	r3, [pc, #84]	; (8005040 <pxCurrentTCBConst>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	f01e 0f10 	tst.w	lr, #16
 8004ff0:	bf08      	it	eq
 8004ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffa:	6010      	str	r0, [r2, #0]
 8004ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005004:	f380 8811 	msr	BASEPRI, r0
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f7ff ff2a 	bl	8004e68 <vTaskSwitchContext>
 8005014:	f04f 0000 	mov.w	r0, #0
 8005018:	f380 8811 	msr	BASEPRI, r0
 800501c:	bc09      	pop	{r0, r3}
 800501e:	6819      	ldr	r1, [r3, #0]
 8005020:	6808      	ldr	r0, [r1, #0]
 8005022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005026:	f01e 0f10 	tst.w	lr, #16
 800502a:	bf08      	it	eq
 800502c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005030:	f380 8809 	msr	PSP, r0
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	f3af 8000 	nop.w

08005040 <pxCurrentTCBConst>:
 8005040:	2000028c 	.word	0x2000028c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop

08005048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	607b      	str	r3, [r7, #4]
}
 8005060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005062:	f7ff fe47 	bl	8004cf4 <xTaskIncrementTick>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800506c:	4b06      	ldr	r3, [pc, #24]	; (8005088 <xPortSysTickHandler+0x40>)
 800506e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	2300      	movs	r3, #0
 8005076:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800507e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	e000ed04 	.word	0xe000ed04

0800508c <init_powderMachine>:
								{PD05_heat_EN_Pin, PD05_heat_IN1_Pin, PD05_heat_IN2_Pin},
								{CF01_heat_EN_Pin, CF01_heat_IN1_Pin, CF01_heat_IN2_Pin}};
/*********************************** Pin configuration ***********************************/

void init_powderMachine(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
	// powder motor direction must be fixed!
	// init DCpowder motor direction & disable motor
	for(uint8_t i = 0; i<sizeof(PD_DCpowder_GPIO_Port) / sizeof(PD_DCpowder_GPIO_Port[0]); i++){
 8005092:	2300      	movs	r3, #0
 8005094:	71fb      	strb	r3, [r7, #7]
 8005096:	e045      	b.n	8005124 <init_powderMachine+0x98>
		HAL_GPIO_WritePin(PD_DCpowder_GPIO_Port[i][IN1], PD_DCpowder_Pin[i][IN1], GPIO_PIN_RESET);
 8005098:	79fa      	ldrb	r2, [r7, #7]
 800509a:	497d      	ldr	r1, [pc, #500]	; (8005290 <init_powderMachine+0x204>)
 800509c:	4613      	mov	r3, r2
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	3304      	adds	r3, #4
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	79fa      	ldrb	r2, [r7, #7]
 80050ac:	4979      	ldr	r1, [pc, #484]	; (8005294 <init_powderMachine+0x208>)
 80050ae:	4613      	mov	r3, r2
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	3304      	adds	r3, #4
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2200      	movs	r2, #0
 80050c0:	4619      	mov	r1, r3
 80050c2:	f7fc fef5 	bl	8001eb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCpowder_GPIO_Port[i][IN2], PD_DCpowder_Pin[i][IN2], GPIO_PIN_SET);
 80050c6:	79fa      	ldrb	r2, [r7, #7]
 80050c8:	4971      	ldr	r1, [pc, #452]	; (8005290 <init_powderMachine+0x204>)
 80050ca:	4613      	mov	r3, r2
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	3308      	adds	r3, #8
 80050d6:	6818      	ldr	r0, [r3, #0]
 80050d8:	79fa      	ldrb	r2, [r7, #7]
 80050da:	496e      	ldr	r1, [pc, #440]	; (8005294 <init_powderMachine+0x208>)
 80050dc:	4613      	mov	r3, r2
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	3308      	adds	r3, #8
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	2201      	movs	r2, #1
 80050ee:	4619      	mov	r1, r3
 80050f0:	f7fc fede 	bl	8001eb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCpowder_GPIO_Port[i][EN], PD_DCpowder_Pin[i][EN], GPIO_PIN_RESET);
 80050f4:	79fa      	ldrb	r2, [r7, #7]
 80050f6:	4966      	ldr	r1, [pc, #408]	; (8005290 <init_powderMachine+0x204>)
 80050f8:	4613      	mov	r3, r2
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	440b      	add	r3, r1
 8005102:	6818      	ldr	r0, [r3, #0]
 8005104:	79fa      	ldrb	r2, [r7, #7]
 8005106:	4963      	ldr	r1, [pc, #396]	; (8005294 <init_powderMachine+0x208>)
 8005108:	4613      	mov	r3, r2
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	b29b      	uxth	r3, r3
 8005116:	2200      	movs	r2, #0
 8005118:	4619      	mov	r1, r3
 800511a:	f7fc fec9 	bl	8001eb0 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i<sizeof(PD_DCpowder_GPIO_Port) / sizeof(PD_DCpowder_GPIO_Port[0]); i++){
 800511e:	79fb      	ldrb	r3, [r7, #7]
 8005120:	3301      	adds	r3, #1
 8005122:	71fb      	strb	r3, [r7, #7]
 8005124:	79fb      	ldrb	r3, [r7, #7]
 8005126:	2b04      	cmp	r3, #4
 8005128:	d9b6      	bls.n	8005098 <init_powderMachine+0xc>
	}

	// init DCmix motor direction & disable motor
	for(uint8_t i = 0; i<sizeof(PD_DCmix_GPIO_Port) / sizeof(PD_DCmix_GPIO_Port[0]); i++){
 800512a:	2300      	movs	r3, #0
 800512c:	71bb      	strb	r3, [r7, #6]
 800512e:	e045      	b.n	80051bc <init_powderMachine+0x130>
		HAL_GPIO_WritePin(PD_DCmix_GPIO_Port[i][IN1], PD_DCmix_Pin[i][IN1], GPIO_PIN_SET);
 8005130:	79ba      	ldrb	r2, [r7, #6]
 8005132:	4959      	ldr	r1, [pc, #356]	; (8005298 <init_powderMachine+0x20c>)
 8005134:	4613      	mov	r3, r2
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	4413      	add	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	3304      	adds	r3, #4
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	79ba      	ldrb	r2, [r7, #6]
 8005144:	4955      	ldr	r1, [pc, #340]	; (800529c <init_powderMachine+0x210>)
 8005146:	4613      	mov	r3, r2
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	440b      	add	r3, r1
 8005150:	3304      	adds	r3, #4
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	b29b      	uxth	r3, r3
 8005156:	2201      	movs	r2, #1
 8005158:	4619      	mov	r1, r3
 800515a:	f7fc fea9 	bl	8001eb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCmix_GPIO_Port[i][IN2], PD_DCmix_Pin[i][IN2], GPIO_PIN_RESET);
 800515e:	79ba      	ldrb	r2, [r7, #6]
 8005160:	494d      	ldr	r1, [pc, #308]	; (8005298 <init_powderMachine+0x20c>)
 8005162:	4613      	mov	r3, r2
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	4413      	add	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	440b      	add	r3, r1
 800516c:	3308      	adds	r3, #8
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	79ba      	ldrb	r2, [r7, #6]
 8005172:	494a      	ldr	r1, [pc, #296]	; (800529c <init_powderMachine+0x210>)
 8005174:	4613      	mov	r3, r2
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	4413      	add	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	3308      	adds	r3, #8
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	2200      	movs	r2, #0
 8005186:	4619      	mov	r1, r3
 8005188:	f7fc fe92 	bl	8001eb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCmix_GPIO_Port[i][EN], PD_DCmix_Pin[i][EN], GPIO_PIN_RESET);
 800518c:	79ba      	ldrb	r2, [r7, #6]
 800518e:	4942      	ldr	r1, [pc, #264]	; (8005298 <init_powderMachine+0x20c>)
 8005190:	4613      	mov	r3, r2
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	4413      	add	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	6818      	ldr	r0, [r3, #0]
 800519c:	79ba      	ldrb	r2, [r7, #6]
 800519e:	493f      	ldr	r1, [pc, #252]	; (800529c <init_powderMachine+0x210>)
 80051a0:	4613      	mov	r3, r2
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2200      	movs	r2, #0
 80051b0:	4619      	mov	r1, r3
 80051b2:	f7fc fe7d 	bl	8001eb0 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i<sizeof(PD_DCmix_GPIO_Port) / sizeof(PD_DCmix_GPIO_Port[0]); i++){
 80051b6:	79bb      	ldrb	r3, [r7, #6]
 80051b8:	3301      	adds	r3, #1
 80051ba:	71bb      	strb	r3, [r7, #6]
 80051bc:	79bb      	ldrb	r3, [r7, #6]
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d9b6      	bls.n	8005130 <init_powderMachine+0xa4>
	}

	// init heater motor direction
	for(uint8_t i = 0; i<sizeof(heat_GPIO_Port) / sizeof(heat_GPIO_Port[0]); i++){
 80051c2:	2300      	movs	r3, #0
 80051c4:	717b      	strb	r3, [r7, #5]
 80051c6:	e030      	b.n	800522a <init_powderMachine+0x19e>
		HAL_GPIO_WritePin(heat_GPIO_Port[i][IN1], heat_Pin[i][IN1], GPIO_PIN_SET);
 80051c8:	797a      	ldrb	r2, [r7, #5]
 80051ca:	4935      	ldr	r1, [pc, #212]	; (80052a0 <init_powderMachine+0x214>)
 80051cc:	4613      	mov	r3, r2
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	4413      	add	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	440b      	add	r3, r1
 80051d6:	3304      	adds	r3, #4
 80051d8:	6818      	ldr	r0, [r3, #0]
 80051da:	797a      	ldrb	r2, [r7, #5]
 80051dc:	4931      	ldr	r1, [pc, #196]	; (80052a4 <init_powderMachine+0x218>)
 80051de:	4613      	mov	r3, r2
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	4413      	add	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	440b      	add	r3, r1
 80051e8:	3304      	adds	r3, #4
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2201      	movs	r2, #1
 80051f0:	4619      	mov	r1, r3
 80051f2:	f7fc fe5d 	bl	8001eb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(heat_GPIO_Port[i][IN2], heat_Pin[i][IN2], GPIO_PIN_RESET);
 80051f6:	797a      	ldrb	r2, [r7, #5]
 80051f8:	4929      	ldr	r1, [pc, #164]	; (80052a0 <init_powderMachine+0x214>)
 80051fa:	4613      	mov	r3, r2
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	4413      	add	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	440b      	add	r3, r1
 8005204:	3308      	adds	r3, #8
 8005206:	6818      	ldr	r0, [r3, #0]
 8005208:	797a      	ldrb	r2, [r7, #5]
 800520a:	4926      	ldr	r1, [pc, #152]	; (80052a4 <init_powderMachine+0x218>)
 800520c:	4613      	mov	r3, r2
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	3308      	adds	r3, #8
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	b29b      	uxth	r3, r3
 800521c:	2200      	movs	r2, #0
 800521e:	4619      	mov	r1, r3
 8005220:	f7fc fe46 	bl	8001eb0 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i<sizeof(heat_GPIO_Port) / sizeof(heat_GPIO_Port[0]); i++){
 8005224:	797b      	ldrb	r3, [r7, #5]
 8005226:	3301      	adds	r3, #1
 8005228:	717b      	strb	r3, [r7, #5]
 800522a:	797b      	ldrb	r3, [r7, #5]
 800522c:	2b05      	cmp	r3, #5
 800522e:	d9cb      	bls.n	80051c8 <init_powderMachine+0x13c>
	}

	// init PWM
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //PD01_heat
 8005230:	2108      	movs	r1, #8
 8005232:	481d      	ldr	r0, [pc, #116]	; (80052a8 <init_powderMachine+0x21c>)
 8005234:	f7fd fca2 	bl	8002b7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //PD02_heat
 8005238:	210c      	movs	r1, #12
 800523a:	481b      	ldr	r0, [pc, #108]	; (80052a8 <init_powderMachine+0x21c>)
 800523c:	f7fd fc9e 	bl	8002b7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //PD03_heat
 8005240:	2100      	movs	r1, #0
 8005242:	481a      	ldr	r0, [pc, #104]	; (80052ac <init_powderMachine+0x220>)
 8005244:	f7fd fc9a 	bl	8002b7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //PD04_heat
 8005248:	2104      	movs	r1, #4
 800524a:	4817      	ldr	r0, [pc, #92]	; (80052a8 <init_powderMachine+0x21c>)
 800524c:	f7fd fc96 	bl	8002b7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //PD05_heat
 8005250:	2104      	movs	r1, #4
 8005252:	4816      	ldr	r0, [pc, #88]	; (80052ac <init_powderMachine+0x220>)
 8005254:	f7fd fc92 	bl	8002b7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //CF01_heat
 8005258:	2108      	movs	r1, #8
 800525a:	4813      	ldr	r0, [pc, #76]	; (80052a8 <init_powderMachine+0x21c>)
 800525c:	f7fd fc8e 	bl	8002b7c <HAL_TIM_PWM_Start>

	// motor stop
	TIM4->CCR3 = HEATER_MOTOR_STOP;
 8005260:	4b13      	ldr	r3, [pc, #76]	; (80052b0 <init_powderMachine+0x224>)
 8005262:	2200      	movs	r2, #0
 8005264:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = HEATER_MOTOR_STOP;
 8005266:	4b12      	ldr	r3, [pc, #72]	; (80052b0 <init_powderMachine+0x224>)
 8005268:	2200      	movs	r2, #0
 800526a:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR1 = HEATER_MOTOR_STOP;
 800526c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005270:	2200      	movs	r2, #0
 8005272:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = HEATER_MOTOR_STOP;
 8005274:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <init_powderMachine+0x224>)
 8005276:	2200      	movs	r2, #0
 8005278:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR2 = HEATER_MOTOR_STOP;
 800527a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800527e:	2200      	movs	r2, #0
 8005280:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = HEATER_MOTOR_STOP;
 8005282:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <init_powderMachine+0x224>)
 8005284:	2200      	movs	r2, #0
 8005286:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005288:	bf00      	nop
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	2000000c 	.word	0x2000000c
 8005294:	200000cc 	.word	0x200000cc
 8005298:	20000048 	.word	0x20000048
 800529c:	20000108 	.word	0x20000108
 80052a0:	20000084 	.word	0x20000084
 80052a4:	20000144 	.word	0x20000144
 80052a8:	20000724 	.word	0x20000724
 80052ac:	200008d0 	.word	0x200008d0
 80052b0:	40000800 	.word	0x40000800

080052b4 <initCupLidDispensor>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
}

void initCupLidDispensor(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);
 80052b8:	4802      	ldr	r0, [pc, #8]	; (80052c4 <initCupLidDispensor+0x10>)
 80052ba:	f7fd fb2d 	bl	8002918 <HAL_TIM_Base_Start>
}
 80052be:	bf00      	nop
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000840 	.word	0x20000840

080052c8 <init_iceDispensor>:


#include "User_IceDispenser.h"

void init_iceDispensor(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICE01_relay_GPIO_Port, ICE01_relay_Pin, GPIO_PIN_SET);	// Relay Open
 80052cc:	2201      	movs	r2, #1
 80052ce:	2180      	movs	r1, #128	; 0x80
 80052d0:	480b      	ldr	r0, [pc, #44]	; (8005300 <init_iceDispensor+0x38>)
 80052d2:	f7fc fded 	bl	8001eb0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ICE01_water_GPIO_Port, ICE01_water_Pin, GPIO_PIN_SET);
 80052d6:	2201      	movs	r2, #1
 80052d8:	2101      	movs	r1, #1
 80052da:	480a      	ldr	r0, [pc, #40]	; (8005304 <init_iceDispensor+0x3c>)
 80052dc:	f7fc fde8 	bl	8001eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICE01_ice_GPIO_Port, ICE01_ice_Pin, GPIO_PIN_SET);
 80052e0:	2201      	movs	r2, #1
 80052e2:	2108      	movs	r1, #8
 80052e4:	4808      	ldr	r0, [pc, #32]	; (8005308 <init_iceDispensor+0x40>)
 80052e6:	f7fc fde3 	bl	8001eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICE01_mix_GPIO_Port, ICE01_mix_Pin, GPIO_PIN_SET);
 80052ea:	2201      	movs	r2, #1
 80052ec:	2108      	movs	r1, #8
 80052ee:	4805      	ldr	r0, [pc, #20]	; (8005304 <init_iceDispensor+0x3c>)
 80052f0:	f7fc fdde 	bl	8001eb0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80052f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052f8:	f7fc fa96 	bl	8001828 <HAL_Delay>
}
 80052fc:	bf00      	nop
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40020c00 	.word	0x40020c00
 8005304:	40020800 	.word	0x40020800
 8005308:	40020000 	.word	0x40020000

0800530c <__errno>:
 800530c:	4b01      	ldr	r3, [pc, #4]	; (8005314 <__errno+0x8>)
 800530e:	6818      	ldr	r0, [r3, #0]
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	2000018c 	.word	0x2000018c

08005318 <std>:
 8005318:	2300      	movs	r3, #0
 800531a:	b510      	push	{r4, lr}
 800531c:	4604      	mov	r4, r0
 800531e:	e9c0 3300 	strd	r3, r3, [r0]
 8005322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005326:	6083      	str	r3, [r0, #8]
 8005328:	8181      	strh	r1, [r0, #12]
 800532a:	6643      	str	r3, [r0, #100]	; 0x64
 800532c:	81c2      	strh	r2, [r0, #14]
 800532e:	6183      	str	r3, [r0, #24]
 8005330:	4619      	mov	r1, r3
 8005332:	2208      	movs	r2, #8
 8005334:	305c      	adds	r0, #92	; 0x5c
 8005336:	f000 f91d 	bl	8005574 <memset>
 800533a:	4b05      	ldr	r3, [pc, #20]	; (8005350 <std+0x38>)
 800533c:	6263      	str	r3, [r4, #36]	; 0x24
 800533e:	4b05      	ldr	r3, [pc, #20]	; (8005354 <std+0x3c>)
 8005340:	62a3      	str	r3, [r4, #40]	; 0x28
 8005342:	4b05      	ldr	r3, [pc, #20]	; (8005358 <std+0x40>)
 8005344:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005346:	4b05      	ldr	r3, [pc, #20]	; (800535c <std+0x44>)
 8005348:	6224      	str	r4, [r4, #32]
 800534a:	6323      	str	r3, [r4, #48]	; 0x30
 800534c:	bd10      	pop	{r4, pc}
 800534e:	bf00      	nop
 8005350:	08005729 	.word	0x08005729
 8005354:	0800574b 	.word	0x0800574b
 8005358:	08005783 	.word	0x08005783
 800535c:	080057a7 	.word	0x080057a7

08005360 <_cleanup_r>:
 8005360:	4901      	ldr	r1, [pc, #4]	; (8005368 <_cleanup_r+0x8>)
 8005362:	f000 b8af 	b.w	80054c4 <_fwalk_reent>
 8005366:	bf00      	nop
 8005368:	08005a81 	.word	0x08005a81

0800536c <__sfmoreglue>:
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	1e4a      	subs	r2, r1, #1
 8005370:	2568      	movs	r5, #104	; 0x68
 8005372:	4355      	muls	r5, r2
 8005374:	460e      	mov	r6, r1
 8005376:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800537a:	f000 f953 	bl	8005624 <_malloc_r>
 800537e:	4604      	mov	r4, r0
 8005380:	b140      	cbz	r0, 8005394 <__sfmoreglue+0x28>
 8005382:	2100      	movs	r1, #0
 8005384:	e9c0 1600 	strd	r1, r6, [r0]
 8005388:	300c      	adds	r0, #12
 800538a:	60a0      	str	r0, [r4, #8]
 800538c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005390:	f000 f8f0 	bl	8005574 <memset>
 8005394:	4620      	mov	r0, r4
 8005396:	bd70      	pop	{r4, r5, r6, pc}

08005398 <__sfp_lock_acquire>:
 8005398:	4801      	ldr	r0, [pc, #4]	; (80053a0 <__sfp_lock_acquire+0x8>)
 800539a:	f000 b8d8 	b.w	800554e <__retarget_lock_acquire_recursive>
 800539e:	bf00      	nop
 80053a0:	2000096c 	.word	0x2000096c

080053a4 <__sfp_lock_release>:
 80053a4:	4801      	ldr	r0, [pc, #4]	; (80053ac <__sfp_lock_release+0x8>)
 80053a6:	f000 b8d3 	b.w	8005550 <__retarget_lock_release_recursive>
 80053aa:	bf00      	nop
 80053ac:	2000096c 	.word	0x2000096c

080053b0 <__sinit_lock_acquire>:
 80053b0:	4801      	ldr	r0, [pc, #4]	; (80053b8 <__sinit_lock_acquire+0x8>)
 80053b2:	f000 b8cc 	b.w	800554e <__retarget_lock_acquire_recursive>
 80053b6:	bf00      	nop
 80053b8:	20000967 	.word	0x20000967

080053bc <__sinit_lock_release>:
 80053bc:	4801      	ldr	r0, [pc, #4]	; (80053c4 <__sinit_lock_release+0x8>)
 80053be:	f000 b8c7 	b.w	8005550 <__retarget_lock_release_recursive>
 80053c2:	bf00      	nop
 80053c4:	20000967 	.word	0x20000967

080053c8 <__sinit>:
 80053c8:	b510      	push	{r4, lr}
 80053ca:	4604      	mov	r4, r0
 80053cc:	f7ff fff0 	bl	80053b0 <__sinit_lock_acquire>
 80053d0:	69a3      	ldr	r3, [r4, #24]
 80053d2:	b11b      	cbz	r3, 80053dc <__sinit+0x14>
 80053d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053d8:	f7ff bff0 	b.w	80053bc <__sinit_lock_release>
 80053dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80053e0:	6523      	str	r3, [r4, #80]	; 0x50
 80053e2:	4b13      	ldr	r3, [pc, #76]	; (8005430 <__sinit+0x68>)
 80053e4:	4a13      	ldr	r2, [pc, #76]	; (8005434 <__sinit+0x6c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80053ea:	42a3      	cmp	r3, r4
 80053ec:	bf04      	itt	eq
 80053ee:	2301      	moveq	r3, #1
 80053f0:	61a3      	streq	r3, [r4, #24]
 80053f2:	4620      	mov	r0, r4
 80053f4:	f000 f820 	bl	8005438 <__sfp>
 80053f8:	6060      	str	r0, [r4, #4]
 80053fa:	4620      	mov	r0, r4
 80053fc:	f000 f81c 	bl	8005438 <__sfp>
 8005400:	60a0      	str	r0, [r4, #8]
 8005402:	4620      	mov	r0, r4
 8005404:	f000 f818 	bl	8005438 <__sfp>
 8005408:	2200      	movs	r2, #0
 800540a:	60e0      	str	r0, [r4, #12]
 800540c:	2104      	movs	r1, #4
 800540e:	6860      	ldr	r0, [r4, #4]
 8005410:	f7ff ff82 	bl	8005318 <std>
 8005414:	68a0      	ldr	r0, [r4, #8]
 8005416:	2201      	movs	r2, #1
 8005418:	2109      	movs	r1, #9
 800541a:	f7ff ff7d 	bl	8005318 <std>
 800541e:	68e0      	ldr	r0, [r4, #12]
 8005420:	2202      	movs	r2, #2
 8005422:	2112      	movs	r1, #18
 8005424:	f7ff ff78 	bl	8005318 <std>
 8005428:	2301      	movs	r3, #1
 800542a:	61a3      	str	r3, [r4, #24]
 800542c:	e7d2      	b.n	80053d4 <__sinit+0xc>
 800542e:	bf00      	nop
 8005430:	08006320 	.word	0x08006320
 8005434:	08005361 	.word	0x08005361

08005438 <__sfp>:
 8005438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543a:	4607      	mov	r7, r0
 800543c:	f7ff ffac 	bl	8005398 <__sfp_lock_acquire>
 8005440:	4b1e      	ldr	r3, [pc, #120]	; (80054bc <__sfp+0x84>)
 8005442:	681e      	ldr	r6, [r3, #0]
 8005444:	69b3      	ldr	r3, [r6, #24]
 8005446:	b913      	cbnz	r3, 800544e <__sfp+0x16>
 8005448:	4630      	mov	r0, r6
 800544a:	f7ff ffbd 	bl	80053c8 <__sinit>
 800544e:	3648      	adds	r6, #72	; 0x48
 8005450:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005454:	3b01      	subs	r3, #1
 8005456:	d503      	bpl.n	8005460 <__sfp+0x28>
 8005458:	6833      	ldr	r3, [r6, #0]
 800545a:	b30b      	cbz	r3, 80054a0 <__sfp+0x68>
 800545c:	6836      	ldr	r6, [r6, #0]
 800545e:	e7f7      	b.n	8005450 <__sfp+0x18>
 8005460:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005464:	b9d5      	cbnz	r5, 800549c <__sfp+0x64>
 8005466:	4b16      	ldr	r3, [pc, #88]	; (80054c0 <__sfp+0x88>)
 8005468:	60e3      	str	r3, [r4, #12]
 800546a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800546e:	6665      	str	r5, [r4, #100]	; 0x64
 8005470:	f000 f86c 	bl	800554c <__retarget_lock_init_recursive>
 8005474:	f7ff ff96 	bl	80053a4 <__sfp_lock_release>
 8005478:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800547c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005480:	6025      	str	r5, [r4, #0]
 8005482:	61a5      	str	r5, [r4, #24]
 8005484:	2208      	movs	r2, #8
 8005486:	4629      	mov	r1, r5
 8005488:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800548c:	f000 f872 	bl	8005574 <memset>
 8005490:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005494:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005498:	4620      	mov	r0, r4
 800549a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800549c:	3468      	adds	r4, #104	; 0x68
 800549e:	e7d9      	b.n	8005454 <__sfp+0x1c>
 80054a0:	2104      	movs	r1, #4
 80054a2:	4638      	mov	r0, r7
 80054a4:	f7ff ff62 	bl	800536c <__sfmoreglue>
 80054a8:	4604      	mov	r4, r0
 80054aa:	6030      	str	r0, [r6, #0]
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d1d5      	bne.n	800545c <__sfp+0x24>
 80054b0:	f7ff ff78 	bl	80053a4 <__sfp_lock_release>
 80054b4:	230c      	movs	r3, #12
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	e7ee      	b.n	8005498 <__sfp+0x60>
 80054ba:	bf00      	nop
 80054bc:	08006320 	.word	0x08006320
 80054c0:	ffff0001 	.word	0xffff0001

080054c4 <_fwalk_reent>:
 80054c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054c8:	4606      	mov	r6, r0
 80054ca:	4688      	mov	r8, r1
 80054cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80054d0:	2700      	movs	r7, #0
 80054d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054d6:	f1b9 0901 	subs.w	r9, r9, #1
 80054da:	d505      	bpl.n	80054e8 <_fwalk_reent+0x24>
 80054dc:	6824      	ldr	r4, [r4, #0]
 80054de:	2c00      	cmp	r4, #0
 80054e0:	d1f7      	bne.n	80054d2 <_fwalk_reent+0xe>
 80054e2:	4638      	mov	r0, r7
 80054e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054e8:	89ab      	ldrh	r3, [r5, #12]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d907      	bls.n	80054fe <_fwalk_reent+0x3a>
 80054ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054f2:	3301      	adds	r3, #1
 80054f4:	d003      	beq.n	80054fe <_fwalk_reent+0x3a>
 80054f6:	4629      	mov	r1, r5
 80054f8:	4630      	mov	r0, r6
 80054fa:	47c0      	blx	r8
 80054fc:	4307      	orrs	r7, r0
 80054fe:	3568      	adds	r5, #104	; 0x68
 8005500:	e7e9      	b.n	80054d6 <_fwalk_reent+0x12>
	...

08005504 <__libc_init_array>:
 8005504:	b570      	push	{r4, r5, r6, lr}
 8005506:	4d0d      	ldr	r5, [pc, #52]	; (800553c <__libc_init_array+0x38>)
 8005508:	4c0d      	ldr	r4, [pc, #52]	; (8005540 <__libc_init_array+0x3c>)
 800550a:	1b64      	subs	r4, r4, r5
 800550c:	10a4      	asrs	r4, r4, #2
 800550e:	2600      	movs	r6, #0
 8005510:	42a6      	cmp	r6, r4
 8005512:	d109      	bne.n	8005528 <__libc_init_array+0x24>
 8005514:	4d0b      	ldr	r5, [pc, #44]	; (8005544 <__libc_init_array+0x40>)
 8005516:	4c0c      	ldr	r4, [pc, #48]	; (8005548 <__libc_init_array+0x44>)
 8005518:	f000 fe92 	bl	8006240 <_init>
 800551c:	1b64      	subs	r4, r4, r5
 800551e:	10a4      	asrs	r4, r4, #2
 8005520:	2600      	movs	r6, #0
 8005522:	42a6      	cmp	r6, r4
 8005524:	d105      	bne.n	8005532 <__libc_init_array+0x2e>
 8005526:	bd70      	pop	{r4, r5, r6, pc}
 8005528:	f855 3b04 	ldr.w	r3, [r5], #4
 800552c:	4798      	blx	r3
 800552e:	3601      	adds	r6, #1
 8005530:	e7ee      	b.n	8005510 <__libc_init_array+0xc>
 8005532:	f855 3b04 	ldr.w	r3, [r5], #4
 8005536:	4798      	blx	r3
 8005538:	3601      	adds	r6, #1
 800553a:	e7f2      	b.n	8005522 <__libc_init_array+0x1e>
 800553c:	08006360 	.word	0x08006360
 8005540:	08006360 	.word	0x08006360
 8005544:	08006360 	.word	0x08006360
 8005548:	08006364 	.word	0x08006364

0800554c <__retarget_lock_init_recursive>:
 800554c:	4770      	bx	lr

0800554e <__retarget_lock_acquire_recursive>:
 800554e:	4770      	bx	lr

08005550 <__retarget_lock_release_recursive>:
 8005550:	4770      	bx	lr
	...

08005554 <malloc>:
 8005554:	4b02      	ldr	r3, [pc, #8]	; (8005560 <malloc+0xc>)
 8005556:	4601      	mov	r1, r0
 8005558:	6818      	ldr	r0, [r3, #0]
 800555a:	f000 b863 	b.w	8005624 <_malloc_r>
 800555e:	bf00      	nop
 8005560:	2000018c 	.word	0x2000018c

08005564 <free>:
 8005564:	4b02      	ldr	r3, [pc, #8]	; (8005570 <free+0xc>)
 8005566:	4601      	mov	r1, r0
 8005568:	6818      	ldr	r0, [r3, #0]
 800556a:	f000 b80b 	b.w	8005584 <_free_r>
 800556e:	bf00      	nop
 8005570:	2000018c 	.word	0x2000018c

08005574 <memset>:
 8005574:	4402      	add	r2, r0
 8005576:	4603      	mov	r3, r0
 8005578:	4293      	cmp	r3, r2
 800557a:	d100      	bne.n	800557e <memset+0xa>
 800557c:	4770      	bx	lr
 800557e:	f803 1b01 	strb.w	r1, [r3], #1
 8005582:	e7f9      	b.n	8005578 <memset+0x4>

08005584 <_free_r>:
 8005584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005586:	2900      	cmp	r1, #0
 8005588:	d048      	beq.n	800561c <_free_r+0x98>
 800558a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800558e:	9001      	str	r0, [sp, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	f1a1 0404 	sub.w	r4, r1, #4
 8005596:	bfb8      	it	lt
 8005598:	18e4      	addlt	r4, r4, r3
 800559a:	f000 fb23 	bl	8005be4 <__malloc_lock>
 800559e:	4a20      	ldr	r2, [pc, #128]	; (8005620 <_free_r+0x9c>)
 80055a0:	9801      	ldr	r0, [sp, #4]
 80055a2:	6813      	ldr	r3, [r2, #0]
 80055a4:	4615      	mov	r5, r2
 80055a6:	b933      	cbnz	r3, 80055b6 <_free_r+0x32>
 80055a8:	6063      	str	r3, [r4, #4]
 80055aa:	6014      	str	r4, [r2, #0]
 80055ac:	b003      	add	sp, #12
 80055ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055b2:	f000 bb1d 	b.w	8005bf0 <__malloc_unlock>
 80055b6:	42a3      	cmp	r3, r4
 80055b8:	d90b      	bls.n	80055d2 <_free_r+0x4e>
 80055ba:	6821      	ldr	r1, [r4, #0]
 80055bc:	1862      	adds	r2, r4, r1
 80055be:	4293      	cmp	r3, r2
 80055c0:	bf04      	itt	eq
 80055c2:	681a      	ldreq	r2, [r3, #0]
 80055c4:	685b      	ldreq	r3, [r3, #4]
 80055c6:	6063      	str	r3, [r4, #4]
 80055c8:	bf04      	itt	eq
 80055ca:	1852      	addeq	r2, r2, r1
 80055cc:	6022      	streq	r2, [r4, #0]
 80055ce:	602c      	str	r4, [r5, #0]
 80055d0:	e7ec      	b.n	80055ac <_free_r+0x28>
 80055d2:	461a      	mov	r2, r3
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	b10b      	cbz	r3, 80055dc <_free_r+0x58>
 80055d8:	42a3      	cmp	r3, r4
 80055da:	d9fa      	bls.n	80055d2 <_free_r+0x4e>
 80055dc:	6811      	ldr	r1, [r2, #0]
 80055de:	1855      	adds	r5, r2, r1
 80055e0:	42a5      	cmp	r5, r4
 80055e2:	d10b      	bne.n	80055fc <_free_r+0x78>
 80055e4:	6824      	ldr	r4, [r4, #0]
 80055e6:	4421      	add	r1, r4
 80055e8:	1854      	adds	r4, r2, r1
 80055ea:	42a3      	cmp	r3, r4
 80055ec:	6011      	str	r1, [r2, #0]
 80055ee:	d1dd      	bne.n	80055ac <_free_r+0x28>
 80055f0:	681c      	ldr	r4, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	6053      	str	r3, [r2, #4]
 80055f6:	4421      	add	r1, r4
 80055f8:	6011      	str	r1, [r2, #0]
 80055fa:	e7d7      	b.n	80055ac <_free_r+0x28>
 80055fc:	d902      	bls.n	8005604 <_free_r+0x80>
 80055fe:	230c      	movs	r3, #12
 8005600:	6003      	str	r3, [r0, #0]
 8005602:	e7d3      	b.n	80055ac <_free_r+0x28>
 8005604:	6825      	ldr	r5, [r4, #0]
 8005606:	1961      	adds	r1, r4, r5
 8005608:	428b      	cmp	r3, r1
 800560a:	bf04      	itt	eq
 800560c:	6819      	ldreq	r1, [r3, #0]
 800560e:	685b      	ldreq	r3, [r3, #4]
 8005610:	6063      	str	r3, [r4, #4]
 8005612:	bf04      	itt	eq
 8005614:	1949      	addeq	r1, r1, r5
 8005616:	6021      	streq	r1, [r4, #0]
 8005618:	6054      	str	r4, [r2, #4]
 800561a:	e7c7      	b.n	80055ac <_free_r+0x28>
 800561c:	b003      	add	sp, #12
 800561e:	bd30      	pop	{r4, r5, pc}
 8005620:	20000718 	.word	0x20000718

08005624 <_malloc_r>:
 8005624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005626:	1ccd      	adds	r5, r1, #3
 8005628:	f025 0503 	bic.w	r5, r5, #3
 800562c:	3508      	adds	r5, #8
 800562e:	2d0c      	cmp	r5, #12
 8005630:	bf38      	it	cc
 8005632:	250c      	movcc	r5, #12
 8005634:	2d00      	cmp	r5, #0
 8005636:	4606      	mov	r6, r0
 8005638:	db01      	blt.n	800563e <_malloc_r+0x1a>
 800563a:	42a9      	cmp	r1, r5
 800563c:	d903      	bls.n	8005646 <_malloc_r+0x22>
 800563e:	230c      	movs	r3, #12
 8005640:	6033      	str	r3, [r6, #0]
 8005642:	2000      	movs	r0, #0
 8005644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005646:	f000 facd 	bl	8005be4 <__malloc_lock>
 800564a:	4921      	ldr	r1, [pc, #132]	; (80056d0 <_malloc_r+0xac>)
 800564c:	680a      	ldr	r2, [r1, #0]
 800564e:	4614      	mov	r4, r2
 8005650:	b99c      	cbnz	r4, 800567a <_malloc_r+0x56>
 8005652:	4f20      	ldr	r7, [pc, #128]	; (80056d4 <_malloc_r+0xb0>)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	b923      	cbnz	r3, 8005662 <_malloc_r+0x3e>
 8005658:	4621      	mov	r1, r4
 800565a:	4630      	mov	r0, r6
 800565c:	f000 f854 	bl	8005708 <_sbrk_r>
 8005660:	6038      	str	r0, [r7, #0]
 8005662:	4629      	mov	r1, r5
 8005664:	4630      	mov	r0, r6
 8005666:	f000 f84f 	bl	8005708 <_sbrk_r>
 800566a:	1c43      	adds	r3, r0, #1
 800566c:	d123      	bne.n	80056b6 <_malloc_r+0x92>
 800566e:	230c      	movs	r3, #12
 8005670:	6033      	str	r3, [r6, #0]
 8005672:	4630      	mov	r0, r6
 8005674:	f000 fabc 	bl	8005bf0 <__malloc_unlock>
 8005678:	e7e3      	b.n	8005642 <_malloc_r+0x1e>
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	1b5b      	subs	r3, r3, r5
 800567e:	d417      	bmi.n	80056b0 <_malloc_r+0x8c>
 8005680:	2b0b      	cmp	r3, #11
 8005682:	d903      	bls.n	800568c <_malloc_r+0x68>
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	441c      	add	r4, r3
 8005688:	6025      	str	r5, [r4, #0]
 800568a:	e004      	b.n	8005696 <_malloc_r+0x72>
 800568c:	6863      	ldr	r3, [r4, #4]
 800568e:	42a2      	cmp	r2, r4
 8005690:	bf0c      	ite	eq
 8005692:	600b      	streq	r3, [r1, #0]
 8005694:	6053      	strne	r3, [r2, #4]
 8005696:	4630      	mov	r0, r6
 8005698:	f000 faaa 	bl	8005bf0 <__malloc_unlock>
 800569c:	f104 000b 	add.w	r0, r4, #11
 80056a0:	1d23      	adds	r3, r4, #4
 80056a2:	f020 0007 	bic.w	r0, r0, #7
 80056a6:	1ac2      	subs	r2, r0, r3
 80056a8:	d0cc      	beq.n	8005644 <_malloc_r+0x20>
 80056aa:	1a1b      	subs	r3, r3, r0
 80056ac:	50a3      	str	r3, [r4, r2]
 80056ae:	e7c9      	b.n	8005644 <_malloc_r+0x20>
 80056b0:	4622      	mov	r2, r4
 80056b2:	6864      	ldr	r4, [r4, #4]
 80056b4:	e7cc      	b.n	8005650 <_malloc_r+0x2c>
 80056b6:	1cc4      	adds	r4, r0, #3
 80056b8:	f024 0403 	bic.w	r4, r4, #3
 80056bc:	42a0      	cmp	r0, r4
 80056be:	d0e3      	beq.n	8005688 <_malloc_r+0x64>
 80056c0:	1a21      	subs	r1, r4, r0
 80056c2:	4630      	mov	r0, r6
 80056c4:	f000 f820 	bl	8005708 <_sbrk_r>
 80056c8:	3001      	adds	r0, #1
 80056ca:	d1dd      	bne.n	8005688 <_malloc_r+0x64>
 80056cc:	e7cf      	b.n	800566e <_malloc_r+0x4a>
 80056ce:	bf00      	nop
 80056d0:	20000718 	.word	0x20000718
 80056d4:	2000071c 	.word	0x2000071c

080056d8 <iprintf>:
 80056d8:	b40f      	push	{r0, r1, r2, r3}
 80056da:	4b0a      	ldr	r3, [pc, #40]	; (8005704 <iprintf+0x2c>)
 80056dc:	b513      	push	{r0, r1, r4, lr}
 80056de:	681c      	ldr	r4, [r3, #0]
 80056e0:	b124      	cbz	r4, 80056ec <iprintf+0x14>
 80056e2:	69a3      	ldr	r3, [r4, #24]
 80056e4:	b913      	cbnz	r3, 80056ec <iprintf+0x14>
 80056e6:	4620      	mov	r0, r4
 80056e8:	f7ff fe6e 	bl	80053c8 <__sinit>
 80056ec:	ab05      	add	r3, sp, #20
 80056ee:	9a04      	ldr	r2, [sp, #16]
 80056f0:	68a1      	ldr	r1, [r4, #8]
 80056f2:	9301      	str	r3, [sp, #4]
 80056f4:	4620      	mov	r0, r4
 80056f6:	f000 faab 	bl	8005c50 <_vfiprintf_r>
 80056fa:	b002      	add	sp, #8
 80056fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005700:	b004      	add	sp, #16
 8005702:	4770      	bx	lr
 8005704:	2000018c 	.word	0x2000018c

08005708 <_sbrk_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	4d06      	ldr	r5, [pc, #24]	; (8005724 <_sbrk_r+0x1c>)
 800570c:	2300      	movs	r3, #0
 800570e:	4604      	mov	r4, r0
 8005710:	4608      	mov	r0, r1
 8005712:	602b      	str	r3, [r5, #0]
 8005714:	f7fb ffd4 	bl	80016c0 <_sbrk>
 8005718:	1c43      	adds	r3, r0, #1
 800571a:	d102      	bne.n	8005722 <_sbrk_r+0x1a>
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	b103      	cbz	r3, 8005722 <_sbrk_r+0x1a>
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	bd38      	pop	{r3, r4, r5, pc}
 8005724:	20000970 	.word	0x20000970

08005728 <__sread>:
 8005728:	b510      	push	{r4, lr}
 800572a:	460c      	mov	r4, r1
 800572c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005730:	f000 fd52 	bl	80061d8 <_read_r>
 8005734:	2800      	cmp	r0, #0
 8005736:	bfab      	itete	ge
 8005738:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800573a:	89a3      	ldrhlt	r3, [r4, #12]
 800573c:	181b      	addge	r3, r3, r0
 800573e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005742:	bfac      	ite	ge
 8005744:	6563      	strge	r3, [r4, #84]	; 0x54
 8005746:	81a3      	strhlt	r3, [r4, #12]
 8005748:	bd10      	pop	{r4, pc}

0800574a <__swrite>:
 800574a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800574e:	461f      	mov	r7, r3
 8005750:	898b      	ldrh	r3, [r1, #12]
 8005752:	05db      	lsls	r3, r3, #23
 8005754:	4605      	mov	r5, r0
 8005756:	460c      	mov	r4, r1
 8005758:	4616      	mov	r6, r2
 800575a:	d505      	bpl.n	8005768 <__swrite+0x1e>
 800575c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005760:	2302      	movs	r3, #2
 8005762:	2200      	movs	r2, #0
 8005764:	f000 f9c8 	bl	8005af8 <_lseek_r>
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800576e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005772:	81a3      	strh	r3, [r4, #12]
 8005774:	4632      	mov	r2, r6
 8005776:	463b      	mov	r3, r7
 8005778:	4628      	mov	r0, r5
 800577a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800577e:	f000 b869 	b.w	8005854 <_write_r>

08005782 <__sseek>:
 8005782:	b510      	push	{r4, lr}
 8005784:	460c      	mov	r4, r1
 8005786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800578a:	f000 f9b5 	bl	8005af8 <_lseek_r>
 800578e:	1c43      	adds	r3, r0, #1
 8005790:	89a3      	ldrh	r3, [r4, #12]
 8005792:	bf15      	itete	ne
 8005794:	6560      	strne	r0, [r4, #84]	; 0x54
 8005796:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800579a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800579e:	81a3      	strheq	r3, [r4, #12]
 80057a0:	bf18      	it	ne
 80057a2:	81a3      	strhne	r3, [r4, #12]
 80057a4:	bd10      	pop	{r4, pc}

080057a6 <__sclose>:
 80057a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057aa:	f000 b8d3 	b.w	8005954 <_close_r>
	...

080057b0 <__swbuf_r>:
 80057b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b2:	460e      	mov	r6, r1
 80057b4:	4614      	mov	r4, r2
 80057b6:	4605      	mov	r5, r0
 80057b8:	b118      	cbz	r0, 80057c2 <__swbuf_r+0x12>
 80057ba:	6983      	ldr	r3, [r0, #24]
 80057bc:	b90b      	cbnz	r3, 80057c2 <__swbuf_r+0x12>
 80057be:	f7ff fe03 	bl	80053c8 <__sinit>
 80057c2:	4b21      	ldr	r3, [pc, #132]	; (8005848 <__swbuf_r+0x98>)
 80057c4:	429c      	cmp	r4, r3
 80057c6:	d12b      	bne.n	8005820 <__swbuf_r+0x70>
 80057c8:	686c      	ldr	r4, [r5, #4]
 80057ca:	69a3      	ldr	r3, [r4, #24]
 80057cc:	60a3      	str	r3, [r4, #8]
 80057ce:	89a3      	ldrh	r3, [r4, #12]
 80057d0:	071a      	lsls	r2, r3, #28
 80057d2:	d52f      	bpl.n	8005834 <__swbuf_r+0x84>
 80057d4:	6923      	ldr	r3, [r4, #16]
 80057d6:	b36b      	cbz	r3, 8005834 <__swbuf_r+0x84>
 80057d8:	6923      	ldr	r3, [r4, #16]
 80057da:	6820      	ldr	r0, [r4, #0]
 80057dc:	1ac0      	subs	r0, r0, r3
 80057de:	6963      	ldr	r3, [r4, #20]
 80057e0:	b2f6      	uxtb	r6, r6
 80057e2:	4283      	cmp	r3, r0
 80057e4:	4637      	mov	r7, r6
 80057e6:	dc04      	bgt.n	80057f2 <__swbuf_r+0x42>
 80057e8:	4621      	mov	r1, r4
 80057ea:	4628      	mov	r0, r5
 80057ec:	f000 f948 	bl	8005a80 <_fflush_r>
 80057f0:	bb30      	cbnz	r0, 8005840 <__swbuf_r+0x90>
 80057f2:	68a3      	ldr	r3, [r4, #8]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	60a3      	str	r3, [r4, #8]
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	6022      	str	r2, [r4, #0]
 80057fe:	701e      	strb	r6, [r3, #0]
 8005800:	6963      	ldr	r3, [r4, #20]
 8005802:	3001      	adds	r0, #1
 8005804:	4283      	cmp	r3, r0
 8005806:	d004      	beq.n	8005812 <__swbuf_r+0x62>
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	07db      	lsls	r3, r3, #31
 800580c:	d506      	bpl.n	800581c <__swbuf_r+0x6c>
 800580e:	2e0a      	cmp	r6, #10
 8005810:	d104      	bne.n	800581c <__swbuf_r+0x6c>
 8005812:	4621      	mov	r1, r4
 8005814:	4628      	mov	r0, r5
 8005816:	f000 f933 	bl	8005a80 <_fflush_r>
 800581a:	b988      	cbnz	r0, 8005840 <__swbuf_r+0x90>
 800581c:	4638      	mov	r0, r7
 800581e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005820:	4b0a      	ldr	r3, [pc, #40]	; (800584c <__swbuf_r+0x9c>)
 8005822:	429c      	cmp	r4, r3
 8005824:	d101      	bne.n	800582a <__swbuf_r+0x7a>
 8005826:	68ac      	ldr	r4, [r5, #8]
 8005828:	e7cf      	b.n	80057ca <__swbuf_r+0x1a>
 800582a:	4b09      	ldr	r3, [pc, #36]	; (8005850 <__swbuf_r+0xa0>)
 800582c:	429c      	cmp	r4, r3
 800582e:	bf08      	it	eq
 8005830:	68ec      	ldreq	r4, [r5, #12]
 8005832:	e7ca      	b.n	80057ca <__swbuf_r+0x1a>
 8005834:	4621      	mov	r1, r4
 8005836:	4628      	mov	r0, r5
 8005838:	f000 f81e 	bl	8005878 <__swsetup_r>
 800583c:	2800      	cmp	r0, #0
 800583e:	d0cb      	beq.n	80057d8 <__swbuf_r+0x28>
 8005840:	f04f 37ff 	mov.w	r7, #4294967295
 8005844:	e7ea      	b.n	800581c <__swbuf_r+0x6c>
 8005846:	bf00      	nop
 8005848:	080062e0 	.word	0x080062e0
 800584c:	08006300 	.word	0x08006300
 8005850:	080062c0 	.word	0x080062c0

08005854 <_write_r>:
 8005854:	b538      	push	{r3, r4, r5, lr}
 8005856:	4d07      	ldr	r5, [pc, #28]	; (8005874 <_write_r+0x20>)
 8005858:	4604      	mov	r4, r0
 800585a:	4608      	mov	r0, r1
 800585c:	4611      	mov	r1, r2
 800585e:	2200      	movs	r2, #0
 8005860:	602a      	str	r2, [r5, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	f7fb fedb 	bl	800161e <_write>
 8005868:	1c43      	adds	r3, r0, #1
 800586a:	d102      	bne.n	8005872 <_write_r+0x1e>
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	b103      	cbz	r3, 8005872 <_write_r+0x1e>
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	bd38      	pop	{r3, r4, r5, pc}
 8005874:	20000970 	.word	0x20000970

08005878 <__swsetup_r>:
 8005878:	4b32      	ldr	r3, [pc, #200]	; (8005944 <__swsetup_r+0xcc>)
 800587a:	b570      	push	{r4, r5, r6, lr}
 800587c:	681d      	ldr	r5, [r3, #0]
 800587e:	4606      	mov	r6, r0
 8005880:	460c      	mov	r4, r1
 8005882:	b125      	cbz	r5, 800588e <__swsetup_r+0x16>
 8005884:	69ab      	ldr	r3, [r5, #24]
 8005886:	b913      	cbnz	r3, 800588e <__swsetup_r+0x16>
 8005888:	4628      	mov	r0, r5
 800588a:	f7ff fd9d 	bl	80053c8 <__sinit>
 800588e:	4b2e      	ldr	r3, [pc, #184]	; (8005948 <__swsetup_r+0xd0>)
 8005890:	429c      	cmp	r4, r3
 8005892:	d10f      	bne.n	80058b4 <__swsetup_r+0x3c>
 8005894:	686c      	ldr	r4, [r5, #4]
 8005896:	89a3      	ldrh	r3, [r4, #12]
 8005898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800589c:	0719      	lsls	r1, r3, #28
 800589e:	d42c      	bmi.n	80058fa <__swsetup_r+0x82>
 80058a0:	06dd      	lsls	r5, r3, #27
 80058a2:	d411      	bmi.n	80058c8 <__swsetup_r+0x50>
 80058a4:	2309      	movs	r3, #9
 80058a6:	6033      	str	r3, [r6, #0]
 80058a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058ac:	81a3      	strh	r3, [r4, #12]
 80058ae:	f04f 30ff 	mov.w	r0, #4294967295
 80058b2:	e03e      	b.n	8005932 <__swsetup_r+0xba>
 80058b4:	4b25      	ldr	r3, [pc, #148]	; (800594c <__swsetup_r+0xd4>)
 80058b6:	429c      	cmp	r4, r3
 80058b8:	d101      	bne.n	80058be <__swsetup_r+0x46>
 80058ba:	68ac      	ldr	r4, [r5, #8]
 80058bc:	e7eb      	b.n	8005896 <__swsetup_r+0x1e>
 80058be:	4b24      	ldr	r3, [pc, #144]	; (8005950 <__swsetup_r+0xd8>)
 80058c0:	429c      	cmp	r4, r3
 80058c2:	bf08      	it	eq
 80058c4:	68ec      	ldreq	r4, [r5, #12]
 80058c6:	e7e6      	b.n	8005896 <__swsetup_r+0x1e>
 80058c8:	0758      	lsls	r0, r3, #29
 80058ca:	d512      	bpl.n	80058f2 <__swsetup_r+0x7a>
 80058cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058ce:	b141      	cbz	r1, 80058e2 <__swsetup_r+0x6a>
 80058d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058d4:	4299      	cmp	r1, r3
 80058d6:	d002      	beq.n	80058de <__swsetup_r+0x66>
 80058d8:	4630      	mov	r0, r6
 80058da:	f7ff fe53 	bl	8005584 <_free_r>
 80058de:	2300      	movs	r3, #0
 80058e0:	6363      	str	r3, [r4, #52]	; 0x34
 80058e2:	89a3      	ldrh	r3, [r4, #12]
 80058e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058e8:	81a3      	strh	r3, [r4, #12]
 80058ea:	2300      	movs	r3, #0
 80058ec:	6063      	str	r3, [r4, #4]
 80058ee:	6923      	ldr	r3, [r4, #16]
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	f043 0308 	orr.w	r3, r3, #8
 80058f8:	81a3      	strh	r3, [r4, #12]
 80058fa:	6923      	ldr	r3, [r4, #16]
 80058fc:	b94b      	cbnz	r3, 8005912 <__swsetup_r+0x9a>
 80058fe:	89a3      	ldrh	r3, [r4, #12]
 8005900:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005908:	d003      	beq.n	8005912 <__swsetup_r+0x9a>
 800590a:	4621      	mov	r1, r4
 800590c:	4630      	mov	r0, r6
 800590e:	f000 f929 	bl	8005b64 <__smakebuf_r>
 8005912:	89a0      	ldrh	r0, [r4, #12]
 8005914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005918:	f010 0301 	ands.w	r3, r0, #1
 800591c:	d00a      	beq.n	8005934 <__swsetup_r+0xbc>
 800591e:	2300      	movs	r3, #0
 8005920:	60a3      	str	r3, [r4, #8]
 8005922:	6963      	ldr	r3, [r4, #20]
 8005924:	425b      	negs	r3, r3
 8005926:	61a3      	str	r3, [r4, #24]
 8005928:	6923      	ldr	r3, [r4, #16]
 800592a:	b943      	cbnz	r3, 800593e <__swsetup_r+0xc6>
 800592c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005930:	d1ba      	bne.n	80058a8 <__swsetup_r+0x30>
 8005932:	bd70      	pop	{r4, r5, r6, pc}
 8005934:	0781      	lsls	r1, r0, #30
 8005936:	bf58      	it	pl
 8005938:	6963      	ldrpl	r3, [r4, #20]
 800593a:	60a3      	str	r3, [r4, #8]
 800593c:	e7f4      	b.n	8005928 <__swsetup_r+0xb0>
 800593e:	2000      	movs	r0, #0
 8005940:	e7f7      	b.n	8005932 <__swsetup_r+0xba>
 8005942:	bf00      	nop
 8005944:	2000018c 	.word	0x2000018c
 8005948:	080062e0 	.word	0x080062e0
 800594c:	08006300 	.word	0x08006300
 8005950:	080062c0 	.word	0x080062c0

08005954 <_close_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	4d06      	ldr	r5, [pc, #24]	; (8005970 <_close_r+0x1c>)
 8005958:	2300      	movs	r3, #0
 800595a:	4604      	mov	r4, r0
 800595c:	4608      	mov	r0, r1
 800595e:	602b      	str	r3, [r5, #0]
 8005960:	f7fb fe79 	bl	8001656 <_close>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d102      	bne.n	800596e <_close_r+0x1a>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	b103      	cbz	r3, 800596e <_close_r+0x1a>
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	20000970 	.word	0x20000970

08005974 <__sflush_r>:
 8005974:	898a      	ldrh	r2, [r1, #12]
 8005976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800597a:	4605      	mov	r5, r0
 800597c:	0710      	lsls	r0, r2, #28
 800597e:	460c      	mov	r4, r1
 8005980:	d458      	bmi.n	8005a34 <__sflush_r+0xc0>
 8005982:	684b      	ldr	r3, [r1, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	dc05      	bgt.n	8005994 <__sflush_r+0x20>
 8005988:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800598a:	2b00      	cmp	r3, #0
 800598c:	dc02      	bgt.n	8005994 <__sflush_r+0x20>
 800598e:	2000      	movs	r0, #0
 8005990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005996:	2e00      	cmp	r6, #0
 8005998:	d0f9      	beq.n	800598e <__sflush_r+0x1a>
 800599a:	2300      	movs	r3, #0
 800599c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059a0:	682f      	ldr	r7, [r5, #0]
 80059a2:	602b      	str	r3, [r5, #0]
 80059a4:	d032      	beq.n	8005a0c <__sflush_r+0x98>
 80059a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059a8:	89a3      	ldrh	r3, [r4, #12]
 80059aa:	075a      	lsls	r2, r3, #29
 80059ac:	d505      	bpl.n	80059ba <__sflush_r+0x46>
 80059ae:	6863      	ldr	r3, [r4, #4]
 80059b0:	1ac0      	subs	r0, r0, r3
 80059b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059b4:	b10b      	cbz	r3, 80059ba <__sflush_r+0x46>
 80059b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059b8:	1ac0      	subs	r0, r0, r3
 80059ba:	2300      	movs	r3, #0
 80059bc:	4602      	mov	r2, r0
 80059be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059c0:	6a21      	ldr	r1, [r4, #32]
 80059c2:	4628      	mov	r0, r5
 80059c4:	47b0      	blx	r6
 80059c6:	1c43      	adds	r3, r0, #1
 80059c8:	89a3      	ldrh	r3, [r4, #12]
 80059ca:	d106      	bne.n	80059da <__sflush_r+0x66>
 80059cc:	6829      	ldr	r1, [r5, #0]
 80059ce:	291d      	cmp	r1, #29
 80059d0:	d82c      	bhi.n	8005a2c <__sflush_r+0xb8>
 80059d2:	4a2a      	ldr	r2, [pc, #168]	; (8005a7c <__sflush_r+0x108>)
 80059d4:	40ca      	lsrs	r2, r1
 80059d6:	07d6      	lsls	r6, r2, #31
 80059d8:	d528      	bpl.n	8005a2c <__sflush_r+0xb8>
 80059da:	2200      	movs	r2, #0
 80059dc:	6062      	str	r2, [r4, #4]
 80059de:	04d9      	lsls	r1, r3, #19
 80059e0:	6922      	ldr	r2, [r4, #16]
 80059e2:	6022      	str	r2, [r4, #0]
 80059e4:	d504      	bpl.n	80059f0 <__sflush_r+0x7c>
 80059e6:	1c42      	adds	r2, r0, #1
 80059e8:	d101      	bne.n	80059ee <__sflush_r+0x7a>
 80059ea:	682b      	ldr	r3, [r5, #0]
 80059ec:	b903      	cbnz	r3, 80059f0 <__sflush_r+0x7c>
 80059ee:	6560      	str	r0, [r4, #84]	; 0x54
 80059f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059f2:	602f      	str	r7, [r5, #0]
 80059f4:	2900      	cmp	r1, #0
 80059f6:	d0ca      	beq.n	800598e <__sflush_r+0x1a>
 80059f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059fc:	4299      	cmp	r1, r3
 80059fe:	d002      	beq.n	8005a06 <__sflush_r+0x92>
 8005a00:	4628      	mov	r0, r5
 8005a02:	f7ff fdbf 	bl	8005584 <_free_r>
 8005a06:	2000      	movs	r0, #0
 8005a08:	6360      	str	r0, [r4, #52]	; 0x34
 8005a0a:	e7c1      	b.n	8005990 <__sflush_r+0x1c>
 8005a0c:	6a21      	ldr	r1, [r4, #32]
 8005a0e:	2301      	movs	r3, #1
 8005a10:	4628      	mov	r0, r5
 8005a12:	47b0      	blx	r6
 8005a14:	1c41      	adds	r1, r0, #1
 8005a16:	d1c7      	bne.n	80059a8 <__sflush_r+0x34>
 8005a18:	682b      	ldr	r3, [r5, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0c4      	beq.n	80059a8 <__sflush_r+0x34>
 8005a1e:	2b1d      	cmp	r3, #29
 8005a20:	d001      	beq.n	8005a26 <__sflush_r+0xb2>
 8005a22:	2b16      	cmp	r3, #22
 8005a24:	d101      	bne.n	8005a2a <__sflush_r+0xb6>
 8005a26:	602f      	str	r7, [r5, #0]
 8005a28:	e7b1      	b.n	800598e <__sflush_r+0x1a>
 8005a2a:	89a3      	ldrh	r3, [r4, #12]
 8005a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a30:	81a3      	strh	r3, [r4, #12]
 8005a32:	e7ad      	b.n	8005990 <__sflush_r+0x1c>
 8005a34:	690f      	ldr	r7, [r1, #16]
 8005a36:	2f00      	cmp	r7, #0
 8005a38:	d0a9      	beq.n	800598e <__sflush_r+0x1a>
 8005a3a:	0793      	lsls	r3, r2, #30
 8005a3c:	680e      	ldr	r6, [r1, #0]
 8005a3e:	bf08      	it	eq
 8005a40:	694b      	ldreq	r3, [r1, #20]
 8005a42:	600f      	str	r7, [r1, #0]
 8005a44:	bf18      	it	ne
 8005a46:	2300      	movne	r3, #0
 8005a48:	eba6 0807 	sub.w	r8, r6, r7
 8005a4c:	608b      	str	r3, [r1, #8]
 8005a4e:	f1b8 0f00 	cmp.w	r8, #0
 8005a52:	dd9c      	ble.n	800598e <__sflush_r+0x1a>
 8005a54:	6a21      	ldr	r1, [r4, #32]
 8005a56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a58:	4643      	mov	r3, r8
 8005a5a:	463a      	mov	r2, r7
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	47b0      	blx	r6
 8005a60:	2800      	cmp	r0, #0
 8005a62:	dc06      	bgt.n	8005a72 <__sflush_r+0xfe>
 8005a64:	89a3      	ldrh	r3, [r4, #12]
 8005a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a6a:	81a3      	strh	r3, [r4, #12]
 8005a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a70:	e78e      	b.n	8005990 <__sflush_r+0x1c>
 8005a72:	4407      	add	r7, r0
 8005a74:	eba8 0800 	sub.w	r8, r8, r0
 8005a78:	e7e9      	b.n	8005a4e <__sflush_r+0xda>
 8005a7a:	bf00      	nop
 8005a7c:	20400001 	.word	0x20400001

08005a80 <_fflush_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	690b      	ldr	r3, [r1, #16]
 8005a84:	4605      	mov	r5, r0
 8005a86:	460c      	mov	r4, r1
 8005a88:	b913      	cbnz	r3, 8005a90 <_fflush_r+0x10>
 8005a8a:	2500      	movs	r5, #0
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	bd38      	pop	{r3, r4, r5, pc}
 8005a90:	b118      	cbz	r0, 8005a9a <_fflush_r+0x1a>
 8005a92:	6983      	ldr	r3, [r0, #24]
 8005a94:	b90b      	cbnz	r3, 8005a9a <_fflush_r+0x1a>
 8005a96:	f7ff fc97 	bl	80053c8 <__sinit>
 8005a9a:	4b14      	ldr	r3, [pc, #80]	; (8005aec <_fflush_r+0x6c>)
 8005a9c:	429c      	cmp	r4, r3
 8005a9e:	d11b      	bne.n	8005ad8 <_fflush_r+0x58>
 8005aa0:	686c      	ldr	r4, [r5, #4]
 8005aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0ef      	beq.n	8005a8a <_fflush_r+0xa>
 8005aaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005aac:	07d0      	lsls	r0, r2, #31
 8005aae:	d404      	bmi.n	8005aba <_fflush_r+0x3a>
 8005ab0:	0599      	lsls	r1, r3, #22
 8005ab2:	d402      	bmi.n	8005aba <_fflush_r+0x3a>
 8005ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ab6:	f7ff fd4a 	bl	800554e <__retarget_lock_acquire_recursive>
 8005aba:	4628      	mov	r0, r5
 8005abc:	4621      	mov	r1, r4
 8005abe:	f7ff ff59 	bl	8005974 <__sflush_r>
 8005ac2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ac4:	07da      	lsls	r2, r3, #31
 8005ac6:	4605      	mov	r5, r0
 8005ac8:	d4e0      	bmi.n	8005a8c <_fflush_r+0xc>
 8005aca:	89a3      	ldrh	r3, [r4, #12]
 8005acc:	059b      	lsls	r3, r3, #22
 8005ace:	d4dd      	bmi.n	8005a8c <_fflush_r+0xc>
 8005ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ad2:	f7ff fd3d 	bl	8005550 <__retarget_lock_release_recursive>
 8005ad6:	e7d9      	b.n	8005a8c <_fflush_r+0xc>
 8005ad8:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <_fflush_r+0x70>)
 8005ada:	429c      	cmp	r4, r3
 8005adc:	d101      	bne.n	8005ae2 <_fflush_r+0x62>
 8005ade:	68ac      	ldr	r4, [r5, #8]
 8005ae0:	e7df      	b.n	8005aa2 <_fflush_r+0x22>
 8005ae2:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <_fflush_r+0x74>)
 8005ae4:	429c      	cmp	r4, r3
 8005ae6:	bf08      	it	eq
 8005ae8:	68ec      	ldreq	r4, [r5, #12]
 8005aea:	e7da      	b.n	8005aa2 <_fflush_r+0x22>
 8005aec:	080062e0 	.word	0x080062e0
 8005af0:	08006300 	.word	0x08006300
 8005af4:	080062c0 	.word	0x080062c0

08005af8 <_lseek_r>:
 8005af8:	b538      	push	{r3, r4, r5, lr}
 8005afa:	4d07      	ldr	r5, [pc, #28]	; (8005b18 <_lseek_r+0x20>)
 8005afc:	4604      	mov	r4, r0
 8005afe:	4608      	mov	r0, r1
 8005b00:	4611      	mov	r1, r2
 8005b02:	2200      	movs	r2, #0
 8005b04:	602a      	str	r2, [r5, #0]
 8005b06:	461a      	mov	r2, r3
 8005b08:	f7fb fdcc 	bl	80016a4 <_lseek>
 8005b0c:	1c43      	adds	r3, r0, #1
 8005b0e:	d102      	bne.n	8005b16 <_lseek_r+0x1e>
 8005b10:	682b      	ldr	r3, [r5, #0]
 8005b12:	b103      	cbz	r3, 8005b16 <_lseek_r+0x1e>
 8005b14:	6023      	str	r3, [r4, #0]
 8005b16:	bd38      	pop	{r3, r4, r5, pc}
 8005b18:	20000970 	.word	0x20000970

08005b1c <__swhatbuf_r>:
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	460e      	mov	r6, r1
 8005b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b24:	2900      	cmp	r1, #0
 8005b26:	b096      	sub	sp, #88	; 0x58
 8005b28:	4614      	mov	r4, r2
 8005b2a:	461d      	mov	r5, r3
 8005b2c:	da07      	bge.n	8005b3e <__swhatbuf_r+0x22>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	602b      	str	r3, [r5, #0]
 8005b32:	89b3      	ldrh	r3, [r6, #12]
 8005b34:	061a      	lsls	r2, r3, #24
 8005b36:	d410      	bmi.n	8005b5a <__swhatbuf_r+0x3e>
 8005b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b3c:	e00e      	b.n	8005b5c <__swhatbuf_r+0x40>
 8005b3e:	466a      	mov	r2, sp
 8005b40:	f000 fb5c 	bl	80061fc <_fstat_r>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	dbf2      	blt.n	8005b2e <__swhatbuf_r+0x12>
 8005b48:	9a01      	ldr	r2, [sp, #4]
 8005b4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b52:	425a      	negs	r2, r3
 8005b54:	415a      	adcs	r2, r3
 8005b56:	602a      	str	r2, [r5, #0]
 8005b58:	e7ee      	b.n	8005b38 <__swhatbuf_r+0x1c>
 8005b5a:	2340      	movs	r3, #64	; 0x40
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	6023      	str	r3, [r4, #0]
 8005b60:	b016      	add	sp, #88	; 0x58
 8005b62:	bd70      	pop	{r4, r5, r6, pc}

08005b64 <__smakebuf_r>:
 8005b64:	898b      	ldrh	r3, [r1, #12]
 8005b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b68:	079d      	lsls	r5, r3, #30
 8005b6a:	4606      	mov	r6, r0
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	d507      	bpl.n	8005b80 <__smakebuf_r+0x1c>
 8005b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	6123      	str	r3, [r4, #16]
 8005b78:	2301      	movs	r3, #1
 8005b7a:	6163      	str	r3, [r4, #20]
 8005b7c:	b002      	add	sp, #8
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}
 8005b80:	ab01      	add	r3, sp, #4
 8005b82:	466a      	mov	r2, sp
 8005b84:	f7ff ffca 	bl	8005b1c <__swhatbuf_r>
 8005b88:	9900      	ldr	r1, [sp, #0]
 8005b8a:	4605      	mov	r5, r0
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	f7ff fd49 	bl	8005624 <_malloc_r>
 8005b92:	b948      	cbnz	r0, 8005ba8 <__smakebuf_r+0x44>
 8005b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b98:	059a      	lsls	r2, r3, #22
 8005b9a:	d4ef      	bmi.n	8005b7c <__smakebuf_r+0x18>
 8005b9c:	f023 0303 	bic.w	r3, r3, #3
 8005ba0:	f043 0302 	orr.w	r3, r3, #2
 8005ba4:	81a3      	strh	r3, [r4, #12]
 8005ba6:	e7e3      	b.n	8005b70 <__smakebuf_r+0xc>
 8005ba8:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <__smakebuf_r+0x7c>)
 8005baa:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bac:	89a3      	ldrh	r3, [r4, #12]
 8005bae:	6020      	str	r0, [r4, #0]
 8005bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb4:	81a3      	strh	r3, [r4, #12]
 8005bb6:	9b00      	ldr	r3, [sp, #0]
 8005bb8:	6163      	str	r3, [r4, #20]
 8005bba:	9b01      	ldr	r3, [sp, #4]
 8005bbc:	6120      	str	r0, [r4, #16]
 8005bbe:	b15b      	cbz	r3, 8005bd8 <__smakebuf_r+0x74>
 8005bc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	f000 fb2b 	bl	8006220 <_isatty_r>
 8005bca:	b128      	cbz	r0, 8005bd8 <__smakebuf_r+0x74>
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	f023 0303 	bic.w	r3, r3, #3
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	81a3      	strh	r3, [r4, #12]
 8005bd8:	89a0      	ldrh	r0, [r4, #12]
 8005bda:	4305      	orrs	r5, r0
 8005bdc:	81a5      	strh	r5, [r4, #12]
 8005bde:	e7cd      	b.n	8005b7c <__smakebuf_r+0x18>
 8005be0:	08005361 	.word	0x08005361

08005be4 <__malloc_lock>:
 8005be4:	4801      	ldr	r0, [pc, #4]	; (8005bec <__malloc_lock+0x8>)
 8005be6:	f7ff bcb2 	b.w	800554e <__retarget_lock_acquire_recursive>
 8005bea:	bf00      	nop
 8005bec:	20000968 	.word	0x20000968

08005bf0 <__malloc_unlock>:
 8005bf0:	4801      	ldr	r0, [pc, #4]	; (8005bf8 <__malloc_unlock+0x8>)
 8005bf2:	f7ff bcad 	b.w	8005550 <__retarget_lock_release_recursive>
 8005bf6:	bf00      	nop
 8005bf8:	20000968 	.word	0x20000968

08005bfc <__sfputc_r>:
 8005bfc:	6893      	ldr	r3, [r2, #8]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	b410      	push	{r4}
 8005c04:	6093      	str	r3, [r2, #8]
 8005c06:	da08      	bge.n	8005c1a <__sfputc_r+0x1e>
 8005c08:	6994      	ldr	r4, [r2, #24]
 8005c0a:	42a3      	cmp	r3, r4
 8005c0c:	db01      	blt.n	8005c12 <__sfputc_r+0x16>
 8005c0e:	290a      	cmp	r1, #10
 8005c10:	d103      	bne.n	8005c1a <__sfputc_r+0x1e>
 8005c12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c16:	f7ff bdcb 	b.w	80057b0 <__swbuf_r>
 8005c1a:	6813      	ldr	r3, [r2, #0]
 8005c1c:	1c58      	adds	r0, r3, #1
 8005c1e:	6010      	str	r0, [r2, #0]
 8005c20:	7019      	strb	r1, [r3, #0]
 8005c22:	4608      	mov	r0, r1
 8005c24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <__sfputs_r>:
 8005c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2c:	4606      	mov	r6, r0
 8005c2e:	460f      	mov	r7, r1
 8005c30:	4614      	mov	r4, r2
 8005c32:	18d5      	adds	r5, r2, r3
 8005c34:	42ac      	cmp	r4, r5
 8005c36:	d101      	bne.n	8005c3c <__sfputs_r+0x12>
 8005c38:	2000      	movs	r0, #0
 8005c3a:	e007      	b.n	8005c4c <__sfputs_r+0x22>
 8005c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c40:	463a      	mov	r2, r7
 8005c42:	4630      	mov	r0, r6
 8005c44:	f7ff ffda 	bl	8005bfc <__sfputc_r>
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	d1f3      	bne.n	8005c34 <__sfputs_r+0xa>
 8005c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c50 <_vfiprintf_r>:
 8005c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c54:	460d      	mov	r5, r1
 8005c56:	b09d      	sub	sp, #116	; 0x74
 8005c58:	4614      	mov	r4, r2
 8005c5a:	4698      	mov	r8, r3
 8005c5c:	4606      	mov	r6, r0
 8005c5e:	b118      	cbz	r0, 8005c68 <_vfiprintf_r+0x18>
 8005c60:	6983      	ldr	r3, [r0, #24]
 8005c62:	b90b      	cbnz	r3, 8005c68 <_vfiprintf_r+0x18>
 8005c64:	f7ff fbb0 	bl	80053c8 <__sinit>
 8005c68:	4b89      	ldr	r3, [pc, #548]	; (8005e90 <_vfiprintf_r+0x240>)
 8005c6a:	429d      	cmp	r5, r3
 8005c6c:	d11b      	bne.n	8005ca6 <_vfiprintf_r+0x56>
 8005c6e:	6875      	ldr	r5, [r6, #4]
 8005c70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c72:	07d9      	lsls	r1, r3, #31
 8005c74:	d405      	bmi.n	8005c82 <_vfiprintf_r+0x32>
 8005c76:	89ab      	ldrh	r3, [r5, #12]
 8005c78:	059a      	lsls	r2, r3, #22
 8005c7a:	d402      	bmi.n	8005c82 <_vfiprintf_r+0x32>
 8005c7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c7e:	f7ff fc66 	bl	800554e <__retarget_lock_acquire_recursive>
 8005c82:	89ab      	ldrh	r3, [r5, #12]
 8005c84:	071b      	lsls	r3, r3, #28
 8005c86:	d501      	bpl.n	8005c8c <_vfiprintf_r+0x3c>
 8005c88:	692b      	ldr	r3, [r5, #16]
 8005c8a:	b9eb      	cbnz	r3, 8005cc8 <_vfiprintf_r+0x78>
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f7ff fdf2 	bl	8005878 <__swsetup_r>
 8005c94:	b1c0      	cbz	r0, 8005cc8 <_vfiprintf_r+0x78>
 8005c96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c98:	07dc      	lsls	r4, r3, #31
 8005c9a:	d50e      	bpl.n	8005cba <_vfiprintf_r+0x6a>
 8005c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca0:	b01d      	add	sp, #116	; 0x74
 8005ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca6:	4b7b      	ldr	r3, [pc, #492]	; (8005e94 <_vfiprintf_r+0x244>)
 8005ca8:	429d      	cmp	r5, r3
 8005caa:	d101      	bne.n	8005cb0 <_vfiprintf_r+0x60>
 8005cac:	68b5      	ldr	r5, [r6, #8]
 8005cae:	e7df      	b.n	8005c70 <_vfiprintf_r+0x20>
 8005cb0:	4b79      	ldr	r3, [pc, #484]	; (8005e98 <_vfiprintf_r+0x248>)
 8005cb2:	429d      	cmp	r5, r3
 8005cb4:	bf08      	it	eq
 8005cb6:	68f5      	ldreq	r5, [r6, #12]
 8005cb8:	e7da      	b.n	8005c70 <_vfiprintf_r+0x20>
 8005cba:	89ab      	ldrh	r3, [r5, #12]
 8005cbc:	0598      	lsls	r0, r3, #22
 8005cbe:	d4ed      	bmi.n	8005c9c <_vfiprintf_r+0x4c>
 8005cc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cc2:	f7ff fc45 	bl	8005550 <__retarget_lock_release_recursive>
 8005cc6:	e7e9      	b.n	8005c9c <_vfiprintf_r+0x4c>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	9309      	str	r3, [sp, #36]	; 0x24
 8005ccc:	2320      	movs	r3, #32
 8005cce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cd6:	2330      	movs	r3, #48	; 0x30
 8005cd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005e9c <_vfiprintf_r+0x24c>
 8005cdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ce0:	f04f 0901 	mov.w	r9, #1
 8005ce4:	4623      	mov	r3, r4
 8005ce6:	469a      	mov	sl, r3
 8005ce8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cec:	b10a      	cbz	r2, 8005cf2 <_vfiprintf_r+0xa2>
 8005cee:	2a25      	cmp	r2, #37	; 0x25
 8005cf0:	d1f9      	bne.n	8005ce6 <_vfiprintf_r+0x96>
 8005cf2:	ebba 0b04 	subs.w	fp, sl, r4
 8005cf6:	d00b      	beq.n	8005d10 <_vfiprintf_r+0xc0>
 8005cf8:	465b      	mov	r3, fp
 8005cfa:	4622      	mov	r2, r4
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	4630      	mov	r0, r6
 8005d00:	f7ff ff93 	bl	8005c2a <__sfputs_r>
 8005d04:	3001      	adds	r0, #1
 8005d06:	f000 80aa 	beq.w	8005e5e <_vfiprintf_r+0x20e>
 8005d0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d0c:	445a      	add	r2, fp
 8005d0e:	9209      	str	r2, [sp, #36]	; 0x24
 8005d10:	f89a 3000 	ldrb.w	r3, [sl]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 80a2 	beq.w	8005e5e <_vfiprintf_r+0x20e>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d24:	f10a 0a01 	add.w	sl, sl, #1
 8005d28:	9304      	str	r3, [sp, #16]
 8005d2a:	9307      	str	r3, [sp, #28]
 8005d2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d30:	931a      	str	r3, [sp, #104]	; 0x68
 8005d32:	4654      	mov	r4, sl
 8005d34:	2205      	movs	r2, #5
 8005d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d3a:	4858      	ldr	r0, [pc, #352]	; (8005e9c <_vfiprintf_r+0x24c>)
 8005d3c:	f7fa fa58 	bl	80001f0 <memchr>
 8005d40:	9a04      	ldr	r2, [sp, #16]
 8005d42:	b9d8      	cbnz	r0, 8005d7c <_vfiprintf_r+0x12c>
 8005d44:	06d1      	lsls	r1, r2, #27
 8005d46:	bf44      	itt	mi
 8005d48:	2320      	movmi	r3, #32
 8005d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d4e:	0713      	lsls	r3, r2, #28
 8005d50:	bf44      	itt	mi
 8005d52:	232b      	movmi	r3, #43	; 0x2b
 8005d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d58:	f89a 3000 	ldrb.w	r3, [sl]
 8005d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d5e:	d015      	beq.n	8005d8c <_vfiprintf_r+0x13c>
 8005d60:	9a07      	ldr	r2, [sp, #28]
 8005d62:	4654      	mov	r4, sl
 8005d64:	2000      	movs	r0, #0
 8005d66:	f04f 0c0a 	mov.w	ip, #10
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d70:	3b30      	subs	r3, #48	; 0x30
 8005d72:	2b09      	cmp	r3, #9
 8005d74:	d94e      	bls.n	8005e14 <_vfiprintf_r+0x1c4>
 8005d76:	b1b0      	cbz	r0, 8005da6 <_vfiprintf_r+0x156>
 8005d78:	9207      	str	r2, [sp, #28]
 8005d7a:	e014      	b.n	8005da6 <_vfiprintf_r+0x156>
 8005d7c:	eba0 0308 	sub.w	r3, r0, r8
 8005d80:	fa09 f303 	lsl.w	r3, r9, r3
 8005d84:	4313      	orrs	r3, r2
 8005d86:	9304      	str	r3, [sp, #16]
 8005d88:	46a2      	mov	sl, r4
 8005d8a:	e7d2      	b.n	8005d32 <_vfiprintf_r+0xe2>
 8005d8c:	9b03      	ldr	r3, [sp, #12]
 8005d8e:	1d19      	adds	r1, r3, #4
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	9103      	str	r1, [sp, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	bfbb      	ittet	lt
 8005d98:	425b      	neglt	r3, r3
 8005d9a:	f042 0202 	orrlt.w	r2, r2, #2
 8005d9e:	9307      	strge	r3, [sp, #28]
 8005da0:	9307      	strlt	r3, [sp, #28]
 8005da2:	bfb8      	it	lt
 8005da4:	9204      	strlt	r2, [sp, #16]
 8005da6:	7823      	ldrb	r3, [r4, #0]
 8005da8:	2b2e      	cmp	r3, #46	; 0x2e
 8005daa:	d10c      	bne.n	8005dc6 <_vfiprintf_r+0x176>
 8005dac:	7863      	ldrb	r3, [r4, #1]
 8005dae:	2b2a      	cmp	r3, #42	; 0x2a
 8005db0:	d135      	bne.n	8005e1e <_vfiprintf_r+0x1ce>
 8005db2:	9b03      	ldr	r3, [sp, #12]
 8005db4:	1d1a      	adds	r2, r3, #4
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	9203      	str	r2, [sp, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	bfb8      	it	lt
 8005dbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dc2:	3402      	adds	r4, #2
 8005dc4:	9305      	str	r3, [sp, #20]
 8005dc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005eac <_vfiprintf_r+0x25c>
 8005dca:	7821      	ldrb	r1, [r4, #0]
 8005dcc:	2203      	movs	r2, #3
 8005dce:	4650      	mov	r0, sl
 8005dd0:	f7fa fa0e 	bl	80001f0 <memchr>
 8005dd4:	b140      	cbz	r0, 8005de8 <_vfiprintf_r+0x198>
 8005dd6:	2340      	movs	r3, #64	; 0x40
 8005dd8:	eba0 000a 	sub.w	r0, r0, sl
 8005ddc:	fa03 f000 	lsl.w	r0, r3, r0
 8005de0:	9b04      	ldr	r3, [sp, #16]
 8005de2:	4303      	orrs	r3, r0
 8005de4:	3401      	adds	r4, #1
 8005de6:	9304      	str	r3, [sp, #16]
 8005de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dec:	482c      	ldr	r0, [pc, #176]	; (8005ea0 <_vfiprintf_r+0x250>)
 8005dee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005df2:	2206      	movs	r2, #6
 8005df4:	f7fa f9fc 	bl	80001f0 <memchr>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d03f      	beq.n	8005e7c <_vfiprintf_r+0x22c>
 8005dfc:	4b29      	ldr	r3, [pc, #164]	; (8005ea4 <_vfiprintf_r+0x254>)
 8005dfe:	bb1b      	cbnz	r3, 8005e48 <_vfiprintf_r+0x1f8>
 8005e00:	9b03      	ldr	r3, [sp, #12]
 8005e02:	3307      	adds	r3, #7
 8005e04:	f023 0307 	bic.w	r3, r3, #7
 8005e08:	3308      	adds	r3, #8
 8005e0a:	9303      	str	r3, [sp, #12]
 8005e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e0e:	443b      	add	r3, r7
 8005e10:	9309      	str	r3, [sp, #36]	; 0x24
 8005e12:	e767      	b.n	8005ce4 <_vfiprintf_r+0x94>
 8005e14:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e18:	460c      	mov	r4, r1
 8005e1a:	2001      	movs	r0, #1
 8005e1c:	e7a5      	b.n	8005d6a <_vfiprintf_r+0x11a>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	3401      	adds	r4, #1
 8005e22:	9305      	str	r3, [sp, #20]
 8005e24:	4619      	mov	r1, r3
 8005e26:	f04f 0c0a 	mov.w	ip, #10
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e30:	3a30      	subs	r2, #48	; 0x30
 8005e32:	2a09      	cmp	r2, #9
 8005e34:	d903      	bls.n	8005e3e <_vfiprintf_r+0x1ee>
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d0c5      	beq.n	8005dc6 <_vfiprintf_r+0x176>
 8005e3a:	9105      	str	r1, [sp, #20]
 8005e3c:	e7c3      	b.n	8005dc6 <_vfiprintf_r+0x176>
 8005e3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e42:	4604      	mov	r4, r0
 8005e44:	2301      	movs	r3, #1
 8005e46:	e7f0      	b.n	8005e2a <_vfiprintf_r+0x1da>
 8005e48:	ab03      	add	r3, sp, #12
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	462a      	mov	r2, r5
 8005e4e:	4b16      	ldr	r3, [pc, #88]	; (8005ea8 <_vfiprintf_r+0x258>)
 8005e50:	a904      	add	r1, sp, #16
 8005e52:	4630      	mov	r0, r6
 8005e54:	f3af 8000 	nop.w
 8005e58:	4607      	mov	r7, r0
 8005e5a:	1c78      	adds	r0, r7, #1
 8005e5c:	d1d6      	bne.n	8005e0c <_vfiprintf_r+0x1bc>
 8005e5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e60:	07d9      	lsls	r1, r3, #31
 8005e62:	d405      	bmi.n	8005e70 <_vfiprintf_r+0x220>
 8005e64:	89ab      	ldrh	r3, [r5, #12]
 8005e66:	059a      	lsls	r2, r3, #22
 8005e68:	d402      	bmi.n	8005e70 <_vfiprintf_r+0x220>
 8005e6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e6c:	f7ff fb70 	bl	8005550 <__retarget_lock_release_recursive>
 8005e70:	89ab      	ldrh	r3, [r5, #12]
 8005e72:	065b      	lsls	r3, r3, #25
 8005e74:	f53f af12 	bmi.w	8005c9c <_vfiprintf_r+0x4c>
 8005e78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e7a:	e711      	b.n	8005ca0 <_vfiprintf_r+0x50>
 8005e7c:	ab03      	add	r3, sp, #12
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	462a      	mov	r2, r5
 8005e82:	4b09      	ldr	r3, [pc, #36]	; (8005ea8 <_vfiprintf_r+0x258>)
 8005e84:	a904      	add	r1, sp, #16
 8005e86:	4630      	mov	r0, r6
 8005e88:	f000 f880 	bl	8005f8c <_printf_i>
 8005e8c:	e7e4      	b.n	8005e58 <_vfiprintf_r+0x208>
 8005e8e:	bf00      	nop
 8005e90:	080062e0 	.word	0x080062e0
 8005e94:	08006300 	.word	0x08006300
 8005e98:	080062c0 	.word	0x080062c0
 8005e9c:	08006324 	.word	0x08006324
 8005ea0:	0800632e 	.word	0x0800632e
 8005ea4:	00000000 	.word	0x00000000
 8005ea8:	08005c2b 	.word	0x08005c2b
 8005eac:	0800632a 	.word	0x0800632a

08005eb0 <_printf_common>:
 8005eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb4:	4616      	mov	r6, r2
 8005eb6:	4699      	mov	r9, r3
 8005eb8:	688a      	ldr	r2, [r1, #8]
 8005eba:	690b      	ldr	r3, [r1, #16]
 8005ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	bfb8      	it	lt
 8005ec4:	4613      	movlt	r3, r2
 8005ec6:	6033      	str	r3, [r6, #0]
 8005ec8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ecc:	4607      	mov	r7, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	b10a      	cbz	r2, 8005ed6 <_printf_common+0x26>
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	6033      	str	r3, [r6, #0]
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	0699      	lsls	r1, r3, #26
 8005eda:	bf42      	ittt	mi
 8005edc:	6833      	ldrmi	r3, [r6, #0]
 8005ede:	3302      	addmi	r3, #2
 8005ee0:	6033      	strmi	r3, [r6, #0]
 8005ee2:	6825      	ldr	r5, [r4, #0]
 8005ee4:	f015 0506 	ands.w	r5, r5, #6
 8005ee8:	d106      	bne.n	8005ef8 <_printf_common+0x48>
 8005eea:	f104 0a19 	add.w	sl, r4, #25
 8005eee:	68e3      	ldr	r3, [r4, #12]
 8005ef0:	6832      	ldr	r2, [r6, #0]
 8005ef2:	1a9b      	subs	r3, r3, r2
 8005ef4:	42ab      	cmp	r3, r5
 8005ef6:	dc26      	bgt.n	8005f46 <_printf_common+0x96>
 8005ef8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005efc:	1e13      	subs	r3, r2, #0
 8005efe:	6822      	ldr	r2, [r4, #0]
 8005f00:	bf18      	it	ne
 8005f02:	2301      	movne	r3, #1
 8005f04:	0692      	lsls	r2, r2, #26
 8005f06:	d42b      	bmi.n	8005f60 <_printf_common+0xb0>
 8005f08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f0c:	4649      	mov	r1, r9
 8005f0e:	4638      	mov	r0, r7
 8005f10:	47c0      	blx	r8
 8005f12:	3001      	adds	r0, #1
 8005f14:	d01e      	beq.n	8005f54 <_printf_common+0xa4>
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	68e5      	ldr	r5, [r4, #12]
 8005f1a:	6832      	ldr	r2, [r6, #0]
 8005f1c:	f003 0306 	and.w	r3, r3, #6
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	bf08      	it	eq
 8005f24:	1aad      	subeq	r5, r5, r2
 8005f26:	68a3      	ldr	r3, [r4, #8]
 8005f28:	6922      	ldr	r2, [r4, #16]
 8005f2a:	bf0c      	ite	eq
 8005f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f30:	2500      	movne	r5, #0
 8005f32:	4293      	cmp	r3, r2
 8005f34:	bfc4      	itt	gt
 8005f36:	1a9b      	subgt	r3, r3, r2
 8005f38:	18ed      	addgt	r5, r5, r3
 8005f3a:	2600      	movs	r6, #0
 8005f3c:	341a      	adds	r4, #26
 8005f3e:	42b5      	cmp	r5, r6
 8005f40:	d11a      	bne.n	8005f78 <_printf_common+0xc8>
 8005f42:	2000      	movs	r0, #0
 8005f44:	e008      	b.n	8005f58 <_printf_common+0xa8>
 8005f46:	2301      	movs	r3, #1
 8005f48:	4652      	mov	r2, sl
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	4638      	mov	r0, r7
 8005f4e:	47c0      	blx	r8
 8005f50:	3001      	adds	r0, #1
 8005f52:	d103      	bne.n	8005f5c <_printf_common+0xac>
 8005f54:	f04f 30ff 	mov.w	r0, #4294967295
 8005f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f5c:	3501      	adds	r5, #1
 8005f5e:	e7c6      	b.n	8005eee <_printf_common+0x3e>
 8005f60:	18e1      	adds	r1, r4, r3
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	2030      	movs	r0, #48	; 0x30
 8005f66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f6a:	4422      	add	r2, r4
 8005f6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f74:	3302      	adds	r3, #2
 8005f76:	e7c7      	b.n	8005f08 <_printf_common+0x58>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	4638      	mov	r0, r7
 8005f80:	47c0      	blx	r8
 8005f82:	3001      	adds	r0, #1
 8005f84:	d0e6      	beq.n	8005f54 <_printf_common+0xa4>
 8005f86:	3601      	adds	r6, #1
 8005f88:	e7d9      	b.n	8005f3e <_printf_common+0x8e>
	...

08005f8c <_printf_i>:
 8005f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f90:	460c      	mov	r4, r1
 8005f92:	4691      	mov	r9, r2
 8005f94:	7e27      	ldrb	r7, [r4, #24]
 8005f96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f98:	2f78      	cmp	r7, #120	; 0x78
 8005f9a:	4680      	mov	r8, r0
 8005f9c:	469a      	mov	sl, r3
 8005f9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fa2:	d807      	bhi.n	8005fb4 <_printf_i+0x28>
 8005fa4:	2f62      	cmp	r7, #98	; 0x62
 8005fa6:	d80a      	bhi.n	8005fbe <_printf_i+0x32>
 8005fa8:	2f00      	cmp	r7, #0
 8005faa:	f000 80d8 	beq.w	800615e <_printf_i+0x1d2>
 8005fae:	2f58      	cmp	r7, #88	; 0x58
 8005fb0:	f000 80a3 	beq.w	80060fa <_printf_i+0x16e>
 8005fb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005fb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fbc:	e03a      	b.n	8006034 <_printf_i+0xa8>
 8005fbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fc2:	2b15      	cmp	r3, #21
 8005fc4:	d8f6      	bhi.n	8005fb4 <_printf_i+0x28>
 8005fc6:	a001      	add	r0, pc, #4	; (adr r0, 8005fcc <_printf_i+0x40>)
 8005fc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005fcc:	08006025 	.word	0x08006025
 8005fd0:	08006039 	.word	0x08006039
 8005fd4:	08005fb5 	.word	0x08005fb5
 8005fd8:	08005fb5 	.word	0x08005fb5
 8005fdc:	08005fb5 	.word	0x08005fb5
 8005fe0:	08005fb5 	.word	0x08005fb5
 8005fe4:	08006039 	.word	0x08006039
 8005fe8:	08005fb5 	.word	0x08005fb5
 8005fec:	08005fb5 	.word	0x08005fb5
 8005ff0:	08005fb5 	.word	0x08005fb5
 8005ff4:	08005fb5 	.word	0x08005fb5
 8005ff8:	08006145 	.word	0x08006145
 8005ffc:	08006069 	.word	0x08006069
 8006000:	08006127 	.word	0x08006127
 8006004:	08005fb5 	.word	0x08005fb5
 8006008:	08005fb5 	.word	0x08005fb5
 800600c:	08006167 	.word	0x08006167
 8006010:	08005fb5 	.word	0x08005fb5
 8006014:	08006069 	.word	0x08006069
 8006018:	08005fb5 	.word	0x08005fb5
 800601c:	08005fb5 	.word	0x08005fb5
 8006020:	0800612f 	.word	0x0800612f
 8006024:	680b      	ldr	r3, [r1, #0]
 8006026:	1d1a      	adds	r2, r3, #4
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	600a      	str	r2, [r1, #0]
 800602c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006034:	2301      	movs	r3, #1
 8006036:	e0a3      	b.n	8006180 <_printf_i+0x1f4>
 8006038:	6825      	ldr	r5, [r4, #0]
 800603a:	6808      	ldr	r0, [r1, #0]
 800603c:	062e      	lsls	r6, r5, #24
 800603e:	f100 0304 	add.w	r3, r0, #4
 8006042:	d50a      	bpl.n	800605a <_printf_i+0xce>
 8006044:	6805      	ldr	r5, [r0, #0]
 8006046:	600b      	str	r3, [r1, #0]
 8006048:	2d00      	cmp	r5, #0
 800604a:	da03      	bge.n	8006054 <_printf_i+0xc8>
 800604c:	232d      	movs	r3, #45	; 0x2d
 800604e:	426d      	negs	r5, r5
 8006050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006054:	485e      	ldr	r0, [pc, #376]	; (80061d0 <_printf_i+0x244>)
 8006056:	230a      	movs	r3, #10
 8006058:	e019      	b.n	800608e <_printf_i+0x102>
 800605a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800605e:	6805      	ldr	r5, [r0, #0]
 8006060:	600b      	str	r3, [r1, #0]
 8006062:	bf18      	it	ne
 8006064:	b22d      	sxthne	r5, r5
 8006066:	e7ef      	b.n	8006048 <_printf_i+0xbc>
 8006068:	680b      	ldr	r3, [r1, #0]
 800606a:	6825      	ldr	r5, [r4, #0]
 800606c:	1d18      	adds	r0, r3, #4
 800606e:	6008      	str	r0, [r1, #0]
 8006070:	0628      	lsls	r0, r5, #24
 8006072:	d501      	bpl.n	8006078 <_printf_i+0xec>
 8006074:	681d      	ldr	r5, [r3, #0]
 8006076:	e002      	b.n	800607e <_printf_i+0xf2>
 8006078:	0669      	lsls	r1, r5, #25
 800607a:	d5fb      	bpl.n	8006074 <_printf_i+0xe8>
 800607c:	881d      	ldrh	r5, [r3, #0]
 800607e:	4854      	ldr	r0, [pc, #336]	; (80061d0 <_printf_i+0x244>)
 8006080:	2f6f      	cmp	r7, #111	; 0x6f
 8006082:	bf0c      	ite	eq
 8006084:	2308      	moveq	r3, #8
 8006086:	230a      	movne	r3, #10
 8006088:	2100      	movs	r1, #0
 800608a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800608e:	6866      	ldr	r6, [r4, #4]
 8006090:	60a6      	str	r6, [r4, #8]
 8006092:	2e00      	cmp	r6, #0
 8006094:	bfa2      	ittt	ge
 8006096:	6821      	ldrge	r1, [r4, #0]
 8006098:	f021 0104 	bicge.w	r1, r1, #4
 800609c:	6021      	strge	r1, [r4, #0]
 800609e:	b90d      	cbnz	r5, 80060a4 <_printf_i+0x118>
 80060a0:	2e00      	cmp	r6, #0
 80060a2:	d04d      	beq.n	8006140 <_printf_i+0x1b4>
 80060a4:	4616      	mov	r6, r2
 80060a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80060aa:	fb03 5711 	mls	r7, r3, r1, r5
 80060ae:	5dc7      	ldrb	r7, [r0, r7]
 80060b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060b4:	462f      	mov	r7, r5
 80060b6:	42bb      	cmp	r3, r7
 80060b8:	460d      	mov	r5, r1
 80060ba:	d9f4      	bls.n	80060a6 <_printf_i+0x11a>
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d10b      	bne.n	80060d8 <_printf_i+0x14c>
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	07df      	lsls	r7, r3, #31
 80060c4:	d508      	bpl.n	80060d8 <_printf_i+0x14c>
 80060c6:	6923      	ldr	r3, [r4, #16]
 80060c8:	6861      	ldr	r1, [r4, #4]
 80060ca:	4299      	cmp	r1, r3
 80060cc:	bfde      	ittt	le
 80060ce:	2330      	movle	r3, #48	; 0x30
 80060d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060d8:	1b92      	subs	r2, r2, r6
 80060da:	6122      	str	r2, [r4, #16]
 80060dc:	f8cd a000 	str.w	sl, [sp]
 80060e0:	464b      	mov	r3, r9
 80060e2:	aa03      	add	r2, sp, #12
 80060e4:	4621      	mov	r1, r4
 80060e6:	4640      	mov	r0, r8
 80060e8:	f7ff fee2 	bl	8005eb0 <_printf_common>
 80060ec:	3001      	adds	r0, #1
 80060ee:	d14c      	bne.n	800618a <_printf_i+0x1fe>
 80060f0:	f04f 30ff 	mov.w	r0, #4294967295
 80060f4:	b004      	add	sp, #16
 80060f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060fa:	4835      	ldr	r0, [pc, #212]	; (80061d0 <_printf_i+0x244>)
 80060fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	680e      	ldr	r6, [r1, #0]
 8006104:	061f      	lsls	r7, r3, #24
 8006106:	f856 5b04 	ldr.w	r5, [r6], #4
 800610a:	600e      	str	r6, [r1, #0]
 800610c:	d514      	bpl.n	8006138 <_printf_i+0x1ac>
 800610e:	07d9      	lsls	r1, r3, #31
 8006110:	bf44      	itt	mi
 8006112:	f043 0320 	orrmi.w	r3, r3, #32
 8006116:	6023      	strmi	r3, [r4, #0]
 8006118:	b91d      	cbnz	r5, 8006122 <_printf_i+0x196>
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	f023 0320 	bic.w	r3, r3, #32
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	2310      	movs	r3, #16
 8006124:	e7b0      	b.n	8006088 <_printf_i+0xfc>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	f043 0320 	orr.w	r3, r3, #32
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	2378      	movs	r3, #120	; 0x78
 8006130:	4828      	ldr	r0, [pc, #160]	; (80061d4 <_printf_i+0x248>)
 8006132:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006136:	e7e3      	b.n	8006100 <_printf_i+0x174>
 8006138:	065e      	lsls	r6, r3, #25
 800613a:	bf48      	it	mi
 800613c:	b2ad      	uxthmi	r5, r5
 800613e:	e7e6      	b.n	800610e <_printf_i+0x182>
 8006140:	4616      	mov	r6, r2
 8006142:	e7bb      	b.n	80060bc <_printf_i+0x130>
 8006144:	680b      	ldr	r3, [r1, #0]
 8006146:	6826      	ldr	r6, [r4, #0]
 8006148:	6960      	ldr	r0, [r4, #20]
 800614a:	1d1d      	adds	r5, r3, #4
 800614c:	600d      	str	r5, [r1, #0]
 800614e:	0635      	lsls	r5, r6, #24
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	d501      	bpl.n	8006158 <_printf_i+0x1cc>
 8006154:	6018      	str	r0, [r3, #0]
 8006156:	e002      	b.n	800615e <_printf_i+0x1d2>
 8006158:	0671      	lsls	r1, r6, #25
 800615a:	d5fb      	bpl.n	8006154 <_printf_i+0x1c8>
 800615c:	8018      	strh	r0, [r3, #0]
 800615e:	2300      	movs	r3, #0
 8006160:	6123      	str	r3, [r4, #16]
 8006162:	4616      	mov	r6, r2
 8006164:	e7ba      	b.n	80060dc <_printf_i+0x150>
 8006166:	680b      	ldr	r3, [r1, #0]
 8006168:	1d1a      	adds	r2, r3, #4
 800616a:	600a      	str	r2, [r1, #0]
 800616c:	681e      	ldr	r6, [r3, #0]
 800616e:	6862      	ldr	r2, [r4, #4]
 8006170:	2100      	movs	r1, #0
 8006172:	4630      	mov	r0, r6
 8006174:	f7fa f83c 	bl	80001f0 <memchr>
 8006178:	b108      	cbz	r0, 800617e <_printf_i+0x1f2>
 800617a:	1b80      	subs	r0, r0, r6
 800617c:	6060      	str	r0, [r4, #4]
 800617e:	6863      	ldr	r3, [r4, #4]
 8006180:	6123      	str	r3, [r4, #16]
 8006182:	2300      	movs	r3, #0
 8006184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006188:	e7a8      	b.n	80060dc <_printf_i+0x150>
 800618a:	6923      	ldr	r3, [r4, #16]
 800618c:	4632      	mov	r2, r6
 800618e:	4649      	mov	r1, r9
 8006190:	4640      	mov	r0, r8
 8006192:	47d0      	blx	sl
 8006194:	3001      	adds	r0, #1
 8006196:	d0ab      	beq.n	80060f0 <_printf_i+0x164>
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	079b      	lsls	r3, r3, #30
 800619c:	d413      	bmi.n	80061c6 <_printf_i+0x23a>
 800619e:	68e0      	ldr	r0, [r4, #12]
 80061a0:	9b03      	ldr	r3, [sp, #12]
 80061a2:	4298      	cmp	r0, r3
 80061a4:	bfb8      	it	lt
 80061a6:	4618      	movlt	r0, r3
 80061a8:	e7a4      	b.n	80060f4 <_printf_i+0x168>
 80061aa:	2301      	movs	r3, #1
 80061ac:	4632      	mov	r2, r6
 80061ae:	4649      	mov	r1, r9
 80061b0:	4640      	mov	r0, r8
 80061b2:	47d0      	blx	sl
 80061b4:	3001      	adds	r0, #1
 80061b6:	d09b      	beq.n	80060f0 <_printf_i+0x164>
 80061b8:	3501      	adds	r5, #1
 80061ba:	68e3      	ldr	r3, [r4, #12]
 80061bc:	9903      	ldr	r1, [sp, #12]
 80061be:	1a5b      	subs	r3, r3, r1
 80061c0:	42ab      	cmp	r3, r5
 80061c2:	dcf2      	bgt.n	80061aa <_printf_i+0x21e>
 80061c4:	e7eb      	b.n	800619e <_printf_i+0x212>
 80061c6:	2500      	movs	r5, #0
 80061c8:	f104 0619 	add.w	r6, r4, #25
 80061cc:	e7f5      	b.n	80061ba <_printf_i+0x22e>
 80061ce:	bf00      	nop
 80061d0:	08006335 	.word	0x08006335
 80061d4:	08006346 	.word	0x08006346

080061d8 <_read_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4d07      	ldr	r5, [pc, #28]	; (80061f8 <_read_r+0x20>)
 80061dc:	4604      	mov	r4, r0
 80061de:	4608      	mov	r0, r1
 80061e0:	4611      	mov	r1, r2
 80061e2:	2200      	movs	r2, #0
 80061e4:	602a      	str	r2, [r5, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	f7fb f9fc 	bl	80015e4 <_read>
 80061ec:	1c43      	adds	r3, r0, #1
 80061ee:	d102      	bne.n	80061f6 <_read_r+0x1e>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	b103      	cbz	r3, 80061f6 <_read_r+0x1e>
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	bd38      	pop	{r3, r4, r5, pc}
 80061f8:	20000970 	.word	0x20000970

080061fc <_fstat_r>:
 80061fc:	b538      	push	{r3, r4, r5, lr}
 80061fe:	4d07      	ldr	r5, [pc, #28]	; (800621c <_fstat_r+0x20>)
 8006200:	2300      	movs	r3, #0
 8006202:	4604      	mov	r4, r0
 8006204:	4608      	mov	r0, r1
 8006206:	4611      	mov	r1, r2
 8006208:	602b      	str	r3, [r5, #0]
 800620a:	f7fb fa30 	bl	800166e <_fstat>
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	d102      	bne.n	8006218 <_fstat_r+0x1c>
 8006212:	682b      	ldr	r3, [r5, #0]
 8006214:	b103      	cbz	r3, 8006218 <_fstat_r+0x1c>
 8006216:	6023      	str	r3, [r4, #0]
 8006218:	bd38      	pop	{r3, r4, r5, pc}
 800621a:	bf00      	nop
 800621c:	20000970 	.word	0x20000970

08006220 <_isatty_r>:
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	4d06      	ldr	r5, [pc, #24]	; (800623c <_isatty_r+0x1c>)
 8006224:	2300      	movs	r3, #0
 8006226:	4604      	mov	r4, r0
 8006228:	4608      	mov	r0, r1
 800622a:	602b      	str	r3, [r5, #0]
 800622c:	f7fb fa2f 	bl	800168e <_isatty>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d102      	bne.n	800623a <_isatty_r+0x1a>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	b103      	cbz	r3, 800623a <_isatty_r+0x1a>
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	20000970 	.word	0x20000970

08006240 <_init>:
 8006240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006242:	bf00      	nop
 8006244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006246:	bc08      	pop	{r3}
 8006248:	469e      	mov	lr, r3
 800624a:	4770      	bx	lr

0800624c <_fini>:
 800624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624e:	bf00      	nop
 8006250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006252:	bc08      	pop	{r3}
 8006254:	469e      	mov	lr, r3
 8006256:	4770      	bx	lr
