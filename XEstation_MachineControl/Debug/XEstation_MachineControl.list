
XEstation_MachineControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004860  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004a0c  08004a0c  00014a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a5c  08004a5c  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  08004a5c  08004a5c  00014a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a64  08004a64  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a64  08004a64  00014a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08004a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a4  2**0
                  CONTENTS
 10 .bss          00000230  200001a4  200001a4  000201a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003d4  200003d4  000201a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010890  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021ea  00000000  00000000  00030a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  00032c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c90  00000000  00000000  000339a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f9a  00000000  00000000  00034638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa8c  00000000  00000000  000585d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db466  00000000  00000000  0006805e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001434c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000377c  00000000  00000000  00143518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001a4 	.word	0x200001a4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080049f4 	.word	0x080049f4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001a8 	.word	0x200001a8
 80001e8:	080049f4 	.word	0x080049f4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 ff02 	bl	80012f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f81c 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 fae4 	bl	8000abc <MX_GPIO_Init>
  MX_TIM1_Init();
 80004f4:	f000 f888 	bl	8000608 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004f8:	f000 f8d8 	bl	80006ac <MX_TIM2_Init>
  MX_TIM3_Init();
 80004fc:	f000 f958 	bl	80007b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000500:	f000 f9da 	bl	80008b8 <MX_TIM4_Init>
  MX_UART5_Init();
 8000504:	f000 fa5c 	bl	80009c0 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8000508:	f000 fa84 	bl	8000a14 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800050c:	f000 faac 	bl	8000a68 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  initCupLidDispensor();
 8000510:	f004 f9be 	bl	8004890 <initCupLidDispensor>
  init_powderMachine();
 8000514:	f004 f85c 	bl	80045d0 <init_powderMachine>

  SteppingMotorTest();
 8000518:	f004 f9ae 	bl	8004878 <SteppingMotorTest>
//	  SteppingMotorTest();
//	  L298Ntest();
//	  heaterTest();
//	  printf("test ..\n\n");

	HAL_Delay(500);
 800051c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000520:	f000 ff58 	bl	80013d4 <HAL_Delay>
 8000524:	e7fa      	b.n	800051c <main+0x38>
	...

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	; 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f004 fa54 	bl	80049e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b2b      	ldr	r3, [pc, #172]	; (8000600 <SystemClock_Config+0xd8>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a2a      	ldr	r2, [pc, #168]	; (8000600 <SystemClock_Config+0xd8>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <SystemClock_Config+0xd8>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b25      	ldr	r3, [pc, #148]	; (8000604 <SystemClock_Config+0xdc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a24      	ldr	r2, [pc, #144]	; (8000604 <SystemClock_Config+0xdc>)
 8000572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <SystemClock_Config+0xdc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000594:	2300      	movs	r3, #0
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000598:	2308      	movs	r3, #8
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800059c:	23b4      	movs	r3, #180	; 0xb4
 800059e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 faef 	bl	8001b90 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b8:	f000 fbd6 	bl	8000d68 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005bc:	f001 fa98 	bl	8001af0 <HAL_PWREx_EnableOverDrive>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005c6:	f000 fbcf 	bl	8000d68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2302      	movs	r3, #2
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2105      	movs	r1, #5
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fd49 	bl	8002080 <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80005f4:	f000 fbb8 	bl	8000d68 <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3750      	adds	r7, #80	; 0x50
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061c:	463b      	mov	r3, r7
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <MX_TIM1_Init+0x9c>)
 8000626:	4a20      	ldr	r2, [pc, #128]	; (80006a8 <MX_TIM1_Init+0xa0>)
 8000628:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1800-1;
 800062a:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <MX_TIM1_Init+0x9c>)
 800062c:	f240 7207 	movw	r2, #1799	; 0x707
 8000630:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000632:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <MX_TIM1_Init+0x9c>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000638:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_TIM1_Init+0x9c>)
 800063a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800063e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_TIM1_Init+0x9c>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <MX_TIM1_Init+0x9c>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_TIM1_Init+0x9c>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000652:	4814      	ldr	r0, [pc, #80]	; (80006a4 <MX_TIM1_Init+0x9c>)
 8000654:	f001 fee4 	bl	8002420 <HAL_TIM_Base_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800065e:	f000 fb83 	bl	8000d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000666:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	4619      	mov	r1, r3
 800066e:	480d      	ldr	r0, [pc, #52]	; (80006a4 <MX_TIM1_Init+0x9c>)
 8000670:	f002 fa7a 	bl	8002b68 <HAL_TIM_ConfigClockSource>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800067a:	f000 fb75 	bl	8000d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800067e:	2300      	movs	r3, #0
 8000680:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000686:	463b      	mov	r3, r7
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <MX_TIM1_Init+0x9c>)
 800068c:	f002 ff48 	bl	8003520 <HAL_TIMEx_MasterConfigSynchronization>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000696:	f000 fb67 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200002fc 	.word	0x200002fc
 80006a8:	40010000 	.word	0x40010000

080006ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08e      	sub	sp, #56	; 0x38
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80006b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006cc:	463b      	mov	r3, r7
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
 80006da:	615a      	str	r2, [r3, #20]
 80006dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006de:	4b33      	ldr	r3, [pc, #204]	; (80007ac <MX_TIM2_Init+0x100>)
 80006e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006e6:	4b31      	ldr	r3, [pc, #196]	; (80007ac <MX_TIM2_Init+0x100>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ec:	4b2f      	ldr	r3, [pc, #188]	; (80007ac <MX_TIM2_Init+0x100>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80006f2:	4b2e      	ldr	r3, [pc, #184]	; (80007ac <MX_TIM2_Init+0x100>)
 80006f4:	f04f 32ff 	mov.w	r2, #4294967295
 80006f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fa:	4b2c      	ldr	r3, [pc, #176]	; (80007ac <MX_TIM2_Init+0x100>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000700:	4b2a      	ldr	r3, [pc, #168]	; (80007ac <MX_TIM2_Init+0x100>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000706:	4829      	ldr	r0, [pc, #164]	; (80007ac <MX_TIM2_Init+0x100>)
 8000708:	f001 fe8a 	bl	8002420 <HAL_TIM_Base_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000712:	f000 fb29 	bl	8000d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000716:	4825      	ldr	r0, [pc, #148]	; (80007ac <MX_TIM2_Init+0x100>)
 8000718:	f001 ff3a 	bl	8002590 <HAL_TIM_PWM_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000722:	f000 fb21 	bl	8000d68 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800072a:	2300      	movs	r3, #0
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800072e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000732:	4619      	mov	r1, r3
 8000734:	481d      	ldr	r0, [pc, #116]	; (80007ac <MX_TIM2_Init+0x100>)
 8000736:	f002 fade 	bl	8002cf6 <HAL_TIM_SlaveConfigSynchro>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000740:	f000 fb12 	bl	8000d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	4619      	mov	r1, r3
 8000752:	4816      	ldr	r0, [pc, #88]	; (80007ac <MX_TIM2_Init+0x100>)
 8000754:	f002 fee4 	bl	8003520 <HAL_TIMEx_MasterConfigSynchronization>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800075e:	f000 fb03 	bl	8000d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000762:	2360      	movs	r3, #96	; 0x60
 8000764:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	4619      	mov	r1, r3
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_TIM2_Init+0x100>)
 800077a:	f002 f933 	bl	80029e4 <HAL_TIM_PWM_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000784:	f000 faf0 	bl	8000d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	2204      	movs	r2, #4
 800078c:	4619      	mov	r1, r3
 800078e:	4807      	ldr	r0, [pc, #28]	; (80007ac <MX_TIM2_Init+0x100>)
 8000790:	f002 f928 	bl	80029e4 <HAL_TIM_PWM_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800079a:	f000 fae5 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800079e:	4803      	ldr	r0, [pc, #12]	; (80007ac <MX_TIM2_Init+0x100>)
 80007a0:	f000 fb78 	bl	8000e94 <HAL_TIM_MspPostInit>

}
 80007a4:	bf00      	nop
 80007a6:	3738      	adds	r7, #56	; 0x38
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000388 	.word	0x20000388

080007b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08e      	sub	sp, #56	; 0x38
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
 80007de:	615a      	str	r2, [r3, #20]
 80007e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007e2:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <MX_TIM3_Init+0x100>)
 80007e4:	4a33      	ldr	r2, [pc, #204]	; (80008b4 <MX_TIM3_Init+0x104>)
 80007e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007e8:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <MX_TIM3_Init+0x100>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ee:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <MX_TIM3_Init+0x100>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007f4:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <MX_TIM3_Init+0x100>)
 80007f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <MX_TIM3_Init+0x100>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000802:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <MX_TIM3_Init+0x100>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000808:	4829      	ldr	r0, [pc, #164]	; (80008b0 <MX_TIM3_Init+0x100>)
 800080a:	f001 fe09 	bl	8002420 <HAL_TIM_Base_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000814:	f000 faa8 	bl	8000d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000818:	4825      	ldr	r0, [pc, #148]	; (80008b0 <MX_TIM3_Init+0x100>)
 800081a:	f001 feb9 	bl	8002590 <HAL_TIM_PWM_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000824:	f000 faa0 	bl	8000d68 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000834:	4619      	mov	r1, r3
 8000836:	481e      	ldr	r0, [pc, #120]	; (80008b0 <MX_TIM3_Init+0x100>)
 8000838:	f002 fa5d 	bl	8002cf6 <HAL_TIM_SlaveConfigSynchro>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000842:	f000 fa91 	bl	8000d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	4816      	ldr	r0, [pc, #88]	; (80008b0 <MX_TIM3_Init+0x100>)
 8000856:	f002 fe63 	bl	8003520 <HAL_TIMEx_MasterConfigSynchronization>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000860:	f000 fa82 	bl	8000d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000864:	2360      	movs	r3, #96	; 0x60
 8000866:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	4619      	mov	r1, r3
 800087a:	480d      	ldr	r0, [pc, #52]	; (80008b0 <MX_TIM3_Init+0x100>)
 800087c:	f002 f8b2 	bl	80029e4 <HAL_TIM_PWM_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000886:	f000 fa6f 	bl	8000d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	2204      	movs	r2, #4
 800088e:	4619      	mov	r1, r3
 8000890:	4807      	ldr	r0, [pc, #28]	; (80008b0 <MX_TIM3_Init+0x100>)
 8000892:	f002 f8a7 	bl	80029e4 <HAL_TIM_PWM_ConfigChannel>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 800089c:	f000 fa64 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <MX_TIM3_Init+0x100>)
 80008a2:	f000 faf7 	bl	8000e94 <HAL_TIM_MspPostInit>

}
 80008a6:	bf00      	nop
 80008a8:	3738      	adds	r7, #56	; 0x38
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000270 	.word	0x20000270
 80008b4:	40000400 	.word	0x40000400

080008b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08e      	sub	sp, #56	; 0x38
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d8:	463b      	mov	r3, r7
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
 80008e6:	615a      	str	r2, [r3, #20]
 80008e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008ea:	4b33      	ldr	r3, [pc, #204]	; (80009b8 <MX_TIM4_Init+0x100>)
 80008ec:	4a33      	ldr	r2, [pc, #204]	; (80009bc <MX_TIM4_Init+0x104>)
 80008ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008f0:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <MX_TIM4_Init+0x100>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f6:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <MX_TIM4_Init+0x100>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008fc:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <MX_TIM4_Init+0x100>)
 80008fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000902:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000904:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <MX_TIM4_Init+0x100>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090a:	4b2b      	ldr	r3, [pc, #172]	; (80009b8 <MX_TIM4_Init+0x100>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000910:	4829      	ldr	r0, [pc, #164]	; (80009b8 <MX_TIM4_Init+0x100>)
 8000912:	f001 fd85 	bl	8002420 <HAL_TIM_Base_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800091c:	f000 fa24 	bl	8000d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000920:	4825      	ldr	r0, [pc, #148]	; (80009b8 <MX_TIM4_Init+0x100>)
 8000922:	f001 fe35 	bl	8002590 <HAL_TIM_PWM_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800092c:	f000 fa1c 	bl	8000d68 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	481e      	ldr	r0, [pc, #120]	; (80009b8 <MX_TIM4_Init+0x100>)
 8000940:	f002 f9d9 	bl	8002cf6 <HAL_TIM_SlaveConfigSynchro>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800094a:	f000 fa0d 	bl	8000d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4816      	ldr	r0, [pc, #88]	; (80009b8 <MX_TIM4_Init+0x100>)
 800095e:	f002 fddf 	bl	8003520 <HAL_TIMEx_MasterConfigSynchronization>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000968:	f000 f9fe 	bl	8000d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096c:	2360      	movs	r3, #96	; 0x60
 800096e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	2208      	movs	r2, #8
 8000980:	4619      	mov	r1, r3
 8000982:	480d      	ldr	r0, [pc, #52]	; (80009b8 <MX_TIM4_Init+0x100>)
 8000984:	f002 f82e 	bl	80029e4 <HAL_TIM_PWM_ConfigChannel>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800098e:	f000 f9eb 	bl	8000d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	220c      	movs	r2, #12
 8000996:	4619      	mov	r1, r3
 8000998:	4807      	ldr	r0, [pc, #28]	; (80009b8 <MX_TIM4_Init+0x100>)
 800099a:	f002 f823 	bl	80029e4 <HAL_TIM_PWM_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 80009a4:	f000 f9e0 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <MX_TIM4_Init+0x100>)
 80009aa:	f000 fa73 	bl	8000e94 <HAL_TIM_MspPostInit>

}
 80009ae:	bf00      	nop
 80009b0:	3738      	adds	r7, #56	; 0x38
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200001e4 	.word	0x200001e4
 80009bc:	40000800 	.word	0x40000800

080009c0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_UART5_Init+0x4c>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <MX_UART5_Init+0x50>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_UART5_Init+0x4c>)
 80009cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009d0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MX_UART5_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_UART5_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_UART5_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_UART5_Init+0x4c>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MX_UART5_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_UART5_Init+0x4c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_UART5_Init+0x4c>)
 80009f8:	f002 fe22 	bl	8003640 <HAL_UART_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000a02:	f000 f9b1 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200002b8 	.word	0x200002b8
 8000a10:	40005000 	.word	0x40005000

08000a14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_USART3_UART_Init+0x4c>)
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <MX_USART3_UART_Init+0x50>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <MX_USART3_UART_Init+0x4c>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_USART3_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_USART3_UART_Init+0x4c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <MX_USART3_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_USART3_UART_Init+0x4c>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <MX_USART3_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_USART3_UART_Init+0x4c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_USART3_UART_Init+0x4c>)
 8000a4c:	f002 fdf8 	bl	8003640 <HAL_UART_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a56:	f000 f987 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	2000022c 	.word	0x2000022c
 8000a64:	40004800 	.word	0x40004800

08000a68 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_USART6_UART_Init+0x4c>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MX_USART6_UART_Init+0x50>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_USART6_UART_Init+0x4c>)
 8000a74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a78:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USART6_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_USART6_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_USART6_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_USART6_UART_Init+0x4c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_USART6_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_USART6_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USART6_UART_Init+0x4c>)
 8000aa0:	f002 fdce 	bl	8003640 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000aaa:	f000 f95d 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000344 	.word	0x20000344
 8000ab8:	40011400 	.word	0x40011400

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	; 0x38
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
 8000ad6:	4b9b      	ldr	r3, [pc, #620]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a9a      	ldr	r2, [pc, #616]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000adc:	f043 0310 	orr.w	r3, r3, #16
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b98      	ldr	r3, [pc, #608]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0310 	and.w	r3, r3, #16
 8000aea:	623b      	str	r3, [r7, #32]
 8000aec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
 8000af2:	4b94      	ldr	r3, [pc, #592]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a93      	ldr	r2, [pc, #588]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000af8:	f043 0320 	orr.w	r3, r3, #32
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b91      	ldr	r3, [pc, #580]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0320 	and.w	r3, r3, #32
 8000b06:	61fb      	str	r3, [r7, #28]
 8000b08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
 8000b0e:	4b8d      	ldr	r3, [pc, #564]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a8c      	ldr	r2, [pc, #560]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b8a      	ldr	r3, [pc, #552]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b22:	61bb      	str	r3, [r7, #24]
 8000b24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	4b86      	ldr	r3, [pc, #536]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a85      	ldr	r2, [pc, #532]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b83      	ldr	r3, [pc, #524]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b7f      	ldr	r3, [pc, #508]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a7e      	ldr	r2, [pc, #504]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b7c      	ldr	r3, [pc, #496]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b78      	ldr	r3, [pc, #480]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a77      	ldr	r2, [pc, #476]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b75      	ldr	r3, [pc, #468]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b71      	ldr	r3, [pc, #452]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a70      	ldr	r2, [pc, #448]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b6e      	ldr	r3, [pc, #440]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b6a      	ldr	r3, [pc, #424]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a69      	ldr	r2, [pc, #420]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b67      	ldr	r3, [pc, #412]	; (8000d44 <MX_GPIO_Init+0x288>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PD02_DCmix_EN_Pin|PD04_DCpowder_IN2_Pin|PD04_DCpowder_IN1_Pin|PD01_DCmix_IN2_Pin
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f64f 71cd 	movw	r1, #65485	; 0xffcd
 8000bb8:	4863      	ldr	r0, [pc, #396]	; (8000d48 <MX_GPIO_Init+0x28c>)
 8000bba:	f000 ff7f 	bl	8001abc <HAL_GPIO_WritePin>
                          |PD01_DCmix_IN1_Pin|CupD_STP_Pin|PD03_DCmix_IN1_Pin|CupD_DIR_Pin
                          |PD03_DCmix_IN2_Pin|LidD_STP_Pin|PD03_DCmix_EN_Pin|PD05_DCmix_IN1_Pin
                          |PD04_DCmix_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PD02_DCpowder_IN1_Pin|PD01_DCpowder_IN1_Pin|PD01_DCpowder_IN2_Pin|PD05_DCpowder_IN1_Pin
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f24f 71ac 	movw	r1, #63404	; 0xf7ac
 8000bc4:	4861      	ldr	r0, [pc, #388]	; (8000d4c <MX_GPIO_Init+0x290>)
 8000bc6:	f000 ff79 	bl	8001abc <HAL_GPIO_WritePin>
                          |PD04_DCpowder_EN_Pin|PD05_DCpowder_IN2_Pin|PD01_DCpowder_EN_Pin|CF01_heat_IN2_Pin
                          |CupD_EN_Pin|LidD_EN_Pin|LidD_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PD02_DCpowder_EN_Pin|PD02_DCpowder_IN2_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2103      	movs	r1, #3
 8000bce:	4860      	ldr	r0, [pc, #384]	; (8000d50 <MX_GPIO_Init+0x294>)
 8000bd0:	f000 ff74 	bl	8001abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ICE01_water_Pin|ICE01_mix_Pin|PD01_heat_IN1_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2149      	movs	r1, #73	; 0x49
 8000bd8:	485e      	ldr	r0, [pc, #376]	; (8000d54 <MX_GPIO_Init+0x298>)
 8000bda:	f000 ff6f 	bl	8001abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PD04_DCmix_IN1_Pin|ICE01_ice_Pin|CF01_heat_IN1_Pin|PD03_heat_IN1_Pin
 8000bde:	2200      	movs	r2, #0
 8000be0:	21f9      	movs	r1, #249	; 0xf9
 8000be2:	485d      	ldr	r0, [pc, #372]	; (8000d58 <MX_GPIO_Init+0x29c>)
 8000be4:	f000 ff6a 	bl	8001abc <HAL_GPIO_WritePin>
                          |PD03_heat_IN2_Pin|PD04_heat_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PD04_DCmix_IN2_Pin|PD05_DCmix_IN2_Pin|PD05_DCmix_EN_Pin|PD02_heat_IN2_Pin
 8000be8:	2200      	movs	r2, #0
 8000bea:	f64b 4121 	movw	r1, #48161	; 0xbc21
 8000bee:	485b      	ldr	r0, [pc, #364]	; (8000d5c <MX_GPIO_Init+0x2a0>)
 8000bf0:	f000 ff64 	bl	8001abc <HAL_GPIO_WritePin>
                          |PD02_heat_IN1_Pin|PD01_heat_IN2_Pin|PD04_heat_IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PD03_DCpowder_EN_Pin|PD05_DCpowder_EN_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2103      	movs	r1, #3
 8000bf8:	4859      	ldr	r0, [pc, #356]	; (8000d60 <MX_GPIO_Init+0x2a4>)
 8000bfa:	f000 ff5f 	bl	8001abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD02_DCmix_IN2_Pin|PD02_DCmix_IN1_Pin|PD01_DCmix_EN_Pin|PD05_heat_IN1_Pin
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f64f 01e3 	movw	r1, #63715	; 0xf8e3
 8000c04:	4857      	ldr	r0, [pc, #348]	; (8000d64 <MX_GPIO_Init+0x2a8>)
 8000c06:	f000 ff59 	bl	8001abc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD02_DCmix_EN_Pin PD04_DCpowder_IN2_Pin PD04_DCpowder_IN1_Pin PD01_DCmix_IN2_Pin
                           PD01_DCmix_IN1_Pin CupD_STP_Pin PD03_DCmix_IN1_Pin CupD_DIR_Pin
                           PD03_DCmix_IN2_Pin LidD_STP_Pin PD03_DCmix_EN_Pin PD05_DCmix_IN1_Pin
                           PD04_DCmix_EN_Pin */
  GPIO_InitStruct.Pin = PD02_DCmix_EN_Pin|PD04_DCpowder_IN2_Pin|PD04_DCpowder_IN1_Pin|PD01_DCmix_IN2_Pin
 8000c0a:	f64f 73cd 	movw	r3, #65485	; 0xffcd
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD01_DCmix_IN1_Pin|CupD_STP_Pin|PD03_DCmix_IN1_Pin|CupD_DIR_Pin
                          |PD03_DCmix_IN2_Pin|LidD_STP_Pin|PD03_DCmix_EN_Pin|PD05_DCmix_IN1_Pin
                          |PD04_DCmix_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4849      	ldr	r0, [pc, #292]	; (8000d48 <MX_GPIO_Init+0x28c>)
 8000c24:	f000 fd9e 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCpowder_IN1_Pin PD01_DCpowder_IN1_Pin PD01_DCpowder_IN2_Pin PD05_DCpowder_IN1_Pin
                           PD04_DCpowder_EN_Pin PD05_DCpowder_IN2_Pin PD01_DCpowder_EN_Pin CF01_heat_IN2_Pin
                           CupD_EN_Pin LidD_EN_Pin LidD_DIR_Pin */
  GPIO_InitStruct.Pin = PD02_DCpowder_IN1_Pin|PD01_DCpowder_IN1_Pin|PD01_DCpowder_IN2_Pin|PD05_DCpowder_IN1_Pin
 8000c28:	f24f 73ac 	movw	r3, #63404	; 0xf7ac
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD04_DCpowder_EN_Pin|PD05_DCpowder_IN2_Pin|PD01_DCpowder_EN_Pin|CF01_heat_IN2_Pin
                          |CupD_EN_Pin|LidD_EN_Pin|LidD_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4842      	ldr	r0, [pc, #264]	; (8000d4c <MX_GPIO_Init+0x290>)
 8000c42:	f000 fd8f 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : Lid_up_Pin */
  GPIO_InitStruct.Pin = Lid_up_Pin;
 8000c46:	2310      	movs	r3, #16
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Lid_up_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	483c      	ldr	r0, [pc, #240]	; (8000d4c <MX_GPIO_Init+0x290>)
 8000c5a:	f000 fd83 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCpowder_EN_Pin PD02_DCpowder_IN2_Pin */
  GPIO_InitStruct.Pin = PD02_DCpowder_EN_Pin|PD02_DCpowder_IN2_Pin;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	4836      	ldr	r0, [pc, #216]	; (8000d50 <MX_GPIO_Init+0x294>)
 8000c76:	f000 fd75 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : ICE01_water_Pin ICE01_mix_Pin PD01_heat_IN1_Pin */
  GPIO_InitStruct.Pin = ICE01_water_Pin|ICE01_mix_Pin|PD01_heat_IN1_Pin;
 8000c7a:	2349      	movs	r3, #73	; 0x49
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4830      	ldr	r0, [pc, #192]	; (8000d54 <MX_GPIO_Init+0x298>)
 8000c92:	f000 fd67 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : Cup_down_Pin */
  GPIO_InitStruct.Pin = Cup_down_Pin;
 8000c96:	2304      	movs	r3, #4
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Cup_down_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	482a      	ldr	r0, [pc, #168]	; (8000d54 <MX_GPIO_Init+0x298>)
 8000caa:	f000 fd5b 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD04_DCmix_IN1_Pin ICE01_ice_Pin CF01_heat_IN1_Pin PD03_heat_IN1_Pin
                           PD03_heat_IN2_Pin PD04_heat_IN2_Pin */
  GPIO_InitStruct.Pin = PD04_DCmix_IN1_Pin|ICE01_ice_Pin|CF01_heat_IN1_Pin|PD03_heat_IN1_Pin
 8000cae:	23f9      	movs	r3, #249	; 0xf9
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD03_heat_IN2_Pin|PD04_heat_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4824      	ldr	r0, [pc, #144]	; (8000d58 <MX_GPIO_Init+0x29c>)
 8000cc6:	f000 fd4d 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD04_DCmix_IN2_Pin PD05_DCmix_IN2_Pin PD05_DCmix_EN_Pin PD02_heat_IN2_Pin
                           PD02_heat_IN1_Pin PD01_heat_IN2_Pin PD04_heat_IN1_Pin */
  GPIO_InitStruct.Pin = PD04_DCmix_IN2_Pin|PD05_DCmix_IN2_Pin|PD05_DCmix_EN_Pin|PD02_heat_IN2_Pin
 8000cca:	f64b 4321 	movw	r3, #48161	; 0xbc21
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD02_heat_IN1_Pin|PD01_heat_IN2_Pin|PD04_heat_IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	481e      	ldr	r0, [pc, #120]	; (8000d5c <MX_GPIO_Init+0x2a0>)
 8000ce4:	f000 fd3e 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : Cup_up_Pin Lid_down_Pin */
  GPIO_InitStruct.Pin = Cup_up_Pin|Lid_down_Pin;
 8000ce8:	2342      	movs	r3, #66	; 0x42
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4818      	ldr	r0, [pc, #96]	; (8000d5c <MX_GPIO_Init+0x2a0>)
 8000cfc:	f000 fd32 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD03_DCpowder_EN_Pin PD05_DCpowder_EN_Pin */
  GPIO_InitStruct.Pin = PD03_DCpowder_EN_Pin|PD05_DCpowder_EN_Pin;
 8000d00:	2303      	movs	r3, #3
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	4812      	ldr	r0, [pc, #72]	; (8000d60 <MX_GPIO_Init+0x2a4>)
 8000d18:	f000 fd24 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCmix_IN2_Pin PD02_DCmix_IN1_Pin PD01_DCmix_EN_Pin PD05_heat_IN1_Pin
                           PD05_heat_IN2_Pin PD03_DCpowder_IN1_Pin PD03_DCpowder_IN2_Pin PD_Fan02_relay_Pin
                           PD_Fan01_relay_Pin ICE01_relay_Pin */
  GPIO_InitStruct.Pin = PD02_DCmix_IN2_Pin|PD02_DCmix_IN1_Pin|PD01_DCmix_EN_Pin|PD05_heat_IN1_Pin
 8000d1c:	f64f 03e3 	movw	r3, #63715	; 0xf8e3
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD05_heat_IN2_Pin|PD03_DCpowder_IN1_Pin|PD03_DCpowder_IN2_Pin|PD_Fan02_relay_Pin
                          |PD_Fan01_relay_Pin|ICE01_relay_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	480b      	ldr	r0, [pc, #44]	; (8000d64 <MX_GPIO_Init+0x2a8>)
 8000d36:	f000 fd15 	bl	8001764 <HAL_GPIO_Init>

}
 8000d3a:	bf00      	nop
 8000d3c:	3738      	adds	r7, #56	; 0x38
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40021400 	.word	0x40021400
 8000d50:	40021c00 	.word	0x40021c00
 8000d54:	40020800 	.word	0x40020800
 8000d58:	40020000 	.word	0x40020000
 8000d5c:	40020400 	.word	0x40020400
 8000d60:	40021800 	.word	0x40021800
 8000d64:	40020c00 	.word	0x40020c00

08000d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6c:	b672      	cpsid	i
}
 8000d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <Error_Handler+0x8>
	...

08000d74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800

08000dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a2c      	ldr	r2, [pc, #176]	; (8000e84 <HAL_TIM_Base_MspInit+0xc0>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10e      	bne.n	8000df4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a2a      	ldr	r2, [pc, #168]	; (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000df2:	e042      	b.n	8000e7a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dfc:	d116      	bne.n	8000e2c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a20      	ldr	r2, [pc, #128]	; (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	201c      	movs	r0, #28
 8000e20:	f000 fbd7 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e24:	201c      	movs	r0, #28
 8000e26:	f000 fbf0 	bl	800160a <HAL_NVIC_EnableIRQ>
}
 8000e2a:	e026      	b.n	8000e7a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a16      	ldr	r2, [pc, #88]	; (8000e8c <HAL_TIM_Base_MspInit+0xc8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d10e      	bne.n	8000e54 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
}
 8000e52:	e012      	b.n	8000e7a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <HAL_TIM_Base_MspInit+0xcc>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d10d      	bne.n	8000e7a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40010000 	.word	0x40010000
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40000400 	.word	0x40000400
 8000e90:	40000800 	.word	0x40000800

08000e94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	; 0x30
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb4:	d13d      	bne.n	8000f32 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	4b53      	ldr	r3, [pc, #332]	; (8001008 <HAL_TIM_MspPostInit+0x174>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a52      	ldr	r2, [pc, #328]	; (8001008 <HAL_TIM_MspPostInit+0x174>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b50      	ldr	r3, [pc, #320]	; (8001008 <HAL_TIM_MspPostInit+0x174>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	61bb      	str	r3, [r7, #24]
 8000ed0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	4b4c      	ldr	r3, [pc, #304]	; (8001008 <HAL_TIM_MspPostInit+0x174>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a4b      	ldr	r2, [pc, #300]	; (8001008 <HAL_TIM_MspPostInit+0x174>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b49      	ldr	r3, [pc, #292]	; (8001008 <HAL_TIM_MspPostInit+0x174>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PD03_heat_EN_Pin;
 8000eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f00:	2301      	movs	r3, #1
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD03_heat_EN_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4840      	ldr	r0, [pc, #256]	; (800100c <HAL_TIM_MspPostInit+0x178>)
 8000f0c:	f000 fc2a 	bl	8001764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PD05_heat_EN_Pin;
 8000f10:	2308      	movs	r3, #8
 8000f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f20:	2301      	movs	r3, #1
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD05_heat_EN_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4839      	ldr	r0, [pc, #228]	; (8001010 <HAL_TIM_MspPostInit+0x17c>)
 8000f2c:	f000 fc1a 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000f30:	e065      	b.n	8000ffe <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM3)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a37      	ldr	r2, [pc, #220]	; (8001014 <HAL_TIM_MspPostInit+0x180>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d13c      	bne.n	8000fb6 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	4b31      	ldr	r3, [pc, #196]	; (8001008 <HAL_TIM_MspPostInit+0x174>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	4a30      	ldr	r2, [pc, #192]	; (8001008 <HAL_TIM_MspPostInit+0x174>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4c:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <HAL_TIM_MspPostInit+0x174>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <HAL_TIM_MspPostInit+0x174>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	4a29      	ldr	r2, [pc, #164]	; (8001008 <HAL_TIM_MspPostInit+0x174>)
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	6313      	str	r3, [r2, #48]	; 0x30
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <HAL_TIM_MspPostInit+0x174>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PD04_heat_EN_Pin;
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f84:	2302      	movs	r3, #2
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD04_heat_EN_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4822      	ldr	r0, [pc, #136]	; (8001018 <HAL_TIM_MspPostInit+0x184>)
 8000f90:	f000 fbe8 	bl	8001764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CF01_heat_EN_Pin;
 8000f94:	2310      	movs	r3, #16
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CF01_heat_EN_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	4818      	ldr	r0, [pc, #96]	; (8001010 <HAL_TIM_MspPostInit+0x17c>)
 8000fb0:	f000 fbd8 	bl	8001764 <HAL_GPIO_Init>
}
 8000fb4:	e023      	b.n	8000ffe <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM4)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a18      	ldr	r2, [pc, #96]	; (800101c <HAL_TIM_MspPostInit+0x188>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d11e      	bne.n	8000ffe <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <HAL_TIM_MspPostInit+0x174>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc8:	4a0f      	ldr	r2, [pc, #60]	; (8001008 <HAL_TIM_MspPostInit+0x174>)
 8000fca:	f043 0302 	orr.w	r3, r3, #2
 8000fce:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_TIM_MspPostInit+0x174>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PD01_heat_EN_Pin|PD02_heat_EN_Pin;
 8000fdc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <HAL_TIM_MspPostInit+0x17c>)
 8000ffa:	f000 fbb3 	bl	8001764 <HAL_GPIO_Init>
}
 8000ffe:	bf00      	nop
 8001000:	3730      	adds	r7, #48	; 0x30
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40020000 	.word	0x40020000
 8001010:	40020400 	.word	0x40020400
 8001014:	40000400 	.word	0x40000400
 8001018:	40020800 	.word	0x40020800
 800101c:	40000800 	.word	0x40000800

08001020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08e      	sub	sp, #56	; 0x38
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a63      	ldr	r2, [pc, #396]	; (80011cc <HAL_UART_MspInit+0x1ac>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d153      	bne.n	80010ea <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
 8001046:	4b62      	ldr	r3, [pc, #392]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	4a61      	ldr	r2, [pc, #388]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 800104c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001050:	6413      	str	r3, [r2, #64]	; 0x40
 8001052:	4b5f      	ldr	r3, [pc, #380]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105a:	623b      	str	r3, [r7, #32]
 800105c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	4b5b      	ldr	r3, [pc, #364]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a5a      	ldr	r2, [pc, #360]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b58      	ldr	r3, [pc, #352]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	4b54      	ldr	r3, [pc, #336]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a53      	ldr	r2, [pc, #332]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b51      	ldr	r3, [pc, #324]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = CupD_TX_Pin;
 8001096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80010a8:	2308      	movs	r3, #8
 80010aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CupD_TX_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b0:	4619      	mov	r1, r3
 80010b2:	4848      	ldr	r0, [pc, #288]	; (80011d4 <HAL_UART_MspInit+0x1b4>)
 80010b4:	f000 fb56 	bl	8001764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CupD_RX_Pin;
 80010b8:	2304      	movs	r3, #4
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80010c8:	2308      	movs	r3, #8
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CupD_RX_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d0:	4619      	mov	r1, r3
 80010d2:	4841      	ldr	r0, [pc, #260]	; (80011d8 <HAL_UART_MspInit+0x1b8>)
 80010d4:	f000 fb46 	bl	8001764 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2035      	movs	r0, #53	; 0x35
 80010de:	f000 fa78 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80010e2:	2035      	movs	r0, #53	; 0x35
 80010e4:	f000 fa91 	bl	800160a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80010e8:	e06c      	b.n	80011c4 <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART3)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a3b      	ldr	r2, [pc, #236]	; (80011dc <HAL_UART_MspInit+0x1bc>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d12d      	bne.n	8001150 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	4b35      	ldr	r3, [pc, #212]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	4a34      	ldr	r2, [pc, #208]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 80010fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001102:	6413      	str	r3, [r2, #64]	; 0x40
 8001104:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	4a2d      	ldr	r2, [pc, #180]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 800111a:	f043 0308 	orr.w	r3, r3, #8
 800111e:	6313      	str	r3, [r2, #48]	; 0x30
 8001120:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 800112c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800113e:	2307      	movs	r3, #7
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4619      	mov	r1, r3
 8001148:	4823      	ldr	r0, [pc, #140]	; (80011d8 <HAL_UART_MspInit+0x1b8>)
 800114a:	f000 fb0b 	bl	8001764 <HAL_GPIO_Init>
}
 800114e:	e039      	b.n	80011c4 <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART6)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a22      	ldr	r2, [pc, #136]	; (80011e0 <HAL_UART_MspInit+0x1c0>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d134      	bne.n	80011c4 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART6_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 8001164:	f043 0320 	orr.w	r3, r3, #32
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 8001180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_UART_MspInit+0x1b0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LidD_RX_Pin|LidD_TX_Pin;
 8001192:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011a4:	2308      	movs	r3, #8
 80011a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	480d      	ldr	r0, [pc, #52]	; (80011e4 <HAL_UART_MspInit+0x1c4>)
 80011b0:	f000 fad8 	bl	8001764 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	2047      	movs	r0, #71	; 0x47
 80011ba:	f000 fa0a 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80011be:	2047      	movs	r0, #71	; 0x47
 80011c0:	f000 fa23 	bl	800160a <HAL_NVIC_EnableIRQ>
}
 80011c4:	bf00      	nop
 80011c6:	3738      	adds	r7, #56	; 0x38
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40005000 	.word	0x40005000
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020800 	.word	0x40020800
 80011d8:	40020c00 	.word	0x40020c00
 80011dc:	40004800 	.word	0x40004800
 80011e0:	40011400 	.word	0x40011400
 80011e4:	40021800 	.word	0x40021800

080011e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <NMI_Handler+0x4>

080011ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <HardFault_Handler+0x4>

080011f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <MemManage_Handler+0x4>

080011fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <UsageFault_Handler+0x4>

08001206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001234:	f000 f8ae 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <TIM2_IRQHandler+0x10>)
 8001242:	f001 fac7 	bl	80027d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000388 	.word	0x20000388

08001250 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <UART5_IRQHandler+0x10>)
 8001256:	f002 fb03 	bl	8003860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200002b8 	.word	0x200002b8

08001264 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <USART6_IRQHandler+0x10>)
 800126a:	f002 faf9 	bl	8003860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000344 	.word	0x20000344

08001278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <SystemInit+0x20>)
 800127e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <SystemInit+0x20>)
 8001284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800129c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012a2:	490e      	ldr	r1, [pc, #56]	; (80012dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012a4:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012b8:	4c0b      	ldr	r4, [pc, #44]	; (80012e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012c6:	f7ff ffd7 	bl	8001278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ca:	f003 fb67 	bl	800499c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ce:	f7ff f909 	bl	80004e4 <main>
  bx  lr    
 80012d2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012d4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012dc:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 80012e0:	08004a6c 	.word	0x08004a6c
  ldr r2, =_sbss
 80012e4:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 80012e8:	200003d4 	.word	0x200003d4

080012ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC_IRQHandler>
	...

080012f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_Init+0x40>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <HAL_Init+0x40>)
 80012fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_Init+0x40>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <HAL_Init+0x40>)
 8001306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800130a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_Init+0x40>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_Init+0x40>)
 8001312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001316:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001318:	2003      	movs	r0, #3
 800131a:	f000 f94f 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131e:	200f      	movs	r0, #15
 8001320:	f000 f808 	bl	8001334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001324:	f7ff fd26 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023c00 	.word	0x40023c00

08001334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x54>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x58>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134a:	fbb3 f3f1 	udiv	r3, r3, r1
 800134e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f967 	bl	8001626 <HAL_SYSTICK_Config>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e00e      	b.n	8001380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b0f      	cmp	r3, #15
 8001366:	d80a      	bhi.n	800137e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001368:	2200      	movs	r2, #0
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f000 f92f 	bl	80015d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001374:	4a06      	ldr	r2, [pc, #24]	; (8001390 <HAL_InitTick+0x5c>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	e000      	b.n	8001380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000000 	.word	0x20000000
 800138c:	20000008 	.word	0x20000008
 8001390:	20000004 	.word	0x20000004

08001394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x20>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x24>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_IncTick+0x24>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000008 	.word	0x20000008
 80013b8:	200003d0 	.word	0x200003d0

080013bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <HAL_GetTick+0x14>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	200003d0 	.word	0x200003d0

080013d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013dc:	f7ff ffee 	bl	80013bc <HAL_GetTick>
 80013e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ec:	d005      	beq.n	80013fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_Delay+0x44>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013fa:	bf00      	nop
 80013fc:	f7ff ffde 	bl	80013bc <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	429a      	cmp	r2, r3
 800140a:	d8f7      	bhi.n	80013fc <HAL_Delay+0x28>
  {
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000008 	.word	0x20000008

0800141c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001438:	4013      	ands	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144e:	4a04      	ldr	r2, [pc, #16]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	60d3      	str	r3, [r2, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <__NVIC_GetPriorityGrouping+0x18>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	f003 0307 	and.w	r3, r3, #7
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	db0b      	blt.n	80014aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 021f 	and.w	r2, r3, #31
 8001498:	4907      	ldr	r1, [pc, #28]	; (80014b8 <__NVIC_EnableIRQ+0x38>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	2001      	movs	r0, #1
 80014a2:	fa00 f202 	lsl.w	r2, r0, r2
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000e100 	.word	0xe000e100

080014bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	db0a      	blt.n	80014e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	490c      	ldr	r1, [pc, #48]	; (8001508 <__NVIC_SetPriority+0x4c>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	0112      	lsls	r2, r2, #4
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	440b      	add	r3, r1
 80014e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e4:	e00a      	b.n	80014fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4908      	ldr	r1, [pc, #32]	; (800150c <__NVIC_SetPriority+0x50>)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	3b04      	subs	r3, #4
 80014f4:	0112      	lsls	r2, r2, #4
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	440b      	add	r3, r1
 80014fa:	761a      	strb	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000e100 	.word	0xe000e100
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f1c3 0307 	rsb	r3, r3, #7
 800152a:	2b04      	cmp	r3, #4
 800152c:	bf28      	it	cs
 800152e:	2304      	movcs	r3, #4
 8001530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3304      	adds	r3, #4
 8001536:	2b06      	cmp	r3, #6
 8001538:	d902      	bls.n	8001540 <NVIC_EncodePriority+0x30>
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3b03      	subs	r3, #3
 800153e:	e000      	b.n	8001542 <NVIC_EncodePriority+0x32>
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	401a      	ands	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001558:	f04f 31ff 	mov.w	r1, #4294967295
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43d9      	mvns	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	4313      	orrs	r3, r2
         );
}
 800156a:	4618      	mov	r0, r3
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001588:	d301      	bcc.n	800158e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2301      	movs	r3, #1
 800158c:	e00f      	b.n	80015ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <SysTick_Config+0x40>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001596:	210f      	movs	r1, #15
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f7ff ff8e 	bl	80014bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SysTick_Config+0x40>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SysTick_Config+0x40>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff29 	bl	800141c <__NVIC_SetPriorityGrouping>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e4:	f7ff ff3e 	bl	8001464 <__NVIC_GetPriorityGrouping>
 80015e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	6978      	ldr	r0, [r7, #20]
 80015f0:	f7ff ff8e 	bl	8001510 <NVIC_EncodePriority>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff5d 	bl	80014bc <__NVIC_SetPriority>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff31 	bl	8001480 <__NVIC_EnableIRQ>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ffa2 	bl	8001578 <SysTick_Config>
 8001634:	4603      	mov	r3, r0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff feb6 	bl	80013bc <HAL_GetTick>
 8001650:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d008      	beq.n	8001670 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2280      	movs	r2, #128	; 0x80
 8001662:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e052      	b.n	8001716 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0216 	bic.w	r2, r2, #22
 800167e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800168e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	2b00      	cmp	r3, #0
 8001696:	d103      	bne.n	80016a0 <HAL_DMA_Abort+0x62>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169c:	2b00      	cmp	r3, #0
 800169e:	d007      	beq.n	80016b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0208 	bic.w	r2, r2, #8
 80016ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0201 	bic.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c0:	e013      	b.n	80016ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016c2:	f7ff fe7b 	bl	80013bc <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b05      	cmp	r3, #5
 80016ce:	d90c      	bls.n	80016ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2220      	movs	r2, #32
 80016d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2203      	movs	r2, #3
 80016da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e015      	b.n	8001716 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1e4      	bne.n	80016c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fc:	223f      	movs	r2, #63	; 0x3f
 80016fe:	409a      	lsls	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d004      	beq.n	800173c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2280      	movs	r2, #128	; 0x80
 8001736:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e00c      	b.n	8001756 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2205      	movs	r2, #5
 8001740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0201 	bic.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	e177      	b.n	8001a70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001780:	2201      	movs	r2, #1
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	429a      	cmp	r2, r3
 800179a:	f040 8166 	bne.w	8001a6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d005      	beq.n	80017b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d130      	bne.n	8001818 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	2203      	movs	r2, #3
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ec:	2201      	movs	r2, #1
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 0201 	and.w	r2, r3, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b03      	cmp	r3, #3
 8001822:	d017      	beq.n	8001854 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d123      	bne.n	80018a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	220f      	movs	r2, #15
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	08da      	lsrs	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3208      	adds	r2, #8
 80018a2:	69b9      	ldr	r1, [r7, #24]
 80018a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0203 	and.w	r2, r3, #3
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80c0 	beq.w	8001a6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b66      	ldr	r3, [pc, #408]	; (8001a88 <HAL_GPIO_Init+0x324>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	4a65      	ldr	r2, [pc, #404]	; (8001a88 <HAL_GPIO_Init+0x324>)
 80018f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f8:	6453      	str	r3, [r2, #68]	; 0x44
 80018fa:	4b63      	ldr	r3, [pc, #396]	; (8001a88 <HAL_GPIO_Init+0x324>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001906:	4a61      	ldr	r2, [pc, #388]	; (8001a8c <HAL_GPIO_Init+0x328>)
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	3302      	adds	r3, #2
 800190e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a58      	ldr	r2, [pc, #352]	; (8001a90 <HAL_GPIO_Init+0x32c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d037      	beq.n	80019a2 <HAL_GPIO_Init+0x23e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a57      	ldr	r2, [pc, #348]	; (8001a94 <HAL_GPIO_Init+0x330>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d031      	beq.n	800199e <HAL_GPIO_Init+0x23a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a56      	ldr	r2, [pc, #344]	; (8001a98 <HAL_GPIO_Init+0x334>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d02b      	beq.n	800199a <HAL_GPIO_Init+0x236>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a55      	ldr	r2, [pc, #340]	; (8001a9c <HAL_GPIO_Init+0x338>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d025      	beq.n	8001996 <HAL_GPIO_Init+0x232>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a54      	ldr	r2, [pc, #336]	; (8001aa0 <HAL_GPIO_Init+0x33c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d01f      	beq.n	8001992 <HAL_GPIO_Init+0x22e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a53      	ldr	r2, [pc, #332]	; (8001aa4 <HAL_GPIO_Init+0x340>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d019      	beq.n	800198e <HAL_GPIO_Init+0x22a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a52      	ldr	r2, [pc, #328]	; (8001aa8 <HAL_GPIO_Init+0x344>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d013      	beq.n	800198a <HAL_GPIO_Init+0x226>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a51      	ldr	r2, [pc, #324]	; (8001aac <HAL_GPIO_Init+0x348>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d00d      	beq.n	8001986 <HAL_GPIO_Init+0x222>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a50      	ldr	r2, [pc, #320]	; (8001ab0 <HAL_GPIO_Init+0x34c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d007      	beq.n	8001982 <HAL_GPIO_Init+0x21e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4f      	ldr	r2, [pc, #316]	; (8001ab4 <HAL_GPIO_Init+0x350>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d101      	bne.n	800197e <HAL_GPIO_Init+0x21a>
 800197a:	2309      	movs	r3, #9
 800197c:	e012      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 800197e:	230a      	movs	r3, #10
 8001980:	e010      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 8001982:	2308      	movs	r3, #8
 8001984:	e00e      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 8001986:	2307      	movs	r3, #7
 8001988:	e00c      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 800198a:	2306      	movs	r3, #6
 800198c:	e00a      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 800198e:	2305      	movs	r3, #5
 8001990:	e008      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 8001992:	2304      	movs	r3, #4
 8001994:	e006      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 8001996:	2303      	movs	r3, #3
 8001998:	e004      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 800199a:	2302      	movs	r3, #2
 800199c:	e002      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 80019a2:	2300      	movs	r3, #0
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	f002 0203 	and.w	r2, r2, #3
 80019aa:	0092      	lsls	r2, r2, #2
 80019ac:	4093      	lsls	r3, r2
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b4:	4935      	ldr	r1, [pc, #212]	; (8001a8c <HAL_GPIO_Init+0x328>)
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	3302      	adds	r3, #2
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c2:	4b3d      	ldr	r3, [pc, #244]	; (8001ab8 <HAL_GPIO_Init+0x354>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019e6:	4a34      	ldr	r2, [pc, #208]	; (8001ab8 <HAL_GPIO_Init+0x354>)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019ec:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <HAL_GPIO_Init+0x354>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a10:	4a29      	ldr	r2, [pc, #164]	; (8001ab8 <HAL_GPIO_Init+0x354>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a16:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <HAL_GPIO_Init+0x354>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a3a:	4a1f      	ldr	r2, [pc, #124]	; (8001ab8 <HAL_GPIO_Init+0x354>)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <HAL_GPIO_Init+0x354>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a64:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <HAL_GPIO_Init+0x354>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	61fb      	str	r3, [r7, #28]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	2b0f      	cmp	r3, #15
 8001a74:	f67f ae84 	bls.w	8001780 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40013800 	.word	0x40013800
 8001a90:	40020000 	.word	0x40020000
 8001a94:	40020400 	.word	0x40020400
 8001a98:	40020800 	.word	0x40020800
 8001a9c:	40020c00 	.word	0x40020c00
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40021400 	.word	0x40021400
 8001aa8:	40021800 	.word	0x40021800
 8001aac:	40021c00 	.word	0x40021c00
 8001ab0:	40022000 	.word	0x40022000
 8001ab4:	40022400 	.word	0x40022400
 8001ab8:	40013c00 	.word	0x40013c00

08001abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	807b      	strh	r3, [r7, #2]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001acc:	787b      	ldrb	r3, [r7, #1]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad2:	887a      	ldrh	r2, [r7, #2]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ad8:	e003      	b.n	8001ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	041a      	lsls	r2, r3, #16
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	619a      	str	r2, [r3, #24]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <HAL_PWREx_EnableOverDrive+0x90>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a1f      	ldr	r2, [pc, #124]	; (8001b80 <HAL_PWREx_EnableOverDrive+0x90>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_PWREx_EnableOverDrive+0x90>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_PWREx_EnableOverDrive+0x94>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b1c:	f7ff fc4e 	bl	80013bc <HAL_GetTick>
 8001b20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b22:	e009      	b.n	8001b38 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b24:	f7ff fc4a 	bl	80013bc <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b32:	d901      	bls.n	8001b38 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e01f      	b.n	8001b78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b44:	d1ee      	bne.n	8001b24 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b4c:	f7ff fc36 	bl	80013bc <HAL_GetTick>
 8001b50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b52:	e009      	b.n	8001b68 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b54:	f7ff fc32 	bl	80013bc <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b62:	d901      	bls.n	8001b68 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e007      	b.n	8001b78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b68:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b74:	d1ee      	bne.n	8001b54 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40023800 	.word	0x40023800
 8001b84:	420e0040 	.word	0x420e0040
 8001b88:	40007000 	.word	0x40007000
 8001b8c:	420e0044 	.word	0x420e0044

08001b90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e264      	b.n	800206c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d075      	beq.n	8001c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bae:	4ba3      	ldr	r3, [pc, #652]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d00c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bba:	4ba0      	ldr	r3, [pc, #640]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d112      	bne.n	8001bec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bc6:	4b9d      	ldr	r3, [pc, #628]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bd2:	d10b      	bne.n	8001bec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd4:	4b99      	ldr	r3, [pc, #612]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d05b      	beq.n	8001c98 <HAL_RCC_OscConfig+0x108>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d157      	bne.n	8001c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e23f      	b.n	800206c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf4:	d106      	bne.n	8001c04 <HAL_RCC_OscConfig+0x74>
 8001bf6:	4b91      	ldr	r3, [pc, #580]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a90      	ldr	r2, [pc, #576]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	e01d      	b.n	8001c40 <HAL_RCC_OscConfig+0xb0>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x98>
 8001c0e:	4b8b      	ldr	r3, [pc, #556]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a8a      	ldr	r2, [pc, #552]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b88      	ldr	r3, [pc, #544]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a87      	ldr	r2, [pc, #540]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0xb0>
 8001c28:	4b84      	ldr	r3, [pc, #528]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a83      	ldr	r2, [pc, #524]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b81      	ldr	r3, [pc, #516]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a80      	ldr	r2, [pc, #512]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d013      	beq.n	8001c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff fbb8 	bl	80013bc <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff fbb4 	bl	80013bc <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	; 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e204      	b.n	800206c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c62:	4b76      	ldr	r3, [pc, #472]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0xc0>
 8001c6e:	e014      	b.n	8001c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7ff fba4 	bl	80013bc <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff fba0 	bl	80013bc <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	; 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e1f0      	b.n	800206c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8a:	4b6c      	ldr	r3, [pc, #432]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0xe8>
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d063      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ca6:	4b65      	ldr	r3, [pc, #404]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00b      	beq.n	8001cca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cb2:	4b62      	ldr	r3, [pc, #392]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d11c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cbe:	4b5f      	ldr	r3, [pc, #380]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d116      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cca:	4b5c      	ldr	r3, [pc, #368]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x152>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e1c4      	b.n	800206c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce2:	4b56      	ldr	r3, [pc, #344]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4952      	ldr	r1, [pc, #328]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf6:	e03a      	b.n	8001d6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d020      	beq.n	8001d42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d00:	4b4f      	ldr	r3, [pc, #316]	; (8001e40 <HAL_RCC_OscConfig+0x2b0>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d06:	f7ff fb59 	bl	80013bc <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0e:	f7ff fb55 	bl	80013bc <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e1a5      	b.n	800206c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d20:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2c:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4940      	ldr	r1, [pc, #256]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
 8001d40:	e015      	b.n	8001d6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d42:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <HAL_RCC_OscConfig+0x2b0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7ff fb38 	bl	80013bc <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d50:	f7ff fb34 	bl	80013bc <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e184      	b.n	800206c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d62:	4b36      	ldr	r3, [pc, #216]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d030      	beq.n	8001ddc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d016      	beq.n	8001db0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d82:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <HAL_RCC_OscConfig+0x2b4>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff fb18 	bl	80013bc <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d90:	f7ff fb14 	bl	80013bc <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e164      	b.n	800206c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0x200>
 8001dae:	e015      	b.n	8001ddc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db0:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <HAL_RCC_OscConfig+0x2b4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db6:	f7ff fb01 	bl	80013bc <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dbe:	f7ff fafd 	bl	80013bc <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e14d      	b.n	800206c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f0      	bne.n	8001dbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80a0 	beq.w	8001f2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10f      	bne.n	8001e1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e08:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e16:	2301      	movs	r3, #1
 8001e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_OscConfig+0x2b8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d121      	bne.n	8001e6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_RCC_OscConfig+0x2b8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <HAL_RCC_OscConfig+0x2b8>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e32:	f7ff fac3 	bl	80013bc <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	e011      	b.n	8001e5e <HAL_RCC_OscConfig+0x2ce>
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	42470000 	.word	0x42470000
 8001e44:	42470e80 	.word	0x42470e80
 8001e48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4c:	f7ff fab6 	bl	80013bc <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e106      	b.n	800206c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5e:	4b85      	ldr	r3, [pc, #532]	; (8002074 <HAL_RCC_OscConfig+0x4e4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d106      	bne.n	8001e80 <HAL_RCC_OscConfig+0x2f0>
 8001e72:	4b81      	ldr	r3, [pc, #516]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8001e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e76:	4a80      	ldr	r2, [pc, #512]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7e:	e01c      	b.n	8001eba <HAL_RCC_OscConfig+0x32a>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b05      	cmp	r3, #5
 8001e86:	d10c      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x312>
 8001e88:	4b7b      	ldr	r3, [pc, #492]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8c:	4a7a      	ldr	r2, [pc, #488]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8001e8e:	f043 0304 	orr.w	r3, r3, #4
 8001e92:	6713      	str	r3, [r2, #112]	; 0x70
 8001e94:	4b78      	ldr	r3, [pc, #480]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e98:	4a77      	ldr	r2, [pc, #476]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea0:	e00b      	b.n	8001eba <HAL_RCC_OscConfig+0x32a>
 8001ea2:	4b75      	ldr	r3, [pc, #468]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea6:	4a74      	ldr	r2, [pc, #464]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	6713      	str	r3, [r2, #112]	; 0x70
 8001eae:	4b72      	ldr	r3, [pc, #456]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb2:	4a71      	ldr	r2, [pc, #452]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8001eb4:	f023 0304 	bic.w	r3, r3, #4
 8001eb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d015      	beq.n	8001eee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec2:	f7ff fa7b 	bl	80013bc <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec8:	e00a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eca:	f7ff fa77 	bl	80013bc <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e0c5      	b.n	800206c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee0:	4b65      	ldr	r3, [pc, #404]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8001ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0ee      	beq.n	8001eca <HAL_RCC_OscConfig+0x33a>
 8001eec:	e014      	b.n	8001f18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eee:	f7ff fa65 	bl	80013bc <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef6:	f7ff fa61 	bl	80013bc <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e0af      	b.n	800206c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0c:	4b5a      	ldr	r3, [pc, #360]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1ee      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d105      	bne.n	8001f2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f1e:	4b56      	ldr	r3, [pc, #344]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a55      	ldr	r2, [pc, #340]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8001f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 809b 	beq.w	800206a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f34:	4b50      	ldr	r3, [pc, #320]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 030c 	and.w	r3, r3, #12
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d05c      	beq.n	8001ffa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d141      	bne.n	8001fcc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f48:	4b4c      	ldr	r3, [pc, #304]	; (800207c <HAL_RCC_OscConfig+0x4ec>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4e:	f7ff fa35 	bl	80013bc <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f56:	f7ff fa31 	bl	80013bc <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e081      	b.n	800206c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f68:	4b43      	ldr	r3, [pc, #268]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1f0      	bne.n	8001f56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69da      	ldr	r2, [r3, #28]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	019b      	lsls	r3, r3, #6
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8a:	085b      	lsrs	r3, r3, #1
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	041b      	lsls	r3, r3, #16
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	061b      	lsls	r3, r3, #24
 8001f98:	4937      	ldr	r1, [pc, #220]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f9e:	4b37      	ldr	r3, [pc, #220]	; (800207c <HAL_RCC_OscConfig+0x4ec>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7ff fa0a 	bl	80013bc <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fac:	f7ff fa06 	bl	80013bc <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e056      	b.n	800206c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fbe:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x41c>
 8001fca:	e04e      	b.n	800206a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fcc:	4b2b      	ldr	r3, [pc, #172]	; (800207c <HAL_RCC_OscConfig+0x4ec>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7ff f9f3 	bl	80013bc <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fda:	f7ff f9ef 	bl	80013bc <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e03f      	b.n	800206c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fec:	4b22      	ldr	r3, [pc, #136]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f0      	bne.n	8001fda <HAL_RCC_OscConfig+0x44a>
 8001ff8:	e037      	b.n	800206a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e032      	b.n	800206c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002006:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <HAL_RCC_OscConfig+0x4e8>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d028      	beq.n	8002066 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800201e:	429a      	cmp	r2, r3
 8002020:	d121      	bne.n	8002066 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202c:	429a      	cmp	r2, r3
 800202e:	d11a      	bne.n	8002066 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002036:	4013      	ands	r3, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800203c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800203e:	4293      	cmp	r3, r2
 8002040:	d111      	bne.n	8002066 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	085b      	lsrs	r3, r3, #1
 800204e:	3b01      	subs	r3, #1
 8002050:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d107      	bne.n	8002066 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40007000 	.word	0x40007000
 8002078:	40023800 	.word	0x40023800
 800207c:	42470060 	.word	0x42470060

08002080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0cc      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002094:	4b68      	ldr	r3, [pc, #416]	; (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d90c      	bls.n	80020bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b65      	ldr	r3, [pc, #404]	; (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b63      	ldr	r3, [pc, #396]	; (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0b8      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d020      	beq.n	800210a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d4:	4b59      	ldr	r3, [pc, #356]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	4a58      	ldr	r2, [pc, #352]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020ec:	4b53      	ldr	r3, [pc, #332]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	4a52      	ldr	r2, [pc, #328]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b50      	ldr	r3, [pc, #320]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	494d      	ldr	r1, [pc, #308]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d044      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	4b47      	ldr	r3, [pc, #284]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d119      	bne.n	800215e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e07f      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d003      	beq.n	800213e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800213a:	2b03      	cmp	r3, #3
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213e:	4b3f      	ldr	r3, [pc, #252]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e06f      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214e:	4b3b      	ldr	r3, [pc, #236]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e067      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215e:	4b37      	ldr	r3, [pc, #220]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f023 0203 	bic.w	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	4934      	ldr	r1, [pc, #208]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	4313      	orrs	r3, r2
 800216e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002170:	f7ff f924 	bl	80013bc <HAL_GetTick>
 8002174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	e00a      	b.n	800218e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002178:	f7ff f920 	bl	80013bc <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	; 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e04f      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	4b2b      	ldr	r3, [pc, #172]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 020c 	and.w	r2, r3, #12
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	429a      	cmp	r2, r3
 800219e:	d1eb      	bne.n	8002178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a0:	4b25      	ldr	r3, [pc, #148]	; (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d20c      	bcs.n	80021c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b22      	ldr	r3, [pc, #136]	; (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b20      	ldr	r3, [pc, #128]	; (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e032      	b.n	800222e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d4:	4b19      	ldr	r3, [pc, #100]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4916      	ldr	r1, [pc, #88]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021f2:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	490e      	ldr	r1, [pc, #56]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	4313      	orrs	r3, r2
 8002204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002206:	f000 f821 	bl	800224c <HAL_RCC_GetSysClockFreq>
 800220a:	4602      	mov	r2, r0
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	490a      	ldr	r1, [pc, #40]	; (8002240 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	5ccb      	ldrb	r3, [r1, r3]
 800221a:	fa22 f303 	lsr.w	r3, r2, r3
 800221e:	4a09      	ldr	r2, [pc, #36]	; (8002244 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_RCC_ClockConfig+0x1c8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff f884 	bl	8001334 <HAL_InitTick>

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40023c00 	.word	0x40023c00
 800223c:	40023800 	.word	0x40023800
 8002240:	08004a44 	.word	0x08004a44
 8002244:	20000000 	.word	0x20000000
 8002248:	20000004 	.word	0x20000004

0800224c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800224c:	b5b0      	push	{r4, r5, r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002252:	2100      	movs	r1, #0
 8002254:	6079      	str	r1, [r7, #4]
 8002256:	2100      	movs	r1, #0
 8002258:	60f9      	str	r1, [r7, #12]
 800225a:	2100      	movs	r1, #0
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800225e:	2100      	movs	r1, #0
 8002260:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002262:	4952      	ldr	r1, [pc, #328]	; (80023ac <HAL_RCC_GetSysClockFreq+0x160>)
 8002264:	6889      	ldr	r1, [r1, #8]
 8002266:	f001 010c 	and.w	r1, r1, #12
 800226a:	2908      	cmp	r1, #8
 800226c:	d00d      	beq.n	800228a <HAL_RCC_GetSysClockFreq+0x3e>
 800226e:	2908      	cmp	r1, #8
 8002270:	f200 8094 	bhi.w	800239c <HAL_RCC_GetSysClockFreq+0x150>
 8002274:	2900      	cmp	r1, #0
 8002276:	d002      	beq.n	800227e <HAL_RCC_GetSysClockFreq+0x32>
 8002278:	2904      	cmp	r1, #4
 800227a:	d003      	beq.n	8002284 <HAL_RCC_GetSysClockFreq+0x38>
 800227c:	e08e      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800227e:	4b4c      	ldr	r3, [pc, #304]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x164>)
 8002280:	60bb      	str	r3, [r7, #8]
       break;
 8002282:	e08e      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002284:	4b4b      	ldr	r3, [pc, #300]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002286:	60bb      	str	r3, [r7, #8]
      break;
 8002288:	e08b      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800228a:	4948      	ldr	r1, [pc, #288]	; (80023ac <HAL_RCC_GetSysClockFreq+0x160>)
 800228c:	6849      	ldr	r1, [r1, #4]
 800228e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002292:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002294:	4945      	ldr	r1, [pc, #276]	; (80023ac <HAL_RCC_GetSysClockFreq+0x160>)
 8002296:	6849      	ldr	r1, [r1, #4]
 8002298:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800229c:	2900      	cmp	r1, #0
 800229e:	d024      	beq.n	80022ea <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a0:	4942      	ldr	r1, [pc, #264]	; (80023ac <HAL_RCC_GetSysClockFreq+0x160>)
 80022a2:	6849      	ldr	r1, [r1, #4]
 80022a4:	0989      	lsrs	r1, r1, #6
 80022a6:	4608      	mov	r0, r1
 80022a8:	f04f 0100 	mov.w	r1, #0
 80022ac:	f240 14ff 	movw	r4, #511	; 0x1ff
 80022b0:	f04f 0500 	mov.w	r5, #0
 80022b4:	ea00 0204 	and.w	r2, r0, r4
 80022b8:	ea01 0305 	and.w	r3, r1, r5
 80022bc:	493d      	ldr	r1, [pc, #244]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x168>)
 80022be:	fb01 f003 	mul.w	r0, r1, r3
 80022c2:	2100      	movs	r1, #0
 80022c4:	fb01 f102 	mul.w	r1, r1, r2
 80022c8:	1844      	adds	r4, r0, r1
 80022ca:	493a      	ldr	r1, [pc, #232]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x168>)
 80022cc:	fba2 0101 	umull	r0, r1, r2, r1
 80022d0:	1863      	adds	r3, r4, r1
 80022d2:	4619      	mov	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	461a      	mov	r2, r3
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	f7fd ff86 	bl	80001ec <__aeabi_uldivmod>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4613      	mov	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	e04a      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ea:	4b30      	ldr	r3, [pc, #192]	; (80023ac <HAL_RCC_GetSysClockFreq+0x160>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	099b      	lsrs	r3, r3, #6
 80022f0:	461a      	mov	r2, r3
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022fa:	f04f 0100 	mov.w	r1, #0
 80022fe:	ea02 0400 	and.w	r4, r2, r0
 8002302:	ea03 0501 	and.w	r5, r3, r1
 8002306:	4620      	mov	r0, r4
 8002308:	4629      	mov	r1, r5
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	014b      	lsls	r3, r1, #5
 8002314:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002318:	0142      	lsls	r2, r0, #5
 800231a:	4610      	mov	r0, r2
 800231c:	4619      	mov	r1, r3
 800231e:	1b00      	subs	r0, r0, r4
 8002320:	eb61 0105 	sbc.w	r1, r1, r5
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	018b      	lsls	r3, r1, #6
 800232e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002332:	0182      	lsls	r2, r0, #6
 8002334:	1a12      	subs	r2, r2, r0
 8002336:	eb63 0301 	sbc.w	r3, r3, r1
 800233a:	f04f 0000 	mov.w	r0, #0
 800233e:	f04f 0100 	mov.w	r1, #0
 8002342:	00d9      	lsls	r1, r3, #3
 8002344:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002348:	00d0      	lsls	r0, r2, #3
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	1912      	adds	r2, r2, r4
 8002350:	eb45 0303 	adc.w	r3, r5, r3
 8002354:	f04f 0000 	mov.w	r0, #0
 8002358:	f04f 0100 	mov.w	r1, #0
 800235c:	0299      	lsls	r1, r3, #10
 800235e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002362:	0290      	lsls	r0, r2, #10
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	461a      	mov	r2, r3
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	f7fd ff3a 	bl	80001ec <__aeabi_uldivmod>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4613      	mov	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002380:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_RCC_GetSysClockFreq+0x160>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	60bb      	str	r3, [r7, #8]
      break;
 800239a:	e002      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x164>)
 800239e:	60bb      	str	r3, [r7, #8]
      break;
 80023a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a2:	68bb      	ldr	r3, [r7, #8]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bdb0      	pop	{r4, r5, r7, pc}
 80023ac:	40023800 	.word	0x40023800
 80023b0:	00f42400 	.word	0x00f42400
 80023b4:	017d7840 	.word	0x017d7840

080023b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <HAL_RCC_GetHCLKFreq+0x14>)
 80023be:	681b      	ldr	r3, [r3, #0]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20000000 	.word	0x20000000

080023d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023d4:	f7ff fff0 	bl	80023b8 <HAL_RCC_GetHCLKFreq>
 80023d8:	4602      	mov	r2, r0
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	0a9b      	lsrs	r3, r3, #10
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	4903      	ldr	r1, [pc, #12]	; (80023f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e6:	5ccb      	ldrb	r3, [r1, r3]
 80023e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40023800 	.word	0x40023800
 80023f4:	08004a54 	.word	0x08004a54

080023f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023fc:	f7ff ffdc 	bl	80023b8 <HAL_RCC_GetHCLKFreq>
 8002400:	4602      	mov	r2, r0
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	0b5b      	lsrs	r3, r3, #13
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	4903      	ldr	r1, [pc, #12]	; (800241c <HAL_RCC_GetPCLK2Freq+0x24>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002414:	4618      	mov	r0, r3
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40023800 	.word	0x40023800
 800241c:	08004a54 	.word	0x08004a54

08002420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e041      	b.n	80024b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7fe fcbc 	bl	8000dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3304      	adds	r3, #4
 800245c:	4619      	mov	r1, r3
 800245e:	4610      	mov	r0, r2
 8002460:	f000 fcbe 	bl	8002de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d001      	beq.n	80024d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e046      	b.n	8002566 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a23      	ldr	r2, [pc, #140]	; (8002574 <HAL_TIM_Base_Start+0xb4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d022      	beq.n	8002530 <HAL_TIM_Base_Start+0x70>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f2:	d01d      	beq.n	8002530 <HAL_TIM_Base_Start+0x70>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a1f      	ldr	r2, [pc, #124]	; (8002578 <HAL_TIM_Base_Start+0xb8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d018      	beq.n	8002530 <HAL_TIM_Base_Start+0x70>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a1e      	ldr	r2, [pc, #120]	; (800257c <HAL_TIM_Base_Start+0xbc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d013      	beq.n	8002530 <HAL_TIM_Base_Start+0x70>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1c      	ldr	r2, [pc, #112]	; (8002580 <HAL_TIM_Base_Start+0xc0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00e      	beq.n	8002530 <HAL_TIM_Base_Start+0x70>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1b      	ldr	r2, [pc, #108]	; (8002584 <HAL_TIM_Base_Start+0xc4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d009      	beq.n	8002530 <HAL_TIM_Base_Start+0x70>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a19      	ldr	r2, [pc, #100]	; (8002588 <HAL_TIM_Base_Start+0xc8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d004      	beq.n	8002530 <HAL_TIM_Base_Start+0x70>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a18      	ldr	r2, [pc, #96]	; (800258c <HAL_TIM_Base_Start+0xcc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d111      	bne.n	8002554 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b06      	cmp	r3, #6
 8002540:	d010      	beq.n	8002564 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 0201 	orr.w	r2, r2, #1
 8002550:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002552:	e007      	b.n	8002564 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40010000 	.word	0x40010000
 8002578:	40000400 	.word	0x40000400
 800257c:	40000800 	.word	0x40000800
 8002580:	40000c00 	.word	0x40000c00
 8002584:	40010400 	.word	0x40010400
 8002588:	40014000 	.word	0x40014000
 800258c:	40001800 	.word	0x40001800

08002590 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e041      	b.n	8002626 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f839 	bl	800262e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	4619      	mov	r1, r3
 80025ce:	4610      	mov	r0, r2
 80025d0:	f000 fc06 	bl	8002de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d109      	bne.n	8002668 <HAL_TIM_PWM_Start+0x24>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b01      	cmp	r3, #1
 800265e:	bf14      	ite	ne
 8002660:	2301      	movne	r3, #1
 8002662:	2300      	moveq	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	e022      	b.n	80026ae <HAL_TIM_PWM_Start+0x6a>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2b04      	cmp	r3, #4
 800266c:	d109      	bne.n	8002682 <HAL_TIM_PWM_Start+0x3e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	bf14      	ite	ne
 800267a:	2301      	movne	r3, #1
 800267c:	2300      	moveq	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	e015      	b.n	80026ae <HAL_TIM_PWM_Start+0x6a>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b08      	cmp	r3, #8
 8002686:	d109      	bne.n	800269c <HAL_TIM_PWM_Start+0x58>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	e008      	b.n	80026ae <HAL_TIM_PWM_Start+0x6a>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	bf14      	ite	ne
 80026a8:	2301      	movne	r3, #1
 80026aa:	2300      	moveq	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e07c      	b.n	80027b0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d104      	bne.n	80026c6 <HAL_TIM_PWM_Start+0x82>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026c4:	e013      	b.n	80026ee <HAL_TIM_PWM_Start+0xaa>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d104      	bne.n	80026d6 <HAL_TIM_PWM_Start+0x92>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026d4:	e00b      	b.n	80026ee <HAL_TIM_PWM_Start+0xaa>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d104      	bne.n	80026e6 <HAL_TIM_PWM_Start+0xa2>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026e4:	e003      	b.n	80026ee <HAL_TIM_PWM_Start+0xaa>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2202      	movs	r2, #2
 80026ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2201      	movs	r2, #1
 80026f4:	6839      	ldr	r1, [r7, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 feed 	bl	80034d6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a2d      	ldr	r2, [pc, #180]	; (80027b8 <HAL_TIM_PWM_Start+0x174>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d004      	beq.n	8002710 <HAL_TIM_PWM_Start+0xcc>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a2c      	ldr	r2, [pc, #176]	; (80027bc <HAL_TIM_PWM_Start+0x178>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d101      	bne.n	8002714 <HAL_TIM_PWM_Start+0xd0>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <HAL_TIM_PWM_Start+0xd2>
 8002714:	2300      	movs	r3, #0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002728:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a22      	ldr	r2, [pc, #136]	; (80027b8 <HAL_TIM_PWM_Start+0x174>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d022      	beq.n	800277a <HAL_TIM_PWM_Start+0x136>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d01d      	beq.n	800277a <HAL_TIM_PWM_Start+0x136>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1f      	ldr	r2, [pc, #124]	; (80027c0 <HAL_TIM_PWM_Start+0x17c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d018      	beq.n	800277a <HAL_TIM_PWM_Start+0x136>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <HAL_TIM_PWM_Start+0x180>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d013      	beq.n	800277a <HAL_TIM_PWM_Start+0x136>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <HAL_TIM_PWM_Start+0x184>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d00e      	beq.n	800277a <HAL_TIM_PWM_Start+0x136>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a16      	ldr	r2, [pc, #88]	; (80027bc <HAL_TIM_PWM_Start+0x178>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d009      	beq.n	800277a <HAL_TIM_PWM_Start+0x136>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a18      	ldr	r2, [pc, #96]	; (80027cc <HAL_TIM_PWM_Start+0x188>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d004      	beq.n	800277a <HAL_TIM_PWM_Start+0x136>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a16      	ldr	r2, [pc, #88]	; (80027d0 <HAL_TIM_PWM_Start+0x18c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d111      	bne.n	800279e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b06      	cmp	r3, #6
 800278a:	d010      	beq.n	80027ae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800279c:	e007      	b.n	80027ae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0201 	orr.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40010000 	.word	0x40010000
 80027bc:	40010400 	.word	0x40010400
 80027c0:	40000400 	.word	0x40000400
 80027c4:	40000800 	.word	0x40000800
 80027c8:	40000c00 	.word	0x40000c00
 80027cc:	40014000 	.word	0x40014000
 80027d0:	40001800 	.word	0x40001800

080027d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d122      	bne.n	8002830 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d11b      	bne.n	8002830 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0202 	mvn.w	r2, #2
 8002800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fac3 	bl	8002da2 <HAL_TIM_IC_CaptureCallback>
 800281c:	e005      	b.n	800282a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fab5 	bl	8002d8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fac6 	bl	8002db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b04      	cmp	r3, #4
 800283c:	d122      	bne.n	8002884 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b04      	cmp	r3, #4
 800284a:	d11b      	bne.n	8002884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0204 	mvn.w	r2, #4
 8002854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2202      	movs	r2, #2
 800285a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fa99 	bl	8002da2 <HAL_TIM_IC_CaptureCallback>
 8002870:	e005      	b.n	800287e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fa8b 	bl	8002d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fa9c 	bl	8002db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b08      	cmp	r3, #8
 8002890:	d122      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b08      	cmp	r3, #8
 800289e:	d11b      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0208 	mvn.w	r2, #8
 80028a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2204      	movs	r2, #4
 80028ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fa6f 	bl	8002da2 <HAL_TIM_IC_CaptureCallback>
 80028c4:	e005      	b.n	80028d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fa61 	bl	8002d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fa72 	bl	8002db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b10      	cmp	r3, #16
 80028e4:	d122      	bne.n	800292c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b10      	cmp	r3, #16
 80028f2:	d11b      	bne.n	800292c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0210 	mvn.w	r2, #16
 80028fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2208      	movs	r2, #8
 8002902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fa45 	bl	8002da2 <HAL_TIM_IC_CaptureCallback>
 8002918:	e005      	b.n	8002926 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fa37 	bl	8002d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 fa48 	bl	8002db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d10e      	bne.n	8002958 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b01      	cmp	r3, #1
 8002946:	d107      	bne.n	8002958 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0201 	mvn.w	r2, #1
 8002950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fa11 	bl	8002d7a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002962:	2b80      	cmp	r3, #128	; 0x80
 8002964:	d10e      	bne.n	8002984 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002970:	2b80      	cmp	r3, #128	; 0x80
 8002972:	d107      	bne.n	8002984 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800297c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fe54 	bl	800362c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298e:	2b40      	cmp	r3, #64	; 0x40
 8002990:	d10e      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d107      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fa0d 	bl	8002dca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	d10e      	bne.n	80029dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d107      	bne.n	80029dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0220 	mvn.w	r2, #32
 80029d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fe1e 	bl	8003618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e0ae      	b.n	8002b60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b0c      	cmp	r3, #12
 8002a0e:	f200 809f 	bhi.w	8002b50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a12:	a201      	add	r2, pc, #4	; (adr r2, 8002a18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a18:	08002a4d 	.word	0x08002a4d
 8002a1c:	08002b51 	.word	0x08002b51
 8002a20:	08002b51 	.word	0x08002b51
 8002a24:	08002b51 	.word	0x08002b51
 8002a28:	08002a8d 	.word	0x08002a8d
 8002a2c:	08002b51 	.word	0x08002b51
 8002a30:	08002b51 	.word	0x08002b51
 8002a34:	08002b51 	.word	0x08002b51
 8002a38:	08002acf 	.word	0x08002acf
 8002a3c:	08002b51 	.word	0x08002b51
 8002a40:	08002b51 	.word	0x08002b51
 8002a44:	08002b51 	.word	0x08002b51
 8002a48:	08002b0f 	.word	0x08002b0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 fa64 	bl	8002f20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699a      	ldr	r2, [r3, #24]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0208 	orr.w	r2, r2, #8
 8002a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0204 	bic.w	r2, r2, #4
 8002a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6999      	ldr	r1, [r3, #24]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	619a      	str	r2, [r3, #24]
      break;
 8002a8a:	e064      	b.n	8002b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fab4 	bl	8003000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699a      	ldr	r2, [r3, #24]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6999      	ldr	r1, [r3, #24]
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	021a      	lsls	r2, r3, #8
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	619a      	str	r2, [r3, #24]
      break;
 8002acc:	e043      	b.n	8002b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68b9      	ldr	r1, [r7, #8]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fb09 	bl	80030ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	69da      	ldr	r2, [r3, #28]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0208 	orr.w	r2, r2, #8
 8002ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	69da      	ldr	r2, [r3, #28]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0204 	bic.w	r2, r2, #4
 8002af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69d9      	ldr	r1, [r3, #28]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	61da      	str	r2, [r3, #28]
      break;
 8002b0c:	e023      	b.n	8002b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68b9      	ldr	r1, [r7, #8]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fb5d 	bl	80031d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69da      	ldr	r2, [r3, #28]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69da      	ldr	r2, [r3, #28]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69d9      	ldr	r1, [r3, #28]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	021a      	lsls	r2, r3, #8
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	61da      	str	r2, [r3, #28]
      break;
 8002b4e:	e002      	b.n	8002b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	75fb      	strb	r3, [r7, #23]
      break;
 8002b54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_TIM_ConfigClockSource+0x1c>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e0b4      	b.n	8002cee <HAL_TIM_ConfigClockSource+0x186>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002baa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bbc:	d03e      	beq.n	8002c3c <HAL_TIM_ConfigClockSource+0xd4>
 8002bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc2:	f200 8087 	bhi.w	8002cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bca:	f000 8086 	beq.w	8002cda <HAL_TIM_ConfigClockSource+0x172>
 8002bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd2:	d87f      	bhi.n	8002cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd4:	2b70      	cmp	r3, #112	; 0x70
 8002bd6:	d01a      	beq.n	8002c0e <HAL_TIM_ConfigClockSource+0xa6>
 8002bd8:	2b70      	cmp	r3, #112	; 0x70
 8002bda:	d87b      	bhi.n	8002cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bdc:	2b60      	cmp	r3, #96	; 0x60
 8002bde:	d050      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0x11a>
 8002be0:	2b60      	cmp	r3, #96	; 0x60
 8002be2:	d877      	bhi.n	8002cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002be4:	2b50      	cmp	r3, #80	; 0x50
 8002be6:	d03c      	beq.n	8002c62 <HAL_TIM_ConfigClockSource+0xfa>
 8002be8:	2b50      	cmp	r3, #80	; 0x50
 8002bea:	d873      	bhi.n	8002cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bec:	2b40      	cmp	r3, #64	; 0x40
 8002bee:	d058      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0x13a>
 8002bf0:	2b40      	cmp	r3, #64	; 0x40
 8002bf2:	d86f      	bhi.n	8002cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf4:	2b30      	cmp	r3, #48	; 0x30
 8002bf6:	d064      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002bf8:	2b30      	cmp	r3, #48	; 0x30
 8002bfa:	d86b      	bhi.n	8002cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d060      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	d867      	bhi.n	8002cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d05c      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c08:	2b10      	cmp	r3, #16
 8002c0a:	d05a      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c0c:	e062      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6899      	ldr	r1, [r3, #8]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f000 fc3a 	bl	8003496 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	609a      	str	r2, [r3, #8]
      break;
 8002c3a:	e04f      	b.n	8002cdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6899      	ldr	r1, [r3, #8]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f000 fc23 	bl	8003496 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c5e:	609a      	str	r2, [r3, #8]
      break;
 8002c60:	e03c      	b.n	8002cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	6859      	ldr	r1, [r3, #4]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	f000 fb97 	bl	80033a2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2150      	movs	r1, #80	; 0x50
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fbf0 	bl	8003460 <TIM_ITRx_SetConfig>
      break;
 8002c80:	e02c      	b.n	8002cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6859      	ldr	r1, [r3, #4]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f000 fbb6 	bl	8003400 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2160      	movs	r1, #96	; 0x60
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fbe0 	bl	8003460 <TIM_ITRx_SetConfig>
      break;
 8002ca0:	e01c      	b.n	8002cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f000 fb77 	bl	80033a2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2140      	movs	r1, #64	; 0x40
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fbd0 	bl	8003460 <TIM_ITRx_SetConfig>
      break;
 8002cc0:	e00c      	b.n	8002cdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4610      	mov	r0, r2
 8002cce:	f000 fbc7 	bl	8003460 <TIM_ITRx_SetConfig>
      break;
 8002cd2:	e003      	b.n	8002cdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd8:	e000      	b.n	8002cdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_SlaveConfigSynchro+0x18>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e031      	b.n	8002d72 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002d1e:	6839      	ldr	r1, [r7, #0]
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 faad 	bl	8003280 <TIM_SlaveTimer_SetConfig>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d009      	beq.n	8002d40 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e018      	b.n	8002d72 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d4e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d5e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a40      	ldr	r2, [pc, #256]	; (8002ef4 <TIM_Base_SetConfig+0x114>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d013      	beq.n	8002e20 <TIM_Base_SetConfig+0x40>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfe:	d00f      	beq.n	8002e20 <TIM_Base_SetConfig+0x40>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a3d      	ldr	r2, [pc, #244]	; (8002ef8 <TIM_Base_SetConfig+0x118>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00b      	beq.n	8002e20 <TIM_Base_SetConfig+0x40>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a3c      	ldr	r2, [pc, #240]	; (8002efc <TIM_Base_SetConfig+0x11c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d007      	beq.n	8002e20 <TIM_Base_SetConfig+0x40>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a3b      	ldr	r2, [pc, #236]	; (8002f00 <TIM_Base_SetConfig+0x120>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d003      	beq.n	8002e20 <TIM_Base_SetConfig+0x40>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a3a      	ldr	r2, [pc, #232]	; (8002f04 <TIM_Base_SetConfig+0x124>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d108      	bne.n	8002e32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a2f      	ldr	r2, [pc, #188]	; (8002ef4 <TIM_Base_SetConfig+0x114>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d02b      	beq.n	8002e92 <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e40:	d027      	beq.n	8002e92 <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a2c      	ldr	r2, [pc, #176]	; (8002ef8 <TIM_Base_SetConfig+0x118>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d023      	beq.n	8002e92 <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a2b      	ldr	r2, [pc, #172]	; (8002efc <TIM_Base_SetConfig+0x11c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d01f      	beq.n	8002e92 <TIM_Base_SetConfig+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a2a      	ldr	r2, [pc, #168]	; (8002f00 <TIM_Base_SetConfig+0x120>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d01b      	beq.n	8002e92 <TIM_Base_SetConfig+0xb2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a29      	ldr	r2, [pc, #164]	; (8002f04 <TIM_Base_SetConfig+0x124>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d017      	beq.n	8002e92 <TIM_Base_SetConfig+0xb2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a28      	ldr	r2, [pc, #160]	; (8002f08 <TIM_Base_SetConfig+0x128>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d013      	beq.n	8002e92 <TIM_Base_SetConfig+0xb2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a27      	ldr	r2, [pc, #156]	; (8002f0c <TIM_Base_SetConfig+0x12c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00f      	beq.n	8002e92 <TIM_Base_SetConfig+0xb2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a26      	ldr	r2, [pc, #152]	; (8002f10 <TIM_Base_SetConfig+0x130>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d00b      	beq.n	8002e92 <TIM_Base_SetConfig+0xb2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a25      	ldr	r2, [pc, #148]	; (8002f14 <TIM_Base_SetConfig+0x134>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d007      	beq.n	8002e92 <TIM_Base_SetConfig+0xb2>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a24      	ldr	r2, [pc, #144]	; (8002f18 <TIM_Base_SetConfig+0x138>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d003      	beq.n	8002e92 <TIM_Base_SetConfig+0xb2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a23      	ldr	r2, [pc, #140]	; (8002f1c <TIM_Base_SetConfig+0x13c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d108      	bne.n	8002ea4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <TIM_Base_SetConfig+0x114>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <TIM_Base_SetConfig+0xf8>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a0c      	ldr	r2, [pc, #48]	; (8002f04 <TIM_Base_SetConfig+0x124>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d103      	bne.n	8002ee0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	615a      	str	r2, [r3, #20]
}
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40010000 	.word	0x40010000
 8002ef8:	40000400 	.word	0x40000400
 8002efc:	40000800 	.word	0x40000800
 8002f00:	40000c00 	.word	0x40000c00
 8002f04:	40010400 	.word	0x40010400
 8002f08:	40014000 	.word	0x40014000
 8002f0c:	40014400 	.word	0x40014400
 8002f10:	40014800 	.word	0x40014800
 8002f14:	40001800 	.word	0x40001800
 8002f18:	40001c00 	.word	0x40001c00
 8002f1c:	40002000 	.word	0x40002000

08002f20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	f023 0201 	bic.w	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0303 	bic.w	r3, r3, #3
 8002f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f023 0302 	bic.w	r3, r3, #2
 8002f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a20      	ldr	r2, [pc, #128]	; (8002ff8 <TIM_OC1_SetConfig+0xd8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d003      	beq.n	8002f84 <TIM_OC1_SetConfig+0x64>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a1f      	ldr	r2, [pc, #124]	; (8002ffc <TIM_OC1_SetConfig+0xdc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d10c      	bne.n	8002f9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f023 0308 	bic.w	r3, r3, #8
 8002f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f023 0304 	bic.w	r3, r3, #4
 8002f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a15      	ldr	r2, [pc, #84]	; (8002ff8 <TIM_OC1_SetConfig+0xd8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d003      	beq.n	8002fae <TIM_OC1_SetConfig+0x8e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a14      	ldr	r2, [pc, #80]	; (8002ffc <TIM_OC1_SetConfig+0xdc>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d111      	bne.n	8002fd2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	621a      	str	r2, [r3, #32]
}
 8002fec:	bf00      	nop
 8002fee:	371c      	adds	r7, #28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40010000 	.word	0x40010000
 8002ffc:	40010400 	.word	0x40010400

08003000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f023 0210 	bic.w	r2, r3, #16
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800302e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	021b      	lsls	r3, r3, #8
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f023 0320 	bic.w	r3, r3, #32
 800304a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a22      	ldr	r2, [pc, #136]	; (80030e4 <TIM_OC2_SetConfig+0xe4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d003      	beq.n	8003068 <TIM_OC2_SetConfig+0x68>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a21      	ldr	r2, [pc, #132]	; (80030e8 <TIM_OC2_SetConfig+0xe8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d10d      	bne.n	8003084 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800306e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003082:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a17      	ldr	r2, [pc, #92]	; (80030e4 <TIM_OC2_SetConfig+0xe4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d003      	beq.n	8003094 <TIM_OC2_SetConfig+0x94>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a16      	ldr	r2, [pc, #88]	; (80030e8 <TIM_OC2_SetConfig+0xe8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d113      	bne.n	80030bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800309a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	621a      	str	r2, [r3, #32]
}
 80030d6:	bf00      	nop
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40010000 	.word	0x40010000
 80030e8:	40010400 	.word	0x40010400

080030ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a21      	ldr	r2, [pc, #132]	; (80031cc <TIM_OC3_SetConfig+0xe0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d003      	beq.n	8003152 <TIM_OC3_SetConfig+0x66>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a20      	ldr	r2, [pc, #128]	; (80031d0 <TIM_OC3_SetConfig+0xe4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d10d      	bne.n	800316e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	021b      	lsls	r3, r3, #8
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800316c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a16      	ldr	r2, [pc, #88]	; (80031cc <TIM_OC3_SetConfig+0xe0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d003      	beq.n	800317e <TIM_OC3_SetConfig+0x92>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a15      	ldr	r2, [pc, #84]	; (80031d0 <TIM_OC3_SetConfig+0xe4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d113      	bne.n	80031a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800318c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	621a      	str	r2, [r3, #32]
}
 80031c0:	bf00      	nop
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	40010000 	.word	0x40010000
 80031d0:	40010400 	.word	0x40010400

080031d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800321e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	031b      	lsls	r3, r3, #12
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a12      	ldr	r2, [pc, #72]	; (8003278 <TIM_OC4_SetConfig+0xa4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d003      	beq.n	800323c <TIM_OC4_SetConfig+0x68>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a11      	ldr	r2, [pc, #68]	; (800327c <TIM_OC4_SetConfig+0xa8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d109      	bne.n	8003250 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003242:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	019b      	lsls	r3, r3, #6
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	621a      	str	r2, [r3, #32]
}
 800326a:	bf00      	nop
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40010000 	.word	0x40010000
 800327c:	40010400 	.word	0x40010400

08003280 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f023 0307 	bic.w	r3, r3, #7
 80032ae:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b70      	cmp	r3, #112	; 0x70
 80032c8:	d01a      	beq.n	8003300 <TIM_SlaveTimer_SetConfig+0x80>
 80032ca:	2b70      	cmp	r3, #112	; 0x70
 80032cc:	d860      	bhi.n	8003390 <TIM_SlaveTimer_SetConfig+0x110>
 80032ce:	2b60      	cmp	r3, #96	; 0x60
 80032d0:	d054      	beq.n	800337c <TIM_SlaveTimer_SetConfig+0xfc>
 80032d2:	2b60      	cmp	r3, #96	; 0x60
 80032d4:	d85c      	bhi.n	8003390 <TIM_SlaveTimer_SetConfig+0x110>
 80032d6:	2b50      	cmp	r3, #80	; 0x50
 80032d8:	d046      	beq.n	8003368 <TIM_SlaveTimer_SetConfig+0xe8>
 80032da:	2b50      	cmp	r3, #80	; 0x50
 80032dc:	d858      	bhi.n	8003390 <TIM_SlaveTimer_SetConfig+0x110>
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d019      	beq.n	8003316 <TIM_SlaveTimer_SetConfig+0x96>
 80032e2:	2b40      	cmp	r3, #64	; 0x40
 80032e4:	d854      	bhi.n	8003390 <TIM_SlaveTimer_SetConfig+0x110>
 80032e6:	2b30      	cmp	r3, #48	; 0x30
 80032e8:	d055      	beq.n	8003396 <TIM_SlaveTimer_SetConfig+0x116>
 80032ea:	2b30      	cmp	r3, #48	; 0x30
 80032ec:	d850      	bhi.n	8003390 <TIM_SlaveTimer_SetConfig+0x110>
 80032ee:	2b20      	cmp	r3, #32
 80032f0:	d051      	beq.n	8003396 <TIM_SlaveTimer_SetConfig+0x116>
 80032f2:	2b20      	cmp	r3, #32
 80032f4:	d84c      	bhi.n	8003390 <TIM_SlaveTimer_SetConfig+0x110>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d04d      	beq.n	8003396 <TIM_SlaveTimer_SetConfig+0x116>
 80032fa:	2b10      	cmp	r3, #16
 80032fc:	d04b      	beq.n	8003396 <TIM_SlaveTimer_SetConfig+0x116>
 80032fe:	e047      	b.n	8003390 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68d9      	ldr	r1, [r3, #12]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f000 f8c1 	bl	8003496 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003314:	e040      	b.n	8003398 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b05      	cmp	r3, #5
 800331c:	d101      	bne.n	8003322 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e03b      	b.n	800339a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6a1a      	ldr	r2, [r3, #32]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0201 	bic.w	r2, r2, #1
 8003338:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003348:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	4313      	orrs	r3, r2
 8003354:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	621a      	str	r2, [r3, #32]
      break;
 8003366:	e017      	b.n	8003398 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	6899      	ldr	r1, [r3, #8]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	461a      	mov	r2, r3
 8003376:	f000 f814 	bl	80033a2 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800337a:	e00d      	b.n	8003398 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	6899      	ldr	r1, [r3, #8]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	461a      	mov	r2, r3
 800338a:	f000 f839 	bl	8003400 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800338e:	e003      	b.n	8003398 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	75fb      	strb	r3, [r7, #23]
      break;
 8003394:	e000      	b.n	8003398 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003396:	bf00      	nop
  }

  return status;
 8003398:	7dfb      	ldrb	r3, [r7, #23]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b087      	sub	sp, #28
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	f023 0201 	bic.w	r2, r3, #1
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 030a 	bic.w	r3, r3, #10
 80033de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	621a      	str	r2, [r3, #32]
}
 80033f4:	bf00      	nop
 80033f6:	371c      	adds	r7, #28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	f023 0210 	bic.w	r2, r3, #16
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800342a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	031b      	lsls	r3, r3, #12
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	4313      	orrs	r3, r2
 8003434:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800343c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	621a      	str	r2, [r3, #32]
}
 8003454:	bf00      	nop
 8003456:	371c      	adds	r7, #28
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003476:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	f043 0307 	orr.w	r3, r3, #7
 8003482:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	609a      	str	r2, [r3, #8]
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003496:	b480      	push	{r7}
 8003498:	b087      	sub	sp, #28
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	021a      	lsls	r2, r3, #8
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4313      	orrs	r3, r2
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	609a      	str	r2, [r3, #8]
}
 80034ca:	bf00      	nop
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b087      	sub	sp, #28
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	2201      	movs	r2, #1
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a1a      	ldr	r2, [r3, #32]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	401a      	ands	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a1a      	ldr	r2, [r3, #32]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	fa01 f303 	lsl.w	r3, r1, r3
 800350e:	431a      	orrs	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	621a      	str	r2, [r3, #32]
}
 8003514:	bf00      	nop
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003534:	2302      	movs	r3, #2
 8003536:	e05a      	b.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a21      	ldr	r2, [pc, #132]	; (80035fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d022      	beq.n	80035c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003584:	d01d      	beq.n	80035c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d018      	beq.n	80035c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1b      	ldr	r2, [pc, #108]	; (8003604 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1a      	ldr	r2, [pc, #104]	; (8003608 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00e      	beq.n	80035c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a18      	ldr	r2, [pc, #96]	; (800360c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d009      	beq.n	80035c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a17      	ldr	r2, [pc, #92]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d004      	beq.n	80035c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a15      	ldr	r2, [pc, #84]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d10c      	bne.n	80035dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40010000 	.word	0x40010000
 8003600:	40000400 	.word	0x40000400
 8003604:	40000800 	.word	0x40000800
 8003608:	40000c00 	.word	0x40000c00
 800360c:	40010400 	.word	0x40010400
 8003610:	40014000 	.word	0x40014000
 8003614:	40001800 	.word	0x40001800

08003618 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e03f      	b.n	80036d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd fcda 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	; 0x24
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fddb 	bl	8004240 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b08a      	sub	sp, #40	; 0x28
 80036de:	af02      	add	r7, sp, #8
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	603b      	str	r3, [r7, #0]
 80036e6:	4613      	mov	r3, r2
 80036e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d17c      	bne.n	80037f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_UART_Transmit+0x2c>
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e075      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UART_Transmit+0x3e>
 8003714:	2302      	movs	r3, #2
 8003716:	e06e      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2221      	movs	r2, #33	; 0x21
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800372e:	f7fd fe45 	bl	80013bc <HAL_GetTick>
 8003732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	88fa      	ldrh	r2, [r7, #6]
 8003738:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	88fa      	ldrh	r2, [r7, #6]
 800373e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003748:	d108      	bne.n	800375c <HAL_UART_Transmit+0x82>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d104      	bne.n	800375c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	e003      	b.n	8003764 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003760:	2300      	movs	r3, #0
 8003762:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800376c:	e02a      	b.n	80037c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2200      	movs	r2, #0
 8003776:	2180      	movs	r1, #128	; 0x80
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fb1f 	bl	8003dbc <UART_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e036      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10b      	bne.n	80037a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800379c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	3302      	adds	r3, #2
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	e007      	b.n	80037b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	781a      	ldrb	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	3301      	adds	r3, #1
 80037b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1cf      	bne.n	800376e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2200      	movs	r2, #0
 80037d6:	2140      	movs	r1, #64	; 0x40
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 faef 	bl	8003dbc <UART_WaitOnFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e006      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	e000      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
  }
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	4613      	mov	r3, r2
 800380a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b20      	cmp	r3, #32
 8003816:	d11d      	bne.n	8003854 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_UART_Receive_IT+0x26>
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e016      	b.n	8003856 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_UART_Receive_IT+0x38>
 8003832:	2302      	movs	r3, #2
 8003834:	e00f      	b.n	8003856 <HAL_UART_Receive_IT+0x58>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	461a      	mov	r2, r3
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fb24 	bl	8003e98 <UART_Start_Receive_IT>
 8003850:	4603      	mov	r3, r0
 8003852:	e000      	b.n	8003856 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003854:	2302      	movs	r3, #2
  }
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b0ba      	sub	sp, #232	; 0xe8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800388c:	2300      	movs	r3, #0
 800388e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800389e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10f      	bne.n	80038c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_UART_IRQHandler+0x66>
 80038b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fc03 	bl	80040ca <UART_Receive_IT>
      return;
 80038c4:	e256      	b.n	8003d74 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 80de 	beq.w	8003a8c <HAL_UART_IRQHandler+0x22c>
 80038d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 80d1 	beq.w	8003a8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00b      	beq.n	800390e <HAL_UART_IRQHandler+0xae>
 80038f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f043 0201 	orr.w	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800390e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <HAL_UART_IRQHandler+0xd2>
 800391a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f043 0202 	orr.w	r2, r3, #2
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00b      	beq.n	8003956 <HAL_UART_IRQHandler+0xf6>
 800393e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f043 0204 	orr.w	r2, r3, #4
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d011      	beq.n	8003986 <HAL_UART_IRQHandler+0x126>
 8003962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d105      	bne.n	800397a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800396e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f043 0208 	orr.w	r2, r3, #8
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 81ed 	beq.w	8003d6a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_UART_IRQHandler+0x14e>
 800399c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fb8e 	bl	80040ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b8:	2b40      	cmp	r3, #64	; 0x40
 80039ba:	bf0c      	ite	eq
 80039bc:	2301      	moveq	r3, #1
 80039be:	2300      	movne	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d103      	bne.n	80039da <HAL_UART_IRQHandler+0x17a>
 80039d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d04f      	beq.n	8003a7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fa96 	bl	8003f0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ea:	2b40      	cmp	r3, #64	; 0x40
 80039ec:	d141      	bne.n	8003a72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3314      	adds	r3, #20
 80039f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3314      	adds	r3, #20
 8003a16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1d9      	bne.n	80039ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d013      	beq.n	8003a6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	4a7d      	ldr	r2, [pc, #500]	; (8003c3c <HAL_UART_IRQHandler+0x3dc>)
 8003a48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fd fe65 	bl	800171e <HAL_DMA_Abort_IT>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d016      	beq.n	8003a88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a64:	4610      	mov	r0, r2
 8003a66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a68:	e00e      	b.n	8003a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f990 	bl	8003d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a70:	e00a      	b.n	8003a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f98c 	bl	8003d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a78:	e006      	b.n	8003a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f988 	bl	8003d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a86:	e170      	b.n	8003d6a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a88:	bf00      	nop
    return;
 8003a8a:	e16e      	b.n	8003d6a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	f040 814a 	bne.w	8003d2a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8143 	beq.w	8003d2a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 813c 	beq.w	8003d2a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad2:	2b40      	cmp	r3, #64	; 0x40
 8003ad4:	f040 80b4 	bne.w	8003c40 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ae4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8140 	beq.w	8003d6e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003af6:	429a      	cmp	r2, r3
 8003af8:	f080 8139 	bcs.w	8003d6e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b0e:	f000 8088 	beq.w	8003c22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	330c      	adds	r3, #12
 8003b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b20:	e853 3f00 	ldrex	r3, [r3]
 8003b24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	330c      	adds	r3, #12
 8003b3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b4e:	e841 2300 	strex	r3, r2, [r1]
 8003b52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1d9      	bne.n	8003b12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3314      	adds	r3, #20
 8003b64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b70:	f023 0301 	bic.w	r3, r3, #1
 8003b74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3314      	adds	r3, #20
 8003b7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b8e:	e841 2300 	strex	r3, r2, [r1]
 8003b92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e1      	bne.n	8003b5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3314      	adds	r3, #20
 8003ba0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ba4:	e853 3f00 	ldrex	r3, [r3]
 8003ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3314      	adds	r3, #20
 8003bba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003bbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003bc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bc6:	e841 2300 	strex	r3, r2, [r1]
 8003bca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e3      	bne.n	8003b9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	330c      	adds	r3, #12
 8003be6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bea:	e853 3f00 	ldrex	r3, [r3]
 8003bee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bf2:	f023 0310 	bic.w	r3, r3, #16
 8003bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	330c      	adds	r3, #12
 8003c00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c04:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c0c:	e841 2300 	strex	r3, r2, [r1]
 8003c10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1e3      	bne.n	8003be0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fd fd0e 	bl	800163e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f8b6 	bl	8003da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c38:	e099      	b.n	8003d6e <HAL_UART_IRQHandler+0x50e>
 8003c3a:	bf00      	nop
 8003c3c:	08003fd3 	.word	0x08003fd3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 808b 	beq.w	8003d72 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003c5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8086 	beq.w	8003d72 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c70:	e853 3f00 	ldrex	r3, [r3]
 8003c74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	330c      	adds	r3, #12
 8003c86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c8a:	647a      	str	r2, [r7, #68]	; 0x44
 8003c8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e3      	bne.n	8003c66 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3314      	adds	r3, #20
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	623b      	str	r3, [r7, #32]
   return(result);
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3314      	adds	r3, #20
 8003cbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cc2:	633a      	str	r2, [r7, #48]	; 0x30
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e3      	bne.n	8003c9e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	330c      	adds	r3, #12
 8003cea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0310 	bic.w	r3, r3, #16
 8003cfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	330c      	adds	r3, #12
 8003d04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d08:	61fa      	str	r2, [r7, #28]
 8003d0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0c:	69b9      	ldr	r1, [r7, #24]
 8003d0e:	69fa      	ldr	r2, [r7, #28]
 8003d10:	e841 2300 	strex	r3, r2, [r1]
 8003d14:	617b      	str	r3, [r7, #20]
   return(result);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e3      	bne.n	8003ce4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d20:	4619      	mov	r1, r3
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f83e 	bl	8003da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d28:	e023      	b.n	8003d72 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HAL_UART_IRQHandler+0x4ea>
 8003d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f959 	bl	8003ffa <UART_Transmit_IT>
    return;
 8003d48:	e014      	b.n	8003d74 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00e      	beq.n	8003d74 <HAL_UART_IRQHandler+0x514>
 8003d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d008      	beq.n	8003d74 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f999 	bl	800409a <UART_EndTransmit_IT>
    return;
 8003d68:	e004      	b.n	8003d74 <HAL_UART_IRQHandler+0x514>
    return;
 8003d6a:	bf00      	nop
 8003d6c:	e002      	b.n	8003d74 <HAL_UART_IRQHandler+0x514>
      return;
 8003d6e:	bf00      	nop
 8003d70:	e000      	b.n	8003d74 <HAL_UART_IRQHandler+0x514>
      return;
 8003d72:	bf00      	nop
  }
}
 8003d74:	37e8      	adds	r7, #232	; 0xe8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop

08003d7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b090      	sub	sp, #64	; 0x40
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dcc:	e050      	b.n	8003e70 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d04c      	beq.n	8003e70 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <UART_WaitOnFlagUntilTimeout+0x30>
 8003ddc:	f7fd faee 	bl	80013bc <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d241      	bcs.n	8003e70 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	330c      	adds	r3, #12
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	330c      	adds	r3, #12
 8003e0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e0c:	637a      	str	r2, [r7, #52]	; 0x34
 8003e0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e5      	bne.n	8003dec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3314      	adds	r3, #20
 8003e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3314      	adds	r3, #20
 8003e3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e40:	623a      	str	r2, [r7, #32]
 8003e42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	69f9      	ldr	r1, [r7, #28]
 8003e46:	6a3a      	ldr	r2, [r7, #32]
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e5      	bne.n	8003e20 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e00f      	b.n	8003e90 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d09f      	beq.n	8003dce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3740      	adds	r7, #64	; 0x40
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	88fa      	ldrh	r2, [r7, #6]
 8003eb0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	88fa      	ldrh	r2, [r7, #6]
 8003eb6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2222      	movs	r2, #34	; 0x22
 8003ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003edc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0220 	orr.w	r2, r2, #32
 8003efc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b095      	sub	sp, #84	; 0x54
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	330c      	adds	r3, #12
 8003f1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1e:	e853 3f00 	ldrex	r3, [r3]
 8003f22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f34:	643a      	str	r2, [r7, #64]	; 0x40
 8003f36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f3c:	e841 2300 	strex	r3, r2, [r1]
 8003f40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1e5      	bne.n	8003f14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f023 0301 	bic.w	r3, r3, #1
 8003f5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3314      	adds	r3, #20
 8003f66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e5      	bne.n	8003f48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d119      	bne.n	8003fb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	330c      	adds	r3, #12
 8003f8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f023 0310 	bic.w	r3, r3, #16
 8003f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	330c      	adds	r3, #12
 8003fa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fa4:	61ba      	str	r2, [r7, #24]
 8003fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	6979      	ldr	r1, [r7, #20]
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e5      	bne.n	8003f84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fc6:	bf00      	nop
 8003fc8:	3754      	adds	r7, #84	; 0x54
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7ff fecf 	bl	8003d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b21      	cmp	r3, #33	; 0x21
 800400c:	d13e      	bne.n	800408c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004016:	d114      	bne.n	8004042 <UART_Transmit_IT+0x48>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d110      	bne.n	8004042 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004034:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	1c9a      	adds	r2, r3, #2
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	621a      	str	r2, [r3, #32]
 8004040:	e008      	b.n	8004054 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	1c59      	adds	r1, r3, #1
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6211      	str	r1, [r2, #32]
 800404c:	781a      	ldrb	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29b      	uxth	r3, r3
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	4619      	mov	r1, r3
 8004062:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10f      	bne.n	8004088 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004076:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004086:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff fe5e 	bl	8003d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b08c      	sub	sp, #48	; 0x30
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b22      	cmp	r3, #34	; 0x22
 80040dc:	f040 80ab 	bne.w	8004236 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e8:	d117      	bne.n	800411a <UART_Receive_IT+0x50>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d113      	bne.n	800411a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	b29b      	uxth	r3, r3
 8004104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004108:	b29a      	uxth	r2, r3
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	1c9a      	adds	r2, r3, #2
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	; 0x28
 8004118:	e026      	b.n	8004168 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004120:	2300      	movs	r3, #0
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412c:	d007      	beq.n	800413e <UART_Receive_IT+0x74>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10a      	bne.n	800414c <UART_Receive_IT+0x82>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	b2da      	uxtb	r2, r3
 8004146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	e008      	b.n	800415e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004158:	b2da      	uxtb	r2, r3
 800415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b29b      	uxth	r3, r3
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4619      	mov	r1, r3
 8004176:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004178:	2b00      	cmp	r3, #0
 800417a:	d15a      	bne.n	8004232 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0220 	bic.w	r2, r2, #32
 800418a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800419a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695a      	ldr	r2, [r3, #20]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d135      	bne.n	8004228 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	330c      	adds	r3, #12
 80041c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	613b      	str	r3, [r7, #16]
   return(result);
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f023 0310 	bic.w	r3, r3, #16
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	330c      	adds	r3, #12
 80041e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e2:	623a      	str	r2, [r7, #32]
 80041e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e6:	69f9      	ldr	r1, [r7, #28]
 80041e8:	6a3a      	ldr	r2, [r7, #32]
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1e5      	bne.n	80041c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b10      	cmp	r3, #16
 8004202:	d10a      	bne.n	800421a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800421e:	4619      	mov	r1, r3
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff fdbf 	bl	8003da4 <HAL_UARTEx_RxEventCallback>
 8004226:	e002      	b.n	800422e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fae5 	bl	80047f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	e002      	b.n	8004238 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	e000      	b.n	8004238 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004236:	2302      	movs	r3, #2
  }
}
 8004238:	4618      	mov	r0, r3
 800423a:	3730      	adds	r7, #48	; 0x30
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004244:	b09f      	sub	sp, #124	; 0x7c
 8004246:	af00      	add	r7, sp, #0
 8004248:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800424a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004256:	68d9      	ldr	r1, [r3, #12]
 8004258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	ea40 0301 	orr.w	r3, r0, r1
 8004260:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	431a      	orrs	r2, r3
 800426c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	431a      	orrs	r2, r3
 8004272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	4313      	orrs	r3, r2
 8004278:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800427a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004284:	f021 010c 	bic.w	r1, r1, #12
 8004288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800428e:	430b      	orrs	r3, r1
 8004290:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800429c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429e:	6999      	ldr	r1, [r3, #24]
 80042a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	ea40 0301 	orr.w	r3, r0, r1
 80042a8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4bc5      	ldr	r3, [pc, #788]	; (80045c4 <UART_SetConfig+0x384>)
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d004      	beq.n	80042be <UART_SetConfig+0x7e>
 80042b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4bc3      	ldr	r3, [pc, #780]	; (80045c8 <UART_SetConfig+0x388>)
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d103      	bne.n	80042c6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042be:	f7fe f89b 	bl	80023f8 <HAL_RCC_GetPCLK2Freq>
 80042c2:	6778      	str	r0, [r7, #116]	; 0x74
 80042c4:	e002      	b.n	80042cc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042c6:	f7fe f883 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 80042ca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d4:	f040 80b6 	bne.w	8004444 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042da:	461c      	mov	r4, r3
 80042dc:	f04f 0500 	mov.w	r5, #0
 80042e0:	4622      	mov	r2, r4
 80042e2:	462b      	mov	r3, r5
 80042e4:	1891      	adds	r1, r2, r2
 80042e6:	6439      	str	r1, [r7, #64]	; 0x40
 80042e8:	415b      	adcs	r3, r3
 80042ea:	647b      	str	r3, [r7, #68]	; 0x44
 80042ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042f0:	1912      	adds	r2, r2, r4
 80042f2:	eb45 0303 	adc.w	r3, r5, r3
 80042f6:	f04f 0000 	mov.w	r0, #0
 80042fa:	f04f 0100 	mov.w	r1, #0
 80042fe:	00d9      	lsls	r1, r3, #3
 8004300:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004304:	00d0      	lsls	r0, r2, #3
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	1911      	adds	r1, r2, r4
 800430c:	6639      	str	r1, [r7, #96]	; 0x60
 800430e:	416b      	adcs	r3, r5
 8004310:	667b      	str	r3, [r7, #100]	; 0x64
 8004312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	461a      	mov	r2, r3
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	1891      	adds	r1, r2, r2
 800431e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004320:	415b      	adcs	r3, r3
 8004322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004324:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004328:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800432c:	f7fb ff5e 	bl	80001ec <__aeabi_uldivmod>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4ba5      	ldr	r3, [pc, #660]	; (80045cc <UART_SetConfig+0x38c>)
 8004336:	fba3 2302 	umull	r2, r3, r3, r2
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	011e      	lsls	r6, r3, #4
 800433e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004340:	461c      	mov	r4, r3
 8004342:	f04f 0500 	mov.w	r5, #0
 8004346:	4622      	mov	r2, r4
 8004348:	462b      	mov	r3, r5
 800434a:	1891      	adds	r1, r2, r2
 800434c:	6339      	str	r1, [r7, #48]	; 0x30
 800434e:	415b      	adcs	r3, r3
 8004350:	637b      	str	r3, [r7, #52]	; 0x34
 8004352:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004356:	1912      	adds	r2, r2, r4
 8004358:	eb45 0303 	adc.w	r3, r5, r3
 800435c:	f04f 0000 	mov.w	r0, #0
 8004360:	f04f 0100 	mov.w	r1, #0
 8004364:	00d9      	lsls	r1, r3, #3
 8004366:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800436a:	00d0      	lsls	r0, r2, #3
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	1911      	adds	r1, r2, r4
 8004372:	65b9      	str	r1, [r7, #88]	; 0x58
 8004374:	416b      	adcs	r3, r5
 8004376:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	461a      	mov	r2, r3
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	1891      	adds	r1, r2, r2
 8004384:	62b9      	str	r1, [r7, #40]	; 0x28
 8004386:	415b      	adcs	r3, r3
 8004388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800438a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800438e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004392:	f7fb ff2b 	bl	80001ec <__aeabi_uldivmod>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4b8c      	ldr	r3, [pc, #560]	; (80045cc <UART_SetConfig+0x38c>)
 800439c:	fba3 1302 	umull	r1, r3, r3, r2
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	2164      	movs	r1, #100	; 0x64
 80043a4:	fb01 f303 	mul.w	r3, r1, r3
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	3332      	adds	r3, #50	; 0x32
 80043ae:	4a87      	ldr	r2, [pc, #540]	; (80045cc <UART_SetConfig+0x38c>)
 80043b0:	fba2 2303 	umull	r2, r3, r2, r3
 80043b4:	095b      	lsrs	r3, r3, #5
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043bc:	441e      	add	r6, r3
 80043be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c0:	4618      	mov	r0, r3
 80043c2:	f04f 0100 	mov.w	r1, #0
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	1894      	adds	r4, r2, r2
 80043cc:	623c      	str	r4, [r7, #32]
 80043ce:	415b      	adcs	r3, r3
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
 80043d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043d6:	1812      	adds	r2, r2, r0
 80043d8:	eb41 0303 	adc.w	r3, r1, r3
 80043dc:	f04f 0400 	mov.w	r4, #0
 80043e0:	f04f 0500 	mov.w	r5, #0
 80043e4:	00dd      	lsls	r5, r3, #3
 80043e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043ea:	00d4      	lsls	r4, r2, #3
 80043ec:	4622      	mov	r2, r4
 80043ee:	462b      	mov	r3, r5
 80043f0:	1814      	adds	r4, r2, r0
 80043f2:	653c      	str	r4, [r7, #80]	; 0x50
 80043f4:	414b      	adcs	r3, r1
 80043f6:	657b      	str	r3, [r7, #84]	; 0x54
 80043f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	461a      	mov	r2, r3
 80043fe:	f04f 0300 	mov.w	r3, #0
 8004402:	1891      	adds	r1, r2, r2
 8004404:	61b9      	str	r1, [r7, #24]
 8004406:	415b      	adcs	r3, r3
 8004408:	61fb      	str	r3, [r7, #28]
 800440a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800440e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004412:	f7fb feeb 	bl	80001ec <__aeabi_uldivmod>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4b6c      	ldr	r3, [pc, #432]	; (80045cc <UART_SetConfig+0x38c>)
 800441c:	fba3 1302 	umull	r1, r3, r3, r2
 8004420:	095b      	lsrs	r3, r3, #5
 8004422:	2164      	movs	r1, #100	; 0x64
 8004424:	fb01 f303 	mul.w	r3, r1, r3
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	3332      	adds	r3, #50	; 0x32
 800442e:	4a67      	ldr	r2, [pc, #412]	; (80045cc <UART_SetConfig+0x38c>)
 8004430:	fba2 2303 	umull	r2, r3, r2, r3
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	f003 0207 	and.w	r2, r3, #7
 800443a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4432      	add	r2, r6
 8004440:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004442:	e0b9      	b.n	80045b8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004446:	461c      	mov	r4, r3
 8004448:	f04f 0500 	mov.w	r5, #0
 800444c:	4622      	mov	r2, r4
 800444e:	462b      	mov	r3, r5
 8004450:	1891      	adds	r1, r2, r2
 8004452:	6139      	str	r1, [r7, #16]
 8004454:	415b      	adcs	r3, r3
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800445c:	1912      	adds	r2, r2, r4
 800445e:	eb45 0303 	adc.w	r3, r5, r3
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f04f 0100 	mov.w	r1, #0
 800446a:	00d9      	lsls	r1, r3, #3
 800446c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004470:	00d0      	lsls	r0, r2, #3
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	eb12 0804 	adds.w	r8, r2, r4
 800447a:	eb43 0905 	adc.w	r9, r3, r5
 800447e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	4618      	mov	r0, r3
 8004484:	f04f 0100 	mov.w	r1, #0
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	008b      	lsls	r3, r1, #2
 8004492:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004496:	0082      	lsls	r2, r0, #2
 8004498:	4640      	mov	r0, r8
 800449a:	4649      	mov	r1, r9
 800449c:	f7fb fea6 	bl	80001ec <__aeabi_uldivmod>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4b49      	ldr	r3, [pc, #292]	; (80045cc <UART_SetConfig+0x38c>)
 80044a6:	fba3 2302 	umull	r2, r3, r3, r2
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	011e      	lsls	r6, r3, #4
 80044ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b0:	4618      	mov	r0, r3
 80044b2:	f04f 0100 	mov.w	r1, #0
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	1894      	adds	r4, r2, r2
 80044bc:	60bc      	str	r4, [r7, #8]
 80044be:	415b      	adcs	r3, r3
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044c6:	1812      	adds	r2, r2, r0
 80044c8:	eb41 0303 	adc.w	r3, r1, r3
 80044cc:	f04f 0400 	mov.w	r4, #0
 80044d0:	f04f 0500 	mov.w	r5, #0
 80044d4:	00dd      	lsls	r5, r3, #3
 80044d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044da:	00d4      	lsls	r4, r2, #3
 80044dc:	4622      	mov	r2, r4
 80044de:	462b      	mov	r3, r5
 80044e0:	1814      	adds	r4, r2, r0
 80044e2:	64bc      	str	r4, [r7, #72]	; 0x48
 80044e4:	414b      	adcs	r3, r1
 80044e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f04f 0100 	mov.w	r1, #0
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	008b      	lsls	r3, r1, #2
 80044fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004500:	0082      	lsls	r2, r0, #2
 8004502:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004506:	f7fb fe71 	bl	80001ec <__aeabi_uldivmod>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4b2f      	ldr	r3, [pc, #188]	; (80045cc <UART_SetConfig+0x38c>)
 8004510:	fba3 1302 	umull	r1, r3, r3, r2
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	2164      	movs	r1, #100	; 0x64
 8004518:	fb01 f303 	mul.w	r3, r1, r3
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	3332      	adds	r3, #50	; 0x32
 8004522:	4a2a      	ldr	r2, [pc, #168]	; (80045cc <UART_SetConfig+0x38c>)
 8004524:	fba2 2303 	umull	r2, r3, r2, r3
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800452e:	441e      	add	r6, r3
 8004530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004532:	4618      	mov	r0, r3
 8004534:	f04f 0100 	mov.w	r1, #0
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	1894      	adds	r4, r2, r2
 800453e:	603c      	str	r4, [r7, #0]
 8004540:	415b      	adcs	r3, r3
 8004542:	607b      	str	r3, [r7, #4]
 8004544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004548:	1812      	adds	r2, r2, r0
 800454a:	eb41 0303 	adc.w	r3, r1, r3
 800454e:	f04f 0400 	mov.w	r4, #0
 8004552:	f04f 0500 	mov.w	r5, #0
 8004556:	00dd      	lsls	r5, r3, #3
 8004558:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800455c:	00d4      	lsls	r4, r2, #3
 800455e:	4622      	mov	r2, r4
 8004560:	462b      	mov	r3, r5
 8004562:	eb12 0a00 	adds.w	sl, r2, r0
 8004566:	eb43 0b01 	adc.w	fp, r3, r1
 800456a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	4618      	mov	r0, r3
 8004570:	f04f 0100 	mov.w	r1, #0
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	008b      	lsls	r3, r1, #2
 800457e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004582:	0082      	lsls	r2, r0, #2
 8004584:	4650      	mov	r0, sl
 8004586:	4659      	mov	r1, fp
 8004588:	f7fb fe30 	bl	80001ec <__aeabi_uldivmod>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4b0e      	ldr	r3, [pc, #56]	; (80045cc <UART_SetConfig+0x38c>)
 8004592:	fba3 1302 	umull	r1, r3, r3, r2
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	2164      	movs	r1, #100	; 0x64
 800459a:	fb01 f303 	mul.w	r3, r1, r3
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	3332      	adds	r3, #50	; 0x32
 80045a4:	4a09      	ldr	r2, [pc, #36]	; (80045cc <UART_SetConfig+0x38c>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	f003 020f 	and.w	r2, r3, #15
 80045b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4432      	add	r2, r6
 80045b6:	609a      	str	r2, [r3, #8]
}
 80045b8:	bf00      	nop
 80045ba:	377c      	adds	r7, #124	; 0x7c
 80045bc:	46bd      	mov	sp, r7
 80045be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045c2:	bf00      	nop
 80045c4:	40011000 	.word	0x40011000
 80045c8:	40011400 	.word	0x40011400
 80045cc:	51eb851f 	.word	0x51eb851f

080045d0 <init_powderMachine>:
								{PD05_heat_EN_Pin, PD05_heat_IN1_Pin, PD05_heat_IN2_Pin},
								{CF01_heat_EN_Pin, CF01_heat_IN1_Pin, CF01_heat_IN2_Pin}};
/*********************************** Pin configuration ***********************************/

void init_powderMachine(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
	// powder motor direction must be fixed!
	// init DCpowder motor direction & disable motor
	for(uint8_t i = 0; i<sizeof(PD_DCpowder_GPIO_Port) / sizeof(PD_DCpowder_GPIO_Port[0]); i++){
 80045d6:	2300      	movs	r3, #0
 80045d8:	71fb      	strb	r3, [r7, #7]
 80045da:	e045      	b.n	8004668 <init_powderMachine+0x98>
		HAL_GPIO_WritePin(PD_DCpowder_GPIO_Port[i][IN1], PD_DCpowder_Pin[i][IN1], GPIO_PIN_RESET);
 80045dc:	79fa      	ldrb	r2, [r7, #7]
 80045de:	497d      	ldr	r1, [pc, #500]	; (80047d4 <init_powderMachine+0x204>)
 80045e0:	4613      	mov	r3, r2
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	3304      	adds	r3, #4
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	79fa      	ldrb	r2, [r7, #7]
 80045f0:	4979      	ldr	r1, [pc, #484]	; (80047d8 <init_powderMachine+0x208>)
 80045f2:	4613      	mov	r3, r2
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	3304      	adds	r3, #4
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	b29b      	uxth	r3, r3
 8004602:	2200      	movs	r2, #0
 8004604:	4619      	mov	r1, r3
 8004606:	f7fd fa59 	bl	8001abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCpowder_GPIO_Port[i][IN2], PD_DCpowder_Pin[i][IN2], GPIO_PIN_SET);
 800460a:	79fa      	ldrb	r2, [r7, #7]
 800460c:	4971      	ldr	r1, [pc, #452]	; (80047d4 <init_powderMachine+0x204>)
 800460e:	4613      	mov	r3, r2
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	3308      	adds	r3, #8
 800461a:	6818      	ldr	r0, [r3, #0]
 800461c:	79fa      	ldrb	r2, [r7, #7]
 800461e:	496e      	ldr	r1, [pc, #440]	; (80047d8 <init_powderMachine+0x208>)
 8004620:	4613      	mov	r3, r2
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	3308      	adds	r3, #8
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	b29b      	uxth	r3, r3
 8004630:	2201      	movs	r2, #1
 8004632:	4619      	mov	r1, r3
 8004634:	f7fd fa42 	bl	8001abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCpowder_GPIO_Port[i][EN], PD_DCpowder_Pin[i][EN], GPIO_PIN_RESET);
 8004638:	79fa      	ldrb	r2, [r7, #7]
 800463a:	4966      	ldr	r1, [pc, #408]	; (80047d4 <init_powderMachine+0x204>)
 800463c:	4613      	mov	r3, r2
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	4413      	add	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	79fa      	ldrb	r2, [r7, #7]
 800464a:	4963      	ldr	r1, [pc, #396]	; (80047d8 <init_powderMachine+0x208>)
 800464c:	4613      	mov	r3, r2
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	b29b      	uxth	r3, r3
 800465a:	2200      	movs	r2, #0
 800465c:	4619      	mov	r1, r3
 800465e:	f7fd fa2d 	bl	8001abc <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i<sizeof(PD_DCpowder_GPIO_Port) / sizeof(PD_DCpowder_GPIO_Port[0]); i++){
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	3301      	adds	r3, #1
 8004666:	71fb      	strb	r3, [r7, #7]
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	2b04      	cmp	r3, #4
 800466c:	d9b6      	bls.n	80045dc <init_powderMachine+0xc>
	}

	// init DCmix motor direction & disable motor
	for(uint8_t i = 0; i<sizeof(PD_DCmix_GPIO_Port) / sizeof(PD_DCmix_GPIO_Port[0]); i++){
 800466e:	2300      	movs	r3, #0
 8004670:	71bb      	strb	r3, [r7, #6]
 8004672:	e045      	b.n	8004700 <init_powderMachine+0x130>
		HAL_GPIO_WritePin(PD_DCmix_GPIO_Port[i][IN1], PD_DCmix_Pin[i][IN1], GPIO_PIN_SET);
 8004674:	79ba      	ldrb	r2, [r7, #6]
 8004676:	4959      	ldr	r1, [pc, #356]	; (80047dc <init_powderMachine+0x20c>)
 8004678:	4613      	mov	r3, r2
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	3304      	adds	r3, #4
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	79ba      	ldrb	r2, [r7, #6]
 8004688:	4955      	ldr	r1, [pc, #340]	; (80047e0 <init_powderMachine+0x210>)
 800468a:	4613      	mov	r3, r2
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	4413      	add	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	3304      	adds	r3, #4
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	b29b      	uxth	r3, r3
 800469a:	2201      	movs	r2, #1
 800469c:	4619      	mov	r1, r3
 800469e:	f7fd fa0d 	bl	8001abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCmix_GPIO_Port[i][IN2], PD_DCmix_Pin[i][IN2], GPIO_PIN_RESET);
 80046a2:	79ba      	ldrb	r2, [r7, #6]
 80046a4:	494d      	ldr	r1, [pc, #308]	; (80047dc <init_powderMachine+0x20c>)
 80046a6:	4613      	mov	r3, r2
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	3308      	adds	r3, #8
 80046b2:	6818      	ldr	r0, [r3, #0]
 80046b4:	79ba      	ldrb	r2, [r7, #6]
 80046b6:	494a      	ldr	r1, [pc, #296]	; (80047e0 <init_powderMachine+0x210>)
 80046b8:	4613      	mov	r3, r2
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	4413      	add	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	3308      	adds	r3, #8
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2200      	movs	r2, #0
 80046ca:	4619      	mov	r1, r3
 80046cc:	f7fd f9f6 	bl	8001abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCmix_GPIO_Port[i][EN], PD_DCmix_Pin[i][EN], GPIO_PIN_RESET);
 80046d0:	79ba      	ldrb	r2, [r7, #6]
 80046d2:	4942      	ldr	r1, [pc, #264]	; (80047dc <init_powderMachine+0x20c>)
 80046d4:	4613      	mov	r3, r2
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	79ba      	ldrb	r2, [r7, #6]
 80046e2:	493f      	ldr	r1, [pc, #252]	; (80047e0 <init_powderMachine+0x210>)
 80046e4:	4613      	mov	r3, r2
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2200      	movs	r2, #0
 80046f4:	4619      	mov	r1, r3
 80046f6:	f7fd f9e1 	bl	8001abc <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i<sizeof(PD_DCmix_GPIO_Port) / sizeof(PD_DCmix_GPIO_Port[0]); i++){
 80046fa:	79bb      	ldrb	r3, [r7, #6]
 80046fc:	3301      	adds	r3, #1
 80046fe:	71bb      	strb	r3, [r7, #6]
 8004700:	79bb      	ldrb	r3, [r7, #6]
 8004702:	2b04      	cmp	r3, #4
 8004704:	d9b6      	bls.n	8004674 <init_powderMachine+0xa4>
	}

	// init heater motor direction
	for(uint8_t i = 0; i<sizeof(heat_GPIO_Port) / sizeof(heat_GPIO_Port[0]); i++){
 8004706:	2300      	movs	r3, #0
 8004708:	717b      	strb	r3, [r7, #5]
 800470a:	e030      	b.n	800476e <init_powderMachine+0x19e>
		HAL_GPIO_WritePin(heat_GPIO_Port[i][IN1], heat_Pin[i][IN1], GPIO_PIN_SET);
 800470c:	797a      	ldrb	r2, [r7, #5]
 800470e:	4935      	ldr	r1, [pc, #212]	; (80047e4 <init_powderMachine+0x214>)
 8004710:	4613      	mov	r3, r2
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	3304      	adds	r3, #4
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	797a      	ldrb	r2, [r7, #5]
 8004720:	4931      	ldr	r1, [pc, #196]	; (80047e8 <init_powderMachine+0x218>)
 8004722:	4613      	mov	r3, r2
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	3304      	adds	r3, #4
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	b29b      	uxth	r3, r3
 8004732:	2201      	movs	r2, #1
 8004734:	4619      	mov	r1, r3
 8004736:	f7fd f9c1 	bl	8001abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(heat_GPIO_Port[i][IN2], heat_Pin[i][IN2], GPIO_PIN_RESET);
 800473a:	797a      	ldrb	r2, [r7, #5]
 800473c:	4929      	ldr	r1, [pc, #164]	; (80047e4 <init_powderMachine+0x214>)
 800473e:	4613      	mov	r3, r2
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	3308      	adds	r3, #8
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	797a      	ldrb	r2, [r7, #5]
 800474e:	4926      	ldr	r1, [pc, #152]	; (80047e8 <init_powderMachine+0x218>)
 8004750:	4613      	mov	r3, r2
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	3308      	adds	r3, #8
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	2200      	movs	r2, #0
 8004762:	4619      	mov	r1, r3
 8004764:	f7fd f9aa 	bl	8001abc <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i<sizeof(heat_GPIO_Port) / sizeof(heat_GPIO_Port[0]); i++){
 8004768:	797b      	ldrb	r3, [r7, #5]
 800476a:	3301      	adds	r3, #1
 800476c:	717b      	strb	r3, [r7, #5]
 800476e:	797b      	ldrb	r3, [r7, #5]
 8004770:	2b05      	cmp	r3, #5
 8004772:	d9cb      	bls.n	800470c <init_powderMachine+0x13c>
	}

	// init PWM
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //PD01_heat
 8004774:	2108      	movs	r1, #8
 8004776:	481d      	ldr	r0, [pc, #116]	; (80047ec <init_powderMachine+0x21c>)
 8004778:	f7fd ff64 	bl	8002644 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //PD02_heat
 800477c:	210c      	movs	r1, #12
 800477e:	481b      	ldr	r0, [pc, #108]	; (80047ec <init_powderMachine+0x21c>)
 8004780:	f7fd ff60 	bl	8002644 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //PD03_heat
 8004784:	2100      	movs	r1, #0
 8004786:	481a      	ldr	r0, [pc, #104]	; (80047f0 <init_powderMachine+0x220>)
 8004788:	f7fd ff5c 	bl	8002644 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //PD04_heat
 800478c:	2104      	movs	r1, #4
 800478e:	4817      	ldr	r0, [pc, #92]	; (80047ec <init_powderMachine+0x21c>)
 8004790:	f7fd ff58 	bl	8002644 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //PD05_heat
 8004794:	2104      	movs	r1, #4
 8004796:	4816      	ldr	r0, [pc, #88]	; (80047f0 <init_powderMachine+0x220>)
 8004798:	f7fd ff54 	bl	8002644 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //CF01_heat
 800479c:	2108      	movs	r1, #8
 800479e:	4813      	ldr	r0, [pc, #76]	; (80047ec <init_powderMachine+0x21c>)
 80047a0:	f7fd ff50 	bl	8002644 <HAL_TIM_PWM_Start>

	// motor stop
	TIM4->CCR3 = HEATER_MOTOR_STOP;
 80047a4:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <init_powderMachine+0x224>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = HEATER_MOTOR_STOP;
 80047aa:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <init_powderMachine+0x224>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR1 = HEATER_MOTOR_STOP;
 80047b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047b4:	2200      	movs	r2, #0
 80047b6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = HEATER_MOTOR_STOP;
 80047b8:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <init_powderMachine+0x224>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR2 = HEATER_MOTOR_STOP;
 80047be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047c2:	2200      	movs	r2, #0
 80047c4:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = HEATER_MOTOR_STOP;
 80047c6:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <init_powderMachine+0x224>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80047cc:	bf00      	nop
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	2000000c 	.word	0x2000000c
 80047d8:	200000cc 	.word	0x200000cc
 80047dc:	20000048 	.word	0x20000048
 80047e0:	20000108 	.word	0x20000108
 80047e4:	20000084 	.word	0x20000084
 80047e8:	20000144 	.word	0x20000144
 80047ec:	200001e4 	.word	0x200001e4
 80047f0:	20000388 	.word	0x20000388
 80047f4:	40000800 	.word	0x40000800

080047f8 <HAL_UART_RxCpltCallback>:

bool 	is_running[OFFSET] 				= {false, false};
char uartBuf[4000];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a14      	ldr	r2, [pc, #80]	; (8004858 <HAL_UART_RxCpltCallback+0x60>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d105      	bne.n	8004816 <HAL_UART_RxCpltCallback+0x1e>
	{
//		HAL_UART_Transmit(&huart3, cupD_res_packet, sizeof(cupD_res_packet), 100);
	    HAL_UART_Receive_IT(&huart3, pc_res_packet, sizeof(pc_res_packet));
 800480a:	220a      	movs	r2, #10
 800480c:	4913      	ldr	r1, [pc, #76]	; (800485c <HAL_UART_RxCpltCallback+0x64>)
 800480e:	4814      	ldr	r0, [pc, #80]	; (8004860 <HAL_UART_RxCpltCallback+0x68>)
 8004810:	f7fe fff5 	bl	80037fe <HAL_UART_Receive_IT>
	else if (huart->Instance == USART6)
	{
		HAL_UART_Transmit(&huart3, LidD_res_packet, sizeof(LidD_res_packet), 100);
	    HAL_UART_Receive_IT(&huart6, LidD_res_packet, sizeof(LidD_res_packet));
	}
}
 8004814:	e01b      	b.n	800484e <HAL_UART_RxCpltCallback+0x56>
	else if (huart->Instance == UART5)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a12      	ldr	r2, [pc, #72]	; (8004864 <HAL_UART_RxCpltCallback+0x6c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d106      	bne.n	800482e <HAL_UART_RxCpltCallback+0x36>
		HAL_UART_Transmit(&huart3, cupD_res_packet, sizeof(cupD_res_packet), 100);
 8004820:	2364      	movs	r3, #100	; 0x64
 8004822:	2209      	movs	r2, #9
 8004824:	4910      	ldr	r1, [pc, #64]	; (8004868 <HAL_UART_RxCpltCallback+0x70>)
 8004826:	480e      	ldr	r0, [pc, #56]	; (8004860 <HAL_UART_RxCpltCallback+0x68>)
 8004828:	f7fe ff57 	bl	80036da <HAL_UART_Transmit>
}
 800482c:	e00f      	b.n	800484e <HAL_UART_RxCpltCallback+0x56>
	else if (huart->Instance == USART6)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a0e      	ldr	r2, [pc, #56]	; (800486c <HAL_UART_RxCpltCallback+0x74>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d10a      	bne.n	800484e <HAL_UART_RxCpltCallback+0x56>
		HAL_UART_Transmit(&huart3, LidD_res_packet, sizeof(LidD_res_packet), 100);
 8004838:	2364      	movs	r3, #100	; 0x64
 800483a:	2209      	movs	r2, #9
 800483c:	490c      	ldr	r1, [pc, #48]	; (8004870 <HAL_UART_RxCpltCallback+0x78>)
 800483e:	4808      	ldr	r0, [pc, #32]	; (8004860 <HAL_UART_RxCpltCallback+0x68>)
 8004840:	f7fe ff4b 	bl	80036da <HAL_UART_Transmit>
	    HAL_UART_Receive_IT(&huart6, LidD_res_packet, sizeof(LidD_res_packet));
 8004844:	2209      	movs	r2, #9
 8004846:	490a      	ldr	r1, [pc, #40]	; (8004870 <HAL_UART_RxCpltCallback+0x78>)
 8004848:	480a      	ldr	r0, [pc, #40]	; (8004874 <HAL_UART_RxCpltCallback+0x7c>)
 800484a:	f7fe ffd8 	bl	80037fe <HAL_UART_Receive_IT>
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40004800 	.word	0x40004800
 800485c:	200001c0 	.word	0x200001c0
 8004860:	2000022c 	.word	0x2000022c
 8004864:	40005000 	.word	0x40005000
 8004868:	200001cc 	.word	0x200001cc
 800486c:	40011400 	.word	0x40011400
 8004870:	200001d8 	.word	0x200001d8
 8004874:	20000344 	.word	0x20000344

08004878 <SteppingMotorTest>:

void SteppingMotorTest(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
//	printf("ROTATE start!!\n");
//	controlSteppingMotor(CUP_D, STEPPING_MOTOR_ON, CLOCKWISE, QUARTER, FREQ_FAST);
//	controlSteppingMotor(LID_D, STEPPING_MOTOR_ON, CLOCKWISE, QUARTER, FREQ_FAST);
//	printf("ROTATE finished!!\n\n");

	HAL_Delay(1000);
 800487c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004880:	f7fc fda8 	bl	80013d4 <HAL_Delay>
	dispatch(CUP_D);
 8004884:	2002      	movs	r0, #2
 8004886:	f000 f80d 	bl	80048a4 <dispatch>
}
 800488a:	bf00      	nop
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <initCupLidDispensor>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
}

void initCupLidDispensor(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);
 8004894:	4802      	ldr	r0, [pc, #8]	; (80048a0 <initCupLidDispensor+0x10>)
 8004896:	f7fd fe13 	bl	80024c0 <HAL_TIM_Base_Start>
}
 800489a:	bf00      	nop
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	200002fc 	.word	0x200002fc

080048a4 <dispatch>:
		if(is_running[id] == true)
			return RUNNING;
	}
}
bool dispatch(uint8_t device_id)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive_IT(&huart5, cupD_res_packet, sizeof(cupD_res_packet));
 80048ae:	2209      	movs	r2, #9
 80048b0:	4906      	ldr	r1, [pc, #24]	; (80048cc <dispatch+0x28>)
 80048b2:	4807      	ldr	r0, [pc, #28]	; (80048d0 <dispatch+0x2c>)
 80048b4:	f7fe ffa3 	bl	80037fe <HAL_UART_Receive_IT>
//	sendCommand(device_id, STATUS_CHECK);
	sendCommand(device_id, DISPATCH_1_CUP);
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	2101      	movs	r1, #1
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 f809 	bl	80048d4 <sendCommand>
	return true;
 80048c2:	2301      	movs	r3, #1
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	200001cc 	.word	0x200001cc
 80048d0:	200002b8 	.word	0x200002b8

080048d4 <sendCommand>:

void sendCommand(uint8_t device_id, uint8_t cmd)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	4603      	mov	r3, r0
 80048dc:	460a      	mov	r2, r1
 80048de:	71fb      	strb	r3, [r7, #7]
 80048e0:	4613      	mov	r3, r2
 80048e2:	71bb      	strb	r3, [r7, #6]
	// calc checksum
	int chk_size = dispenser_req_packet_list[cmd][LEN]+3;
 80048e4:	79ba      	ldrb	r2, [r7, #6]
 80048e6:	4929      	ldr	r1, [pc, #164]	; (800498c <sendCommand+0xb8>)
 80048e8:	4613      	mov	r3, r2
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	440b      	add	r3, r1
 80048f0:	3301      	adds	r3, #1
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	3303      	adds	r3, #3
 80048f6:	613b      	str	r3, [r7, #16]
	for(int i=1; i<chk_size; i++){
 80048f8:	2301      	movs	r3, #1
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	e020      	b.n	8004940 <sendCommand+0x6c>
		dispenser_req_packet_list[cmd][chk_size] += dispenser_req_packet_list[cmd][i];
 80048fe:	79ba      	ldrb	r2, [r7, #6]
 8004900:	4922      	ldr	r1, [pc, #136]	; (800498c <sendCommand+0xb8>)
 8004902:	4613      	mov	r3, r2
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	1a9b      	subs	r3, r3, r2
 8004908:	18ca      	adds	r2, r1, r3
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	4413      	add	r3, r2
 800490e:	7819      	ldrb	r1, [r3, #0]
 8004910:	79ba      	ldrb	r2, [r7, #6]
 8004912:	481e      	ldr	r0, [pc, #120]	; (800498c <sendCommand+0xb8>)
 8004914:	4613      	mov	r3, r2
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	1a9b      	subs	r3, r3, r2
 800491a:	18c2      	adds	r2, r0, r3
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	4413      	add	r3, r2
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	79ba      	ldrb	r2, [r7, #6]
 8004924:	440b      	add	r3, r1
 8004926:	b2d8      	uxtb	r0, r3
 8004928:	4918      	ldr	r1, [pc, #96]	; (800498c <sendCommand+0xb8>)
 800492a:	4613      	mov	r3, r2
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	1a9b      	subs	r3, r3, r2
 8004930:	18ca      	adds	r2, r1, r3
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4413      	add	r3, r2
 8004936:	4602      	mov	r2, r0
 8004938:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<chk_size; i++){
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	3301      	adds	r3, #1
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	429a      	cmp	r2, r3
 8004946:	dbda      	blt.n	80048fe <sendCommand+0x2a>

//	for(int i=0; i<sizeof(dispenser_req_packet_list[cmd]); i++){
//		printf("%0.2x\r ", dispenser_req_packet_list[cmd][i]);
//	}
//	printf("finished!\n");
	uint8_t dispenser_req_packet[] = {0x02, 0x03, 0x41, 0x01, 0x01, 0x03, 0x49}; // extract 1 cup
 8004948:	4a11      	ldr	r2, [pc, #68]	; (8004990 <sendCommand+0xbc>)
 800494a:	f107 0308 	add.w	r3, r7, #8
 800494e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004952:	6018      	str	r0, [r3, #0]
 8004954:	3304      	adds	r3, #4
 8004956:	8019      	strh	r1, [r3, #0]
 8004958:	3302      	adds	r3, #2
 800495a:	0c0a      	lsrs	r2, r1, #16
 800495c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart5, (uint8_t *)dispenser_req_packet, sizeof(dispenser_req_packet), 100);
 800495e:	f107 0108 	add.w	r1, r7, #8
 8004962:	2364      	movs	r3, #100	; 0x64
 8004964:	2207      	movs	r2, #7
 8004966:	480b      	ldr	r0, [pc, #44]	; (8004994 <sendCommand+0xc0>)
 8004968:	f7fe feb7 	bl	80036da <HAL_UART_Transmit>

	// request packet
//	HAL_UART_Transmit(&huart5, (uint8_t *)dispenser_req_packet_list[cmd], sizeof(dispenser_req_packet_list[cmd]), 100);

	// for debug
	HAL_UART_Transmit(&huart3, (uint8_t *)dispenser_req_packet_list[cmd], sizeof(dispenser_req_packet_list[cmd]), 100);
 800496c:	79ba      	ldrb	r2, [r7, #6]
 800496e:	4613      	mov	r3, r2
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	1a9b      	subs	r3, r3, r2
 8004974:	4a05      	ldr	r2, [pc, #20]	; (800498c <sendCommand+0xb8>)
 8004976:	1899      	adds	r1, r3, r2
 8004978:	2364      	movs	r3, #100	; 0x64
 800497a:	2207      	movs	r2, #7
 800497c:	4806      	ldr	r0, [pc, #24]	; (8004998 <sendCommand+0xc4>)
 800497e:	f7fe feac 	bl	80036da <HAL_UART_Transmit>
}
 8004982:	bf00      	nop
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	2000018c 	.word	0x2000018c
 8004990:	08004a3c 	.word	0x08004a3c
 8004994:	200002b8 	.word	0x200002b8
 8004998:	2000022c 	.word	0x2000022c

0800499c <__libc_init_array>:
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	4d0d      	ldr	r5, [pc, #52]	; (80049d4 <__libc_init_array+0x38>)
 80049a0:	4c0d      	ldr	r4, [pc, #52]	; (80049d8 <__libc_init_array+0x3c>)
 80049a2:	1b64      	subs	r4, r4, r5
 80049a4:	10a4      	asrs	r4, r4, #2
 80049a6:	2600      	movs	r6, #0
 80049a8:	42a6      	cmp	r6, r4
 80049aa:	d109      	bne.n	80049c0 <__libc_init_array+0x24>
 80049ac:	4d0b      	ldr	r5, [pc, #44]	; (80049dc <__libc_init_array+0x40>)
 80049ae:	4c0c      	ldr	r4, [pc, #48]	; (80049e0 <__libc_init_array+0x44>)
 80049b0:	f000 f820 	bl	80049f4 <_init>
 80049b4:	1b64      	subs	r4, r4, r5
 80049b6:	10a4      	asrs	r4, r4, #2
 80049b8:	2600      	movs	r6, #0
 80049ba:	42a6      	cmp	r6, r4
 80049bc:	d105      	bne.n	80049ca <__libc_init_array+0x2e>
 80049be:	bd70      	pop	{r4, r5, r6, pc}
 80049c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c4:	4798      	blx	r3
 80049c6:	3601      	adds	r6, #1
 80049c8:	e7ee      	b.n	80049a8 <__libc_init_array+0xc>
 80049ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ce:	4798      	blx	r3
 80049d0:	3601      	adds	r6, #1
 80049d2:	e7f2      	b.n	80049ba <__libc_init_array+0x1e>
 80049d4:	08004a64 	.word	0x08004a64
 80049d8:	08004a64 	.word	0x08004a64
 80049dc:	08004a64 	.word	0x08004a64
 80049e0:	08004a68 	.word	0x08004a68

080049e4 <memset>:
 80049e4:	4402      	add	r2, r0
 80049e6:	4603      	mov	r3, r0
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d100      	bne.n	80049ee <memset+0xa>
 80049ec:	4770      	bx	lr
 80049ee:	f803 1b01 	strb.w	r1, [r3], #1
 80049f2:	e7f9      	b.n	80049e8 <memset+0x4>

080049f4 <_init>:
 80049f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f6:	bf00      	nop
 80049f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fa:	bc08      	pop	{r3}
 80049fc:	469e      	mov	lr, r3
 80049fe:	4770      	bx	lr

08004a00 <_fini>:
 8004a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a02:	bf00      	nop
 8004a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a06:	bc08      	pop	{r3}
 8004a08:	469e      	mov	lr, r3
 8004a0a:	4770      	bx	lr
