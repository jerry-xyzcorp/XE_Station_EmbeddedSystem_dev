
XEstation_MachineControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fdc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800518c  0800518c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800528c  0800528c  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  0800528c  0800528c  0001528c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005294  08005294  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800529c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020220  2**0
                  CONTENTS
 10 .bss          00000230  20000220  20000220  00020220  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000450  20000450  00020220  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   000114d2  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e3  00000000  00000000  00031722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  00033b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ca0  00000000  00000000  00034880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e28  00000000  00000000  00035520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f79c  00000000  00000000  0005a348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc85c  00000000  00000000  00069ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00146340  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fac  00000000  00000000  00146394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000220 	.word	0x20000220
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005174 	.word	0x08005174

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000224 	.word	0x20000224
 80001ec:	08005174 	.word	0x08005174

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 10) == HAL_OK)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	b29a      	uxth	r2, r3
 8000598:	230a      	movs	r3, #10
 800059a:	68b9      	ldr	r1, [r7, #8]
 800059c:	4806      	ldr	r0, [pc, #24]	; (80005b8 <_write+0x30>)
 800059e:	f003 f8f2 	bl	8003786 <HAL_UART_Transmit>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d101      	bne.n	80005ac <_write+0x24>
		return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	e001      	b.n	80005b0 <_write+0x28>
	return -1;
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000298 	.word	0x20000298

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 ff66 	bl	8001490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f81c 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 fae4 	bl	8000b94 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005cc:	f000 f888 	bl	80006e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005d0:	f000 f8d8 	bl	8000784 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005d4:	f000 f958 	bl	8000888 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005d8:	f000 f9da 	bl	8000990 <MX_TIM4_Init>
  MX_UART5_Init();
 80005dc:	f000 fa5c 	bl	8000a98 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80005e0:	f000 fa84 	bl	8000aec <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80005e4:	f000 faac 	bl	8000b40 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  initCupLidDispensor();
 80005e8:	f003 fcf4 	bl	8003fd4 <initCupLidDispensor>
  init_powderMachine();
 80005ec:	f003 fb94 	bl	8003d18 <init_powderMachine>

  SteppingMotorTest();
 80005f0:	f003 fca6 	bl	8003f40 <SteppingMotorTest>
//	  SteppingMotorTest();
//	  L298Ntest();
//	  heaterTest();
//	  printf("test ..\n\n");

	HAL_Delay(500);
 80005f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f8:	f000 ffbc 	bl	8001574 <HAL_Delay>
 80005fc:	e7fa      	b.n	80005f4 <main+0x38>
	...

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fddc 	bl	80041cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemClock_Config+0xd8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a2a      	ldr	r2, [pc, #168]	; (80006d8 <SystemClock_Config+0xd8>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemClock_Config+0xd8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemClock_Config+0xdc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemClock_Config+0xdc>)
 800064a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemClock_Config+0xdc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000670:	2308      	movs	r3, #8
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000674:	23b4      	movs	r3, #180	; 0xb4
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fad9 	bl	8001c3c <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000690:	f000 fbd6 	bl	8000e40 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000694:	f001 fa82 	bl	8001b9c <HAL_PWREx_EnableOverDrive>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800069e:	f000 fbcf 	bl	8000e40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	230f      	movs	r3, #15
 80006a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2302      	movs	r3, #2
 80006a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2105      	movs	r1, #5
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 fd33 	bl	800212c <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006cc:	f000 fbb8 	bl	8000e40 <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	; 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f4:	463b      	mov	r3, r7
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_TIM1_Init+0x9c>)
 80006fe:	4a20      	ldr	r2, [pc, #128]	; (8000780 <MX_TIM1_Init+0xa0>)
 8000700:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1800-1;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_TIM1_Init+0x9c>)
 8000704:	f240 7207 	movw	r2, #1799	; 0x707
 8000708:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_TIM1_Init+0x9c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_TIM1_Init+0x9c>)
 8000712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000716:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_TIM1_Init+0x9c>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_TIM1_Init+0x9c>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_TIM1_Init+0x9c>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800072a:	4814      	ldr	r0, [pc, #80]	; (800077c <MX_TIM1_Init+0x9c>)
 800072c:	f001 fece 	bl	80024cc <HAL_TIM_Base_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000736:	f000 fb83 	bl	8000e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	4619      	mov	r1, r3
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_TIM1_Init+0x9c>)
 8000748:	f002 fa64 	bl	8002c14 <HAL_TIM_ConfigClockSource>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000752:	f000 fb75 	bl	8000e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_TIM1_Init+0x9c>)
 8000764:	f002 ff32 	bl	80035cc <HAL_TIMEx_MasterConfigSynchronization>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800076e:	f000 fb67 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000368 	.word	0x20000368
 8000780:	40010000 	.word	0x40010000

08000784 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08e      	sub	sp, #56	; 0x38
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800078a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
 80007b2:	615a      	str	r2, [r3, #20]
 80007b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007b6:	4b33      	ldr	r3, [pc, #204]	; (8000884 <MX_TIM2_Init+0x100>)
 80007b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007be:	4b31      	ldr	r3, [pc, #196]	; (8000884 <MX_TIM2_Init+0x100>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c4:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <MX_TIM2_Init+0x100>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007ca:	4b2e      	ldr	r3, [pc, #184]	; (8000884 <MX_TIM2_Init+0x100>)
 80007cc:	f04f 32ff 	mov.w	r2, #4294967295
 80007d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d2:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <MX_TIM2_Init+0x100>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d8:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <MX_TIM2_Init+0x100>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007de:	4829      	ldr	r0, [pc, #164]	; (8000884 <MX_TIM2_Init+0x100>)
 80007e0:	f001 fe74 	bl	80024cc <HAL_TIM_Base_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80007ea:	f000 fb29 	bl	8000e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007ee:	4825      	ldr	r0, [pc, #148]	; (8000884 <MX_TIM2_Init+0x100>)
 80007f0:	f001 ff24 	bl	800263c <HAL_TIM_PWM_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80007fa:	f000 fb21 	bl	8000e40 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	4619      	mov	r1, r3
 800080c:	481d      	ldr	r0, [pc, #116]	; (8000884 <MX_TIM2_Init+0x100>)
 800080e:	f002 fac8 	bl	8002da2 <HAL_TIM_SlaveConfigSynchro>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000818:	f000 fb12 	bl	8000e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4816      	ldr	r0, [pc, #88]	; (8000884 <MX_TIM2_Init+0x100>)
 800082c:	f002 fece 	bl	80035cc <HAL_TIMEx_MasterConfigSynchronization>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000836:	f000 fb03 	bl	8000e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800083a:	2360      	movs	r3, #96	; 0x60
 800083c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	4619      	mov	r1, r3
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_TIM2_Init+0x100>)
 8000852:	f002 f91d 	bl	8002a90 <HAL_TIM_PWM_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800085c:	f000 faf0 	bl	8000e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	2204      	movs	r2, #4
 8000864:	4619      	mov	r1, r3
 8000866:	4807      	ldr	r0, [pc, #28]	; (8000884 <MX_TIM2_Init+0x100>)
 8000868:	f002 f912 	bl	8002a90 <HAL_TIM_PWM_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000872:	f000 fae5 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000876:	4803      	ldr	r0, [pc, #12]	; (8000884 <MX_TIM2_Init+0x100>)
 8000878:	f000 fb78 	bl	8000f6c <HAL_TIM_MspPostInit>

}
 800087c:	bf00      	nop
 800087e:	3738      	adds	r7, #56	; 0x38
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200003f4 	.word	0x200003f4

08000888 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08e      	sub	sp, #56	; 0x38
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800088e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a8:	463b      	mov	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
 80008b6:	615a      	str	r2, [r3, #20]
 80008b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008ba:	4b33      	ldr	r3, [pc, #204]	; (8000988 <MX_TIM3_Init+0x100>)
 80008bc:	4a33      	ldr	r2, [pc, #204]	; (800098c <MX_TIM3_Init+0x104>)
 80008be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008c0:	4b31      	ldr	r3, [pc, #196]	; (8000988 <MX_TIM3_Init+0x100>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b30      	ldr	r3, [pc, #192]	; (8000988 <MX_TIM3_Init+0x100>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008cc:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <MX_TIM3_Init+0x100>)
 80008ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d4:	4b2c      	ldr	r3, [pc, #176]	; (8000988 <MX_TIM3_Init+0x100>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008da:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <MX_TIM3_Init+0x100>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008e0:	4829      	ldr	r0, [pc, #164]	; (8000988 <MX_TIM3_Init+0x100>)
 80008e2:	f001 fdf3 	bl	80024cc <HAL_TIM_Base_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80008ec:	f000 faa8 	bl	8000e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008f0:	4825      	ldr	r0, [pc, #148]	; (8000988 <MX_TIM3_Init+0x100>)
 80008f2:	f001 fea3 	bl	800263c <HAL_TIM_PWM_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80008fc:	f000 faa0 	bl	8000e40 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090c:	4619      	mov	r1, r3
 800090e:	481e      	ldr	r0, [pc, #120]	; (8000988 <MX_TIM3_Init+0x100>)
 8000910:	f002 fa47 	bl	8002da2 <HAL_TIM_SlaveConfigSynchro>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800091a:	f000 fa91 	bl	8000e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4816      	ldr	r0, [pc, #88]	; (8000988 <MX_TIM3_Init+0x100>)
 800092e:	f002 fe4d 	bl	80035cc <HAL_TIMEx_MasterConfigSynchronization>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000938:	f000 fa82 	bl	8000e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093c:	2360      	movs	r3, #96	; 0x60
 800093e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800094c:	463b      	mov	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	4619      	mov	r1, r3
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_TIM3_Init+0x100>)
 8000954:	f002 f89c 	bl	8002a90 <HAL_TIM_PWM_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800095e:	f000 fa6f 	bl	8000e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	2204      	movs	r2, #4
 8000966:	4619      	mov	r1, r3
 8000968:	4807      	ldr	r0, [pc, #28]	; (8000988 <MX_TIM3_Init+0x100>)
 800096a:	f002 f891 	bl	8002a90 <HAL_TIM_PWM_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000974:	f000 fa64 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <MX_TIM3_Init+0x100>)
 800097a:	f000 faf7 	bl	8000f6c <HAL_TIM_MspPostInit>

}
 800097e:	bf00      	nop
 8000980:	3738      	adds	r7, #56	; 0x38
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200002dc 	.word	0x200002dc
 800098c:	40000400 	.word	0x40000400

08000990 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08e      	sub	sp, #56	; 0x38
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b0:	463b      	mov	r3, r7
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
 80009be:	615a      	str	r2, [r3, #20]
 80009c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009c2:	4b33      	ldr	r3, [pc, #204]	; (8000a90 <MX_TIM4_Init+0x100>)
 80009c4:	4a33      	ldr	r2, [pc, #204]	; (8000a94 <MX_TIM4_Init+0x104>)
 80009c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009c8:	4b31      	ldr	r3, [pc, #196]	; (8000a90 <MX_TIM4_Init+0x100>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ce:	4b30      	ldr	r3, [pc, #192]	; (8000a90 <MX_TIM4_Init+0x100>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80009d4:	4b2e      	ldr	r3, [pc, #184]	; (8000a90 <MX_TIM4_Init+0x100>)
 80009d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009dc:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <MX_TIM4_Init+0x100>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e2:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <MX_TIM4_Init+0x100>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009e8:	4829      	ldr	r0, [pc, #164]	; (8000a90 <MX_TIM4_Init+0x100>)
 80009ea:	f001 fd6f 	bl	80024cc <HAL_TIM_Base_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80009f4:	f000 fa24 	bl	8000e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009f8:	4825      	ldr	r0, [pc, #148]	; (8000a90 <MX_TIM4_Init+0x100>)
 80009fa:	f001 fe1f 	bl	800263c <HAL_TIM_PWM_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000a04:	f000 fa1c 	bl	8000e40 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a14:	4619      	mov	r1, r3
 8000a16:	481e      	ldr	r0, [pc, #120]	; (8000a90 <MX_TIM4_Init+0x100>)
 8000a18:	f002 f9c3 	bl	8002da2 <HAL_TIM_SlaveConfigSynchro>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000a22:	f000 fa0d 	bl	8000e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4816      	ldr	r0, [pc, #88]	; (8000a90 <MX_TIM4_Init+0x100>)
 8000a36:	f002 fdc9 	bl	80035cc <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000a40:	f000 f9fe 	bl	8000e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a44:	2360      	movs	r3, #96	; 0x60
 8000a46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	2208      	movs	r2, #8
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480d      	ldr	r0, [pc, #52]	; (8000a90 <MX_TIM4_Init+0x100>)
 8000a5c:	f002 f818 	bl	8002a90 <HAL_TIM_PWM_ConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000a66:	f000 f9eb 	bl	8000e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	220c      	movs	r2, #12
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4807      	ldr	r0, [pc, #28]	; (8000a90 <MX_TIM4_Init+0x100>)
 8000a72:	f002 f80d 	bl	8002a90 <HAL_TIM_PWM_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8000a7c:	f000 f9e0 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a80:	4803      	ldr	r0, [pc, #12]	; (8000a90 <MX_TIM4_Init+0x100>)
 8000a82:	f000 fa73 	bl	8000f6c <HAL_TIM_MspPostInit>

}
 8000a86:	bf00      	nop
 8000a88:	3738      	adds	r7, #56	; 0x38
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000250 	.word	0x20000250
 8000a94:	40000800 	.word	0x40000800

08000a98 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_UART5_Init+0x4c>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_UART5_Init+0x50>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_UART5_Init+0x4c>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_UART5_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_UART5_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_UART5_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_UART5_Init+0x4c>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_UART5_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_UART5_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_UART5_Init+0x4c>)
 8000ad0:	f002 fe0c 	bl	80036ec <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000ada:	f000 f9b1 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000324 	.word	0x20000324
 8000ae8:	40005000 	.word	0x40005000

08000aec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_USART3_UART_Init+0x4c>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <MX_USART3_UART_Init+0x50>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_USART3_UART_Init+0x4c>)
 8000af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000afc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_USART3_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_USART3_UART_Init+0x4c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_USART3_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_USART3_UART_Init+0x4c>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_USART3_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_USART3_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_USART3_UART_Init+0x4c>)
 8000b24:	f002 fde2 	bl	80036ec <HAL_UART_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b2e:	f000 f987 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000298 	.word	0x20000298
 8000b3c:	40004800 	.word	0x40004800

08000b40 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <MX_USART6_UART_Init+0x50>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b78:	f002 fdb8 	bl	80036ec <HAL_UART_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b82:	f000 f95d 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200003b0 	.word	0x200003b0
 8000b90:	40011400 	.word	0x40011400

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08e      	sub	sp, #56	; 0x38
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
 8000bae:	4b9b      	ldr	r3, [pc, #620]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a9a      	ldr	r2, [pc, #616]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000bb4:	f043 0310 	orr.w	r3, r3, #16
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b98      	ldr	r3, [pc, #608]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0310 	and.w	r3, r3, #16
 8000bc2:	623b      	str	r3, [r7, #32]
 8000bc4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
 8000bca:	4b94      	ldr	r3, [pc, #592]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a93      	ldr	r2, [pc, #588]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000bd0:	f043 0320 	orr.w	r3, r3, #32
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b91      	ldr	r3, [pc, #580]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0320 	and.w	r3, r3, #32
 8000bde:	61fb      	str	r3, [r7, #28]
 8000be0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	4b8d      	ldr	r3, [pc, #564]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a8c      	ldr	r2, [pc, #560]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b8a      	ldr	r3, [pc, #552]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfa:	61bb      	str	r3, [r7, #24]
 8000bfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	4b86      	ldr	r3, [pc, #536]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a85      	ldr	r2, [pc, #532]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b83      	ldr	r3, [pc, #524]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b7f      	ldr	r3, [pc, #508]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a7e      	ldr	r2, [pc, #504]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b7c      	ldr	r3, [pc, #496]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b78      	ldr	r3, [pc, #480]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a77      	ldr	r2, [pc, #476]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b75      	ldr	r3, [pc, #468]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	4b71      	ldr	r3, [pc, #452]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a70      	ldr	r2, [pc, #448]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b6e      	ldr	r3, [pc, #440]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b6a      	ldr	r3, [pc, #424]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a69      	ldr	r2, [pc, #420]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b67      	ldr	r3, [pc, #412]	; (8000e1c <MX_GPIO_Init+0x288>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PD02_DCmix_EN_Pin|PD04_DCpowder_IN2_Pin|PD04_DCpowder_IN1_Pin|PD01_DCmix_IN2_Pin
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f64f 71cd 	movw	r1, #65485	; 0xffcd
 8000c90:	4863      	ldr	r0, [pc, #396]	; (8000e20 <MX_GPIO_Init+0x28c>)
 8000c92:	f000 ff69 	bl	8001b68 <HAL_GPIO_WritePin>
                          |PD01_DCmix_IN1_Pin|CupD_STP_Pin|PD03_DCmix_IN1_Pin|CupD_DIR_Pin
                          |PD03_DCmix_IN2_Pin|LidD_STP_Pin|PD03_DCmix_EN_Pin|PD05_DCmix_IN1_Pin
                          |PD04_DCmix_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PD02_DCpowder_IN1_Pin|PD01_DCpowder_IN1_Pin|PD01_DCpowder_IN2_Pin|PD05_DCpowder_IN1_Pin
 8000c96:	2200      	movs	r2, #0
 8000c98:	f24f 71ac 	movw	r1, #63404	; 0xf7ac
 8000c9c:	4861      	ldr	r0, [pc, #388]	; (8000e24 <MX_GPIO_Init+0x290>)
 8000c9e:	f000 ff63 	bl	8001b68 <HAL_GPIO_WritePin>
                          |PD04_DCpowder_EN_Pin|PD05_DCpowder_IN2_Pin|PD01_DCpowder_EN_Pin|CF01_heat_IN2_Pin
                          |CupD_EN_Pin|LidD_EN_Pin|LidD_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PD02_DCpowder_EN_Pin|PD02_DCpowder_IN2_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2103      	movs	r1, #3
 8000ca6:	4860      	ldr	r0, [pc, #384]	; (8000e28 <MX_GPIO_Init+0x294>)
 8000ca8:	f000 ff5e 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ICE01_water_Pin|ICE01_mix_Pin|PD01_heat_IN1_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2149      	movs	r1, #73	; 0x49
 8000cb0:	485e      	ldr	r0, [pc, #376]	; (8000e2c <MX_GPIO_Init+0x298>)
 8000cb2:	f000 ff59 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PD04_DCmix_IN1_Pin|ICE01_ice_Pin|CF01_heat_IN1_Pin|PD03_heat_IN1_Pin
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	21f9      	movs	r1, #249	; 0xf9
 8000cba:	485d      	ldr	r0, [pc, #372]	; (8000e30 <MX_GPIO_Init+0x29c>)
 8000cbc:	f000 ff54 	bl	8001b68 <HAL_GPIO_WritePin>
                          |PD03_heat_IN2_Pin|PD04_heat_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PD04_DCmix_IN2_Pin|PD05_DCmix_IN2_Pin|PD05_DCmix_EN_Pin|PD02_heat_IN2_Pin
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f64b 4121 	movw	r1, #48161	; 0xbc21
 8000cc6:	485b      	ldr	r0, [pc, #364]	; (8000e34 <MX_GPIO_Init+0x2a0>)
 8000cc8:	f000 ff4e 	bl	8001b68 <HAL_GPIO_WritePin>
                          |PD02_heat_IN1_Pin|PD01_heat_IN2_Pin|PD04_heat_IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PD03_DCpowder_EN_Pin|PD05_DCpowder_EN_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2103      	movs	r1, #3
 8000cd0:	4859      	ldr	r0, [pc, #356]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000cd2:	f000 ff49 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD02_DCmix_IN2_Pin|PD02_DCmix_IN1_Pin|PD01_DCmix_EN_Pin|PD05_heat_IN1_Pin
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f64f 01e3 	movw	r1, #63715	; 0xf8e3
 8000cdc:	4857      	ldr	r0, [pc, #348]	; (8000e3c <MX_GPIO_Init+0x2a8>)
 8000cde:	f000 ff43 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD02_DCmix_EN_Pin PD04_DCpowder_IN2_Pin PD04_DCpowder_IN1_Pin PD01_DCmix_IN2_Pin
                           PD01_DCmix_IN1_Pin CupD_STP_Pin PD03_DCmix_IN1_Pin CupD_DIR_Pin
                           PD03_DCmix_IN2_Pin LidD_STP_Pin PD03_DCmix_EN_Pin PD05_DCmix_IN1_Pin
                           PD04_DCmix_EN_Pin */
  GPIO_InitStruct.Pin = PD02_DCmix_EN_Pin|PD04_DCpowder_IN2_Pin|PD04_DCpowder_IN1_Pin|PD01_DCmix_IN2_Pin
 8000ce2:	f64f 73cd 	movw	r3, #65485	; 0xffcd
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD01_DCmix_IN1_Pin|CupD_STP_Pin|PD03_DCmix_IN1_Pin|CupD_DIR_Pin
                          |PD03_DCmix_IN2_Pin|LidD_STP_Pin|PD03_DCmix_EN_Pin|PD05_DCmix_IN1_Pin
                          |PD04_DCmix_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4849      	ldr	r0, [pc, #292]	; (8000e20 <MX_GPIO_Init+0x28c>)
 8000cfc:	f000 fd70 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCpowder_IN1_Pin PD01_DCpowder_IN1_Pin PD01_DCpowder_IN2_Pin PD05_DCpowder_IN1_Pin
                           PD04_DCpowder_EN_Pin PD05_DCpowder_IN2_Pin PD01_DCpowder_EN_Pin CF01_heat_IN2_Pin
                           CupD_EN_Pin LidD_EN_Pin LidD_DIR_Pin */
  GPIO_InitStruct.Pin = PD02_DCpowder_IN1_Pin|PD01_DCpowder_IN1_Pin|PD01_DCpowder_IN2_Pin|PD05_DCpowder_IN1_Pin
 8000d00:	f24f 73ac 	movw	r3, #63404	; 0xf7ac
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD04_DCpowder_EN_Pin|PD05_DCpowder_IN2_Pin|PD01_DCpowder_EN_Pin|CF01_heat_IN2_Pin
                          |CupD_EN_Pin|LidD_EN_Pin|LidD_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	4842      	ldr	r0, [pc, #264]	; (8000e24 <MX_GPIO_Init+0x290>)
 8000d1a:	f000 fd61 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Lid_up_Pin */
  GPIO_InitStruct.Pin = Lid_up_Pin;
 8000d1e:	2310      	movs	r3, #16
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Lid_up_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	483c      	ldr	r0, [pc, #240]	; (8000e24 <MX_GPIO_Init+0x290>)
 8000d32:	f000 fd55 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCpowder_EN_Pin PD02_DCpowder_IN2_Pin */
  GPIO_InitStruct.Pin = PD02_DCpowder_EN_Pin|PD02_DCpowder_IN2_Pin;
 8000d36:	2303      	movs	r3, #3
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4836      	ldr	r0, [pc, #216]	; (8000e28 <MX_GPIO_Init+0x294>)
 8000d4e:	f000 fd47 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ICE01_water_Pin ICE01_mix_Pin PD01_heat_IN1_Pin */
  GPIO_InitStruct.Pin = ICE01_water_Pin|ICE01_mix_Pin|PD01_heat_IN1_Pin;
 8000d52:	2349      	movs	r3, #73	; 0x49
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4830      	ldr	r0, [pc, #192]	; (8000e2c <MX_GPIO_Init+0x298>)
 8000d6a:	f000 fd39 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Cup_down_Pin */
  GPIO_InitStruct.Pin = Cup_down_Pin;
 8000d6e:	2304      	movs	r3, #4
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Cup_down_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	482a      	ldr	r0, [pc, #168]	; (8000e2c <MX_GPIO_Init+0x298>)
 8000d82:	f000 fd2d 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD04_DCmix_IN1_Pin ICE01_ice_Pin CF01_heat_IN1_Pin PD03_heat_IN1_Pin
                           PD03_heat_IN2_Pin PD04_heat_IN2_Pin */
  GPIO_InitStruct.Pin = PD04_DCmix_IN1_Pin|ICE01_ice_Pin|CF01_heat_IN1_Pin|PD03_heat_IN1_Pin
 8000d86:	23f9      	movs	r3, #249	; 0xf9
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD03_heat_IN2_Pin|PD04_heat_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4824      	ldr	r0, [pc, #144]	; (8000e30 <MX_GPIO_Init+0x29c>)
 8000d9e:	f000 fd1f 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD04_DCmix_IN2_Pin PD05_DCmix_IN2_Pin PD05_DCmix_EN_Pin PD02_heat_IN2_Pin
                           PD02_heat_IN1_Pin PD01_heat_IN2_Pin PD04_heat_IN1_Pin */
  GPIO_InitStruct.Pin = PD04_DCmix_IN2_Pin|PD05_DCmix_IN2_Pin|PD05_DCmix_EN_Pin|PD02_heat_IN2_Pin
 8000da2:	f64b 4321 	movw	r3, #48161	; 0xbc21
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD02_heat_IN1_Pin|PD01_heat_IN2_Pin|PD04_heat_IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db8:	4619      	mov	r1, r3
 8000dba:	481e      	ldr	r0, [pc, #120]	; (8000e34 <MX_GPIO_Init+0x2a0>)
 8000dbc:	f000 fd10 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Cup_up_Pin Lid_down_Pin */
  GPIO_InitStruct.Pin = Cup_up_Pin|Lid_down_Pin;
 8000dc0:	2342      	movs	r3, #66	; 0x42
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4818      	ldr	r0, [pc, #96]	; (8000e34 <MX_GPIO_Init+0x2a0>)
 8000dd4:	f000 fd04 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD03_DCpowder_EN_Pin PD05_DCpowder_EN_Pin */
  GPIO_InitStruct.Pin = PD03_DCpowder_EN_Pin|PD05_DCpowder_EN_Pin;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	4812      	ldr	r0, [pc, #72]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000df0:	f000 fcf6 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCmix_IN2_Pin PD02_DCmix_IN1_Pin PD01_DCmix_EN_Pin PD05_heat_IN1_Pin
                           PD05_heat_IN2_Pin PD03_DCpowder_IN1_Pin PD03_DCpowder_IN2_Pin PD_Fan02_relay_Pin
                           PD_Fan01_relay_Pin ICE01_relay_Pin */
  GPIO_InitStruct.Pin = PD02_DCmix_IN2_Pin|PD02_DCmix_IN1_Pin|PD01_DCmix_EN_Pin|PD05_heat_IN1_Pin
 8000df4:	f64f 03e3 	movw	r3, #63715	; 0xf8e3
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD05_heat_IN2_Pin|PD03_DCpowder_IN1_Pin|PD03_DCpowder_IN2_Pin|PD_Fan02_relay_Pin
                          |PD_Fan01_relay_Pin|ICE01_relay_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <MX_GPIO_Init+0x2a8>)
 8000e0e:	f000 fce7 	bl	80017e0 <HAL_GPIO_Init>

}
 8000e12:	bf00      	nop
 8000e14:	3738      	adds	r7, #56	; 0x38
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40021400 	.word	0x40021400
 8000e28:	40021c00 	.word	0x40021c00
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40020400 	.word	0x40020400
 8000e38:	40021800 	.word	0x40021800
 8000e3c:	40020c00 	.word	0x40020c00

08000e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
}
 8000e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <Error_Handler+0x8>
	...

08000e4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	4a0f      	ldr	r2, [pc, #60]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e60:	6453      	str	r3, [r2, #68]	; 0x44
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800

08000e9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a2c      	ldr	r2, [pc, #176]	; (8000f5c <HAL_TIM_Base_MspInit+0xc0>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d10e      	bne.n	8000ecc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	4b2b      	ldr	r3, [pc, #172]	; (8000f60 <HAL_TIM_Base_MspInit+0xc4>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	4a2a      	ldr	r2, [pc, #168]	; (8000f60 <HAL_TIM_Base_MspInit+0xc4>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ebe:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <HAL_TIM_Base_MspInit+0xc4>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000eca:	e042      	b.n	8000f52 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ed4:	d116      	bne.n	8000f04 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <HAL_TIM_Base_MspInit+0xc4>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a20      	ldr	r2, [pc, #128]	; (8000f60 <HAL_TIM_Base_MspInit+0xc4>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <HAL_TIM_Base_MspInit+0xc4>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	201c      	movs	r0, #28
 8000ef8:	f000 fc3b 	bl	8001772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000efc:	201c      	movs	r0, #28
 8000efe:	f000 fc54 	bl	80017aa <HAL_NVIC_EnableIRQ>
}
 8000f02:	e026      	b.n	8000f52 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a16      	ldr	r2, [pc, #88]	; (8000f64 <HAL_TIM_Base_MspInit+0xc8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d10e      	bne.n	8000f2c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_TIM_Base_MspInit+0xc4>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <HAL_TIM_Base_MspInit+0xc4>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <HAL_TIM_Base_MspInit+0xc4>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
}
 8000f2a:	e012      	b.n	8000f52 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_TIM_Base_MspInit+0xcc>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d10d      	bne.n	8000f52 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_TIM_Base_MspInit+0xc4>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_TIM_Base_MspInit+0xc4>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_TIM_Base_MspInit+0xc4>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40010000 	.word	0x40010000
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40000400 	.word	0x40000400
 8000f68:	40000800 	.word	0x40000800

08000f6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	; 0x30
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f8c:	d13d      	bne.n	800100a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
 8000f92:	4b53      	ldr	r3, [pc, #332]	; (80010e0 <HAL_TIM_MspPostInit+0x174>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a52      	ldr	r2, [pc, #328]	; (80010e0 <HAL_TIM_MspPostInit+0x174>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b50      	ldr	r3, [pc, #320]	; (80010e0 <HAL_TIM_MspPostInit+0x174>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	4b4c      	ldr	r3, [pc, #304]	; (80010e0 <HAL_TIM_MspPostInit+0x174>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a4b      	ldr	r2, [pc, #300]	; (80010e0 <HAL_TIM_MspPostInit+0x174>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b49      	ldr	r3, [pc, #292]	; (80010e0 <HAL_TIM_MspPostInit+0x174>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PD03_heat_EN_Pin;
 8000fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD03_heat_EN_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4840      	ldr	r0, [pc, #256]	; (80010e4 <HAL_TIM_MspPostInit+0x178>)
 8000fe4:	f000 fbfc 	bl	80017e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PD05_heat_EN_Pin;
 8000fe8:	2308      	movs	r3, #8
 8000fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD05_heat_EN_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	4839      	ldr	r0, [pc, #228]	; (80010e8 <HAL_TIM_MspPostInit+0x17c>)
 8001004:	f000 fbec 	bl	80017e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001008:	e065      	b.n	80010d6 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM3)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a37      	ldr	r2, [pc, #220]	; (80010ec <HAL_TIM_MspPostInit+0x180>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d13c      	bne.n	800108e <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <HAL_TIM_MspPostInit+0x174>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	4a30      	ldr	r2, [pc, #192]	; (80010e0 <HAL_TIM_MspPostInit+0x174>)
 800101e:	f043 0304 	orr.w	r3, r3, #4
 8001022:	6313      	str	r3, [r2, #48]	; 0x30
 8001024:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <HAL_TIM_MspPostInit+0x174>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <HAL_TIM_MspPostInit+0x174>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	4a29      	ldr	r2, [pc, #164]	; (80010e0 <HAL_TIM_MspPostInit+0x174>)
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	6313      	str	r3, [r2, #48]	; 0x30
 8001040:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <HAL_TIM_MspPostInit+0x174>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PD04_heat_EN_Pin;
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800105c:	2302      	movs	r3, #2
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD04_heat_EN_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	4619      	mov	r1, r3
 8001066:	4822      	ldr	r0, [pc, #136]	; (80010f0 <HAL_TIM_MspPostInit+0x184>)
 8001068:	f000 fbba 	bl	80017e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CF01_heat_EN_Pin;
 800106c:	2310      	movs	r3, #16
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800107c:	2302      	movs	r3, #2
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CF01_heat_EN_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	4619      	mov	r1, r3
 8001086:	4818      	ldr	r0, [pc, #96]	; (80010e8 <HAL_TIM_MspPostInit+0x17c>)
 8001088:	f000 fbaa 	bl	80017e0 <HAL_GPIO_Init>
}
 800108c:	e023      	b.n	80010d6 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM4)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a18      	ldr	r2, [pc, #96]	; (80010f4 <HAL_TIM_MspPostInit+0x188>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d11e      	bne.n	80010d6 <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <HAL_TIM_MspPostInit+0x174>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <HAL_TIM_MspPostInit+0x174>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	6313      	str	r3, [r2, #48]	; 0x30
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_TIM_MspPostInit+0x174>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PD01_heat_EN_Pin|PD02_heat_EN_Pin;
 80010b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010c6:	2302      	movs	r3, #2
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <HAL_TIM_MspPostInit+0x17c>)
 80010d2:	f000 fb85 	bl	80017e0 <HAL_GPIO_Init>
}
 80010d6:	bf00      	nop
 80010d8:	3730      	adds	r7, #48	; 0x30
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40000400 	.word	0x40000400
 80010f0:	40020800 	.word	0x40020800
 80010f4:	40000800 	.word	0x40000800

080010f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08e      	sub	sp, #56	; 0x38
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a5b      	ldr	r2, [pc, #364]	; (8001284 <HAL_UART_MspInit+0x18c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d14b      	bne.n	80011b2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
 800111e:	4b5a      	ldr	r3, [pc, #360]	; (8001288 <HAL_UART_MspInit+0x190>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a59      	ldr	r2, [pc, #356]	; (8001288 <HAL_UART_MspInit+0x190>)
 8001124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b57      	ldr	r3, [pc, #348]	; (8001288 <HAL_UART_MspInit+0x190>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001132:	623b      	str	r3, [r7, #32]
 8001134:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	4b53      	ldr	r3, [pc, #332]	; (8001288 <HAL_UART_MspInit+0x190>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a52      	ldr	r2, [pc, #328]	; (8001288 <HAL_UART_MspInit+0x190>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b50      	ldr	r3, [pc, #320]	; (8001288 <HAL_UART_MspInit+0x190>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	61fb      	str	r3, [r7, #28]
 8001150:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	4b4c      	ldr	r3, [pc, #304]	; (8001288 <HAL_UART_MspInit+0x190>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a4b      	ldr	r2, [pc, #300]	; (8001288 <HAL_UART_MspInit+0x190>)
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b49      	ldr	r3, [pc, #292]	; (8001288 <HAL_UART_MspInit+0x190>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = CupD_TX_Pin;
 800116e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001180:	2308      	movs	r3, #8
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CupD_TX_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001188:	4619      	mov	r1, r3
 800118a:	4840      	ldr	r0, [pc, #256]	; (800128c <HAL_UART_MspInit+0x194>)
 800118c:	f000 fb28 	bl	80017e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CupD_RX_Pin;
 8001190:	2304      	movs	r3, #4
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011a0:	2308      	movs	r3, #8
 80011a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CupD_RX_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a8:	4619      	mov	r1, r3
 80011aa:	4839      	ldr	r0, [pc, #228]	; (8001290 <HAL_UART_MspInit+0x198>)
 80011ac:	f000 fb18 	bl	80017e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80011b0:	e064      	b.n	800127c <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART3)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a37      	ldr	r2, [pc, #220]	; (8001294 <HAL_UART_MspInit+0x19c>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d12d      	bne.n	8001218 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	4b31      	ldr	r3, [pc, #196]	; (8001288 <HAL_UART_MspInit+0x190>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	4a30      	ldr	r2, [pc, #192]	; (8001288 <HAL_UART_MspInit+0x190>)
 80011c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ca:	6413      	str	r3, [r2, #64]	; 0x40
 80011cc:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <HAL_UART_MspInit+0x190>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <HAL_UART_MspInit+0x190>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	4a29      	ldr	r2, [pc, #164]	; (8001288 <HAL_UART_MspInit+0x190>)
 80011e2:	f043 0308 	orr.w	r3, r3, #8
 80011e6:	6313      	str	r3, [r2, #48]	; 0x30
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <HAL_UART_MspInit+0x190>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 80011f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001206:	2307      	movs	r3, #7
 8001208:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	4619      	mov	r1, r3
 8001210:	481f      	ldr	r0, [pc, #124]	; (8001290 <HAL_UART_MspInit+0x198>)
 8001212:	f000 fae5 	bl	80017e0 <HAL_GPIO_Init>
}
 8001216:	e031      	b.n	800127c <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART6)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a1e      	ldr	r2, [pc, #120]	; (8001298 <HAL_UART_MspInit+0x1a0>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d12c      	bne.n	800127c <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <HAL_UART_MspInit+0x190>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a17      	ldr	r2, [pc, #92]	; (8001288 <HAL_UART_MspInit+0x190>)
 800122c:	f043 0320 	orr.w	r3, r3, #32
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_UART_MspInit+0x190>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f003 0320 	and.w	r3, r3, #32
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <HAL_UART_MspInit+0x190>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a10      	ldr	r2, [pc, #64]	; (8001288 <HAL_UART_MspInit+0x190>)
 8001248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_UART_MspInit+0x190>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LidD_RX_Pin|LidD_TX_Pin;
 800125a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800126c:	2308      	movs	r3, #8
 800126e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001274:	4619      	mov	r1, r3
 8001276:	4809      	ldr	r0, [pc, #36]	; (800129c <HAL_UART_MspInit+0x1a4>)
 8001278:	f000 fab2 	bl	80017e0 <HAL_GPIO_Init>
}
 800127c:	bf00      	nop
 800127e:	3738      	adds	r7, #56	; 0x38
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40005000 	.word	0x40005000
 8001288:	40023800 	.word	0x40023800
 800128c:	40020800 	.word	0x40020800
 8001290:	40020c00 	.word	0x40020c00
 8001294:	40004800 	.word	0x40004800
 8001298:	40011400 	.word	0x40011400
 800129c:	40021800 	.word	0x40021800

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <NMI_Handler+0x4>

080012a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <MemManage_Handler+0x4>

080012b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <UsageFault_Handler+0x4>

080012be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ec:	f000 f922 	bl	8001534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <TIM2_IRQHandler+0x10>)
 80012fa:	f001 fac1 	bl	8002880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200003f4 	.word	0x200003f4

08001308 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e00a      	b.n	8001330 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800131a:	f3af 8000 	nop.w
 800131e:	4601      	mov	r1, r0
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	60ba      	str	r2, [r7, #8]
 8001326:	b2ca      	uxtb	r2, r1
 8001328:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	dbf0      	blt.n	800131a <_read+0x12>
	}

return len;
 8001338:	687b      	ldr	r3, [r7, #4]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
	return -1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800136a:	605a      	str	r2, [r3, #4]
	return 0;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_isatty>:

int _isatty(int file)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
	return 1;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
	return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013dc:	f002 fecc 	bl	8004178 <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <_sbrk+0x64>)
 80013fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20030000 	.word	0x20030000
 800140c:	00000400 	.word	0x00000400
 8001410:	2000023c 	.word	0x2000023c
 8001414:	20000450 	.word	0x20000450

08001418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <SystemInit+0x20>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <SystemInit+0x20>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800143c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001474 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001442:	490e      	ldr	r1, [pc, #56]	; (800147c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001444:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800144c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001456:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001458:	4c0b      	ldr	r4, [pc, #44]	; (8001488 <LoopFillZerobss+0x26>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001466:	f7ff ffd7 	bl	8001418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800146a:	f002 fe8b 	bl	8004184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146e:	f7ff f8a5 	bl	80005bc <main>
  bx  lr    
 8001472:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001474:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8001480:	0800529c 	.word	0x0800529c
  ldr r2, =_sbss
 8001484:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8001488:	20000450 	.word	0x20000450

0800148c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC_IRQHandler>
	...

08001490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <HAL_Init+0x40>)
 800149a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800149e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_Init+0x40>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <HAL_Init+0x40>)
 80014a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_Init+0x40>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_Init+0x40>)
 80014b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b8:	2003      	movs	r0, #3
 80014ba:	f000 f94f 	bl	800175c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014be:	200f      	movs	r0, #15
 80014c0:	f000 f808 	bl	80014d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c4:	f7ff fcc2 	bl	8000e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023c00 	.word	0x40023c00

080014d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_InitTick+0x54>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_InitTick+0x58>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f967 	bl	80017c6 <HAL_SYSTICK_Config>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e00e      	b.n	8001520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d80a      	bhi.n	800151e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001508:	2200      	movs	r2, #0
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f000 f92f 	bl	8001772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001514:	4a06      	ldr	r2, [pc, #24]	; (8001530 <HAL_InitTick+0x5c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	e000      	b.n	8001520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000000 	.word	0x20000000
 800152c:	20000008 	.word	0x20000008
 8001530:	20000004 	.word	0x20000004

08001534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_IncTick+0x20>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_IncTick+0x24>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_IncTick+0x24>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008
 8001558:	2000043c 	.word	0x2000043c

0800155c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return uwTick;
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <HAL_GetTick+0x14>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	2000043c 	.word	0x2000043c

08001574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff ffee 	bl	800155c <HAL_GetTick>
 8001580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158c:	d005      	beq.n	800159a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_Delay+0x44>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800159a:	bf00      	nop
 800159c:	f7ff ffde 	bl	800155c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d8f7      	bhi.n	800159c <HAL_Delay+0x28>
  {
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4907      	ldr	r1, [pc, #28]	; (8001658 <__NVIC_EnableIRQ+0x38>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000e100 	.word	0xe000e100

0800165c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db0a      	blt.n	8001686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	490c      	ldr	r1, [pc, #48]	; (80016a8 <__NVIC_SetPriority+0x4c>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	440b      	add	r3, r1
 8001680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001684:	e00a      	b.n	800169c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4908      	ldr	r1, [pc, #32]	; (80016ac <__NVIC_SetPriority+0x50>)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3b04      	subs	r3, #4
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	440b      	add	r3, r1
 800169a:	761a      	strb	r2, [r3, #24]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000e100 	.word	0xe000e100
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f1c3 0307 	rsb	r3, r3, #7
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf28      	it	cs
 80016ce:	2304      	movcs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d902      	bls.n	80016e0 <NVIC_EncodePriority+0x30>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b03      	subs	r3, #3
 80016de:	e000      	b.n	80016e2 <NVIC_EncodePriority+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43d9      	mvns	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	4313      	orrs	r3, r2
         );
}
 800170a:	4618      	mov	r0, r3
 800170c:	3724      	adds	r7, #36	; 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001728:	d301      	bcc.n	800172e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172a:	2301      	movs	r3, #1
 800172c:	e00f      	b.n	800174e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <SysTick_Config+0x40>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001736:	210f      	movs	r1, #15
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f7ff ff8e 	bl	800165c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <SysTick_Config+0x40>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <SysTick_Config+0x40>)
 8001748:	2207      	movs	r2, #7
 800174a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	e000e010 	.word	0xe000e010

0800175c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff29 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001784:	f7ff ff3e 	bl	8001604 <__NVIC_GetPriorityGrouping>
 8001788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	6978      	ldr	r0, [r7, #20]
 8001790:	f7ff ff8e 	bl	80016b0 <NVIC_EncodePriority>
 8001794:	4602      	mov	r2, r0
 8001796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff5d 	bl	800165c <__NVIC_SetPriority>
}
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff31 	bl	8001620 <__NVIC_EnableIRQ>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ffa2 	bl	8001718 <SysTick_Config>
 80017d4:	4603      	mov	r3, r0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	e177      	b.n	8001aec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017fc:	2201      	movs	r2, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	429a      	cmp	r2, r3
 8001816:	f040 8166 	bne.w	8001ae6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d005      	beq.n	8001832 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800182e:	2b02      	cmp	r3, #2
 8001830:	d130      	bne.n	8001894 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	2203      	movs	r2, #3
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001868:	2201      	movs	r2, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 0201 	and.w	r2, r3, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b03      	cmp	r3, #3
 800189e:	d017      	beq.n	80018d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d123      	bne.n	8001924 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	08da      	lsrs	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3208      	adds	r2, #8
 80018e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	220f      	movs	r2, #15
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	08da      	lsrs	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3208      	adds	r2, #8
 800191e:	69b9      	ldr	r1, [r7, #24]
 8001920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0203 	and.w	r2, r3, #3
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80c0 	beq.w	8001ae6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b66      	ldr	r3, [pc, #408]	; (8001b04 <HAL_GPIO_Init+0x324>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	4a65      	ldr	r2, [pc, #404]	; (8001b04 <HAL_GPIO_Init+0x324>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001974:	6453      	str	r3, [r2, #68]	; 0x44
 8001976:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <HAL_GPIO_Init+0x324>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001982:	4a61      	ldr	r2, [pc, #388]	; (8001b08 <HAL_GPIO_Init+0x328>)
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	3302      	adds	r3, #2
 800198a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	220f      	movs	r2, #15
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a58      	ldr	r2, [pc, #352]	; (8001b0c <HAL_GPIO_Init+0x32c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d037      	beq.n	8001a1e <HAL_GPIO_Init+0x23e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a57      	ldr	r2, [pc, #348]	; (8001b10 <HAL_GPIO_Init+0x330>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d031      	beq.n	8001a1a <HAL_GPIO_Init+0x23a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a56      	ldr	r2, [pc, #344]	; (8001b14 <HAL_GPIO_Init+0x334>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d02b      	beq.n	8001a16 <HAL_GPIO_Init+0x236>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a55      	ldr	r2, [pc, #340]	; (8001b18 <HAL_GPIO_Init+0x338>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d025      	beq.n	8001a12 <HAL_GPIO_Init+0x232>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a54      	ldr	r2, [pc, #336]	; (8001b1c <HAL_GPIO_Init+0x33c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d01f      	beq.n	8001a0e <HAL_GPIO_Init+0x22e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a53      	ldr	r2, [pc, #332]	; (8001b20 <HAL_GPIO_Init+0x340>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d019      	beq.n	8001a0a <HAL_GPIO_Init+0x22a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a52      	ldr	r2, [pc, #328]	; (8001b24 <HAL_GPIO_Init+0x344>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_GPIO_Init+0x226>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a51      	ldr	r2, [pc, #324]	; (8001b28 <HAL_GPIO_Init+0x348>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00d      	beq.n	8001a02 <HAL_GPIO_Init+0x222>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a50      	ldr	r2, [pc, #320]	; (8001b2c <HAL_GPIO_Init+0x34c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d007      	beq.n	80019fe <HAL_GPIO_Init+0x21e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4f      	ldr	r2, [pc, #316]	; (8001b30 <HAL_GPIO_Init+0x350>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d101      	bne.n	80019fa <HAL_GPIO_Init+0x21a>
 80019f6:	2309      	movs	r3, #9
 80019f8:	e012      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 80019fa:	230a      	movs	r3, #10
 80019fc:	e010      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 80019fe:	2308      	movs	r3, #8
 8001a00:	e00e      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 8001a02:	2307      	movs	r3, #7
 8001a04:	e00c      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 8001a06:	2306      	movs	r3, #6
 8001a08:	e00a      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 8001a0a:	2305      	movs	r3, #5
 8001a0c:	e008      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 8001a0e:	2304      	movs	r3, #4
 8001a10:	e006      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 8001a12:	2303      	movs	r3, #3
 8001a14:	e004      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e002      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <HAL_GPIO_Init+0x240>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	f002 0203 	and.w	r2, r2, #3
 8001a26:	0092      	lsls	r2, r2, #2
 8001a28:	4093      	lsls	r3, r2
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a30:	4935      	ldr	r1, [pc, #212]	; (8001b08 <HAL_GPIO_Init+0x328>)
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	089b      	lsrs	r3, r3, #2
 8001a36:	3302      	adds	r3, #2
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a3e:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <HAL_GPIO_Init+0x354>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a62:	4a34      	ldr	r2, [pc, #208]	; (8001b34 <HAL_GPIO_Init+0x354>)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a68:	4b32      	ldr	r3, [pc, #200]	; (8001b34 <HAL_GPIO_Init+0x354>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a8c:	4a29      	ldr	r2, [pc, #164]	; (8001b34 <HAL_GPIO_Init+0x354>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a92:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <HAL_GPIO_Init+0x354>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ab6:	4a1f      	ldr	r2, [pc, #124]	; (8001b34 <HAL_GPIO_Init+0x354>)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001abc:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <HAL_GPIO_Init+0x354>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae0:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <HAL_GPIO_Init+0x354>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	2b0f      	cmp	r3, #15
 8001af0:	f67f ae84 	bls.w	80017fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3724      	adds	r7, #36	; 0x24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40013800 	.word	0x40013800
 8001b0c:	40020000 	.word	0x40020000
 8001b10:	40020400 	.word	0x40020400
 8001b14:	40020800 	.word	0x40020800
 8001b18:	40020c00 	.word	0x40020c00
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40021400 	.word	0x40021400
 8001b24:	40021800 	.word	0x40021800
 8001b28:	40021c00 	.word	0x40021c00
 8001b2c:	40022000 	.word	0x40022000
 8001b30:	40022400 	.word	0x40022400
 8001b34:	40013c00 	.word	0x40013c00

08001b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	e001      	b.n	8001b5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
 8001b74:	4613      	mov	r3, r2
 8001b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b78:	787b      	ldrb	r3, [r7, #1]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b84:	e003      	b.n	8001b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b86:	887b      	ldrh	r3, [r7, #2]
 8001b88:	041a      	lsls	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	619a      	str	r2, [r3, #24]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	603b      	str	r3, [r7, #0]
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_PWREx_EnableOverDrive+0x90>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	4a1f      	ldr	r2, [pc, #124]	; (8001c2c <HAL_PWREx_EnableOverDrive+0x90>)
 8001bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <HAL_PWREx_EnableOverDrive+0x90>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_PWREx_EnableOverDrive+0x94>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bc8:	f7ff fcc8 	bl	800155c <HAL_GetTick>
 8001bcc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bce:	e009      	b.n	8001be4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bd0:	f7ff fcc4 	bl	800155c <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bde:	d901      	bls.n	8001be4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e01f      	b.n	8001c24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <HAL_PWREx_EnableOverDrive+0x98>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf0:	d1ee      	bne.n	8001bd0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001bf2:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf8:	f7ff fcb0 	bl	800155c <HAL_GetTick>
 8001bfc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bfe:	e009      	b.n	8001c14 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c00:	f7ff fcac 	bl	800155c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c0e:	d901      	bls.n	8001c14 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e007      	b.n	8001c24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c20:	d1ee      	bne.n	8001c00 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	420e0040 	.word	0x420e0040
 8001c34:	40007000 	.word	0x40007000
 8001c38:	420e0044 	.word	0x420e0044

08001c3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e264      	b.n	8002118 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d075      	beq.n	8001d46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c5a:	4ba3      	ldr	r3, [pc, #652]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d00c      	beq.n	8001c80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c66:	4ba0      	ldr	r3, [pc, #640]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d112      	bne.n	8001c98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c72:	4b9d      	ldr	r3, [pc, #628]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c7e:	d10b      	bne.n	8001c98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c80:	4b99      	ldr	r3, [pc, #612]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d05b      	beq.n	8001d44 <HAL_RCC_OscConfig+0x108>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d157      	bne.n	8001d44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e23f      	b.n	8002118 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca0:	d106      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x74>
 8001ca2:	4b91      	ldr	r3, [pc, #580]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a90      	ldr	r2, [pc, #576]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e01d      	b.n	8001cec <HAL_RCC_OscConfig+0xb0>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x98>
 8001cba:	4b8b      	ldr	r3, [pc, #556]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a8a      	ldr	r2, [pc, #552]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b88      	ldr	r3, [pc, #544]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a87      	ldr	r2, [pc, #540]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e00b      	b.n	8001cec <HAL_RCC_OscConfig+0xb0>
 8001cd4:	4b84      	ldr	r3, [pc, #528]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a83      	ldr	r2, [pc, #524]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b81      	ldr	r3, [pc, #516]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a80      	ldr	r2, [pc, #512]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d013      	beq.n	8001d1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fc32 	bl	800155c <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cfc:	f7ff fc2e 	bl	800155c <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	; 0x64
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e204      	b.n	8002118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	4b76      	ldr	r3, [pc, #472]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0xc0>
 8001d1a:	e014      	b.n	8001d46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fc1e 	bl	800155c <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d24:	f7ff fc1a 	bl	800155c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	; 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e1f0      	b.n	8002118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	4b6c      	ldr	r3, [pc, #432]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0xe8>
 8001d42:	e000      	b.n	8001d46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d063      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d52:	4b65      	ldr	r3, [pc, #404]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00b      	beq.n	8001d76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d5e:	4b62      	ldr	r3, [pc, #392]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d11c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6a:	4b5f      	ldr	r3, [pc, #380]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d116      	bne.n	8001da4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d76:	4b5c      	ldr	r3, [pc, #368]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d005      	beq.n	8001d8e <HAL_RCC_OscConfig+0x152>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d001      	beq.n	8001d8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e1c4      	b.n	8002118 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8e:	4b56      	ldr	r3, [pc, #344]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4952      	ldr	r1, [pc, #328]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da2:	e03a      	b.n	8001e1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d020      	beq.n	8001dee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dac:	4b4f      	ldr	r3, [pc, #316]	; (8001eec <HAL_RCC_OscConfig+0x2b0>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db2:	f7ff fbd3 	bl	800155c <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dba:	f7ff fbcf 	bl	800155c <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e1a5      	b.n	8002118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dcc:	4b46      	ldr	r3, [pc, #280]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd8:	4b43      	ldr	r3, [pc, #268]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4940      	ldr	r1, [pc, #256]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]
 8001dec:	e015      	b.n	8001e1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dee:	4b3f      	ldr	r3, [pc, #252]	; (8001eec <HAL_RCC_OscConfig+0x2b0>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7ff fbb2 	bl	800155c <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfc:	f7ff fbae 	bl	800155c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e184      	b.n	8002118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d030      	beq.n	8001e88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d016      	beq.n	8001e5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e2e:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <HAL_RCC_OscConfig+0x2b4>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e34:	f7ff fb92 	bl	800155c <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7ff fb8e 	bl	800155c <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e164      	b.n	8002118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4e:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x200>
 8001e5a:	e015      	b.n	8001e88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e5c:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <HAL_RCC_OscConfig+0x2b4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e62:	f7ff fb7b 	bl	800155c <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6a:	f7ff fb77 	bl	800155c <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e14d      	b.n	8002118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f0      	bne.n	8001e6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80a0 	beq.w	8001fd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10f      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4a0e      	ldr	r2, [pc, #56]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_RCC_OscConfig+0x2b8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d121      	bne.n	8001f16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <HAL_RCC_OscConfig+0x2b8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <HAL_RCC_OscConfig+0x2b8>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ede:	f7ff fb3d 	bl	800155c <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	e011      	b.n	8001f0a <HAL_RCC_OscConfig+0x2ce>
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	42470000 	.word	0x42470000
 8001ef0:	42470e80 	.word	0x42470e80
 8001ef4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef8:	f7ff fb30 	bl	800155c <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e106      	b.n	8002118 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0a:	4b85      	ldr	r3, [pc, #532]	; (8002120 <HAL_RCC_OscConfig+0x4e4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d106      	bne.n	8001f2c <HAL_RCC_OscConfig+0x2f0>
 8001f1e:	4b81      	ldr	r3, [pc, #516]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 8001f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f22:	4a80      	ldr	r2, [pc, #512]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6713      	str	r3, [r2, #112]	; 0x70
 8001f2a:	e01c      	b.n	8001f66 <HAL_RCC_OscConfig+0x32a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b05      	cmp	r3, #5
 8001f32:	d10c      	bne.n	8001f4e <HAL_RCC_OscConfig+0x312>
 8001f34:	4b7b      	ldr	r3, [pc, #492]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 8001f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f38:	4a7a      	ldr	r2, [pc, #488]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 8001f3a:	f043 0304 	orr.w	r3, r3, #4
 8001f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f40:	4b78      	ldr	r3, [pc, #480]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f44:	4a77      	ldr	r2, [pc, #476]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4c:	e00b      	b.n	8001f66 <HAL_RCC_OscConfig+0x32a>
 8001f4e:	4b75      	ldr	r3, [pc, #468]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f52:	4a74      	ldr	r2, [pc, #464]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5a:	4b72      	ldr	r3, [pc, #456]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5e:	4a71      	ldr	r2, [pc, #452]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 8001f60:	f023 0304 	bic.w	r3, r3, #4
 8001f64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d015      	beq.n	8001f9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6e:	f7ff faf5 	bl	800155c <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f7ff faf1 	bl	800155c <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e0c5      	b.n	8002118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8c:	4b65      	ldr	r3, [pc, #404]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0ee      	beq.n	8001f76 <HAL_RCC_OscConfig+0x33a>
 8001f98:	e014      	b.n	8001fc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9a:	f7ff fadf 	bl	800155c <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa0:	e00a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa2:	f7ff fadb 	bl	800155c <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e0af      	b.n	8002118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb8:	4b5a      	ldr	r3, [pc, #360]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 8001fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1ee      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc4:	7dfb      	ldrb	r3, [r7, #23]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d105      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fca:	4b56      	ldr	r3, [pc, #344]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a55      	ldr	r2, [pc, #340]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 8001fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 809b 	beq.w	8002116 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fe0:	4b50      	ldr	r3, [pc, #320]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 030c 	and.w	r3, r3, #12
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d05c      	beq.n	80020a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d141      	bne.n	8002078 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff4:	4b4c      	ldr	r3, [pc, #304]	; (8002128 <HAL_RCC_OscConfig+0x4ec>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7ff faaf 	bl	800155c <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002002:	f7ff faab 	bl	800155c <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e081      	b.n	8002118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002014:	4b43      	ldr	r3, [pc, #268]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f0      	bne.n	8002002 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69da      	ldr	r2, [r3, #28]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	019b      	lsls	r3, r3, #6
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	085b      	lsrs	r3, r3, #1
 8002038:	3b01      	subs	r3, #1
 800203a:	041b      	lsls	r3, r3, #16
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	061b      	lsls	r3, r3, #24
 8002044:	4937      	ldr	r1, [pc, #220]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 8002046:	4313      	orrs	r3, r2
 8002048:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800204a:	4b37      	ldr	r3, [pc, #220]	; (8002128 <HAL_RCC_OscConfig+0x4ec>)
 800204c:	2201      	movs	r2, #1
 800204e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff fa84 	bl	800155c <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002058:	f7ff fa80 	bl	800155c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e056      	b.n	8002118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206a:	4b2e      	ldr	r3, [pc, #184]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x41c>
 8002076:	e04e      	b.n	8002116 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002078:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <HAL_RCC_OscConfig+0x4ec>)
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7ff fa6d 	bl	800155c <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002086:	f7ff fa69 	bl	800155c <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e03f      	b.n	8002118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002098:	4b22      	ldr	r3, [pc, #136]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f0      	bne.n	8002086 <HAL_RCC_OscConfig+0x44a>
 80020a4:	e037      	b.n	8002116 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e032      	b.n	8002118 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020b2:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <HAL_RCC_OscConfig+0x4e8>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d028      	beq.n	8002112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d121      	bne.n	8002112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d8:	429a      	cmp	r2, r3
 80020da:	d11a      	bne.n	8002112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020e2:	4013      	ands	r3, r2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d111      	bne.n	8002112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f8:	085b      	lsrs	r3, r3, #1
 80020fa:	3b01      	subs	r3, #1
 80020fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020fe:	429a      	cmp	r2, r3
 8002100:	d107      	bne.n	8002112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800210e:	429a      	cmp	r2, r3
 8002110:	d001      	beq.n	8002116 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40007000 	.word	0x40007000
 8002124:	40023800 	.word	0x40023800
 8002128:	42470060 	.word	0x42470060

0800212c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0cc      	b.n	80022da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002140:	4b68      	ldr	r3, [pc, #416]	; (80022e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d90c      	bls.n	8002168 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b65      	ldr	r3, [pc, #404]	; (80022e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b63      	ldr	r3, [pc, #396]	; (80022e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0b8      	b.n	80022da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d020      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002180:	4b59      	ldr	r3, [pc, #356]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	4a58      	ldr	r2, [pc, #352]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800218a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002198:	4b53      	ldr	r3, [pc, #332]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4a52      	ldr	r2, [pc, #328]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a4:	4b50      	ldr	r3, [pc, #320]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	494d      	ldr	r1, [pc, #308]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d044      	beq.n	800224c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ca:	4b47      	ldr	r3, [pc, #284]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d119      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e07f      	b.n	80022da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d003      	beq.n	80021ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ea:	4b3f      	ldr	r3, [pc, #252]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e06f      	b.n	80022da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fa:	4b3b      	ldr	r3, [pc, #236]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e067      	b.n	80022da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220a:	4b37      	ldr	r3, [pc, #220]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f023 0203 	bic.w	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4934      	ldr	r1, [pc, #208]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	4313      	orrs	r3, r2
 800221a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800221c:	f7ff f99e 	bl	800155c <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	e00a      	b.n	800223a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002224:	f7ff f99a 	bl	800155c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e04f      	b.n	80022da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 020c 	and.w	r2, r3, #12
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	429a      	cmp	r2, r3
 800224a:	d1eb      	bne.n	8002224 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800224c:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_RCC_ClockConfig+0x1b8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d20c      	bcs.n	8002274 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <HAL_RCC_ClockConfig+0x1b8>)
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e032      	b.n	80022da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d008      	beq.n	8002292 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002280:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4916      	ldr	r1, [pc, #88]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	4313      	orrs	r3, r2
 8002290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d009      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	490e      	ldr	r1, [pc, #56]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022b2:	f000 f821 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 80022b6:	4602      	mov	r2, r0
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	490a      	ldr	r1, [pc, #40]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	5ccb      	ldrb	r3, [r1, r3]
 80022c6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ca:	4a09      	ldr	r2, [pc, #36]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff f8fe 	bl	80014d4 <HAL_InitTick>

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023c00 	.word	0x40023c00
 80022e8:	40023800 	.word	0x40023800
 80022ec:	080051dc 	.word	0x080051dc
 80022f0:	20000000 	.word	0x20000000
 80022f4:	20000004 	.word	0x20000004

080022f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f8:	b5b0      	push	{r4, r5, r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022fe:	2100      	movs	r1, #0
 8002300:	6079      	str	r1, [r7, #4]
 8002302:	2100      	movs	r1, #0
 8002304:	60f9      	str	r1, [r7, #12]
 8002306:	2100      	movs	r1, #0
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800230a:	2100      	movs	r1, #0
 800230c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800230e:	4952      	ldr	r1, [pc, #328]	; (8002458 <HAL_RCC_GetSysClockFreq+0x160>)
 8002310:	6889      	ldr	r1, [r1, #8]
 8002312:	f001 010c 	and.w	r1, r1, #12
 8002316:	2908      	cmp	r1, #8
 8002318:	d00d      	beq.n	8002336 <HAL_RCC_GetSysClockFreq+0x3e>
 800231a:	2908      	cmp	r1, #8
 800231c:	f200 8094 	bhi.w	8002448 <HAL_RCC_GetSysClockFreq+0x150>
 8002320:	2900      	cmp	r1, #0
 8002322:	d002      	beq.n	800232a <HAL_RCC_GetSysClockFreq+0x32>
 8002324:	2904      	cmp	r1, #4
 8002326:	d003      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x38>
 8002328:	e08e      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800232a:	4b4c      	ldr	r3, [pc, #304]	; (800245c <HAL_RCC_GetSysClockFreq+0x164>)
 800232c:	60bb      	str	r3, [r7, #8]
       break;
 800232e:	e08e      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002330:	4b4b      	ldr	r3, [pc, #300]	; (8002460 <HAL_RCC_GetSysClockFreq+0x168>)
 8002332:	60bb      	str	r3, [r7, #8]
      break;
 8002334:	e08b      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002336:	4948      	ldr	r1, [pc, #288]	; (8002458 <HAL_RCC_GetSysClockFreq+0x160>)
 8002338:	6849      	ldr	r1, [r1, #4]
 800233a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800233e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002340:	4945      	ldr	r1, [pc, #276]	; (8002458 <HAL_RCC_GetSysClockFreq+0x160>)
 8002342:	6849      	ldr	r1, [r1, #4]
 8002344:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002348:	2900      	cmp	r1, #0
 800234a:	d024      	beq.n	8002396 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800234c:	4942      	ldr	r1, [pc, #264]	; (8002458 <HAL_RCC_GetSysClockFreq+0x160>)
 800234e:	6849      	ldr	r1, [r1, #4]
 8002350:	0989      	lsrs	r1, r1, #6
 8002352:	4608      	mov	r0, r1
 8002354:	f04f 0100 	mov.w	r1, #0
 8002358:	f240 14ff 	movw	r4, #511	; 0x1ff
 800235c:	f04f 0500 	mov.w	r5, #0
 8002360:	ea00 0204 	and.w	r2, r0, r4
 8002364:	ea01 0305 	and.w	r3, r1, r5
 8002368:	493d      	ldr	r1, [pc, #244]	; (8002460 <HAL_RCC_GetSysClockFreq+0x168>)
 800236a:	fb01 f003 	mul.w	r0, r1, r3
 800236e:	2100      	movs	r1, #0
 8002370:	fb01 f102 	mul.w	r1, r1, r2
 8002374:	1844      	adds	r4, r0, r1
 8002376:	493a      	ldr	r1, [pc, #232]	; (8002460 <HAL_RCC_GetSysClockFreq+0x168>)
 8002378:	fba2 0101 	umull	r0, r1, r2, r1
 800237c:	1863      	adds	r3, r4, r1
 800237e:	4619      	mov	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	461a      	mov	r2, r3
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	f7fd ff82 	bl	8000290 <__aeabi_uldivmod>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4613      	mov	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	e04a      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002396:	4b30      	ldr	r3, [pc, #192]	; (8002458 <HAL_RCC_GetSysClockFreq+0x160>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	099b      	lsrs	r3, r3, #6
 800239c:	461a      	mov	r2, r3
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023a6:	f04f 0100 	mov.w	r1, #0
 80023aa:	ea02 0400 	and.w	r4, r2, r0
 80023ae:	ea03 0501 	and.w	r5, r3, r1
 80023b2:	4620      	mov	r0, r4
 80023b4:	4629      	mov	r1, r5
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	014b      	lsls	r3, r1, #5
 80023c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023c4:	0142      	lsls	r2, r0, #5
 80023c6:	4610      	mov	r0, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	1b00      	subs	r0, r0, r4
 80023cc:	eb61 0105 	sbc.w	r1, r1, r5
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	018b      	lsls	r3, r1, #6
 80023da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023de:	0182      	lsls	r2, r0, #6
 80023e0:	1a12      	subs	r2, r2, r0
 80023e2:	eb63 0301 	sbc.w	r3, r3, r1
 80023e6:	f04f 0000 	mov.w	r0, #0
 80023ea:	f04f 0100 	mov.w	r1, #0
 80023ee:	00d9      	lsls	r1, r3, #3
 80023f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023f4:	00d0      	lsls	r0, r2, #3
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	1912      	adds	r2, r2, r4
 80023fc:	eb45 0303 	adc.w	r3, r5, r3
 8002400:	f04f 0000 	mov.w	r0, #0
 8002404:	f04f 0100 	mov.w	r1, #0
 8002408:	0299      	lsls	r1, r3, #10
 800240a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800240e:	0290      	lsls	r0, r2, #10
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	461a      	mov	r2, r3
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	f7fd ff36 	bl	8000290 <__aeabi_uldivmod>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4613      	mov	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800242c:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <HAL_RCC_GetSysClockFreq+0x160>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	3301      	adds	r3, #1
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	fbb2 f3f3 	udiv	r3, r2, r3
 8002444:	60bb      	str	r3, [r7, #8]
      break;
 8002446:	e002      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <HAL_RCC_GetSysClockFreq+0x164>)
 800244a:	60bb      	str	r3, [r7, #8]
      break;
 800244c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800244e:	68bb      	ldr	r3, [r7, #8]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bdb0      	pop	{r4, r5, r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	00f42400 	.word	0x00f42400
 8002460:	017d7840 	.word	0x017d7840

08002464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <HAL_RCC_GetHCLKFreq+0x14>)
 800246a:	681b      	ldr	r3, [r3, #0]
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000000 	.word	0x20000000

0800247c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002480:	f7ff fff0 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 8002484:	4602      	mov	r2, r0
 8002486:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	0a9b      	lsrs	r3, r3, #10
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	4903      	ldr	r1, [pc, #12]	; (80024a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002492:	5ccb      	ldrb	r3, [r1, r3]
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40023800 	.word	0x40023800
 80024a0:	080051ec 	.word	0x080051ec

080024a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024a8:	f7ff ffdc 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	0b5b      	lsrs	r3, r3, #13
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	4903      	ldr	r1, [pc, #12]	; (80024c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40023800 	.word	0x40023800
 80024c8:	080051ec 	.word	0x080051ec

080024cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e041      	b.n	8002562 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d106      	bne.n	80024f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe fcd2 	bl	8000e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3304      	adds	r3, #4
 8002508:	4619      	mov	r1, r3
 800250a:	4610      	mov	r0, r2
 800250c:	f000 fcbe 	bl	8002e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b01      	cmp	r3, #1
 800257e:	d001      	beq.n	8002584 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e046      	b.n	8002612 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a23      	ldr	r2, [pc, #140]	; (8002620 <HAL_TIM_Base_Start+0xb4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d022      	beq.n	80025dc <HAL_TIM_Base_Start+0x70>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259e:	d01d      	beq.n	80025dc <HAL_TIM_Base_Start+0x70>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a1f      	ldr	r2, [pc, #124]	; (8002624 <HAL_TIM_Base_Start+0xb8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d018      	beq.n	80025dc <HAL_TIM_Base_Start+0x70>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <HAL_TIM_Base_Start+0xbc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d013      	beq.n	80025dc <HAL_TIM_Base_Start+0x70>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a1c      	ldr	r2, [pc, #112]	; (800262c <HAL_TIM_Base_Start+0xc0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00e      	beq.n	80025dc <HAL_TIM_Base_Start+0x70>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1b      	ldr	r2, [pc, #108]	; (8002630 <HAL_TIM_Base_Start+0xc4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d009      	beq.n	80025dc <HAL_TIM_Base_Start+0x70>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a19      	ldr	r2, [pc, #100]	; (8002634 <HAL_TIM_Base_Start+0xc8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d004      	beq.n	80025dc <HAL_TIM_Base_Start+0x70>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a18      	ldr	r2, [pc, #96]	; (8002638 <HAL_TIM_Base_Start+0xcc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d111      	bne.n	8002600 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b06      	cmp	r3, #6
 80025ec:	d010      	beq.n	8002610 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f042 0201 	orr.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025fe:	e007      	b.n	8002610 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40010000 	.word	0x40010000
 8002624:	40000400 	.word	0x40000400
 8002628:	40000800 	.word	0x40000800
 800262c:	40000c00 	.word	0x40000c00
 8002630:	40010400 	.word	0x40010400
 8002634:	40014000 	.word	0x40014000
 8002638:	40001800 	.word	0x40001800

0800263c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e041      	b.n	80026d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d106      	bne.n	8002668 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f839 	bl	80026da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3304      	adds	r3, #4
 8002678:	4619      	mov	r1, r3
 800267a:	4610      	mov	r0, r2
 800267c:	f000 fc06 	bl	8002e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d109      	bne.n	8002714 <HAL_TIM_PWM_Start+0x24>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	bf14      	ite	ne
 800270c:	2301      	movne	r3, #1
 800270e:	2300      	moveq	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	e022      	b.n	800275a <HAL_TIM_PWM_Start+0x6a>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b04      	cmp	r3, #4
 8002718:	d109      	bne.n	800272e <HAL_TIM_PWM_Start+0x3e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b01      	cmp	r3, #1
 8002724:	bf14      	ite	ne
 8002726:	2301      	movne	r3, #1
 8002728:	2300      	moveq	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	e015      	b.n	800275a <HAL_TIM_PWM_Start+0x6a>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b08      	cmp	r3, #8
 8002732:	d109      	bne.n	8002748 <HAL_TIM_PWM_Start+0x58>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b01      	cmp	r3, #1
 800273e:	bf14      	ite	ne
 8002740:	2301      	movne	r3, #1
 8002742:	2300      	moveq	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	e008      	b.n	800275a <HAL_TIM_PWM_Start+0x6a>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	bf14      	ite	ne
 8002754:	2301      	movne	r3, #1
 8002756:	2300      	moveq	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e07c      	b.n	800285c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d104      	bne.n	8002772 <HAL_TIM_PWM_Start+0x82>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002770:	e013      	b.n	800279a <HAL_TIM_PWM_Start+0xaa>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b04      	cmp	r3, #4
 8002776:	d104      	bne.n	8002782 <HAL_TIM_PWM_Start+0x92>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002780:	e00b      	b.n	800279a <HAL_TIM_PWM_Start+0xaa>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b08      	cmp	r3, #8
 8002786:	d104      	bne.n	8002792 <HAL_TIM_PWM_Start+0xa2>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002790:	e003      	b.n	800279a <HAL_TIM_PWM_Start+0xaa>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2202      	movs	r2, #2
 8002796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2201      	movs	r2, #1
 80027a0:	6839      	ldr	r1, [r7, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 feed 	bl	8003582 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a2d      	ldr	r2, [pc, #180]	; (8002864 <HAL_TIM_PWM_Start+0x174>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d004      	beq.n	80027bc <HAL_TIM_PWM_Start+0xcc>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a2c      	ldr	r2, [pc, #176]	; (8002868 <HAL_TIM_PWM_Start+0x178>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d101      	bne.n	80027c0 <HAL_TIM_PWM_Start+0xd0>
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_TIM_PWM_Start+0xd2>
 80027c0:	2300      	movs	r3, #0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a22      	ldr	r2, [pc, #136]	; (8002864 <HAL_TIM_PWM_Start+0x174>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d022      	beq.n	8002826 <HAL_TIM_PWM_Start+0x136>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e8:	d01d      	beq.n	8002826 <HAL_TIM_PWM_Start+0x136>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1f      	ldr	r2, [pc, #124]	; (800286c <HAL_TIM_PWM_Start+0x17c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d018      	beq.n	8002826 <HAL_TIM_PWM_Start+0x136>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HAL_TIM_PWM_Start+0x180>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_TIM_PWM_Start+0x136>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_TIM_PWM_Start+0x184>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_TIM_PWM_Start+0x136>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a16      	ldr	r2, [pc, #88]	; (8002868 <HAL_TIM_PWM_Start+0x178>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_TIM_PWM_Start+0x136>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a18      	ldr	r2, [pc, #96]	; (8002878 <HAL_TIM_PWM_Start+0x188>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_TIM_PWM_Start+0x136>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a16      	ldr	r2, [pc, #88]	; (800287c <HAL_TIM_PWM_Start+0x18c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d111      	bne.n	800284a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b06      	cmp	r3, #6
 8002836:	d010      	beq.n	800285a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002848:	e007      	b.n	800285a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0201 	orr.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40010000 	.word	0x40010000
 8002868:	40010400 	.word	0x40010400
 800286c:	40000400 	.word	0x40000400
 8002870:	40000800 	.word	0x40000800
 8002874:	40000c00 	.word	0x40000c00
 8002878:	40014000 	.word	0x40014000
 800287c:	40001800 	.word	0x40001800

08002880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b02      	cmp	r3, #2
 8002894:	d122      	bne.n	80028dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d11b      	bne.n	80028dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0202 	mvn.w	r2, #2
 80028ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fac3 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 80028c8:	e005      	b.n	80028d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fab5 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fac6 	bl	8002e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d122      	bne.n	8002930 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d11b      	bne.n	8002930 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0204 	mvn.w	r2, #4
 8002900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2202      	movs	r2, #2
 8002906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fa99 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 800291c:	e005      	b.n	800292a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fa8b 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fa9c 	bl	8002e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b08      	cmp	r3, #8
 800293c:	d122      	bne.n	8002984 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b08      	cmp	r3, #8
 800294a:	d11b      	bne.n	8002984 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0208 	mvn.w	r2, #8
 8002954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2204      	movs	r2, #4
 800295a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fa6f 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 8002970:	e005      	b.n	800297e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fa61 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fa72 	bl	8002e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	2b10      	cmp	r3, #16
 8002990:	d122      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	2b10      	cmp	r3, #16
 800299e:	d11b      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0210 	mvn.w	r2, #16
 80029a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2208      	movs	r2, #8
 80029ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fa45 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 80029c4:	e005      	b.n	80029d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fa37 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fa48 	bl	8002e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d10e      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d107      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0201 	mvn.w	r2, #1
 80029fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fa11 	bl	8002e26 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0e:	2b80      	cmp	r3, #128	; 0x80
 8002a10:	d10e      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1c:	2b80      	cmp	r3, #128	; 0x80
 8002a1e:	d107      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fe54 	bl	80036d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3a:	2b40      	cmp	r3, #64	; 0x40
 8002a3c:	d10e      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a48:	2b40      	cmp	r3, #64	; 0x40
 8002a4a:	d107      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fa0d 	bl	8002e76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	d10e      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	d107      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0220 	mvn.w	r2, #32
 8002a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fe1e 	bl	80036c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e0ae      	b.n	8002c0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b0c      	cmp	r3, #12
 8002aba:	f200 809f 	bhi.w	8002bfc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002abe:	a201      	add	r2, pc, #4	; (adr r2, 8002ac4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac4:	08002af9 	.word	0x08002af9
 8002ac8:	08002bfd 	.word	0x08002bfd
 8002acc:	08002bfd 	.word	0x08002bfd
 8002ad0:	08002bfd 	.word	0x08002bfd
 8002ad4:	08002b39 	.word	0x08002b39
 8002ad8:	08002bfd 	.word	0x08002bfd
 8002adc:	08002bfd 	.word	0x08002bfd
 8002ae0:	08002bfd 	.word	0x08002bfd
 8002ae4:	08002b7b 	.word	0x08002b7b
 8002ae8:	08002bfd 	.word	0x08002bfd
 8002aec:	08002bfd 	.word	0x08002bfd
 8002af0:	08002bfd 	.word	0x08002bfd
 8002af4:	08002bbb 	.word	0x08002bbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fa64 	bl	8002fcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0208 	orr.w	r2, r2, #8
 8002b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699a      	ldr	r2, [r3, #24]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0204 	bic.w	r2, r2, #4
 8002b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6999      	ldr	r1, [r3, #24]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	619a      	str	r2, [r3, #24]
      break;
 8002b36:	e064      	b.n	8002c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fab4 	bl	80030ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6999      	ldr	r1, [r3, #24]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	021a      	lsls	r2, r3, #8
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	619a      	str	r2, [r3, #24]
      break;
 8002b78:	e043      	b.n	8002c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68b9      	ldr	r1, [r7, #8]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 fb09 	bl	8003198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69da      	ldr	r2, [r3, #28]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 0208 	orr.w	r2, r2, #8
 8002b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69da      	ldr	r2, [r3, #28]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0204 	bic.w	r2, r2, #4
 8002ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69d9      	ldr	r1, [r3, #28]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	61da      	str	r2, [r3, #28]
      break;
 8002bb8:	e023      	b.n	8002c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 fb5d 	bl	8003280 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69da      	ldr	r2, [r3, #28]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69da      	ldr	r2, [r3, #28]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	69d9      	ldr	r1, [r3, #28]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	021a      	lsls	r2, r3, #8
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	61da      	str	r2, [r3, #28]
      break;
 8002bfa:	e002      	b.n	8002c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8002c00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_TIM_ConfigClockSource+0x1c>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e0b4      	b.n	8002d9a <HAL_TIM_ConfigClockSource+0x186>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c68:	d03e      	beq.n	8002ce8 <HAL_TIM_ConfigClockSource+0xd4>
 8002c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c6e:	f200 8087 	bhi.w	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
 8002c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c76:	f000 8086 	beq.w	8002d86 <HAL_TIM_ConfigClockSource+0x172>
 8002c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7e:	d87f      	bhi.n	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
 8002c80:	2b70      	cmp	r3, #112	; 0x70
 8002c82:	d01a      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0xa6>
 8002c84:	2b70      	cmp	r3, #112	; 0x70
 8002c86:	d87b      	bhi.n	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
 8002c88:	2b60      	cmp	r3, #96	; 0x60
 8002c8a:	d050      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x11a>
 8002c8c:	2b60      	cmp	r3, #96	; 0x60
 8002c8e:	d877      	bhi.n	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
 8002c90:	2b50      	cmp	r3, #80	; 0x50
 8002c92:	d03c      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0xfa>
 8002c94:	2b50      	cmp	r3, #80	; 0x50
 8002c96:	d873      	bhi.n	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
 8002c98:	2b40      	cmp	r3, #64	; 0x40
 8002c9a:	d058      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x13a>
 8002c9c:	2b40      	cmp	r3, #64	; 0x40
 8002c9e:	d86f      	bhi.n	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca0:	2b30      	cmp	r3, #48	; 0x30
 8002ca2:	d064      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0x15a>
 8002ca4:	2b30      	cmp	r3, #48	; 0x30
 8002ca6:	d86b      	bhi.n	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d060      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0x15a>
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d867      	bhi.n	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d05c      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0x15a>
 8002cb4:	2b10      	cmp	r3, #16
 8002cb6:	d05a      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0x15a>
 8002cb8:	e062      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	6899      	ldr	r1, [r3, #8]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f000 fc3a 	bl	8003542 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	609a      	str	r2, [r3, #8]
      break;
 8002ce6:	e04f      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	6899      	ldr	r1, [r3, #8]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f000 fc23 	bl	8003542 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d0a:	609a      	str	r2, [r3, #8]
      break;
 8002d0c:	e03c      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6859      	ldr	r1, [r3, #4]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f000 fb97 	bl	800344e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2150      	movs	r1, #80	; 0x50
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fbf0 	bl	800350c <TIM_ITRx_SetConfig>
      break;
 8002d2c:	e02c      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6859      	ldr	r1, [r3, #4]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f000 fbb6 	bl	80034ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2160      	movs	r1, #96	; 0x60
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fbe0 	bl	800350c <TIM_ITRx_SetConfig>
      break;
 8002d4c:	e01c      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6859      	ldr	r1, [r3, #4]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f000 fb77 	bl	800344e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2140      	movs	r1, #64	; 0x40
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fbd0 	bl	800350c <TIM_ITRx_SetConfig>
      break;
 8002d6c:	e00c      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4619      	mov	r1, r3
 8002d78:	4610      	mov	r0, r2
 8002d7a:	f000 fbc7 	bl	800350c <TIM_ITRx_SetConfig>
      break;
 8002d7e:	e003      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
      break;
 8002d84:	e000      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_TIM_SlaveConfigSynchro+0x18>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e031      	b.n	8002e1e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002dca:	6839      	ldr	r1, [r7, #0]
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 faad 	bl	800332c <TIM_SlaveTimer_SetConfig>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d009      	beq.n	8002dec <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e018      	b.n	8002e1e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dfa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e0a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a40      	ldr	r2, [pc, #256]	; (8002fa0 <TIM_Base_SetConfig+0x114>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d013      	beq.n	8002ecc <TIM_Base_SetConfig+0x40>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eaa:	d00f      	beq.n	8002ecc <TIM_Base_SetConfig+0x40>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a3d      	ldr	r2, [pc, #244]	; (8002fa4 <TIM_Base_SetConfig+0x118>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00b      	beq.n	8002ecc <TIM_Base_SetConfig+0x40>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a3c      	ldr	r2, [pc, #240]	; (8002fa8 <TIM_Base_SetConfig+0x11c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d007      	beq.n	8002ecc <TIM_Base_SetConfig+0x40>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a3b      	ldr	r2, [pc, #236]	; (8002fac <TIM_Base_SetConfig+0x120>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d003      	beq.n	8002ecc <TIM_Base_SetConfig+0x40>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a3a      	ldr	r2, [pc, #232]	; (8002fb0 <TIM_Base_SetConfig+0x124>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d108      	bne.n	8002ede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a2f      	ldr	r2, [pc, #188]	; (8002fa0 <TIM_Base_SetConfig+0x114>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d02b      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eec:	d027      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a2c      	ldr	r2, [pc, #176]	; (8002fa4 <TIM_Base_SetConfig+0x118>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d023      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a2b      	ldr	r2, [pc, #172]	; (8002fa8 <TIM_Base_SetConfig+0x11c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d01f      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a2a      	ldr	r2, [pc, #168]	; (8002fac <TIM_Base_SetConfig+0x120>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01b      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a29      	ldr	r2, [pc, #164]	; (8002fb0 <TIM_Base_SetConfig+0x124>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d017      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a28      	ldr	r2, [pc, #160]	; (8002fb4 <TIM_Base_SetConfig+0x128>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a27      	ldr	r2, [pc, #156]	; (8002fb8 <TIM_Base_SetConfig+0x12c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00f      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a26      	ldr	r2, [pc, #152]	; (8002fbc <TIM_Base_SetConfig+0x130>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00b      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a25      	ldr	r2, [pc, #148]	; (8002fc0 <TIM_Base_SetConfig+0x134>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d007      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a24      	ldr	r2, [pc, #144]	; (8002fc4 <TIM_Base_SetConfig+0x138>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d003      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a23      	ldr	r2, [pc, #140]	; (8002fc8 <TIM_Base_SetConfig+0x13c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d108      	bne.n	8002f50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <TIM_Base_SetConfig+0x114>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d003      	beq.n	8002f84 <TIM_Base_SetConfig+0xf8>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a0c      	ldr	r2, [pc, #48]	; (8002fb0 <TIM_Base_SetConfig+0x124>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d103      	bne.n	8002f8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	615a      	str	r2, [r3, #20]
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40010000 	.word	0x40010000
 8002fa4:	40000400 	.word	0x40000400
 8002fa8:	40000800 	.word	0x40000800
 8002fac:	40000c00 	.word	0x40000c00
 8002fb0:	40010400 	.word	0x40010400
 8002fb4:	40014000 	.word	0x40014000
 8002fb8:	40014400 	.word	0x40014400
 8002fbc:	40014800 	.word	0x40014800
 8002fc0:	40001800 	.word	0x40001800
 8002fc4:	40001c00 	.word	0x40001c00
 8002fc8:	40002000 	.word	0x40002000

08002fcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f023 0201 	bic.w	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f023 0302 	bic.w	r3, r3, #2
 8003014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a20      	ldr	r2, [pc, #128]	; (80030a4 <TIM_OC1_SetConfig+0xd8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d003      	beq.n	8003030 <TIM_OC1_SetConfig+0x64>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a1f      	ldr	r2, [pc, #124]	; (80030a8 <TIM_OC1_SetConfig+0xdc>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d10c      	bne.n	800304a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f023 0308 	bic.w	r3, r3, #8
 8003036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	4313      	orrs	r3, r2
 8003040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f023 0304 	bic.w	r3, r3, #4
 8003048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <TIM_OC1_SetConfig+0xd8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d003      	beq.n	800305a <TIM_OC1_SetConfig+0x8e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a14      	ldr	r2, [pc, #80]	; (80030a8 <TIM_OC1_SetConfig+0xdc>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d111      	bne.n	800307e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	621a      	str	r2, [r3, #32]
}
 8003098:	bf00      	nop
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	40010000 	.word	0x40010000
 80030a8:	40010400 	.word	0x40010400

080030ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	f023 0210 	bic.w	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f023 0320 	bic.w	r3, r3, #32
 80030f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a22      	ldr	r2, [pc, #136]	; (8003190 <TIM_OC2_SetConfig+0xe4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d003      	beq.n	8003114 <TIM_OC2_SetConfig+0x68>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a21      	ldr	r2, [pc, #132]	; (8003194 <TIM_OC2_SetConfig+0xe8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d10d      	bne.n	8003130 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800311a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800312e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a17      	ldr	r2, [pc, #92]	; (8003190 <TIM_OC2_SetConfig+0xe4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d003      	beq.n	8003140 <TIM_OC2_SetConfig+0x94>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a16      	ldr	r2, [pc, #88]	; (8003194 <TIM_OC2_SetConfig+0xe8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d113      	bne.n	8003168 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800314e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	621a      	str	r2, [r3, #32]
}
 8003182:	bf00      	nop
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40010000 	.word	0x40010000
 8003194:	40010400 	.word	0x40010400

08003198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0303 	bic.w	r3, r3, #3
 80031ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a21      	ldr	r2, [pc, #132]	; (8003278 <TIM_OC3_SetConfig+0xe0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d003      	beq.n	80031fe <TIM_OC3_SetConfig+0x66>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a20      	ldr	r2, [pc, #128]	; (800327c <TIM_OC3_SetConfig+0xe4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d10d      	bne.n	800321a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a16      	ldr	r2, [pc, #88]	; (8003278 <TIM_OC3_SetConfig+0xe0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d003      	beq.n	800322a <TIM_OC3_SetConfig+0x92>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a15      	ldr	r2, [pc, #84]	; (800327c <TIM_OC3_SetConfig+0xe4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d113      	bne.n	8003252 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	621a      	str	r2, [r3, #32]
}
 800326c:	bf00      	nop
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40010000 	.word	0x40010000
 800327c:	40010400 	.word	0x40010400

08003280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	031b      	lsls	r3, r3, #12
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a12      	ldr	r2, [pc, #72]	; (8003324 <TIM_OC4_SetConfig+0xa4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d003      	beq.n	80032e8 <TIM_OC4_SetConfig+0x68>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a11      	ldr	r2, [pc, #68]	; (8003328 <TIM_OC4_SetConfig+0xa8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d109      	bne.n	80032fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	019b      	lsls	r3, r3, #6
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	621a      	str	r2, [r3, #32]
}
 8003316:	bf00      	nop
 8003318:	371c      	adds	r7, #28
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40010000 	.word	0x40010000
 8003328:	40010400 	.word	0x40010400

0800332c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003348:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f023 0307 	bic.w	r3, r3, #7
 800335a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b70      	cmp	r3, #112	; 0x70
 8003374:	d01a      	beq.n	80033ac <TIM_SlaveTimer_SetConfig+0x80>
 8003376:	2b70      	cmp	r3, #112	; 0x70
 8003378:	d860      	bhi.n	800343c <TIM_SlaveTimer_SetConfig+0x110>
 800337a:	2b60      	cmp	r3, #96	; 0x60
 800337c:	d054      	beq.n	8003428 <TIM_SlaveTimer_SetConfig+0xfc>
 800337e:	2b60      	cmp	r3, #96	; 0x60
 8003380:	d85c      	bhi.n	800343c <TIM_SlaveTimer_SetConfig+0x110>
 8003382:	2b50      	cmp	r3, #80	; 0x50
 8003384:	d046      	beq.n	8003414 <TIM_SlaveTimer_SetConfig+0xe8>
 8003386:	2b50      	cmp	r3, #80	; 0x50
 8003388:	d858      	bhi.n	800343c <TIM_SlaveTimer_SetConfig+0x110>
 800338a:	2b40      	cmp	r3, #64	; 0x40
 800338c:	d019      	beq.n	80033c2 <TIM_SlaveTimer_SetConfig+0x96>
 800338e:	2b40      	cmp	r3, #64	; 0x40
 8003390:	d854      	bhi.n	800343c <TIM_SlaveTimer_SetConfig+0x110>
 8003392:	2b30      	cmp	r3, #48	; 0x30
 8003394:	d055      	beq.n	8003442 <TIM_SlaveTimer_SetConfig+0x116>
 8003396:	2b30      	cmp	r3, #48	; 0x30
 8003398:	d850      	bhi.n	800343c <TIM_SlaveTimer_SetConfig+0x110>
 800339a:	2b20      	cmp	r3, #32
 800339c:	d051      	beq.n	8003442 <TIM_SlaveTimer_SetConfig+0x116>
 800339e:	2b20      	cmp	r3, #32
 80033a0:	d84c      	bhi.n	800343c <TIM_SlaveTimer_SetConfig+0x110>
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d04d      	beq.n	8003442 <TIM_SlaveTimer_SetConfig+0x116>
 80033a6:	2b10      	cmp	r3, #16
 80033a8:	d04b      	beq.n	8003442 <TIM_SlaveTimer_SetConfig+0x116>
 80033aa:	e047      	b.n	800343c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	68d9      	ldr	r1, [r3, #12]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f000 f8c1 	bl	8003542 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80033c0:	e040      	b.n	8003444 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b05      	cmp	r3, #5
 80033c8:	d101      	bne.n	80033ce <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e03b      	b.n	8003446 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6a1a      	ldr	r2, [r3, #32]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033f4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	621a      	str	r2, [r3, #32]
      break;
 8003412:	e017      	b.n	8003444 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	6899      	ldr	r1, [r3, #8]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	461a      	mov	r2, r3
 8003422:	f000 f814 	bl	800344e <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003426:	e00d      	b.n	8003444 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	6899      	ldr	r1, [r3, #8]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	461a      	mov	r2, r3
 8003436:	f000 f839 	bl	80034ac <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800343a:	e003      	b.n	8003444 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	75fb      	strb	r3, [r7, #23]
      break;
 8003440:	e000      	b.n	8003444 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003442:	bf00      	nop
  }

  return status;
 8003444:	7dfb      	ldrb	r3, [r7, #23]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800344e:	b480      	push	{r7}
 8003450:	b087      	sub	sp, #28
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	f023 0201 	bic.w	r2, r3, #1
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003478:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f023 030a 	bic.w	r3, r3, #10
 800348a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	621a      	str	r2, [r3, #32]
}
 80034a0:	bf00      	nop
 80034a2:	371c      	adds	r7, #28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f023 0210 	bic.w	r2, r3, #16
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	031b      	lsls	r3, r3, #12
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	621a      	str	r2, [r3, #32]
}
 8003500:	bf00      	nop
 8003502:	371c      	adds	r7, #28
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003522:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	f043 0307 	orr.w	r3, r3, #7
 800352e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	609a      	str	r2, [r3, #8]
}
 8003536:	bf00      	nop
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003542:	b480      	push	{r7}
 8003544:	b087      	sub	sp, #28
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800355c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	021a      	lsls	r2, r3, #8
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	431a      	orrs	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4313      	orrs	r3, r2
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	609a      	str	r2, [r3, #8]
}
 8003576:	bf00      	nop
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003582:	b480      	push	{r7}
 8003584:	b087      	sub	sp, #28
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	2201      	movs	r2, #1
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a1a      	ldr	r2, [r3, #32]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	401a      	ands	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a1a      	ldr	r2, [r3, #32]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f003 031f 	and.w	r3, r3, #31
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ba:	431a      	orrs	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	621a      	str	r2, [r3, #32]
}
 80035c0:	bf00      	nop
 80035c2:	371c      	adds	r7, #28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e05a      	b.n	800369a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a21      	ldr	r2, [pc, #132]	; (80036a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d022      	beq.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003630:	d01d      	beq.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1d      	ldr	r2, [pc, #116]	; (80036ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d018      	beq.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1b      	ldr	r2, [pc, #108]	; (80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d013      	beq.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1a      	ldr	r2, [pc, #104]	; (80036b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d00e      	beq.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d009      	beq.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a17      	ldr	r2, [pc, #92]	; (80036bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d004      	beq.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a15      	ldr	r2, [pc, #84]	; (80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d10c      	bne.n	8003688 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	4313      	orrs	r3, r2
 800367e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40010000 	.word	0x40010000
 80036ac:	40000400 	.word	0x40000400
 80036b0:	40000800 	.word	0x40000800
 80036b4:	40000c00 	.word	0x40000c00
 80036b8:	40010400 	.word	0x40010400
 80036bc:	40014000 	.word	0x40014000
 80036c0:	40001800 	.word	0x40001800

080036c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e03f      	b.n	800377e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fd fcf0 	bl	80010f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	; 0x24
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800372e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f929 	bl	8003988 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b08a      	sub	sp, #40	; 0x28
 800378a:	af02      	add	r7, sp, #8
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	4613      	mov	r3, r2
 8003794:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d17c      	bne.n	80038a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <HAL_UART_Transmit+0x2c>
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e075      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_UART_Transmit+0x3e>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e06e      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2221      	movs	r2, #33	; 0x21
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037da:	f7fd febf 	bl	800155c <HAL_GetTick>
 80037de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	88fa      	ldrh	r2, [r7, #6]
 80037e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	88fa      	ldrh	r2, [r7, #6]
 80037ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f4:	d108      	bne.n	8003808 <HAL_UART_Transmit+0x82>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d104      	bne.n	8003808 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	e003      	b.n	8003810 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800380c:	2300      	movs	r3, #0
 800380e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003818:	e02a      	b.n	8003870 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2200      	movs	r2, #0
 8003822:	2180      	movs	r1, #128	; 0x80
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f840 	bl	80038aa <UART_WaitOnFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e036      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10b      	bne.n	8003852 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003848:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	3302      	adds	r3, #2
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	e007      	b.n	8003862 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	781a      	ldrb	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	3301      	adds	r3, #1
 8003860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1cf      	bne.n	800381a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2200      	movs	r2, #0
 8003882:	2140      	movs	r1, #64	; 0x40
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f810 	bl	80038aa <UART_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e006      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	e000      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038a0:	2302      	movs	r3, #2
  }
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3720      	adds	r7, #32
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b090      	sub	sp, #64	; 0x40
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	603b      	str	r3, [r7, #0]
 80038b6:	4613      	mov	r3, r2
 80038b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ba:	e050      	b.n	800395e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c2:	d04c      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d007      	beq.n	80038da <UART_WaitOnFlagUntilTimeout+0x30>
 80038ca:	f7fd fe47 	bl	800155c <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d241      	bcs.n	800395e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	330c      	adds	r3, #12
 80038e0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	e853 3f00 	ldrex	r3, [r3]
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	330c      	adds	r3, #12
 80038f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038fa:	637a      	str	r2, [r7, #52]	; 0x34
 80038fc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003900:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e5      	bne.n	80038da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3314      	adds	r3, #20
 8003914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	613b      	str	r3, [r7, #16]
   return(result);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	63bb      	str	r3, [r7, #56]	; 0x38
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3314      	adds	r3, #20
 800392c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800392e:	623a      	str	r2, [r7, #32]
 8003930:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003932:	69f9      	ldr	r1, [r7, #28]
 8003934:	6a3a      	ldr	r2, [r7, #32]
 8003936:	e841 2300 	strex	r3, r2, [r1]
 800393a:	61bb      	str	r3, [r7, #24]
   return(result);
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1e5      	bne.n	800390e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e00f      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4013      	ands	r3, r2
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	429a      	cmp	r2, r3
 800396c:	bf0c      	ite	eq
 800396e:	2301      	moveq	r3, #1
 8003970:	2300      	movne	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	429a      	cmp	r2, r3
 800397a:	d09f      	beq.n	80038bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3740      	adds	r7, #64	; 0x40
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800398c:	b09f      	sub	sp, #124	; 0x7c
 800398e:	af00      	add	r7, sp, #0
 8003990:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800399c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399e:	68d9      	ldr	r1, [r3, #12]
 80039a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	ea40 0301 	orr.w	r3, r0, r1
 80039a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	4313      	orrs	r3, r2
 80039c0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80039c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039cc:	f021 010c 	bic.w	r1, r1, #12
 80039d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039d6:	430b      	orrs	r3, r1
 80039d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e6:	6999      	ldr	r1, [r3, #24]
 80039e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	ea40 0301 	orr.w	r3, r0, r1
 80039f0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4bc5      	ldr	r3, [pc, #788]	; (8003d0c <UART_SetConfig+0x384>)
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d004      	beq.n	8003a06 <UART_SetConfig+0x7e>
 80039fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4bc3      	ldr	r3, [pc, #780]	; (8003d10 <UART_SetConfig+0x388>)
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d103      	bne.n	8003a0e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a06:	f7fe fd4d 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 8003a0a:	6778      	str	r0, [r7, #116]	; 0x74
 8003a0c:	e002      	b.n	8003a14 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a0e:	f7fe fd35 	bl	800247c <HAL_RCC_GetPCLK1Freq>
 8003a12:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a1c:	f040 80b6 	bne.w	8003b8c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a22:	461c      	mov	r4, r3
 8003a24:	f04f 0500 	mov.w	r5, #0
 8003a28:	4622      	mov	r2, r4
 8003a2a:	462b      	mov	r3, r5
 8003a2c:	1891      	adds	r1, r2, r2
 8003a2e:	6439      	str	r1, [r7, #64]	; 0x40
 8003a30:	415b      	adcs	r3, r3
 8003a32:	647b      	str	r3, [r7, #68]	; 0x44
 8003a34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a38:	1912      	adds	r2, r2, r4
 8003a3a:	eb45 0303 	adc.w	r3, r5, r3
 8003a3e:	f04f 0000 	mov.w	r0, #0
 8003a42:	f04f 0100 	mov.w	r1, #0
 8003a46:	00d9      	lsls	r1, r3, #3
 8003a48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a4c:	00d0      	lsls	r0, r2, #3
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	1911      	adds	r1, r2, r4
 8003a54:	6639      	str	r1, [r7, #96]	; 0x60
 8003a56:	416b      	adcs	r3, r5
 8003a58:	667b      	str	r3, [r7, #100]	; 0x64
 8003a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	1891      	adds	r1, r2, r2
 8003a66:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a68:	415b      	adcs	r3, r3
 8003a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a74:	f7fc fc0c 	bl	8000290 <__aeabi_uldivmod>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4ba5      	ldr	r3, [pc, #660]	; (8003d14 <UART_SetConfig+0x38c>)
 8003a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	011e      	lsls	r6, r3, #4
 8003a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a88:	461c      	mov	r4, r3
 8003a8a:	f04f 0500 	mov.w	r5, #0
 8003a8e:	4622      	mov	r2, r4
 8003a90:	462b      	mov	r3, r5
 8003a92:	1891      	adds	r1, r2, r2
 8003a94:	6339      	str	r1, [r7, #48]	; 0x30
 8003a96:	415b      	adcs	r3, r3
 8003a98:	637b      	str	r3, [r7, #52]	; 0x34
 8003a9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a9e:	1912      	adds	r2, r2, r4
 8003aa0:	eb45 0303 	adc.w	r3, r5, r3
 8003aa4:	f04f 0000 	mov.w	r0, #0
 8003aa8:	f04f 0100 	mov.w	r1, #0
 8003aac:	00d9      	lsls	r1, r3, #3
 8003aae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ab2:	00d0      	lsls	r0, r2, #3
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	1911      	adds	r1, r2, r4
 8003aba:	65b9      	str	r1, [r7, #88]	; 0x58
 8003abc:	416b      	adcs	r3, r5
 8003abe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	1891      	adds	r1, r2, r2
 8003acc:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ace:	415b      	adcs	r3, r3
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ad2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ad6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ada:	f7fc fbd9 	bl	8000290 <__aeabi_uldivmod>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4b8c      	ldr	r3, [pc, #560]	; (8003d14 <UART_SetConfig+0x38c>)
 8003ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	2164      	movs	r1, #100	; 0x64
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	3332      	adds	r3, #50	; 0x32
 8003af6:	4a87      	ldr	r2, [pc, #540]	; (8003d14 <UART_SetConfig+0x38c>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b04:	441e      	add	r6, r3
 8003b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f04f 0100 	mov.w	r1, #0
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	1894      	adds	r4, r2, r2
 8003b14:	623c      	str	r4, [r7, #32]
 8003b16:	415b      	adcs	r3, r3
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b1e:	1812      	adds	r2, r2, r0
 8003b20:	eb41 0303 	adc.w	r3, r1, r3
 8003b24:	f04f 0400 	mov.w	r4, #0
 8003b28:	f04f 0500 	mov.w	r5, #0
 8003b2c:	00dd      	lsls	r5, r3, #3
 8003b2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b32:	00d4      	lsls	r4, r2, #3
 8003b34:	4622      	mov	r2, r4
 8003b36:	462b      	mov	r3, r5
 8003b38:	1814      	adds	r4, r2, r0
 8003b3a:	653c      	str	r4, [r7, #80]	; 0x50
 8003b3c:	414b      	adcs	r3, r1
 8003b3e:	657b      	str	r3, [r7, #84]	; 0x54
 8003b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	461a      	mov	r2, r3
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	1891      	adds	r1, r2, r2
 8003b4c:	61b9      	str	r1, [r7, #24]
 8003b4e:	415b      	adcs	r3, r3
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b5a:	f7fc fb99 	bl	8000290 <__aeabi_uldivmod>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4b6c      	ldr	r3, [pc, #432]	; (8003d14 <UART_SetConfig+0x38c>)
 8003b64:	fba3 1302 	umull	r1, r3, r3, r2
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	2164      	movs	r1, #100	; 0x64
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	3332      	adds	r3, #50	; 0x32
 8003b76:	4a67      	ldr	r2, [pc, #412]	; (8003d14 <UART_SetConfig+0x38c>)
 8003b78:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	f003 0207 	and.w	r2, r3, #7
 8003b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4432      	add	r2, r6
 8003b88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b8a:	e0b9      	b.n	8003d00 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b8e:	461c      	mov	r4, r3
 8003b90:	f04f 0500 	mov.w	r5, #0
 8003b94:	4622      	mov	r2, r4
 8003b96:	462b      	mov	r3, r5
 8003b98:	1891      	adds	r1, r2, r2
 8003b9a:	6139      	str	r1, [r7, #16]
 8003b9c:	415b      	adcs	r3, r3
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ba4:	1912      	adds	r2, r2, r4
 8003ba6:	eb45 0303 	adc.w	r3, r5, r3
 8003baa:	f04f 0000 	mov.w	r0, #0
 8003bae:	f04f 0100 	mov.w	r1, #0
 8003bb2:	00d9      	lsls	r1, r3, #3
 8003bb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bb8:	00d0      	lsls	r0, r2, #3
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	eb12 0804 	adds.w	r8, r2, r4
 8003bc2:	eb43 0905 	adc.w	r9, r3, r5
 8003bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f04f 0100 	mov.w	r1, #0
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	008b      	lsls	r3, r1, #2
 8003bda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bde:	0082      	lsls	r2, r0, #2
 8003be0:	4640      	mov	r0, r8
 8003be2:	4649      	mov	r1, r9
 8003be4:	f7fc fb54 	bl	8000290 <__aeabi_uldivmod>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4b49      	ldr	r3, [pc, #292]	; (8003d14 <UART_SetConfig+0x38c>)
 8003bee:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	011e      	lsls	r6, r3, #4
 8003bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f04f 0100 	mov.w	r1, #0
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	1894      	adds	r4, r2, r2
 8003c04:	60bc      	str	r4, [r7, #8]
 8003c06:	415b      	adcs	r3, r3
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c0e:	1812      	adds	r2, r2, r0
 8003c10:	eb41 0303 	adc.w	r3, r1, r3
 8003c14:	f04f 0400 	mov.w	r4, #0
 8003c18:	f04f 0500 	mov.w	r5, #0
 8003c1c:	00dd      	lsls	r5, r3, #3
 8003c1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c22:	00d4      	lsls	r4, r2, #3
 8003c24:	4622      	mov	r2, r4
 8003c26:	462b      	mov	r3, r5
 8003c28:	1814      	adds	r4, r2, r0
 8003c2a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003c2c:	414b      	adcs	r3, r1
 8003c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f04f 0100 	mov.w	r1, #0
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	008b      	lsls	r3, r1, #2
 8003c44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c48:	0082      	lsls	r2, r0, #2
 8003c4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003c4e:	f7fc fb1f 	bl	8000290 <__aeabi_uldivmod>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4b2f      	ldr	r3, [pc, #188]	; (8003d14 <UART_SetConfig+0x38c>)
 8003c58:	fba3 1302 	umull	r1, r3, r3, r2
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	2164      	movs	r1, #100	; 0x64
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	3332      	adds	r3, #50	; 0x32
 8003c6a:	4a2a      	ldr	r2, [pc, #168]	; (8003d14 <UART_SetConfig+0x38c>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c76:	441e      	add	r6, r3
 8003c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f04f 0100 	mov.w	r1, #0
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	1894      	adds	r4, r2, r2
 8003c86:	603c      	str	r4, [r7, #0]
 8003c88:	415b      	adcs	r3, r3
 8003c8a:	607b      	str	r3, [r7, #4]
 8003c8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c90:	1812      	adds	r2, r2, r0
 8003c92:	eb41 0303 	adc.w	r3, r1, r3
 8003c96:	f04f 0400 	mov.w	r4, #0
 8003c9a:	f04f 0500 	mov.w	r5, #0
 8003c9e:	00dd      	lsls	r5, r3, #3
 8003ca0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ca4:	00d4      	lsls	r4, r2, #3
 8003ca6:	4622      	mov	r2, r4
 8003ca8:	462b      	mov	r3, r5
 8003caa:	eb12 0a00 	adds.w	sl, r2, r0
 8003cae:	eb43 0b01 	adc.w	fp, r3, r1
 8003cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f04f 0100 	mov.w	r1, #0
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	008b      	lsls	r3, r1, #2
 8003cc6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cca:	0082      	lsls	r2, r0, #2
 8003ccc:	4650      	mov	r0, sl
 8003cce:	4659      	mov	r1, fp
 8003cd0:	f7fc fade 	bl	8000290 <__aeabi_uldivmod>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <UART_SetConfig+0x38c>)
 8003cda:	fba3 1302 	umull	r1, r3, r3, r2
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	2164      	movs	r1, #100	; 0x64
 8003ce2:	fb01 f303 	mul.w	r3, r1, r3
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	3332      	adds	r3, #50	; 0x32
 8003cec:	4a09      	ldr	r2, [pc, #36]	; (8003d14 <UART_SetConfig+0x38c>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	f003 020f 	and.w	r2, r3, #15
 8003cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4432      	add	r2, r6
 8003cfe:	609a      	str	r2, [r3, #8]
}
 8003d00:	bf00      	nop
 8003d02:	377c      	adds	r7, #124	; 0x7c
 8003d04:	46bd      	mov	sp, r7
 8003d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40011000 	.word	0x40011000
 8003d10:	40011400 	.word	0x40011400
 8003d14:	51eb851f 	.word	0x51eb851f

08003d18 <init_powderMachine>:
								{PD05_heat_EN_Pin, PD05_heat_IN1_Pin, PD05_heat_IN2_Pin},
								{CF01_heat_EN_Pin, CF01_heat_IN1_Pin, CF01_heat_IN2_Pin}};
/*********************************** Pin configuration ***********************************/

void init_powderMachine(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
	// powder motor direction must be fixed!
	// init DCpowder motor direction & disable motor
	for(uint8_t i = 0; i<sizeof(PD_DCpowder_GPIO_Port) / sizeof(PD_DCpowder_GPIO_Port[0]); i++){
 8003d1e:	2300      	movs	r3, #0
 8003d20:	71fb      	strb	r3, [r7, #7]
 8003d22:	e045      	b.n	8003db0 <init_powderMachine+0x98>
		HAL_GPIO_WritePin(PD_DCpowder_GPIO_Port[i][IN1], PD_DCpowder_Pin[i][IN1], GPIO_PIN_RESET);
 8003d24:	79fa      	ldrb	r2, [r7, #7]
 8003d26:	497d      	ldr	r1, [pc, #500]	; (8003f1c <init_powderMachine+0x204>)
 8003d28:	4613      	mov	r3, r2
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	3304      	adds	r3, #4
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	79fa      	ldrb	r2, [r7, #7]
 8003d38:	4979      	ldr	r1, [pc, #484]	; (8003f20 <init_powderMachine+0x208>)
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	3304      	adds	r3, #4
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f7fd ff0b 	bl	8001b68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCpowder_GPIO_Port[i][IN2], PD_DCpowder_Pin[i][IN2], GPIO_PIN_SET);
 8003d52:	79fa      	ldrb	r2, [r7, #7]
 8003d54:	4971      	ldr	r1, [pc, #452]	; (8003f1c <init_powderMachine+0x204>)
 8003d56:	4613      	mov	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	3308      	adds	r3, #8
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	79fa      	ldrb	r2, [r7, #7]
 8003d66:	496e      	ldr	r1, [pc, #440]	; (8003f20 <init_powderMachine+0x208>)
 8003d68:	4613      	mov	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	3308      	adds	r3, #8
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2201      	movs	r2, #1
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f7fd fef4 	bl	8001b68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCpowder_GPIO_Port[i][EN], PD_DCpowder_Pin[i][EN], GPIO_PIN_RESET);
 8003d80:	79fa      	ldrb	r2, [r7, #7]
 8003d82:	4966      	ldr	r1, [pc, #408]	; (8003f1c <init_powderMachine+0x204>)
 8003d84:	4613      	mov	r3, r2
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	4413      	add	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	79fa      	ldrb	r2, [r7, #7]
 8003d92:	4963      	ldr	r1, [pc, #396]	; (8003f20 <init_powderMachine+0x208>)
 8003d94:	4613      	mov	r3, r2
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2200      	movs	r2, #0
 8003da4:	4619      	mov	r1, r3
 8003da6:	f7fd fedf 	bl	8001b68 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i<sizeof(PD_DCpowder_GPIO_Port) / sizeof(PD_DCpowder_GPIO_Port[0]); i++){
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	3301      	adds	r3, #1
 8003dae:	71fb      	strb	r3, [r7, #7]
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d9b6      	bls.n	8003d24 <init_powderMachine+0xc>
	}

	// init DCmix motor direction & disable motor
	for(uint8_t i = 0; i<sizeof(PD_DCmix_GPIO_Port) / sizeof(PD_DCmix_GPIO_Port[0]); i++){
 8003db6:	2300      	movs	r3, #0
 8003db8:	71bb      	strb	r3, [r7, #6]
 8003dba:	e045      	b.n	8003e48 <init_powderMachine+0x130>
		HAL_GPIO_WritePin(PD_DCmix_GPIO_Port[i][IN1], PD_DCmix_Pin[i][IN1], GPIO_PIN_SET);
 8003dbc:	79ba      	ldrb	r2, [r7, #6]
 8003dbe:	4959      	ldr	r1, [pc, #356]	; (8003f24 <init_powderMachine+0x20c>)
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	3304      	adds	r3, #4
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	79ba      	ldrb	r2, [r7, #6]
 8003dd0:	4955      	ldr	r1, [pc, #340]	; (8003f28 <init_powderMachine+0x210>)
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	4413      	add	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	3304      	adds	r3, #4
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2201      	movs	r2, #1
 8003de4:	4619      	mov	r1, r3
 8003de6:	f7fd febf 	bl	8001b68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCmix_GPIO_Port[i][IN2], PD_DCmix_Pin[i][IN2], GPIO_PIN_RESET);
 8003dea:	79ba      	ldrb	r2, [r7, #6]
 8003dec:	494d      	ldr	r1, [pc, #308]	; (8003f24 <init_powderMachine+0x20c>)
 8003dee:	4613      	mov	r3, r2
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	4413      	add	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	3308      	adds	r3, #8
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	79ba      	ldrb	r2, [r7, #6]
 8003dfe:	494a      	ldr	r1, [pc, #296]	; (8003f28 <init_powderMachine+0x210>)
 8003e00:	4613      	mov	r3, r2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	2200      	movs	r2, #0
 8003e12:	4619      	mov	r1, r3
 8003e14:	f7fd fea8 	bl	8001b68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCmix_GPIO_Port[i][EN], PD_DCmix_Pin[i][EN], GPIO_PIN_RESET);
 8003e18:	79ba      	ldrb	r2, [r7, #6]
 8003e1a:	4942      	ldr	r1, [pc, #264]	; (8003f24 <init_powderMachine+0x20c>)
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	79ba      	ldrb	r2, [r7, #6]
 8003e2a:	493f      	ldr	r1, [pc, #252]	; (8003f28 <init_powderMachine+0x210>)
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	f7fd fe93 	bl	8001b68 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i<sizeof(PD_DCmix_GPIO_Port) / sizeof(PD_DCmix_GPIO_Port[0]); i++){
 8003e42:	79bb      	ldrb	r3, [r7, #6]
 8003e44:	3301      	adds	r3, #1
 8003e46:	71bb      	strb	r3, [r7, #6]
 8003e48:	79bb      	ldrb	r3, [r7, #6]
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d9b6      	bls.n	8003dbc <init_powderMachine+0xa4>
	}

	// init heater motor direction
	for(uint8_t i = 0; i<sizeof(heat_GPIO_Port) / sizeof(heat_GPIO_Port[0]); i++){
 8003e4e:	2300      	movs	r3, #0
 8003e50:	717b      	strb	r3, [r7, #5]
 8003e52:	e030      	b.n	8003eb6 <init_powderMachine+0x19e>
		HAL_GPIO_WritePin(heat_GPIO_Port[i][IN1], heat_Pin[i][IN1], GPIO_PIN_SET);
 8003e54:	797a      	ldrb	r2, [r7, #5]
 8003e56:	4935      	ldr	r1, [pc, #212]	; (8003f2c <init_powderMachine+0x214>)
 8003e58:	4613      	mov	r3, r2
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	3304      	adds	r3, #4
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	797a      	ldrb	r2, [r7, #5]
 8003e68:	4931      	ldr	r1, [pc, #196]	; (8003f30 <init_powderMachine+0x218>)
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	3304      	adds	r3, #4
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	f7fd fe73 	bl	8001b68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(heat_GPIO_Port[i][IN2], heat_Pin[i][IN2], GPIO_PIN_RESET);
 8003e82:	797a      	ldrb	r2, [r7, #5]
 8003e84:	4929      	ldr	r1, [pc, #164]	; (8003f2c <init_powderMachine+0x214>)
 8003e86:	4613      	mov	r3, r2
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	3308      	adds	r3, #8
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	797a      	ldrb	r2, [r7, #5]
 8003e96:	4926      	ldr	r1, [pc, #152]	; (8003f30 <init_powderMachine+0x218>)
 8003e98:	4613      	mov	r3, r2
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f7fd fe5c 	bl	8001b68 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i<sizeof(heat_GPIO_Port) / sizeof(heat_GPIO_Port[0]); i++){
 8003eb0:	797b      	ldrb	r3, [r7, #5]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	717b      	strb	r3, [r7, #5]
 8003eb6:	797b      	ldrb	r3, [r7, #5]
 8003eb8:	2b05      	cmp	r3, #5
 8003eba:	d9cb      	bls.n	8003e54 <init_powderMachine+0x13c>
	}

	// init PWM
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //PD01_heat
 8003ebc:	2108      	movs	r1, #8
 8003ebe:	481d      	ldr	r0, [pc, #116]	; (8003f34 <init_powderMachine+0x21c>)
 8003ec0:	f7fe fc16 	bl	80026f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //PD02_heat
 8003ec4:	210c      	movs	r1, #12
 8003ec6:	481b      	ldr	r0, [pc, #108]	; (8003f34 <init_powderMachine+0x21c>)
 8003ec8:	f7fe fc12 	bl	80026f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //PD03_heat
 8003ecc:	2100      	movs	r1, #0
 8003ece:	481a      	ldr	r0, [pc, #104]	; (8003f38 <init_powderMachine+0x220>)
 8003ed0:	f7fe fc0e 	bl	80026f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //PD04_heat
 8003ed4:	2104      	movs	r1, #4
 8003ed6:	4817      	ldr	r0, [pc, #92]	; (8003f34 <init_powderMachine+0x21c>)
 8003ed8:	f7fe fc0a 	bl	80026f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //PD05_heat
 8003edc:	2104      	movs	r1, #4
 8003ede:	4816      	ldr	r0, [pc, #88]	; (8003f38 <init_powderMachine+0x220>)
 8003ee0:	f7fe fc06 	bl	80026f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //CF01_heat
 8003ee4:	2108      	movs	r1, #8
 8003ee6:	4813      	ldr	r0, [pc, #76]	; (8003f34 <init_powderMachine+0x21c>)
 8003ee8:	f7fe fc02 	bl	80026f0 <HAL_TIM_PWM_Start>

	// motor stop
	TIM4->CCR3 = HEATER_MOTOR_STOP;
 8003eec:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <init_powderMachine+0x224>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = HEATER_MOTOR_STOP;
 8003ef2:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <init_powderMachine+0x224>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR1 = HEATER_MOTOR_STOP;
 8003ef8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003efc:	2200      	movs	r2, #0
 8003efe:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = HEATER_MOTOR_STOP;
 8003f00:	4b0e      	ldr	r3, [pc, #56]	; (8003f3c <init_powderMachine+0x224>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR2 = HEATER_MOTOR_STOP;
 8003f06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = HEATER_MOTOR_STOP;
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <init_powderMachine+0x224>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	2000000c 	.word	0x2000000c
 8003f20:	200000cc 	.word	0x200000cc
 8003f24:	20000048 	.word	0x20000048
 8003f28:	20000108 	.word	0x20000108
 8003f2c:	20000084 	.word	0x20000084
 8003f30:	20000144 	.word	0x20000144
 8003f34:	20000250 	.word	0x20000250
 8003f38:	200003f4 	.word	0x200003f4
 8003f3c:	40000800 	.word	0x40000800

08003f40 <SteppingMotorTest>:

bool 	is_running[OFFSET] 				= {false, false};
char uartBuf[4000];

void SteppingMotorTest(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
	// 90 degree rotation test

	printf("ROTATE start!!\n");
 8003f44:	4811      	ldr	r0, [pc, #68]	; (8003f8c <SteppingMotorTest+0x4c>)
 8003f46:	f000 f9cf 	bl	80042e8 <puts>
//	controlSteppingMotor(CUP_D, STEPPING_MOTOR_ON, QUARTER, FREQ_FAST);
	HAL_GPIO_WritePin(CupD_DIR_GPIO_Port, CupD_DIR_Pin, GPIO_PIN_SET);
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f50:	480f      	ldr	r0, [pc, #60]	; (8003f90 <SteppingMotorTest+0x50>)
 8003f52:	f7fd fe09 	bl	8001b68 <HAL_GPIO_WritePin>

	controlSteppingMotor(CUP_D, STEPPING_MOTOR_ON, 4800, FREQ_FAST);
 8003f56:	2332      	movs	r3, #50	; 0x32
 8003f58:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	2002      	movs	r0, #2
 8003f60:	f000 f842 	bl	8003fe8 <controlSteppingMotor>

//	controlSteppingMotor(LID_D, STEPPING_MOTOR_ON, QUARTER, FREQ_FAST);
	printf("ROTATE finished!!\n\n %d \n",HAL_GPIO_ReadPin(MotorSpeedSensor_GPIO_Port[0][UP], MotorSpeedSensor_Pin[0][UP]));
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <SteppingMotorTest+0x54>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	4a0b      	ldr	r2, [pc, #44]	; (8003f98 <SteppingMotorTest+0x58>)
 8003f6a:	6852      	ldr	r2, [r2, #4]
 8003f6c:	b292      	uxth	r2, r2
 8003f6e:	4611      	mov	r1, r2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fd fde1 	bl	8001b38 <HAL_GPIO_ReadPin>
 8003f76:	4603      	mov	r3, r0
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4808      	ldr	r0, [pc, #32]	; (8003f9c <SteppingMotorTest+0x5c>)
 8003f7c:	f000 f92e 	bl	80041dc <iprintf>

//	HAL_GPIO_WritePin(CupD_DIR_GPIO_Port, CupD_DIR_Pin, GPIO_PIN_RESET);
//
//	controlSteppingMotor(CUP_D, STEPPING_MOTOR_ON, 4800, FREQ_FAST);

	HAL_Delay(2000);
 8003f80:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003f84:	f7fd faf6 	bl	8001574 <HAL_Delay>


}
 8003f88:	bf00      	nop
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	0800518c 	.word	0x0800518c
 8003f90:	40021000 	.word	0x40021000
 8003f94:	2000019c 	.word	0x2000019c
 8003f98:	200001ac 	.word	0x200001ac
 8003f9c:	0800519c 	.word	0x0800519c

08003fa0 <pulseMaker>:

void pulseMaker (uint16_t time)	//delay function in 10us
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003faa:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <pulseMaker+0x30>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8003fb2:	bf00      	nop
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <pulseMaker+0x30>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d3f9      	bcc.n	8003fb4 <pulseMaker+0x14>
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000368 	.word	0x20000368

08003fd4 <initCupLidDispensor>:

void initCupLidDispensor(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);
 8003fd8:	4802      	ldr	r0, [pc, #8]	; (8003fe4 <initCupLidDispensor+0x10>)
 8003fda:	f7fe fac7 	bl	800256c <HAL_TIM_Base_Start>
}
 8003fde:	bf00      	nop
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000368 	.word	0x20000368

08003fe8 <controlSteppingMotor>:

void controlSteppingMotor(uint8_t device_id, bool cmd, uint16_t angle, uint8_t freq)
{
 8003fe8:	b590      	push	{r4, r7, lr}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4604      	mov	r4, r0
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4623      	mov	r3, r4
 8003ff8:	71fb      	strb	r3, [r7, #7]
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	71bb      	strb	r3, [r7, #6]
 8003ffe:	460b      	mov	r3, r1
 8004000:	80bb      	strh	r3, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	70fb      	strb	r3, [r7, #3]
	uint8_t ID = device_id - OFFSET;
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	3b02      	subs	r3, #2
 800400a:	737b      	strb	r3, [r7, #13]

	if(cmd == STEPPING_MOTOR_ON){
 800400c:	79bb      	ldrb	r3, [r7, #6]
 800400e:	2b01      	cmp	r3, #1
 8004010:	f040 808f 	bne.w	8004132 <controlSteppingMotor+0x14a>
		is_running[ID] = true;
 8004014:	7b7b      	ldrb	r3, [r7, #13]
 8004016:	4a4e      	ldr	r2, [pc, #312]	; (8004150 <controlSteppingMotor+0x168>)
 8004018:	2101      	movs	r1, #1
 800401a:	54d1      	strb	r1, [r2, r3]
		HAL_GPIO_WritePin(CupD_EN_GPIO_Port, CupD_EN_Pin, GPIO_PIN_SET); //EN - SET = enable MOTOR
 800401c:	2201      	movs	r2, #1
 800401e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004022:	484c      	ldr	r0, [pc, #304]	; (8004154 <controlSteppingMotor+0x16c>)
 8004024:	f7fd fda0 	bl	8001b68 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8004028:	200a      	movs	r0, #10
 800402a:	f7fd faa3 	bl	8001574 <HAL_Delay>

		for(uint16_t step=0; step < angle; step++){
 800402e:	2300      	movs	r3, #0
 8004030:	81fb      	strh	r3, [r7, #14]
 8004032:	e07a      	b.n	800412a <controlSteppingMotor+0x142>
			printf("%d \n",HAL_GPIO_ReadPin(MotorSpeedSensor_GPIO_Port[0][UP], MotorSpeedSensor_Pin[0][UP]));
 8004034:	4b48      	ldr	r3, [pc, #288]	; (8004158 <controlSteppingMotor+0x170>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4a48      	ldr	r2, [pc, #288]	; (800415c <controlSteppingMotor+0x174>)
 800403a:	6852      	ldr	r2, [r2, #4]
 800403c:	b292      	uxth	r2, r2
 800403e:	4611      	mov	r1, r2
 8004040:	4618      	mov	r0, r3
 8004042:	f7fd fd79 	bl	8001b38 <HAL_GPIO_ReadPin>
 8004046:	4603      	mov	r3, r0
 8004048:	4619      	mov	r1, r3
 800404a:	4845      	ldr	r0, [pc, #276]	; (8004160 <controlSteppingMotor+0x178>)
 800404c:	f000 f8c6 	bl	80041dc <iprintf>

			HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID], SteppingMotor_Pin[ID], GPIO_PIN_SET);
 8004050:	7b7b      	ldrb	r3, [r7, #13]
 8004052:	4a44      	ldr	r2, [pc, #272]	; (8004164 <controlSteppingMotor+0x17c>)
 8004054:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004058:	7b7b      	ldrb	r3, [r7, #13]
 800405a:	4a43      	ldr	r2, [pc, #268]	; (8004168 <controlSteppingMotor+0x180>)
 800405c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004060:	b29b      	uxth	r3, r3
 8004062:	2201      	movs	r2, #1
 8004064:	4619      	mov	r1, r3
 8004066:	f7fd fd7f 	bl	8001b68 <HAL_GPIO_WritePin>
			pulseMaker(freq);
 800406a:	78fb      	ldrb	r3, [r7, #3]
 800406c:	b29b      	uxth	r3, r3
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff ff96 	bl	8003fa0 <pulseMaker>
			HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID], SteppingMotor_Pin[ID], GPIO_PIN_RESET);
 8004074:	7b7b      	ldrb	r3, [r7, #13]
 8004076:	4a3b      	ldr	r2, [pc, #236]	; (8004164 <controlSteppingMotor+0x17c>)
 8004078:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800407c:	7b7b      	ldrb	r3, [r7, #13]
 800407e:	4a3a      	ldr	r2, [pc, #232]	; (8004168 <controlSteppingMotor+0x180>)
 8004080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004084:	b29b      	uxth	r3, r3
 8004086:	2200      	movs	r2, #0
 8004088:	4619      	mov	r1, r3
 800408a:	f7fd fd6d 	bl	8001b68 <HAL_GPIO_WritePin>
			pulseMaker(freq);
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	b29b      	uxth	r3, r3
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff ff84 	bl	8003fa0 <pulseMaker>

			if(is_detected[ID][UP] == false){
 8004098:	7b7b      	ldrb	r3, [r7, #13]
 800409a:	4a34      	ldr	r2, [pc, #208]	; (800416c <controlSteppingMotor+0x184>)
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	4413      	add	r3, r2
 80040a0:	785b      	ldrb	r3, [r3, #1]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d11b      	bne.n	80040de <controlSteppingMotor+0xf6>
				if(HAL_GPIO_ReadPin(MotorSpeedSensor_GPIO_Port[ID][UP], MotorSpeedSensor_Pin[ID][UP]) != GPIO_PIN_SET){
 80040a6:	7b7b      	ldrb	r3, [r7, #13]
 80040a8:	4a2b      	ldr	r2, [pc, #172]	; (8004158 <controlSteppingMotor+0x170>)
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4413      	add	r3, r2
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	7b7b      	ldrb	r3, [r7, #13]
 80040b2:	492a      	ldr	r1, [pc, #168]	; (800415c <controlSteppingMotor+0x174>)
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	440b      	add	r3, r1
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	4619      	mov	r1, r3
 80040be:	4610      	mov	r0, r2
 80040c0:	f7fd fd3a 	bl	8001b38 <HAL_GPIO_ReadPin>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d009      	beq.n	80040de <controlSteppingMotor+0xf6>
					is_detected[ID][UP] = true;
 80040ca:	7b7b      	ldrb	r3, [r7, #13]
 80040cc:	4a27      	ldr	r2, [pc, #156]	; (800416c <controlSteppingMotor+0x184>)
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	4413      	add	r3, r2
 80040d2:	2201      	movs	r2, #1
 80040d4:	705a      	strb	r2, [r3, #1]
					printf("up detected\n");
 80040d6:	4826      	ldr	r0, [pc, #152]	; (8004170 <controlSteppingMotor+0x188>)
 80040d8:	f000 f906 	bl	80042e8 <puts>
					break;
 80040dc:	e029      	b.n	8004132 <controlSteppingMotor+0x14a>
				}
			}
			if(is_detected[ID][DOWN] == false){
 80040de:	7b7b      	ldrb	r3, [r7, #13]
 80040e0:	4a22      	ldr	r2, [pc, #136]	; (800416c <controlSteppingMotor+0x184>)
 80040e2:	3301      	adds	r3, #1
 80040e4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d11b      	bne.n	8004124 <controlSteppingMotor+0x13c>
				if(HAL_GPIO_ReadPin(MotorSpeedSensor_GPIO_Port[ID][DOWN], MotorSpeedSensor_Pin[ID][DOWN]) != GPIO_PIN_SET){
 80040ec:	7b7b      	ldrb	r3, [r7, #13]
 80040ee:	4a1a      	ldr	r2, [pc, #104]	; (8004158 <controlSteppingMotor+0x170>)
 80040f0:	3301      	adds	r3, #1
 80040f2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80040f6:	7b7b      	ldrb	r3, [r7, #13]
 80040f8:	4918      	ldr	r1, [pc, #96]	; (800415c <controlSteppingMotor+0x174>)
 80040fa:	3301      	adds	r3, #1
 80040fc:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8004100:	b29b      	uxth	r3, r3
 8004102:	4619      	mov	r1, r3
 8004104:	4610      	mov	r0, r2
 8004106:	f7fd fd17 	bl	8001b38 <HAL_GPIO_ReadPin>
 800410a:	4603      	mov	r3, r0
 800410c:	2b01      	cmp	r3, #1
 800410e:	d009      	beq.n	8004124 <controlSteppingMotor+0x13c>
					is_detected[ID][DOWN] = true;
 8004110:	7b7b      	ldrb	r3, [r7, #13]
 8004112:	4a16      	ldr	r2, [pc, #88]	; (800416c <controlSteppingMotor+0x184>)
 8004114:	3301      	adds	r3, #1
 8004116:	2101      	movs	r1, #1
 8004118:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					printf("down detected\n");
 800411c:	4815      	ldr	r0, [pc, #84]	; (8004174 <controlSteppingMotor+0x18c>)
 800411e:	f000 f8e3 	bl	80042e8 <puts>
					break;
 8004122:	e006      	b.n	8004132 <controlSteppingMotor+0x14a>
		for(uint16_t step=0; step < angle; step++){
 8004124:	89fb      	ldrh	r3, [r7, #14]
 8004126:	3301      	adds	r3, #1
 8004128:	81fb      	strh	r3, [r7, #14]
 800412a:	89fa      	ldrh	r2, [r7, #14]
 800412c:	88bb      	ldrh	r3, [r7, #4]
 800412e:	429a      	cmp	r2, r3
 8004130:	d380      	bcc.n	8004034 <controlSteppingMotor+0x4c>
				}
			}
		}
	}
	// STEPPING_MOTOR_OFF
	HAL_GPIO_WritePin(CupD_EN_GPIO_Port, CupD_EN_Pin, GPIO_PIN_RESET); //EN - RESET = disable MOTOR
 8004132:	2200      	movs	r2, #0
 8004134:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004138:	4806      	ldr	r0, [pc, #24]	; (8004154 <controlSteppingMotor+0x16c>)
 800413a:	f7fd fd15 	bl	8001b68 <HAL_GPIO_WritePin>

	is_running[ID] = false;
 800413e:	7b7b      	ldrb	r3, [r7, #13]
 8004140:	4a03      	ldr	r2, [pc, #12]	; (8004150 <controlSteppingMotor+0x168>)
 8004142:	2100      	movs	r1, #0
 8004144:	54d1      	strb	r1, [r2, r3]
}
 8004146:	bf00      	nop
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	bd90      	pop	{r4, r7, pc}
 800414e:	bf00      	nop
 8004150:	20000244 	.word	0x20000244
 8004154:	40021400 	.word	0x40021400
 8004158:	2000019c 	.word	0x2000019c
 800415c:	200001ac 	.word	0x200001ac
 8004160:	080051b8 	.word	0x080051b8
 8004164:	2000018c 	.word	0x2000018c
 8004168:	20000194 	.word	0x20000194
 800416c:	20000240 	.word	0x20000240
 8004170:	080051c0 	.word	0x080051c0
 8004174:	080051cc 	.word	0x080051cc

08004178 <__errno>:
 8004178:	4b01      	ldr	r3, [pc, #4]	; (8004180 <__errno+0x8>)
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	200001bc 	.word	0x200001bc

08004184 <__libc_init_array>:
 8004184:	b570      	push	{r4, r5, r6, lr}
 8004186:	4d0d      	ldr	r5, [pc, #52]	; (80041bc <__libc_init_array+0x38>)
 8004188:	4c0d      	ldr	r4, [pc, #52]	; (80041c0 <__libc_init_array+0x3c>)
 800418a:	1b64      	subs	r4, r4, r5
 800418c:	10a4      	asrs	r4, r4, #2
 800418e:	2600      	movs	r6, #0
 8004190:	42a6      	cmp	r6, r4
 8004192:	d109      	bne.n	80041a8 <__libc_init_array+0x24>
 8004194:	4d0b      	ldr	r5, [pc, #44]	; (80041c4 <__libc_init_array+0x40>)
 8004196:	4c0c      	ldr	r4, [pc, #48]	; (80041c8 <__libc_init_array+0x44>)
 8004198:	f000 ffec 	bl	8005174 <_init>
 800419c:	1b64      	subs	r4, r4, r5
 800419e:	10a4      	asrs	r4, r4, #2
 80041a0:	2600      	movs	r6, #0
 80041a2:	42a6      	cmp	r6, r4
 80041a4:	d105      	bne.n	80041b2 <__libc_init_array+0x2e>
 80041a6:	bd70      	pop	{r4, r5, r6, pc}
 80041a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ac:	4798      	blx	r3
 80041ae:	3601      	adds	r6, #1
 80041b0:	e7ee      	b.n	8004190 <__libc_init_array+0xc>
 80041b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b6:	4798      	blx	r3
 80041b8:	3601      	adds	r6, #1
 80041ba:	e7f2      	b.n	80041a2 <__libc_init_array+0x1e>
 80041bc:	08005294 	.word	0x08005294
 80041c0:	08005294 	.word	0x08005294
 80041c4:	08005294 	.word	0x08005294
 80041c8:	08005298 	.word	0x08005298

080041cc <memset>:
 80041cc:	4402      	add	r2, r0
 80041ce:	4603      	mov	r3, r0
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d100      	bne.n	80041d6 <memset+0xa>
 80041d4:	4770      	bx	lr
 80041d6:	f803 1b01 	strb.w	r1, [r3], #1
 80041da:	e7f9      	b.n	80041d0 <memset+0x4>

080041dc <iprintf>:
 80041dc:	b40f      	push	{r0, r1, r2, r3}
 80041de:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <iprintf+0x2c>)
 80041e0:	b513      	push	{r0, r1, r4, lr}
 80041e2:	681c      	ldr	r4, [r3, #0]
 80041e4:	b124      	cbz	r4, 80041f0 <iprintf+0x14>
 80041e6:	69a3      	ldr	r3, [r4, #24]
 80041e8:	b913      	cbnz	r3, 80041f0 <iprintf+0x14>
 80041ea:	4620      	mov	r0, r4
 80041ec:	f000 fa5e 	bl	80046ac <__sinit>
 80041f0:	ab05      	add	r3, sp, #20
 80041f2:	9a04      	ldr	r2, [sp, #16]
 80041f4:	68a1      	ldr	r1, [r4, #8]
 80041f6:	9301      	str	r3, [sp, #4]
 80041f8:	4620      	mov	r0, r4
 80041fa:	f000 fc2f 	bl	8004a5c <_vfiprintf_r>
 80041fe:	b002      	add	sp, #8
 8004200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004204:	b004      	add	sp, #16
 8004206:	4770      	bx	lr
 8004208:	200001bc 	.word	0x200001bc

0800420c <_puts_r>:
 800420c:	b570      	push	{r4, r5, r6, lr}
 800420e:	460e      	mov	r6, r1
 8004210:	4605      	mov	r5, r0
 8004212:	b118      	cbz	r0, 800421c <_puts_r+0x10>
 8004214:	6983      	ldr	r3, [r0, #24]
 8004216:	b90b      	cbnz	r3, 800421c <_puts_r+0x10>
 8004218:	f000 fa48 	bl	80046ac <__sinit>
 800421c:	69ab      	ldr	r3, [r5, #24]
 800421e:	68ac      	ldr	r4, [r5, #8]
 8004220:	b913      	cbnz	r3, 8004228 <_puts_r+0x1c>
 8004222:	4628      	mov	r0, r5
 8004224:	f000 fa42 	bl	80046ac <__sinit>
 8004228:	4b2c      	ldr	r3, [pc, #176]	; (80042dc <_puts_r+0xd0>)
 800422a:	429c      	cmp	r4, r3
 800422c:	d120      	bne.n	8004270 <_puts_r+0x64>
 800422e:	686c      	ldr	r4, [r5, #4]
 8004230:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004232:	07db      	lsls	r3, r3, #31
 8004234:	d405      	bmi.n	8004242 <_puts_r+0x36>
 8004236:	89a3      	ldrh	r3, [r4, #12]
 8004238:	0598      	lsls	r0, r3, #22
 800423a:	d402      	bmi.n	8004242 <_puts_r+0x36>
 800423c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800423e:	f000 fad3 	bl	80047e8 <__retarget_lock_acquire_recursive>
 8004242:	89a3      	ldrh	r3, [r4, #12]
 8004244:	0719      	lsls	r1, r3, #28
 8004246:	d51d      	bpl.n	8004284 <_puts_r+0x78>
 8004248:	6923      	ldr	r3, [r4, #16]
 800424a:	b1db      	cbz	r3, 8004284 <_puts_r+0x78>
 800424c:	3e01      	subs	r6, #1
 800424e:	68a3      	ldr	r3, [r4, #8]
 8004250:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004254:	3b01      	subs	r3, #1
 8004256:	60a3      	str	r3, [r4, #8]
 8004258:	bb39      	cbnz	r1, 80042aa <_puts_r+0x9e>
 800425a:	2b00      	cmp	r3, #0
 800425c:	da38      	bge.n	80042d0 <_puts_r+0xc4>
 800425e:	4622      	mov	r2, r4
 8004260:	210a      	movs	r1, #10
 8004262:	4628      	mov	r0, r5
 8004264:	f000 f848 	bl	80042f8 <__swbuf_r>
 8004268:	3001      	adds	r0, #1
 800426a:	d011      	beq.n	8004290 <_puts_r+0x84>
 800426c:	250a      	movs	r5, #10
 800426e:	e011      	b.n	8004294 <_puts_r+0x88>
 8004270:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <_puts_r+0xd4>)
 8004272:	429c      	cmp	r4, r3
 8004274:	d101      	bne.n	800427a <_puts_r+0x6e>
 8004276:	68ac      	ldr	r4, [r5, #8]
 8004278:	e7da      	b.n	8004230 <_puts_r+0x24>
 800427a:	4b1a      	ldr	r3, [pc, #104]	; (80042e4 <_puts_r+0xd8>)
 800427c:	429c      	cmp	r4, r3
 800427e:	bf08      	it	eq
 8004280:	68ec      	ldreq	r4, [r5, #12]
 8004282:	e7d5      	b.n	8004230 <_puts_r+0x24>
 8004284:	4621      	mov	r1, r4
 8004286:	4628      	mov	r0, r5
 8004288:	f000 f888 	bl	800439c <__swsetup_r>
 800428c:	2800      	cmp	r0, #0
 800428e:	d0dd      	beq.n	800424c <_puts_r+0x40>
 8004290:	f04f 35ff 	mov.w	r5, #4294967295
 8004294:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004296:	07da      	lsls	r2, r3, #31
 8004298:	d405      	bmi.n	80042a6 <_puts_r+0x9a>
 800429a:	89a3      	ldrh	r3, [r4, #12]
 800429c:	059b      	lsls	r3, r3, #22
 800429e:	d402      	bmi.n	80042a6 <_puts_r+0x9a>
 80042a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042a2:	f000 faa2 	bl	80047ea <__retarget_lock_release_recursive>
 80042a6:	4628      	mov	r0, r5
 80042a8:	bd70      	pop	{r4, r5, r6, pc}
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	da04      	bge.n	80042b8 <_puts_r+0xac>
 80042ae:	69a2      	ldr	r2, [r4, #24]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	dc06      	bgt.n	80042c2 <_puts_r+0xb6>
 80042b4:	290a      	cmp	r1, #10
 80042b6:	d004      	beq.n	80042c2 <_puts_r+0xb6>
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	6022      	str	r2, [r4, #0]
 80042be:	7019      	strb	r1, [r3, #0]
 80042c0:	e7c5      	b.n	800424e <_puts_r+0x42>
 80042c2:	4622      	mov	r2, r4
 80042c4:	4628      	mov	r0, r5
 80042c6:	f000 f817 	bl	80042f8 <__swbuf_r>
 80042ca:	3001      	adds	r0, #1
 80042cc:	d1bf      	bne.n	800424e <_puts_r+0x42>
 80042ce:	e7df      	b.n	8004290 <_puts_r+0x84>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	250a      	movs	r5, #10
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	6022      	str	r2, [r4, #0]
 80042d8:	701d      	strb	r5, [r3, #0]
 80042da:	e7db      	b.n	8004294 <_puts_r+0x88>
 80042dc:	08005218 	.word	0x08005218
 80042e0:	08005238 	.word	0x08005238
 80042e4:	080051f8 	.word	0x080051f8

080042e8 <puts>:
 80042e8:	4b02      	ldr	r3, [pc, #8]	; (80042f4 <puts+0xc>)
 80042ea:	4601      	mov	r1, r0
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	f7ff bf8d 	b.w	800420c <_puts_r>
 80042f2:	bf00      	nop
 80042f4:	200001bc 	.word	0x200001bc

080042f8 <__swbuf_r>:
 80042f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fa:	460e      	mov	r6, r1
 80042fc:	4614      	mov	r4, r2
 80042fe:	4605      	mov	r5, r0
 8004300:	b118      	cbz	r0, 800430a <__swbuf_r+0x12>
 8004302:	6983      	ldr	r3, [r0, #24]
 8004304:	b90b      	cbnz	r3, 800430a <__swbuf_r+0x12>
 8004306:	f000 f9d1 	bl	80046ac <__sinit>
 800430a:	4b21      	ldr	r3, [pc, #132]	; (8004390 <__swbuf_r+0x98>)
 800430c:	429c      	cmp	r4, r3
 800430e:	d12b      	bne.n	8004368 <__swbuf_r+0x70>
 8004310:	686c      	ldr	r4, [r5, #4]
 8004312:	69a3      	ldr	r3, [r4, #24]
 8004314:	60a3      	str	r3, [r4, #8]
 8004316:	89a3      	ldrh	r3, [r4, #12]
 8004318:	071a      	lsls	r2, r3, #28
 800431a:	d52f      	bpl.n	800437c <__swbuf_r+0x84>
 800431c:	6923      	ldr	r3, [r4, #16]
 800431e:	b36b      	cbz	r3, 800437c <__swbuf_r+0x84>
 8004320:	6923      	ldr	r3, [r4, #16]
 8004322:	6820      	ldr	r0, [r4, #0]
 8004324:	1ac0      	subs	r0, r0, r3
 8004326:	6963      	ldr	r3, [r4, #20]
 8004328:	b2f6      	uxtb	r6, r6
 800432a:	4283      	cmp	r3, r0
 800432c:	4637      	mov	r7, r6
 800432e:	dc04      	bgt.n	800433a <__swbuf_r+0x42>
 8004330:	4621      	mov	r1, r4
 8004332:	4628      	mov	r0, r5
 8004334:	f000 f926 	bl	8004584 <_fflush_r>
 8004338:	bb30      	cbnz	r0, 8004388 <__swbuf_r+0x90>
 800433a:	68a3      	ldr	r3, [r4, #8]
 800433c:	3b01      	subs	r3, #1
 800433e:	60a3      	str	r3, [r4, #8]
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	6022      	str	r2, [r4, #0]
 8004346:	701e      	strb	r6, [r3, #0]
 8004348:	6963      	ldr	r3, [r4, #20]
 800434a:	3001      	adds	r0, #1
 800434c:	4283      	cmp	r3, r0
 800434e:	d004      	beq.n	800435a <__swbuf_r+0x62>
 8004350:	89a3      	ldrh	r3, [r4, #12]
 8004352:	07db      	lsls	r3, r3, #31
 8004354:	d506      	bpl.n	8004364 <__swbuf_r+0x6c>
 8004356:	2e0a      	cmp	r6, #10
 8004358:	d104      	bne.n	8004364 <__swbuf_r+0x6c>
 800435a:	4621      	mov	r1, r4
 800435c:	4628      	mov	r0, r5
 800435e:	f000 f911 	bl	8004584 <_fflush_r>
 8004362:	b988      	cbnz	r0, 8004388 <__swbuf_r+0x90>
 8004364:	4638      	mov	r0, r7
 8004366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <__swbuf_r+0x9c>)
 800436a:	429c      	cmp	r4, r3
 800436c:	d101      	bne.n	8004372 <__swbuf_r+0x7a>
 800436e:	68ac      	ldr	r4, [r5, #8]
 8004370:	e7cf      	b.n	8004312 <__swbuf_r+0x1a>
 8004372:	4b09      	ldr	r3, [pc, #36]	; (8004398 <__swbuf_r+0xa0>)
 8004374:	429c      	cmp	r4, r3
 8004376:	bf08      	it	eq
 8004378:	68ec      	ldreq	r4, [r5, #12]
 800437a:	e7ca      	b.n	8004312 <__swbuf_r+0x1a>
 800437c:	4621      	mov	r1, r4
 800437e:	4628      	mov	r0, r5
 8004380:	f000 f80c 	bl	800439c <__swsetup_r>
 8004384:	2800      	cmp	r0, #0
 8004386:	d0cb      	beq.n	8004320 <__swbuf_r+0x28>
 8004388:	f04f 37ff 	mov.w	r7, #4294967295
 800438c:	e7ea      	b.n	8004364 <__swbuf_r+0x6c>
 800438e:	bf00      	nop
 8004390:	08005218 	.word	0x08005218
 8004394:	08005238 	.word	0x08005238
 8004398:	080051f8 	.word	0x080051f8

0800439c <__swsetup_r>:
 800439c:	4b32      	ldr	r3, [pc, #200]	; (8004468 <__swsetup_r+0xcc>)
 800439e:	b570      	push	{r4, r5, r6, lr}
 80043a0:	681d      	ldr	r5, [r3, #0]
 80043a2:	4606      	mov	r6, r0
 80043a4:	460c      	mov	r4, r1
 80043a6:	b125      	cbz	r5, 80043b2 <__swsetup_r+0x16>
 80043a8:	69ab      	ldr	r3, [r5, #24]
 80043aa:	b913      	cbnz	r3, 80043b2 <__swsetup_r+0x16>
 80043ac:	4628      	mov	r0, r5
 80043ae:	f000 f97d 	bl	80046ac <__sinit>
 80043b2:	4b2e      	ldr	r3, [pc, #184]	; (800446c <__swsetup_r+0xd0>)
 80043b4:	429c      	cmp	r4, r3
 80043b6:	d10f      	bne.n	80043d8 <__swsetup_r+0x3c>
 80043b8:	686c      	ldr	r4, [r5, #4]
 80043ba:	89a3      	ldrh	r3, [r4, #12]
 80043bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043c0:	0719      	lsls	r1, r3, #28
 80043c2:	d42c      	bmi.n	800441e <__swsetup_r+0x82>
 80043c4:	06dd      	lsls	r5, r3, #27
 80043c6:	d411      	bmi.n	80043ec <__swsetup_r+0x50>
 80043c8:	2309      	movs	r3, #9
 80043ca:	6033      	str	r3, [r6, #0]
 80043cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043d0:	81a3      	strh	r3, [r4, #12]
 80043d2:	f04f 30ff 	mov.w	r0, #4294967295
 80043d6:	e03e      	b.n	8004456 <__swsetup_r+0xba>
 80043d8:	4b25      	ldr	r3, [pc, #148]	; (8004470 <__swsetup_r+0xd4>)
 80043da:	429c      	cmp	r4, r3
 80043dc:	d101      	bne.n	80043e2 <__swsetup_r+0x46>
 80043de:	68ac      	ldr	r4, [r5, #8]
 80043e0:	e7eb      	b.n	80043ba <__swsetup_r+0x1e>
 80043e2:	4b24      	ldr	r3, [pc, #144]	; (8004474 <__swsetup_r+0xd8>)
 80043e4:	429c      	cmp	r4, r3
 80043e6:	bf08      	it	eq
 80043e8:	68ec      	ldreq	r4, [r5, #12]
 80043ea:	e7e6      	b.n	80043ba <__swsetup_r+0x1e>
 80043ec:	0758      	lsls	r0, r3, #29
 80043ee:	d512      	bpl.n	8004416 <__swsetup_r+0x7a>
 80043f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043f2:	b141      	cbz	r1, 8004406 <__swsetup_r+0x6a>
 80043f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043f8:	4299      	cmp	r1, r3
 80043fa:	d002      	beq.n	8004402 <__swsetup_r+0x66>
 80043fc:	4630      	mov	r0, r6
 80043fe:	f000 fa59 	bl	80048b4 <_free_r>
 8004402:	2300      	movs	r3, #0
 8004404:	6363      	str	r3, [r4, #52]	; 0x34
 8004406:	89a3      	ldrh	r3, [r4, #12]
 8004408:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800440c:	81a3      	strh	r3, [r4, #12]
 800440e:	2300      	movs	r3, #0
 8004410:	6063      	str	r3, [r4, #4]
 8004412:	6923      	ldr	r3, [r4, #16]
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	89a3      	ldrh	r3, [r4, #12]
 8004418:	f043 0308 	orr.w	r3, r3, #8
 800441c:	81a3      	strh	r3, [r4, #12]
 800441e:	6923      	ldr	r3, [r4, #16]
 8004420:	b94b      	cbnz	r3, 8004436 <__swsetup_r+0x9a>
 8004422:	89a3      	ldrh	r3, [r4, #12]
 8004424:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800442c:	d003      	beq.n	8004436 <__swsetup_r+0x9a>
 800442e:	4621      	mov	r1, r4
 8004430:	4630      	mov	r0, r6
 8004432:	f000 f9ff 	bl	8004834 <__smakebuf_r>
 8004436:	89a0      	ldrh	r0, [r4, #12]
 8004438:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800443c:	f010 0301 	ands.w	r3, r0, #1
 8004440:	d00a      	beq.n	8004458 <__swsetup_r+0xbc>
 8004442:	2300      	movs	r3, #0
 8004444:	60a3      	str	r3, [r4, #8]
 8004446:	6963      	ldr	r3, [r4, #20]
 8004448:	425b      	negs	r3, r3
 800444a:	61a3      	str	r3, [r4, #24]
 800444c:	6923      	ldr	r3, [r4, #16]
 800444e:	b943      	cbnz	r3, 8004462 <__swsetup_r+0xc6>
 8004450:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004454:	d1ba      	bne.n	80043cc <__swsetup_r+0x30>
 8004456:	bd70      	pop	{r4, r5, r6, pc}
 8004458:	0781      	lsls	r1, r0, #30
 800445a:	bf58      	it	pl
 800445c:	6963      	ldrpl	r3, [r4, #20]
 800445e:	60a3      	str	r3, [r4, #8]
 8004460:	e7f4      	b.n	800444c <__swsetup_r+0xb0>
 8004462:	2000      	movs	r0, #0
 8004464:	e7f7      	b.n	8004456 <__swsetup_r+0xba>
 8004466:	bf00      	nop
 8004468:	200001bc 	.word	0x200001bc
 800446c:	08005218 	.word	0x08005218
 8004470:	08005238 	.word	0x08005238
 8004474:	080051f8 	.word	0x080051f8

08004478 <__sflush_r>:
 8004478:	898a      	ldrh	r2, [r1, #12]
 800447a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800447e:	4605      	mov	r5, r0
 8004480:	0710      	lsls	r0, r2, #28
 8004482:	460c      	mov	r4, r1
 8004484:	d458      	bmi.n	8004538 <__sflush_r+0xc0>
 8004486:	684b      	ldr	r3, [r1, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	dc05      	bgt.n	8004498 <__sflush_r+0x20>
 800448c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800448e:	2b00      	cmp	r3, #0
 8004490:	dc02      	bgt.n	8004498 <__sflush_r+0x20>
 8004492:	2000      	movs	r0, #0
 8004494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800449a:	2e00      	cmp	r6, #0
 800449c:	d0f9      	beq.n	8004492 <__sflush_r+0x1a>
 800449e:	2300      	movs	r3, #0
 80044a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044a4:	682f      	ldr	r7, [r5, #0]
 80044a6:	602b      	str	r3, [r5, #0]
 80044a8:	d032      	beq.n	8004510 <__sflush_r+0x98>
 80044aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044ac:	89a3      	ldrh	r3, [r4, #12]
 80044ae:	075a      	lsls	r2, r3, #29
 80044b0:	d505      	bpl.n	80044be <__sflush_r+0x46>
 80044b2:	6863      	ldr	r3, [r4, #4]
 80044b4:	1ac0      	subs	r0, r0, r3
 80044b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044b8:	b10b      	cbz	r3, 80044be <__sflush_r+0x46>
 80044ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044bc:	1ac0      	subs	r0, r0, r3
 80044be:	2300      	movs	r3, #0
 80044c0:	4602      	mov	r2, r0
 80044c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044c4:	6a21      	ldr	r1, [r4, #32]
 80044c6:	4628      	mov	r0, r5
 80044c8:	47b0      	blx	r6
 80044ca:	1c43      	adds	r3, r0, #1
 80044cc:	89a3      	ldrh	r3, [r4, #12]
 80044ce:	d106      	bne.n	80044de <__sflush_r+0x66>
 80044d0:	6829      	ldr	r1, [r5, #0]
 80044d2:	291d      	cmp	r1, #29
 80044d4:	d82c      	bhi.n	8004530 <__sflush_r+0xb8>
 80044d6:	4a2a      	ldr	r2, [pc, #168]	; (8004580 <__sflush_r+0x108>)
 80044d8:	40ca      	lsrs	r2, r1
 80044da:	07d6      	lsls	r6, r2, #31
 80044dc:	d528      	bpl.n	8004530 <__sflush_r+0xb8>
 80044de:	2200      	movs	r2, #0
 80044e0:	6062      	str	r2, [r4, #4]
 80044e2:	04d9      	lsls	r1, r3, #19
 80044e4:	6922      	ldr	r2, [r4, #16]
 80044e6:	6022      	str	r2, [r4, #0]
 80044e8:	d504      	bpl.n	80044f4 <__sflush_r+0x7c>
 80044ea:	1c42      	adds	r2, r0, #1
 80044ec:	d101      	bne.n	80044f2 <__sflush_r+0x7a>
 80044ee:	682b      	ldr	r3, [r5, #0]
 80044f0:	b903      	cbnz	r3, 80044f4 <__sflush_r+0x7c>
 80044f2:	6560      	str	r0, [r4, #84]	; 0x54
 80044f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044f6:	602f      	str	r7, [r5, #0]
 80044f8:	2900      	cmp	r1, #0
 80044fa:	d0ca      	beq.n	8004492 <__sflush_r+0x1a>
 80044fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004500:	4299      	cmp	r1, r3
 8004502:	d002      	beq.n	800450a <__sflush_r+0x92>
 8004504:	4628      	mov	r0, r5
 8004506:	f000 f9d5 	bl	80048b4 <_free_r>
 800450a:	2000      	movs	r0, #0
 800450c:	6360      	str	r0, [r4, #52]	; 0x34
 800450e:	e7c1      	b.n	8004494 <__sflush_r+0x1c>
 8004510:	6a21      	ldr	r1, [r4, #32]
 8004512:	2301      	movs	r3, #1
 8004514:	4628      	mov	r0, r5
 8004516:	47b0      	blx	r6
 8004518:	1c41      	adds	r1, r0, #1
 800451a:	d1c7      	bne.n	80044ac <__sflush_r+0x34>
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0c4      	beq.n	80044ac <__sflush_r+0x34>
 8004522:	2b1d      	cmp	r3, #29
 8004524:	d001      	beq.n	800452a <__sflush_r+0xb2>
 8004526:	2b16      	cmp	r3, #22
 8004528:	d101      	bne.n	800452e <__sflush_r+0xb6>
 800452a:	602f      	str	r7, [r5, #0]
 800452c:	e7b1      	b.n	8004492 <__sflush_r+0x1a>
 800452e:	89a3      	ldrh	r3, [r4, #12]
 8004530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004534:	81a3      	strh	r3, [r4, #12]
 8004536:	e7ad      	b.n	8004494 <__sflush_r+0x1c>
 8004538:	690f      	ldr	r7, [r1, #16]
 800453a:	2f00      	cmp	r7, #0
 800453c:	d0a9      	beq.n	8004492 <__sflush_r+0x1a>
 800453e:	0793      	lsls	r3, r2, #30
 8004540:	680e      	ldr	r6, [r1, #0]
 8004542:	bf08      	it	eq
 8004544:	694b      	ldreq	r3, [r1, #20]
 8004546:	600f      	str	r7, [r1, #0]
 8004548:	bf18      	it	ne
 800454a:	2300      	movne	r3, #0
 800454c:	eba6 0807 	sub.w	r8, r6, r7
 8004550:	608b      	str	r3, [r1, #8]
 8004552:	f1b8 0f00 	cmp.w	r8, #0
 8004556:	dd9c      	ble.n	8004492 <__sflush_r+0x1a>
 8004558:	6a21      	ldr	r1, [r4, #32]
 800455a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800455c:	4643      	mov	r3, r8
 800455e:	463a      	mov	r2, r7
 8004560:	4628      	mov	r0, r5
 8004562:	47b0      	blx	r6
 8004564:	2800      	cmp	r0, #0
 8004566:	dc06      	bgt.n	8004576 <__sflush_r+0xfe>
 8004568:	89a3      	ldrh	r3, [r4, #12]
 800456a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800456e:	81a3      	strh	r3, [r4, #12]
 8004570:	f04f 30ff 	mov.w	r0, #4294967295
 8004574:	e78e      	b.n	8004494 <__sflush_r+0x1c>
 8004576:	4407      	add	r7, r0
 8004578:	eba8 0800 	sub.w	r8, r8, r0
 800457c:	e7e9      	b.n	8004552 <__sflush_r+0xda>
 800457e:	bf00      	nop
 8004580:	20400001 	.word	0x20400001

08004584 <_fflush_r>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	690b      	ldr	r3, [r1, #16]
 8004588:	4605      	mov	r5, r0
 800458a:	460c      	mov	r4, r1
 800458c:	b913      	cbnz	r3, 8004594 <_fflush_r+0x10>
 800458e:	2500      	movs	r5, #0
 8004590:	4628      	mov	r0, r5
 8004592:	bd38      	pop	{r3, r4, r5, pc}
 8004594:	b118      	cbz	r0, 800459e <_fflush_r+0x1a>
 8004596:	6983      	ldr	r3, [r0, #24]
 8004598:	b90b      	cbnz	r3, 800459e <_fflush_r+0x1a>
 800459a:	f000 f887 	bl	80046ac <__sinit>
 800459e:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <_fflush_r+0x6c>)
 80045a0:	429c      	cmp	r4, r3
 80045a2:	d11b      	bne.n	80045dc <_fflush_r+0x58>
 80045a4:	686c      	ldr	r4, [r5, #4]
 80045a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0ef      	beq.n	800458e <_fflush_r+0xa>
 80045ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045b0:	07d0      	lsls	r0, r2, #31
 80045b2:	d404      	bmi.n	80045be <_fflush_r+0x3a>
 80045b4:	0599      	lsls	r1, r3, #22
 80045b6:	d402      	bmi.n	80045be <_fflush_r+0x3a>
 80045b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ba:	f000 f915 	bl	80047e8 <__retarget_lock_acquire_recursive>
 80045be:	4628      	mov	r0, r5
 80045c0:	4621      	mov	r1, r4
 80045c2:	f7ff ff59 	bl	8004478 <__sflush_r>
 80045c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045c8:	07da      	lsls	r2, r3, #31
 80045ca:	4605      	mov	r5, r0
 80045cc:	d4e0      	bmi.n	8004590 <_fflush_r+0xc>
 80045ce:	89a3      	ldrh	r3, [r4, #12]
 80045d0:	059b      	lsls	r3, r3, #22
 80045d2:	d4dd      	bmi.n	8004590 <_fflush_r+0xc>
 80045d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045d6:	f000 f908 	bl	80047ea <__retarget_lock_release_recursive>
 80045da:	e7d9      	b.n	8004590 <_fflush_r+0xc>
 80045dc:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <_fflush_r+0x70>)
 80045de:	429c      	cmp	r4, r3
 80045e0:	d101      	bne.n	80045e6 <_fflush_r+0x62>
 80045e2:	68ac      	ldr	r4, [r5, #8]
 80045e4:	e7df      	b.n	80045a6 <_fflush_r+0x22>
 80045e6:	4b04      	ldr	r3, [pc, #16]	; (80045f8 <_fflush_r+0x74>)
 80045e8:	429c      	cmp	r4, r3
 80045ea:	bf08      	it	eq
 80045ec:	68ec      	ldreq	r4, [r5, #12]
 80045ee:	e7da      	b.n	80045a6 <_fflush_r+0x22>
 80045f0:	08005218 	.word	0x08005218
 80045f4:	08005238 	.word	0x08005238
 80045f8:	080051f8 	.word	0x080051f8

080045fc <std>:
 80045fc:	2300      	movs	r3, #0
 80045fe:	b510      	push	{r4, lr}
 8004600:	4604      	mov	r4, r0
 8004602:	e9c0 3300 	strd	r3, r3, [r0]
 8004606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800460a:	6083      	str	r3, [r0, #8]
 800460c:	8181      	strh	r1, [r0, #12]
 800460e:	6643      	str	r3, [r0, #100]	; 0x64
 8004610:	81c2      	strh	r2, [r0, #14]
 8004612:	6183      	str	r3, [r0, #24]
 8004614:	4619      	mov	r1, r3
 8004616:	2208      	movs	r2, #8
 8004618:	305c      	adds	r0, #92	; 0x5c
 800461a:	f7ff fdd7 	bl	80041cc <memset>
 800461e:	4b05      	ldr	r3, [pc, #20]	; (8004634 <std+0x38>)
 8004620:	6263      	str	r3, [r4, #36]	; 0x24
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <std+0x3c>)
 8004624:	62a3      	str	r3, [r4, #40]	; 0x28
 8004626:	4b05      	ldr	r3, [pc, #20]	; (800463c <std+0x40>)
 8004628:	62e3      	str	r3, [r4, #44]	; 0x2c
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <std+0x44>)
 800462c:	6224      	str	r4, [r4, #32]
 800462e:	6323      	str	r3, [r4, #48]	; 0x30
 8004630:	bd10      	pop	{r4, pc}
 8004632:	bf00      	nop
 8004634:	08005005 	.word	0x08005005
 8004638:	08005027 	.word	0x08005027
 800463c:	0800505f 	.word	0x0800505f
 8004640:	08005083 	.word	0x08005083

08004644 <_cleanup_r>:
 8004644:	4901      	ldr	r1, [pc, #4]	; (800464c <_cleanup_r+0x8>)
 8004646:	f000 b8af 	b.w	80047a8 <_fwalk_reent>
 800464a:	bf00      	nop
 800464c:	08004585 	.word	0x08004585

08004650 <__sfmoreglue>:
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	1e4a      	subs	r2, r1, #1
 8004654:	2568      	movs	r5, #104	; 0x68
 8004656:	4355      	muls	r5, r2
 8004658:	460e      	mov	r6, r1
 800465a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800465e:	f000 f979 	bl	8004954 <_malloc_r>
 8004662:	4604      	mov	r4, r0
 8004664:	b140      	cbz	r0, 8004678 <__sfmoreglue+0x28>
 8004666:	2100      	movs	r1, #0
 8004668:	e9c0 1600 	strd	r1, r6, [r0]
 800466c:	300c      	adds	r0, #12
 800466e:	60a0      	str	r0, [r4, #8]
 8004670:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004674:	f7ff fdaa 	bl	80041cc <memset>
 8004678:	4620      	mov	r0, r4
 800467a:	bd70      	pop	{r4, r5, r6, pc}

0800467c <__sfp_lock_acquire>:
 800467c:	4801      	ldr	r0, [pc, #4]	; (8004684 <__sfp_lock_acquire+0x8>)
 800467e:	f000 b8b3 	b.w	80047e8 <__retarget_lock_acquire_recursive>
 8004682:	bf00      	nop
 8004684:	20000448 	.word	0x20000448

08004688 <__sfp_lock_release>:
 8004688:	4801      	ldr	r0, [pc, #4]	; (8004690 <__sfp_lock_release+0x8>)
 800468a:	f000 b8ae 	b.w	80047ea <__retarget_lock_release_recursive>
 800468e:	bf00      	nop
 8004690:	20000448 	.word	0x20000448

08004694 <__sinit_lock_acquire>:
 8004694:	4801      	ldr	r0, [pc, #4]	; (800469c <__sinit_lock_acquire+0x8>)
 8004696:	f000 b8a7 	b.w	80047e8 <__retarget_lock_acquire_recursive>
 800469a:	bf00      	nop
 800469c:	20000443 	.word	0x20000443

080046a0 <__sinit_lock_release>:
 80046a0:	4801      	ldr	r0, [pc, #4]	; (80046a8 <__sinit_lock_release+0x8>)
 80046a2:	f000 b8a2 	b.w	80047ea <__retarget_lock_release_recursive>
 80046a6:	bf00      	nop
 80046a8:	20000443 	.word	0x20000443

080046ac <__sinit>:
 80046ac:	b510      	push	{r4, lr}
 80046ae:	4604      	mov	r4, r0
 80046b0:	f7ff fff0 	bl	8004694 <__sinit_lock_acquire>
 80046b4:	69a3      	ldr	r3, [r4, #24]
 80046b6:	b11b      	cbz	r3, 80046c0 <__sinit+0x14>
 80046b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046bc:	f7ff bff0 	b.w	80046a0 <__sinit_lock_release>
 80046c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80046c4:	6523      	str	r3, [r4, #80]	; 0x50
 80046c6:	4b13      	ldr	r3, [pc, #76]	; (8004714 <__sinit+0x68>)
 80046c8:	4a13      	ldr	r2, [pc, #76]	; (8004718 <__sinit+0x6c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80046ce:	42a3      	cmp	r3, r4
 80046d0:	bf04      	itt	eq
 80046d2:	2301      	moveq	r3, #1
 80046d4:	61a3      	streq	r3, [r4, #24]
 80046d6:	4620      	mov	r0, r4
 80046d8:	f000 f820 	bl	800471c <__sfp>
 80046dc:	6060      	str	r0, [r4, #4]
 80046de:	4620      	mov	r0, r4
 80046e0:	f000 f81c 	bl	800471c <__sfp>
 80046e4:	60a0      	str	r0, [r4, #8]
 80046e6:	4620      	mov	r0, r4
 80046e8:	f000 f818 	bl	800471c <__sfp>
 80046ec:	2200      	movs	r2, #0
 80046ee:	60e0      	str	r0, [r4, #12]
 80046f0:	2104      	movs	r1, #4
 80046f2:	6860      	ldr	r0, [r4, #4]
 80046f4:	f7ff ff82 	bl	80045fc <std>
 80046f8:	68a0      	ldr	r0, [r4, #8]
 80046fa:	2201      	movs	r2, #1
 80046fc:	2109      	movs	r1, #9
 80046fe:	f7ff ff7d 	bl	80045fc <std>
 8004702:	68e0      	ldr	r0, [r4, #12]
 8004704:	2202      	movs	r2, #2
 8004706:	2112      	movs	r1, #18
 8004708:	f7ff ff78 	bl	80045fc <std>
 800470c:	2301      	movs	r3, #1
 800470e:	61a3      	str	r3, [r4, #24]
 8004710:	e7d2      	b.n	80046b8 <__sinit+0xc>
 8004712:	bf00      	nop
 8004714:	080051f4 	.word	0x080051f4
 8004718:	08004645 	.word	0x08004645

0800471c <__sfp>:
 800471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471e:	4607      	mov	r7, r0
 8004720:	f7ff ffac 	bl	800467c <__sfp_lock_acquire>
 8004724:	4b1e      	ldr	r3, [pc, #120]	; (80047a0 <__sfp+0x84>)
 8004726:	681e      	ldr	r6, [r3, #0]
 8004728:	69b3      	ldr	r3, [r6, #24]
 800472a:	b913      	cbnz	r3, 8004732 <__sfp+0x16>
 800472c:	4630      	mov	r0, r6
 800472e:	f7ff ffbd 	bl	80046ac <__sinit>
 8004732:	3648      	adds	r6, #72	; 0x48
 8004734:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004738:	3b01      	subs	r3, #1
 800473a:	d503      	bpl.n	8004744 <__sfp+0x28>
 800473c:	6833      	ldr	r3, [r6, #0]
 800473e:	b30b      	cbz	r3, 8004784 <__sfp+0x68>
 8004740:	6836      	ldr	r6, [r6, #0]
 8004742:	e7f7      	b.n	8004734 <__sfp+0x18>
 8004744:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004748:	b9d5      	cbnz	r5, 8004780 <__sfp+0x64>
 800474a:	4b16      	ldr	r3, [pc, #88]	; (80047a4 <__sfp+0x88>)
 800474c:	60e3      	str	r3, [r4, #12]
 800474e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004752:	6665      	str	r5, [r4, #100]	; 0x64
 8004754:	f000 f847 	bl	80047e6 <__retarget_lock_init_recursive>
 8004758:	f7ff ff96 	bl	8004688 <__sfp_lock_release>
 800475c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004760:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004764:	6025      	str	r5, [r4, #0]
 8004766:	61a5      	str	r5, [r4, #24]
 8004768:	2208      	movs	r2, #8
 800476a:	4629      	mov	r1, r5
 800476c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004770:	f7ff fd2c 	bl	80041cc <memset>
 8004774:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004778:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800477c:	4620      	mov	r0, r4
 800477e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004780:	3468      	adds	r4, #104	; 0x68
 8004782:	e7d9      	b.n	8004738 <__sfp+0x1c>
 8004784:	2104      	movs	r1, #4
 8004786:	4638      	mov	r0, r7
 8004788:	f7ff ff62 	bl	8004650 <__sfmoreglue>
 800478c:	4604      	mov	r4, r0
 800478e:	6030      	str	r0, [r6, #0]
 8004790:	2800      	cmp	r0, #0
 8004792:	d1d5      	bne.n	8004740 <__sfp+0x24>
 8004794:	f7ff ff78 	bl	8004688 <__sfp_lock_release>
 8004798:	230c      	movs	r3, #12
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	e7ee      	b.n	800477c <__sfp+0x60>
 800479e:	bf00      	nop
 80047a0:	080051f4 	.word	0x080051f4
 80047a4:	ffff0001 	.word	0xffff0001

080047a8 <_fwalk_reent>:
 80047a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047ac:	4606      	mov	r6, r0
 80047ae:	4688      	mov	r8, r1
 80047b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80047b4:	2700      	movs	r7, #0
 80047b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047ba:	f1b9 0901 	subs.w	r9, r9, #1
 80047be:	d505      	bpl.n	80047cc <_fwalk_reent+0x24>
 80047c0:	6824      	ldr	r4, [r4, #0]
 80047c2:	2c00      	cmp	r4, #0
 80047c4:	d1f7      	bne.n	80047b6 <_fwalk_reent+0xe>
 80047c6:	4638      	mov	r0, r7
 80047c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047cc:	89ab      	ldrh	r3, [r5, #12]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d907      	bls.n	80047e2 <_fwalk_reent+0x3a>
 80047d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047d6:	3301      	adds	r3, #1
 80047d8:	d003      	beq.n	80047e2 <_fwalk_reent+0x3a>
 80047da:	4629      	mov	r1, r5
 80047dc:	4630      	mov	r0, r6
 80047de:	47c0      	blx	r8
 80047e0:	4307      	orrs	r7, r0
 80047e2:	3568      	adds	r5, #104	; 0x68
 80047e4:	e7e9      	b.n	80047ba <_fwalk_reent+0x12>

080047e6 <__retarget_lock_init_recursive>:
 80047e6:	4770      	bx	lr

080047e8 <__retarget_lock_acquire_recursive>:
 80047e8:	4770      	bx	lr

080047ea <__retarget_lock_release_recursive>:
 80047ea:	4770      	bx	lr

080047ec <__swhatbuf_r>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	460e      	mov	r6, r1
 80047f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f4:	2900      	cmp	r1, #0
 80047f6:	b096      	sub	sp, #88	; 0x58
 80047f8:	4614      	mov	r4, r2
 80047fa:	461d      	mov	r5, r3
 80047fc:	da07      	bge.n	800480e <__swhatbuf_r+0x22>
 80047fe:	2300      	movs	r3, #0
 8004800:	602b      	str	r3, [r5, #0]
 8004802:	89b3      	ldrh	r3, [r6, #12]
 8004804:	061a      	lsls	r2, r3, #24
 8004806:	d410      	bmi.n	800482a <__swhatbuf_r+0x3e>
 8004808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800480c:	e00e      	b.n	800482c <__swhatbuf_r+0x40>
 800480e:	466a      	mov	r2, sp
 8004810:	f000 fc5e 	bl	80050d0 <_fstat_r>
 8004814:	2800      	cmp	r0, #0
 8004816:	dbf2      	blt.n	80047fe <__swhatbuf_r+0x12>
 8004818:	9a01      	ldr	r2, [sp, #4]
 800481a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800481e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004822:	425a      	negs	r2, r3
 8004824:	415a      	adcs	r2, r3
 8004826:	602a      	str	r2, [r5, #0]
 8004828:	e7ee      	b.n	8004808 <__swhatbuf_r+0x1c>
 800482a:	2340      	movs	r3, #64	; 0x40
 800482c:	2000      	movs	r0, #0
 800482e:	6023      	str	r3, [r4, #0]
 8004830:	b016      	add	sp, #88	; 0x58
 8004832:	bd70      	pop	{r4, r5, r6, pc}

08004834 <__smakebuf_r>:
 8004834:	898b      	ldrh	r3, [r1, #12]
 8004836:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004838:	079d      	lsls	r5, r3, #30
 800483a:	4606      	mov	r6, r0
 800483c:	460c      	mov	r4, r1
 800483e:	d507      	bpl.n	8004850 <__smakebuf_r+0x1c>
 8004840:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	6123      	str	r3, [r4, #16]
 8004848:	2301      	movs	r3, #1
 800484a:	6163      	str	r3, [r4, #20]
 800484c:	b002      	add	sp, #8
 800484e:	bd70      	pop	{r4, r5, r6, pc}
 8004850:	ab01      	add	r3, sp, #4
 8004852:	466a      	mov	r2, sp
 8004854:	f7ff ffca 	bl	80047ec <__swhatbuf_r>
 8004858:	9900      	ldr	r1, [sp, #0]
 800485a:	4605      	mov	r5, r0
 800485c:	4630      	mov	r0, r6
 800485e:	f000 f879 	bl	8004954 <_malloc_r>
 8004862:	b948      	cbnz	r0, 8004878 <__smakebuf_r+0x44>
 8004864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004868:	059a      	lsls	r2, r3, #22
 800486a:	d4ef      	bmi.n	800484c <__smakebuf_r+0x18>
 800486c:	f023 0303 	bic.w	r3, r3, #3
 8004870:	f043 0302 	orr.w	r3, r3, #2
 8004874:	81a3      	strh	r3, [r4, #12]
 8004876:	e7e3      	b.n	8004840 <__smakebuf_r+0xc>
 8004878:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <__smakebuf_r+0x7c>)
 800487a:	62b3      	str	r3, [r6, #40]	; 0x28
 800487c:	89a3      	ldrh	r3, [r4, #12]
 800487e:	6020      	str	r0, [r4, #0]
 8004880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004884:	81a3      	strh	r3, [r4, #12]
 8004886:	9b00      	ldr	r3, [sp, #0]
 8004888:	6163      	str	r3, [r4, #20]
 800488a:	9b01      	ldr	r3, [sp, #4]
 800488c:	6120      	str	r0, [r4, #16]
 800488e:	b15b      	cbz	r3, 80048a8 <__smakebuf_r+0x74>
 8004890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004894:	4630      	mov	r0, r6
 8004896:	f000 fc2d 	bl	80050f4 <_isatty_r>
 800489a:	b128      	cbz	r0, 80048a8 <__smakebuf_r+0x74>
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	f023 0303 	bic.w	r3, r3, #3
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	81a3      	strh	r3, [r4, #12]
 80048a8:	89a0      	ldrh	r0, [r4, #12]
 80048aa:	4305      	orrs	r5, r0
 80048ac:	81a5      	strh	r5, [r4, #12]
 80048ae:	e7cd      	b.n	800484c <__smakebuf_r+0x18>
 80048b0:	08004645 	.word	0x08004645

080048b4 <_free_r>:
 80048b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048b6:	2900      	cmp	r1, #0
 80048b8:	d048      	beq.n	800494c <_free_r+0x98>
 80048ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048be:	9001      	str	r0, [sp, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f1a1 0404 	sub.w	r4, r1, #4
 80048c6:	bfb8      	it	lt
 80048c8:	18e4      	addlt	r4, r4, r3
 80048ca:	f000 fc35 	bl	8005138 <__malloc_lock>
 80048ce:	4a20      	ldr	r2, [pc, #128]	; (8004950 <_free_r+0x9c>)
 80048d0:	9801      	ldr	r0, [sp, #4]
 80048d2:	6813      	ldr	r3, [r2, #0]
 80048d4:	4615      	mov	r5, r2
 80048d6:	b933      	cbnz	r3, 80048e6 <_free_r+0x32>
 80048d8:	6063      	str	r3, [r4, #4]
 80048da:	6014      	str	r4, [r2, #0]
 80048dc:	b003      	add	sp, #12
 80048de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048e2:	f000 bc2f 	b.w	8005144 <__malloc_unlock>
 80048e6:	42a3      	cmp	r3, r4
 80048e8:	d90b      	bls.n	8004902 <_free_r+0x4e>
 80048ea:	6821      	ldr	r1, [r4, #0]
 80048ec:	1862      	adds	r2, r4, r1
 80048ee:	4293      	cmp	r3, r2
 80048f0:	bf04      	itt	eq
 80048f2:	681a      	ldreq	r2, [r3, #0]
 80048f4:	685b      	ldreq	r3, [r3, #4]
 80048f6:	6063      	str	r3, [r4, #4]
 80048f8:	bf04      	itt	eq
 80048fa:	1852      	addeq	r2, r2, r1
 80048fc:	6022      	streq	r2, [r4, #0]
 80048fe:	602c      	str	r4, [r5, #0]
 8004900:	e7ec      	b.n	80048dc <_free_r+0x28>
 8004902:	461a      	mov	r2, r3
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	b10b      	cbz	r3, 800490c <_free_r+0x58>
 8004908:	42a3      	cmp	r3, r4
 800490a:	d9fa      	bls.n	8004902 <_free_r+0x4e>
 800490c:	6811      	ldr	r1, [r2, #0]
 800490e:	1855      	adds	r5, r2, r1
 8004910:	42a5      	cmp	r5, r4
 8004912:	d10b      	bne.n	800492c <_free_r+0x78>
 8004914:	6824      	ldr	r4, [r4, #0]
 8004916:	4421      	add	r1, r4
 8004918:	1854      	adds	r4, r2, r1
 800491a:	42a3      	cmp	r3, r4
 800491c:	6011      	str	r1, [r2, #0]
 800491e:	d1dd      	bne.n	80048dc <_free_r+0x28>
 8004920:	681c      	ldr	r4, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	6053      	str	r3, [r2, #4]
 8004926:	4421      	add	r1, r4
 8004928:	6011      	str	r1, [r2, #0]
 800492a:	e7d7      	b.n	80048dc <_free_r+0x28>
 800492c:	d902      	bls.n	8004934 <_free_r+0x80>
 800492e:	230c      	movs	r3, #12
 8004930:	6003      	str	r3, [r0, #0]
 8004932:	e7d3      	b.n	80048dc <_free_r+0x28>
 8004934:	6825      	ldr	r5, [r4, #0]
 8004936:	1961      	adds	r1, r4, r5
 8004938:	428b      	cmp	r3, r1
 800493a:	bf04      	itt	eq
 800493c:	6819      	ldreq	r1, [r3, #0]
 800493e:	685b      	ldreq	r3, [r3, #4]
 8004940:	6063      	str	r3, [r4, #4]
 8004942:	bf04      	itt	eq
 8004944:	1949      	addeq	r1, r1, r5
 8004946:	6021      	streq	r1, [r4, #0]
 8004948:	6054      	str	r4, [r2, #4]
 800494a:	e7c7      	b.n	80048dc <_free_r+0x28>
 800494c:	b003      	add	sp, #12
 800494e:	bd30      	pop	{r4, r5, pc}
 8004950:	20000248 	.word	0x20000248

08004954 <_malloc_r>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	1ccd      	adds	r5, r1, #3
 8004958:	f025 0503 	bic.w	r5, r5, #3
 800495c:	3508      	adds	r5, #8
 800495e:	2d0c      	cmp	r5, #12
 8004960:	bf38      	it	cc
 8004962:	250c      	movcc	r5, #12
 8004964:	2d00      	cmp	r5, #0
 8004966:	4606      	mov	r6, r0
 8004968:	db01      	blt.n	800496e <_malloc_r+0x1a>
 800496a:	42a9      	cmp	r1, r5
 800496c:	d903      	bls.n	8004976 <_malloc_r+0x22>
 800496e:	230c      	movs	r3, #12
 8004970:	6033      	str	r3, [r6, #0]
 8004972:	2000      	movs	r0, #0
 8004974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004976:	f000 fbdf 	bl	8005138 <__malloc_lock>
 800497a:	4921      	ldr	r1, [pc, #132]	; (8004a00 <_malloc_r+0xac>)
 800497c:	680a      	ldr	r2, [r1, #0]
 800497e:	4614      	mov	r4, r2
 8004980:	b99c      	cbnz	r4, 80049aa <_malloc_r+0x56>
 8004982:	4f20      	ldr	r7, [pc, #128]	; (8004a04 <_malloc_r+0xb0>)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	b923      	cbnz	r3, 8004992 <_malloc_r+0x3e>
 8004988:	4621      	mov	r1, r4
 800498a:	4630      	mov	r0, r6
 800498c:	f000 fb2a 	bl	8004fe4 <_sbrk_r>
 8004990:	6038      	str	r0, [r7, #0]
 8004992:	4629      	mov	r1, r5
 8004994:	4630      	mov	r0, r6
 8004996:	f000 fb25 	bl	8004fe4 <_sbrk_r>
 800499a:	1c43      	adds	r3, r0, #1
 800499c:	d123      	bne.n	80049e6 <_malloc_r+0x92>
 800499e:	230c      	movs	r3, #12
 80049a0:	6033      	str	r3, [r6, #0]
 80049a2:	4630      	mov	r0, r6
 80049a4:	f000 fbce 	bl	8005144 <__malloc_unlock>
 80049a8:	e7e3      	b.n	8004972 <_malloc_r+0x1e>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	1b5b      	subs	r3, r3, r5
 80049ae:	d417      	bmi.n	80049e0 <_malloc_r+0x8c>
 80049b0:	2b0b      	cmp	r3, #11
 80049b2:	d903      	bls.n	80049bc <_malloc_r+0x68>
 80049b4:	6023      	str	r3, [r4, #0]
 80049b6:	441c      	add	r4, r3
 80049b8:	6025      	str	r5, [r4, #0]
 80049ba:	e004      	b.n	80049c6 <_malloc_r+0x72>
 80049bc:	6863      	ldr	r3, [r4, #4]
 80049be:	42a2      	cmp	r2, r4
 80049c0:	bf0c      	ite	eq
 80049c2:	600b      	streq	r3, [r1, #0]
 80049c4:	6053      	strne	r3, [r2, #4]
 80049c6:	4630      	mov	r0, r6
 80049c8:	f000 fbbc 	bl	8005144 <__malloc_unlock>
 80049cc:	f104 000b 	add.w	r0, r4, #11
 80049d0:	1d23      	adds	r3, r4, #4
 80049d2:	f020 0007 	bic.w	r0, r0, #7
 80049d6:	1ac2      	subs	r2, r0, r3
 80049d8:	d0cc      	beq.n	8004974 <_malloc_r+0x20>
 80049da:	1a1b      	subs	r3, r3, r0
 80049dc:	50a3      	str	r3, [r4, r2]
 80049de:	e7c9      	b.n	8004974 <_malloc_r+0x20>
 80049e0:	4622      	mov	r2, r4
 80049e2:	6864      	ldr	r4, [r4, #4]
 80049e4:	e7cc      	b.n	8004980 <_malloc_r+0x2c>
 80049e6:	1cc4      	adds	r4, r0, #3
 80049e8:	f024 0403 	bic.w	r4, r4, #3
 80049ec:	42a0      	cmp	r0, r4
 80049ee:	d0e3      	beq.n	80049b8 <_malloc_r+0x64>
 80049f0:	1a21      	subs	r1, r4, r0
 80049f2:	4630      	mov	r0, r6
 80049f4:	f000 faf6 	bl	8004fe4 <_sbrk_r>
 80049f8:	3001      	adds	r0, #1
 80049fa:	d1dd      	bne.n	80049b8 <_malloc_r+0x64>
 80049fc:	e7cf      	b.n	800499e <_malloc_r+0x4a>
 80049fe:	bf00      	nop
 8004a00:	20000248 	.word	0x20000248
 8004a04:	2000024c 	.word	0x2000024c

08004a08 <__sfputc_r>:
 8004a08:	6893      	ldr	r3, [r2, #8]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	b410      	push	{r4}
 8004a10:	6093      	str	r3, [r2, #8]
 8004a12:	da08      	bge.n	8004a26 <__sfputc_r+0x1e>
 8004a14:	6994      	ldr	r4, [r2, #24]
 8004a16:	42a3      	cmp	r3, r4
 8004a18:	db01      	blt.n	8004a1e <__sfputc_r+0x16>
 8004a1a:	290a      	cmp	r1, #10
 8004a1c:	d103      	bne.n	8004a26 <__sfputc_r+0x1e>
 8004a1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a22:	f7ff bc69 	b.w	80042f8 <__swbuf_r>
 8004a26:	6813      	ldr	r3, [r2, #0]
 8004a28:	1c58      	adds	r0, r3, #1
 8004a2a:	6010      	str	r0, [r2, #0]
 8004a2c:	7019      	strb	r1, [r3, #0]
 8004a2e:	4608      	mov	r0, r1
 8004a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <__sfputs_r>:
 8004a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a38:	4606      	mov	r6, r0
 8004a3a:	460f      	mov	r7, r1
 8004a3c:	4614      	mov	r4, r2
 8004a3e:	18d5      	adds	r5, r2, r3
 8004a40:	42ac      	cmp	r4, r5
 8004a42:	d101      	bne.n	8004a48 <__sfputs_r+0x12>
 8004a44:	2000      	movs	r0, #0
 8004a46:	e007      	b.n	8004a58 <__sfputs_r+0x22>
 8004a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a4c:	463a      	mov	r2, r7
 8004a4e:	4630      	mov	r0, r6
 8004a50:	f7ff ffda 	bl	8004a08 <__sfputc_r>
 8004a54:	1c43      	adds	r3, r0, #1
 8004a56:	d1f3      	bne.n	8004a40 <__sfputs_r+0xa>
 8004a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a5c <_vfiprintf_r>:
 8004a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a60:	460d      	mov	r5, r1
 8004a62:	b09d      	sub	sp, #116	; 0x74
 8004a64:	4614      	mov	r4, r2
 8004a66:	4698      	mov	r8, r3
 8004a68:	4606      	mov	r6, r0
 8004a6a:	b118      	cbz	r0, 8004a74 <_vfiprintf_r+0x18>
 8004a6c:	6983      	ldr	r3, [r0, #24]
 8004a6e:	b90b      	cbnz	r3, 8004a74 <_vfiprintf_r+0x18>
 8004a70:	f7ff fe1c 	bl	80046ac <__sinit>
 8004a74:	4b89      	ldr	r3, [pc, #548]	; (8004c9c <_vfiprintf_r+0x240>)
 8004a76:	429d      	cmp	r5, r3
 8004a78:	d11b      	bne.n	8004ab2 <_vfiprintf_r+0x56>
 8004a7a:	6875      	ldr	r5, [r6, #4]
 8004a7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a7e:	07d9      	lsls	r1, r3, #31
 8004a80:	d405      	bmi.n	8004a8e <_vfiprintf_r+0x32>
 8004a82:	89ab      	ldrh	r3, [r5, #12]
 8004a84:	059a      	lsls	r2, r3, #22
 8004a86:	d402      	bmi.n	8004a8e <_vfiprintf_r+0x32>
 8004a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a8a:	f7ff fead 	bl	80047e8 <__retarget_lock_acquire_recursive>
 8004a8e:	89ab      	ldrh	r3, [r5, #12]
 8004a90:	071b      	lsls	r3, r3, #28
 8004a92:	d501      	bpl.n	8004a98 <_vfiprintf_r+0x3c>
 8004a94:	692b      	ldr	r3, [r5, #16]
 8004a96:	b9eb      	cbnz	r3, 8004ad4 <_vfiprintf_r+0x78>
 8004a98:	4629      	mov	r1, r5
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	f7ff fc7e 	bl	800439c <__swsetup_r>
 8004aa0:	b1c0      	cbz	r0, 8004ad4 <_vfiprintf_r+0x78>
 8004aa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004aa4:	07dc      	lsls	r4, r3, #31
 8004aa6:	d50e      	bpl.n	8004ac6 <_vfiprintf_r+0x6a>
 8004aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aac:	b01d      	add	sp, #116	; 0x74
 8004aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab2:	4b7b      	ldr	r3, [pc, #492]	; (8004ca0 <_vfiprintf_r+0x244>)
 8004ab4:	429d      	cmp	r5, r3
 8004ab6:	d101      	bne.n	8004abc <_vfiprintf_r+0x60>
 8004ab8:	68b5      	ldr	r5, [r6, #8]
 8004aba:	e7df      	b.n	8004a7c <_vfiprintf_r+0x20>
 8004abc:	4b79      	ldr	r3, [pc, #484]	; (8004ca4 <_vfiprintf_r+0x248>)
 8004abe:	429d      	cmp	r5, r3
 8004ac0:	bf08      	it	eq
 8004ac2:	68f5      	ldreq	r5, [r6, #12]
 8004ac4:	e7da      	b.n	8004a7c <_vfiprintf_r+0x20>
 8004ac6:	89ab      	ldrh	r3, [r5, #12]
 8004ac8:	0598      	lsls	r0, r3, #22
 8004aca:	d4ed      	bmi.n	8004aa8 <_vfiprintf_r+0x4c>
 8004acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ace:	f7ff fe8c 	bl	80047ea <__retarget_lock_release_recursive>
 8004ad2:	e7e9      	b.n	8004aa8 <_vfiprintf_r+0x4c>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ad8:	2320      	movs	r3, #32
 8004ada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ade:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ae2:	2330      	movs	r3, #48	; 0x30
 8004ae4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004ca8 <_vfiprintf_r+0x24c>
 8004ae8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004aec:	f04f 0901 	mov.w	r9, #1
 8004af0:	4623      	mov	r3, r4
 8004af2:	469a      	mov	sl, r3
 8004af4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004af8:	b10a      	cbz	r2, 8004afe <_vfiprintf_r+0xa2>
 8004afa:	2a25      	cmp	r2, #37	; 0x25
 8004afc:	d1f9      	bne.n	8004af2 <_vfiprintf_r+0x96>
 8004afe:	ebba 0b04 	subs.w	fp, sl, r4
 8004b02:	d00b      	beq.n	8004b1c <_vfiprintf_r+0xc0>
 8004b04:	465b      	mov	r3, fp
 8004b06:	4622      	mov	r2, r4
 8004b08:	4629      	mov	r1, r5
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	f7ff ff93 	bl	8004a36 <__sfputs_r>
 8004b10:	3001      	adds	r0, #1
 8004b12:	f000 80aa 	beq.w	8004c6a <_vfiprintf_r+0x20e>
 8004b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b18:	445a      	add	r2, fp
 8004b1a:	9209      	str	r2, [sp, #36]	; 0x24
 8004b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 80a2 	beq.w	8004c6a <_vfiprintf_r+0x20e>
 8004b26:	2300      	movs	r3, #0
 8004b28:	f04f 32ff 	mov.w	r2, #4294967295
 8004b2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b30:	f10a 0a01 	add.w	sl, sl, #1
 8004b34:	9304      	str	r3, [sp, #16]
 8004b36:	9307      	str	r3, [sp, #28]
 8004b38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b3c:	931a      	str	r3, [sp, #104]	; 0x68
 8004b3e:	4654      	mov	r4, sl
 8004b40:	2205      	movs	r2, #5
 8004b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b46:	4858      	ldr	r0, [pc, #352]	; (8004ca8 <_vfiprintf_r+0x24c>)
 8004b48:	f7fb fb52 	bl	80001f0 <memchr>
 8004b4c:	9a04      	ldr	r2, [sp, #16]
 8004b4e:	b9d8      	cbnz	r0, 8004b88 <_vfiprintf_r+0x12c>
 8004b50:	06d1      	lsls	r1, r2, #27
 8004b52:	bf44      	itt	mi
 8004b54:	2320      	movmi	r3, #32
 8004b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b5a:	0713      	lsls	r3, r2, #28
 8004b5c:	bf44      	itt	mi
 8004b5e:	232b      	movmi	r3, #43	; 0x2b
 8004b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b64:	f89a 3000 	ldrb.w	r3, [sl]
 8004b68:	2b2a      	cmp	r3, #42	; 0x2a
 8004b6a:	d015      	beq.n	8004b98 <_vfiprintf_r+0x13c>
 8004b6c:	9a07      	ldr	r2, [sp, #28]
 8004b6e:	4654      	mov	r4, sl
 8004b70:	2000      	movs	r0, #0
 8004b72:	f04f 0c0a 	mov.w	ip, #10
 8004b76:	4621      	mov	r1, r4
 8004b78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b7c:	3b30      	subs	r3, #48	; 0x30
 8004b7e:	2b09      	cmp	r3, #9
 8004b80:	d94e      	bls.n	8004c20 <_vfiprintf_r+0x1c4>
 8004b82:	b1b0      	cbz	r0, 8004bb2 <_vfiprintf_r+0x156>
 8004b84:	9207      	str	r2, [sp, #28]
 8004b86:	e014      	b.n	8004bb2 <_vfiprintf_r+0x156>
 8004b88:	eba0 0308 	sub.w	r3, r0, r8
 8004b8c:	fa09 f303 	lsl.w	r3, r9, r3
 8004b90:	4313      	orrs	r3, r2
 8004b92:	9304      	str	r3, [sp, #16]
 8004b94:	46a2      	mov	sl, r4
 8004b96:	e7d2      	b.n	8004b3e <_vfiprintf_r+0xe2>
 8004b98:	9b03      	ldr	r3, [sp, #12]
 8004b9a:	1d19      	adds	r1, r3, #4
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	9103      	str	r1, [sp, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bfbb      	ittet	lt
 8004ba4:	425b      	neglt	r3, r3
 8004ba6:	f042 0202 	orrlt.w	r2, r2, #2
 8004baa:	9307      	strge	r3, [sp, #28]
 8004bac:	9307      	strlt	r3, [sp, #28]
 8004bae:	bfb8      	it	lt
 8004bb0:	9204      	strlt	r2, [sp, #16]
 8004bb2:	7823      	ldrb	r3, [r4, #0]
 8004bb4:	2b2e      	cmp	r3, #46	; 0x2e
 8004bb6:	d10c      	bne.n	8004bd2 <_vfiprintf_r+0x176>
 8004bb8:	7863      	ldrb	r3, [r4, #1]
 8004bba:	2b2a      	cmp	r3, #42	; 0x2a
 8004bbc:	d135      	bne.n	8004c2a <_vfiprintf_r+0x1ce>
 8004bbe:	9b03      	ldr	r3, [sp, #12]
 8004bc0:	1d1a      	adds	r2, r3, #4
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	9203      	str	r2, [sp, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	bfb8      	it	lt
 8004bca:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bce:	3402      	adds	r4, #2
 8004bd0:	9305      	str	r3, [sp, #20]
 8004bd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004cb8 <_vfiprintf_r+0x25c>
 8004bd6:	7821      	ldrb	r1, [r4, #0]
 8004bd8:	2203      	movs	r2, #3
 8004bda:	4650      	mov	r0, sl
 8004bdc:	f7fb fb08 	bl	80001f0 <memchr>
 8004be0:	b140      	cbz	r0, 8004bf4 <_vfiprintf_r+0x198>
 8004be2:	2340      	movs	r3, #64	; 0x40
 8004be4:	eba0 000a 	sub.w	r0, r0, sl
 8004be8:	fa03 f000 	lsl.w	r0, r3, r0
 8004bec:	9b04      	ldr	r3, [sp, #16]
 8004bee:	4303      	orrs	r3, r0
 8004bf0:	3401      	adds	r4, #1
 8004bf2:	9304      	str	r3, [sp, #16]
 8004bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bf8:	482c      	ldr	r0, [pc, #176]	; (8004cac <_vfiprintf_r+0x250>)
 8004bfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bfe:	2206      	movs	r2, #6
 8004c00:	f7fb faf6 	bl	80001f0 <memchr>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d03f      	beq.n	8004c88 <_vfiprintf_r+0x22c>
 8004c08:	4b29      	ldr	r3, [pc, #164]	; (8004cb0 <_vfiprintf_r+0x254>)
 8004c0a:	bb1b      	cbnz	r3, 8004c54 <_vfiprintf_r+0x1f8>
 8004c0c:	9b03      	ldr	r3, [sp, #12]
 8004c0e:	3307      	adds	r3, #7
 8004c10:	f023 0307 	bic.w	r3, r3, #7
 8004c14:	3308      	adds	r3, #8
 8004c16:	9303      	str	r3, [sp, #12]
 8004c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c1a:	443b      	add	r3, r7
 8004c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c1e:	e767      	b.n	8004af0 <_vfiprintf_r+0x94>
 8004c20:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c24:	460c      	mov	r4, r1
 8004c26:	2001      	movs	r0, #1
 8004c28:	e7a5      	b.n	8004b76 <_vfiprintf_r+0x11a>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	3401      	adds	r4, #1
 8004c2e:	9305      	str	r3, [sp, #20]
 8004c30:	4619      	mov	r1, r3
 8004c32:	f04f 0c0a 	mov.w	ip, #10
 8004c36:	4620      	mov	r0, r4
 8004c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c3c:	3a30      	subs	r2, #48	; 0x30
 8004c3e:	2a09      	cmp	r2, #9
 8004c40:	d903      	bls.n	8004c4a <_vfiprintf_r+0x1ee>
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0c5      	beq.n	8004bd2 <_vfiprintf_r+0x176>
 8004c46:	9105      	str	r1, [sp, #20]
 8004c48:	e7c3      	b.n	8004bd2 <_vfiprintf_r+0x176>
 8004c4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c4e:	4604      	mov	r4, r0
 8004c50:	2301      	movs	r3, #1
 8004c52:	e7f0      	b.n	8004c36 <_vfiprintf_r+0x1da>
 8004c54:	ab03      	add	r3, sp, #12
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	462a      	mov	r2, r5
 8004c5a:	4b16      	ldr	r3, [pc, #88]	; (8004cb4 <_vfiprintf_r+0x258>)
 8004c5c:	a904      	add	r1, sp, #16
 8004c5e:	4630      	mov	r0, r6
 8004c60:	f3af 8000 	nop.w
 8004c64:	4607      	mov	r7, r0
 8004c66:	1c78      	adds	r0, r7, #1
 8004c68:	d1d6      	bne.n	8004c18 <_vfiprintf_r+0x1bc>
 8004c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c6c:	07d9      	lsls	r1, r3, #31
 8004c6e:	d405      	bmi.n	8004c7c <_vfiprintf_r+0x220>
 8004c70:	89ab      	ldrh	r3, [r5, #12]
 8004c72:	059a      	lsls	r2, r3, #22
 8004c74:	d402      	bmi.n	8004c7c <_vfiprintf_r+0x220>
 8004c76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c78:	f7ff fdb7 	bl	80047ea <__retarget_lock_release_recursive>
 8004c7c:	89ab      	ldrh	r3, [r5, #12]
 8004c7e:	065b      	lsls	r3, r3, #25
 8004c80:	f53f af12 	bmi.w	8004aa8 <_vfiprintf_r+0x4c>
 8004c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c86:	e711      	b.n	8004aac <_vfiprintf_r+0x50>
 8004c88:	ab03      	add	r3, sp, #12
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	462a      	mov	r2, r5
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <_vfiprintf_r+0x258>)
 8004c90:	a904      	add	r1, sp, #16
 8004c92:	4630      	mov	r0, r6
 8004c94:	f000 f880 	bl	8004d98 <_printf_i>
 8004c98:	e7e4      	b.n	8004c64 <_vfiprintf_r+0x208>
 8004c9a:	bf00      	nop
 8004c9c:	08005218 	.word	0x08005218
 8004ca0:	08005238 	.word	0x08005238
 8004ca4:	080051f8 	.word	0x080051f8
 8004ca8:	08005258 	.word	0x08005258
 8004cac:	08005262 	.word	0x08005262
 8004cb0:	00000000 	.word	0x00000000
 8004cb4:	08004a37 	.word	0x08004a37
 8004cb8:	0800525e 	.word	0x0800525e

08004cbc <_printf_common>:
 8004cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc0:	4616      	mov	r6, r2
 8004cc2:	4699      	mov	r9, r3
 8004cc4:	688a      	ldr	r2, [r1, #8]
 8004cc6:	690b      	ldr	r3, [r1, #16]
 8004cc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	bfb8      	it	lt
 8004cd0:	4613      	movlt	r3, r2
 8004cd2:	6033      	str	r3, [r6, #0]
 8004cd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cd8:	4607      	mov	r7, r0
 8004cda:	460c      	mov	r4, r1
 8004cdc:	b10a      	cbz	r2, 8004ce2 <_printf_common+0x26>
 8004cde:	3301      	adds	r3, #1
 8004ce0:	6033      	str	r3, [r6, #0]
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	0699      	lsls	r1, r3, #26
 8004ce6:	bf42      	ittt	mi
 8004ce8:	6833      	ldrmi	r3, [r6, #0]
 8004cea:	3302      	addmi	r3, #2
 8004cec:	6033      	strmi	r3, [r6, #0]
 8004cee:	6825      	ldr	r5, [r4, #0]
 8004cf0:	f015 0506 	ands.w	r5, r5, #6
 8004cf4:	d106      	bne.n	8004d04 <_printf_common+0x48>
 8004cf6:	f104 0a19 	add.w	sl, r4, #25
 8004cfa:	68e3      	ldr	r3, [r4, #12]
 8004cfc:	6832      	ldr	r2, [r6, #0]
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	42ab      	cmp	r3, r5
 8004d02:	dc26      	bgt.n	8004d52 <_printf_common+0x96>
 8004d04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d08:	1e13      	subs	r3, r2, #0
 8004d0a:	6822      	ldr	r2, [r4, #0]
 8004d0c:	bf18      	it	ne
 8004d0e:	2301      	movne	r3, #1
 8004d10:	0692      	lsls	r2, r2, #26
 8004d12:	d42b      	bmi.n	8004d6c <_printf_common+0xb0>
 8004d14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d18:	4649      	mov	r1, r9
 8004d1a:	4638      	mov	r0, r7
 8004d1c:	47c0      	blx	r8
 8004d1e:	3001      	adds	r0, #1
 8004d20:	d01e      	beq.n	8004d60 <_printf_common+0xa4>
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	68e5      	ldr	r5, [r4, #12]
 8004d26:	6832      	ldr	r2, [r6, #0]
 8004d28:	f003 0306 	and.w	r3, r3, #6
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	bf08      	it	eq
 8004d30:	1aad      	subeq	r5, r5, r2
 8004d32:	68a3      	ldr	r3, [r4, #8]
 8004d34:	6922      	ldr	r2, [r4, #16]
 8004d36:	bf0c      	ite	eq
 8004d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d3c:	2500      	movne	r5, #0
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	bfc4      	itt	gt
 8004d42:	1a9b      	subgt	r3, r3, r2
 8004d44:	18ed      	addgt	r5, r5, r3
 8004d46:	2600      	movs	r6, #0
 8004d48:	341a      	adds	r4, #26
 8004d4a:	42b5      	cmp	r5, r6
 8004d4c:	d11a      	bne.n	8004d84 <_printf_common+0xc8>
 8004d4e:	2000      	movs	r0, #0
 8004d50:	e008      	b.n	8004d64 <_printf_common+0xa8>
 8004d52:	2301      	movs	r3, #1
 8004d54:	4652      	mov	r2, sl
 8004d56:	4649      	mov	r1, r9
 8004d58:	4638      	mov	r0, r7
 8004d5a:	47c0      	blx	r8
 8004d5c:	3001      	adds	r0, #1
 8004d5e:	d103      	bne.n	8004d68 <_printf_common+0xac>
 8004d60:	f04f 30ff 	mov.w	r0, #4294967295
 8004d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d68:	3501      	adds	r5, #1
 8004d6a:	e7c6      	b.n	8004cfa <_printf_common+0x3e>
 8004d6c:	18e1      	adds	r1, r4, r3
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	2030      	movs	r0, #48	; 0x30
 8004d72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d76:	4422      	add	r2, r4
 8004d78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d80:	3302      	adds	r3, #2
 8004d82:	e7c7      	b.n	8004d14 <_printf_common+0x58>
 8004d84:	2301      	movs	r3, #1
 8004d86:	4622      	mov	r2, r4
 8004d88:	4649      	mov	r1, r9
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	47c0      	blx	r8
 8004d8e:	3001      	adds	r0, #1
 8004d90:	d0e6      	beq.n	8004d60 <_printf_common+0xa4>
 8004d92:	3601      	adds	r6, #1
 8004d94:	e7d9      	b.n	8004d4a <_printf_common+0x8e>
	...

08004d98 <_printf_i>:
 8004d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d9c:	460c      	mov	r4, r1
 8004d9e:	4691      	mov	r9, r2
 8004da0:	7e27      	ldrb	r7, [r4, #24]
 8004da2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004da4:	2f78      	cmp	r7, #120	; 0x78
 8004da6:	4680      	mov	r8, r0
 8004da8:	469a      	mov	sl, r3
 8004daa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dae:	d807      	bhi.n	8004dc0 <_printf_i+0x28>
 8004db0:	2f62      	cmp	r7, #98	; 0x62
 8004db2:	d80a      	bhi.n	8004dca <_printf_i+0x32>
 8004db4:	2f00      	cmp	r7, #0
 8004db6:	f000 80d8 	beq.w	8004f6a <_printf_i+0x1d2>
 8004dba:	2f58      	cmp	r7, #88	; 0x58
 8004dbc:	f000 80a3 	beq.w	8004f06 <_printf_i+0x16e>
 8004dc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004dc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dc8:	e03a      	b.n	8004e40 <_printf_i+0xa8>
 8004dca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dce:	2b15      	cmp	r3, #21
 8004dd0:	d8f6      	bhi.n	8004dc0 <_printf_i+0x28>
 8004dd2:	a001      	add	r0, pc, #4	; (adr r0, 8004dd8 <_printf_i+0x40>)
 8004dd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004dd8:	08004e31 	.word	0x08004e31
 8004ddc:	08004e45 	.word	0x08004e45
 8004de0:	08004dc1 	.word	0x08004dc1
 8004de4:	08004dc1 	.word	0x08004dc1
 8004de8:	08004dc1 	.word	0x08004dc1
 8004dec:	08004dc1 	.word	0x08004dc1
 8004df0:	08004e45 	.word	0x08004e45
 8004df4:	08004dc1 	.word	0x08004dc1
 8004df8:	08004dc1 	.word	0x08004dc1
 8004dfc:	08004dc1 	.word	0x08004dc1
 8004e00:	08004dc1 	.word	0x08004dc1
 8004e04:	08004f51 	.word	0x08004f51
 8004e08:	08004e75 	.word	0x08004e75
 8004e0c:	08004f33 	.word	0x08004f33
 8004e10:	08004dc1 	.word	0x08004dc1
 8004e14:	08004dc1 	.word	0x08004dc1
 8004e18:	08004f73 	.word	0x08004f73
 8004e1c:	08004dc1 	.word	0x08004dc1
 8004e20:	08004e75 	.word	0x08004e75
 8004e24:	08004dc1 	.word	0x08004dc1
 8004e28:	08004dc1 	.word	0x08004dc1
 8004e2c:	08004f3b 	.word	0x08004f3b
 8004e30:	680b      	ldr	r3, [r1, #0]
 8004e32:	1d1a      	adds	r2, r3, #4
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	600a      	str	r2, [r1, #0]
 8004e38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0a3      	b.n	8004f8c <_printf_i+0x1f4>
 8004e44:	6825      	ldr	r5, [r4, #0]
 8004e46:	6808      	ldr	r0, [r1, #0]
 8004e48:	062e      	lsls	r6, r5, #24
 8004e4a:	f100 0304 	add.w	r3, r0, #4
 8004e4e:	d50a      	bpl.n	8004e66 <_printf_i+0xce>
 8004e50:	6805      	ldr	r5, [r0, #0]
 8004e52:	600b      	str	r3, [r1, #0]
 8004e54:	2d00      	cmp	r5, #0
 8004e56:	da03      	bge.n	8004e60 <_printf_i+0xc8>
 8004e58:	232d      	movs	r3, #45	; 0x2d
 8004e5a:	426d      	negs	r5, r5
 8004e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e60:	485e      	ldr	r0, [pc, #376]	; (8004fdc <_printf_i+0x244>)
 8004e62:	230a      	movs	r3, #10
 8004e64:	e019      	b.n	8004e9a <_printf_i+0x102>
 8004e66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004e6a:	6805      	ldr	r5, [r0, #0]
 8004e6c:	600b      	str	r3, [r1, #0]
 8004e6e:	bf18      	it	ne
 8004e70:	b22d      	sxthne	r5, r5
 8004e72:	e7ef      	b.n	8004e54 <_printf_i+0xbc>
 8004e74:	680b      	ldr	r3, [r1, #0]
 8004e76:	6825      	ldr	r5, [r4, #0]
 8004e78:	1d18      	adds	r0, r3, #4
 8004e7a:	6008      	str	r0, [r1, #0]
 8004e7c:	0628      	lsls	r0, r5, #24
 8004e7e:	d501      	bpl.n	8004e84 <_printf_i+0xec>
 8004e80:	681d      	ldr	r5, [r3, #0]
 8004e82:	e002      	b.n	8004e8a <_printf_i+0xf2>
 8004e84:	0669      	lsls	r1, r5, #25
 8004e86:	d5fb      	bpl.n	8004e80 <_printf_i+0xe8>
 8004e88:	881d      	ldrh	r5, [r3, #0]
 8004e8a:	4854      	ldr	r0, [pc, #336]	; (8004fdc <_printf_i+0x244>)
 8004e8c:	2f6f      	cmp	r7, #111	; 0x6f
 8004e8e:	bf0c      	ite	eq
 8004e90:	2308      	moveq	r3, #8
 8004e92:	230a      	movne	r3, #10
 8004e94:	2100      	movs	r1, #0
 8004e96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e9a:	6866      	ldr	r6, [r4, #4]
 8004e9c:	60a6      	str	r6, [r4, #8]
 8004e9e:	2e00      	cmp	r6, #0
 8004ea0:	bfa2      	ittt	ge
 8004ea2:	6821      	ldrge	r1, [r4, #0]
 8004ea4:	f021 0104 	bicge.w	r1, r1, #4
 8004ea8:	6021      	strge	r1, [r4, #0]
 8004eaa:	b90d      	cbnz	r5, 8004eb0 <_printf_i+0x118>
 8004eac:	2e00      	cmp	r6, #0
 8004eae:	d04d      	beq.n	8004f4c <_printf_i+0x1b4>
 8004eb0:	4616      	mov	r6, r2
 8004eb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004eb6:	fb03 5711 	mls	r7, r3, r1, r5
 8004eba:	5dc7      	ldrb	r7, [r0, r7]
 8004ebc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ec0:	462f      	mov	r7, r5
 8004ec2:	42bb      	cmp	r3, r7
 8004ec4:	460d      	mov	r5, r1
 8004ec6:	d9f4      	bls.n	8004eb2 <_printf_i+0x11a>
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d10b      	bne.n	8004ee4 <_printf_i+0x14c>
 8004ecc:	6823      	ldr	r3, [r4, #0]
 8004ece:	07df      	lsls	r7, r3, #31
 8004ed0:	d508      	bpl.n	8004ee4 <_printf_i+0x14c>
 8004ed2:	6923      	ldr	r3, [r4, #16]
 8004ed4:	6861      	ldr	r1, [r4, #4]
 8004ed6:	4299      	cmp	r1, r3
 8004ed8:	bfde      	ittt	le
 8004eda:	2330      	movle	r3, #48	; 0x30
 8004edc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ee0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ee4:	1b92      	subs	r2, r2, r6
 8004ee6:	6122      	str	r2, [r4, #16]
 8004ee8:	f8cd a000 	str.w	sl, [sp]
 8004eec:	464b      	mov	r3, r9
 8004eee:	aa03      	add	r2, sp, #12
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	4640      	mov	r0, r8
 8004ef4:	f7ff fee2 	bl	8004cbc <_printf_common>
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d14c      	bne.n	8004f96 <_printf_i+0x1fe>
 8004efc:	f04f 30ff 	mov.w	r0, #4294967295
 8004f00:	b004      	add	sp, #16
 8004f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f06:	4835      	ldr	r0, [pc, #212]	; (8004fdc <_printf_i+0x244>)
 8004f08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	680e      	ldr	r6, [r1, #0]
 8004f10:	061f      	lsls	r7, r3, #24
 8004f12:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f16:	600e      	str	r6, [r1, #0]
 8004f18:	d514      	bpl.n	8004f44 <_printf_i+0x1ac>
 8004f1a:	07d9      	lsls	r1, r3, #31
 8004f1c:	bf44      	itt	mi
 8004f1e:	f043 0320 	orrmi.w	r3, r3, #32
 8004f22:	6023      	strmi	r3, [r4, #0]
 8004f24:	b91d      	cbnz	r5, 8004f2e <_printf_i+0x196>
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	f023 0320 	bic.w	r3, r3, #32
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	2310      	movs	r3, #16
 8004f30:	e7b0      	b.n	8004e94 <_printf_i+0xfc>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	f043 0320 	orr.w	r3, r3, #32
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	2378      	movs	r3, #120	; 0x78
 8004f3c:	4828      	ldr	r0, [pc, #160]	; (8004fe0 <_printf_i+0x248>)
 8004f3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f42:	e7e3      	b.n	8004f0c <_printf_i+0x174>
 8004f44:	065e      	lsls	r6, r3, #25
 8004f46:	bf48      	it	mi
 8004f48:	b2ad      	uxthmi	r5, r5
 8004f4a:	e7e6      	b.n	8004f1a <_printf_i+0x182>
 8004f4c:	4616      	mov	r6, r2
 8004f4e:	e7bb      	b.n	8004ec8 <_printf_i+0x130>
 8004f50:	680b      	ldr	r3, [r1, #0]
 8004f52:	6826      	ldr	r6, [r4, #0]
 8004f54:	6960      	ldr	r0, [r4, #20]
 8004f56:	1d1d      	adds	r5, r3, #4
 8004f58:	600d      	str	r5, [r1, #0]
 8004f5a:	0635      	lsls	r5, r6, #24
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	d501      	bpl.n	8004f64 <_printf_i+0x1cc>
 8004f60:	6018      	str	r0, [r3, #0]
 8004f62:	e002      	b.n	8004f6a <_printf_i+0x1d2>
 8004f64:	0671      	lsls	r1, r6, #25
 8004f66:	d5fb      	bpl.n	8004f60 <_printf_i+0x1c8>
 8004f68:	8018      	strh	r0, [r3, #0]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	6123      	str	r3, [r4, #16]
 8004f6e:	4616      	mov	r6, r2
 8004f70:	e7ba      	b.n	8004ee8 <_printf_i+0x150>
 8004f72:	680b      	ldr	r3, [r1, #0]
 8004f74:	1d1a      	adds	r2, r3, #4
 8004f76:	600a      	str	r2, [r1, #0]
 8004f78:	681e      	ldr	r6, [r3, #0]
 8004f7a:	6862      	ldr	r2, [r4, #4]
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f7fb f936 	bl	80001f0 <memchr>
 8004f84:	b108      	cbz	r0, 8004f8a <_printf_i+0x1f2>
 8004f86:	1b80      	subs	r0, r0, r6
 8004f88:	6060      	str	r0, [r4, #4]
 8004f8a:	6863      	ldr	r3, [r4, #4]
 8004f8c:	6123      	str	r3, [r4, #16]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f94:	e7a8      	b.n	8004ee8 <_printf_i+0x150>
 8004f96:	6923      	ldr	r3, [r4, #16]
 8004f98:	4632      	mov	r2, r6
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	4640      	mov	r0, r8
 8004f9e:	47d0      	blx	sl
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d0ab      	beq.n	8004efc <_printf_i+0x164>
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	079b      	lsls	r3, r3, #30
 8004fa8:	d413      	bmi.n	8004fd2 <_printf_i+0x23a>
 8004faa:	68e0      	ldr	r0, [r4, #12]
 8004fac:	9b03      	ldr	r3, [sp, #12]
 8004fae:	4298      	cmp	r0, r3
 8004fb0:	bfb8      	it	lt
 8004fb2:	4618      	movlt	r0, r3
 8004fb4:	e7a4      	b.n	8004f00 <_printf_i+0x168>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	4632      	mov	r2, r6
 8004fba:	4649      	mov	r1, r9
 8004fbc:	4640      	mov	r0, r8
 8004fbe:	47d0      	blx	sl
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	d09b      	beq.n	8004efc <_printf_i+0x164>
 8004fc4:	3501      	adds	r5, #1
 8004fc6:	68e3      	ldr	r3, [r4, #12]
 8004fc8:	9903      	ldr	r1, [sp, #12]
 8004fca:	1a5b      	subs	r3, r3, r1
 8004fcc:	42ab      	cmp	r3, r5
 8004fce:	dcf2      	bgt.n	8004fb6 <_printf_i+0x21e>
 8004fd0:	e7eb      	b.n	8004faa <_printf_i+0x212>
 8004fd2:	2500      	movs	r5, #0
 8004fd4:	f104 0619 	add.w	r6, r4, #25
 8004fd8:	e7f5      	b.n	8004fc6 <_printf_i+0x22e>
 8004fda:	bf00      	nop
 8004fdc:	08005269 	.word	0x08005269
 8004fe0:	0800527a 	.word	0x0800527a

08004fe4 <_sbrk_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	4d06      	ldr	r5, [pc, #24]	; (8005000 <_sbrk_r+0x1c>)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	4604      	mov	r4, r0
 8004fec:	4608      	mov	r0, r1
 8004fee:	602b      	str	r3, [r5, #0]
 8004ff0:	f7fc f9dc 	bl	80013ac <_sbrk>
 8004ff4:	1c43      	adds	r3, r0, #1
 8004ff6:	d102      	bne.n	8004ffe <_sbrk_r+0x1a>
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	b103      	cbz	r3, 8004ffe <_sbrk_r+0x1a>
 8004ffc:	6023      	str	r3, [r4, #0]
 8004ffe:	bd38      	pop	{r3, r4, r5, pc}
 8005000:	2000044c 	.word	0x2000044c

08005004 <__sread>:
 8005004:	b510      	push	{r4, lr}
 8005006:	460c      	mov	r4, r1
 8005008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800500c:	f000 f8a0 	bl	8005150 <_read_r>
 8005010:	2800      	cmp	r0, #0
 8005012:	bfab      	itete	ge
 8005014:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005016:	89a3      	ldrhlt	r3, [r4, #12]
 8005018:	181b      	addge	r3, r3, r0
 800501a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800501e:	bfac      	ite	ge
 8005020:	6563      	strge	r3, [r4, #84]	; 0x54
 8005022:	81a3      	strhlt	r3, [r4, #12]
 8005024:	bd10      	pop	{r4, pc}

08005026 <__swrite>:
 8005026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800502a:	461f      	mov	r7, r3
 800502c:	898b      	ldrh	r3, [r1, #12]
 800502e:	05db      	lsls	r3, r3, #23
 8005030:	4605      	mov	r5, r0
 8005032:	460c      	mov	r4, r1
 8005034:	4616      	mov	r6, r2
 8005036:	d505      	bpl.n	8005044 <__swrite+0x1e>
 8005038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800503c:	2302      	movs	r3, #2
 800503e:	2200      	movs	r2, #0
 8005040:	f000 f868 	bl	8005114 <_lseek_r>
 8005044:	89a3      	ldrh	r3, [r4, #12]
 8005046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800504a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800504e:	81a3      	strh	r3, [r4, #12]
 8005050:	4632      	mov	r2, r6
 8005052:	463b      	mov	r3, r7
 8005054:	4628      	mov	r0, r5
 8005056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800505a:	f000 b817 	b.w	800508c <_write_r>

0800505e <__sseek>:
 800505e:	b510      	push	{r4, lr}
 8005060:	460c      	mov	r4, r1
 8005062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005066:	f000 f855 	bl	8005114 <_lseek_r>
 800506a:	1c43      	adds	r3, r0, #1
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	bf15      	itete	ne
 8005070:	6560      	strne	r0, [r4, #84]	; 0x54
 8005072:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005076:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800507a:	81a3      	strheq	r3, [r4, #12]
 800507c:	bf18      	it	ne
 800507e:	81a3      	strhne	r3, [r4, #12]
 8005080:	bd10      	pop	{r4, pc}

08005082 <__sclose>:
 8005082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005086:	f000 b813 	b.w	80050b0 <_close_r>
	...

0800508c <_write_r>:
 800508c:	b538      	push	{r3, r4, r5, lr}
 800508e:	4d07      	ldr	r5, [pc, #28]	; (80050ac <_write_r+0x20>)
 8005090:	4604      	mov	r4, r0
 8005092:	4608      	mov	r0, r1
 8005094:	4611      	mov	r1, r2
 8005096:	2200      	movs	r2, #0
 8005098:	602a      	str	r2, [r5, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	f7fb fa74 	bl	8000588 <_write>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d102      	bne.n	80050aa <_write_r+0x1e>
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	b103      	cbz	r3, 80050aa <_write_r+0x1e>
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	2000044c 	.word	0x2000044c

080050b0 <_close_r>:
 80050b0:	b538      	push	{r3, r4, r5, lr}
 80050b2:	4d06      	ldr	r5, [pc, #24]	; (80050cc <_close_r+0x1c>)
 80050b4:	2300      	movs	r3, #0
 80050b6:	4604      	mov	r4, r0
 80050b8:	4608      	mov	r0, r1
 80050ba:	602b      	str	r3, [r5, #0]
 80050bc:	f7fc f941 	bl	8001342 <_close>
 80050c0:	1c43      	adds	r3, r0, #1
 80050c2:	d102      	bne.n	80050ca <_close_r+0x1a>
 80050c4:	682b      	ldr	r3, [r5, #0]
 80050c6:	b103      	cbz	r3, 80050ca <_close_r+0x1a>
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	bd38      	pop	{r3, r4, r5, pc}
 80050cc:	2000044c 	.word	0x2000044c

080050d0 <_fstat_r>:
 80050d0:	b538      	push	{r3, r4, r5, lr}
 80050d2:	4d07      	ldr	r5, [pc, #28]	; (80050f0 <_fstat_r+0x20>)
 80050d4:	2300      	movs	r3, #0
 80050d6:	4604      	mov	r4, r0
 80050d8:	4608      	mov	r0, r1
 80050da:	4611      	mov	r1, r2
 80050dc:	602b      	str	r3, [r5, #0]
 80050de:	f7fc f93c 	bl	800135a <_fstat>
 80050e2:	1c43      	adds	r3, r0, #1
 80050e4:	d102      	bne.n	80050ec <_fstat_r+0x1c>
 80050e6:	682b      	ldr	r3, [r5, #0]
 80050e8:	b103      	cbz	r3, 80050ec <_fstat_r+0x1c>
 80050ea:	6023      	str	r3, [r4, #0]
 80050ec:	bd38      	pop	{r3, r4, r5, pc}
 80050ee:	bf00      	nop
 80050f0:	2000044c 	.word	0x2000044c

080050f4 <_isatty_r>:
 80050f4:	b538      	push	{r3, r4, r5, lr}
 80050f6:	4d06      	ldr	r5, [pc, #24]	; (8005110 <_isatty_r+0x1c>)
 80050f8:	2300      	movs	r3, #0
 80050fa:	4604      	mov	r4, r0
 80050fc:	4608      	mov	r0, r1
 80050fe:	602b      	str	r3, [r5, #0]
 8005100:	f7fc f93b 	bl	800137a <_isatty>
 8005104:	1c43      	adds	r3, r0, #1
 8005106:	d102      	bne.n	800510e <_isatty_r+0x1a>
 8005108:	682b      	ldr	r3, [r5, #0]
 800510a:	b103      	cbz	r3, 800510e <_isatty_r+0x1a>
 800510c:	6023      	str	r3, [r4, #0]
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	2000044c 	.word	0x2000044c

08005114 <_lseek_r>:
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	4d07      	ldr	r5, [pc, #28]	; (8005134 <_lseek_r+0x20>)
 8005118:	4604      	mov	r4, r0
 800511a:	4608      	mov	r0, r1
 800511c:	4611      	mov	r1, r2
 800511e:	2200      	movs	r2, #0
 8005120:	602a      	str	r2, [r5, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	f7fc f934 	bl	8001390 <_lseek>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	d102      	bne.n	8005132 <_lseek_r+0x1e>
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	b103      	cbz	r3, 8005132 <_lseek_r+0x1e>
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	bd38      	pop	{r3, r4, r5, pc}
 8005134:	2000044c 	.word	0x2000044c

08005138 <__malloc_lock>:
 8005138:	4801      	ldr	r0, [pc, #4]	; (8005140 <__malloc_lock+0x8>)
 800513a:	f7ff bb55 	b.w	80047e8 <__retarget_lock_acquire_recursive>
 800513e:	bf00      	nop
 8005140:	20000444 	.word	0x20000444

08005144 <__malloc_unlock>:
 8005144:	4801      	ldr	r0, [pc, #4]	; (800514c <__malloc_unlock+0x8>)
 8005146:	f7ff bb50 	b.w	80047ea <__retarget_lock_release_recursive>
 800514a:	bf00      	nop
 800514c:	20000444 	.word	0x20000444

08005150 <_read_r>:
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	4d07      	ldr	r5, [pc, #28]	; (8005170 <_read_r+0x20>)
 8005154:	4604      	mov	r4, r0
 8005156:	4608      	mov	r0, r1
 8005158:	4611      	mov	r1, r2
 800515a:	2200      	movs	r2, #0
 800515c:	602a      	str	r2, [r5, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	f7fc f8d2 	bl	8001308 <_read>
 8005164:	1c43      	adds	r3, r0, #1
 8005166:	d102      	bne.n	800516e <_read_r+0x1e>
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	b103      	cbz	r3, 800516e <_read_r+0x1e>
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	bd38      	pop	{r3, r4, r5, pc}
 8005170:	2000044c 	.word	0x2000044c

08005174 <_init>:
 8005174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005176:	bf00      	nop
 8005178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517a:	bc08      	pop	{r3}
 800517c:	469e      	mov	lr, r3
 800517e:	4770      	bx	lr

08005180 <_fini>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	bf00      	nop
 8005184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005186:	bc08      	pop	{r3}
 8005188:	469e      	mov	lr, r3
 800518a:	4770      	bx	lr
