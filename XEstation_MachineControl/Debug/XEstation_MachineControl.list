
XEstation_MachineControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008820  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  080089d0  080089d0  000189d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b90  08008b90  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008b90  08008b90  00018b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b98  08008b98  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b98  08008b98  00018b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b9c  08008b9c  00018b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08008ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200dc  2**0
                  CONTENTS
 10 .bss          00004cb8  200000dc  200000dc  000200dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004d94  20004d94  000200dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f6aa  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cd1  00000000  00000000  0003f7b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001628  00000000  00000000  00043488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014d0  00000000  00000000  00044ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004f0f  00000000  00000000  00045f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001865b  00000000  00000000  0004ae8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e72b0  00000000  00000000  000634ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014a79a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000064a4  00000000  00000000  0014a7f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080089b8 	.word	0x080089b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	080089b8 	.word	0x080089b8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);

int _write(int file, char *ptr, int len)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 10) == HAL_OK)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	b29a      	uxth	r2, r3
 8000598:	230a      	movs	r3, #10
 800059a:	68b9      	ldr	r1, [r7, #8]
 800059c:	4806      	ldr	r0, [pc, #24]	; (80005b8 <_write+0x30>)
 800059e:	f003 f9c0 	bl	8003922 <HAL_UART_Transmit>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d101      	bne.n	80005ac <_write+0x24>
		return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	e001      	b.n	80005b0 <_write+0x28>
	return -1;
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20004b4c 	.word	0x20004b4c

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f001 f856 	bl	8001670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f84c 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 fb14 	bl	8000bf4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005cc:	f000 f8b8 	bl	8000740 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005d0:	f000 f908 	bl	80007e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005d4:	f000 f988 	bl	80008e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005d8:	f000 fa0a 	bl	80009f0 <MX_TIM4_Init>
  MX_UART5_Init();
 80005dc:	f000 fa8c 	bl	8000af8 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80005e0:	f000 fab4 	bl	8000b4c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80005e4:	f000 fadc 	bl	8000ba0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  initCupLidDispensor();
 80005e8:	f006 ff7a 	bl	80074e0 <initCupLidDispensor>
//  init_powderMachine();
//
  SteppingMotorTest();
 80005ec:	f006 ff48 	bl	8007480 <SteppingMotorTest>

//  MalchaTest((int)(16.25*1000)); //unit : mg<hot_water_amout>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f0:	f004 f956 	bl	80048a0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005f4:	4a10      	ldr	r2, [pc, #64]	; (8000638 <main+0x7c>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	4810      	ldr	r0, [pc, #64]	; (800063c <main+0x80>)
 80005fa:	f004 f99b 	bl	8004934 <osThreadNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a0f      	ldr	r2, [pc, #60]	; (8000640 <main+0x84>)
 8000602:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <main+0x88>)
 8000606:	2100      	movs	r1, #0
 8000608:	480f      	ldr	r0, [pc, #60]	; (8000648 <main+0x8c>)
 800060a:	f004 f993 	bl	8004934 <osThreadNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a0e      	ldr	r2, [pc, #56]	; (800064c <main+0x90>)
 8000612:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000614:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <main+0x94>)
 8000616:	2100      	movs	r1, #0
 8000618:	480e      	ldr	r0, [pc, #56]	; (8000654 <main+0x98>)
 800061a:	f004 f98b 	bl	8004934 <osThreadNew>
 800061e:	4603      	mov	r3, r0
 8000620:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <main+0x9c>)
 8000622:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000624:	f004 f960 	bl	80048e8 <osKernelStart>

    /* USER CODE BEGIN 3 */
//	  SteppingMotorTest();
//	  L298Ntest();
//	  heaterTest();
	  printf("test ..\n\n");
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <main+0xa0>)
 800062a:	f007 fb67 	bl	8007cfc <puts>

	HAL_Delay(500);
 800062e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000632:	f001 f85f 	bl	80016f4 <HAL_Delay>
	  printf("test ..\n\n");
 8000636:	e7f7      	b.n	8000628 <main+0x6c>
 8000638:	08008a74 	.word	0x08008a74
 800063c:	08000ea1 	.word	0x08000ea1
 8000640:	20004b00 	.word	0x20004b00
 8000644:	08008a98 	.word	0x08008a98
 8000648:	08000ec5 	.word	0x08000ec5
 800064c:	20004c1c 	.word	0x20004c1c
 8000650:	08008abc 	.word	0x08008abc
 8000654:	08000ee9 	.word	0x08000ee9
 8000658:	20004c68 	.word	0x20004c68
 800065c:	080089f4 	.word	0x080089f4

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f007 fa5b 	bl	8007b2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <SystemClock_Config+0xd8>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a2a      	ldr	r2, [pc, #168]	; (8000738 <SystemClock_Config+0xd8>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <SystemClock_Config+0xd8>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b25      	ldr	r3, [pc, #148]	; (800073c <SystemClock_Config+0xdc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a24      	ldr	r2, [pc, #144]	; (800073c <SystemClock_Config+0xdc>)
 80006aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <SystemClock_Config+0xdc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006d4:	23b4      	movs	r3, #180	; 0xb4
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fbcb 	bl	8001e80 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f0:	f000 fc1e 	bl	8000f30 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006f4:	f001 fb74 	bl	8001de0 <HAL_PWREx_EnableOverDrive>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006fe:	f000 fc17 	bl	8000f30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	230f      	movs	r3, #15
 8000704:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2302      	movs	r3, #2
 8000708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000712:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2105      	movs	r1, #5
 8000720:	4618      	mov	r0, r3
 8000722:	f001 fe25 	bl	8002370 <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800072c:	f000 fc00 	bl	8000f30 <Error_Handler>
  }
}
 8000730:	bf00      	nop
 8000732:	3750      	adds	r7, #80	; 0x50
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000754:	463b      	mov	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_TIM1_Init+0x9c>)
 800075e:	4a20      	ldr	r2, [pc, #128]	; (80007e0 <MX_TIM1_Init+0xa0>)
 8000760:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1800-1;
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_TIM1_Init+0x9c>)
 8000764:	f240 7207 	movw	r2, #1799	; 0x707
 8000768:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_TIM1_Init+0x9c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000770:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_TIM1_Init+0x9c>)
 8000772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000776:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_TIM1_Init+0x9c>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_TIM1_Init+0x9c>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_TIM1_Init+0x9c>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800078a:	4814      	ldr	r0, [pc, #80]	; (80007dc <MX_TIM1_Init+0x9c>)
 800078c:	f001 fff2 	bl	8002774 <HAL_TIM_Base_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000796:	f000 fbcb 	bl	8000f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	4619      	mov	r1, r3
 80007a6:	480d      	ldr	r0, [pc, #52]	; (80007dc <MX_TIM1_Init+0x9c>)
 80007a8:	f002 fb30 	bl	8002e0c <HAL_TIM_ConfigClockSource>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80007b2:	f000 fbbd 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007be:	463b      	mov	r3, r7
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	; (80007dc <MX_TIM1_Init+0x9c>)
 80007c4:	f002 ffd0 	bl	8003768 <HAL_TIMEx_MasterConfigSynchronization>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80007ce:	f000 fbaf 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20004c20 	.word	0x20004c20
 80007e0:	40010000 	.word	0x40010000

080007e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000816:	4b33      	ldr	r3, [pc, #204]	; (80008e4 <MX_TIM2_Init+0x100>)
 8000818:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800081c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800081e:	4b31      	ldr	r3, [pc, #196]	; (80008e4 <MX_TIM2_Init+0x100>)
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000824:	4b2f      	ldr	r3, [pc, #188]	; (80008e4 <MX_TIM2_Init+0x100>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800082a:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <MX_TIM2_Init+0x100>)
 800082c:	f04f 32ff 	mov.w	r2, #4294967295
 8000830:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000832:	4b2c      	ldr	r3, [pc, #176]	; (80008e4 <MX_TIM2_Init+0x100>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000838:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <MX_TIM2_Init+0x100>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800083e:	4829      	ldr	r0, [pc, #164]	; (80008e4 <MX_TIM2_Init+0x100>)
 8000840:	f001 ff98 	bl	8002774 <HAL_TIM_Base_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800084a:	f000 fb71 	bl	8000f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800084e:	4825      	ldr	r0, [pc, #148]	; (80008e4 <MX_TIM2_Init+0x100>)
 8000850:	f002 f8b8 	bl	80029c4 <HAL_TIM_PWM_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800085a:	f000 fb69 	bl	8000f30 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086a:	4619      	mov	r1, r3
 800086c:	481d      	ldr	r0, [pc, #116]	; (80008e4 <MX_TIM2_Init+0x100>)
 800086e:	f002 fb94 	bl	8002f9a <HAL_TIM_SlaveConfigSynchro>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000878:	f000 fb5a 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4816      	ldr	r0, [pc, #88]	; (80008e4 <MX_TIM2_Init+0x100>)
 800088c:	f002 ff6c 	bl	8003768 <HAL_TIMEx_MasterConfigSynchronization>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000896:	f000 fb4b 	bl	8000f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089a:	2360      	movs	r3, #96	; 0x60
 800089c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008aa:	463b      	mov	r3, r7
 80008ac:	2200      	movs	r2, #0
 80008ae:	4619      	mov	r1, r3
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <MX_TIM2_Init+0x100>)
 80008b2:	f002 f9e9 	bl	8002c88 <HAL_TIM_PWM_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80008bc:	f000 fb38 	bl	8000f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008c0:	463b      	mov	r3, r7
 80008c2:	2204      	movs	r2, #4
 80008c4:	4619      	mov	r1, r3
 80008c6:	4807      	ldr	r0, [pc, #28]	; (80008e4 <MX_TIM2_Init+0x100>)
 80008c8:	f002 f9de 	bl	8002c88 <HAL_TIM_PWM_ConfigChannel>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80008d2:	f000 fb2d 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008d6:	4803      	ldr	r0, [pc, #12]	; (80008e4 <MX_TIM2_Init+0x100>)
 80008d8:	f000 fbc4 	bl	8001064 <HAL_TIM_MspPostInit>

}
 80008dc:	bf00      	nop
 80008de:	3738      	adds	r7, #56	; 0x38
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20004cb0 	.word	0x20004cb0

080008e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	; 0x38
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000908:	463b      	mov	r3, r7
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]
 8000916:	615a      	str	r2, [r3, #20]
 8000918:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800091a:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <MX_TIM3_Init+0x100>)
 800091c:	4a33      	ldr	r2, [pc, #204]	; (80009ec <MX_TIM3_Init+0x104>)
 800091e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000920:	4b31      	ldr	r3, [pc, #196]	; (80009e8 <MX_TIM3_Init+0x100>)
 8000922:	2200      	movs	r2, #0
 8000924:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000926:	4b30      	ldr	r3, [pc, #192]	; (80009e8 <MX_TIM3_Init+0x100>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800092c:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <MX_TIM3_Init+0x100>)
 800092e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000932:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000934:	4b2c      	ldr	r3, [pc, #176]	; (80009e8 <MX_TIM3_Init+0x100>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093a:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <MX_TIM3_Init+0x100>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000940:	4829      	ldr	r0, [pc, #164]	; (80009e8 <MX_TIM3_Init+0x100>)
 8000942:	f001 ff17 	bl	8002774 <HAL_TIM_Base_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800094c:	f000 faf0 	bl	8000f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000950:	4825      	ldr	r0, [pc, #148]	; (80009e8 <MX_TIM3_Init+0x100>)
 8000952:	f002 f837 	bl	80029c4 <HAL_TIM_PWM_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800095c:	f000 fae8 	bl	8000f30 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096c:	4619      	mov	r1, r3
 800096e:	481e      	ldr	r0, [pc, #120]	; (80009e8 <MX_TIM3_Init+0x100>)
 8000970:	f002 fb13 	bl	8002f9a <HAL_TIM_SlaveConfigSynchro>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800097a:	f000 fad9 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4816      	ldr	r0, [pc, #88]	; (80009e8 <MX_TIM3_Init+0x100>)
 800098e:	f002 feeb 	bl	8003768 <HAL_TIMEx_MasterConfigSynchronization>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000998:	f000 faca 	bl	8000f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099c:	2360      	movs	r3, #96	; 0x60
 800099e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	2200      	movs	r2, #0
 80009b0:	4619      	mov	r1, r3
 80009b2:	480d      	ldr	r0, [pc, #52]	; (80009e8 <MX_TIM3_Init+0x100>)
 80009b4:	f002 f968 	bl	8002c88 <HAL_TIM_PWM_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80009be:	f000 fab7 	bl	8000f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	2204      	movs	r2, #4
 80009c6:	4619      	mov	r1, r3
 80009c8:	4807      	ldr	r0, [pc, #28]	; (80009e8 <MX_TIM3_Init+0x100>)
 80009ca:	f002 f95d 	bl	8002c88 <HAL_TIM_PWM_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80009d4:	f000 faac 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <MX_TIM3_Init+0x100>)
 80009da:	f000 fb43 	bl	8001064 <HAL_TIM_MspPostInit>

}
 80009de:	bf00      	nop
 80009e0:	3738      	adds	r7, #56	; 0x38
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20004b90 	.word	0x20004b90
 80009ec:	40000400 	.word	0x40000400

080009f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	; 0x38
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a10:	463b      	mov	r3, r7
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
 8000a1e:	615a      	str	r2, [r3, #20]
 8000a20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a22:	4b33      	ldr	r3, [pc, #204]	; (8000af0 <MX_TIM4_Init+0x100>)
 8000a24:	4a33      	ldr	r2, [pc, #204]	; (8000af4 <MX_TIM4_Init+0x104>)
 8000a26:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a28:	4b31      	ldr	r3, [pc, #196]	; (8000af0 <MX_TIM4_Init+0x100>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b30      	ldr	r3, [pc, #192]	; (8000af0 <MX_TIM4_Init+0x100>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a34:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <MX_TIM4_Init+0x100>)
 8000a36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a3a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <MX_TIM4_Init+0x100>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <MX_TIM4_Init+0x100>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a48:	4829      	ldr	r0, [pc, #164]	; (8000af0 <MX_TIM4_Init+0x100>)
 8000a4a:	f001 fe93 	bl	8002774 <HAL_TIM_Base_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000a54:	f000 fa6c 	bl	8000f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a58:	4825      	ldr	r0, [pc, #148]	; (8000af0 <MX_TIM4_Init+0x100>)
 8000a5a:	f001 ffb3 	bl	80029c4 <HAL_TIM_PWM_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000a64:	f000 fa64 	bl	8000f30 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	481e      	ldr	r0, [pc, #120]	; (8000af0 <MX_TIM4_Init+0x100>)
 8000a78:	f002 fa8f 	bl	8002f9a <HAL_TIM_SlaveConfigSynchro>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000a82:	f000 fa55 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4816      	ldr	r0, [pc, #88]	; (8000af0 <MX_TIM4_Init+0x100>)
 8000a96:	f002 fe67 	bl	8003768 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000aa0:	f000 fa46 	bl	8000f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa4:	2360      	movs	r3, #96	; 0x60
 8000aa6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	2208      	movs	r2, #8
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480d      	ldr	r0, [pc, #52]	; (8000af0 <MX_TIM4_Init+0x100>)
 8000abc:	f002 f8e4 	bl	8002c88 <HAL_TIM_PWM_ConfigChannel>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000ac6:	f000 fa33 	bl	8000f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aca:	463b      	mov	r3, r7
 8000acc:	220c      	movs	r2, #12
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4807      	ldr	r0, [pc, #28]	; (8000af0 <MX_TIM4_Init+0x100>)
 8000ad2:	f002 f8d9 	bl	8002c88 <HAL_TIM_PWM_ConfigChannel>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8000adc:	f000 fa28 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ae0:	4803      	ldr	r0, [pc, #12]	; (8000af0 <MX_TIM4_Init+0x100>)
 8000ae2:	f000 fabf 	bl	8001064 <HAL_TIM_MspPostInit>

}
 8000ae6:	bf00      	nop
 8000ae8:	3738      	adds	r7, #56	; 0x38
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20004b04 	.word	0x20004b04
 8000af4:	40000800 	.word	0x40000800

08000af8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_UART5_Init+0x4c>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <MX_UART5_Init+0x50>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_UART5_Init+0x4c>)
 8000b04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b08:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_UART5_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_UART5_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_UART5_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_UART5_Init+0x4c>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_UART5_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_UART5_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_UART5_Init+0x4c>)
 8000b30:	f002 feaa 	bl	8003888 <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000b3a:	f000 f9f9 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20004bd8 	.word	0x20004bd8
 8000b48:	40005000 	.word	0x40005000

08000b4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <MX_USART3_UART_Init+0x50>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b84:	f002 fe80 	bl	8003888 <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b8e:	f000 f9cf 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20004b4c 	.word	0x20004b4c
 8000b9c:	40004800 	.word	0x40004800

08000ba0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_USART6_UART_Init+0x4c>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <MX_USART6_UART_Init+0x50>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <MX_USART6_UART_Init+0x4c>)
 8000bac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bb0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_USART6_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_USART6_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_USART6_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_USART6_UART_Init+0x4c>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_USART6_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_USART6_UART_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_USART6_UART_Init+0x4c>)
 8000bd8:	f002 fe56 	bl	8003888 <HAL_UART_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000be2:	f000 f9a5 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20004c6c 	.word	0x20004c6c
 8000bf0:	40011400 	.word	0x40011400

08000bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	; 0x38
 8000bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
 8000c0e:	4b9b      	ldr	r3, [pc, #620]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a9a      	ldr	r2, [pc, #616]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000c14:	f043 0310 	orr.w	r3, r3, #16
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b98      	ldr	r3, [pc, #608]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0310 	and.w	r3, r3, #16
 8000c22:	623b      	str	r3, [r7, #32]
 8000c24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
 8000c2a:	4b94      	ldr	r3, [pc, #592]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a93      	ldr	r2, [pc, #588]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000c30:	f043 0320 	orr.w	r3, r3, #32
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b91      	ldr	r3, [pc, #580]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0320 	and.w	r3, r3, #32
 8000c3e:	61fb      	str	r3, [r7, #28]
 8000c40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	4b8d      	ldr	r3, [pc, #564]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a8c      	ldr	r2, [pc, #560]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b8a      	ldr	r3, [pc, #552]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	4b86      	ldr	r3, [pc, #536]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a85      	ldr	r2, [pc, #532]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b83      	ldr	r3, [pc, #524]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b7f      	ldr	r3, [pc, #508]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a7e      	ldr	r2, [pc, #504]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b7c      	ldr	r3, [pc, #496]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b78      	ldr	r3, [pc, #480]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a77      	ldr	r2, [pc, #476]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b75      	ldr	r3, [pc, #468]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	4b71      	ldr	r3, [pc, #452]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a70      	ldr	r2, [pc, #448]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b6e      	ldr	r3, [pc, #440]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4b6a      	ldr	r3, [pc, #424]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a69      	ldr	r2, [pc, #420]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000cd8:	f043 0308 	orr.w	r3, r3, #8
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b67      	ldr	r3, [pc, #412]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0308 	and.w	r3, r3, #8
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PD02_DCmix_EN_Pin|PD04_DCpowder_IN2_Pin|PD04_DCpowder_IN1_Pin|PD01_DCmix_IN2_Pin
 8000cea:	2200      	movs	r2, #0
 8000cec:	f64f 71cd 	movw	r1, #65485	; 0xffcd
 8000cf0:	4863      	ldr	r0, [pc, #396]	; (8000e80 <MX_GPIO_Init+0x28c>)
 8000cf2:	f001 f85b 	bl	8001dac <HAL_GPIO_WritePin>
                          |PD01_DCmix_IN1_Pin|CupD_STP_Pin|PD03_DCmix_IN1_Pin|CupD_DIR_Pin
                          |PD03_DCmix_IN2_Pin|LidD_STP_Pin|PD03_DCmix_EN_Pin|PD05_DCmix_IN1_Pin
                          |PD04_DCmix_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PD02_DCpowder_IN1_Pin|PD01_DCpowder_IN1_Pin|PD01_DCpowder_IN2_Pin|PD05_DCpowder_IN1_Pin
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f24f 71ac 	movw	r1, #63404	; 0xf7ac
 8000cfc:	4861      	ldr	r0, [pc, #388]	; (8000e84 <MX_GPIO_Init+0x290>)
 8000cfe:	f001 f855 	bl	8001dac <HAL_GPIO_WritePin>
                          |PD04_DCpowder_EN_Pin|PD05_DCpowder_IN2_Pin|PD01_DCpowder_EN_Pin|CF01_heat_IN2_Pin
                          |CupD_EN_Pin|LidD_EN_Pin|LidD_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PD02_DCpowder_EN_Pin|PD02_DCpowder_IN2_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2103      	movs	r1, #3
 8000d06:	4860      	ldr	r0, [pc, #384]	; (8000e88 <MX_GPIO_Init+0x294>)
 8000d08:	f001 f850 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ICE01_water_Pin|ICE01_mix_Pin|PD01_heat_IN1_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2149      	movs	r1, #73	; 0x49
 8000d10:	485e      	ldr	r0, [pc, #376]	; (8000e8c <MX_GPIO_Init+0x298>)
 8000d12:	f001 f84b 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PD04_DCmix_IN1_Pin|ICE01_ice_Pin|CF01_heat_IN1_Pin|PD03_heat_IN1_Pin
 8000d16:	2200      	movs	r2, #0
 8000d18:	21f9      	movs	r1, #249	; 0xf9
 8000d1a:	485d      	ldr	r0, [pc, #372]	; (8000e90 <MX_GPIO_Init+0x29c>)
 8000d1c:	f001 f846 	bl	8001dac <HAL_GPIO_WritePin>
                          |PD03_heat_IN2_Pin|PD04_heat_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PD04_DCmix_IN2_Pin|PD05_DCmix_IN2_Pin|PD05_DCmix_EN_Pin|PD02_heat_IN2_Pin
 8000d20:	2200      	movs	r2, #0
 8000d22:	f64b 4121 	movw	r1, #48161	; 0xbc21
 8000d26:	485b      	ldr	r0, [pc, #364]	; (8000e94 <MX_GPIO_Init+0x2a0>)
 8000d28:	f001 f840 	bl	8001dac <HAL_GPIO_WritePin>
                          |PD02_heat_IN1_Pin|PD01_heat_IN2_Pin|PD04_heat_IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PD03_DCpowder_EN_Pin|PD05_DCpowder_EN_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2103      	movs	r1, #3
 8000d30:	4859      	ldr	r0, [pc, #356]	; (8000e98 <MX_GPIO_Init+0x2a4>)
 8000d32:	f001 f83b 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD02_DCmix_IN2_Pin|PD02_DCmix_IN1_Pin|PD01_DCmix_EN_Pin|PD05_heat_IN1_Pin
 8000d36:	2200      	movs	r2, #0
 8000d38:	f64f 01e3 	movw	r1, #63715	; 0xf8e3
 8000d3c:	4857      	ldr	r0, [pc, #348]	; (8000e9c <MX_GPIO_Init+0x2a8>)
 8000d3e:	f001 f835 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD02_DCmix_EN_Pin PD04_DCpowder_IN2_Pin PD04_DCpowder_IN1_Pin PD01_DCmix_IN2_Pin
                           PD01_DCmix_IN1_Pin CupD_STP_Pin PD03_DCmix_IN1_Pin CupD_DIR_Pin
                           PD03_DCmix_IN2_Pin LidD_STP_Pin PD03_DCmix_EN_Pin PD05_DCmix_IN1_Pin
                           PD04_DCmix_EN_Pin */
  GPIO_InitStruct.Pin = PD02_DCmix_EN_Pin|PD04_DCpowder_IN2_Pin|PD04_DCpowder_IN1_Pin|PD01_DCmix_IN2_Pin
 8000d42:	f64f 73cd 	movw	r3, #65485	; 0xffcd
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD01_DCmix_IN1_Pin|CupD_STP_Pin|PD03_DCmix_IN1_Pin|CupD_DIR_Pin
                          |PD03_DCmix_IN2_Pin|LidD_STP_Pin|PD03_DCmix_EN_Pin|PD05_DCmix_IN1_Pin
                          |PD04_DCmix_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4849      	ldr	r0, [pc, #292]	; (8000e80 <MX_GPIO_Init+0x28c>)
 8000d5c:	f000 fe62 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCpowder_IN1_Pin PD01_DCpowder_IN1_Pin PD01_DCpowder_IN2_Pin PD05_DCpowder_IN1_Pin
                           PD04_DCpowder_EN_Pin PD05_DCpowder_IN2_Pin PD01_DCpowder_EN_Pin CF01_heat_IN2_Pin
                           CupD_EN_Pin LidD_EN_Pin LidD_DIR_Pin */
  GPIO_InitStruct.Pin = PD02_DCpowder_IN1_Pin|PD01_DCpowder_IN1_Pin|PD01_DCpowder_IN2_Pin|PD05_DCpowder_IN1_Pin
 8000d60:	f24f 73ac 	movw	r3, #63404	; 0xf7ac
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD04_DCpowder_EN_Pin|PD05_DCpowder_IN2_Pin|PD01_DCpowder_EN_Pin|CF01_heat_IN2_Pin
                          |CupD_EN_Pin|LidD_EN_Pin|LidD_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	4619      	mov	r1, r3
 8000d78:	4842      	ldr	r0, [pc, #264]	; (8000e84 <MX_GPIO_Init+0x290>)
 8000d7a:	f000 fe53 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : Lid_up_Pin */
  GPIO_InitStruct.Pin = Lid_up_Pin;
 8000d7e:	2310      	movs	r3, #16
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Lid_up_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8e:	4619      	mov	r1, r3
 8000d90:	483c      	ldr	r0, [pc, #240]	; (8000e84 <MX_GPIO_Init+0x290>)
 8000d92:	f000 fe47 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCpowder_EN_Pin PD02_DCpowder_IN2_Pin */
  GPIO_InitStruct.Pin = PD02_DCpowder_EN_Pin|PD02_DCpowder_IN2_Pin;
 8000d96:	2303      	movs	r3, #3
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	4619      	mov	r1, r3
 8000dac:	4836      	ldr	r0, [pc, #216]	; (8000e88 <MX_GPIO_Init+0x294>)
 8000dae:	f000 fe39 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ICE01_water_Pin ICE01_mix_Pin PD01_heat_IN1_Pin */
  GPIO_InitStruct.Pin = ICE01_water_Pin|ICE01_mix_Pin|PD01_heat_IN1_Pin;
 8000db2:	2349      	movs	r3, #73	; 0x49
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4830      	ldr	r0, [pc, #192]	; (8000e8c <MX_GPIO_Init+0x298>)
 8000dca:	f000 fe2b 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : Cup_down_Pin */
  GPIO_InitStruct.Pin = Cup_down_Pin;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Cup_down_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	482a      	ldr	r0, [pc, #168]	; (8000e8c <MX_GPIO_Init+0x298>)
 8000de2:	f000 fe1f 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD04_DCmix_IN1_Pin ICE01_ice_Pin CF01_heat_IN1_Pin PD03_heat_IN1_Pin
                           PD03_heat_IN2_Pin PD04_heat_IN2_Pin */
  GPIO_InitStruct.Pin = PD04_DCmix_IN1_Pin|ICE01_ice_Pin|CF01_heat_IN1_Pin|PD03_heat_IN1_Pin
 8000de6:	23f9      	movs	r3, #249	; 0xf9
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD03_heat_IN2_Pin|PD04_heat_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4824      	ldr	r0, [pc, #144]	; (8000e90 <MX_GPIO_Init+0x29c>)
 8000dfe:	f000 fe11 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD04_DCmix_IN2_Pin PD05_DCmix_IN2_Pin PD05_DCmix_EN_Pin PD02_heat_IN2_Pin
                           PD02_heat_IN1_Pin PD01_heat_IN2_Pin PD04_heat_IN1_Pin */
  GPIO_InitStruct.Pin = PD04_DCmix_IN2_Pin|PD05_DCmix_IN2_Pin|PD05_DCmix_EN_Pin|PD02_heat_IN2_Pin
 8000e02:	f64b 4321 	movw	r3, #48161	; 0xbc21
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD02_heat_IN1_Pin|PD01_heat_IN2_Pin|PD04_heat_IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	481e      	ldr	r0, [pc, #120]	; (8000e94 <MX_GPIO_Init+0x2a0>)
 8000e1c:	f000 fe02 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : Cup_up_Pin Lid_down_Pin */
  GPIO_InitStruct.Pin = Cup_up_Pin|Lid_down_Pin;
 8000e20:	2342      	movs	r3, #66	; 0x42
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e30:	4619      	mov	r1, r3
 8000e32:	4818      	ldr	r0, [pc, #96]	; (8000e94 <MX_GPIO_Init+0x2a0>)
 8000e34:	f000 fdf6 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD03_DCpowder_EN_Pin PD05_DCpowder_EN_Pin */
  GPIO_InitStruct.Pin = PD03_DCpowder_EN_Pin|PD05_DCpowder_EN_Pin;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4812      	ldr	r0, [pc, #72]	; (8000e98 <MX_GPIO_Init+0x2a4>)
 8000e50:	f000 fde8 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCmix_IN2_Pin PD02_DCmix_IN1_Pin PD01_DCmix_EN_Pin PD05_heat_IN1_Pin
                           PD05_heat_IN2_Pin PD03_DCpowder_IN1_Pin PD03_DCpowder_IN2_Pin PD_Fan02_relay_Pin
                           PD_Fan01_relay_Pin ICE01_relay_Pin */
  GPIO_InitStruct.Pin = PD02_DCmix_IN2_Pin|PD02_DCmix_IN1_Pin|PD01_DCmix_EN_Pin|PD05_heat_IN1_Pin
 8000e54:	f64f 03e3 	movw	r3, #63715	; 0xf8e3
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD05_heat_IN2_Pin|PD03_DCpowder_IN1_Pin|PD03_DCpowder_IN2_Pin|PD_Fan02_relay_Pin
                          |PD_Fan01_relay_Pin|ICE01_relay_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480b      	ldr	r0, [pc, #44]	; (8000e9c <MX_GPIO_Init+0x2a8>)
 8000e6e:	f000 fdd9 	bl	8001a24 <HAL_GPIO_Init>

}
 8000e72:	bf00      	nop
 8000e74:	3738      	adds	r7, #56	; 0x38
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40021400 	.word	0x40021400
 8000e88:	40021c00 	.word	0x40021c00
 8000e8c:	40020800 	.word	0x40020800
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020400 	.word	0x40020400
 8000e98:	40021800 	.word	0x40021800
 8000e9c:	40020c00 	.word	0x40020c00

08000ea0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("task01\n");
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <StartDefaultTask+0x20>)
 8000eaa:	f006 ff27 	bl	8007cfc <puts>
	HAL_Delay(1000);
 8000eae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb2:	f000 fc1f 	bl	80016f4 <HAL_Delay>
    osDelay(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f003 fdce 	bl	8004a58 <osDelay>
	printf("task01\n");
 8000ebc:	e7f4      	b.n	8000ea8 <StartDefaultTask+0x8>
 8000ebe:	bf00      	nop
 8000ec0:	08008a00 	.word	0x08008a00

08000ec4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	printf("task02\n");
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <StartTask02+0x20>)
 8000ece:	f006 ff15 	bl	8007cfc <puts>
	HAL_Delay(1000);
 8000ed2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed6:	f000 fc0d 	bl	80016f4 <HAL_Delay>

    osDelay(1);
 8000eda:	2001      	movs	r0, #1
 8000edc:	f003 fdbc 	bl	8004a58 <osDelay>
	printf("task02\n");
 8000ee0:	e7f4      	b.n	8000ecc <StartTask02+0x8>
 8000ee2:	bf00      	nop
 8000ee4:	08008a08 	.word	0x08008a08

08000ee8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	printf("task03\n");
 8000ef0:	4805      	ldr	r0, [pc, #20]	; (8000f08 <StartTask03+0x20>)
 8000ef2:	f006 ff03 	bl	8007cfc <puts>
	HAL_Delay(1000);
 8000ef6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000efa:	f000 fbfb 	bl	80016f4 <HAL_Delay>

    osDelay(1);
 8000efe:	2001      	movs	r0, #1
 8000f00:	f003 fdaa 	bl	8004a58 <osDelay>
	printf("task03\n");
 8000f04:	e7f4      	b.n	8000ef0 <StartTask03+0x8>
 8000f06:	bf00      	nop
 8000f08:	08008a10 	.word	0x08008a10

08000f0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d101      	bne.n	8000f22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f1e:	f000 fbc9 	bl	80016b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40001c00 	.word	0x40001c00

08000f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <Error_Handler+0x8>
	...

08000f3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_MspInit+0x54>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	4a11      	ldr	r2, [pc, #68]	; (8000f90 <HAL_MspInit+0x54>)
 8000f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f50:	6453      	str	r3, [r2, #68]	; 0x44
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_MspInit+0x54>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_MspInit+0x54>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_MspInit+0x54>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_MspInit+0x54>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	210f      	movs	r1, #15
 8000f7e:	f06f 0001 	mvn.w	r0, #1
 8000f82:	f000 fc93 	bl	80018ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800

08000f94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a2c      	ldr	r2, [pc, #176]	; (8001054 <HAL_TIM_Base_MspInit+0xc0>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d10e      	bne.n	8000fc4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a2a      	ldr	r2, [pc, #168]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b28      	ldr	r3, [pc, #160]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fc2:	e042      	b.n	800104a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fcc:	d116      	bne.n	8000ffc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a20      	ldr	r2, [pc, #128]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2105      	movs	r1, #5
 8000fee:	201c      	movs	r0, #28
 8000ff0:	f000 fc5c 	bl	80018ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ff4:	201c      	movs	r0, #28
 8000ff6:	f000 fc75 	bl	80018e4 <HAL_NVIC_EnableIRQ>
}
 8000ffa:	e026      	b.n	800104a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a16      	ldr	r2, [pc, #88]	; (800105c <HAL_TIM_Base_MspInit+0xc8>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d10e      	bne.n	8001024 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
}
 8001022:	e012      	b.n	800104a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <HAL_TIM_Base_MspInit+0xcc>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d10d      	bne.n	800104a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	6413      	str	r3, [r2, #64]	; 0x40
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_TIM_Base_MspInit+0xc4>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40010000 	.word	0x40010000
 8001058:	40023800 	.word	0x40023800
 800105c:	40000400 	.word	0x40000400
 8001060:	40000800 	.word	0x40000800

08001064 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001084:	d13d      	bne.n	8001102 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
 800108a:	4b53      	ldr	r3, [pc, #332]	; (80011d8 <HAL_TIM_MspPostInit+0x174>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a52      	ldr	r2, [pc, #328]	; (80011d8 <HAL_TIM_MspPostInit+0x174>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b50      	ldr	r3, [pc, #320]	; (80011d8 <HAL_TIM_MspPostInit+0x174>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	61bb      	str	r3, [r7, #24]
 80010a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	4b4c      	ldr	r3, [pc, #304]	; (80011d8 <HAL_TIM_MspPostInit+0x174>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a4b      	ldr	r2, [pc, #300]	; (80011d8 <HAL_TIM_MspPostInit+0x174>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b49      	ldr	r3, [pc, #292]	; (80011d8 <HAL_TIM_MspPostInit+0x174>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PD03_heat_EN_Pin;
 80010be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010d0:	2301      	movs	r3, #1
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD03_heat_EN_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	4840      	ldr	r0, [pc, #256]	; (80011dc <HAL_TIM_MspPostInit+0x178>)
 80010dc:	f000 fca2 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PD05_heat_EN_Pin;
 80010e0:	2308      	movs	r3, #8
 80010e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010f0:	2301      	movs	r3, #1
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD05_heat_EN_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	4839      	ldr	r0, [pc, #228]	; (80011e0 <HAL_TIM_MspPostInit+0x17c>)
 80010fc:	f000 fc92 	bl	8001a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001100:	e065      	b.n	80011ce <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM3)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a37      	ldr	r2, [pc, #220]	; (80011e4 <HAL_TIM_MspPostInit+0x180>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d13c      	bne.n	8001186 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	4b31      	ldr	r3, [pc, #196]	; (80011d8 <HAL_TIM_MspPostInit+0x174>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	4a30      	ldr	r2, [pc, #192]	; (80011d8 <HAL_TIM_MspPostInit+0x174>)
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	6313      	str	r3, [r2, #48]	; 0x30
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <HAL_TIM_MspPostInit+0x174>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_TIM_MspPostInit+0x174>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	4a29      	ldr	r2, [pc, #164]	; (80011d8 <HAL_TIM_MspPostInit+0x174>)
 8001132:	f043 0302 	orr.w	r3, r3, #2
 8001136:	6313      	str	r3, [r2, #48]	; 0x30
 8001138:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <HAL_TIM_MspPostInit+0x174>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PD04_heat_EN_Pin;
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001154:	2302      	movs	r3, #2
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD04_heat_EN_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	4822      	ldr	r0, [pc, #136]	; (80011e8 <HAL_TIM_MspPostInit+0x184>)
 8001160:	f000 fc60 	bl	8001a24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CF01_heat_EN_Pin;
 8001164:	2310      	movs	r3, #16
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001174:	2302      	movs	r3, #2
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CF01_heat_EN_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	4818      	ldr	r0, [pc, #96]	; (80011e0 <HAL_TIM_MspPostInit+0x17c>)
 8001180:	f000 fc50 	bl	8001a24 <HAL_GPIO_Init>
}
 8001184:	e023      	b.n	80011ce <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM4)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a18      	ldr	r2, [pc, #96]	; (80011ec <HAL_TIM_MspPostInit+0x188>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d11e      	bne.n	80011ce <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <HAL_TIM_MspPostInit+0x174>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <HAL_TIM_MspPostInit+0x174>)
 800119a:	f043 0302 	orr.w	r3, r3, #2
 800119e:	6313      	str	r3, [r2, #48]	; 0x30
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_TIM_MspPostInit+0x174>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PD01_heat_EN_Pin|PD02_heat_EN_Pin;
 80011ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011be:	2302      	movs	r3, #2
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <HAL_TIM_MspPostInit+0x17c>)
 80011ca:	f000 fc2b 	bl	8001a24 <HAL_GPIO_Init>
}
 80011ce:	bf00      	nop
 80011d0:	3730      	adds	r7, #48	; 0x30
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40000400 	.word	0x40000400
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40000800 	.word	0x40000800

080011f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08e      	sub	sp, #56	; 0x38
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a63      	ldr	r2, [pc, #396]	; (800139c <HAL_UART_MspInit+0x1ac>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d153      	bne.n	80012ba <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
 8001216:	4b62      	ldr	r3, [pc, #392]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	4a61      	ldr	r2, [pc, #388]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 800121c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
 8001222:	4b5f      	ldr	r3, [pc, #380]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122a:	623b      	str	r3, [r7, #32]
 800122c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	4b5b      	ldr	r3, [pc, #364]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a5a      	ldr	r2, [pc, #360]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b58      	ldr	r3, [pc, #352]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	4b54      	ldr	r3, [pc, #336]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a53      	ldr	r2, [pc, #332]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b51      	ldr	r3, [pc, #324]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = CupD_TX_Pin;
 8001266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001278:	2308      	movs	r3, #8
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CupD_TX_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001280:	4619      	mov	r1, r3
 8001282:	4848      	ldr	r0, [pc, #288]	; (80013a4 <HAL_UART_MspInit+0x1b4>)
 8001284:	f000 fbce 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CupD_RX_Pin;
 8001288:	2304      	movs	r3, #4
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001298:	2308      	movs	r3, #8
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CupD_RX_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a0:	4619      	mov	r1, r3
 80012a2:	4841      	ldr	r0, [pc, #260]	; (80013a8 <HAL_UART_MspInit+0x1b8>)
 80012a4:	f000 fbbe 	bl	8001a24 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2105      	movs	r1, #5
 80012ac:	2035      	movs	r0, #53	; 0x35
 80012ae:	f000 fafd 	bl	80018ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80012b2:	2035      	movs	r0, #53	; 0x35
 80012b4:	f000 fb16 	bl	80018e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80012b8:	e06c      	b.n	8001394 <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART3)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a3b      	ldr	r2, [pc, #236]	; (80013ac <HAL_UART_MspInit+0x1bc>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d12d      	bne.n	8001320 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	4a34      	ldr	r2, [pc, #208]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 80012ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d2:	6413      	str	r3, [r2, #64]	; 0x40
 80012d4:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	4a2d      	ldr	r2, [pc, #180]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	6313      	str	r3, [r2, #48]	; 0x30
 80012f0:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 80012fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800130e:	2307      	movs	r3, #7
 8001310:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001316:	4619      	mov	r1, r3
 8001318:	4823      	ldr	r0, [pc, #140]	; (80013a8 <HAL_UART_MspInit+0x1b8>)
 800131a:	f000 fb83 	bl	8001a24 <HAL_GPIO_Init>
}
 800131e:	e039      	b.n	8001394 <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART6)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <HAL_UART_MspInit+0x1c0>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d134      	bne.n	8001394 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART6_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 8001334:	f043 0320 	orr.w	r3, r3, #32
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f003 0320 	and.w	r3, r3, #32
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 8001350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_UART_MspInit+0x1b0>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LidD_RX_Pin|LidD_TX_Pin;
 8001362:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001374:	2308      	movs	r3, #8
 8001376:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137c:	4619      	mov	r1, r3
 800137e:	480d      	ldr	r0, [pc, #52]	; (80013b4 <HAL_UART_MspInit+0x1c4>)
 8001380:	f000 fb50 	bl	8001a24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2105      	movs	r1, #5
 8001388:	2047      	movs	r0, #71	; 0x47
 800138a:	f000 fa8f 	bl	80018ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800138e:	2047      	movs	r0, #71	; 0x47
 8001390:	f000 faa8 	bl	80018e4 <HAL_NVIC_EnableIRQ>
}
 8001394:	bf00      	nop
 8001396:	3738      	adds	r7, #56	; 0x38
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40005000 	.word	0x40005000
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	40004800 	.word	0x40004800
 80013b0:	40011400 	.word	0x40011400
 80013b4:	40021800 	.word	0x40021800

080013b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	; 0x30
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	202c      	movs	r0, #44	; 0x2c
 80013ce:	f000 fa6d 	bl	80018ac <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80013d2:	202c      	movs	r0, #44	; 0x2c
 80013d4:	f000 fa86 	bl	80018e4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	4b1f      	ldr	r3, [pc, #124]	; (800145c <HAL_InitTick+0xa4>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	4a1e      	ldr	r2, [pc, #120]	; (800145c <HAL_InitTick+0xa4>)
 80013e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e6:	6413      	str	r3, [r2, #64]	; 0x40
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <HAL_InitTick+0xa4>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013f4:	f107 0210 	add.w	r2, r7, #16
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f001 f986 	bl	8002710 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001404:	f001 f95c 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 8001408:	4603      	mov	r3, r0
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800140e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001410:	4a13      	ldr	r2, [pc, #76]	; (8001460 <HAL_InitTick+0xa8>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	0c9b      	lsrs	r3, r3, #18
 8001418:	3b01      	subs	r3, #1
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <HAL_InitTick+0xac>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <HAL_InitTick+0xb0>)
 8001420:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_InitTick+0xac>)
 8001424:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001428:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 800142a:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <HAL_InitTick+0xac>)
 800142c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142e:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_InitTick+0xac>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_InitTick+0xac>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 800143c:	4809      	ldr	r0, [pc, #36]	; (8001464 <HAL_InitTick+0xac>)
 800143e:	f001 f999 	bl	8002774 <HAL_TIM_Base_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d104      	bne.n	8001452 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001448:	4806      	ldr	r0, [pc, #24]	; (8001464 <HAL_InitTick+0xac>)
 800144a:	f001 fa4b 	bl	80028e4 <HAL_TIM_Base_Start_IT>
 800144e:	4603      	mov	r3, r0
 8001450:	e000      	b.n	8001454 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	3730      	adds	r7, #48	; 0x30
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	431bde83 	.word	0x431bde83
 8001464:	20004cf8 	.word	0x20004cf8
 8001468:	40001c00 	.word	0x40001c00

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <NMI_Handler+0x4>

08001472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <MemManage_Handler+0x4>

0800147e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <UsageFault_Handler+0x4>

0800148a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <TIM2_IRQHandler+0x10>)
 800149e:	f001 faea 	bl	8002a76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20004cb0 	.word	0x20004cb0

080014ac <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <TIM8_UP_TIM13_IRQHandler+0x10>)
 80014b2:	f001 fae0 	bl	8002a76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20004cf8 	.word	0x20004cf8

080014c0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <UART5_IRQHandler+0x10>)
 80014c6:	f002 faef 	bl	8003aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20004bd8 	.word	0x20004bd8

080014d4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <USART6_IRQHandler+0x10>)
 80014da:	f002 fae5 	bl	8003aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20004c6c 	.word	0x20004c6c

080014e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	e00a      	b.n	8001510 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014fa:	f3af 8000 	nop.w
 80014fe:	4601      	mov	r1, r0
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	60ba      	str	r2, [r7, #8]
 8001506:	b2ca      	uxtb	r2, r1
 8001508:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	429a      	cmp	r2, r3
 8001516:	dbf0      	blt.n	80014fa <_read+0x12>
	}

return len;
 8001518:	687b      	ldr	r3, [r7, #4]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
	return -1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154a:	605a      	str	r2, [r3, #4]
	return 0;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <_isatty>:

int _isatty(int file)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
	return 1;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
	return 0;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <_sbrk+0x5c>)
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <_sbrk+0x60>)
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <_sbrk+0x64>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <_sbrk+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d207      	bcs.n	80015cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015bc:	f006 f984 	bl	80078c8 <__errno>
 80015c0:	4603      	mov	r3, r0
 80015c2:	220c      	movs	r2, #12
 80015c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	e009      	b.n	80015e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <_sbrk+0x64>)
 80015dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20030000 	.word	0x20030000
 80015ec:	00000400 	.word	0x00000400
 80015f0:	2000011c 	.word	0x2000011c
 80015f4:	20004d98 	.word	0x20004d98

080015f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <SystemInit+0x20>)
 80015fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <SystemInit+0x20>)
 8001604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800161c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001654 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001620:	480d      	ldr	r0, [pc, #52]	; (8001658 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001622:	490e      	ldr	r1, [pc, #56]	; (800165c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001624:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001628:	e002      	b.n	8001630 <LoopCopyDataInit>

0800162a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800162c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162e:	3304      	adds	r3, #4

08001630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001634:	d3f9      	bcc.n	800162a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001638:	4c0b      	ldr	r4, [pc, #44]	; (8001668 <LoopFillZerobss+0x26>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800163c:	e001      	b.n	8001642 <LoopFillZerobss>

0800163e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001640:	3204      	adds	r2, #4

08001642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001644:	d3fb      	bcc.n	800163e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001646:	f7ff ffd7 	bl	80015f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800164a:	f006 fa39 	bl	8007ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164e:	f7fe ffb5 	bl	80005bc <main>
  bx  lr    
 8001652:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001654:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800165c:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8001660:	08008ba0 	.word	0x08008ba0
  ldr r2, =_sbss
 8001664:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8001668:	20004d94 	.word	0x20004d94

0800166c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800166c:	e7fe      	b.n	800166c <ADC_IRQHandler>
	...

08001670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <HAL_Init+0x40>)
 800167a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_Init+0x40>)
 8001686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800168a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <HAL_Init+0x40>)
 8001692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001698:	2003      	movs	r0, #3
 800169a:	f000 f8fc 	bl	8001896 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169e:	200f      	movs	r0, #15
 80016a0:	f7ff fe8a 	bl	80013b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a4:	f7ff fc4a 	bl	8000f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023c00 	.word	0x40023c00

080016b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_IncTick+0x20>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_IncTick+0x24>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <HAL_IncTick+0x24>)
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000008 	.word	0x20000008
 80016d8:	20004d40 	.word	0x20004d40

080016dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return uwTick;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <HAL_GetTick+0x14>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20004d40 	.word	0x20004d40

080016f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016fc:	f7ff ffee 	bl	80016dc <HAL_GetTick>
 8001700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170c:	d005      	beq.n	800171a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <HAL_Delay+0x44>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4413      	add	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800171a:	bf00      	nop
 800171c:	f7ff ffde 	bl	80016dc <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	429a      	cmp	r2, r3
 800172a:	d8f7      	bhi.n	800171c <HAL_Delay+0x28>
  {
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000008 	.word	0x20000008

0800173c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001758:	4013      	ands	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176e:	4a04      	ldr	r2, [pc, #16]	; (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	60d3      	str	r3, [r2, #12]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <__NVIC_GetPriorityGrouping+0x18>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	f003 0307 	and.w	r3, r3, #7
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	db0b      	blt.n	80017ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	f003 021f 	and.w	r2, r3, #31
 80017b8:	4907      	ldr	r1, [pc, #28]	; (80017d8 <__NVIC_EnableIRQ+0x38>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	2001      	movs	r0, #1
 80017c2:	fa00 f202 	lsl.w	r2, r0, r2
 80017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000e100 	.word	0xe000e100

080017dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	db0a      	blt.n	8001806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	490c      	ldr	r1, [pc, #48]	; (8001828 <__NVIC_SetPriority+0x4c>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	440b      	add	r3, r1
 8001800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001804:	e00a      	b.n	800181c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4908      	ldr	r1, [pc, #32]	; (800182c <__NVIC_SetPriority+0x50>)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	3b04      	subs	r3, #4
 8001814:	0112      	lsls	r2, r2, #4
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	440b      	add	r3, r1
 800181a:	761a      	strb	r2, [r3, #24]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000e100 	.word	0xe000e100
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	; 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f1c3 0307 	rsb	r3, r3, #7
 800184a:	2b04      	cmp	r3, #4
 800184c:	bf28      	it	cs
 800184e:	2304      	movcs	r3, #4
 8001850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3304      	adds	r3, #4
 8001856:	2b06      	cmp	r3, #6
 8001858:	d902      	bls.n	8001860 <NVIC_EncodePriority+0x30>
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3b03      	subs	r3, #3
 800185e:	e000      	b.n	8001862 <NVIC_EncodePriority+0x32>
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	f04f 32ff 	mov.w	r2, #4294967295
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43da      	mvns	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	401a      	ands	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	43d9      	mvns	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	4313      	orrs	r3, r2
         );
}
 800188a:	4618      	mov	r0, r3
 800188c:	3724      	adds	r7, #36	; 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ff4c 	bl	800173c <__NVIC_SetPriorityGrouping>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018be:	f7ff ff61 	bl	8001784 <__NVIC_GetPriorityGrouping>
 80018c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	68b9      	ldr	r1, [r7, #8]
 80018c8:	6978      	ldr	r0, [r7, #20]
 80018ca:	f7ff ffb1 	bl	8001830 <NVIC_EncodePriority>
 80018ce:	4602      	mov	r2, r0
 80018d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff ff80 	bl	80017dc <__NVIC_SetPriority>
}
 80018dc:	bf00      	nop
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff54 	bl	80017a0 <__NVIC_EnableIRQ>
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800190e:	f7ff fee5 	bl	80016dc <HAL_GetTick>
 8001912:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d008      	beq.n	8001932 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2280      	movs	r2, #128	; 0x80
 8001924:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e052      	b.n	80019d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0216 	bic.w	r2, r2, #22
 8001940:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695a      	ldr	r2, [r3, #20]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001950:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	2b00      	cmp	r3, #0
 8001958:	d103      	bne.n	8001962 <HAL_DMA_Abort+0x62>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800195e:	2b00      	cmp	r3, #0
 8001960:	d007      	beq.n	8001972 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0208 	bic.w	r2, r2, #8
 8001970:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0201 	bic.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001982:	e013      	b.n	80019ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001984:	f7ff feaa 	bl	80016dc <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b05      	cmp	r3, #5
 8001990:	d90c      	bls.n	80019ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2220      	movs	r2, #32
 8001996:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2203      	movs	r2, #3
 800199c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e015      	b.n	80019d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1e4      	bne.n	8001984 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019be:	223f      	movs	r2, #63	; 0x3f
 80019c0:	409a      	lsls	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d004      	beq.n	80019fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2280      	movs	r2, #128	; 0x80
 80019f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00c      	b.n	8001a18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2205      	movs	r2, #5
 8001a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	e177      	b.n	8001d30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	f040 8166 	bne.w	8001d2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d005      	beq.n	8001a76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d130      	bne.n	8001ad8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	2203      	movs	r2, #3
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 0201 	and.w	r2, r3, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d017      	beq.n	8001b14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d123      	bne.n	8001b68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	08da      	lsrs	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3208      	adds	r2, #8
 8001b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	08da      	lsrs	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3208      	adds	r2, #8
 8001b62:	69b9      	ldr	r1, [r7, #24]
 8001b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0203 	and.w	r2, r3, #3
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80c0 	beq.w	8001d2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b66      	ldr	r3, [pc, #408]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	4a65      	ldr	r2, [pc, #404]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bba:	4b63      	ldr	r3, [pc, #396]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bc6:	4a61      	ldr	r2, [pc, #388]	; (8001d4c <HAL_GPIO_Init+0x328>)
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a58      	ldr	r2, [pc, #352]	; (8001d50 <HAL_GPIO_Init+0x32c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d037      	beq.n	8001c62 <HAL_GPIO_Init+0x23e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a57      	ldr	r2, [pc, #348]	; (8001d54 <HAL_GPIO_Init+0x330>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d031      	beq.n	8001c5e <HAL_GPIO_Init+0x23a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a56      	ldr	r2, [pc, #344]	; (8001d58 <HAL_GPIO_Init+0x334>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d02b      	beq.n	8001c5a <HAL_GPIO_Init+0x236>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a55      	ldr	r2, [pc, #340]	; (8001d5c <HAL_GPIO_Init+0x338>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d025      	beq.n	8001c56 <HAL_GPIO_Init+0x232>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a54      	ldr	r2, [pc, #336]	; (8001d60 <HAL_GPIO_Init+0x33c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01f      	beq.n	8001c52 <HAL_GPIO_Init+0x22e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a53      	ldr	r2, [pc, #332]	; (8001d64 <HAL_GPIO_Init+0x340>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d019      	beq.n	8001c4e <HAL_GPIO_Init+0x22a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a52      	ldr	r2, [pc, #328]	; (8001d68 <HAL_GPIO_Init+0x344>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d013      	beq.n	8001c4a <HAL_GPIO_Init+0x226>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a51      	ldr	r2, [pc, #324]	; (8001d6c <HAL_GPIO_Init+0x348>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d00d      	beq.n	8001c46 <HAL_GPIO_Init+0x222>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a50      	ldr	r2, [pc, #320]	; (8001d70 <HAL_GPIO_Init+0x34c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d007      	beq.n	8001c42 <HAL_GPIO_Init+0x21e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4f      	ldr	r2, [pc, #316]	; (8001d74 <HAL_GPIO_Init+0x350>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d101      	bne.n	8001c3e <HAL_GPIO_Init+0x21a>
 8001c3a:	2309      	movs	r3, #9
 8001c3c:	e012      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c3e:	230a      	movs	r3, #10
 8001c40:	e010      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c42:	2308      	movs	r3, #8
 8001c44:	e00e      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c46:	2307      	movs	r3, #7
 8001c48:	e00c      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c4a:	2306      	movs	r3, #6
 8001c4c:	e00a      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c4e:	2305      	movs	r3, #5
 8001c50:	e008      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c52:	2304      	movs	r3, #4
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c56:	2303      	movs	r3, #3
 8001c58:	e004      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e002      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c62:	2300      	movs	r3, #0
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	f002 0203 	and.w	r2, r2, #3
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	4093      	lsls	r3, r2
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c74:	4935      	ldr	r1, [pc, #212]	; (8001d4c <HAL_GPIO_Init+0x328>)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c82:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca6:	4a34      	ldr	r2, [pc, #208]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cac:	4b32      	ldr	r3, [pc, #200]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cd0:	4a29      	ldr	r2, [pc, #164]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd6:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cfa:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d24:	4a14      	ldr	r2, [pc, #80]	; (8001d78 <HAL_GPIO_Init+0x354>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b0f      	cmp	r3, #15
 8001d34:	f67f ae84 	bls.w	8001a40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	40020000 	.word	0x40020000
 8001d54:	40020400 	.word	0x40020400
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020c00 	.word	0x40020c00
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40021400 	.word	0x40021400
 8001d68:	40021800 	.word	0x40021800
 8001d6c:	40021c00 	.word	0x40021c00
 8001d70:	40022000 	.word	0x40022000
 8001d74:	40022400 	.word	0x40022400
 8001d78:	40013c00 	.word	0x40013c00

08001d7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	887b      	ldrh	r3, [r7, #2]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
 8001d98:	e001      	b.n	8001d9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]
 8001db8:	4613      	mov	r3, r2
 8001dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dbc:	787b      	ldrb	r3, [r7, #1]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc2:	887a      	ldrh	r2, [r7, #2]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dc8:	e003      	b.n	8001dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dca:	887b      	ldrh	r3, [r7, #2]
 8001dcc:	041a      	lsls	r2, r3, #16
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	619a      	str	r2, [r3, #24]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <HAL_PWREx_EnableOverDrive+0x90>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a1f      	ldr	r2, [pc, #124]	; (8001e70 <HAL_PWREx_EnableOverDrive+0x90>)
 8001df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <HAL_PWREx_EnableOverDrive+0x90>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_PWREx_EnableOverDrive+0x94>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e0c:	f7ff fc66 	bl	80016dc <HAL_GetTick>
 8001e10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e12:	e009      	b.n	8001e28 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e14:	f7ff fc62 	bl	80016dc <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e22:	d901      	bls.n	8001e28 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e01f      	b.n	8001e68 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e28:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e34:	d1ee      	bne.n	8001e14 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e3c:	f7ff fc4e 	bl	80016dc <HAL_GetTick>
 8001e40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e42:	e009      	b.n	8001e58 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e44:	f7ff fc4a 	bl	80016dc <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e52:	d901      	bls.n	8001e58 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e007      	b.n	8001e68 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e58:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e64:	d1ee      	bne.n	8001e44 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40023800 	.word	0x40023800
 8001e74:	420e0040 	.word	0x420e0040
 8001e78:	40007000 	.word	0x40007000
 8001e7c:	420e0044 	.word	0x420e0044

08001e80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e264      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d075      	beq.n	8001f8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e9e:	4ba3      	ldr	r3, [pc, #652]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eaa:	4ba0      	ldr	r3, [pc, #640]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d112      	bne.n	8001edc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb6:	4b9d      	ldr	r3, [pc, #628]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ec2:	d10b      	bne.n	8001edc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	4b99      	ldr	r3, [pc, #612]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d05b      	beq.n	8001f88 <HAL_RCC_OscConfig+0x108>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d157      	bne.n	8001f88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e23f      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee4:	d106      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x74>
 8001ee6:	4b91      	ldr	r3, [pc, #580]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a90      	ldr	r2, [pc, #576]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e01d      	b.n	8001f30 <HAL_RCC_OscConfig+0xb0>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x98>
 8001efe:	4b8b      	ldr	r3, [pc, #556]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a8a      	ldr	r2, [pc, #552]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b88      	ldr	r3, [pc, #544]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a87      	ldr	r2, [pc, #540]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e00b      	b.n	8001f30 <HAL_RCC_OscConfig+0xb0>
 8001f18:	4b84      	ldr	r3, [pc, #528]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a83      	ldr	r2, [pc, #524]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b81      	ldr	r3, [pc, #516]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a80      	ldr	r2, [pc, #512]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff fbd0 	bl	80016dc <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff fbcc 	bl	80016dc <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e204      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b76      	ldr	r3, [pc, #472]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0xc0>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff fbbc 	bl	80016dc <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff fbb8 	bl	80016dc <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e1f0      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	4b6c      	ldr	r3, [pc, #432]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0xe8>
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d063      	beq.n	800205e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f96:	4b65      	ldr	r3, [pc, #404]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa2:	4b62      	ldr	r3, [pc, #392]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d11c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fae:	4b5f      	ldr	r3, [pc, #380]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d116      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	4b5c      	ldr	r3, [pc, #368]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x152>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e1c4      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd2:	4b56      	ldr	r3, [pc, #344]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4952      	ldr	r1, [pc, #328]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	e03a      	b.n	800205e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d020      	beq.n	8002032 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff0:	4b4f      	ldr	r3, [pc, #316]	; (8002130 <HAL_RCC_OscConfig+0x2b0>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff6:	f7ff fb71 	bl	80016dc <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffe:	f7ff fb6d 	bl	80016dc <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e1a5      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002010:	4b46      	ldr	r3, [pc, #280]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201c:	4b43      	ldr	r3, [pc, #268]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4940      	ldr	r1, [pc, #256]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
 8002030:	e015      	b.n	800205e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002032:	4b3f      	ldr	r3, [pc, #252]	; (8002130 <HAL_RCC_OscConfig+0x2b0>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff fb50 	bl	80016dc <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002040:	f7ff fb4c 	bl	80016dc <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e184      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002052:	4b36      	ldr	r3, [pc, #216]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d030      	beq.n	80020cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d016      	beq.n	80020a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002072:	4b30      	ldr	r3, [pc, #192]	; (8002134 <HAL_RCC_OscConfig+0x2b4>)
 8002074:	2201      	movs	r2, #1
 8002076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7ff fb30 	bl	80016dc <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002080:	f7ff fb2c 	bl	80016dc <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e164      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	4b26      	ldr	r3, [pc, #152]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8002094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x200>
 800209e:	e015      	b.n	80020cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a0:	4b24      	ldr	r3, [pc, #144]	; (8002134 <HAL_RCC_OscConfig+0x2b4>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a6:	f7ff fb19 	bl	80016dc <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ae:	f7ff fb15 	bl	80016dc <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e14d      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c0:	4b1a      	ldr	r3, [pc, #104]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 80020c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f0      	bne.n	80020ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80a0 	beq.w	800221a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020de:	4b13      	ldr	r3, [pc, #76]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10f      	bne.n	800210a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a0e      	ldr	r2, [pc, #56]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002106:	2301      	movs	r3, #1
 8002108:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCC_OscConfig+0x2b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d121      	bne.n	800215a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <HAL_RCC_OscConfig+0x2b8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a07      	ldr	r2, [pc, #28]	; (8002138 <HAL_RCC_OscConfig+0x2b8>)
 800211c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002122:	f7ff fadb 	bl	80016dc <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	e011      	b.n	800214e <HAL_RCC_OscConfig+0x2ce>
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800
 8002130:	42470000 	.word	0x42470000
 8002134:	42470e80 	.word	0x42470e80
 8002138:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213c:	f7ff face 	bl	80016dc <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e106      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214e:	4b85      	ldr	r3, [pc, #532]	; (8002364 <HAL_RCC_OscConfig+0x4e4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d106      	bne.n	8002170 <HAL_RCC_OscConfig+0x2f0>
 8002162:	4b81      	ldr	r3, [pc, #516]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002166:	4a80      	ldr	r2, [pc, #512]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6713      	str	r3, [r2, #112]	; 0x70
 800216e:	e01c      	b.n	80021aa <HAL_RCC_OscConfig+0x32a>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b05      	cmp	r3, #5
 8002176:	d10c      	bne.n	8002192 <HAL_RCC_OscConfig+0x312>
 8002178:	4b7b      	ldr	r3, [pc, #492]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	4a7a      	ldr	r2, [pc, #488]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	6713      	str	r3, [r2, #112]	; 0x70
 8002184:	4b78      	ldr	r3, [pc, #480]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	4a77      	ldr	r2, [pc, #476]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6713      	str	r3, [r2, #112]	; 0x70
 8002190:	e00b      	b.n	80021aa <HAL_RCC_OscConfig+0x32a>
 8002192:	4b75      	ldr	r3, [pc, #468]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	4a74      	ldr	r2, [pc, #464]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	6713      	str	r3, [r2, #112]	; 0x70
 800219e:	4b72      	ldr	r3, [pc, #456]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a2:	4a71      	ldr	r2, [pc, #452]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 80021a4:	f023 0304 	bic.w	r3, r3, #4
 80021a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d015      	beq.n	80021de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b2:	f7ff fa93 	bl	80016dc <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b8:	e00a      	b.n	80021d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ba:	f7ff fa8f 	bl	80016dc <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e0c5      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d0:	4b65      	ldr	r3, [pc, #404]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ee      	beq.n	80021ba <HAL_RCC_OscConfig+0x33a>
 80021dc:	e014      	b.n	8002208 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021de:	f7ff fa7d 	bl	80016dc <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e4:	e00a      	b.n	80021fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e6:	f7ff fa79 	bl	80016dc <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e0af      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fc:	4b5a      	ldr	r3, [pc, #360]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1ee      	bne.n	80021e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002208:	7dfb      	ldrb	r3, [r7, #23]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d105      	bne.n	800221a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220e:	4b56      	ldr	r3, [pc, #344]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4a55      	ldr	r2, [pc, #340]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 8002214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 809b 	beq.w	800235a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002224:	4b50      	ldr	r3, [pc, #320]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b08      	cmp	r3, #8
 800222e:	d05c      	beq.n	80022ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d141      	bne.n	80022bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002238:	4b4c      	ldr	r3, [pc, #304]	; (800236c <HAL_RCC_OscConfig+0x4ec>)
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7ff fa4d 	bl	80016dc <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002246:	f7ff fa49 	bl	80016dc <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e081      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002258:	4b43      	ldr	r3, [pc, #268]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f0      	bne.n	8002246 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69da      	ldr	r2, [r3, #28]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	019b      	lsls	r3, r3, #6
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227a:	085b      	lsrs	r3, r3, #1
 800227c:	3b01      	subs	r3, #1
 800227e:	041b      	lsls	r3, r3, #16
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	061b      	lsls	r3, r3, #24
 8002288:	4937      	ldr	r1, [pc, #220]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800228e:	4b37      	ldr	r3, [pc, #220]	; (800236c <HAL_RCC_OscConfig+0x4ec>)
 8002290:	2201      	movs	r2, #1
 8002292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7ff fa22 	bl	80016dc <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229c:	f7ff fa1e 	bl	80016dc <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e056      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ae:	4b2e      	ldr	r3, [pc, #184]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x41c>
 80022ba:	e04e      	b.n	800235a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022bc:	4b2b      	ldr	r3, [pc, #172]	; (800236c <HAL_RCC_OscConfig+0x4ec>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7ff fa0b 	bl	80016dc <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ca:	f7ff fa07 	bl	80016dc <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e03f      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022dc:	4b22      	ldr	r3, [pc, #136]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f0      	bne.n	80022ca <HAL_RCC_OscConfig+0x44a>
 80022e8:	e037      	b.n	800235a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e032      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022f6:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d028      	beq.n	8002356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d121      	bne.n	8002356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d11a      	bne.n	8002356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002326:	4013      	ands	r3, r2
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800232c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800232e:	4293      	cmp	r3, r2
 8002330:	d111      	bne.n	8002356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	085b      	lsrs	r3, r3, #1
 800233e:	3b01      	subs	r3, #1
 8002340:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d107      	bne.n	8002356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002352:	429a      	cmp	r2, r3
 8002354:	d001      	beq.n	800235a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40007000 	.word	0x40007000
 8002368:	40023800 	.word	0x40023800
 800236c:	42470060 	.word	0x42470060

08002370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0cc      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002384:	4b68      	ldr	r3, [pc, #416]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d90c      	bls.n	80023ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b65      	ldr	r3, [pc, #404]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b63      	ldr	r3, [pc, #396]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0b8      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c4:	4b59      	ldr	r3, [pc, #356]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a58      	ldr	r2, [pc, #352]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023dc:	4b53      	ldr	r3, [pc, #332]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a52      	ldr	r2, [pc, #328]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e8:	4b50      	ldr	r3, [pc, #320]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	494d      	ldr	r1, [pc, #308]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d044      	beq.n	8002490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d119      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e07f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d003      	beq.n	800242e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242a:	2b03      	cmp	r3, #3
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242e:	4b3f      	ldr	r3, [pc, #252]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e06f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243e:	4b3b      	ldr	r3, [pc, #236]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e067      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244e:	4b37      	ldr	r3, [pc, #220]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4934      	ldr	r1, [pc, #208]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002460:	f7ff f93c 	bl	80016dc <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7ff f938 	bl	80016dc <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e04f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	4b2b      	ldr	r3, [pc, #172]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 020c 	and.w	r2, r3, #12
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d1eb      	bne.n	8002468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002490:	4b25      	ldr	r3, [pc, #148]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 030f 	and.w	r3, r3, #15
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d20c      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b22      	ldr	r3, [pc, #136]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e032      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4916      	ldr	r1, [pc, #88]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	490e      	ldr	r1, [pc, #56]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024f6:	f000 f821 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80024fa:	4602      	mov	r2, r0
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	490a      	ldr	r1, [pc, #40]	; (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	5ccb      	ldrb	r3, [r1, r3]
 800250a:	fa22 f303 	lsr.w	r3, r2, r3
 800250e:	4a09      	ldr	r2, [pc, #36]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe ff4e 	bl	80013b8 <HAL_InitTick>

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023c00 	.word	0x40023c00
 800252c:	40023800 	.word	0x40023800
 8002530:	08008ae0 	.word	0x08008ae0
 8002534:	20000000 	.word	0x20000000
 8002538:	20000004 	.word	0x20000004

0800253c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800253c:	b5b0      	push	{r4, r5, r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002542:	2100      	movs	r1, #0
 8002544:	6079      	str	r1, [r7, #4]
 8002546:	2100      	movs	r1, #0
 8002548:	60f9      	str	r1, [r7, #12]
 800254a:	2100      	movs	r1, #0
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800254e:	2100      	movs	r1, #0
 8002550:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002552:	4952      	ldr	r1, [pc, #328]	; (800269c <HAL_RCC_GetSysClockFreq+0x160>)
 8002554:	6889      	ldr	r1, [r1, #8]
 8002556:	f001 010c 	and.w	r1, r1, #12
 800255a:	2908      	cmp	r1, #8
 800255c:	d00d      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x3e>
 800255e:	2908      	cmp	r1, #8
 8002560:	f200 8094 	bhi.w	800268c <HAL_RCC_GetSysClockFreq+0x150>
 8002564:	2900      	cmp	r1, #0
 8002566:	d002      	beq.n	800256e <HAL_RCC_GetSysClockFreq+0x32>
 8002568:	2904      	cmp	r1, #4
 800256a:	d003      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x38>
 800256c:	e08e      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800256e:	4b4c      	ldr	r3, [pc, #304]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x164>)
 8002570:	60bb      	str	r3, [r7, #8]
       break;
 8002572:	e08e      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002574:	4b4b      	ldr	r3, [pc, #300]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002576:	60bb      	str	r3, [r7, #8]
      break;
 8002578:	e08b      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800257a:	4948      	ldr	r1, [pc, #288]	; (800269c <HAL_RCC_GetSysClockFreq+0x160>)
 800257c:	6849      	ldr	r1, [r1, #4]
 800257e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002582:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002584:	4945      	ldr	r1, [pc, #276]	; (800269c <HAL_RCC_GetSysClockFreq+0x160>)
 8002586:	6849      	ldr	r1, [r1, #4]
 8002588:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800258c:	2900      	cmp	r1, #0
 800258e:	d024      	beq.n	80025da <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002590:	4942      	ldr	r1, [pc, #264]	; (800269c <HAL_RCC_GetSysClockFreq+0x160>)
 8002592:	6849      	ldr	r1, [r1, #4]
 8002594:	0989      	lsrs	r1, r1, #6
 8002596:	4608      	mov	r0, r1
 8002598:	f04f 0100 	mov.w	r1, #0
 800259c:	f240 14ff 	movw	r4, #511	; 0x1ff
 80025a0:	f04f 0500 	mov.w	r5, #0
 80025a4:	ea00 0204 	and.w	r2, r0, r4
 80025a8:	ea01 0305 	and.w	r3, r1, r5
 80025ac:	493d      	ldr	r1, [pc, #244]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80025ae:	fb01 f003 	mul.w	r0, r1, r3
 80025b2:	2100      	movs	r1, #0
 80025b4:	fb01 f102 	mul.w	r1, r1, r2
 80025b8:	1844      	adds	r4, r0, r1
 80025ba:	493a      	ldr	r1, [pc, #232]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80025bc:	fba2 0101 	umull	r0, r1, r2, r1
 80025c0:	1863      	adds	r3, r4, r1
 80025c2:	4619      	mov	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	461a      	mov	r2, r3
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	f7fd fe60 	bl	8000290 <__aeabi_uldivmod>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4613      	mov	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	e04a      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025da:	4b30      	ldr	r3, [pc, #192]	; (800269c <HAL_RCC_GetSysClockFreq+0x160>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	099b      	lsrs	r3, r3, #6
 80025e0:	461a      	mov	r2, r3
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025ea:	f04f 0100 	mov.w	r1, #0
 80025ee:	ea02 0400 	and.w	r4, r2, r0
 80025f2:	ea03 0501 	and.w	r5, r3, r1
 80025f6:	4620      	mov	r0, r4
 80025f8:	4629      	mov	r1, r5
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	014b      	lsls	r3, r1, #5
 8002604:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002608:	0142      	lsls	r2, r0, #5
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	1b00      	subs	r0, r0, r4
 8002610:	eb61 0105 	sbc.w	r1, r1, r5
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	018b      	lsls	r3, r1, #6
 800261e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002622:	0182      	lsls	r2, r0, #6
 8002624:	1a12      	subs	r2, r2, r0
 8002626:	eb63 0301 	sbc.w	r3, r3, r1
 800262a:	f04f 0000 	mov.w	r0, #0
 800262e:	f04f 0100 	mov.w	r1, #0
 8002632:	00d9      	lsls	r1, r3, #3
 8002634:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002638:	00d0      	lsls	r0, r2, #3
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	1912      	adds	r2, r2, r4
 8002640:	eb45 0303 	adc.w	r3, r5, r3
 8002644:	f04f 0000 	mov.w	r0, #0
 8002648:	f04f 0100 	mov.w	r1, #0
 800264c:	0299      	lsls	r1, r3, #10
 800264e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002652:	0290      	lsls	r0, r2, #10
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	461a      	mov	r2, r3
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	f7fd fe14 	bl	8000290 <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4613      	mov	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <HAL_RCC_GetSysClockFreq+0x160>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	3301      	adds	r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	60bb      	str	r3, [r7, #8]
      break;
 800268a:	e002      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800268e:	60bb      	str	r3, [r7, #8]
      break;
 8002690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002692:	68bb      	ldr	r3, [r7, #8]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bdb0      	pop	{r4, r5, r7, pc}
 800269c:	40023800 	.word	0x40023800
 80026a0:	00f42400 	.word	0x00f42400
 80026a4:	017d7840 	.word	0x017d7840

080026a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20000000 	.word	0x20000000

080026c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026c4:	f7ff fff0 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	0a9b      	lsrs	r3, r3, #10
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	4903      	ldr	r1, [pc, #12]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40023800 	.word	0x40023800
 80026e4:	08008af0 	.word	0x08008af0

080026e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026ec:	f7ff ffdc 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	0b5b      	lsrs	r3, r3, #13
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	4903      	ldr	r1, [pc, #12]	; (800270c <HAL_RCC_GetPCLK2Freq+0x24>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002704:	4618      	mov	r0, r3
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40023800 	.word	0x40023800
 800270c:	08008af0 	.word	0x08008af0

08002710 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	220f      	movs	r2, #15
 800271e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002720:	4b12      	ldr	r3, [pc, #72]	; (800276c <HAL_RCC_GetClockConfig+0x5c>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0203 	and.w	r2, r3, #3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800272c:	4b0f      	ldr	r3, [pc, #60]	; (800276c <HAL_RCC_GetClockConfig+0x5c>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <HAL_RCC_GetClockConfig+0x5c>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002744:	4b09      	ldr	r3, [pc, #36]	; (800276c <HAL_RCC_GetClockConfig+0x5c>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	08db      	lsrs	r3, r3, #3
 800274a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002752:	4b07      	ldr	r3, [pc, #28]	; (8002770 <HAL_RCC_GetClockConfig+0x60>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 020f 	and.w	r2, r3, #15
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	601a      	str	r2, [r3, #0]
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	40023c00 	.word	0x40023c00

08002774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e041      	b.n	800280a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe fbfa 	bl	8000f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3304      	adds	r3, #4
 80027b0:	4619      	mov	r1, r3
 80027b2:	4610      	mov	r0, r2
 80027b4:	f000 fc5c 	bl	8003070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d001      	beq.n	800282c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e046      	b.n	80028ba <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a23      	ldr	r2, [pc, #140]	; (80028c8 <HAL_TIM_Base_Start+0xb4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d022      	beq.n	8002884 <HAL_TIM_Base_Start+0x70>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002846:	d01d      	beq.n	8002884 <HAL_TIM_Base_Start+0x70>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1f      	ldr	r2, [pc, #124]	; (80028cc <HAL_TIM_Base_Start+0xb8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d018      	beq.n	8002884 <HAL_TIM_Base_Start+0x70>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a1e      	ldr	r2, [pc, #120]	; (80028d0 <HAL_TIM_Base_Start+0xbc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d013      	beq.n	8002884 <HAL_TIM_Base_Start+0x70>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a1c      	ldr	r2, [pc, #112]	; (80028d4 <HAL_TIM_Base_Start+0xc0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00e      	beq.n	8002884 <HAL_TIM_Base_Start+0x70>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a1b      	ldr	r2, [pc, #108]	; (80028d8 <HAL_TIM_Base_Start+0xc4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d009      	beq.n	8002884 <HAL_TIM_Base_Start+0x70>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a19      	ldr	r2, [pc, #100]	; (80028dc <HAL_TIM_Base_Start+0xc8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d004      	beq.n	8002884 <HAL_TIM_Base_Start+0x70>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a18      	ldr	r2, [pc, #96]	; (80028e0 <HAL_TIM_Base_Start+0xcc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d111      	bne.n	80028a8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b06      	cmp	r3, #6
 8002894:	d010      	beq.n	80028b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0201 	orr.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a6:	e007      	b.n	80028b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40010000 	.word	0x40010000
 80028cc:	40000400 	.word	0x40000400
 80028d0:	40000800 	.word	0x40000800
 80028d4:	40000c00 	.word	0x40000c00
 80028d8:	40010400 	.word	0x40010400
 80028dc:	40014000 	.word	0x40014000
 80028e0:	40001800 	.word	0x40001800

080028e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d001      	beq.n	80028fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e04e      	b.n	800299a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a23      	ldr	r2, [pc, #140]	; (80029a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d022      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x80>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002926:	d01d      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x80>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1f      	ldr	r2, [pc, #124]	; (80029ac <HAL_TIM_Base_Start_IT+0xc8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d018      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x80>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1e      	ldr	r2, [pc, #120]	; (80029b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d013      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x80>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1c      	ldr	r2, [pc, #112]	; (80029b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00e      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x80>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d009      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x80>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <HAL_TIM_Base_Start_IT+0xd8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d004      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x80>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d111      	bne.n	8002988 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b06      	cmp	r3, #6
 8002974:	d010      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0201 	orr.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002986:	e007      	b.n	8002998 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40010000 	.word	0x40010000
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40000800 	.word	0x40000800
 80029b4:	40000c00 	.word	0x40000c00
 80029b8:	40010400 	.word	0x40010400
 80029bc:	40014000 	.word	0x40014000
 80029c0:	40001800 	.word	0x40001800

080029c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e041      	b.n	8002a5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f839 	bl	8002a62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3304      	adds	r3, #4
 8002a00:	4619      	mov	r1, r3
 8002a02:	4610      	mov	r0, r2
 8002a04:	f000 fb34 	bl	8003070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d122      	bne.n	8002ad2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d11b      	bne.n	8002ad2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f06f 0202 	mvn.w	r2, #2
 8002aa2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 faba 	bl	8003032 <HAL_TIM_IC_CaptureCallback>
 8002abe:	e005      	b.n	8002acc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 faac 	bl	800301e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fabd 	bl	8003046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d122      	bne.n	8002b26 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d11b      	bne.n	8002b26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f06f 0204 	mvn.w	r2, #4
 8002af6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fa90 	bl	8003032 <HAL_TIM_IC_CaptureCallback>
 8002b12:	e005      	b.n	8002b20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 fa82 	bl	800301e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fa93 	bl	8003046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d122      	bne.n	8002b7a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d11b      	bne.n	8002b7a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f06f 0208 	mvn.w	r2, #8
 8002b4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2204      	movs	r2, #4
 8002b50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fa66 	bl	8003032 <HAL_TIM_IC_CaptureCallback>
 8002b66:	e005      	b.n	8002b74 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fa58 	bl	800301e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fa69 	bl	8003046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b10      	cmp	r3, #16
 8002b86:	d122      	bne.n	8002bce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	2b10      	cmp	r3, #16
 8002b94:	d11b      	bne.n	8002bce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f06f 0210 	mvn.w	r2, #16
 8002b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2208      	movs	r2, #8
 8002ba4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fa3c 	bl	8003032 <HAL_TIM_IC_CaptureCallback>
 8002bba:	e005      	b.n	8002bc8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 fa2e 	bl	800301e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fa3f 	bl	8003046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d10e      	bne.n	8002bfa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d107      	bne.n	8002bfa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f06f 0201 	mvn.w	r2, #1
 8002bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7fe f989 	bl	8000f0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c04:	2b80      	cmp	r3, #128	; 0x80
 8002c06:	d10e      	bne.n	8002c26 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c12:	2b80      	cmp	r3, #128	; 0x80
 8002c14:	d107      	bne.n	8002c26 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fe27 	bl	8003874 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c30:	2b40      	cmp	r3, #64	; 0x40
 8002c32:	d10e      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3e:	2b40      	cmp	r3, #64	; 0x40
 8002c40:	d107      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fa04 	bl	800305a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d10e      	bne.n	8002c7e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d107      	bne.n	8002c7e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f06f 0220 	mvn.w	r2, #32
 8002c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fdf1 	bl	8003860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e0ae      	b.n	8002e04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b0c      	cmp	r3, #12
 8002cb2:	f200 809f 	bhi.w	8002df4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002cf1 	.word	0x08002cf1
 8002cc0:	08002df5 	.word	0x08002df5
 8002cc4:	08002df5 	.word	0x08002df5
 8002cc8:	08002df5 	.word	0x08002df5
 8002ccc:	08002d31 	.word	0x08002d31
 8002cd0:	08002df5 	.word	0x08002df5
 8002cd4:	08002df5 	.word	0x08002df5
 8002cd8:	08002df5 	.word	0x08002df5
 8002cdc:	08002d73 	.word	0x08002d73
 8002ce0:	08002df5 	.word	0x08002df5
 8002ce4:	08002df5 	.word	0x08002df5
 8002ce8:	08002df5 	.word	0x08002df5
 8002cec:	08002db3 	.word	0x08002db3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fa5a 	bl	80031b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0208 	orr.w	r2, r2, #8
 8002d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0204 	bic.w	r2, r2, #4
 8002d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6999      	ldr	r1, [r3, #24]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	691a      	ldr	r2, [r3, #16]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	619a      	str	r2, [r3, #24]
      break;
 8002d2e:	e064      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68b9      	ldr	r1, [r7, #8]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 faaa 	bl	8003290 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6999      	ldr	r1, [r3, #24]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	021a      	lsls	r2, r3, #8
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	619a      	str	r2, [r3, #24]
      break;
 8002d70:	e043      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68b9      	ldr	r1, [r7, #8]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 faff 	bl	800337c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69da      	ldr	r2, [r3, #28]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0208 	orr.w	r2, r2, #8
 8002d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69da      	ldr	r2, [r3, #28]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0204 	bic.w	r2, r2, #4
 8002d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69d9      	ldr	r1, [r3, #28]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	61da      	str	r2, [r3, #28]
      break;
 8002db0:	e023      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 fb53 	bl	8003464 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69da      	ldr	r2, [r3, #28]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69da      	ldr	r2, [r3, #28]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69d9      	ldr	r1, [r3, #28]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	021a      	lsls	r2, r3, #8
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	61da      	str	r2, [r3, #28]
      break;
 8002df2:	e002      	b.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	75fb      	strb	r3, [r7, #23]
      break;
 8002df8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_TIM_ConfigClockSource+0x1c>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e0b4      	b.n	8002f92 <HAL_TIM_ConfigClockSource+0x186>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e60:	d03e      	beq.n	8002ee0 <HAL_TIM_ConfigClockSource+0xd4>
 8002e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e66:	f200 8087 	bhi.w	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6e:	f000 8086 	beq.w	8002f7e <HAL_TIM_ConfigClockSource+0x172>
 8002e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e76:	d87f      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e78:	2b70      	cmp	r3, #112	; 0x70
 8002e7a:	d01a      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0xa6>
 8002e7c:	2b70      	cmp	r3, #112	; 0x70
 8002e7e:	d87b      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e80:	2b60      	cmp	r3, #96	; 0x60
 8002e82:	d050      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x11a>
 8002e84:	2b60      	cmp	r3, #96	; 0x60
 8002e86:	d877      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e88:	2b50      	cmp	r3, #80	; 0x50
 8002e8a:	d03c      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0xfa>
 8002e8c:	2b50      	cmp	r3, #80	; 0x50
 8002e8e:	d873      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e90:	2b40      	cmp	r3, #64	; 0x40
 8002e92:	d058      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x13a>
 8002e94:	2b40      	cmp	r3, #64	; 0x40
 8002e96:	d86f      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002e98:	2b30      	cmp	r3, #48	; 0x30
 8002e9a:	d064      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002e9c:	2b30      	cmp	r3, #48	; 0x30
 8002e9e:	d86b      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d060      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d867      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d05c      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d05a      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15a>
 8002eb0:	e062      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6899      	ldr	r1, [r3, #8]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f000 fc30 	bl	8003726 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ed4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	609a      	str	r2, [r3, #8]
      break;
 8002ede:	e04f      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6899      	ldr	r1, [r3, #8]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f000 fc19 	bl	8003726 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f02:	609a      	str	r2, [r3, #8]
      break;
 8002f04:	e03c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6859      	ldr	r1, [r3, #4]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	461a      	mov	r2, r3
 8002f14:	f000 fb8d 	bl	8003632 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2150      	movs	r1, #80	; 0x50
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fbe6 	bl	80036f0 <TIM_ITRx_SetConfig>
      break;
 8002f24:	e02c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6859      	ldr	r1, [r3, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	461a      	mov	r2, r3
 8002f34:	f000 fbac 	bl	8003690 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2160      	movs	r1, #96	; 0x60
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fbd6 	bl	80036f0 <TIM_ITRx_SetConfig>
      break;
 8002f44:	e01c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6859      	ldr	r1, [r3, #4]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	461a      	mov	r2, r3
 8002f54:	f000 fb6d 	bl	8003632 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2140      	movs	r1, #64	; 0x40
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fbc6 	bl	80036f0 <TIM_ITRx_SetConfig>
      break;
 8002f64:	e00c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4610      	mov	r0, r2
 8002f72:	f000 fbbd 	bl	80036f0 <TIM_ITRx_SetConfig>
      break;
 8002f76:	e003      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7c:	e000      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e031      	b.n	8003016 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002fc2:	6839      	ldr	r1, [r7, #0]
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 faa3 	bl	8003510 <TIM_SlaveTimer_SetConfig>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d009      	beq.n	8002fe4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e018      	b.n	8003016 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ff2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003002:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a40      	ldr	r2, [pc, #256]	; (8003184 <TIM_Base_SetConfig+0x114>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d013      	beq.n	80030b0 <TIM_Base_SetConfig+0x40>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308e:	d00f      	beq.n	80030b0 <TIM_Base_SetConfig+0x40>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a3d      	ldr	r2, [pc, #244]	; (8003188 <TIM_Base_SetConfig+0x118>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d00b      	beq.n	80030b0 <TIM_Base_SetConfig+0x40>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a3c      	ldr	r2, [pc, #240]	; (800318c <TIM_Base_SetConfig+0x11c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d007      	beq.n	80030b0 <TIM_Base_SetConfig+0x40>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a3b      	ldr	r2, [pc, #236]	; (8003190 <TIM_Base_SetConfig+0x120>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d003      	beq.n	80030b0 <TIM_Base_SetConfig+0x40>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a3a      	ldr	r2, [pc, #232]	; (8003194 <TIM_Base_SetConfig+0x124>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d108      	bne.n	80030c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a2f      	ldr	r2, [pc, #188]	; (8003184 <TIM_Base_SetConfig+0x114>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d02b      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d0:	d027      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a2c      	ldr	r2, [pc, #176]	; (8003188 <TIM_Base_SetConfig+0x118>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d023      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a2b      	ldr	r2, [pc, #172]	; (800318c <TIM_Base_SetConfig+0x11c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01f      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a2a      	ldr	r2, [pc, #168]	; (8003190 <TIM_Base_SetConfig+0x120>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01b      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a29      	ldr	r2, [pc, #164]	; (8003194 <TIM_Base_SetConfig+0x124>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d017      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a28      	ldr	r2, [pc, #160]	; (8003198 <TIM_Base_SetConfig+0x128>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a27      	ldr	r2, [pc, #156]	; (800319c <TIM_Base_SetConfig+0x12c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00f      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a26      	ldr	r2, [pc, #152]	; (80031a0 <TIM_Base_SetConfig+0x130>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00b      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a25      	ldr	r2, [pc, #148]	; (80031a4 <TIM_Base_SetConfig+0x134>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a24      	ldr	r2, [pc, #144]	; (80031a8 <TIM_Base_SetConfig+0x138>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d003      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a23      	ldr	r2, [pc, #140]	; (80031ac <TIM_Base_SetConfig+0x13c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d108      	bne.n	8003134 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <TIM_Base_SetConfig+0x114>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d003      	beq.n	8003168 <TIM_Base_SetConfig+0xf8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a0c      	ldr	r2, [pc, #48]	; (8003194 <TIM_Base_SetConfig+0x124>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d103      	bne.n	8003170 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	615a      	str	r2, [r3, #20]
}
 8003176:	bf00      	nop
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40010000 	.word	0x40010000
 8003188:	40000400 	.word	0x40000400
 800318c:	40000800 	.word	0x40000800
 8003190:	40000c00 	.word	0x40000c00
 8003194:	40010400 	.word	0x40010400
 8003198:	40014000 	.word	0x40014000
 800319c:	40014400 	.word	0x40014400
 80031a0:	40014800 	.word	0x40014800
 80031a4:	40001800 	.word	0x40001800
 80031a8:	40001c00 	.word	0x40001c00
 80031ac:	40002000 	.word	0x40002000

080031b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	f023 0201 	bic.w	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0303 	bic.w	r3, r3, #3
 80031e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f023 0302 	bic.w	r3, r3, #2
 80031f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a20      	ldr	r2, [pc, #128]	; (8003288 <TIM_OC1_SetConfig+0xd8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d003      	beq.n	8003214 <TIM_OC1_SetConfig+0x64>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a1f      	ldr	r2, [pc, #124]	; (800328c <TIM_OC1_SetConfig+0xdc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d10c      	bne.n	800322e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f023 0308 	bic.w	r3, r3, #8
 800321a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	4313      	orrs	r3, r2
 8003224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a15      	ldr	r2, [pc, #84]	; (8003288 <TIM_OC1_SetConfig+0xd8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d003      	beq.n	800323e <TIM_OC1_SetConfig+0x8e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a14      	ldr	r2, [pc, #80]	; (800328c <TIM_OC1_SetConfig+0xdc>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d111      	bne.n	8003262 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800324c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	621a      	str	r2, [r3, #32]
}
 800327c:	bf00      	nop
 800327e:	371c      	adds	r7, #28
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	40010000 	.word	0x40010000
 800328c:	40010400 	.word	0x40010400

08003290 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	f023 0210 	bic.w	r2, r3, #16
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	021b      	lsls	r3, r3, #8
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f023 0320 	bic.w	r3, r3, #32
 80032da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a22      	ldr	r2, [pc, #136]	; (8003374 <TIM_OC2_SetConfig+0xe4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d003      	beq.n	80032f8 <TIM_OC2_SetConfig+0x68>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a21      	ldr	r2, [pc, #132]	; (8003378 <TIM_OC2_SetConfig+0xe8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d10d      	bne.n	8003314 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003312:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a17      	ldr	r2, [pc, #92]	; (8003374 <TIM_OC2_SetConfig+0xe4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d003      	beq.n	8003324 <TIM_OC2_SetConfig+0x94>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a16      	ldr	r2, [pc, #88]	; (8003378 <TIM_OC2_SetConfig+0xe8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d113      	bne.n	800334c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800332a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003332:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	621a      	str	r2, [r3, #32]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40010000 	.word	0x40010000
 8003378:	40010400 	.word	0x40010400

0800337c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0303 	bic.w	r3, r3, #3
 80033b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	021b      	lsls	r3, r3, #8
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a21      	ldr	r2, [pc, #132]	; (800345c <TIM_OC3_SetConfig+0xe0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d003      	beq.n	80033e2 <TIM_OC3_SetConfig+0x66>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a20      	ldr	r2, [pc, #128]	; (8003460 <TIM_OC3_SetConfig+0xe4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10d      	bne.n	80033fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a16      	ldr	r2, [pc, #88]	; (800345c <TIM_OC3_SetConfig+0xe0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d003      	beq.n	800340e <TIM_OC3_SetConfig+0x92>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a15      	ldr	r2, [pc, #84]	; (8003460 <TIM_OC3_SetConfig+0xe4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d113      	bne.n	8003436 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800341c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	621a      	str	r2, [r3, #32]
}
 8003450:	bf00      	nop
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	40010000 	.word	0x40010000
 8003460:	40010400 	.word	0x40010400

08003464 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800349a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	031b      	lsls	r3, r3, #12
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a12      	ldr	r2, [pc, #72]	; (8003508 <TIM_OC4_SetConfig+0xa4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d003      	beq.n	80034cc <TIM_OC4_SetConfig+0x68>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a11      	ldr	r2, [pc, #68]	; (800350c <TIM_OC4_SetConfig+0xa8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d109      	bne.n	80034e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	019b      	lsls	r3, r3, #6
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40010000 	.word	0x40010000
 800350c:	40010400 	.word	0x40010400

08003510 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f023 0307 	bic.w	r3, r3, #7
 800353e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b70      	cmp	r3, #112	; 0x70
 8003558:	d01a      	beq.n	8003590 <TIM_SlaveTimer_SetConfig+0x80>
 800355a:	2b70      	cmp	r3, #112	; 0x70
 800355c:	d860      	bhi.n	8003620 <TIM_SlaveTimer_SetConfig+0x110>
 800355e:	2b60      	cmp	r3, #96	; 0x60
 8003560:	d054      	beq.n	800360c <TIM_SlaveTimer_SetConfig+0xfc>
 8003562:	2b60      	cmp	r3, #96	; 0x60
 8003564:	d85c      	bhi.n	8003620 <TIM_SlaveTimer_SetConfig+0x110>
 8003566:	2b50      	cmp	r3, #80	; 0x50
 8003568:	d046      	beq.n	80035f8 <TIM_SlaveTimer_SetConfig+0xe8>
 800356a:	2b50      	cmp	r3, #80	; 0x50
 800356c:	d858      	bhi.n	8003620 <TIM_SlaveTimer_SetConfig+0x110>
 800356e:	2b40      	cmp	r3, #64	; 0x40
 8003570:	d019      	beq.n	80035a6 <TIM_SlaveTimer_SetConfig+0x96>
 8003572:	2b40      	cmp	r3, #64	; 0x40
 8003574:	d854      	bhi.n	8003620 <TIM_SlaveTimer_SetConfig+0x110>
 8003576:	2b30      	cmp	r3, #48	; 0x30
 8003578:	d055      	beq.n	8003626 <TIM_SlaveTimer_SetConfig+0x116>
 800357a:	2b30      	cmp	r3, #48	; 0x30
 800357c:	d850      	bhi.n	8003620 <TIM_SlaveTimer_SetConfig+0x110>
 800357e:	2b20      	cmp	r3, #32
 8003580:	d051      	beq.n	8003626 <TIM_SlaveTimer_SetConfig+0x116>
 8003582:	2b20      	cmp	r3, #32
 8003584:	d84c      	bhi.n	8003620 <TIM_SlaveTimer_SetConfig+0x110>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d04d      	beq.n	8003626 <TIM_SlaveTimer_SetConfig+0x116>
 800358a:	2b10      	cmp	r3, #16
 800358c:	d04b      	beq.n	8003626 <TIM_SlaveTimer_SetConfig+0x116>
 800358e:	e047      	b.n	8003620 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68d9      	ldr	r1, [r3, #12]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f000 f8c1 	bl	8003726 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80035a4:	e040      	b.n	8003628 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b05      	cmp	r3, #5
 80035ac:	d101      	bne.n	80035b2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e03b      	b.n	800362a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6a1a      	ldr	r2, [r3, #32]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0201 	bic.w	r2, r2, #1
 80035c8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035d8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	621a      	str	r2, [r3, #32]
      break;
 80035f6:	e017      	b.n	8003628 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	6899      	ldr	r1, [r3, #8]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	461a      	mov	r2, r3
 8003606:	f000 f814 	bl	8003632 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800360a:	e00d      	b.n	8003628 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	6899      	ldr	r1, [r3, #8]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	461a      	mov	r2, r3
 800361a:	f000 f839 	bl	8003690 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800361e:	e003      	b.n	8003628 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	75fb      	strb	r3, [r7, #23]
      break;
 8003624:	e000      	b.n	8003628 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003626:	bf00      	nop
  }

  return status;
 8003628:	7dfb      	ldrb	r3, [r7, #23]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003632:	b480      	push	{r7}
 8003634:	b087      	sub	sp, #28
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f023 0201 	bic.w	r2, r3, #1
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800365c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f023 030a 	bic.w	r3, r3, #10
 800366e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	621a      	str	r2, [r3, #32]
}
 8003684:	bf00      	nop
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f023 0210 	bic.w	r2, r3, #16
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	031b      	lsls	r3, r3, #12
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	621a      	str	r2, [r3, #32]
}
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003706:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	f043 0307 	orr.w	r3, r3, #7
 8003712:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	609a      	str	r2, [r3, #8]
}
 800371a:	bf00      	nop
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003726:	b480      	push	{r7}
 8003728:	b087      	sub	sp, #28
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003740:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	021a      	lsls	r2, r3, #8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	431a      	orrs	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	4313      	orrs	r3, r2
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	609a      	str	r2, [r3, #8]
}
 800375a:	bf00      	nop
 800375c:	371c      	adds	r7, #28
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
	...

08003768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800377c:	2302      	movs	r3, #2
 800377e:	e05a      	b.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a21      	ldr	r2, [pc, #132]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d022      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037cc:	d01d      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1d      	ldr	r2, [pc, #116]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d018      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1b      	ldr	r2, [pc, #108]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1a      	ldr	r2, [pc, #104]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00e      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a18      	ldr	r2, [pc, #96]	; (8003854 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d009      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a17      	ldr	r2, [pc, #92]	; (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d004      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a15      	ldr	r2, [pc, #84]	; (800385c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d10c      	bne.n	8003824 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	4313      	orrs	r3, r2
 800381a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40010000 	.word	0x40010000
 8003848:	40000400 	.word	0x40000400
 800384c:	40000800 	.word	0x40000800
 8003850:	40000c00 	.word	0x40000c00
 8003854:	40010400 	.word	0x40010400
 8003858:	40014000 	.word	0x40014000
 800385c:	40001800 	.word	0x40001800

08003860 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e03f      	b.n	800391a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7fd fc9e 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2224      	movs	r2, #36	; 0x24
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fddb 	bl	8004488 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003900:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b08a      	sub	sp, #40	; 0x28
 8003926:	af02      	add	r7, sp, #8
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	4613      	mov	r3, r2
 8003930:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b20      	cmp	r3, #32
 8003940:	d17c      	bne.n	8003a3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <HAL_UART_Transmit+0x2c>
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e075      	b.n	8003a3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_UART_Transmit+0x3e>
 800395c:	2302      	movs	r3, #2
 800395e:	e06e      	b.n	8003a3e <HAL_UART_Transmit+0x11c>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2221      	movs	r2, #33	; 0x21
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003976:	f7fd feb1 	bl	80016dc <HAL_GetTick>
 800397a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	88fa      	ldrh	r2, [r7, #6]
 8003980:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	88fa      	ldrh	r2, [r7, #6]
 8003986:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003990:	d108      	bne.n	80039a4 <HAL_UART_Transmit+0x82>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d104      	bne.n	80039a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800399a:	2300      	movs	r3, #0
 800399c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	e003      	b.n	80039ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039b4:	e02a      	b.n	8003a0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2200      	movs	r2, #0
 80039be:	2180      	movs	r1, #128	; 0x80
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 fb1f 	bl	8004004 <UART_WaitOnFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e036      	b.n	8003a3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10b      	bne.n	80039ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	3302      	adds	r3, #2
 80039ea:	61bb      	str	r3, [r7, #24]
 80039ec:	e007      	b.n	80039fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	781a      	ldrb	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	3301      	adds	r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1cf      	bne.n	80039b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2140      	movs	r1, #64	; 0x40
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 faef 	bl	8004004 <UART_WaitOnFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e006      	b.n	8003a3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e000      	b.n	8003a3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
  }
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3720      	adds	r7, #32
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	4613      	mov	r3, r2
 8003a52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d11d      	bne.n	8003a9c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <HAL_UART_Receive_IT+0x26>
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e016      	b.n	8003a9e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_UART_Receive_IT+0x38>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e00f      	b.n	8003a9e <HAL_UART_Receive_IT+0x58>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a8c:	88fb      	ldrh	r3, [r7, #6]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 fb24 	bl	80040e0 <UART_Start_Receive_IT>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	e000      	b.n	8003a9e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
  }
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b0ba      	sub	sp, #232	; 0xe8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10f      	bne.n	8003b0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <HAL_UART_IRQHandler+0x66>
 8003afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fc03 	bl	8004312 <UART_Receive_IT>
      return;
 8003b0c:	e256      	b.n	8003fbc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 80de 	beq.w	8003cd4 <HAL_UART_IRQHandler+0x22c>
 8003b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d106      	bne.n	8003b32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80d1 	beq.w	8003cd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <HAL_UART_IRQHandler+0xae>
 8003b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f043 0201 	orr.w	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <HAL_UART_IRQHandler+0xd2>
 8003b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f043 0202 	orr.w	r2, r3, #2
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00b      	beq.n	8003b9e <HAL_UART_IRQHandler+0xf6>
 8003b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f043 0204 	orr.w	r2, r3, #4
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d011      	beq.n	8003bce <HAL_UART_IRQHandler+0x126>
 8003baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d105      	bne.n	8003bc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f043 0208 	orr.w	r2, r3, #8
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 81ed 	beq.w	8003fb2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x14e>
 8003be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 fb8e 	bl	8004312 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c00:	2b40      	cmp	r3, #64	; 0x40
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d103      	bne.n	8003c22 <HAL_UART_IRQHandler+0x17a>
 8003c1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d04f      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 fa96 	bl	8004154 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c32:	2b40      	cmp	r3, #64	; 0x40
 8003c34:	d141      	bne.n	8003cba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3314      	adds	r3, #20
 8003c3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3314      	adds	r3, #20
 8003c5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c72:	e841 2300 	strex	r3, r2, [r1]
 8003c76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1d9      	bne.n	8003c36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d013      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	4a7d      	ldr	r2, [pc, #500]	; (8003e84 <HAL_UART_IRQHandler+0x3dc>)
 8003c90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fd fea2 	bl	80019e0 <HAL_DMA_Abort_IT>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d016      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cac:	4610      	mov	r0, r2
 8003cae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb0:	e00e      	b.n	8003cd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f990 	bl	8003fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb8:	e00a      	b.n	8003cd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f98c 	bl	8003fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc0:	e006      	b.n	8003cd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f988 	bl	8003fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003cce:	e170      	b.n	8003fb2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd0:	bf00      	nop
    return;
 8003cd2:	e16e      	b.n	8003fb2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	f040 814a 	bne.w	8003f72 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce2:	f003 0310 	and.w	r3, r3, #16
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 8143 	beq.w	8003f72 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf0:	f003 0310 	and.w	r3, r3, #16
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 813c 	beq.w	8003f72 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1a:	2b40      	cmp	r3, #64	; 0x40
 8003d1c:	f040 80b4 	bne.w	8003e88 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8140 	beq.w	8003fb6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	f080 8139 	bcs.w	8003fb6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d56:	f000 8088 	beq.w	8003e6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	330c      	adds	r3, #12
 8003d60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	330c      	adds	r3, #12
 8003d82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1d9      	bne.n	8003d5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3314      	adds	r3, #20
 8003dac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003dce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003dd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e1      	bne.n	8003da6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3314      	adds	r3, #20
 8003de8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003df8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3314      	adds	r3, #20
 8003e02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e3      	bne.n	8003de2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	330c      	adds	r3, #12
 8003e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e3a:	f023 0310 	bic.w	r3, r3, #16
 8003e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	330c      	adds	r3, #12
 8003e48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e54:	e841 2300 	strex	r3, r2, [r1]
 8003e58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e3      	bne.n	8003e28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fd fd4b 	bl	8001900 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	4619      	mov	r1, r3
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f8b6 	bl	8003fec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e80:	e099      	b.n	8003fb6 <HAL_UART_IRQHandler+0x50e>
 8003e82:	bf00      	nop
 8003e84:	0800421b 	.word	0x0800421b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 808b 	beq.w	8003fba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003ea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8086 	beq.w	8003fba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	330c      	adds	r3, #12
 8003eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	330c      	adds	r3, #12
 8003ece:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ed2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ed4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ed8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e3      	bne.n	8003eae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3314      	adds	r3, #20
 8003f06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f0a:	633a      	str	r2, [r7, #48]	; 0x30
 8003f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e3      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0310 	bic.w	r3, r3, #16
 8003f42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f50:	61fa      	str	r2, [r7, #28]
 8003f52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	69b9      	ldr	r1, [r7, #24]
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e3      	bne.n	8003f2c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f68:	4619      	mov	r1, r3
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f83e 	bl	8003fec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f70:	e023      	b.n	8003fba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_UART_IRQHandler+0x4ea>
 8003f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f959 	bl	8004242 <UART_Transmit_IT>
    return;
 8003f90:	e014      	b.n	8003fbc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00e      	beq.n	8003fbc <HAL_UART_IRQHandler+0x514>
 8003f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d008      	beq.n	8003fbc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f999 	bl	80042e2 <UART_EndTransmit_IT>
    return;
 8003fb0:	e004      	b.n	8003fbc <HAL_UART_IRQHandler+0x514>
    return;
 8003fb2:	bf00      	nop
 8003fb4:	e002      	b.n	8003fbc <HAL_UART_IRQHandler+0x514>
      return;
 8003fb6:	bf00      	nop
 8003fb8:	e000      	b.n	8003fbc <HAL_UART_IRQHandler+0x514>
      return;
 8003fba:	bf00      	nop
  }
}
 8003fbc:	37e8      	adds	r7, #232	; 0xe8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop

08003fc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b090      	sub	sp, #64	; 0x40
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004014:	e050      	b.n	80040b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401c:	d04c      	beq.n	80040b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800401e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <UART_WaitOnFlagUntilTimeout+0x30>
 8004024:	f7fd fb5a 	bl	80016dc <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004030:	429a      	cmp	r2, r3
 8004032:	d241      	bcs.n	80040b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800404a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	330c      	adds	r3, #12
 8004052:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004054:	637a      	str	r2, [r7, #52]	; 0x34
 8004056:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800405a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e5      	bne.n	8004034 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3314      	adds	r3, #20
 800406e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	613b      	str	r3, [r7, #16]
   return(result);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f023 0301 	bic.w	r3, r3, #1
 800407e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3314      	adds	r3, #20
 8004086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004088:	623a      	str	r2, [r7, #32]
 800408a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	69f9      	ldr	r1, [r7, #28]
 800408e:	6a3a      	ldr	r2, [r7, #32]
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	61bb      	str	r3, [r7, #24]
   return(result);
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e5      	bne.n	8004068 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e00f      	b.n	80040d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	4013      	ands	r3, r2
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	bf0c      	ite	eq
 80040c8:	2301      	moveq	r3, #1
 80040ca:	2300      	movne	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d09f      	beq.n	8004016 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3740      	adds	r7, #64	; 0x40
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	4613      	mov	r3, r2
 80040ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	88fa      	ldrh	r2, [r7, #6]
 80040f8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	88fa      	ldrh	r2, [r7, #6]
 80040fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2222      	movs	r2, #34	; 0x22
 800410a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004124:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0201 	orr.w	r2, r2, #1
 8004134:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0220 	orr.w	r2, r2, #32
 8004144:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004154:	b480      	push	{r7}
 8004156:	b095      	sub	sp, #84	; 0x54
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800417c:	643a      	str	r2, [r7, #64]	; 0x40
 800417e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004182:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800418a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e5      	bne.n	800415c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3314      	adds	r3, #20
 8004196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	61fb      	str	r3, [r7, #28]
   return(result);
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3314      	adds	r3, #20
 80041ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e5      	bne.n	8004190 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d119      	bne.n	8004200 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	330c      	adds	r3, #12
 80041d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	60bb      	str	r3, [r7, #8]
   return(result);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f023 0310 	bic.w	r3, r3, #16
 80041e2:	647b      	str	r3, [r7, #68]	; 0x44
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	330c      	adds	r3, #12
 80041ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ec:	61ba      	str	r2, [r7, #24]
 80041ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	6979      	ldr	r1, [r7, #20]
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	613b      	str	r3, [r7, #16]
   return(result);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e5      	bne.n	80041cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800420e:	bf00      	nop
 8004210:	3754      	adds	r7, #84	; 0x54
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f7ff fecf 	bl	8003fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800423a:	bf00      	nop
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004242:	b480      	push	{r7}
 8004244:	b085      	sub	sp, #20
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b21      	cmp	r3, #33	; 0x21
 8004254:	d13e      	bne.n	80042d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425e:	d114      	bne.n	800428a <UART_Transmit_IT+0x48>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d110      	bne.n	800428a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800427c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	1c9a      	adds	r2, r3, #2
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	621a      	str	r2, [r3, #32]
 8004288:	e008      	b.n	800429c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	1c59      	adds	r1, r3, #1
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6211      	str	r1, [r2, #32]
 8004294:	781a      	ldrb	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	4619      	mov	r1, r3
 80042aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10f      	bne.n	80042d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e000      	b.n	80042d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff fe5e 	bl	8003fc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b08c      	sub	sp, #48	; 0x30
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b22      	cmp	r3, #34	; 0x22
 8004324:	f040 80ab 	bne.w	800447e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004330:	d117      	bne.n	8004362 <UART_Receive_IT+0x50>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d113      	bne.n	8004362 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800433a:	2300      	movs	r3, #0
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	b29b      	uxth	r3, r3
 800434c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004350:	b29a      	uxth	r2, r3
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435a:	1c9a      	adds	r2, r3, #2
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	629a      	str	r2, [r3, #40]	; 0x28
 8004360:	e026      	b.n	80043b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004366:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004368:	2300      	movs	r3, #0
 800436a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004374:	d007      	beq.n	8004386 <UART_Receive_IT+0x74>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10a      	bne.n	8004394 <UART_Receive_IT+0x82>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	b2da      	uxtb	r2, r3
 800438e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004390:	701a      	strb	r2, [r3, #0]
 8004392:	e008      	b.n	80043a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	4619      	mov	r1, r3
 80043be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d15a      	bne.n	800447a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0220 	bic.w	r2, r2, #32
 80043d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004400:	2b01      	cmp	r3, #1
 8004402:	d135      	bne.n	8004470 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	330c      	adds	r3, #12
 8004410:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	613b      	str	r3, [r7, #16]
   return(result);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f023 0310 	bic.w	r3, r3, #16
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	330c      	adds	r3, #12
 8004428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442a:	623a      	str	r2, [r7, #32]
 800442c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442e:	69f9      	ldr	r1, [r7, #28]
 8004430:	6a3a      	ldr	r2, [r7, #32]
 8004432:	e841 2300 	strex	r3, r2, [r1]
 8004436:	61bb      	str	r3, [r7, #24]
   return(result);
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1e5      	bne.n	800440a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	2b10      	cmp	r3, #16
 800444a:	d10a      	bne.n	8004462 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004466:	4619      	mov	r1, r3
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7ff fdbf 	bl	8003fec <HAL_UARTEx_RxEventCallback>
 800446e:	e002      	b.n	8004476 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f002 ff93 	bl	800739c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	e002      	b.n	8004480 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	e000      	b.n	8004480 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800447e:	2302      	movs	r3, #2
  }
}
 8004480:	4618      	mov	r0, r3
 8004482:	3730      	adds	r7, #48	; 0x30
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448c:	b09f      	sub	sp, #124	; 0x7c
 800448e:	af00      	add	r7, sp, #0
 8004490:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800449c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449e:	68d9      	ldr	r1, [r3, #12]
 80044a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	ea40 0301 	orr.w	r3, r0, r1
 80044a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	4313      	orrs	r3, r2
 80044c0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80044c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044cc:	f021 010c 	bic.w	r1, r1, #12
 80044d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044d6:	430b      	orrs	r3, r1
 80044d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e6:	6999      	ldr	r1, [r3, #24]
 80044e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	ea40 0301 	orr.w	r3, r0, r1
 80044f0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	4bc5      	ldr	r3, [pc, #788]	; (800480c <UART_SetConfig+0x384>)
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d004      	beq.n	8004506 <UART_SetConfig+0x7e>
 80044fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	4bc3      	ldr	r3, [pc, #780]	; (8004810 <UART_SetConfig+0x388>)
 8004502:	429a      	cmp	r2, r3
 8004504:	d103      	bne.n	800450e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004506:	f7fe f8ef 	bl	80026e8 <HAL_RCC_GetPCLK2Freq>
 800450a:	6778      	str	r0, [r7, #116]	; 0x74
 800450c:	e002      	b.n	8004514 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800450e:	f7fe f8d7 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 8004512:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800451c:	f040 80b6 	bne.w	800468c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004522:	461c      	mov	r4, r3
 8004524:	f04f 0500 	mov.w	r5, #0
 8004528:	4622      	mov	r2, r4
 800452a:	462b      	mov	r3, r5
 800452c:	1891      	adds	r1, r2, r2
 800452e:	6439      	str	r1, [r7, #64]	; 0x40
 8004530:	415b      	adcs	r3, r3
 8004532:	647b      	str	r3, [r7, #68]	; 0x44
 8004534:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004538:	1912      	adds	r2, r2, r4
 800453a:	eb45 0303 	adc.w	r3, r5, r3
 800453e:	f04f 0000 	mov.w	r0, #0
 8004542:	f04f 0100 	mov.w	r1, #0
 8004546:	00d9      	lsls	r1, r3, #3
 8004548:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800454c:	00d0      	lsls	r0, r2, #3
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	1911      	adds	r1, r2, r4
 8004554:	6639      	str	r1, [r7, #96]	; 0x60
 8004556:	416b      	adcs	r3, r5
 8004558:	667b      	str	r3, [r7, #100]	; 0x64
 800455a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	461a      	mov	r2, r3
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	1891      	adds	r1, r2, r2
 8004566:	63b9      	str	r1, [r7, #56]	; 0x38
 8004568:	415b      	adcs	r3, r3
 800456a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800456c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004570:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004574:	f7fb fe8c 	bl	8000290 <__aeabi_uldivmod>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4ba5      	ldr	r3, [pc, #660]	; (8004814 <UART_SetConfig+0x38c>)
 800457e:	fba3 2302 	umull	r2, r3, r3, r2
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	011e      	lsls	r6, r3, #4
 8004586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004588:	461c      	mov	r4, r3
 800458a:	f04f 0500 	mov.w	r5, #0
 800458e:	4622      	mov	r2, r4
 8004590:	462b      	mov	r3, r5
 8004592:	1891      	adds	r1, r2, r2
 8004594:	6339      	str	r1, [r7, #48]	; 0x30
 8004596:	415b      	adcs	r3, r3
 8004598:	637b      	str	r3, [r7, #52]	; 0x34
 800459a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800459e:	1912      	adds	r2, r2, r4
 80045a0:	eb45 0303 	adc.w	r3, r5, r3
 80045a4:	f04f 0000 	mov.w	r0, #0
 80045a8:	f04f 0100 	mov.w	r1, #0
 80045ac:	00d9      	lsls	r1, r3, #3
 80045ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045b2:	00d0      	lsls	r0, r2, #3
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	1911      	adds	r1, r2, r4
 80045ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80045bc:	416b      	adcs	r3, r5
 80045be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	461a      	mov	r2, r3
 80045c6:	f04f 0300 	mov.w	r3, #0
 80045ca:	1891      	adds	r1, r2, r2
 80045cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80045ce:	415b      	adcs	r3, r3
 80045d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80045da:	f7fb fe59 	bl	8000290 <__aeabi_uldivmod>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4b8c      	ldr	r3, [pc, #560]	; (8004814 <UART_SetConfig+0x38c>)
 80045e4:	fba3 1302 	umull	r1, r3, r3, r2
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	2164      	movs	r1, #100	; 0x64
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	3332      	adds	r3, #50	; 0x32
 80045f6:	4a87      	ldr	r2, [pc, #540]	; (8004814 <UART_SetConfig+0x38c>)
 80045f8:	fba2 2303 	umull	r2, r3, r2, r3
 80045fc:	095b      	lsrs	r3, r3, #5
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004604:	441e      	add	r6, r3
 8004606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004608:	4618      	mov	r0, r3
 800460a:	f04f 0100 	mov.w	r1, #0
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	1894      	adds	r4, r2, r2
 8004614:	623c      	str	r4, [r7, #32]
 8004616:	415b      	adcs	r3, r3
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
 800461a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800461e:	1812      	adds	r2, r2, r0
 8004620:	eb41 0303 	adc.w	r3, r1, r3
 8004624:	f04f 0400 	mov.w	r4, #0
 8004628:	f04f 0500 	mov.w	r5, #0
 800462c:	00dd      	lsls	r5, r3, #3
 800462e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004632:	00d4      	lsls	r4, r2, #3
 8004634:	4622      	mov	r2, r4
 8004636:	462b      	mov	r3, r5
 8004638:	1814      	adds	r4, r2, r0
 800463a:	653c      	str	r4, [r7, #80]	; 0x50
 800463c:	414b      	adcs	r3, r1
 800463e:	657b      	str	r3, [r7, #84]	; 0x54
 8004640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	461a      	mov	r2, r3
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	1891      	adds	r1, r2, r2
 800464c:	61b9      	str	r1, [r7, #24]
 800464e:	415b      	adcs	r3, r3
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004656:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800465a:	f7fb fe19 	bl	8000290 <__aeabi_uldivmod>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4b6c      	ldr	r3, [pc, #432]	; (8004814 <UART_SetConfig+0x38c>)
 8004664:	fba3 1302 	umull	r1, r3, r3, r2
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	2164      	movs	r1, #100	; 0x64
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	3332      	adds	r3, #50	; 0x32
 8004676:	4a67      	ldr	r2, [pc, #412]	; (8004814 <UART_SetConfig+0x38c>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	f003 0207 	and.w	r2, r3, #7
 8004682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4432      	add	r2, r6
 8004688:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800468a:	e0b9      	b.n	8004800 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800468c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800468e:	461c      	mov	r4, r3
 8004690:	f04f 0500 	mov.w	r5, #0
 8004694:	4622      	mov	r2, r4
 8004696:	462b      	mov	r3, r5
 8004698:	1891      	adds	r1, r2, r2
 800469a:	6139      	str	r1, [r7, #16]
 800469c:	415b      	adcs	r3, r3
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046a4:	1912      	adds	r2, r2, r4
 80046a6:	eb45 0303 	adc.w	r3, r5, r3
 80046aa:	f04f 0000 	mov.w	r0, #0
 80046ae:	f04f 0100 	mov.w	r1, #0
 80046b2:	00d9      	lsls	r1, r3, #3
 80046b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046b8:	00d0      	lsls	r0, r2, #3
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	eb12 0804 	adds.w	r8, r2, r4
 80046c2:	eb43 0905 	adc.w	r9, r3, r5
 80046c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f04f 0100 	mov.w	r1, #0
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	008b      	lsls	r3, r1, #2
 80046da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046de:	0082      	lsls	r2, r0, #2
 80046e0:	4640      	mov	r0, r8
 80046e2:	4649      	mov	r1, r9
 80046e4:	f7fb fdd4 	bl	8000290 <__aeabi_uldivmod>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4b49      	ldr	r3, [pc, #292]	; (8004814 <UART_SetConfig+0x38c>)
 80046ee:	fba3 2302 	umull	r2, r3, r3, r2
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	011e      	lsls	r6, r3, #4
 80046f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046f8:	4618      	mov	r0, r3
 80046fa:	f04f 0100 	mov.w	r1, #0
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	1894      	adds	r4, r2, r2
 8004704:	60bc      	str	r4, [r7, #8]
 8004706:	415b      	adcs	r3, r3
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800470e:	1812      	adds	r2, r2, r0
 8004710:	eb41 0303 	adc.w	r3, r1, r3
 8004714:	f04f 0400 	mov.w	r4, #0
 8004718:	f04f 0500 	mov.w	r5, #0
 800471c:	00dd      	lsls	r5, r3, #3
 800471e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004722:	00d4      	lsls	r4, r2, #3
 8004724:	4622      	mov	r2, r4
 8004726:	462b      	mov	r3, r5
 8004728:	1814      	adds	r4, r2, r0
 800472a:	64bc      	str	r4, [r7, #72]	; 0x48
 800472c:	414b      	adcs	r3, r1
 800472e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	4618      	mov	r0, r3
 8004736:	f04f 0100 	mov.w	r1, #0
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	008b      	lsls	r3, r1, #2
 8004744:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004748:	0082      	lsls	r2, r0, #2
 800474a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800474e:	f7fb fd9f 	bl	8000290 <__aeabi_uldivmod>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4b2f      	ldr	r3, [pc, #188]	; (8004814 <UART_SetConfig+0x38c>)
 8004758:	fba3 1302 	umull	r1, r3, r3, r2
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	2164      	movs	r1, #100	; 0x64
 8004760:	fb01 f303 	mul.w	r3, r1, r3
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	3332      	adds	r3, #50	; 0x32
 800476a:	4a2a      	ldr	r2, [pc, #168]	; (8004814 <UART_SetConfig+0x38c>)
 800476c:	fba2 2303 	umull	r2, r3, r2, r3
 8004770:	095b      	lsrs	r3, r3, #5
 8004772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004776:	441e      	add	r6, r3
 8004778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800477a:	4618      	mov	r0, r3
 800477c:	f04f 0100 	mov.w	r1, #0
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	1894      	adds	r4, r2, r2
 8004786:	603c      	str	r4, [r7, #0]
 8004788:	415b      	adcs	r3, r3
 800478a:	607b      	str	r3, [r7, #4]
 800478c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004790:	1812      	adds	r2, r2, r0
 8004792:	eb41 0303 	adc.w	r3, r1, r3
 8004796:	f04f 0400 	mov.w	r4, #0
 800479a:	f04f 0500 	mov.w	r5, #0
 800479e:	00dd      	lsls	r5, r3, #3
 80047a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047a4:	00d4      	lsls	r4, r2, #3
 80047a6:	4622      	mov	r2, r4
 80047a8:	462b      	mov	r3, r5
 80047aa:	eb12 0a00 	adds.w	sl, r2, r0
 80047ae:	eb43 0b01 	adc.w	fp, r3, r1
 80047b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f04f 0100 	mov.w	r1, #0
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	008b      	lsls	r3, r1, #2
 80047c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047ca:	0082      	lsls	r2, r0, #2
 80047cc:	4650      	mov	r0, sl
 80047ce:	4659      	mov	r1, fp
 80047d0:	f7fb fd5e 	bl	8000290 <__aeabi_uldivmod>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <UART_SetConfig+0x38c>)
 80047da:	fba3 1302 	umull	r1, r3, r3, r2
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	2164      	movs	r1, #100	; 0x64
 80047e2:	fb01 f303 	mul.w	r3, r1, r3
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	3332      	adds	r3, #50	; 0x32
 80047ec:	4a09      	ldr	r2, [pc, #36]	; (8004814 <UART_SetConfig+0x38c>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	f003 020f 	and.w	r2, r3, #15
 80047f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4432      	add	r2, r6
 80047fe:	609a      	str	r2, [r3, #8]
}
 8004800:	bf00      	nop
 8004802:	377c      	adds	r7, #124	; 0x7c
 8004804:	46bd      	mov	sp, r7
 8004806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800480a:	bf00      	nop
 800480c:	40011000 	.word	0x40011000
 8004810:	40011400 	.word	0x40011400
 8004814:	51eb851f 	.word	0x51eb851f

08004818 <__NVIC_SetPriority>:
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	6039      	str	r1, [r7, #0]
 8004822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004828:	2b00      	cmp	r3, #0
 800482a:	db0a      	blt.n	8004842 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	b2da      	uxtb	r2, r3
 8004830:	490c      	ldr	r1, [pc, #48]	; (8004864 <__NVIC_SetPriority+0x4c>)
 8004832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004836:	0112      	lsls	r2, r2, #4
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	440b      	add	r3, r1
 800483c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004840:	e00a      	b.n	8004858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	b2da      	uxtb	r2, r3
 8004846:	4908      	ldr	r1, [pc, #32]	; (8004868 <__NVIC_SetPriority+0x50>)
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	3b04      	subs	r3, #4
 8004850:	0112      	lsls	r2, r2, #4
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	440b      	add	r3, r1
 8004856:	761a      	strb	r2, [r3, #24]
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	e000e100 	.word	0xe000e100
 8004868:	e000ed00 	.word	0xe000ed00

0800486c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <SysTick_Handler+0x1c>)
 8004872:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004874:	f001 fd28 	bl	80062c8 <xTaskGetSchedulerState>
 8004878:	4603      	mov	r3, r0
 800487a:	2b01      	cmp	r3, #1
 800487c:	d001      	beq.n	8004882 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800487e:	f002 fb13 	bl	8006ea8 <xPortSysTickHandler>
  }
}
 8004882:	bf00      	nop
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	e000e010 	.word	0xe000e010

0800488c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004890:	2100      	movs	r1, #0
 8004892:	f06f 0004 	mvn.w	r0, #4
 8004896:	f7ff ffbf 	bl	8004818 <__NVIC_SetPriority>
#endif
}
 800489a:	bf00      	nop
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048a6:	f3ef 8305 	mrs	r3, IPSR
 80048aa:	603b      	str	r3, [r7, #0]
  return(result);
 80048ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80048b2:	f06f 0305 	mvn.w	r3, #5
 80048b6:	607b      	str	r3, [r7, #4]
 80048b8:	e00c      	b.n	80048d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80048ba:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <osKernelInitialize+0x44>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d105      	bne.n	80048ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80048c2:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <osKernelInitialize+0x44>)
 80048c4:	2201      	movs	r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	607b      	str	r3, [r7, #4]
 80048cc:	e002      	b.n	80048d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80048ce:	f04f 33ff 	mov.w	r3, #4294967295
 80048d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80048d4:	687b      	ldr	r3, [r7, #4]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	20000120 	.word	0x20000120

080048e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ee:	f3ef 8305 	mrs	r3, IPSR
 80048f2:	603b      	str	r3, [r7, #0]
  return(result);
 80048f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <osKernelStart+0x1a>
    stat = osErrorISR;
 80048fa:	f06f 0305 	mvn.w	r3, #5
 80048fe:	607b      	str	r3, [r7, #4]
 8004900:	e010      	b.n	8004924 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004902:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <osKernelStart+0x48>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d109      	bne.n	800491e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800490a:	f7ff ffbf 	bl	800488c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800490e:	4b08      	ldr	r3, [pc, #32]	; (8004930 <osKernelStart+0x48>)
 8004910:	2202      	movs	r2, #2
 8004912:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004914:	f001 f87c 	bl	8005a10 <vTaskStartScheduler>
      stat = osOK;
 8004918:	2300      	movs	r3, #0
 800491a:	607b      	str	r3, [r7, #4]
 800491c:	e002      	b.n	8004924 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800491e:	f04f 33ff 	mov.w	r3, #4294967295
 8004922:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004924:	687b      	ldr	r3, [r7, #4]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000120 	.word	0x20000120

08004934 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004934:	b580      	push	{r7, lr}
 8004936:	b08e      	sub	sp, #56	; 0x38
 8004938:	af04      	add	r7, sp, #16
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004940:	2300      	movs	r3, #0
 8004942:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004944:	f3ef 8305 	mrs	r3, IPSR
 8004948:	617b      	str	r3, [r7, #20]
  return(result);
 800494a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800494c:	2b00      	cmp	r3, #0
 800494e:	d17e      	bne.n	8004a4e <osThreadNew+0x11a>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d07b      	beq.n	8004a4e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004956:	2380      	movs	r3, #128	; 0x80
 8004958:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800495a:	2318      	movs	r3, #24
 800495c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800495e:	2300      	movs	r3, #0
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004962:	f04f 33ff 	mov.w	r3, #4294967295
 8004966:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d045      	beq.n	80049fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <osThreadNew+0x48>
        name = attr->name;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <osThreadNew+0x6e>
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	2b38      	cmp	r3, #56	; 0x38
 8004994:	d805      	bhi.n	80049a2 <osThreadNew+0x6e>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <osThreadNew+0x72>
        return (NULL);
 80049a2:	2300      	movs	r3, #0
 80049a4:	e054      	b.n	8004a50 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	089b      	lsrs	r3, r3, #2
 80049b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00e      	beq.n	80049dc <osThreadNew+0xa8>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	2bbb      	cmp	r3, #187	; 0xbb
 80049c4:	d90a      	bls.n	80049dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d006      	beq.n	80049dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <osThreadNew+0xa8>
        mem = 1;
 80049d6:	2301      	movs	r3, #1
 80049d8:	61bb      	str	r3, [r7, #24]
 80049da:	e010      	b.n	80049fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10c      	bne.n	80049fe <osThreadNew+0xca>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d108      	bne.n	80049fe <osThreadNew+0xca>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d104      	bne.n	80049fe <osThreadNew+0xca>
          mem = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61bb      	str	r3, [r7, #24]
 80049f8:	e001      	b.n	80049fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80049fa:	2300      	movs	r3, #0
 80049fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d110      	bne.n	8004a26 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a0c:	9202      	str	r2, [sp, #8]
 8004a0e:	9301      	str	r3, [sp, #4]
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	6a3a      	ldr	r2, [r7, #32]
 8004a18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fe0c 	bl	8005638 <xTaskCreateStatic>
 8004a20:	4603      	mov	r3, r0
 8004a22:	613b      	str	r3, [r7, #16]
 8004a24:	e013      	b.n	8004a4e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d110      	bne.n	8004a4e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	f107 0310 	add.w	r3, r7, #16
 8004a34:	9301      	str	r3, [sp, #4]
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 fe57 	bl	80056f2 <xTaskCreate>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d001      	beq.n	8004a4e <osThreadNew+0x11a>
            hTask = NULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a4e:	693b      	ldr	r3, [r7, #16]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3728      	adds	r7, #40	; 0x28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a60:	f3ef 8305 	mrs	r3, IPSR
 8004a64:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a66:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <osDelay+0x1c>
    stat = osErrorISR;
 8004a6c:	f06f 0305 	mvn.w	r3, #5
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	e007      	b.n	8004a84 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 ff92 	bl	80059a8 <vTaskDelay>
    }
  }

  return (stat);
 8004a84:	68fb      	ldr	r3, [r7, #12]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a07      	ldr	r2, [pc, #28]	; (8004abc <vApplicationGetIdleTaskMemory+0x2c>)
 8004aa0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4a06      	ldr	r2, [pc, #24]	; (8004ac0 <vApplicationGetIdleTaskMemory+0x30>)
 8004aa6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2280      	movs	r2, #128	; 0x80
 8004aac:	601a      	str	r2, [r3, #0]
}
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20000124 	.word	0x20000124
 8004ac0:	200001e0 	.word	0x200001e0

08004ac4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4a07      	ldr	r2, [pc, #28]	; (8004af0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004ad4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	4a06      	ldr	r2, [pc, #24]	; (8004af4 <vApplicationGetTimerTaskMemory+0x30>)
 8004ada:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ae2:	601a      	str	r2, [r3, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	200003e0 	.word	0x200003e0
 8004af4:	2000049c 	.word	0x2000049c

08004af8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f103 0208 	add.w	r2, r3, #8
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f103 0208 	add.w	r2, r3, #8
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f103 0208 	add.w	r2, r3, #8
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b52:	b480      	push	{r7}
 8004b54:	b085      	sub	sp, #20
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]
}
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb0:	d103      	bne.n	8004bba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	e00c      	b.n	8004bd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	e002      	b.n	8004bc8 <vListInsert+0x2e>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d2f6      	bcs.n	8004bc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	601a      	str	r2, [r3, #0]
}
 8004c00:	bf00      	nop
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6892      	ldr	r2, [r2, #8]
 8004c22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6852      	ldr	r2, [r2, #4]
 8004c2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d103      	bne.n	8004c40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	1e5a      	subs	r2, r3, #1
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10a      	bne.n	8004c8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c86:	bf00      	nop
 8004c88:	e7fe      	b.n	8004c88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c8a:	f002 f87b 	bl	8006d84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c96:	68f9      	ldr	r1, [r7, #12]
 8004c98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c9a:	fb01 f303 	mul.w	r3, r1, r3
 8004c9e:	441a      	add	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	68f9      	ldr	r1, [r7, #12]
 8004cbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	441a      	add	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	22ff      	movs	r2, #255	; 0xff
 8004cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	22ff      	movs	r2, #255	; 0xff
 8004cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d114      	bne.n	8004d0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01a      	beq.n	8004d1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3310      	adds	r3, #16
 8004cec:	4618      	mov	r0, r3
 8004cee:	f001 f929 	bl	8005f44 <xTaskRemoveFromEventList>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d012      	beq.n	8004d1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004cf8:	4b0c      	ldr	r3, [pc, #48]	; (8004d2c <xQueueGenericReset+0xcc>)
 8004cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	e009      	b.n	8004d1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3310      	adds	r3, #16
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff fef2 	bl	8004af8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3324      	adds	r3, #36	; 0x24
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff feed 	bl	8004af8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d1e:	f002 f861 	bl	8006de4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d22:	2301      	movs	r3, #1
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	e000ed04 	.word	0xe000ed04

08004d30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08e      	sub	sp, #56	; 0x38
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d56:	bf00      	nop
 8004d58:	e7fe      	b.n	8004d58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <xQueueGenericCreateStatic+0x52>
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <xQueueGenericCreateStatic+0x56>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <xQueueGenericCreateStatic+0x58>
 8004d86:	2300      	movs	r3, #0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10a      	bne.n	8004da2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	623b      	str	r3, [r7, #32]
}
 8004d9e:	bf00      	nop
 8004da0:	e7fe      	b.n	8004da0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <xQueueGenericCreateStatic+0x7e>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <xQueueGenericCreateStatic+0x82>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <xQueueGenericCreateStatic+0x84>
 8004db2:	2300      	movs	r3, #0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10a      	bne.n	8004dce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	61fb      	str	r3, [r7, #28]
}
 8004dca:	bf00      	nop
 8004dcc:	e7fe      	b.n	8004dcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004dce:	2350      	movs	r3, #80	; 0x50
 8004dd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2b50      	cmp	r3, #80	; 0x50
 8004dd6:	d00a      	beq.n	8004dee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	61bb      	str	r3, [r7, #24]
}
 8004dea:	bf00      	nop
 8004dec:	e7fe      	b.n	8004dec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004dee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00d      	beq.n	8004e16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	68b9      	ldr	r1, [r7, #8]
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f805 	bl	8004e20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3730      	adds	r7, #48	; 0x30
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d103      	bne.n	8004e3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	e002      	b.n	8004e42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e4e:	2101      	movs	r1, #1
 8004e50:	69b8      	ldr	r0, [r7, #24]
 8004e52:	f7ff ff05 	bl	8004c60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	78fa      	ldrb	r2, [r7, #3]
 8004e5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e5e:	bf00      	nop
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08e      	sub	sp, #56	; 0x38
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e76:	2300      	movs	r3, #0
 8004e78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <xQueueGenericSend+0x32>
	__asm volatile
 8004e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e96:	bf00      	nop
 8004e98:	e7fe      	b.n	8004e98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d103      	bne.n	8004ea8 <xQueueGenericSend+0x40>
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <xQueueGenericSend+0x44>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <xQueueGenericSend+0x46>
 8004eac:	2300      	movs	r3, #0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <xQueueGenericSend+0x60>
	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ec4:	bf00      	nop
 8004ec6:	e7fe      	b.n	8004ec6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d103      	bne.n	8004ed6 <xQueueGenericSend+0x6e>
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <xQueueGenericSend+0x72>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <xQueueGenericSend+0x74>
 8004eda:	2300      	movs	r3, #0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <xQueueGenericSend+0x8e>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	623b      	str	r3, [r7, #32]
}
 8004ef2:	bf00      	nop
 8004ef4:	e7fe      	b.n	8004ef4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ef6:	f001 f9e7 	bl	80062c8 <xTaskGetSchedulerState>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d102      	bne.n	8004f06 <xQueueGenericSend+0x9e>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <xQueueGenericSend+0xa2>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <xQueueGenericSend+0xa4>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10a      	bne.n	8004f26 <xQueueGenericSend+0xbe>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	61fb      	str	r3, [r7, #28]
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f26:	f001 ff2d 	bl	8006d84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d302      	bcc.n	8004f3c <xQueueGenericSend+0xd4>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d129      	bne.n	8004f90 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f42:	f000 fa0b 	bl	800535c <prvCopyDataToQueue>
 8004f46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d010      	beq.n	8004f72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	3324      	adds	r3, #36	; 0x24
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fff5 	bl	8005f44 <xTaskRemoveFromEventList>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d013      	beq.n	8004f88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f60:	4b3f      	ldr	r3, [pc, #252]	; (8005060 <xQueueGenericSend+0x1f8>)
 8004f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	e00a      	b.n	8004f88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f78:	4b39      	ldr	r3, [pc, #228]	; (8005060 <xQueueGenericSend+0x1f8>)
 8004f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f88:	f001 ff2c 	bl	8006de4 <vPortExitCritical>
				return pdPASS;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e063      	b.n	8005058 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d103      	bne.n	8004f9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f96:	f001 ff25 	bl	8006de4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	e05c      	b.n	8005058 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d106      	bne.n	8004fb2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fa4:	f107 0314 	add.w	r3, r7, #20
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f001 f82f 	bl	800600c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fb2:	f001 ff17 	bl	8006de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fb6:	f000 fd9b 	bl	8005af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fba:	f001 fee3 	bl	8006d84 <vPortEnterCritical>
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fc4:	b25b      	sxtb	r3, r3
 8004fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fca:	d103      	bne.n	8004fd4 <xQueueGenericSend+0x16c>
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fda:	b25b      	sxtb	r3, r3
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe0:	d103      	bne.n	8004fea <xQueueGenericSend+0x182>
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fea:	f001 fefb 	bl	8006de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fee:	1d3a      	adds	r2, r7, #4
 8004ff0:	f107 0314 	add.w	r3, r7, #20
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f001 f81e 	bl	8006038 <xTaskCheckForTimeOut>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d124      	bne.n	800504c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005002:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005004:	f000 faa2 	bl	800554c <prvIsQueueFull>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d018      	beq.n	8005040 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	3310      	adds	r3, #16
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	4611      	mov	r1, r2
 8005016:	4618      	mov	r0, r3
 8005018:	f000 ff44 	bl	8005ea4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800501c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800501e:	f000 fa2d 	bl	800547c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005022:	f000 fd73 	bl	8005b0c <xTaskResumeAll>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	f47f af7c 	bne.w	8004f26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800502e:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <xQueueGenericSend+0x1f8>)
 8005030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	e772      	b.n	8004f26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005042:	f000 fa1b 	bl	800547c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005046:	f000 fd61 	bl	8005b0c <xTaskResumeAll>
 800504a:	e76c      	b.n	8004f26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800504c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800504e:	f000 fa15 	bl	800547c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005052:	f000 fd5b 	bl	8005b0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005056:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005058:	4618      	mov	r0, r3
 800505a:	3738      	adds	r7, #56	; 0x38
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	e000ed04 	.word	0xe000ed04

08005064 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b090      	sub	sp, #64	; 0x40
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10a      	bne.n	8005092 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d103      	bne.n	80050a0 <xQueueGenericSendFromISR+0x3c>
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <xQueueGenericSendFromISR+0x40>
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <xQueueGenericSendFromISR+0x42>
 80050a4:	2300      	movs	r3, #0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10a      	bne.n	80050c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050bc:	bf00      	nop
 80050be:	e7fe      	b.n	80050be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d103      	bne.n	80050ce <xQueueGenericSendFromISR+0x6a>
 80050c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <xQueueGenericSendFromISR+0x6e>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <xQueueGenericSendFromISR+0x70>
 80050d2:	2300      	movs	r3, #0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10a      	bne.n	80050ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	623b      	str	r3, [r7, #32]
}
 80050ea:	bf00      	nop
 80050ec:	e7fe      	b.n	80050ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050ee:	f001 ff2b 	bl	8006f48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80050f2:	f3ef 8211 	mrs	r2, BASEPRI
 80050f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	61fa      	str	r2, [r7, #28]
 8005108:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800510a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800510c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005116:	429a      	cmp	r2, r3
 8005118:	d302      	bcc.n	8005120 <xQueueGenericSendFromISR+0xbc>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b02      	cmp	r3, #2
 800511e:	d12f      	bne.n	8005180 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005136:	f000 f911 	bl	800535c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800513a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005142:	d112      	bne.n	800516a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	2b00      	cmp	r3, #0
 800514a:	d016      	beq.n	800517a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514e:	3324      	adds	r3, #36	; 0x24
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fef7 	bl	8005f44 <xTaskRemoveFromEventList>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00e      	beq.n	800517a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00b      	beq.n	800517a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	e007      	b.n	800517a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800516a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800516e:	3301      	adds	r3, #1
 8005170:	b2db      	uxtb	r3, r3
 8005172:	b25a      	sxtb	r2, r3
 8005174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800517a:	2301      	movs	r3, #1
 800517c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800517e:	e001      	b.n	8005184 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005180:	2300      	movs	r3, #0
 8005182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005186:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800518e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005192:	4618      	mov	r0, r3
 8005194:	3740      	adds	r7, #64	; 0x40
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08c      	sub	sp, #48	; 0x30
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051a8:	2300      	movs	r3, #0
 80051aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10a      	bne.n	80051cc <xQueueReceive+0x30>
	__asm volatile
 80051b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	623b      	str	r3, [r7, #32]
}
 80051c8:	bf00      	nop
 80051ca:	e7fe      	b.n	80051ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d103      	bne.n	80051da <xQueueReceive+0x3e>
 80051d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <xQueueReceive+0x42>
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <xQueueReceive+0x44>
 80051de:	2300      	movs	r3, #0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10a      	bne.n	80051fa <xQueueReceive+0x5e>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	61fb      	str	r3, [r7, #28]
}
 80051f6:	bf00      	nop
 80051f8:	e7fe      	b.n	80051f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051fa:	f001 f865 	bl	80062c8 <xTaskGetSchedulerState>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d102      	bne.n	800520a <xQueueReceive+0x6e>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <xQueueReceive+0x72>
 800520a:	2301      	movs	r3, #1
 800520c:	e000      	b.n	8005210 <xQueueReceive+0x74>
 800520e:	2300      	movs	r3, #0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <xQueueReceive+0x8e>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	61bb      	str	r3, [r7, #24]
}
 8005226:	bf00      	nop
 8005228:	e7fe      	b.n	8005228 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800522a:	f001 fdab 	bl	8006d84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800522e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	2b00      	cmp	r3, #0
 8005238:	d01f      	beq.n	800527a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800523e:	f000 f8f7 	bl	8005430 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	1e5a      	subs	r2, r3, #1
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00f      	beq.n	8005272 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	3310      	adds	r3, #16
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fe74 	bl	8005f44 <xTaskRemoveFromEventList>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d007      	beq.n	8005272 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005262:	4b3d      	ldr	r3, [pc, #244]	; (8005358 <xQueueReceive+0x1bc>)
 8005264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005272:	f001 fdb7 	bl	8006de4 <vPortExitCritical>
				return pdPASS;
 8005276:	2301      	movs	r3, #1
 8005278:	e069      	b.n	800534e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d103      	bne.n	8005288 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005280:	f001 fdb0 	bl	8006de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005284:	2300      	movs	r3, #0
 8005286:	e062      	b.n	800534e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800528e:	f107 0310 	add.w	r3, r7, #16
 8005292:	4618      	mov	r0, r3
 8005294:	f000 feba 	bl	800600c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005298:	2301      	movs	r3, #1
 800529a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800529c:	f001 fda2 	bl	8006de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052a0:	f000 fc26 	bl	8005af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052a4:	f001 fd6e 	bl	8006d84 <vPortEnterCritical>
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052ae:	b25b      	sxtb	r3, r3
 80052b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b4:	d103      	bne.n	80052be <xQueueReceive+0x122>
 80052b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052c4:	b25b      	sxtb	r3, r3
 80052c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ca:	d103      	bne.n	80052d4 <xQueueReceive+0x138>
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052d4:	f001 fd86 	bl	8006de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052d8:	1d3a      	adds	r2, r7, #4
 80052da:	f107 0310 	add.w	r3, r7, #16
 80052de:	4611      	mov	r1, r2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fea9 	bl	8006038 <xTaskCheckForTimeOut>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d123      	bne.n	8005334 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ee:	f000 f917 	bl	8005520 <prvIsQueueEmpty>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d017      	beq.n	8005328 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	3324      	adds	r3, #36	; 0x24
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	4611      	mov	r1, r2
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fdcf 	bl	8005ea4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005308:	f000 f8b8 	bl	800547c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800530c:	f000 fbfe 	bl	8005b0c <xTaskResumeAll>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d189      	bne.n	800522a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005316:	4b10      	ldr	r3, [pc, #64]	; (8005358 <xQueueReceive+0x1bc>)
 8005318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	e780      	b.n	800522a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800532a:	f000 f8a7 	bl	800547c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800532e:	f000 fbed 	bl	8005b0c <xTaskResumeAll>
 8005332:	e77a      	b.n	800522a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005336:	f000 f8a1 	bl	800547c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800533a:	f000 fbe7 	bl	8005b0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800533e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005340:	f000 f8ee 	bl	8005520 <prvIsQueueEmpty>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	f43f af6f 	beq.w	800522a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800534c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800534e:	4618      	mov	r0, r3
 8005350:	3730      	adds	r7, #48	; 0x30
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005368:	2300      	movs	r3, #0
 800536a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005370:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10d      	bne.n	8005396 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d14d      	bne.n	800541e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	4618      	mov	r0, r3
 8005388:	f000 ffbc 	bl	8006304 <xTaskPriorityDisinherit>
 800538c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	609a      	str	r2, [r3, #8]
 8005394:	e043      	b.n	800541e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d119      	bne.n	80053d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6858      	ldr	r0, [r3, #4]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a4:	461a      	mov	r2, r3
 80053a6:	68b9      	ldr	r1, [r7, #8]
 80053a8:	f002 fbb1 	bl	8007b0e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	441a      	add	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d32b      	bcc.n	800541e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	605a      	str	r2, [r3, #4]
 80053ce:	e026      	b.n	800541e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	68d8      	ldr	r0, [r3, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	461a      	mov	r2, r3
 80053da:	68b9      	ldr	r1, [r7, #8]
 80053dc:	f002 fb97 	bl	8007b0e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	425b      	negs	r3, r3
 80053ea:	441a      	add	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d207      	bcs.n	800540c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	425b      	negs	r3, r3
 8005406:	441a      	add	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d105      	bne.n	800541e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	3b01      	subs	r3, #1
 800541c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005426:	697b      	ldr	r3, [r7, #20]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d018      	beq.n	8005474 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	441a      	add	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68da      	ldr	r2, [r3, #12]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	429a      	cmp	r2, r3
 800545a:	d303      	bcc.n	8005464 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68d9      	ldr	r1, [r3, #12]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	461a      	mov	r2, r3
 800546e:	6838      	ldr	r0, [r7, #0]
 8005470:	f002 fb4d 	bl	8007b0e <memcpy>
	}
}
 8005474:	bf00      	nop
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005484:	f001 fc7e 	bl	8006d84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800548e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005490:	e011      	b.n	80054b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	2b00      	cmp	r3, #0
 8005498:	d012      	beq.n	80054c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3324      	adds	r3, #36	; 0x24
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fd50 	bl	8005f44 <xTaskRemoveFromEventList>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054aa:	f000 fe27 	bl	80060fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	dce9      	bgt.n	8005492 <prvUnlockQueue+0x16>
 80054be:	e000      	b.n	80054c2 <prvUnlockQueue+0x46>
					break;
 80054c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	22ff      	movs	r2, #255	; 0xff
 80054c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80054ca:	f001 fc8b 	bl	8006de4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054ce:	f001 fc59 	bl	8006d84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054da:	e011      	b.n	8005500 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d012      	beq.n	800550a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3310      	adds	r3, #16
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fd2b 	bl	8005f44 <xTaskRemoveFromEventList>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80054f4:	f000 fe02 	bl	80060fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80054f8:	7bbb      	ldrb	r3, [r7, #14]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005504:	2b00      	cmp	r3, #0
 8005506:	dce9      	bgt.n	80054dc <prvUnlockQueue+0x60>
 8005508:	e000      	b.n	800550c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800550a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	22ff      	movs	r2, #255	; 0xff
 8005510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005514:	f001 fc66 	bl	8006de4 <vPortExitCritical>
}
 8005518:	bf00      	nop
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005528:	f001 fc2c 	bl	8006d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	2b00      	cmp	r3, #0
 8005532:	d102      	bne.n	800553a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005534:	2301      	movs	r3, #1
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	e001      	b.n	800553e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800553e:	f001 fc51 	bl	8006de4 <vPortExitCritical>

	return xReturn;
 8005542:	68fb      	ldr	r3, [r7, #12]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005554:	f001 fc16 	bl	8006d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005560:	429a      	cmp	r2, r3
 8005562:	d102      	bne.n	800556a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005564:	2301      	movs	r3, #1
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	e001      	b.n	800556e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800556a:	2300      	movs	r3, #0
 800556c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800556e:	f001 fc39 	bl	8006de4 <vPortExitCritical>

	return xReturn;
 8005572:	68fb      	ldr	r3, [r7, #12]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	e014      	b.n	80055b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800558c:	4a0f      	ldr	r2, [pc, #60]	; (80055cc <vQueueAddToRegistry+0x50>)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10b      	bne.n	80055b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005598:	490c      	ldr	r1, [pc, #48]	; (80055cc <vQueueAddToRegistry+0x50>)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80055a2:	4a0a      	ldr	r2, [pc, #40]	; (80055cc <vQueueAddToRegistry+0x50>)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	4413      	add	r3, r2
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055ae:	e006      	b.n	80055be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	3301      	adds	r3, #1
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b07      	cmp	r3, #7
 80055ba:	d9e7      	bls.n	800558c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055bc:	bf00      	nop
 80055be:	bf00      	nop
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	20004d44 	.word	0x20004d44

080055d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80055e0:	f001 fbd0 	bl	8006d84 <vPortEnterCritical>
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055ea:	b25b      	sxtb	r3, r3
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f0:	d103      	bne.n	80055fa <vQueueWaitForMessageRestricted+0x2a>
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005600:	b25b      	sxtb	r3, r3
 8005602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005606:	d103      	bne.n	8005610 <vQueueWaitForMessageRestricted+0x40>
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005610:	f001 fbe8 	bl	8006de4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005618:	2b00      	cmp	r3, #0
 800561a:	d106      	bne.n	800562a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	3324      	adds	r3, #36	; 0x24
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fc61 	bl	8005eec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800562a:	6978      	ldr	r0, [r7, #20]
 800562c:	f7ff ff26 	bl	800547c <prvUnlockQueue>
	}
 8005630:	bf00      	nop
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08e      	sub	sp, #56	; 0x38
 800563c:	af04      	add	r7, sp, #16
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <xTaskCreateStatic+0x2a>
	__asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	623b      	str	r3, [r7, #32]
}
 800565e:	bf00      	nop
 8005660:	e7fe      	b.n	8005660 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <xTaskCreateStatic+0x46>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	61fb      	str	r3, [r7, #28]
}
 800567a:	bf00      	nop
 800567c:	e7fe      	b.n	800567c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800567e:	23bc      	movs	r3, #188	; 0xbc
 8005680:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2bbc      	cmp	r3, #188	; 0xbc
 8005686:	d00a      	beq.n	800569e <xTaskCreateStatic+0x66>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	61bb      	str	r3, [r7, #24]
}
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800569e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d01e      	beq.n	80056e4 <xTaskCreateStatic+0xac>
 80056a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01b      	beq.n	80056e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	2202      	movs	r2, #2
 80056ba:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056be:	2300      	movs	r3, #0
 80056c0:	9303      	str	r3, [sp, #12]
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	9302      	str	r3, [sp, #8]
 80056c6:	f107 0314 	add.w	r3, r7, #20
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 f850 	bl	800577c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056de:	f000 f8f3 	bl	80058c8 <prvAddNewTaskToReadyList>
 80056e2:	e001      	b.n	80056e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80056e4:	2300      	movs	r3, #0
 80056e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056e8:	697b      	ldr	r3, [r7, #20]
	}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3728      	adds	r7, #40	; 0x28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b08c      	sub	sp, #48	; 0x30
 80056f6:	af04      	add	r7, sp, #16
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	603b      	str	r3, [r7, #0]
 80056fe:	4613      	mov	r3, r2
 8005700:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4618      	mov	r0, r3
 8005708:	f001 fc5e 	bl	8006fc8 <pvPortMalloc>
 800570c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00e      	beq.n	8005732 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005714:	20bc      	movs	r0, #188	; 0xbc
 8005716:	f001 fc57 	bl	8006fc8 <pvPortMalloc>
 800571a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	631a      	str	r2, [r3, #48]	; 0x30
 8005728:	e005      	b.n	8005736 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800572a:	6978      	ldr	r0, [r7, #20]
 800572c:	f001 fd18 	bl	8007160 <vPortFree>
 8005730:	e001      	b.n	8005736 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005732:	2300      	movs	r3, #0
 8005734:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d017      	beq.n	800576c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005744:	88fa      	ldrh	r2, [r7, #6]
 8005746:	2300      	movs	r3, #0
 8005748:	9303      	str	r3, [sp, #12]
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	9302      	str	r3, [sp, #8]
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	9301      	str	r3, [sp, #4]
 8005752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	68b9      	ldr	r1, [r7, #8]
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 f80e 	bl	800577c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005760:	69f8      	ldr	r0, [r7, #28]
 8005762:	f000 f8b1 	bl	80058c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005766:	2301      	movs	r3, #1
 8005768:	61bb      	str	r3, [r7, #24]
 800576a:	e002      	b.n	8005772 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800576c:	f04f 33ff 	mov.w	r3, #4294967295
 8005770:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005772:	69bb      	ldr	r3, [r7, #24]
	}
 8005774:	4618      	mov	r0, r3
 8005776:	3720      	adds	r7, #32
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	461a      	mov	r2, r3
 8005794:	21a5      	movs	r1, #165	; 0xa5
 8005796:	f002 f9c8 	bl	8007b2a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057a4:	3b01      	subs	r3, #1
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	f023 0307 	bic.w	r3, r3, #7
 80057b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80057be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	617b      	str	r3, [r7, #20]
}
 80057d0:	bf00      	nop
 80057d2:	e7fe      	b.n	80057d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d01f      	beq.n	800581a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057da:	2300      	movs	r3, #0
 80057dc:	61fb      	str	r3, [r7, #28]
 80057de:	e012      	b.n	8005806 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	4413      	add	r3, r2
 80057e6:	7819      	ldrb	r1, [r3, #0]
 80057e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	4413      	add	r3, r2
 80057ee:	3334      	adds	r3, #52	; 0x34
 80057f0:	460a      	mov	r2, r1
 80057f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	4413      	add	r3, r2
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d006      	beq.n	800580e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	3301      	adds	r3, #1
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	2b0f      	cmp	r3, #15
 800580a:	d9e9      	bls.n	80057e0 <prvInitialiseNewTask+0x64>
 800580c:	e000      	b.n	8005810 <prvInitialiseNewTask+0x94>
			{
				break;
 800580e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005818:	e003      	b.n	8005822 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	2b37      	cmp	r3, #55	; 0x37
 8005826:	d901      	bls.n	800582c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005828:	2337      	movs	r3, #55	; 0x37
 800582a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005830:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005836:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	2200      	movs	r2, #0
 800583c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	3304      	adds	r3, #4
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff f978 	bl	8004b38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	3318      	adds	r3, #24
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff f973 	bl	8004b38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005856:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005866:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	2200      	movs	r2, #0
 800586c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	2200      	movs	r2, #0
 8005874:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	3354      	adds	r3, #84	; 0x54
 800587c:	2260      	movs	r2, #96	; 0x60
 800587e:	2100      	movs	r1, #0
 8005880:	4618      	mov	r0, r3
 8005882:	f002 f952 	bl	8007b2a <memset>
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	4a0c      	ldr	r2, [pc, #48]	; (80058bc <prvInitialiseNewTask+0x140>)
 800588a:	659a      	str	r2, [r3, #88]	; 0x58
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	4a0c      	ldr	r2, [pc, #48]	; (80058c0 <prvInitialiseNewTask+0x144>)
 8005890:	65da      	str	r2, [r3, #92]	; 0x5c
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	4a0b      	ldr	r2, [pc, #44]	; (80058c4 <prvInitialiseNewTask+0x148>)
 8005896:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	68f9      	ldr	r1, [r7, #12]
 800589c:	69b8      	ldr	r0, [r7, #24]
 800589e:	f001 f941 	bl	8006b24 <pxPortInitialiseStack>
 80058a2:	4602      	mov	r2, r0
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058b4:	bf00      	nop
 80058b6:	3720      	adds	r7, #32
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	08008b18 	.word	0x08008b18
 80058c0:	08008b38 	.word	0x08008b38
 80058c4:	08008af8 	.word	0x08008af8

080058c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058d0:	f001 fa58 	bl	8006d84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058d4:	4b2d      	ldr	r3, [pc, #180]	; (800598c <prvAddNewTaskToReadyList+0xc4>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3301      	adds	r3, #1
 80058da:	4a2c      	ldr	r2, [pc, #176]	; (800598c <prvAddNewTaskToReadyList+0xc4>)
 80058dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058de:	4b2c      	ldr	r3, [pc, #176]	; (8005990 <prvAddNewTaskToReadyList+0xc8>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d109      	bne.n	80058fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058e6:	4a2a      	ldr	r2, [pc, #168]	; (8005990 <prvAddNewTaskToReadyList+0xc8>)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058ec:	4b27      	ldr	r3, [pc, #156]	; (800598c <prvAddNewTaskToReadyList+0xc4>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d110      	bne.n	8005916 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058f4:	f000 fc26 	bl	8006144 <prvInitialiseTaskLists>
 80058f8:	e00d      	b.n	8005916 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058fa:	4b26      	ldr	r3, [pc, #152]	; (8005994 <prvAddNewTaskToReadyList+0xcc>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d109      	bne.n	8005916 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005902:	4b23      	ldr	r3, [pc, #140]	; (8005990 <prvAddNewTaskToReadyList+0xc8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590c:	429a      	cmp	r2, r3
 800590e:	d802      	bhi.n	8005916 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005910:	4a1f      	ldr	r2, [pc, #124]	; (8005990 <prvAddNewTaskToReadyList+0xc8>)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005916:	4b20      	ldr	r3, [pc, #128]	; (8005998 <prvAddNewTaskToReadyList+0xd0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3301      	adds	r3, #1
 800591c:	4a1e      	ldr	r2, [pc, #120]	; (8005998 <prvAddNewTaskToReadyList+0xd0>)
 800591e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005920:	4b1d      	ldr	r3, [pc, #116]	; (8005998 <prvAddNewTaskToReadyList+0xd0>)
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592c:	4b1b      	ldr	r3, [pc, #108]	; (800599c <prvAddNewTaskToReadyList+0xd4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d903      	bls.n	800593c <prvAddNewTaskToReadyList+0x74>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	4a18      	ldr	r2, [pc, #96]	; (800599c <prvAddNewTaskToReadyList+0xd4>)
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005940:	4613      	mov	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4a15      	ldr	r2, [pc, #84]	; (80059a0 <prvAddNewTaskToReadyList+0xd8>)
 800594a:	441a      	add	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3304      	adds	r3, #4
 8005950:	4619      	mov	r1, r3
 8005952:	4610      	mov	r0, r2
 8005954:	f7ff f8fd 	bl	8004b52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005958:	f001 fa44 	bl	8006de4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800595c:	4b0d      	ldr	r3, [pc, #52]	; (8005994 <prvAddNewTaskToReadyList+0xcc>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00e      	beq.n	8005982 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005964:	4b0a      	ldr	r3, [pc, #40]	; (8005990 <prvAddNewTaskToReadyList+0xc8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	429a      	cmp	r2, r3
 8005970:	d207      	bcs.n	8005982 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005972:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <prvAddNewTaskToReadyList+0xdc>)
 8005974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005982:	bf00      	nop
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000d70 	.word	0x20000d70
 8005990:	2000089c 	.word	0x2000089c
 8005994:	20000d7c 	.word	0x20000d7c
 8005998:	20000d8c 	.word	0x20000d8c
 800599c:	20000d78 	.word	0x20000d78
 80059a0:	200008a0 	.word	0x200008a0
 80059a4:	e000ed04 	.word	0xe000ed04

080059a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d017      	beq.n	80059ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059ba:	4b13      	ldr	r3, [pc, #76]	; (8005a08 <vTaskDelay+0x60>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <vTaskDelay+0x30>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	60bb      	str	r3, [r7, #8]
}
 80059d4:	bf00      	nop
 80059d6:	e7fe      	b.n	80059d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059d8:	f000 f88a 	bl	8005af0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059dc:	2100      	movs	r1, #0
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fcfe 	bl	80063e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059e4:	f000 f892 	bl	8005b0c <xTaskResumeAll>
 80059e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d107      	bne.n	8005a00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80059f0:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <vTaskDelay+0x64>)
 80059f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a00:	bf00      	nop
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	20000d98 	.word	0x20000d98
 8005a0c:	e000ed04 	.word	0xe000ed04

08005a10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08a      	sub	sp, #40	; 0x28
 8005a14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a1e:	463a      	mov	r2, r7
 8005a20:	1d39      	adds	r1, r7, #4
 8005a22:	f107 0308 	add.w	r3, r7, #8
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7ff f832 	bl	8004a90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a2c:	6839      	ldr	r1, [r7, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	9202      	str	r2, [sp, #8]
 8005a34:	9301      	str	r3, [sp, #4]
 8005a36:	2300      	movs	r3, #0
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	460a      	mov	r2, r1
 8005a3e:	4924      	ldr	r1, [pc, #144]	; (8005ad0 <vTaskStartScheduler+0xc0>)
 8005a40:	4824      	ldr	r0, [pc, #144]	; (8005ad4 <vTaskStartScheduler+0xc4>)
 8005a42:	f7ff fdf9 	bl	8005638 <xTaskCreateStatic>
 8005a46:	4603      	mov	r3, r0
 8005a48:	4a23      	ldr	r2, [pc, #140]	; (8005ad8 <vTaskStartScheduler+0xc8>)
 8005a4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a4c:	4b22      	ldr	r3, [pc, #136]	; (8005ad8 <vTaskStartScheduler+0xc8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a54:	2301      	movs	r3, #1
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	e001      	b.n	8005a5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d102      	bne.n	8005a6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a64:	f000 fd10 	bl	8006488 <xTimerCreateTimerTask>
 8005a68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d11b      	bne.n	8005aa8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	613b      	str	r3, [r7, #16]
}
 8005a82:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a84:	4b15      	ldr	r3, [pc, #84]	; (8005adc <vTaskStartScheduler+0xcc>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3354      	adds	r3, #84	; 0x54
 8005a8a:	4a15      	ldr	r2, [pc, #84]	; (8005ae0 <vTaskStartScheduler+0xd0>)
 8005a8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a8e:	4b15      	ldr	r3, [pc, #84]	; (8005ae4 <vTaskStartScheduler+0xd4>)
 8005a90:	f04f 32ff 	mov.w	r2, #4294967295
 8005a94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a96:	4b14      	ldr	r3, [pc, #80]	; (8005ae8 <vTaskStartScheduler+0xd8>)
 8005a98:	2201      	movs	r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a9c:	4b13      	ldr	r3, [pc, #76]	; (8005aec <vTaskStartScheduler+0xdc>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005aa2:	f001 f8cd 	bl	8006c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005aa6:	e00e      	b.n	8005ac6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aae:	d10a      	bne.n	8005ac6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	60fb      	str	r3, [r7, #12]
}
 8005ac2:	bf00      	nop
 8005ac4:	e7fe      	b.n	8005ac4 <vTaskStartScheduler+0xb4>
}
 8005ac6:	bf00      	nop
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	08008a18 	.word	0x08008a18
 8005ad4:	08006115 	.word	0x08006115
 8005ad8:	20000d94 	.word	0x20000d94
 8005adc:	2000089c 	.word	0x2000089c
 8005ae0:	20000078 	.word	0x20000078
 8005ae4:	20000d90 	.word	0x20000d90
 8005ae8:	20000d7c 	.word	0x20000d7c
 8005aec:	20000d74 	.word	0x20000d74

08005af0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005af4:	4b04      	ldr	r3, [pc, #16]	; (8005b08 <vTaskSuspendAll+0x18>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	3301      	adds	r3, #1
 8005afa:	4a03      	ldr	r2, [pc, #12]	; (8005b08 <vTaskSuspendAll+0x18>)
 8005afc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005afe:	bf00      	nop
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	20000d98 	.word	0x20000d98

08005b0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b1a:	4b42      	ldr	r3, [pc, #264]	; (8005c24 <xTaskResumeAll+0x118>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10a      	bne.n	8005b38 <xTaskResumeAll+0x2c>
	__asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	603b      	str	r3, [r7, #0]
}
 8005b34:	bf00      	nop
 8005b36:	e7fe      	b.n	8005b36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b38:	f001 f924 	bl	8006d84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b3c:	4b39      	ldr	r3, [pc, #228]	; (8005c24 <xTaskResumeAll+0x118>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3b01      	subs	r3, #1
 8005b42:	4a38      	ldr	r2, [pc, #224]	; (8005c24 <xTaskResumeAll+0x118>)
 8005b44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b46:	4b37      	ldr	r3, [pc, #220]	; (8005c24 <xTaskResumeAll+0x118>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d162      	bne.n	8005c14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b4e:	4b36      	ldr	r3, [pc, #216]	; (8005c28 <xTaskResumeAll+0x11c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d05e      	beq.n	8005c14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b56:	e02f      	b.n	8005bb8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b58:	4b34      	ldr	r3, [pc, #208]	; (8005c2c <xTaskResumeAll+0x120>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	3318      	adds	r3, #24
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7ff f851 	bl	8004c0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff f84c 	bl	8004c0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b78:	4b2d      	ldr	r3, [pc, #180]	; (8005c30 <xTaskResumeAll+0x124>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d903      	bls.n	8005b88 <xTaskResumeAll+0x7c>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	4a2a      	ldr	r2, [pc, #168]	; (8005c30 <xTaskResumeAll+0x124>)
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4a27      	ldr	r2, [pc, #156]	; (8005c34 <xTaskResumeAll+0x128>)
 8005b96:	441a      	add	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	4610      	mov	r0, r2
 8005ba0:	f7fe ffd7 	bl	8004b52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba8:	4b23      	ldr	r3, [pc, #140]	; (8005c38 <xTaskResumeAll+0x12c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d302      	bcc.n	8005bb8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005bb2:	4b22      	ldr	r3, [pc, #136]	; (8005c3c <xTaskResumeAll+0x130>)
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bb8:	4b1c      	ldr	r3, [pc, #112]	; (8005c2c <xTaskResumeAll+0x120>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1cb      	bne.n	8005b58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005bc6:	f000 fb5f 	bl	8006288 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005bca:	4b1d      	ldr	r3, [pc, #116]	; (8005c40 <xTaskResumeAll+0x134>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d010      	beq.n	8005bf8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005bd6:	f000 f847 	bl	8005c68 <xTaskIncrementTick>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005be0:	4b16      	ldr	r3, [pc, #88]	; (8005c3c <xTaskResumeAll+0x130>)
 8005be2:	2201      	movs	r2, #1
 8005be4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f1      	bne.n	8005bd6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005bf2:	4b13      	ldr	r3, [pc, #76]	; (8005c40 <xTaskResumeAll+0x134>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bf8:	4b10      	ldr	r3, [pc, #64]	; (8005c3c <xTaskResumeAll+0x130>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d009      	beq.n	8005c14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c00:	2301      	movs	r3, #1
 8005c02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c04:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <xTaskResumeAll+0x138>)
 8005c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c14:	f001 f8e6 	bl	8006de4 <vPortExitCritical>

	return xAlreadyYielded;
 8005c18:	68bb      	ldr	r3, [r7, #8]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	20000d98 	.word	0x20000d98
 8005c28:	20000d70 	.word	0x20000d70
 8005c2c:	20000d30 	.word	0x20000d30
 8005c30:	20000d78 	.word	0x20000d78
 8005c34:	200008a0 	.word	0x200008a0
 8005c38:	2000089c 	.word	0x2000089c
 8005c3c:	20000d84 	.word	0x20000d84
 8005c40:	20000d80 	.word	0x20000d80
 8005c44:	e000ed04 	.word	0xe000ed04

08005c48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c4e:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <xTaskGetTickCount+0x1c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c54:	687b      	ldr	r3, [r7, #4]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	20000d74 	.word	0x20000d74

08005c68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c72:	4b4f      	ldr	r3, [pc, #316]	; (8005db0 <xTaskIncrementTick+0x148>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f040 808f 	bne.w	8005d9a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c7c:	4b4d      	ldr	r3, [pc, #308]	; (8005db4 <xTaskIncrementTick+0x14c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3301      	adds	r3, #1
 8005c82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c84:	4a4b      	ldr	r2, [pc, #300]	; (8005db4 <xTaskIncrementTick+0x14c>)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d120      	bne.n	8005cd2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c90:	4b49      	ldr	r3, [pc, #292]	; (8005db8 <xTaskIncrementTick+0x150>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00a      	beq.n	8005cb0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	603b      	str	r3, [r7, #0]
}
 8005cac:	bf00      	nop
 8005cae:	e7fe      	b.n	8005cae <xTaskIncrementTick+0x46>
 8005cb0:	4b41      	ldr	r3, [pc, #260]	; (8005db8 <xTaskIncrementTick+0x150>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	4b41      	ldr	r3, [pc, #260]	; (8005dbc <xTaskIncrementTick+0x154>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a3f      	ldr	r2, [pc, #252]	; (8005db8 <xTaskIncrementTick+0x150>)
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	4a3f      	ldr	r2, [pc, #252]	; (8005dbc <xTaskIncrementTick+0x154>)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	4b3e      	ldr	r3, [pc, #248]	; (8005dc0 <xTaskIncrementTick+0x158>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	4a3d      	ldr	r2, [pc, #244]	; (8005dc0 <xTaskIncrementTick+0x158>)
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	f000 fadb 	bl	8006288 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cd2:	4b3c      	ldr	r3, [pc, #240]	; (8005dc4 <xTaskIncrementTick+0x15c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d349      	bcc.n	8005d70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cdc:	4b36      	ldr	r3, [pc, #216]	; (8005db8 <xTaskIncrementTick+0x150>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d104      	bne.n	8005cf0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ce6:	4b37      	ldr	r3, [pc, #220]	; (8005dc4 <xTaskIncrementTick+0x15c>)
 8005ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cec:	601a      	str	r2, [r3, #0]
					break;
 8005cee:	e03f      	b.n	8005d70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cf0:	4b31      	ldr	r3, [pc, #196]	; (8005db8 <xTaskIncrementTick+0x150>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d203      	bcs.n	8005d10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d08:	4a2e      	ldr	r2, [pc, #184]	; (8005dc4 <xTaskIncrementTick+0x15c>)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d0e:	e02f      	b.n	8005d70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	3304      	adds	r3, #4
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fe ff79 	bl	8004c0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d004      	beq.n	8005d2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	3318      	adds	r3, #24
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fe ff70 	bl	8004c0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d30:	4b25      	ldr	r3, [pc, #148]	; (8005dc8 <xTaskIncrementTick+0x160>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d903      	bls.n	8005d40 <xTaskIncrementTick+0xd8>
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	4a22      	ldr	r2, [pc, #136]	; (8005dc8 <xTaskIncrementTick+0x160>)
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d44:	4613      	mov	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4a1f      	ldr	r2, [pc, #124]	; (8005dcc <xTaskIncrementTick+0x164>)
 8005d4e:	441a      	add	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	3304      	adds	r3, #4
 8005d54:	4619      	mov	r1, r3
 8005d56:	4610      	mov	r0, r2
 8005d58:	f7fe fefb 	bl	8004b52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d60:	4b1b      	ldr	r3, [pc, #108]	; (8005dd0 <xTaskIncrementTick+0x168>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d3b8      	bcc.n	8005cdc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d6e:	e7b5      	b.n	8005cdc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d70:	4b17      	ldr	r3, [pc, #92]	; (8005dd0 <xTaskIncrementTick+0x168>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d76:	4915      	ldr	r1, [pc, #84]	; (8005dcc <xTaskIncrementTick+0x164>)
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d901      	bls.n	8005d8c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d8c:	4b11      	ldr	r3, [pc, #68]	; (8005dd4 <xTaskIncrementTick+0x16c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005d94:	2301      	movs	r3, #1
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	e004      	b.n	8005da4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d9a:	4b0f      	ldr	r3, [pc, #60]	; (8005dd8 <xTaskIncrementTick+0x170>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	4a0d      	ldr	r2, [pc, #52]	; (8005dd8 <xTaskIncrementTick+0x170>)
 8005da2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005da4:	697b      	ldr	r3, [r7, #20]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20000d98 	.word	0x20000d98
 8005db4:	20000d74 	.word	0x20000d74
 8005db8:	20000d28 	.word	0x20000d28
 8005dbc:	20000d2c 	.word	0x20000d2c
 8005dc0:	20000d88 	.word	0x20000d88
 8005dc4:	20000d90 	.word	0x20000d90
 8005dc8:	20000d78 	.word	0x20000d78
 8005dcc:	200008a0 	.word	0x200008a0
 8005dd0:	2000089c 	.word	0x2000089c
 8005dd4:	20000d84 	.word	0x20000d84
 8005dd8:	20000d80 	.word	0x20000d80

08005ddc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005de2:	4b2a      	ldr	r3, [pc, #168]	; (8005e8c <vTaskSwitchContext+0xb0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005dea:	4b29      	ldr	r3, [pc, #164]	; (8005e90 <vTaskSwitchContext+0xb4>)
 8005dec:	2201      	movs	r2, #1
 8005dee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005df0:	e046      	b.n	8005e80 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005df2:	4b27      	ldr	r3, [pc, #156]	; (8005e90 <vTaskSwitchContext+0xb4>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df8:	4b26      	ldr	r3, [pc, #152]	; (8005e94 <vTaskSwitchContext+0xb8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	e010      	b.n	8005e22 <vTaskSwitchContext+0x46>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10a      	bne.n	8005e1c <vTaskSwitchContext+0x40>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	607b      	str	r3, [r7, #4]
}
 8005e18:	bf00      	nop
 8005e1a:	e7fe      	b.n	8005e1a <vTaskSwitchContext+0x3e>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	491d      	ldr	r1, [pc, #116]	; (8005e98 <vTaskSwitchContext+0xbc>)
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	440b      	add	r3, r1
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0e4      	beq.n	8005e00 <vTaskSwitchContext+0x24>
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4a15      	ldr	r2, [pc, #84]	; (8005e98 <vTaskSwitchContext+0xbc>)
 8005e42:	4413      	add	r3, r2
 8005e44:	60bb      	str	r3, [r7, #8]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	605a      	str	r2, [r3, #4]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	3308      	adds	r3, #8
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d104      	bne.n	8005e66 <vTaskSwitchContext+0x8a>
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	605a      	str	r2, [r3, #4]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	4a0b      	ldr	r2, [pc, #44]	; (8005e9c <vTaskSwitchContext+0xc0>)
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	4a08      	ldr	r2, [pc, #32]	; (8005e94 <vTaskSwitchContext+0xb8>)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e76:	4b09      	ldr	r3, [pc, #36]	; (8005e9c <vTaskSwitchContext+0xc0>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3354      	adds	r3, #84	; 0x54
 8005e7c:	4a08      	ldr	r2, [pc, #32]	; (8005ea0 <vTaskSwitchContext+0xc4>)
 8005e7e:	6013      	str	r3, [r2, #0]
}
 8005e80:	bf00      	nop
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	20000d98 	.word	0x20000d98
 8005e90:	20000d84 	.word	0x20000d84
 8005e94:	20000d78 	.word	0x20000d78
 8005e98:	200008a0 	.word	0x200008a0
 8005e9c:	2000089c 	.word	0x2000089c
 8005ea0:	20000078 	.word	0x20000078

08005ea4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10a      	bne.n	8005eca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	60fb      	str	r3, [r7, #12]
}
 8005ec6:	bf00      	nop
 8005ec8:	e7fe      	b.n	8005ec8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005eca:	4b07      	ldr	r3, [pc, #28]	; (8005ee8 <vTaskPlaceOnEventList+0x44>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3318      	adds	r3, #24
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7fe fe61 	bl	8004b9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ed8:	2101      	movs	r1, #1
 8005eda:	6838      	ldr	r0, [r7, #0]
 8005edc:	f000 fa80 	bl	80063e0 <prvAddCurrentTaskToDelayedList>
}
 8005ee0:	bf00      	nop
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	2000089c 	.word	0x2000089c

08005eec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10a      	bne.n	8005f14 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	617b      	str	r3, [r7, #20]
}
 8005f10:	bf00      	nop
 8005f12:	e7fe      	b.n	8005f12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f14:	4b0a      	ldr	r3, [pc, #40]	; (8005f40 <vTaskPlaceOnEventListRestricted+0x54>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3318      	adds	r3, #24
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f7fe fe18 	bl	8004b52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005f28:	f04f 33ff 	mov.w	r3, #4294967295
 8005f2c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	68b8      	ldr	r0, [r7, #8]
 8005f32:	f000 fa55 	bl	80063e0 <prvAddCurrentTaskToDelayedList>
	}
 8005f36:	bf00      	nop
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	2000089c 	.word	0x2000089c

08005f44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10a      	bne.n	8005f70 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	60fb      	str	r3, [r7, #12]
}
 8005f6c:	bf00      	nop
 8005f6e:	e7fe      	b.n	8005f6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	3318      	adds	r3, #24
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7fe fe49 	bl	8004c0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f7a:	4b1e      	ldr	r3, [pc, #120]	; (8005ff4 <xTaskRemoveFromEventList+0xb0>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d11d      	bne.n	8005fbe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	3304      	adds	r3, #4
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fe fe40 	bl	8004c0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f90:	4b19      	ldr	r3, [pc, #100]	; (8005ff8 <xTaskRemoveFromEventList+0xb4>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d903      	bls.n	8005fa0 <xTaskRemoveFromEventList+0x5c>
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	4a16      	ldr	r2, [pc, #88]	; (8005ff8 <xTaskRemoveFromEventList+0xb4>)
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4a13      	ldr	r2, [pc, #76]	; (8005ffc <xTaskRemoveFromEventList+0xb8>)
 8005fae:	441a      	add	r2, r3
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	f7fe fdcb 	bl	8004b52 <vListInsertEnd>
 8005fbc:	e005      	b.n	8005fca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	3318      	adds	r3, #24
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	480e      	ldr	r0, [pc, #56]	; (8006000 <xTaskRemoveFromEventList+0xbc>)
 8005fc6:	f7fe fdc4 	bl	8004b52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fce:	4b0d      	ldr	r3, [pc, #52]	; (8006004 <xTaskRemoveFromEventList+0xc0>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d905      	bls.n	8005fe4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fdc:	4b0a      	ldr	r3, [pc, #40]	; (8006008 <xTaskRemoveFromEventList+0xc4>)
 8005fde:	2201      	movs	r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	e001      	b.n	8005fe8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005fe8:	697b      	ldr	r3, [r7, #20]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20000d98 	.word	0x20000d98
 8005ff8:	20000d78 	.word	0x20000d78
 8005ffc:	200008a0 	.word	0x200008a0
 8006000:	20000d30 	.word	0x20000d30
 8006004:	2000089c 	.word	0x2000089c
 8006008:	20000d84 	.word	0x20000d84

0800600c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006014:	4b06      	ldr	r3, [pc, #24]	; (8006030 <vTaskInternalSetTimeOutState+0x24>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800601c:	4b05      	ldr	r3, [pc, #20]	; (8006034 <vTaskInternalSetTimeOutState+0x28>)
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	605a      	str	r2, [r3, #4]
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	20000d88 	.word	0x20000d88
 8006034:	20000d74 	.word	0x20000d74

08006038 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10a      	bne.n	800605e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	613b      	str	r3, [r7, #16]
}
 800605a:	bf00      	nop
 800605c:	e7fe      	b.n	800605c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10a      	bne.n	800607a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	60fb      	str	r3, [r7, #12]
}
 8006076:	bf00      	nop
 8006078:	e7fe      	b.n	8006078 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800607a:	f000 fe83 	bl	8006d84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800607e:	4b1d      	ldr	r3, [pc, #116]	; (80060f4 <xTaskCheckForTimeOut+0xbc>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006096:	d102      	bne.n	800609e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006098:	2300      	movs	r3, #0
 800609a:	61fb      	str	r3, [r7, #28]
 800609c:	e023      	b.n	80060e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	4b15      	ldr	r3, [pc, #84]	; (80060f8 <xTaskCheckForTimeOut+0xc0>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d007      	beq.n	80060ba <xTaskCheckForTimeOut+0x82>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d302      	bcc.n	80060ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060b4:	2301      	movs	r3, #1
 80060b6:	61fb      	str	r3, [r7, #28]
 80060b8:	e015      	b.n	80060e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d20b      	bcs.n	80060dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	1ad2      	subs	r2, r2, r3
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff ff9b 	bl	800600c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060d6:	2300      	movs	r3, #0
 80060d8:	61fb      	str	r3, [r7, #28]
 80060da:	e004      	b.n	80060e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060e2:	2301      	movs	r3, #1
 80060e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060e6:	f000 fe7d 	bl	8006de4 <vPortExitCritical>

	return xReturn;
 80060ea:	69fb      	ldr	r3, [r7, #28]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3720      	adds	r7, #32
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	20000d74 	.word	0x20000d74
 80060f8:	20000d88 	.word	0x20000d88

080060fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060fc:	b480      	push	{r7}
 80060fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006100:	4b03      	ldr	r3, [pc, #12]	; (8006110 <vTaskMissedYield+0x14>)
 8006102:	2201      	movs	r2, #1
 8006104:	601a      	str	r2, [r3, #0]
}
 8006106:	bf00      	nop
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	20000d84 	.word	0x20000d84

08006114 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800611c:	f000 f852 	bl	80061c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006120:	4b06      	ldr	r3, [pc, #24]	; (800613c <prvIdleTask+0x28>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d9f9      	bls.n	800611c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006128:	4b05      	ldr	r3, [pc, #20]	; (8006140 <prvIdleTask+0x2c>)
 800612a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006138:	e7f0      	b.n	800611c <prvIdleTask+0x8>
 800613a:	bf00      	nop
 800613c:	200008a0 	.word	0x200008a0
 8006140:	e000ed04 	.word	0xe000ed04

08006144 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800614a:	2300      	movs	r3, #0
 800614c:	607b      	str	r3, [r7, #4]
 800614e:	e00c      	b.n	800616a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4a12      	ldr	r2, [pc, #72]	; (80061a4 <prvInitialiseTaskLists+0x60>)
 800615c:	4413      	add	r3, r2
 800615e:	4618      	mov	r0, r3
 8006160:	f7fe fcca 	bl	8004af8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3301      	adds	r3, #1
 8006168:	607b      	str	r3, [r7, #4]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b37      	cmp	r3, #55	; 0x37
 800616e:	d9ef      	bls.n	8006150 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006170:	480d      	ldr	r0, [pc, #52]	; (80061a8 <prvInitialiseTaskLists+0x64>)
 8006172:	f7fe fcc1 	bl	8004af8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006176:	480d      	ldr	r0, [pc, #52]	; (80061ac <prvInitialiseTaskLists+0x68>)
 8006178:	f7fe fcbe 	bl	8004af8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800617c:	480c      	ldr	r0, [pc, #48]	; (80061b0 <prvInitialiseTaskLists+0x6c>)
 800617e:	f7fe fcbb 	bl	8004af8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006182:	480c      	ldr	r0, [pc, #48]	; (80061b4 <prvInitialiseTaskLists+0x70>)
 8006184:	f7fe fcb8 	bl	8004af8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006188:	480b      	ldr	r0, [pc, #44]	; (80061b8 <prvInitialiseTaskLists+0x74>)
 800618a:	f7fe fcb5 	bl	8004af8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800618e:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <prvInitialiseTaskLists+0x78>)
 8006190:	4a05      	ldr	r2, [pc, #20]	; (80061a8 <prvInitialiseTaskLists+0x64>)
 8006192:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006194:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <prvInitialiseTaskLists+0x7c>)
 8006196:	4a05      	ldr	r2, [pc, #20]	; (80061ac <prvInitialiseTaskLists+0x68>)
 8006198:	601a      	str	r2, [r3, #0]
}
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	200008a0 	.word	0x200008a0
 80061a8:	20000d00 	.word	0x20000d00
 80061ac:	20000d14 	.word	0x20000d14
 80061b0:	20000d30 	.word	0x20000d30
 80061b4:	20000d44 	.word	0x20000d44
 80061b8:	20000d5c 	.word	0x20000d5c
 80061bc:	20000d28 	.word	0x20000d28
 80061c0:	20000d2c 	.word	0x20000d2c

080061c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061ca:	e019      	b.n	8006200 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061cc:	f000 fdda 	bl	8006d84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d0:	4b10      	ldr	r3, [pc, #64]	; (8006214 <prvCheckTasksWaitingTermination+0x50>)
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3304      	adds	r3, #4
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fe fd15 	bl	8004c0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061e2:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <prvCheckTasksWaitingTermination+0x54>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	4a0b      	ldr	r2, [pc, #44]	; (8006218 <prvCheckTasksWaitingTermination+0x54>)
 80061ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061ec:	4b0b      	ldr	r3, [pc, #44]	; (800621c <prvCheckTasksWaitingTermination+0x58>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	4a0a      	ldr	r2, [pc, #40]	; (800621c <prvCheckTasksWaitingTermination+0x58>)
 80061f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061f6:	f000 fdf5 	bl	8006de4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f810 	bl	8006220 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006200:	4b06      	ldr	r3, [pc, #24]	; (800621c <prvCheckTasksWaitingTermination+0x58>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e1      	bne.n	80061cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20000d44 	.word	0x20000d44
 8006218:	20000d70 	.word	0x20000d70
 800621c:	20000d58 	.word	0x20000d58

08006220 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3354      	adds	r3, #84	; 0x54
 800622c:	4618      	mov	r0, r3
 800622e:	f001 fd7b 	bl	8007d28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006238:	2b00      	cmp	r3, #0
 800623a:	d108      	bne.n	800624e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006240:	4618      	mov	r0, r3
 8006242:	f000 ff8d 	bl	8007160 <vPortFree>
				vPortFree( pxTCB );
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 ff8a 	bl	8007160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800624c:	e018      	b.n	8006280 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006254:	2b01      	cmp	r3, #1
 8006256:	d103      	bne.n	8006260 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 ff81 	bl	8007160 <vPortFree>
	}
 800625e:	e00f      	b.n	8006280 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006266:	2b02      	cmp	r3, #2
 8006268:	d00a      	beq.n	8006280 <prvDeleteTCB+0x60>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	60fb      	str	r3, [r7, #12]
}
 800627c:	bf00      	nop
 800627e:	e7fe      	b.n	800627e <prvDeleteTCB+0x5e>
	}
 8006280:	bf00      	nop
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800628e:	4b0c      	ldr	r3, [pc, #48]	; (80062c0 <prvResetNextTaskUnblockTime+0x38>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d104      	bne.n	80062a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006298:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <prvResetNextTaskUnblockTime+0x3c>)
 800629a:	f04f 32ff 	mov.w	r2, #4294967295
 800629e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062a0:	e008      	b.n	80062b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062a2:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <prvResetNextTaskUnblockTime+0x38>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	4a04      	ldr	r2, [pc, #16]	; (80062c4 <prvResetNextTaskUnblockTime+0x3c>)
 80062b2:	6013      	str	r3, [r2, #0]
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	20000d28 	.word	0x20000d28
 80062c4:	20000d90 	.word	0x20000d90

080062c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062ce:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <xTaskGetSchedulerState+0x34>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d102      	bne.n	80062dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062d6:	2301      	movs	r3, #1
 80062d8:	607b      	str	r3, [r7, #4]
 80062da:	e008      	b.n	80062ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062dc:	4b08      	ldr	r3, [pc, #32]	; (8006300 <xTaskGetSchedulerState+0x38>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d102      	bne.n	80062ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062e4:	2302      	movs	r3, #2
 80062e6:	607b      	str	r3, [r7, #4]
 80062e8:	e001      	b.n	80062ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062ea:	2300      	movs	r3, #0
 80062ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062ee:	687b      	ldr	r3, [r7, #4]
	}
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	20000d7c 	.word	0x20000d7c
 8006300:	20000d98 	.word	0x20000d98

08006304 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006310:	2300      	movs	r3, #0
 8006312:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d056      	beq.n	80063c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800631a:	4b2e      	ldr	r3, [pc, #184]	; (80063d4 <xTaskPriorityDisinherit+0xd0>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	429a      	cmp	r2, r3
 8006322:	d00a      	beq.n	800633a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	60fb      	str	r3, [r7, #12]
}
 8006336:	bf00      	nop
 8006338:	e7fe      	b.n	8006338 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10a      	bne.n	8006358 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	60bb      	str	r3, [r7, #8]
}
 8006354:	bf00      	nop
 8006356:	e7fe      	b.n	8006356 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800635c:	1e5a      	subs	r2, r3, #1
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800636a:	429a      	cmp	r2, r3
 800636c:	d02c      	beq.n	80063c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006372:	2b00      	cmp	r3, #0
 8006374:	d128      	bne.n	80063c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	3304      	adds	r3, #4
 800637a:	4618      	mov	r0, r3
 800637c:	f7fe fc46 	bl	8004c0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006398:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <xTaskPriorityDisinherit+0xd4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	429a      	cmp	r2, r3
 800639e:	d903      	bls.n	80063a8 <xTaskPriorityDisinherit+0xa4>
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	4a0c      	ldr	r2, [pc, #48]	; (80063d8 <xTaskPriorityDisinherit+0xd4>)
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ac:	4613      	mov	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4a09      	ldr	r2, [pc, #36]	; (80063dc <xTaskPriorityDisinherit+0xd8>)
 80063b6:	441a      	add	r2, r3
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	3304      	adds	r3, #4
 80063bc:	4619      	mov	r1, r3
 80063be:	4610      	mov	r0, r2
 80063c0:	f7fe fbc7 	bl	8004b52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063c4:	2301      	movs	r3, #1
 80063c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063c8:	697b      	ldr	r3, [r7, #20]
	}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	2000089c 	.word	0x2000089c
 80063d8:	20000d78 	.word	0x20000d78
 80063dc:	200008a0 	.word	0x200008a0

080063e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063ea:	4b21      	ldr	r3, [pc, #132]	; (8006470 <prvAddCurrentTaskToDelayedList+0x90>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063f0:	4b20      	ldr	r3, [pc, #128]	; (8006474 <prvAddCurrentTaskToDelayedList+0x94>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3304      	adds	r3, #4
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe fc08 	bl	8004c0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006402:	d10a      	bne.n	800641a <prvAddCurrentTaskToDelayedList+0x3a>
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d007      	beq.n	800641a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800640a:	4b1a      	ldr	r3, [pc, #104]	; (8006474 <prvAddCurrentTaskToDelayedList+0x94>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3304      	adds	r3, #4
 8006410:	4619      	mov	r1, r3
 8006412:	4819      	ldr	r0, [pc, #100]	; (8006478 <prvAddCurrentTaskToDelayedList+0x98>)
 8006414:	f7fe fb9d 	bl	8004b52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006418:	e026      	b.n	8006468 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4413      	add	r3, r2
 8006420:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006422:	4b14      	ldr	r3, [pc, #80]	; (8006474 <prvAddCurrentTaskToDelayedList+0x94>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	429a      	cmp	r2, r3
 8006430:	d209      	bcs.n	8006446 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006432:	4b12      	ldr	r3, [pc, #72]	; (800647c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4b0f      	ldr	r3, [pc, #60]	; (8006474 <prvAddCurrentTaskToDelayedList+0x94>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3304      	adds	r3, #4
 800643c:	4619      	mov	r1, r3
 800643e:	4610      	mov	r0, r2
 8006440:	f7fe fbab 	bl	8004b9a <vListInsert>
}
 8006444:	e010      	b.n	8006468 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006446:	4b0e      	ldr	r3, [pc, #56]	; (8006480 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	4b0a      	ldr	r3, [pc, #40]	; (8006474 <prvAddCurrentTaskToDelayedList+0x94>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3304      	adds	r3, #4
 8006450:	4619      	mov	r1, r3
 8006452:	4610      	mov	r0, r2
 8006454:	f7fe fba1 	bl	8004b9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006458:	4b0a      	ldr	r3, [pc, #40]	; (8006484 <prvAddCurrentTaskToDelayedList+0xa4>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	429a      	cmp	r2, r3
 8006460:	d202      	bcs.n	8006468 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006462:	4a08      	ldr	r2, [pc, #32]	; (8006484 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	6013      	str	r3, [r2, #0]
}
 8006468:	bf00      	nop
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20000d74 	.word	0x20000d74
 8006474:	2000089c 	.word	0x2000089c
 8006478:	20000d5c 	.word	0x20000d5c
 800647c:	20000d2c 	.word	0x20000d2c
 8006480:	20000d28 	.word	0x20000d28
 8006484:	20000d90 	.word	0x20000d90

08006488 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08a      	sub	sp, #40	; 0x28
 800648c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800648e:	2300      	movs	r3, #0
 8006490:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006492:	f000 fb07 	bl	8006aa4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006496:	4b1c      	ldr	r3, [pc, #112]	; (8006508 <xTimerCreateTimerTask+0x80>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d021      	beq.n	80064e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80064a6:	1d3a      	adds	r2, r7, #4
 80064a8:	f107 0108 	add.w	r1, r7, #8
 80064ac:	f107 030c 	add.w	r3, r7, #12
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7fe fb07 	bl	8004ac4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	9202      	str	r2, [sp, #8]
 80064be:	9301      	str	r3, [sp, #4]
 80064c0:	2302      	movs	r3, #2
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	2300      	movs	r3, #0
 80064c6:	460a      	mov	r2, r1
 80064c8:	4910      	ldr	r1, [pc, #64]	; (800650c <xTimerCreateTimerTask+0x84>)
 80064ca:	4811      	ldr	r0, [pc, #68]	; (8006510 <xTimerCreateTimerTask+0x88>)
 80064cc:	f7ff f8b4 	bl	8005638 <xTaskCreateStatic>
 80064d0:	4603      	mov	r3, r0
 80064d2:	4a10      	ldr	r2, [pc, #64]	; (8006514 <xTimerCreateTimerTask+0x8c>)
 80064d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80064d6:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <xTimerCreateTimerTask+0x8c>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80064de:	2301      	movs	r3, #1
 80064e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10a      	bne.n	80064fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	613b      	str	r3, [r7, #16]
}
 80064fa:	bf00      	nop
 80064fc:	e7fe      	b.n	80064fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80064fe:	697b      	ldr	r3, [r7, #20]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3718      	adds	r7, #24
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	20000dcc 	.word	0x20000dcc
 800650c:	08008a20 	.word	0x08008a20
 8006510:	0800664d 	.word	0x0800664d
 8006514:	20000dd0 	.word	0x20000dd0

08006518 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b08a      	sub	sp, #40	; 0x28
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006526:	2300      	movs	r3, #0
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	623b      	str	r3, [r7, #32]
}
 8006542:	bf00      	nop
 8006544:	e7fe      	b.n	8006544 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006546:	4b1a      	ldr	r3, [pc, #104]	; (80065b0 <xTimerGenericCommand+0x98>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d02a      	beq.n	80065a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2b05      	cmp	r3, #5
 800655e:	dc18      	bgt.n	8006592 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006560:	f7ff feb2 	bl	80062c8 <xTaskGetSchedulerState>
 8006564:	4603      	mov	r3, r0
 8006566:	2b02      	cmp	r3, #2
 8006568:	d109      	bne.n	800657e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800656a:	4b11      	ldr	r3, [pc, #68]	; (80065b0 <xTimerGenericCommand+0x98>)
 800656c:	6818      	ldr	r0, [r3, #0]
 800656e:	f107 0110 	add.w	r1, r7, #16
 8006572:	2300      	movs	r3, #0
 8006574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006576:	f7fe fc77 	bl	8004e68 <xQueueGenericSend>
 800657a:	6278      	str	r0, [r7, #36]	; 0x24
 800657c:	e012      	b.n	80065a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800657e:	4b0c      	ldr	r3, [pc, #48]	; (80065b0 <xTimerGenericCommand+0x98>)
 8006580:	6818      	ldr	r0, [r3, #0]
 8006582:	f107 0110 	add.w	r1, r7, #16
 8006586:	2300      	movs	r3, #0
 8006588:	2200      	movs	r2, #0
 800658a:	f7fe fc6d 	bl	8004e68 <xQueueGenericSend>
 800658e:	6278      	str	r0, [r7, #36]	; 0x24
 8006590:	e008      	b.n	80065a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006592:	4b07      	ldr	r3, [pc, #28]	; (80065b0 <xTimerGenericCommand+0x98>)
 8006594:	6818      	ldr	r0, [r3, #0]
 8006596:	f107 0110 	add.w	r1, r7, #16
 800659a:	2300      	movs	r3, #0
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	f7fe fd61 	bl	8005064 <xQueueGenericSendFromISR>
 80065a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3728      	adds	r7, #40	; 0x28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20000dcc 	.word	0x20000dcc

080065b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af02      	add	r7, sp, #8
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065be:	4b22      	ldr	r3, [pc, #136]	; (8006648 <prvProcessExpiredTimer+0x94>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	3304      	adds	r3, #4
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fe fb1d 	bl	8004c0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d022      	beq.n	8006626 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	699a      	ldr	r2, [r3, #24]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	18d1      	adds	r1, r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	6978      	ldr	r0, [r7, #20]
 80065ee:	f000 f8d1 	bl	8006794 <prvInsertTimerInActiveList>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d01f      	beq.n	8006638 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065f8:	2300      	movs	r3, #0
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	2300      	movs	r3, #0
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	2100      	movs	r1, #0
 8006602:	6978      	ldr	r0, [r7, #20]
 8006604:	f7ff ff88 	bl	8006518 <xTimerGenericCommand>
 8006608:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d113      	bne.n	8006638 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	60fb      	str	r3, [r7, #12]
}
 8006622:	bf00      	nop
 8006624:	e7fe      	b.n	8006624 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800662c:	f023 0301 	bic.w	r3, r3, #1
 8006630:	b2da      	uxtb	r2, r3
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	6978      	ldr	r0, [r7, #20]
 800663e:	4798      	blx	r3
}
 8006640:	bf00      	nop
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	20000dc4 	.word	0x20000dc4

0800664c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006654:	f107 0308 	add.w	r3, r7, #8
 8006658:	4618      	mov	r0, r3
 800665a:	f000 f857 	bl	800670c <prvGetNextExpireTime>
 800665e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	4619      	mov	r1, r3
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 f803 	bl	8006670 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800666a:	f000 f8d5 	bl	8006818 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800666e:	e7f1      	b.n	8006654 <prvTimerTask+0x8>

08006670 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800667a:	f7ff fa39 	bl	8005af0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800667e:	f107 0308 	add.w	r3, r7, #8
 8006682:	4618      	mov	r0, r3
 8006684:	f000 f866 	bl	8006754 <prvSampleTimeNow>
 8006688:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d130      	bne.n	80066f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10a      	bne.n	80066ac <prvProcessTimerOrBlockTask+0x3c>
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	429a      	cmp	r2, r3
 800669c:	d806      	bhi.n	80066ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800669e:	f7ff fa35 	bl	8005b0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80066a2:	68f9      	ldr	r1, [r7, #12]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7ff ff85 	bl	80065b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80066aa:	e024      	b.n	80066f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d008      	beq.n	80066c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80066b2:	4b13      	ldr	r3, [pc, #76]	; (8006700 <prvProcessTimerOrBlockTask+0x90>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <prvProcessTimerOrBlockTask+0x50>
 80066bc:	2301      	movs	r3, #1
 80066be:	e000      	b.n	80066c2 <prvProcessTimerOrBlockTask+0x52>
 80066c0:	2300      	movs	r3, #0
 80066c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80066c4:	4b0f      	ldr	r3, [pc, #60]	; (8006704 <prvProcessTimerOrBlockTask+0x94>)
 80066c6:	6818      	ldr	r0, [r3, #0]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	4619      	mov	r1, r3
 80066d2:	f7fe ff7d 	bl	80055d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80066d6:	f7ff fa19 	bl	8005b0c <xTaskResumeAll>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10a      	bne.n	80066f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80066e0:	4b09      	ldr	r3, [pc, #36]	; (8006708 <prvProcessTimerOrBlockTask+0x98>)
 80066e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	f3bf 8f6f 	isb	sy
}
 80066f0:	e001      	b.n	80066f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80066f2:	f7ff fa0b 	bl	8005b0c <xTaskResumeAll>
}
 80066f6:	bf00      	nop
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20000dc8 	.word	0x20000dc8
 8006704:	20000dcc 	.word	0x20000dcc
 8006708:	e000ed04 	.word	0xe000ed04

0800670c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006714:	4b0e      	ldr	r3, [pc, #56]	; (8006750 <prvGetNextExpireTime+0x44>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <prvGetNextExpireTime+0x16>
 800671e:	2201      	movs	r2, #1
 8006720:	e000      	b.n	8006724 <prvGetNextExpireTime+0x18>
 8006722:	2200      	movs	r2, #0
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d105      	bne.n	800673c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006730:	4b07      	ldr	r3, [pc, #28]	; (8006750 <prvGetNextExpireTime+0x44>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	e001      	b.n	8006740 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006740:	68fb      	ldr	r3, [r7, #12]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	20000dc4 	.word	0x20000dc4

08006754 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800675c:	f7ff fa74 	bl	8005c48 <xTaskGetTickCount>
 8006760:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006762:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <prvSampleTimeNow+0x3c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	429a      	cmp	r2, r3
 800676a:	d205      	bcs.n	8006778 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800676c:	f000 f936 	bl	80069dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	e002      	b.n	800677e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800677e:	4a04      	ldr	r2, [pc, #16]	; (8006790 <prvSampleTimeNow+0x3c>)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006784:	68fb      	ldr	r3, [r7, #12]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20000dd4 	.word	0x20000dd4

08006794 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80067a2:	2300      	movs	r3, #0
 80067a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d812      	bhi.n	80067e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	1ad2      	subs	r2, r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d302      	bcc.n	80067ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80067c8:	2301      	movs	r3, #1
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	e01b      	b.n	8006806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80067ce:	4b10      	ldr	r3, [pc, #64]	; (8006810 <prvInsertTimerInActiveList+0x7c>)
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3304      	adds	r3, #4
 80067d6:	4619      	mov	r1, r3
 80067d8:	4610      	mov	r0, r2
 80067da:	f7fe f9de 	bl	8004b9a <vListInsert>
 80067de:	e012      	b.n	8006806 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d206      	bcs.n	80067f6 <prvInsertTimerInActiveList+0x62>
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d302      	bcc.n	80067f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80067f0:	2301      	movs	r3, #1
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	e007      	b.n	8006806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067f6:	4b07      	ldr	r3, [pc, #28]	; (8006814 <prvInsertTimerInActiveList+0x80>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3304      	adds	r3, #4
 80067fe:	4619      	mov	r1, r3
 8006800:	4610      	mov	r0, r2
 8006802:	f7fe f9ca 	bl	8004b9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006806:	697b      	ldr	r3, [r7, #20]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3718      	adds	r7, #24
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	20000dc8 	.word	0x20000dc8
 8006814:	20000dc4 	.word	0x20000dc4

08006818 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08e      	sub	sp, #56	; 0x38
 800681c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800681e:	e0ca      	b.n	80069b6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	da18      	bge.n	8006858 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006826:	1d3b      	adds	r3, r7, #4
 8006828:	3304      	adds	r3, #4
 800682a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800682c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10a      	bne.n	8006848 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	61fb      	str	r3, [r7, #28]
}
 8006844:	bf00      	nop
 8006846:	e7fe      	b.n	8006846 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800684e:	6850      	ldr	r0, [r2, #4]
 8006850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006852:	6892      	ldr	r2, [r2, #8]
 8006854:	4611      	mov	r1, r2
 8006856:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	f2c0 80aa 	blt.w	80069b4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d004      	beq.n	8006876 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686e:	3304      	adds	r3, #4
 8006870:	4618      	mov	r0, r3
 8006872:	f7fe f9cb 	bl	8004c0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006876:	463b      	mov	r3, r7
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff ff6b 	bl	8006754 <prvSampleTimeNow>
 800687e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b09      	cmp	r3, #9
 8006884:	f200 8097 	bhi.w	80069b6 <prvProcessReceivedCommands+0x19e>
 8006888:	a201      	add	r2, pc, #4	; (adr r2, 8006890 <prvProcessReceivedCommands+0x78>)
 800688a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688e:	bf00      	nop
 8006890:	080068b9 	.word	0x080068b9
 8006894:	080068b9 	.word	0x080068b9
 8006898:	080068b9 	.word	0x080068b9
 800689c:	0800692d 	.word	0x0800692d
 80068a0:	08006941 	.word	0x08006941
 80068a4:	0800698b 	.word	0x0800698b
 80068a8:	080068b9 	.word	0x080068b9
 80068ac:	080068b9 	.word	0x080068b9
 80068b0:	0800692d 	.word	0x0800692d
 80068b4:	08006941 	.word	0x08006941
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068be:	f043 0301 	orr.w	r3, r3, #1
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	18d1      	adds	r1, r2, r3
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068d8:	f7ff ff5c 	bl	8006794 <prvInsertTimerInActiveList>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d069      	beq.n	80069b6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d05e      	beq.n	80069b6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	441a      	add	r2, r3
 8006900:	2300      	movs	r3, #0
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	2300      	movs	r3, #0
 8006906:	2100      	movs	r1, #0
 8006908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800690a:	f7ff fe05 	bl	8006518 <xTimerGenericCommand>
 800690e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d14f      	bne.n	80069b6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	61bb      	str	r3, [r7, #24]
}
 8006928:	bf00      	nop
 800692a:	e7fe      	b.n	800692a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006932:	f023 0301 	bic.w	r3, r3, #1
 8006936:	b2da      	uxtb	r2, r3
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800693e:	e03a      	b.n	80069b6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006946:	f043 0301 	orr.w	r3, r3, #1
 800694a:	b2da      	uxtb	r2, r3
 800694c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006956:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10a      	bne.n	8006976 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	617b      	str	r3, [r7, #20]
}
 8006972:	bf00      	nop
 8006974:	e7fe      	b.n	8006974 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006978:	699a      	ldr	r2, [r3, #24]
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	18d1      	adds	r1, r2, r3
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006984:	f7ff ff06 	bl	8006794 <prvInsertTimerInActiveList>
					break;
 8006988:	e015      	b.n	80069b6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d103      	bne.n	80069a0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800699a:	f000 fbe1 	bl	8007160 <vPortFree>
 800699e:	e00a      	b.n	80069b6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069a6:	f023 0301 	bic.w	r3, r3, #1
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80069b2:	e000      	b.n	80069b6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80069b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069b6:	4b08      	ldr	r3, [pc, #32]	; (80069d8 <prvProcessReceivedCommands+0x1c0>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	1d39      	adds	r1, r7, #4
 80069bc:	2200      	movs	r2, #0
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fe fbec 	bl	800519c <xQueueReceive>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f47f af2a 	bne.w	8006820 <prvProcessReceivedCommands+0x8>
	}
}
 80069cc:	bf00      	nop
 80069ce:	bf00      	nop
 80069d0:	3730      	adds	r7, #48	; 0x30
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20000dcc 	.word	0x20000dcc

080069dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069e2:	e048      	b.n	8006a76 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069e4:	4b2d      	ldr	r3, [pc, #180]	; (8006a9c <prvSwitchTimerLists+0xc0>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ee:	4b2b      	ldr	r3, [pc, #172]	; (8006a9c <prvSwitchTimerLists+0xc0>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3304      	adds	r3, #4
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7fe f905 	bl	8004c0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d02e      	beq.n	8006a76 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	4413      	add	r3, r2
 8006a20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d90e      	bls.n	8006a48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a36:	4b19      	ldr	r3, [pc, #100]	; (8006a9c <prvSwitchTimerLists+0xc0>)
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4610      	mov	r0, r2
 8006a42:	f7fe f8aa 	bl	8004b9a <vListInsert>
 8006a46:	e016      	b.n	8006a76 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a48:	2300      	movs	r3, #0
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	2100      	movs	r1, #0
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f7ff fd60 	bl	8006518 <xTimerGenericCommand>
 8006a58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	603b      	str	r3, [r7, #0]
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a76:	4b09      	ldr	r3, [pc, #36]	; (8006a9c <prvSwitchTimerLists+0xc0>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1b1      	bne.n	80069e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a80:	4b06      	ldr	r3, [pc, #24]	; (8006a9c <prvSwitchTimerLists+0xc0>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a86:	4b06      	ldr	r3, [pc, #24]	; (8006aa0 <prvSwitchTimerLists+0xc4>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a04      	ldr	r2, [pc, #16]	; (8006a9c <prvSwitchTimerLists+0xc0>)
 8006a8c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a8e:	4a04      	ldr	r2, [pc, #16]	; (8006aa0 <prvSwitchTimerLists+0xc4>)
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	6013      	str	r3, [r2, #0]
}
 8006a94:	bf00      	nop
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	20000dc4 	.word	0x20000dc4
 8006aa0:	20000dc8 	.word	0x20000dc8

08006aa4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006aaa:	f000 f96b 	bl	8006d84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006aae:	4b15      	ldr	r3, [pc, #84]	; (8006b04 <prvCheckForValidListAndQueue+0x60>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d120      	bne.n	8006af8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ab6:	4814      	ldr	r0, [pc, #80]	; (8006b08 <prvCheckForValidListAndQueue+0x64>)
 8006ab8:	f7fe f81e 	bl	8004af8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006abc:	4813      	ldr	r0, [pc, #76]	; (8006b0c <prvCheckForValidListAndQueue+0x68>)
 8006abe:	f7fe f81b 	bl	8004af8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ac2:	4b13      	ldr	r3, [pc, #76]	; (8006b10 <prvCheckForValidListAndQueue+0x6c>)
 8006ac4:	4a10      	ldr	r2, [pc, #64]	; (8006b08 <prvCheckForValidListAndQueue+0x64>)
 8006ac6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ac8:	4b12      	ldr	r3, [pc, #72]	; (8006b14 <prvCheckForValidListAndQueue+0x70>)
 8006aca:	4a10      	ldr	r2, [pc, #64]	; (8006b0c <prvCheckForValidListAndQueue+0x68>)
 8006acc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ace:	2300      	movs	r3, #0
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	4b11      	ldr	r3, [pc, #68]	; (8006b18 <prvCheckForValidListAndQueue+0x74>)
 8006ad4:	4a11      	ldr	r2, [pc, #68]	; (8006b1c <prvCheckForValidListAndQueue+0x78>)
 8006ad6:	2110      	movs	r1, #16
 8006ad8:	200a      	movs	r0, #10
 8006ada:	f7fe f929 	bl	8004d30 <xQueueGenericCreateStatic>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	4a08      	ldr	r2, [pc, #32]	; (8006b04 <prvCheckForValidListAndQueue+0x60>)
 8006ae2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ae4:	4b07      	ldr	r3, [pc, #28]	; (8006b04 <prvCheckForValidListAndQueue+0x60>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006aec:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <prvCheckForValidListAndQueue+0x60>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	490b      	ldr	r1, [pc, #44]	; (8006b20 <prvCheckForValidListAndQueue+0x7c>)
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fe fd42 	bl	800557c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006af8:	f000 f974 	bl	8006de4 <vPortExitCritical>
}
 8006afc:	bf00      	nop
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20000dcc 	.word	0x20000dcc
 8006b08:	20000d9c 	.word	0x20000d9c
 8006b0c:	20000db0 	.word	0x20000db0
 8006b10:	20000dc4 	.word	0x20000dc4
 8006b14:	20000dc8 	.word	0x20000dc8
 8006b18:	20000e78 	.word	0x20000e78
 8006b1c:	20000dd8 	.word	0x20000dd8
 8006b20:	08008a28 	.word	0x08008a28

08006b24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3b04      	subs	r3, #4
 8006b34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	3b04      	subs	r3, #4
 8006b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f023 0201 	bic.w	r2, r3, #1
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3b04      	subs	r3, #4
 8006b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b54:	4a0c      	ldr	r2, [pc, #48]	; (8006b88 <pxPortInitialiseStack+0x64>)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3b14      	subs	r3, #20
 8006b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3b04      	subs	r3, #4
 8006b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f06f 0202 	mvn.w	r2, #2
 8006b72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	3b20      	subs	r3, #32
 8006b78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	08006b8d 	.word	0x08006b8d

08006b8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b92:	2300      	movs	r3, #0
 8006b94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b96:	4b12      	ldr	r3, [pc, #72]	; (8006be0 <prvTaskExitError+0x54>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9e:	d00a      	beq.n	8006bb6 <prvTaskExitError+0x2a>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	60fb      	str	r3, [r7, #12]
}
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <prvTaskExitError+0x28>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	60bb      	str	r3, [r7, #8]
}
 8006bc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bca:	bf00      	nop
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d0fc      	beq.n	8006bcc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006bd2:	bf00      	nop
 8006bd4:	bf00      	nop
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	2000000c 	.word	0x2000000c
	...

08006bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006bf0:	4b07      	ldr	r3, [pc, #28]	; (8006c10 <pxCurrentTCBConst2>)
 8006bf2:	6819      	ldr	r1, [r3, #0]
 8006bf4:	6808      	ldr	r0, [r1, #0]
 8006bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfa:	f380 8809 	msr	PSP, r0
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f04f 0000 	mov.w	r0, #0
 8006c06:	f380 8811 	msr	BASEPRI, r0
 8006c0a:	4770      	bx	lr
 8006c0c:	f3af 8000 	nop.w

08006c10 <pxCurrentTCBConst2>:
 8006c10:	2000089c 	.word	0x2000089c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c14:	bf00      	nop
 8006c16:	bf00      	nop

08006c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c18:	4808      	ldr	r0, [pc, #32]	; (8006c3c <prvPortStartFirstTask+0x24>)
 8006c1a:	6800      	ldr	r0, [r0, #0]
 8006c1c:	6800      	ldr	r0, [r0, #0]
 8006c1e:	f380 8808 	msr	MSP, r0
 8006c22:	f04f 0000 	mov.w	r0, #0
 8006c26:	f380 8814 	msr	CONTROL, r0
 8006c2a:	b662      	cpsie	i
 8006c2c:	b661      	cpsie	f
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	df00      	svc	0
 8006c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c3a:	bf00      	nop
 8006c3c:	e000ed08 	.word	0xe000ed08

08006c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c46:	4b46      	ldr	r3, [pc, #280]	; (8006d60 <xPortStartScheduler+0x120>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a46      	ldr	r2, [pc, #280]	; (8006d64 <xPortStartScheduler+0x124>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d10a      	bne.n	8006c66 <xPortStartScheduler+0x26>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	613b      	str	r3, [r7, #16]
}
 8006c62:	bf00      	nop
 8006c64:	e7fe      	b.n	8006c64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c66:	4b3e      	ldr	r3, [pc, #248]	; (8006d60 <xPortStartScheduler+0x120>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a3f      	ldr	r2, [pc, #252]	; (8006d68 <xPortStartScheduler+0x128>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d10a      	bne.n	8006c86 <xPortStartScheduler+0x46>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	60fb      	str	r3, [r7, #12]
}
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c86:	4b39      	ldr	r3, [pc, #228]	; (8006d6c <xPortStartScheduler+0x12c>)
 8006c88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	22ff      	movs	r2, #255	; 0xff
 8006c96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ca0:	78fb      	ldrb	r3, [r7, #3]
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	4b31      	ldr	r3, [pc, #196]	; (8006d70 <xPortStartScheduler+0x130>)
 8006cac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cae:	4b31      	ldr	r3, [pc, #196]	; (8006d74 <xPortStartScheduler+0x134>)
 8006cb0:	2207      	movs	r2, #7
 8006cb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cb4:	e009      	b.n	8006cca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006cb6:	4b2f      	ldr	r3, [pc, #188]	; (8006d74 <xPortStartScheduler+0x134>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	4a2d      	ldr	r2, [pc, #180]	; (8006d74 <xPortStartScheduler+0x134>)
 8006cbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006cc0:	78fb      	ldrb	r3, [r7, #3]
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cca:	78fb      	ldrb	r3, [r7, #3]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd2:	2b80      	cmp	r3, #128	; 0x80
 8006cd4:	d0ef      	beq.n	8006cb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cd6:	4b27      	ldr	r3, [pc, #156]	; (8006d74 <xPortStartScheduler+0x134>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f1c3 0307 	rsb	r3, r3, #7
 8006cde:	2b04      	cmp	r3, #4
 8006ce0:	d00a      	beq.n	8006cf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	60bb      	str	r3, [r7, #8]
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cf8:	4b1e      	ldr	r3, [pc, #120]	; (8006d74 <xPortStartScheduler+0x134>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	021b      	lsls	r3, r3, #8
 8006cfe:	4a1d      	ldr	r2, [pc, #116]	; (8006d74 <xPortStartScheduler+0x134>)
 8006d00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d02:	4b1c      	ldr	r3, [pc, #112]	; (8006d74 <xPortStartScheduler+0x134>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d0a:	4a1a      	ldr	r2, [pc, #104]	; (8006d74 <xPortStartScheduler+0x134>)
 8006d0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d16:	4b18      	ldr	r3, [pc, #96]	; (8006d78 <xPortStartScheduler+0x138>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a17      	ldr	r2, [pc, #92]	; (8006d78 <xPortStartScheduler+0x138>)
 8006d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d22:	4b15      	ldr	r3, [pc, #84]	; (8006d78 <xPortStartScheduler+0x138>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a14      	ldr	r2, [pc, #80]	; (8006d78 <xPortStartScheduler+0x138>)
 8006d28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d2e:	f000 f8dd 	bl	8006eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d32:	4b12      	ldr	r3, [pc, #72]	; (8006d7c <xPortStartScheduler+0x13c>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d38:	f000 f8fc 	bl	8006f34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d3c:	4b10      	ldr	r3, [pc, #64]	; (8006d80 <xPortStartScheduler+0x140>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a0f      	ldr	r2, [pc, #60]	; (8006d80 <xPortStartScheduler+0x140>)
 8006d42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d48:	f7ff ff66 	bl	8006c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d4c:	f7ff f846 	bl	8005ddc <vTaskSwitchContext>
	prvTaskExitError();
 8006d50:	f7ff ff1c 	bl	8006b8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3718      	adds	r7, #24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	e000ed00 	.word	0xe000ed00
 8006d64:	410fc271 	.word	0x410fc271
 8006d68:	410fc270 	.word	0x410fc270
 8006d6c:	e000e400 	.word	0xe000e400
 8006d70:	20000ec8 	.word	0x20000ec8
 8006d74:	20000ecc 	.word	0x20000ecc
 8006d78:	e000ed20 	.word	0xe000ed20
 8006d7c:	2000000c 	.word	0x2000000c
 8006d80:	e000ef34 	.word	0xe000ef34

08006d84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
	__asm volatile
 8006d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	607b      	str	r3, [r7, #4]
}
 8006d9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d9e:	4b0f      	ldr	r3, [pc, #60]	; (8006ddc <vPortEnterCritical+0x58>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3301      	adds	r3, #1
 8006da4:	4a0d      	ldr	r2, [pc, #52]	; (8006ddc <vPortEnterCritical+0x58>)
 8006da6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006da8:	4b0c      	ldr	r3, [pc, #48]	; (8006ddc <vPortEnterCritical+0x58>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d10f      	bne.n	8006dd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006db0:	4b0b      	ldr	r3, [pc, #44]	; (8006de0 <vPortEnterCritical+0x5c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00a      	beq.n	8006dd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	603b      	str	r3, [r7, #0]
}
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <vPortEnterCritical+0x4a>
	}
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	2000000c 	.word	0x2000000c
 8006de0:	e000ed04 	.word	0xe000ed04

08006de4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006dea:	4b12      	ldr	r3, [pc, #72]	; (8006e34 <vPortExitCritical+0x50>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10a      	bne.n	8006e08 <vPortExitCritical+0x24>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	607b      	str	r3, [r7, #4]
}
 8006e04:	bf00      	nop
 8006e06:	e7fe      	b.n	8006e06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e08:	4b0a      	ldr	r3, [pc, #40]	; (8006e34 <vPortExitCritical+0x50>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	4a09      	ldr	r2, [pc, #36]	; (8006e34 <vPortExitCritical+0x50>)
 8006e10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e12:	4b08      	ldr	r3, [pc, #32]	; (8006e34 <vPortExitCritical+0x50>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d105      	bne.n	8006e26 <vPortExitCritical+0x42>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	f383 8811 	msr	BASEPRI, r3
}
 8006e24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	2000000c 	.word	0x2000000c
	...

08006e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e40:	f3ef 8009 	mrs	r0, PSP
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	4b15      	ldr	r3, [pc, #84]	; (8006ea0 <pxCurrentTCBConst>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	f01e 0f10 	tst.w	lr, #16
 8006e50:	bf08      	it	eq
 8006e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5a:	6010      	str	r0, [r2, #0]
 8006e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e64:	f380 8811 	msr	BASEPRI, r0
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f7fe ffb4 	bl	8005ddc <vTaskSwitchContext>
 8006e74:	f04f 0000 	mov.w	r0, #0
 8006e78:	f380 8811 	msr	BASEPRI, r0
 8006e7c:	bc09      	pop	{r0, r3}
 8006e7e:	6819      	ldr	r1, [r3, #0]
 8006e80:	6808      	ldr	r0, [r1, #0]
 8006e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e86:	f01e 0f10 	tst.w	lr, #16
 8006e8a:	bf08      	it	eq
 8006e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e90:	f380 8809 	msr	PSP, r0
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	f3af 8000 	nop.w

08006ea0 <pxCurrentTCBConst>:
 8006ea0:	2000089c 	.word	0x2000089c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ea4:	bf00      	nop
 8006ea6:	bf00      	nop

08006ea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	607b      	str	r3, [r7, #4]
}
 8006ec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ec2:	f7fe fed1 	bl	8005c68 <xTaskIncrementTick>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ecc:	4b06      	ldr	r3, [pc, #24]	; (8006ee8 <xPortSysTickHandler+0x40>)
 8006ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	f383 8811 	msr	BASEPRI, r3
}
 8006ede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ee0:	bf00      	nop
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	e000ed04 	.word	0xe000ed04

08006eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ef0:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <vPortSetupTimerInterrupt+0x34>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ef6:	4b0b      	ldr	r3, [pc, #44]	; (8006f24 <vPortSetupTimerInterrupt+0x38>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006efc:	4b0a      	ldr	r3, [pc, #40]	; (8006f28 <vPortSetupTimerInterrupt+0x3c>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a0a      	ldr	r2, [pc, #40]	; (8006f2c <vPortSetupTimerInterrupt+0x40>)
 8006f02:	fba2 2303 	umull	r2, r3, r2, r3
 8006f06:	099b      	lsrs	r3, r3, #6
 8006f08:	4a09      	ldr	r2, [pc, #36]	; (8006f30 <vPortSetupTimerInterrupt+0x44>)
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f0e:	4b04      	ldr	r3, [pc, #16]	; (8006f20 <vPortSetupTimerInterrupt+0x34>)
 8006f10:	2207      	movs	r2, #7
 8006f12:	601a      	str	r2, [r3, #0]
}
 8006f14:	bf00      	nop
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	e000e010 	.word	0xe000e010
 8006f24:	e000e018 	.word	0xe000e018
 8006f28:	20000000 	.word	0x20000000
 8006f2c:	10624dd3 	.word	0x10624dd3
 8006f30:	e000e014 	.word	0xe000e014

08006f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f44 <vPortEnableVFP+0x10>
 8006f38:	6801      	ldr	r1, [r0, #0]
 8006f3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f3e:	6001      	str	r1, [r0, #0]
 8006f40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f42:	bf00      	nop
 8006f44:	e000ed88 	.word	0xe000ed88

08006f48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f4e:	f3ef 8305 	mrs	r3, IPSR
 8006f52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b0f      	cmp	r3, #15
 8006f58:	d914      	bls.n	8006f84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f5a:	4a17      	ldr	r2, [pc, #92]	; (8006fb8 <vPortValidateInterruptPriority+0x70>)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4413      	add	r3, r2
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f64:	4b15      	ldr	r3, [pc, #84]	; (8006fbc <vPortValidateInterruptPriority+0x74>)
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	7afa      	ldrb	r2, [r7, #11]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d20a      	bcs.n	8006f84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	607b      	str	r3, [r7, #4]
}
 8006f80:	bf00      	nop
 8006f82:	e7fe      	b.n	8006f82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f84:	4b0e      	ldr	r3, [pc, #56]	; (8006fc0 <vPortValidateInterruptPriority+0x78>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f8c:	4b0d      	ldr	r3, [pc, #52]	; (8006fc4 <vPortValidateInterruptPriority+0x7c>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d90a      	bls.n	8006faa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	603b      	str	r3, [r7, #0]
}
 8006fa6:	bf00      	nop
 8006fa8:	e7fe      	b.n	8006fa8 <vPortValidateInterruptPriority+0x60>
	}
 8006faa:	bf00      	nop
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	e000e3f0 	.word	0xe000e3f0
 8006fbc:	20000ec8 	.word	0x20000ec8
 8006fc0:	e000ed0c 	.word	0xe000ed0c
 8006fc4:	20000ecc 	.word	0x20000ecc

08006fc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08a      	sub	sp, #40	; 0x28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006fd4:	f7fe fd8c 	bl	8005af0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fd8:	4b5b      	ldr	r3, [pc, #364]	; (8007148 <pvPortMalloc+0x180>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fe0:	f000 f920 	bl	8007224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fe4:	4b59      	ldr	r3, [pc, #356]	; (800714c <pvPortMalloc+0x184>)
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4013      	ands	r3, r2
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f040 8093 	bne.w	8007118 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d01d      	beq.n	8007034 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ff8:	2208      	movs	r2, #8
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f003 0307 	and.w	r3, r3, #7
 8007006:	2b00      	cmp	r3, #0
 8007008:	d014      	beq.n	8007034 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f023 0307 	bic.w	r3, r3, #7
 8007010:	3308      	adds	r3, #8
 8007012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f003 0307 	and.w	r3, r3, #7
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <pvPortMalloc+0x6c>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	617b      	str	r3, [r7, #20]
}
 8007030:	bf00      	nop
 8007032:	e7fe      	b.n	8007032 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d06e      	beq.n	8007118 <pvPortMalloc+0x150>
 800703a:	4b45      	ldr	r3, [pc, #276]	; (8007150 <pvPortMalloc+0x188>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	429a      	cmp	r2, r3
 8007042:	d869      	bhi.n	8007118 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007044:	4b43      	ldr	r3, [pc, #268]	; (8007154 <pvPortMalloc+0x18c>)
 8007046:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007048:	4b42      	ldr	r3, [pc, #264]	; (8007154 <pvPortMalloc+0x18c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800704e:	e004      	b.n	800705a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	429a      	cmp	r2, r3
 8007062:	d903      	bls.n	800706c <pvPortMalloc+0xa4>
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1f1      	bne.n	8007050 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800706c:	4b36      	ldr	r3, [pc, #216]	; (8007148 <pvPortMalloc+0x180>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007072:	429a      	cmp	r2, r3
 8007074:	d050      	beq.n	8007118 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2208      	movs	r2, #8
 800707c:	4413      	add	r3, r2
 800707e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	1ad2      	subs	r2, r2, r3
 8007090:	2308      	movs	r3, #8
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	429a      	cmp	r2, r3
 8007096:	d91f      	bls.n	80070d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4413      	add	r3, r2
 800709e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <pvPortMalloc+0xf8>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	613b      	str	r3, [r7, #16]
}
 80070bc:	bf00      	nop
 80070be:	e7fe      	b.n	80070be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	1ad2      	subs	r2, r2, r3
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070d2:	69b8      	ldr	r0, [r7, #24]
 80070d4:	f000 f908 	bl	80072e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070d8:	4b1d      	ldr	r3, [pc, #116]	; (8007150 <pvPortMalloc+0x188>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	4a1b      	ldr	r2, [pc, #108]	; (8007150 <pvPortMalloc+0x188>)
 80070e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070e6:	4b1a      	ldr	r3, [pc, #104]	; (8007150 <pvPortMalloc+0x188>)
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	4b1b      	ldr	r3, [pc, #108]	; (8007158 <pvPortMalloc+0x190>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d203      	bcs.n	80070fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070f2:	4b17      	ldr	r3, [pc, #92]	; (8007150 <pvPortMalloc+0x188>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a18      	ldr	r2, [pc, #96]	; (8007158 <pvPortMalloc+0x190>)
 80070f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	4b13      	ldr	r3, [pc, #76]	; (800714c <pvPortMalloc+0x184>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	431a      	orrs	r2, r3
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	2200      	movs	r2, #0
 800710c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800710e:	4b13      	ldr	r3, [pc, #76]	; (800715c <pvPortMalloc+0x194>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3301      	adds	r3, #1
 8007114:	4a11      	ldr	r2, [pc, #68]	; (800715c <pvPortMalloc+0x194>)
 8007116:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007118:	f7fe fcf8 	bl	8005b0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00a      	beq.n	800713c <pvPortMalloc+0x174>
	__asm volatile
 8007126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	60fb      	str	r3, [r7, #12]
}
 8007138:	bf00      	nop
 800713a:	e7fe      	b.n	800713a <pvPortMalloc+0x172>
	return pvReturn;
 800713c:	69fb      	ldr	r3, [r7, #28]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3728      	adds	r7, #40	; 0x28
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	20004ad8 	.word	0x20004ad8
 800714c:	20004aec 	.word	0x20004aec
 8007150:	20004adc 	.word	0x20004adc
 8007154:	20004ad0 	.word	0x20004ad0
 8007158:	20004ae0 	.word	0x20004ae0
 800715c:	20004ae4 	.word	0x20004ae4

08007160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d04d      	beq.n	800720e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007172:	2308      	movs	r3, #8
 8007174:	425b      	negs	r3, r3
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	4413      	add	r3, r2
 800717a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	4b24      	ldr	r3, [pc, #144]	; (8007218 <vPortFree+0xb8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4013      	ands	r3, r2
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10a      	bne.n	80071a4 <vPortFree+0x44>
	__asm volatile
 800718e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007192:	f383 8811 	msr	BASEPRI, r3
 8007196:	f3bf 8f6f 	isb	sy
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	60fb      	str	r3, [r7, #12]
}
 80071a0:	bf00      	nop
 80071a2:	e7fe      	b.n	80071a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00a      	beq.n	80071c2 <vPortFree+0x62>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	60bb      	str	r3, [r7, #8]
}
 80071be:	bf00      	nop
 80071c0:	e7fe      	b.n	80071c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	685a      	ldr	r2, [r3, #4]
 80071c6:	4b14      	ldr	r3, [pc, #80]	; (8007218 <vPortFree+0xb8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4013      	ands	r3, r2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d01e      	beq.n	800720e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d11a      	bne.n	800720e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	4b0e      	ldr	r3, [pc, #56]	; (8007218 <vPortFree+0xb8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	43db      	mvns	r3, r3
 80071e2:	401a      	ands	r2, r3
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071e8:	f7fe fc82 	bl	8005af0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	4b0a      	ldr	r3, [pc, #40]	; (800721c <vPortFree+0xbc>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4413      	add	r3, r2
 80071f6:	4a09      	ldr	r2, [pc, #36]	; (800721c <vPortFree+0xbc>)
 80071f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071fa:	6938      	ldr	r0, [r7, #16]
 80071fc:	f000 f874 	bl	80072e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007200:	4b07      	ldr	r3, [pc, #28]	; (8007220 <vPortFree+0xc0>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3301      	adds	r3, #1
 8007206:	4a06      	ldr	r2, [pc, #24]	; (8007220 <vPortFree+0xc0>)
 8007208:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800720a:	f7fe fc7f 	bl	8005b0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800720e:	bf00      	nop
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20004aec 	.word	0x20004aec
 800721c:	20004adc 	.word	0x20004adc
 8007220:	20004ae8 	.word	0x20004ae8

08007224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800722a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800722e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007230:	4b27      	ldr	r3, [pc, #156]	; (80072d0 <prvHeapInit+0xac>)
 8007232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00c      	beq.n	8007258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3307      	adds	r3, #7
 8007242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0307 	bic.w	r3, r3, #7
 800724a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	4a1f      	ldr	r2, [pc, #124]	; (80072d0 <prvHeapInit+0xac>)
 8007254:	4413      	add	r3, r2
 8007256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800725c:	4a1d      	ldr	r2, [pc, #116]	; (80072d4 <prvHeapInit+0xb0>)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007262:	4b1c      	ldr	r3, [pc, #112]	; (80072d4 <prvHeapInit+0xb0>)
 8007264:	2200      	movs	r2, #0
 8007266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	4413      	add	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007270:	2208      	movs	r2, #8
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	1a9b      	subs	r3, r3, r2
 8007276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f023 0307 	bic.w	r3, r3, #7
 800727e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4a15      	ldr	r2, [pc, #84]	; (80072d8 <prvHeapInit+0xb4>)
 8007284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007286:	4b14      	ldr	r3, [pc, #80]	; (80072d8 <prvHeapInit+0xb4>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2200      	movs	r2, #0
 800728c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800728e:	4b12      	ldr	r3, [pc, #72]	; (80072d8 <prvHeapInit+0xb4>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2200      	movs	r2, #0
 8007294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	1ad2      	subs	r2, r2, r3
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072a4:	4b0c      	ldr	r3, [pc, #48]	; (80072d8 <prvHeapInit+0xb4>)
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	4a0a      	ldr	r2, [pc, #40]	; (80072dc <prvHeapInit+0xb8>)
 80072b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	4a09      	ldr	r2, [pc, #36]	; (80072e0 <prvHeapInit+0xbc>)
 80072ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072bc:	4b09      	ldr	r3, [pc, #36]	; (80072e4 <prvHeapInit+0xc0>)
 80072be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072c2:	601a      	str	r2, [r3, #0]
}
 80072c4:	bf00      	nop
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	20000ed0 	.word	0x20000ed0
 80072d4:	20004ad0 	.word	0x20004ad0
 80072d8:	20004ad8 	.word	0x20004ad8
 80072dc:	20004ae0 	.word	0x20004ae0
 80072e0:	20004adc 	.word	0x20004adc
 80072e4:	20004aec 	.word	0x20004aec

080072e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072f0:	4b28      	ldr	r3, [pc, #160]	; (8007394 <prvInsertBlockIntoFreeList+0xac>)
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	e002      	b.n	80072fc <prvInsertBlockIntoFreeList+0x14>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	429a      	cmp	r2, r3
 8007304:	d8f7      	bhi.n	80072f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	4413      	add	r3, r2
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	429a      	cmp	r2, r3
 8007316:	d108      	bne.n	800732a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	441a      	add	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	441a      	add	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	429a      	cmp	r2, r3
 800733c:	d118      	bne.n	8007370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	4b15      	ldr	r3, [pc, #84]	; (8007398 <prvInsertBlockIntoFreeList+0xb0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	429a      	cmp	r2, r3
 8007348:	d00d      	beq.n	8007366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	441a      	add	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	e008      	b.n	8007378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007366:	4b0c      	ldr	r3, [pc, #48]	; (8007398 <prvInsertBlockIntoFreeList+0xb0>)
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	e003      	b.n	8007378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	429a      	cmp	r2, r3
 800737e:	d002      	beq.n	8007386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007386:	bf00      	nop
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	20004ad0 	.word	0x20004ad0
 8007398:	20004ad8 	.word	0x20004ad8

0800739c <HAL_UART_RxCpltCallback>:

bool 	is_running[OFFSET] 				= {false, false};
char uartBuf[4000];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a2d      	ldr	r2, [pc, #180]	; (8007460 <HAL_UART_RxCpltCallback+0xc4>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d105      	bne.n	80073ba <HAL_UART_RxCpltCallback+0x1e>
	{
//		HAL_UART_Transmit(&huart3, cupD_res_packet, sizeof(cupD_res_packet), 100);
	    HAL_UART_Receive_IT(&huart3, pc_res_packet, sizeof(pc_res_packet));
 80073ae:	220a      	movs	r2, #10
 80073b0:	492c      	ldr	r1, [pc, #176]	; (8007464 <HAL_UART_RxCpltCallback+0xc8>)
 80073b2:	482d      	ldr	r0, [pc, #180]	; (8007468 <HAL_UART_RxCpltCallback+0xcc>)
 80073b4:	f7fc fb47 	bl	8003a46 <HAL_UART_Receive_IT>
		if (LidD_res_packet[RES_PACKET_BCC] == chksum)
			printf("check sus error!");

//	    HAL_UART_Receive_IT(&huart6, LidD_res_packet, sizeof(LidD_res_packet));
	}
}
 80073b8:	e04e      	b.n	8007458 <HAL_UART_RxCpltCallback+0xbc>
	else if (huart->Instance == UART5)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a2b      	ldr	r2, [pc, #172]	; (800746c <HAL_UART_RxCpltCallback+0xd0>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d122      	bne.n	800740a <HAL_UART_RxCpltCallback+0x6e>
		HAL_UART_Transmit(&huart3, cupD_res_packet, sizeof(cupD_res_packet), 100);
 80073c4:	2364      	movs	r3, #100	; 0x64
 80073c6:	220b      	movs	r2, #11
 80073c8:	4929      	ldr	r1, [pc, #164]	; (8007470 <HAL_UART_RxCpltCallback+0xd4>)
 80073ca:	4827      	ldr	r0, [pc, #156]	; (8007468 <HAL_UART_RxCpltCallback+0xcc>)
 80073cc:	f7fc faa9 	bl	8003922 <HAL_UART_Transmit>
		int chksum = 0x00;
 80073d0:	2300      	movs	r3, #0
 80073d2:	617b      	str	r3, [r7, #20]
		for(int i=1; i<RES_PACKET_BCC; i++){
 80073d4:	2301      	movs	r3, #1
 80073d6:	613b      	str	r3, [r7, #16]
 80073d8:	e00a      	b.n	80073f0 <HAL_UART_RxCpltCallback+0x54>
			chksum += cupD_res_packet[i];
 80073da:	4a25      	ldr	r2, [pc, #148]	; (8007470 <HAL_UART_RxCpltCallback+0xd4>)
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	4413      	add	r3, r2
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	4413      	add	r3, r2
 80073e8:	617b      	str	r3, [r7, #20]
		for(int i=1; i<RES_PACKET_BCC; i++){
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	3301      	adds	r3, #1
 80073ee:	613b      	str	r3, [r7, #16]
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	2b09      	cmp	r3, #9
 80073f4:	ddf1      	ble.n	80073da <HAL_UART_RxCpltCallback+0x3e>
		if (cupD_res_packet[RES_PACKET_BCC] == chksum)
 80073f6:	4b1e      	ldr	r3, [pc, #120]	; (8007470 <HAL_UART_RxCpltCallback+0xd4>)
 80073f8:	7a9b      	ldrb	r3, [r3, #10]
 80073fa:	461a      	mov	r2, r3
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	4293      	cmp	r3, r2
 8007400:	d12a      	bne.n	8007458 <HAL_UART_RxCpltCallback+0xbc>
			printf("check sus error!");
 8007402:	481c      	ldr	r0, [pc, #112]	; (8007474 <HAL_UART_RxCpltCallback+0xd8>)
 8007404:	f000 fbf4 	bl	8007bf0 <iprintf>
}
 8007408:	e026      	b.n	8007458 <HAL_UART_RxCpltCallback+0xbc>
	else if (huart->Instance == USART6)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a1a      	ldr	r2, [pc, #104]	; (8007478 <HAL_UART_RxCpltCallback+0xdc>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d121      	bne.n	8007458 <HAL_UART_RxCpltCallback+0xbc>
		HAL_UART_Transmit(&huart3, LidD_res_packet, sizeof(LidD_res_packet), 100);
 8007414:	2364      	movs	r3, #100	; 0x64
 8007416:	220b      	movs	r2, #11
 8007418:	4918      	ldr	r1, [pc, #96]	; (800747c <HAL_UART_RxCpltCallback+0xe0>)
 800741a:	4813      	ldr	r0, [pc, #76]	; (8007468 <HAL_UART_RxCpltCallback+0xcc>)
 800741c:	f7fc fa81 	bl	8003922 <HAL_UART_Transmit>
		int chksum = 0x00;
 8007420:	2300      	movs	r3, #0
 8007422:	60fb      	str	r3, [r7, #12]
		for(int i=1; i<RES_PACKET_BCC; i++){
 8007424:	2301      	movs	r3, #1
 8007426:	60bb      	str	r3, [r7, #8]
 8007428:	e00a      	b.n	8007440 <HAL_UART_RxCpltCallback+0xa4>
			chksum += LidD_res_packet[i];
 800742a:	4a14      	ldr	r2, [pc, #80]	; (800747c <HAL_UART_RxCpltCallback+0xe0>)
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	4413      	add	r3, r2
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	4413      	add	r3, r2
 8007438:	60fb      	str	r3, [r7, #12]
		for(int i=1; i<RES_PACKET_BCC; i++){
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	3301      	adds	r3, #1
 800743e:	60bb      	str	r3, [r7, #8]
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2b09      	cmp	r3, #9
 8007444:	ddf1      	ble.n	800742a <HAL_UART_RxCpltCallback+0x8e>
		if (LidD_res_packet[RES_PACKET_BCC] == chksum)
 8007446:	4b0d      	ldr	r3, [pc, #52]	; (800747c <HAL_UART_RxCpltCallback+0xe0>)
 8007448:	7a9b      	ldrb	r3, [r3, #10]
 800744a:	461a      	mov	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4293      	cmp	r3, r2
 8007450:	d102      	bne.n	8007458 <HAL_UART_RxCpltCallback+0xbc>
			printf("check sus error!");
 8007452:	4808      	ldr	r0, [pc, #32]	; (8007474 <HAL_UART_RxCpltCallback+0xd8>)
 8007454:	f000 fbcc 	bl	8007bf0 <iprintf>
}
 8007458:	bf00      	nop
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	40004800 	.word	0x40004800
 8007464:	200000f8 	.word	0x200000f8
 8007468:	20004b4c 	.word	0x20004b4c
 800746c:	40005000 	.word	0x40005000
 8007470:	20000104 	.word	0x20000104
 8007474:	08008a30 	.word	0x08008a30
 8007478:	40011400 	.word	0x40011400
 800747c:	20000110 	.word	0x20000110

08007480 <SteppingMotorTest>:

void SteppingMotorTest(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af02      	add	r7, sp, #8
	// 90 degree rotation test
//	printf("ROTATE start!!\n");
//	controlSteppingMotor(CUP_D, STEPPING_MOTOR_ON, CLOCKWISE, QUARTER, FREQ_FAST);
	controlSteppingMotor(LID_D, STEPPING_MOTOR_ON, CLOCKWISE, QUARTER, FREQ_FAST);
 8007486:	2332      	movs	r3, #50	; 0x32
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	f241 3388 	movw	r3, #5000	; 0x1388
 800748e:	2200      	movs	r2, #0
 8007490:	2101      	movs	r1, #1
 8007492:	2003      	movs	r0, #3
 8007494:	f000 f82e 	bl	80074f4 <controlSteppingMotor>
//	printf("ROTATE finished!!\n\n");

	HAL_Delay(1000);
 8007498:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800749c:	f7fa f92a 	bl	80016f4 <HAL_Delay>
//	dispatch(CUP_D);
	dispatch(LID_D);
 80074a0:	2003      	movs	r0, #3
 80074a2:	f000 f99f 	bl	80077e4 <dispatch>

}
 80074a6:	bf00      	nop
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <pulseMaker>:

void pulseMaker (uint16_t time)	//delay function in 10us
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	4603      	mov	r3, r0
 80074b4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80074b6:	4b09      	ldr	r3, [pc, #36]	; (80074dc <pulseMaker+0x30>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2200      	movs	r2, #0
 80074bc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 80074be:	bf00      	nop
 80074c0:	4b06      	ldr	r3, [pc, #24]	; (80074dc <pulseMaker+0x30>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074c6:	88fb      	ldrh	r3, [r7, #6]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d3f9      	bcc.n	80074c0 <pulseMaker+0x14>
}
 80074cc:	bf00      	nop
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	20004c20 	.word	0x20004c20

080074e0 <initCupLidDispensor>:

void initCupLidDispensor(void)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);
 80074e4:	4802      	ldr	r0, [pc, #8]	; (80074f0 <initCupLidDispensor+0x10>)
 80074e6:	f7fb f995 	bl	8002814 <HAL_TIM_Base_Start>
}
 80074ea:	bf00      	nop
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20004c20 	.word	0x20004c20

080074f4 <controlSteppingMotor>:

void controlSteppingMotor(uint8_t device_id, bool cmd, uint8_t dir, uint16_t angle, uint8_t freq)
{
 80074f4:	b590      	push	{r4, r7, lr}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	4604      	mov	r4, r0
 80074fc:	4608      	mov	r0, r1
 80074fe:	4611      	mov	r1, r2
 8007500:	461a      	mov	r2, r3
 8007502:	4623      	mov	r3, r4
 8007504:	71fb      	strb	r3, [r7, #7]
 8007506:	4603      	mov	r3, r0
 8007508:	71bb      	strb	r3, [r7, #6]
 800750a:	460b      	mov	r3, r1
 800750c:	717b      	strb	r3, [r7, #5]
 800750e:	4613      	mov	r3, r2
 8007510:	807b      	strh	r3, [r7, #2]
	uint8_t ID = device_id - OFFSET;
 8007512:	79fb      	ldrb	r3, [r7, #7]
 8007514:	3b02      	subs	r3, #2
 8007516:	72fb      	strb	r3, [r7, #11]

	if(cmd == STEPPING_MOTOR_ON){
 8007518:	79bb      	ldrb	r3, [r7, #6]
 800751a:	2b01      	cmp	r3, #1
 800751c:	f040 8130 	bne.w	8007780 <controlSteppingMotor+0x28c>
		//EN : SET = enable MOTOR
		HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID][EN], SteppingMotor_Pin[ID][EN], GPIO_PIN_SET);
 8007520:	7afa      	ldrb	r2, [r7, #11]
 8007522:	49a6      	ldr	r1, [pc, #664]	; (80077bc <controlSteppingMotor+0x2c8>)
 8007524:	4613      	mov	r3, r2
 8007526:	005b      	lsls	r3, r3, #1
 8007528:	4413      	add	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	440b      	add	r3, r1
 800752e:	6818      	ldr	r0, [r3, #0]
 8007530:	7afa      	ldrb	r2, [r7, #11]
 8007532:	49a3      	ldr	r1, [pc, #652]	; (80077c0 <controlSteppingMotor+0x2cc>)
 8007534:	4613      	mov	r3, r2
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	4413      	add	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	440b      	add	r3, r1
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	b29b      	uxth	r3, r3
 8007542:	2201      	movs	r2, #1
 8007544:	4619      	mov	r1, r3
 8007546:	f7fa fc31 	bl	8001dac <HAL_GPIO_WritePin>

		// DIR : Sset motor direction
		if(dir == CLOCKWISE)
 800754a:	797b      	ldrb	r3, [r7, #5]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d117      	bne.n	8007580 <controlSteppingMotor+0x8c>
			HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID][DIR], SteppingMotor_Pin[ID][DIR], GPIO_PIN_RESET);
 8007550:	7afa      	ldrb	r2, [r7, #11]
 8007552:	499a      	ldr	r1, [pc, #616]	; (80077bc <controlSteppingMotor+0x2c8>)
 8007554:	4613      	mov	r3, r2
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	4413      	add	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	440b      	add	r3, r1
 800755e:	3308      	adds	r3, #8
 8007560:	6818      	ldr	r0, [r3, #0]
 8007562:	7afa      	ldrb	r2, [r7, #11]
 8007564:	4996      	ldr	r1, [pc, #600]	; (80077c0 <controlSteppingMotor+0x2cc>)
 8007566:	4613      	mov	r3, r2
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	4413      	add	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	440b      	add	r3, r1
 8007570:	3308      	adds	r3, #8
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	b29b      	uxth	r3, r3
 8007576:	2200      	movs	r2, #0
 8007578:	4619      	mov	r1, r3
 800757a:	f7fa fc17 	bl	8001dac <HAL_GPIO_WritePin>
 800757e:	e019      	b.n	80075b4 <controlSteppingMotor+0xc0>
		else if(dir == COUNTER_CLOCKWISE)
 8007580:	797b      	ldrb	r3, [r7, #5]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d116      	bne.n	80075b4 <controlSteppingMotor+0xc0>
			HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID][DIR], SteppingMotor_Pin[ID][DIR], GPIO_PIN_SET);
 8007586:	7afa      	ldrb	r2, [r7, #11]
 8007588:	498c      	ldr	r1, [pc, #560]	; (80077bc <controlSteppingMotor+0x2c8>)
 800758a:	4613      	mov	r3, r2
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	4413      	add	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	440b      	add	r3, r1
 8007594:	3308      	adds	r3, #8
 8007596:	6818      	ldr	r0, [r3, #0]
 8007598:	7afa      	ldrb	r2, [r7, #11]
 800759a:	4989      	ldr	r1, [pc, #548]	; (80077c0 <controlSteppingMotor+0x2cc>)
 800759c:	4613      	mov	r3, r2
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	4413      	add	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	440b      	add	r3, r1
 80075a6:	3308      	adds	r3, #8
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	2201      	movs	r2, #1
 80075ae:	4619      	mov	r1, r3
 80075b0:	f7fa fbfc 	bl	8001dac <HAL_GPIO_WritePin>

		is_running[ID] = true;
 80075b4:	7afb      	ldrb	r3, [r7, #11]
 80075b6:	4a83      	ldr	r2, [pc, #524]	; (80077c4 <controlSteppingMotor+0x2d0>)
 80075b8:	2101      	movs	r1, #1
 80075ba:	54d1      	strb	r1, [r2, r3]
		HAL_Delay(10);
 80075bc:	200a      	movs	r0, #10
 80075be:	f7fa f899 	bl	80016f4 <HAL_Delay>

		for(uint16_t step=0; step < angle/10; step++){
 80075c2:	2300      	movs	r3, #0
 80075c4:	81fb      	strh	r3, [r7, #14]
 80075c6:	e03c      	b.n	8007642 <controlSteppingMotor+0x14e>
//			printf("%d \n",HAL_GPIO_ReadPin(MotorSpeedSensor_GPIO_Port[0][UP], MotorSpeedSensor_Pin[0][UP]));

			HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID][STP], SteppingMotor_Pin[ID][STP], GPIO_PIN_SET);
 80075c8:	7afa      	ldrb	r2, [r7, #11]
 80075ca:	497c      	ldr	r1, [pc, #496]	; (80077bc <controlSteppingMotor+0x2c8>)
 80075cc:	4613      	mov	r3, r2
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	440b      	add	r3, r1
 80075d6:	3304      	adds	r3, #4
 80075d8:	6818      	ldr	r0, [r3, #0]
 80075da:	7afa      	ldrb	r2, [r7, #11]
 80075dc:	4978      	ldr	r1, [pc, #480]	; (80077c0 <controlSteppingMotor+0x2cc>)
 80075de:	4613      	mov	r3, r2
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	4413      	add	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	440b      	add	r3, r1
 80075e8:	3304      	adds	r3, #4
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2201      	movs	r2, #1
 80075f0:	4619      	mov	r1, r3
 80075f2:	f7fa fbdb 	bl	8001dac <HAL_GPIO_WritePin>
			pulseMaker(freq);
 80075f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7ff ff55 	bl	80074ac <pulseMaker>
			HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID][STP], SteppingMotor_Pin[ID][STP], GPIO_PIN_RESET);
 8007602:	7afa      	ldrb	r2, [r7, #11]
 8007604:	496d      	ldr	r1, [pc, #436]	; (80077bc <controlSteppingMotor+0x2c8>)
 8007606:	4613      	mov	r3, r2
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	4413      	add	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	440b      	add	r3, r1
 8007610:	3304      	adds	r3, #4
 8007612:	6818      	ldr	r0, [r3, #0]
 8007614:	7afa      	ldrb	r2, [r7, #11]
 8007616:	496a      	ldr	r1, [pc, #424]	; (80077c0 <controlSteppingMotor+0x2cc>)
 8007618:	4613      	mov	r3, r2
 800761a:	005b      	lsls	r3, r3, #1
 800761c:	4413      	add	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	440b      	add	r3, r1
 8007622:	3304      	adds	r3, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	b29b      	uxth	r3, r3
 8007628:	2200      	movs	r2, #0
 800762a:	4619      	mov	r1, r3
 800762c:	f7fa fbbe 	bl	8001dac <HAL_GPIO_WritePin>
			pulseMaker(freq);
 8007630:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007634:	b29b      	uxth	r3, r3
 8007636:	4618      	mov	r0, r3
 8007638:	f7ff ff38 	bl	80074ac <pulseMaker>
		for(uint16_t step=0; step < angle/10; step++){
 800763c:	89fb      	ldrh	r3, [r7, #14]
 800763e:	3301      	adds	r3, #1
 8007640:	81fb      	strh	r3, [r7, #14]
 8007642:	887b      	ldrh	r3, [r7, #2]
 8007644:	4a60      	ldr	r2, [pc, #384]	; (80077c8 <controlSteppingMotor+0x2d4>)
 8007646:	fba2 2303 	umull	r2, r3, r2, r3
 800764a:	08db      	lsrs	r3, r3, #3
 800764c:	b29b      	uxth	r3, r3
 800764e:	89fa      	ldrh	r2, [r7, #14]
 8007650:	429a      	cmp	r2, r3
 8007652:	d3b9      	bcc.n	80075c8 <controlSteppingMotor+0xd4>
		}
		printf("detection mode on!\n");
 8007654:	485d      	ldr	r0, [pc, #372]	; (80077cc <controlSteppingMotor+0x2d8>)
 8007656:	f000 fb51 	bl	8007cfc <puts>
		for(uint16_t step=0; step < angle*2; step++){
 800765a:	2300      	movs	r3, #0
 800765c:	81bb      	strh	r3, [r7, #12]
 800765e:	e089      	b.n	8007774 <controlSteppingMotor+0x280>
			HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID][STP], SteppingMotor_Pin[ID][STP], GPIO_PIN_SET);
 8007660:	7afa      	ldrb	r2, [r7, #11]
 8007662:	4956      	ldr	r1, [pc, #344]	; (80077bc <controlSteppingMotor+0x2c8>)
 8007664:	4613      	mov	r3, r2
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	4413      	add	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	440b      	add	r3, r1
 800766e:	3304      	adds	r3, #4
 8007670:	6818      	ldr	r0, [r3, #0]
 8007672:	7afa      	ldrb	r2, [r7, #11]
 8007674:	4952      	ldr	r1, [pc, #328]	; (80077c0 <controlSteppingMotor+0x2cc>)
 8007676:	4613      	mov	r3, r2
 8007678:	005b      	lsls	r3, r3, #1
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	440b      	add	r3, r1
 8007680:	3304      	adds	r3, #4
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	b29b      	uxth	r3, r3
 8007686:	2201      	movs	r2, #1
 8007688:	4619      	mov	r1, r3
 800768a:	f7fa fb8f 	bl	8001dac <HAL_GPIO_WritePin>
			pulseMaker(freq);
 800768e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007692:	b29b      	uxth	r3, r3
 8007694:	4618      	mov	r0, r3
 8007696:	f7ff ff09 	bl	80074ac <pulseMaker>
			HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID][STP], SteppingMotor_Pin[ID][STP], GPIO_PIN_RESET);
 800769a:	7afa      	ldrb	r2, [r7, #11]
 800769c:	4947      	ldr	r1, [pc, #284]	; (80077bc <controlSteppingMotor+0x2c8>)
 800769e:	4613      	mov	r3, r2
 80076a0:	005b      	lsls	r3, r3, #1
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	440b      	add	r3, r1
 80076a8:	3304      	adds	r3, #4
 80076aa:	6818      	ldr	r0, [r3, #0]
 80076ac:	7afa      	ldrb	r2, [r7, #11]
 80076ae:	4944      	ldr	r1, [pc, #272]	; (80077c0 <controlSteppingMotor+0x2cc>)
 80076b0:	4613      	mov	r3, r2
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	4413      	add	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	440b      	add	r3, r1
 80076ba:	3304      	adds	r3, #4
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	b29b      	uxth	r3, r3
 80076c0:	2200      	movs	r2, #0
 80076c2:	4619      	mov	r1, r3
 80076c4:	f7fa fb72 	bl	8001dac <HAL_GPIO_WritePin>
			pulseMaker(freq);
 80076c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff feec 	bl	80074ac <pulseMaker>

			if(is_detected[ID][UP] == false){
 80076d4:	7afb      	ldrb	r3, [r7, #11]
 80076d6:	4a3e      	ldr	r2, [pc, #248]	; (80077d0 <controlSteppingMotor+0x2dc>)
 80076d8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d124      	bne.n	800772a <controlSteppingMotor+0x236>
				if(HAL_GPIO_ReadPin(MotorSpeedSensor_GPIO_Port[ID][UP], MotorSpeedSensor_Pin[ID][UP]) & (is_detected[ID][DOWN] == true)){
 80076e0:	7afb      	ldrb	r3, [r7, #11]
 80076e2:	4a3c      	ldr	r2, [pc, #240]	; (80077d4 <controlSteppingMotor+0x2e0>)
 80076e4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80076e8:	7afb      	ldrb	r3, [r7, #11]
 80076ea:	493b      	ldr	r1, [pc, #236]	; (80077d8 <controlSteppingMotor+0x2e4>)
 80076ec:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	4619      	mov	r1, r3
 80076f4:	4610      	mov	r0, r2
 80076f6:	f7fa fb41 	bl	8001d7c <HAL_GPIO_ReadPin>
 80076fa:	4603      	mov	r3, r0
 80076fc:	4619      	mov	r1, r3
 80076fe:	7afb      	ldrb	r3, [r7, #11]
 8007700:	4a33      	ldr	r2, [pc, #204]	; (80077d0 <controlSteppingMotor+0x2dc>)
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	4413      	add	r3, r2
 8007706:	785b      	ldrb	r3, [r3, #1]
 8007708:	2b01      	cmp	r3, #1
 800770a:	bf0c      	ite	eq
 800770c:	2301      	moveq	r3, #1
 800770e:	2300      	movne	r3, #0
 8007710:	b2db      	uxtb	r3, r3
 8007712:	400b      	ands	r3, r1
 8007714:	2b00      	cmp	r3, #0
 8007716:	d008      	beq.n	800772a <controlSteppingMotor+0x236>
					is_detected[ID][UP] = true;
 8007718:	7afb      	ldrb	r3, [r7, #11]
 800771a:	4a2d      	ldr	r2, [pc, #180]	; (80077d0 <controlSteppingMotor+0x2dc>)
 800771c:	2101      	movs	r1, #1
 800771e:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					printf("up detected\n");
 8007722:	482e      	ldr	r0, [pc, #184]	; (80077dc <controlSteppingMotor+0x2e8>)
 8007724:	f000 faea 	bl	8007cfc <puts>
					break;
 8007728:	e02a      	b.n	8007780 <controlSteppingMotor+0x28c>
				}
			}
			if(is_detected[ID][DOWN] == false){
 800772a:	7afb      	ldrb	r3, [r7, #11]
 800772c:	4a28      	ldr	r2, [pc, #160]	; (80077d0 <controlSteppingMotor+0x2dc>)
 800772e:	005b      	lsls	r3, r3, #1
 8007730:	4413      	add	r3, r2
 8007732:	785b      	ldrb	r3, [r3, #1]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d11a      	bne.n	800776e <controlSteppingMotor+0x27a>
				if(HAL_GPIO_ReadPin(MotorSpeedSensor_GPIO_Port[ID][DOWN], MotorSpeedSensor_Pin[ID][DOWN])){
 8007738:	7afb      	ldrb	r3, [r7, #11]
 800773a:	4a26      	ldr	r2, [pc, #152]	; (80077d4 <controlSteppingMotor+0x2e0>)
 800773c:	00db      	lsls	r3, r3, #3
 800773e:	4413      	add	r3, r2
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	7afb      	ldrb	r3, [r7, #11]
 8007744:	4924      	ldr	r1, [pc, #144]	; (80077d8 <controlSteppingMotor+0x2e4>)
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	440b      	add	r3, r1
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	b29b      	uxth	r3, r3
 800774e:	4619      	mov	r1, r3
 8007750:	4610      	mov	r0, r2
 8007752:	f7fa fb13 	bl	8001d7c <HAL_GPIO_ReadPin>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d008      	beq.n	800776e <controlSteppingMotor+0x27a>
					is_detected[ID][DOWN] = true;
 800775c:	7afb      	ldrb	r3, [r7, #11]
 800775e:	4a1c      	ldr	r2, [pc, #112]	; (80077d0 <controlSteppingMotor+0x2dc>)
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	4413      	add	r3, r2
 8007764:	2201      	movs	r2, #1
 8007766:	705a      	strb	r2, [r3, #1]
					printf("down detected\n");
 8007768:	481d      	ldr	r0, [pc, #116]	; (80077e0 <controlSteppingMotor+0x2ec>)
 800776a:	f000 fac7 	bl	8007cfc <puts>
		for(uint16_t step=0; step < angle*2; step++){
 800776e:	89bb      	ldrh	r3, [r7, #12]
 8007770:	3301      	adds	r3, #1
 8007772:	81bb      	strh	r3, [r7, #12]
 8007774:	89ba      	ldrh	r2, [r7, #12]
 8007776:	887b      	ldrh	r3, [r7, #2]
 8007778:	005b      	lsls	r3, r3, #1
 800777a:	429a      	cmp	r2, r3
 800777c:	f6ff af70 	blt.w	8007660 <controlSteppingMotor+0x16c>
				}
			}
		}
	}
	// STEPPING_MOTOR_OFF
	HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID][EN], SteppingMotor_Pin[ID][EN], GPIO_PIN_RESET); //EN - RESET = disable MOTOR
 8007780:	7afa      	ldrb	r2, [r7, #11]
 8007782:	490e      	ldr	r1, [pc, #56]	; (80077bc <controlSteppingMotor+0x2c8>)
 8007784:	4613      	mov	r3, r2
 8007786:	005b      	lsls	r3, r3, #1
 8007788:	4413      	add	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	440b      	add	r3, r1
 800778e:	6818      	ldr	r0, [r3, #0]
 8007790:	7afa      	ldrb	r2, [r7, #11]
 8007792:	490b      	ldr	r1, [pc, #44]	; (80077c0 <controlSteppingMotor+0x2cc>)
 8007794:	4613      	mov	r3, r2
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	440b      	add	r3, r1
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2200      	movs	r2, #0
 80077a4:	4619      	mov	r1, r3
 80077a6:	f7fa fb01 	bl	8001dac <HAL_GPIO_WritePin>

	is_running[ID] = false;
 80077aa:	7afb      	ldrb	r3, [r7, #11]
 80077ac:	4a05      	ldr	r2, [pc, #20]	; (80077c4 <controlSteppingMotor+0x2d0>)
 80077ae:	2100      	movs	r1, #0
 80077b0:	54d1      	strb	r1, [r2, r3]
}
 80077b2:	bf00      	nop
 80077b4:	3714      	adds	r7, #20
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd90      	pop	{r4, r7, pc}
 80077ba:	bf00      	nop
 80077bc:	20000028 	.word	0x20000028
 80077c0:	20000040 	.word	0x20000040
 80077c4:	20004af4 	.word	0x20004af4
 80077c8:	cccccccd 	.word	0xcccccccd
 80077cc:	08008a44 	.word	0x08008a44
 80077d0:	20004af0 	.word	0x20004af0
 80077d4:	20000058 	.word	0x20000058
 80077d8:	20000068 	.word	0x20000068
 80077dc:	08008a58 	.word	0x08008a58
 80077e0:	08008a64 	.word	0x08008a64

080077e4 <dispatch>:
		if(is_running[id] == true)
			return RUNNING;
	}
}
bool dispatch(uint8_t device_id)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	4603      	mov	r3, r0
 80077ec:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive_IT(&huart6, cupD_res_packet, sizeof(cupD_res_packet));
 80077ee:	220b      	movs	r2, #11
 80077f0:	4906      	ldr	r1, [pc, #24]	; (800780c <dispatch+0x28>)
 80077f2:	4807      	ldr	r0, [pc, #28]	; (8007810 <dispatch+0x2c>)
 80077f4:	f7fc f927 	bl	8003a46 <HAL_UART_Receive_IT>
	sendCommand(device_id, DISPATCH_1_CUP);
 80077f8:	79fb      	ldrb	r3, [r7, #7]
 80077fa:	2101      	movs	r1, #1
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 f809 	bl	8007814 <sendCommand>
//		if(cupD_res_packet[IS_CUP_EXITED] == CUP_EXITED)
//			break;
//	}

//	sendCommand(device_id, IS_FINISHED);
	return true;
 8007802:	2301      	movs	r3, #1
}
 8007804:	4618      	mov	r0, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	20000104 	.word	0x20000104
 8007810:	20004c6c 	.word	0x20004c6c

08007814 <sendCommand>:


void sendCommand(uint8_t device_id, uint8_t cmd)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	4603      	mov	r3, r0
 800781c:	460a      	mov	r2, r1
 800781e:	71fb      	strb	r3, [r7, #7]
 8007820:	4613      	mov	r3, r2
 8007822:	71bb      	strb	r3, [r7, #6]
	// calc checksum
	int BCC = dispenser_req_packet_list[cmd][LEN]+3;
 8007824:	79ba      	ldrb	r2, [r7, #6]
 8007826:	4925      	ldr	r1, [pc, #148]	; (80078bc <sendCommand+0xa8>)
 8007828:	4613      	mov	r3, r2
 800782a:	00db      	lsls	r3, r3, #3
 800782c:	1a9b      	subs	r3, r3, r2
 800782e:	440b      	add	r3, r1
 8007830:	3301      	adds	r3, #1
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	3303      	adds	r3, #3
 8007836:	60bb      	str	r3, [r7, #8]

	for(int i=1; i<BCC; i++){
 8007838:	2301      	movs	r3, #1
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	e020      	b.n	8007880 <sendCommand+0x6c>
		dispenser_req_packet_list[cmd][BCC] += dispenser_req_packet_list[cmd][i];
 800783e:	79ba      	ldrb	r2, [r7, #6]
 8007840:	491e      	ldr	r1, [pc, #120]	; (80078bc <sendCommand+0xa8>)
 8007842:	4613      	mov	r3, r2
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	1a9b      	subs	r3, r3, r2
 8007848:	18ca      	adds	r2, r1, r3
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	4413      	add	r3, r2
 800784e:	7819      	ldrb	r1, [r3, #0]
 8007850:	79ba      	ldrb	r2, [r7, #6]
 8007852:	481a      	ldr	r0, [pc, #104]	; (80078bc <sendCommand+0xa8>)
 8007854:	4613      	mov	r3, r2
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	1a9b      	subs	r3, r3, r2
 800785a:	18c2      	adds	r2, r0, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4413      	add	r3, r2
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	79ba      	ldrb	r2, [r7, #6]
 8007864:	440b      	add	r3, r1
 8007866:	b2d8      	uxtb	r0, r3
 8007868:	4914      	ldr	r1, [pc, #80]	; (80078bc <sendCommand+0xa8>)
 800786a:	4613      	mov	r3, r2
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	1a9b      	subs	r3, r3, r2
 8007870:	18ca      	adds	r2, r1, r3
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	4413      	add	r3, r2
 8007876:	4602      	mov	r2, r0
 8007878:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<BCC; i++){
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	3301      	adds	r3, #1
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	429a      	cmp	r2, r3
 8007886:	dbda      	blt.n	800783e <sendCommand+0x2a>
	}

	// request packet
	HAL_UART_Transmit(&huart6, (uint8_t *)dispenser_req_packet_list[cmd], sizeof(dispenser_req_packet_list[cmd]), 100);
 8007888:	79ba      	ldrb	r2, [r7, #6]
 800788a:	4613      	mov	r3, r2
 800788c:	00db      	lsls	r3, r3, #3
 800788e:	1a9b      	subs	r3, r3, r2
 8007890:	4a0a      	ldr	r2, [pc, #40]	; (80078bc <sendCommand+0xa8>)
 8007892:	1899      	adds	r1, r3, r2
 8007894:	2364      	movs	r3, #100	; 0x64
 8007896:	2207      	movs	r2, #7
 8007898:	4809      	ldr	r0, [pc, #36]	; (80078c0 <sendCommand+0xac>)
 800789a:	f7fc f842 	bl	8003922 <HAL_UART_Transmit>

	// for debug
	HAL_UART_Transmit(&huart3, (uint8_t *)dispenser_req_packet_list[cmd], sizeof(dispenser_req_packet_list[cmd]), 100);
 800789e:	79ba      	ldrb	r2, [r7, #6]
 80078a0:	4613      	mov	r3, r2
 80078a2:	00db      	lsls	r3, r3, #3
 80078a4:	1a9b      	subs	r3, r3, r2
 80078a6:	4a05      	ldr	r2, [pc, #20]	; (80078bc <sendCommand+0xa8>)
 80078a8:	1899      	adds	r1, r3, r2
 80078aa:	2364      	movs	r3, #100	; 0x64
 80078ac:	2207      	movs	r2, #7
 80078ae:	4805      	ldr	r0, [pc, #20]	; (80078c4 <sendCommand+0xb0>)
 80078b0:	f7fc f837 	bl	8003922 <HAL_UART_Transmit>
}
 80078b4:	bf00      	nop
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	20000010 	.word	0x20000010
 80078c0:	20004c6c 	.word	0x20004c6c
 80078c4:	20004b4c 	.word	0x20004b4c

080078c8 <__errno>:
 80078c8:	4b01      	ldr	r3, [pc, #4]	; (80078d0 <__errno+0x8>)
 80078ca:	6818      	ldr	r0, [r3, #0]
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	20000078 	.word	0x20000078

080078d4 <std>:
 80078d4:	2300      	movs	r3, #0
 80078d6:	b510      	push	{r4, lr}
 80078d8:	4604      	mov	r4, r0
 80078da:	e9c0 3300 	strd	r3, r3, [r0]
 80078de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078e2:	6083      	str	r3, [r0, #8]
 80078e4:	8181      	strh	r1, [r0, #12]
 80078e6:	6643      	str	r3, [r0, #100]	; 0x64
 80078e8:	81c2      	strh	r2, [r0, #14]
 80078ea:	6183      	str	r3, [r0, #24]
 80078ec:	4619      	mov	r1, r3
 80078ee:	2208      	movs	r2, #8
 80078f0:	305c      	adds	r0, #92	; 0x5c
 80078f2:	f000 f91a 	bl	8007b2a <memset>
 80078f6:	4b05      	ldr	r3, [pc, #20]	; (800790c <std+0x38>)
 80078f8:	6263      	str	r3, [r4, #36]	; 0x24
 80078fa:	4b05      	ldr	r3, [pc, #20]	; (8007910 <std+0x3c>)
 80078fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80078fe:	4b05      	ldr	r3, [pc, #20]	; (8007914 <std+0x40>)
 8007900:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007902:	4b05      	ldr	r3, [pc, #20]	; (8007918 <std+0x44>)
 8007904:	6224      	str	r4, [r4, #32]
 8007906:	6323      	str	r3, [r4, #48]	; 0x30
 8007908:	bd10      	pop	{r4, pc}
 800790a:	bf00      	nop
 800790c:	08007e01 	.word	0x08007e01
 8007910:	08007e23 	.word	0x08007e23
 8007914:	08007e5b 	.word	0x08007e5b
 8007918:	08007e7f 	.word	0x08007e7f

0800791c <_cleanup_r>:
 800791c:	4901      	ldr	r1, [pc, #4]	; (8007924 <_cleanup_r+0x8>)
 800791e:	f000 b8af 	b.w	8007a80 <_fwalk_reent>
 8007922:	bf00      	nop
 8007924:	08008159 	.word	0x08008159

08007928 <__sfmoreglue>:
 8007928:	b570      	push	{r4, r5, r6, lr}
 800792a:	1e4a      	subs	r2, r1, #1
 800792c:	2568      	movs	r5, #104	; 0x68
 800792e:	4355      	muls	r5, r2
 8007930:	460e      	mov	r6, r1
 8007932:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007936:	f000 f901 	bl	8007b3c <_malloc_r>
 800793a:	4604      	mov	r4, r0
 800793c:	b140      	cbz	r0, 8007950 <__sfmoreglue+0x28>
 800793e:	2100      	movs	r1, #0
 8007940:	e9c0 1600 	strd	r1, r6, [r0]
 8007944:	300c      	adds	r0, #12
 8007946:	60a0      	str	r0, [r4, #8]
 8007948:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800794c:	f000 f8ed 	bl	8007b2a <memset>
 8007950:	4620      	mov	r0, r4
 8007952:	bd70      	pop	{r4, r5, r6, pc}

08007954 <__sfp_lock_acquire>:
 8007954:	4801      	ldr	r0, [pc, #4]	; (800795c <__sfp_lock_acquire+0x8>)
 8007956:	f000 b8d8 	b.w	8007b0a <__retarget_lock_acquire_recursive>
 800795a:	bf00      	nop
 800795c:	20004d8c 	.word	0x20004d8c

08007960 <__sfp_lock_release>:
 8007960:	4801      	ldr	r0, [pc, #4]	; (8007968 <__sfp_lock_release+0x8>)
 8007962:	f000 b8d3 	b.w	8007b0c <__retarget_lock_release_recursive>
 8007966:	bf00      	nop
 8007968:	20004d8c 	.word	0x20004d8c

0800796c <__sinit_lock_acquire>:
 800796c:	4801      	ldr	r0, [pc, #4]	; (8007974 <__sinit_lock_acquire+0x8>)
 800796e:	f000 b8cc 	b.w	8007b0a <__retarget_lock_acquire_recursive>
 8007972:	bf00      	nop
 8007974:	20004d87 	.word	0x20004d87

08007978 <__sinit_lock_release>:
 8007978:	4801      	ldr	r0, [pc, #4]	; (8007980 <__sinit_lock_release+0x8>)
 800797a:	f000 b8c7 	b.w	8007b0c <__retarget_lock_release_recursive>
 800797e:	bf00      	nop
 8007980:	20004d87 	.word	0x20004d87

08007984 <__sinit>:
 8007984:	b510      	push	{r4, lr}
 8007986:	4604      	mov	r4, r0
 8007988:	f7ff fff0 	bl	800796c <__sinit_lock_acquire>
 800798c:	69a3      	ldr	r3, [r4, #24]
 800798e:	b11b      	cbz	r3, 8007998 <__sinit+0x14>
 8007990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007994:	f7ff bff0 	b.w	8007978 <__sinit_lock_release>
 8007998:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800799c:	6523      	str	r3, [r4, #80]	; 0x50
 800799e:	4b13      	ldr	r3, [pc, #76]	; (80079ec <__sinit+0x68>)
 80079a0:	4a13      	ldr	r2, [pc, #76]	; (80079f0 <__sinit+0x6c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80079a6:	42a3      	cmp	r3, r4
 80079a8:	bf04      	itt	eq
 80079aa:	2301      	moveq	r3, #1
 80079ac:	61a3      	streq	r3, [r4, #24]
 80079ae:	4620      	mov	r0, r4
 80079b0:	f000 f820 	bl	80079f4 <__sfp>
 80079b4:	6060      	str	r0, [r4, #4]
 80079b6:	4620      	mov	r0, r4
 80079b8:	f000 f81c 	bl	80079f4 <__sfp>
 80079bc:	60a0      	str	r0, [r4, #8]
 80079be:	4620      	mov	r0, r4
 80079c0:	f000 f818 	bl	80079f4 <__sfp>
 80079c4:	2200      	movs	r2, #0
 80079c6:	60e0      	str	r0, [r4, #12]
 80079c8:	2104      	movs	r1, #4
 80079ca:	6860      	ldr	r0, [r4, #4]
 80079cc:	f7ff ff82 	bl	80078d4 <std>
 80079d0:	68a0      	ldr	r0, [r4, #8]
 80079d2:	2201      	movs	r2, #1
 80079d4:	2109      	movs	r1, #9
 80079d6:	f7ff ff7d 	bl	80078d4 <std>
 80079da:	68e0      	ldr	r0, [r4, #12]
 80079dc:	2202      	movs	r2, #2
 80079de:	2112      	movs	r1, #18
 80079e0:	f7ff ff78 	bl	80078d4 <std>
 80079e4:	2301      	movs	r3, #1
 80079e6:	61a3      	str	r3, [r4, #24]
 80079e8:	e7d2      	b.n	8007990 <__sinit+0xc>
 80079ea:	bf00      	nop
 80079ec:	08008b58 	.word	0x08008b58
 80079f0:	0800791d 	.word	0x0800791d

080079f4 <__sfp>:
 80079f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f6:	4607      	mov	r7, r0
 80079f8:	f7ff ffac 	bl	8007954 <__sfp_lock_acquire>
 80079fc:	4b1e      	ldr	r3, [pc, #120]	; (8007a78 <__sfp+0x84>)
 80079fe:	681e      	ldr	r6, [r3, #0]
 8007a00:	69b3      	ldr	r3, [r6, #24]
 8007a02:	b913      	cbnz	r3, 8007a0a <__sfp+0x16>
 8007a04:	4630      	mov	r0, r6
 8007a06:	f7ff ffbd 	bl	8007984 <__sinit>
 8007a0a:	3648      	adds	r6, #72	; 0x48
 8007a0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	d503      	bpl.n	8007a1c <__sfp+0x28>
 8007a14:	6833      	ldr	r3, [r6, #0]
 8007a16:	b30b      	cbz	r3, 8007a5c <__sfp+0x68>
 8007a18:	6836      	ldr	r6, [r6, #0]
 8007a1a:	e7f7      	b.n	8007a0c <__sfp+0x18>
 8007a1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a20:	b9d5      	cbnz	r5, 8007a58 <__sfp+0x64>
 8007a22:	4b16      	ldr	r3, [pc, #88]	; (8007a7c <__sfp+0x88>)
 8007a24:	60e3      	str	r3, [r4, #12]
 8007a26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a2a:	6665      	str	r5, [r4, #100]	; 0x64
 8007a2c:	f000 f86c 	bl	8007b08 <__retarget_lock_init_recursive>
 8007a30:	f7ff ff96 	bl	8007960 <__sfp_lock_release>
 8007a34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a3c:	6025      	str	r5, [r4, #0]
 8007a3e:	61a5      	str	r5, [r4, #24]
 8007a40:	2208      	movs	r2, #8
 8007a42:	4629      	mov	r1, r5
 8007a44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a48:	f000 f86f 	bl	8007b2a <memset>
 8007a4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a54:	4620      	mov	r0, r4
 8007a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a58:	3468      	adds	r4, #104	; 0x68
 8007a5a:	e7d9      	b.n	8007a10 <__sfp+0x1c>
 8007a5c:	2104      	movs	r1, #4
 8007a5e:	4638      	mov	r0, r7
 8007a60:	f7ff ff62 	bl	8007928 <__sfmoreglue>
 8007a64:	4604      	mov	r4, r0
 8007a66:	6030      	str	r0, [r6, #0]
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d1d5      	bne.n	8007a18 <__sfp+0x24>
 8007a6c:	f7ff ff78 	bl	8007960 <__sfp_lock_release>
 8007a70:	230c      	movs	r3, #12
 8007a72:	603b      	str	r3, [r7, #0]
 8007a74:	e7ee      	b.n	8007a54 <__sfp+0x60>
 8007a76:	bf00      	nop
 8007a78:	08008b58 	.word	0x08008b58
 8007a7c:	ffff0001 	.word	0xffff0001

08007a80 <_fwalk_reent>:
 8007a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a84:	4606      	mov	r6, r0
 8007a86:	4688      	mov	r8, r1
 8007a88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a8c:	2700      	movs	r7, #0
 8007a8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a92:	f1b9 0901 	subs.w	r9, r9, #1
 8007a96:	d505      	bpl.n	8007aa4 <_fwalk_reent+0x24>
 8007a98:	6824      	ldr	r4, [r4, #0]
 8007a9a:	2c00      	cmp	r4, #0
 8007a9c:	d1f7      	bne.n	8007a8e <_fwalk_reent+0xe>
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aa4:	89ab      	ldrh	r3, [r5, #12]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d907      	bls.n	8007aba <_fwalk_reent+0x3a>
 8007aaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	d003      	beq.n	8007aba <_fwalk_reent+0x3a>
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	47c0      	blx	r8
 8007ab8:	4307      	orrs	r7, r0
 8007aba:	3568      	adds	r5, #104	; 0x68
 8007abc:	e7e9      	b.n	8007a92 <_fwalk_reent+0x12>
	...

08007ac0 <__libc_init_array>:
 8007ac0:	b570      	push	{r4, r5, r6, lr}
 8007ac2:	4d0d      	ldr	r5, [pc, #52]	; (8007af8 <__libc_init_array+0x38>)
 8007ac4:	4c0d      	ldr	r4, [pc, #52]	; (8007afc <__libc_init_array+0x3c>)
 8007ac6:	1b64      	subs	r4, r4, r5
 8007ac8:	10a4      	asrs	r4, r4, #2
 8007aca:	2600      	movs	r6, #0
 8007acc:	42a6      	cmp	r6, r4
 8007ace:	d109      	bne.n	8007ae4 <__libc_init_array+0x24>
 8007ad0:	4d0b      	ldr	r5, [pc, #44]	; (8007b00 <__libc_init_array+0x40>)
 8007ad2:	4c0c      	ldr	r4, [pc, #48]	; (8007b04 <__libc_init_array+0x44>)
 8007ad4:	f000 ff70 	bl	80089b8 <_init>
 8007ad8:	1b64      	subs	r4, r4, r5
 8007ada:	10a4      	asrs	r4, r4, #2
 8007adc:	2600      	movs	r6, #0
 8007ade:	42a6      	cmp	r6, r4
 8007ae0:	d105      	bne.n	8007aee <__libc_init_array+0x2e>
 8007ae2:	bd70      	pop	{r4, r5, r6, pc}
 8007ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ae8:	4798      	blx	r3
 8007aea:	3601      	adds	r6, #1
 8007aec:	e7ee      	b.n	8007acc <__libc_init_array+0xc>
 8007aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af2:	4798      	blx	r3
 8007af4:	3601      	adds	r6, #1
 8007af6:	e7f2      	b.n	8007ade <__libc_init_array+0x1e>
 8007af8:	08008b98 	.word	0x08008b98
 8007afc:	08008b98 	.word	0x08008b98
 8007b00:	08008b98 	.word	0x08008b98
 8007b04:	08008b9c 	.word	0x08008b9c

08007b08 <__retarget_lock_init_recursive>:
 8007b08:	4770      	bx	lr

08007b0a <__retarget_lock_acquire_recursive>:
 8007b0a:	4770      	bx	lr

08007b0c <__retarget_lock_release_recursive>:
 8007b0c:	4770      	bx	lr

08007b0e <memcpy>:
 8007b0e:	440a      	add	r2, r1
 8007b10:	4291      	cmp	r1, r2
 8007b12:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b16:	d100      	bne.n	8007b1a <memcpy+0xc>
 8007b18:	4770      	bx	lr
 8007b1a:	b510      	push	{r4, lr}
 8007b1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b24:	4291      	cmp	r1, r2
 8007b26:	d1f9      	bne.n	8007b1c <memcpy+0xe>
 8007b28:	bd10      	pop	{r4, pc}

08007b2a <memset>:
 8007b2a:	4402      	add	r2, r0
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d100      	bne.n	8007b34 <memset+0xa>
 8007b32:	4770      	bx	lr
 8007b34:	f803 1b01 	strb.w	r1, [r3], #1
 8007b38:	e7f9      	b.n	8007b2e <memset+0x4>
	...

08007b3c <_malloc_r>:
 8007b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3e:	1ccd      	adds	r5, r1, #3
 8007b40:	f025 0503 	bic.w	r5, r5, #3
 8007b44:	3508      	adds	r5, #8
 8007b46:	2d0c      	cmp	r5, #12
 8007b48:	bf38      	it	cc
 8007b4a:	250c      	movcc	r5, #12
 8007b4c:	2d00      	cmp	r5, #0
 8007b4e:	4606      	mov	r6, r0
 8007b50:	db01      	blt.n	8007b56 <_malloc_r+0x1a>
 8007b52:	42a9      	cmp	r1, r5
 8007b54:	d903      	bls.n	8007b5e <_malloc_r+0x22>
 8007b56:	230c      	movs	r3, #12
 8007b58:	6033      	str	r3, [r6, #0]
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b5e:	f000 fbad 	bl	80082bc <__malloc_lock>
 8007b62:	4921      	ldr	r1, [pc, #132]	; (8007be8 <_malloc_r+0xac>)
 8007b64:	680a      	ldr	r2, [r1, #0]
 8007b66:	4614      	mov	r4, r2
 8007b68:	b99c      	cbnz	r4, 8007b92 <_malloc_r+0x56>
 8007b6a:	4f20      	ldr	r7, [pc, #128]	; (8007bec <_malloc_r+0xb0>)
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	b923      	cbnz	r3, 8007b7a <_malloc_r+0x3e>
 8007b70:	4621      	mov	r1, r4
 8007b72:	4630      	mov	r0, r6
 8007b74:	f000 f934 	bl	8007de0 <_sbrk_r>
 8007b78:	6038      	str	r0, [r7, #0]
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f000 f92f 	bl	8007de0 <_sbrk_r>
 8007b82:	1c43      	adds	r3, r0, #1
 8007b84:	d123      	bne.n	8007bce <_malloc_r+0x92>
 8007b86:	230c      	movs	r3, #12
 8007b88:	6033      	str	r3, [r6, #0]
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	f000 fb9c 	bl	80082c8 <__malloc_unlock>
 8007b90:	e7e3      	b.n	8007b5a <_malloc_r+0x1e>
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	1b5b      	subs	r3, r3, r5
 8007b96:	d417      	bmi.n	8007bc8 <_malloc_r+0x8c>
 8007b98:	2b0b      	cmp	r3, #11
 8007b9a:	d903      	bls.n	8007ba4 <_malloc_r+0x68>
 8007b9c:	6023      	str	r3, [r4, #0]
 8007b9e:	441c      	add	r4, r3
 8007ba0:	6025      	str	r5, [r4, #0]
 8007ba2:	e004      	b.n	8007bae <_malloc_r+0x72>
 8007ba4:	6863      	ldr	r3, [r4, #4]
 8007ba6:	42a2      	cmp	r2, r4
 8007ba8:	bf0c      	ite	eq
 8007baa:	600b      	streq	r3, [r1, #0]
 8007bac:	6053      	strne	r3, [r2, #4]
 8007bae:	4630      	mov	r0, r6
 8007bb0:	f000 fb8a 	bl	80082c8 <__malloc_unlock>
 8007bb4:	f104 000b 	add.w	r0, r4, #11
 8007bb8:	1d23      	adds	r3, r4, #4
 8007bba:	f020 0007 	bic.w	r0, r0, #7
 8007bbe:	1ac2      	subs	r2, r0, r3
 8007bc0:	d0cc      	beq.n	8007b5c <_malloc_r+0x20>
 8007bc2:	1a1b      	subs	r3, r3, r0
 8007bc4:	50a3      	str	r3, [r4, r2]
 8007bc6:	e7c9      	b.n	8007b5c <_malloc_r+0x20>
 8007bc8:	4622      	mov	r2, r4
 8007bca:	6864      	ldr	r4, [r4, #4]
 8007bcc:	e7cc      	b.n	8007b68 <_malloc_r+0x2c>
 8007bce:	1cc4      	adds	r4, r0, #3
 8007bd0:	f024 0403 	bic.w	r4, r4, #3
 8007bd4:	42a0      	cmp	r0, r4
 8007bd6:	d0e3      	beq.n	8007ba0 <_malloc_r+0x64>
 8007bd8:	1a21      	subs	r1, r4, r0
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f000 f900 	bl	8007de0 <_sbrk_r>
 8007be0:	3001      	adds	r0, #1
 8007be2:	d1dd      	bne.n	8007ba0 <_malloc_r+0x64>
 8007be4:	e7cf      	b.n	8007b86 <_malloc_r+0x4a>
 8007be6:	bf00      	nop
 8007be8:	20004af8 	.word	0x20004af8
 8007bec:	20004afc 	.word	0x20004afc

08007bf0 <iprintf>:
 8007bf0:	b40f      	push	{r0, r1, r2, r3}
 8007bf2:	4b0a      	ldr	r3, [pc, #40]	; (8007c1c <iprintf+0x2c>)
 8007bf4:	b513      	push	{r0, r1, r4, lr}
 8007bf6:	681c      	ldr	r4, [r3, #0]
 8007bf8:	b124      	cbz	r4, 8007c04 <iprintf+0x14>
 8007bfa:	69a3      	ldr	r3, [r4, #24]
 8007bfc:	b913      	cbnz	r3, 8007c04 <iprintf+0x14>
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f7ff fec0 	bl	8007984 <__sinit>
 8007c04:	ab05      	add	r3, sp, #20
 8007c06:	9a04      	ldr	r2, [sp, #16]
 8007c08:	68a1      	ldr	r1, [r4, #8]
 8007c0a:	9301      	str	r3, [sp, #4]
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f000 fbdb 	bl	80083c8 <_vfiprintf_r>
 8007c12:	b002      	add	sp, #8
 8007c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c18:	b004      	add	sp, #16
 8007c1a:	4770      	bx	lr
 8007c1c:	20000078 	.word	0x20000078

08007c20 <_puts_r>:
 8007c20:	b570      	push	{r4, r5, r6, lr}
 8007c22:	460e      	mov	r6, r1
 8007c24:	4605      	mov	r5, r0
 8007c26:	b118      	cbz	r0, 8007c30 <_puts_r+0x10>
 8007c28:	6983      	ldr	r3, [r0, #24]
 8007c2a:	b90b      	cbnz	r3, 8007c30 <_puts_r+0x10>
 8007c2c:	f7ff feaa 	bl	8007984 <__sinit>
 8007c30:	69ab      	ldr	r3, [r5, #24]
 8007c32:	68ac      	ldr	r4, [r5, #8]
 8007c34:	b913      	cbnz	r3, 8007c3c <_puts_r+0x1c>
 8007c36:	4628      	mov	r0, r5
 8007c38:	f7ff fea4 	bl	8007984 <__sinit>
 8007c3c:	4b2c      	ldr	r3, [pc, #176]	; (8007cf0 <_puts_r+0xd0>)
 8007c3e:	429c      	cmp	r4, r3
 8007c40:	d120      	bne.n	8007c84 <_puts_r+0x64>
 8007c42:	686c      	ldr	r4, [r5, #4]
 8007c44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c46:	07db      	lsls	r3, r3, #31
 8007c48:	d405      	bmi.n	8007c56 <_puts_r+0x36>
 8007c4a:	89a3      	ldrh	r3, [r4, #12]
 8007c4c:	0598      	lsls	r0, r3, #22
 8007c4e:	d402      	bmi.n	8007c56 <_puts_r+0x36>
 8007c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c52:	f7ff ff5a 	bl	8007b0a <__retarget_lock_acquire_recursive>
 8007c56:	89a3      	ldrh	r3, [r4, #12]
 8007c58:	0719      	lsls	r1, r3, #28
 8007c5a:	d51d      	bpl.n	8007c98 <_puts_r+0x78>
 8007c5c:	6923      	ldr	r3, [r4, #16]
 8007c5e:	b1db      	cbz	r3, 8007c98 <_puts_r+0x78>
 8007c60:	3e01      	subs	r6, #1
 8007c62:	68a3      	ldr	r3, [r4, #8]
 8007c64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	60a3      	str	r3, [r4, #8]
 8007c6c:	bb39      	cbnz	r1, 8007cbe <_puts_r+0x9e>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	da38      	bge.n	8007ce4 <_puts_r+0xc4>
 8007c72:	4622      	mov	r2, r4
 8007c74:	210a      	movs	r1, #10
 8007c76:	4628      	mov	r0, r5
 8007c78:	f000 f906 	bl	8007e88 <__swbuf_r>
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	d011      	beq.n	8007ca4 <_puts_r+0x84>
 8007c80:	250a      	movs	r5, #10
 8007c82:	e011      	b.n	8007ca8 <_puts_r+0x88>
 8007c84:	4b1b      	ldr	r3, [pc, #108]	; (8007cf4 <_puts_r+0xd4>)
 8007c86:	429c      	cmp	r4, r3
 8007c88:	d101      	bne.n	8007c8e <_puts_r+0x6e>
 8007c8a:	68ac      	ldr	r4, [r5, #8]
 8007c8c:	e7da      	b.n	8007c44 <_puts_r+0x24>
 8007c8e:	4b1a      	ldr	r3, [pc, #104]	; (8007cf8 <_puts_r+0xd8>)
 8007c90:	429c      	cmp	r4, r3
 8007c92:	bf08      	it	eq
 8007c94:	68ec      	ldreq	r4, [r5, #12]
 8007c96:	e7d5      	b.n	8007c44 <_puts_r+0x24>
 8007c98:	4621      	mov	r1, r4
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	f000 f958 	bl	8007f50 <__swsetup_r>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d0dd      	beq.n	8007c60 <_puts_r+0x40>
 8007ca4:	f04f 35ff 	mov.w	r5, #4294967295
 8007ca8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007caa:	07da      	lsls	r2, r3, #31
 8007cac:	d405      	bmi.n	8007cba <_puts_r+0x9a>
 8007cae:	89a3      	ldrh	r3, [r4, #12]
 8007cb0:	059b      	lsls	r3, r3, #22
 8007cb2:	d402      	bmi.n	8007cba <_puts_r+0x9a>
 8007cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cb6:	f7ff ff29 	bl	8007b0c <__retarget_lock_release_recursive>
 8007cba:	4628      	mov	r0, r5
 8007cbc:	bd70      	pop	{r4, r5, r6, pc}
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	da04      	bge.n	8007ccc <_puts_r+0xac>
 8007cc2:	69a2      	ldr	r2, [r4, #24]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	dc06      	bgt.n	8007cd6 <_puts_r+0xb6>
 8007cc8:	290a      	cmp	r1, #10
 8007cca:	d004      	beq.n	8007cd6 <_puts_r+0xb6>
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	1c5a      	adds	r2, r3, #1
 8007cd0:	6022      	str	r2, [r4, #0]
 8007cd2:	7019      	strb	r1, [r3, #0]
 8007cd4:	e7c5      	b.n	8007c62 <_puts_r+0x42>
 8007cd6:	4622      	mov	r2, r4
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f000 f8d5 	bl	8007e88 <__swbuf_r>
 8007cde:	3001      	adds	r0, #1
 8007ce0:	d1bf      	bne.n	8007c62 <_puts_r+0x42>
 8007ce2:	e7df      	b.n	8007ca4 <_puts_r+0x84>
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	250a      	movs	r5, #10
 8007ce8:	1c5a      	adds	r2, r3, #1
 8007cea:	6022      	str	r2, [r4, #0]
 8007cec:	701d      	strb	r5, [r3, #0]
 8007cee:	e7db      	b.n	8007ca8 <_puts_r+0x88>
 8007cf0:	08008b18 	.word	0x08008b18
 8007cf4:	08008b38 	.word	0x08008b38
 8007cf8:	08008af8 	.word	0x08008af8

08007cfc <puts>:
 8007cfc:	4b02      	ldr	r3, [pc, #8]	; (8007d08 <puts+0xc>)
 8007cfe:	4601      	mov	r1, r0
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	f7ff bf8d 	b.w	8007c20 <_puts_r>
 8007d06:	bf00      	nop
 8007d08:	20000078 	.word	0x20000078

08007d0c <cleanup_glue>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	460c      	mov	r4, r1
 8007d10:	6809      	ldr	r1, [r1, #0]
 8007d12:	4605      	mov	r5, r0
 8007d14:	b109      	cbz	r1, 8007d1a <cleanup_glue+0xe>
 8007d16:	f7ff fff9 	bl	8007d0c <cleanup_glue>
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d22:	f000 bad7 	b.w	80082d4 <_free_r>
	...

08007d28 <_reclaim_reent>:
 8007d28:	4b2c      	ldr	r3, [pc, #176]	; (8007ddc <_reclaim_reent+0xb4>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4283      	cmp	r3, r0
 8007d2e:	b570      	push	{r4, r5, r6, lr}
 8007d30:	4604      	mov	r4, r0
 8007d32:	d051      	beq.n	8007dd8 <_reclaim_reent+0xb0>
 8007d34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007d36:	b143      	cbz	r3, 8007d4a <_reclaim_reent+0x22>
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d14a      	bne.n	8007dd4 <_reclaim_reent+0xac>
 8007d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d40:	6819      	ldr	r1, [r3, #0]
 8007d42:	b111      	cbz	r1, 8007d4a <_reclaim_reent+0x22>
 8007d44:	4620      	mov	r0, r4
 8007d46:	f000 fac5 	bl	80082d4 <_free_r>
 8007d4a:	6961      	ldr	r1, [r4, #20]
 8007d4c:	b111      	cbz	r1, 8007d54 <_reclaim_reent+0x2c>
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f000 fac0 	bl	80082d4 <_free_r>
 8007d54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007d56:	b111      	cbz	r1, 8007d5e <_reclaim_reent+0x36>
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f000 fabb 	bl	80082d4 <_free_r>
 8007d5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007d60:	b111      	cbz	r1, 8007d68 <_reclaim_reent+0x40>
 8007d62:	4620      	mov	r0, r4
 8007d64:	f000 fab6 	bl	80082d4 <_free_r>
 8007d68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007d6a:	b111      	cbz	r1, 8007d72 <_reclaim_reent+0x4a>
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f000 fab1 	bl	80082d4 <_free_r>
 8007d72:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007d74:	b111      	cbz	r1, 8007d7c <_reclaim_reent+0x54>
 8007d76:	4620      	mov	r0, r4
 8007d78:	f000 faac 	bl	80082d4 <_free_r>
 8007d7c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007d7e:	b111      	cbz	r1, 8007d86 <_reclaim_reent+0x5e>
 8007d80:	4620      	mov	r0, r4
 8007d82:	f000 faa7 	bl	80082d4 <_free_r>
 8007d86:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007d88:	b111      	cbz	r1, 8007d90 <_reclaim_reent+0x68>
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f000 faa2 	bl	80082d4 <_free_r>
 8007d90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d92:	b111      	cbz	r1, 8007d9a <_reclaim_reent+0x72>
 8007d94:	4620      	mov	r0, r4
 8007d96:	f000 fa9d 	bl	80082d4 <_free_r>
 8007d9a:	69a3      	ldr	r3, [r4, #24]
 8007d9c:	b1e3      	cbz	r3, 8007dd8 <_reclaim_reent+0xb0>
 8007d9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007da0:	4620      	mov	r0, r4
 8007da2:	4798      	blx	r3
 8007da4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007da6:	b1b9      	cbz	r1, 8007dd8 <_reclaim_reent+0xb0>
 8007da8:	4620      	mov	r0, r4
 8007daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007dae:	f7ff bfad 	b.w	8007d0c <cleanup_glue>
 8007db2:	5949      	ldr	r1, [r1, r5]
 8007db4:	b941      	cbnz	r1, 8007dc8 <_reclaim_reent+0xa0>
 8007db6:	3504      	adds	r5, #4
 8007db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dba:	2d80      	cmp	r5, #128	; 0x80
 8007dbc:	68d9      	ldr	r1, [r3, #12]
 8007dbe:	d1f8      	bne.n	8007db2 <_reclaim_reent+0x8a>
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f000 fa87 	bl	80082d4 <_free_r>
 8007dc6:	e7ba      	b.n	8007d3e <_reclaim_reent+0x16>
 8007dc8:	680e      	ldr	r6, [r1, #0]
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 fa82 	bl	80082d4 <_free_r>
 8007dd0:	4631      	mov	r1, r6
 8007dd2:	e7ef      	b.n	8007db4 <_reclaim_reent+0x8c>
 8007dd4:	2500      	movs	r5, #0
 8007dd6:	e7ef      	b.n	8007db8 <_reclaim_reent+0x90>
 8007dd8:	bd70      	pop	{r4, r5, r6, pc}
 8007dda:	bf00      	nop
 8007ddc:	20000078 	.word	0x20000078

08007de0 <_sbrk_r>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	4d06      	ldr	r5, [pc, #24]	; (8007dfc <_sbrk_r+0x1c>)
 8007de4:	2300      	movs	r3, #0
 8007de6:	4604      	mov	r4, r0
 8007de8:	4608      	mov	r0, r1
 8007dea:	602b      	str	r3, [r5, #0]
 8007dec:	f7f9 fbce 	bl	800158c <_sbrk>
 8007df0:	1c43      	adds	r3, r0, #1
 8007df2:	d102      	bne.n	8007dfa <_sbrk_r+0x1a>
 8007df4:	682b      	ldr	r3, [r5, #0]
 8007df6:	b103      	cbz	r3, 8007dfa <_sbrk_r+0x1a>
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	bd38      	pop	{r3, r4, r5, pc}
 8007dfc:	20004d90 	.word	0x20004d90

08007e00 <__sread>:
 8007e00:	b510      	push	{r4, lr}
 8007e02:	460c      	mov	r4, r1
 8007e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e08:	f000 fda2 	bl	8008950 <_read_r>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	bfab      	itete	ge
 8007e10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e12:	89a3      	ldrhlt	r3, [r4, #12]
 8007e14:	181b      	addge	r3, r3, r0
 8007e16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e1a:	bfac      	ite	ge
 8007e1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e1e:	81a3      	strhlt	r3, [r4, #12]
 8007e20:	bd10      	pop	{r4, pc}

08007e22 <__swrite>:
 8007e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e26:	461f      	mov	r7, r3
 8007e28:	898b      	ldrh	r3, [r1, #12]
 8007e2a:	05db      	lsls	r3, r3, #23
 8007e2c:	4605      	mov	r5, r0
 8007e2e:	460c      	mov	r4, r1
 8007e30:	4616      	mov	r6, r2
 8007e32:	d505      	bpl.n	8007e40 <__swrite+0x1e>
 8007e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e38:	2302      	movs	r3, #2
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f000 f9c8 	bl	80081d0 <_lseek_r>
 8007e40:	89a3      	ldrh	r3, [r4, #12]
 8007e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e4a:	81a3      	strh	r3, [r4, #12]
 8007e4c:	4632      	mov	r2, r6
 8007e4e:	463b      	mov	r3, r7
 8007e50:	4628      	mov	r0, r5
 8007e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e56:	f000 b869 	b.w	8007f2c <_write_r>

08007e5a <__sseek>:
 8007e5a:	b510      	push	{r4, lr}
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e62:	f000 f9b5 	bl	80081d0 <_lseek_r>
 8007e66:	1c43      	adds	r3, r0, #1
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	bf15      	itete	ne
 8007e6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e76:	81a3      	strheq	r3, [r4, #12]
 8007e78:	bf18      	it	ne
 8007e7a:	81a3      	strhne	r3, [r4, #12]
 8007e7c:	bd10      	pop	{r4, pc}

08007e7e <__sclose>:
 8007e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e82:	f000 b8d3 	b.w	800802c <_close_r>
	...

08007e88 <__swbuf_r>:
 8007e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8a:	460e      	mov	r6, r1
 8007e8c:	4614      	mov	r4, r2
 8007e8e:	4605      	mov	r5, r0
 8007e90:	b118      	cbz	r0, 8007e9a <__swbuf_r+0x12>
 8007e92:	6983      	ldr	r3, [r0, #24]
 8007e94:	b90b      	cbnz	r3, 8007e9a <__swbuf_r+0x12>
 8007e96:	f7ff fd75 	bl	8007984 <__sinit>
 8007e9a:	4b21      	ldr	r3, [pc, #132]	; (8007f20 <__swbuf_r+0x98>)
 8007e9c:	429c      	cmp	r4, r3
 8007e9e:	d12b      	bne.n	8007ef8 <__swbuf_r+0x70>
 8007ea0:	686c      	ldr	r4, [r5, #4]
 8007ea2:	69a3      	ldr	r3, [r4, #24]
 8007ea4:	60a3      	str	r3, [r4, #8]
 8007ea6:	89a3      	ldrh	r3, [r4, #12]
 8007ea8:	071a      	lsls	r2, r3, #28
 8007eaa:	d52f      	bpl.n	8007f0c <__swbuf_r+0x84>
 8007eac:	6923      	ldr	r3, [r4, #16]
 8007eae:	b36b      	cbz	r3, 8007f0c <__swbuf_r+0x84>
 8007eb0:	6923      	ldr	r3, [r4, #16]
 8007eb2:	6820      	ldr	r0, [r4, #0]
 8007eb4:	1ac0      	subs	r0, r0, r3
 8007eb6:	6963      	ldr	r3, [r4, #20]
 8007eb8:	b2f6      	uxtb	r6, r6
 8007eba:	4283      	cmp	r3, r0
 8007ebc:	4637      	mov	r7, r6
 8007ebe:	dc04      	bgt.n	8007eca <__swbuf_r+0x42>
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	f000 f948 	bl	8008158 <_fflush_r>
 8007ec8:	bb30      	cbnz	r0, 8007f18 <__swbuf_r+0x90>
 8007eca:	68a3      	ldr	r3, [r4, #8]
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	60a3      	str	r3, [r4, #8]
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	1c5a      	adds	r2, r3, #1
 8007ed4:	6022      	str	r2, [r4, #0]
 8007ed6:	701e      	strb	r6, [r3, #0]
 8007ed8:	6963      	ldr	r3, [r4, #20]
 8007eda:	3001      	adds	r0, #1
 8007edc:	4283      	cmp	r3, r0
 8007ede:	d004      	beq.n	8007eea <__swbuf_r+0x62>
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	07db      	lsls	r3, r3, #31
 8007ee4:	d506      	bpl.n	8007ef4 <__swbuf_r+0x6c>
 8007ee6:	2e0a      	cmp	r6, #10
 8007ee8:	d104      	bne.n	8007ef4 <__swbuf_r+0x6c>
 8007eea:	4621      	mov	r1, r4
 8007eec:	4628      	mov	r0, r5
 8007eee:	f000 f933 	bl	8008158 <_fflush_r>
 8007ef2:	b988      	cbnz	r0, 8007f18 <__swbuf_r+0x90>
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef8:	4b0a      	ldr	r3, [pc, #40]	; (8007f24 <__swbuf_r+0x9c>)
 8007efa:	429c      	cmp	r4, r3
 8007efc:	d101      	bne.n	8007f02 <__swbuf_r+0x7a>
 8007efe:	68ac      	ldr	r4, [r5, #8]
 8007f00:	e7cf      	b.n	8007ea2 <__swbuf_r+0x1a>
 8007f02:	4b09      	ldr	r3, [pc, #36]	; (8007f28 <__swbuf_r+0xa0>)
 8007f04:	429c      	cmp	r4, r3
 8007f06:	bf08      	it	eq
 8007f08:	68ec      	ldreq	r4, [r5, #12]
 8007f0a:	e7ca      	b.n	8007ea2 <__swbuf_r+0x1a>
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	4628      	mov	r0, r5
 8007f10:	f000 f81e 	bl	8007f50 <__swsetup_r>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d0cb      	beq.n	8007eb0 <__swbuf_r+0x28>
 8007f18:	f04f 37ff 	mov.w	r7, #4294967295
 8007f1c:	e7ea      	b.n	8007ef4 <__swbuf_r+0x6c>
 8007f1e:	bf00      	nop
 8007f20:	08008b18 	.word	0x08008b18
 8007f24:	08008b38 	.word	0x08008b38
 8007f28:	08008af8 	.word	0x08008af8

08007f2c <_write_r>:
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	4d07      	ldr	r5, [pc, #28]	; (8007f4c <_write_r+0x20>)
 8007f30:	4604      	mov	r4, r0
 8007f32:	4608      	mov	r0, r1
 8007f34:	4611      	mov	r1, r2
 8007f36:	2200      	movs	r2, #0
 8007f38:	602a      	str	r2, [r5, #0]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	f7f8 fb24 	bl	8000588 <_write>
 8007f40:	1c43      	adds	r3, r0, #1
 8007f42:	d102      	bne.n	8007f4a <_write_r+0x1e>
 8007f44:	682b      	ldr	r3, [r5, #0]
 8007f46:	b103      	cbz	r3, 8007f4a <_write_r+0x1e>
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	bd38      	pop	{r3, r4, r5, pc}
 8007f4c:	20004d90 	.word	0x20004d90

08007f50 <__swsetup_r>:
 8007f50:	4b32      	ldr	r3, [pc, #200]	; (800801c <__swsetup_r+0xcc>)
 8007f52:	b570      	push	{r4, r5, r6, lr}
 8007f54:	681d      	ldr	r5, [r3, #0]
 8007f56:	4606      	mov	r6, r0
 8007f58:	460c      	mov	r4, r1
 8007f5a:	b125      	cbz	r5, 8007f66 <__swsetup_r+0x16>
 8007f5c:	69ab      	ldr	r3, [r5, #24]
 8007f5e:	b913      	cbnz	r3, 8007f66 <__swsetup_r+0x16>
 8007f60:	4628      	mov	r0, r5
 8007f62:	f7ff fd0f 	bl	8007984 <__sinit>
 8007f66:	4b2e      	ldr	r3, [pc, #184]	; (8008020 <__swsetup_r+0xd0>)
 8007f68:	429c      	cmp	r4, r3
 8007f6a:	d10f      	bne.n	8007f8c <__swsetup_r+0x3c>
 8007f6c:	686c      	ldr	r4, [r5, #4]
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f74:	0719      	lsls	r1, r3, #28
 8007f76:	d42c      	bmi.n	8007fd2 <__swsetup_r+0x82>
 8007f78:	06dd      	lsls	r5, r3, #27
 8007f7a:	d411      	bmi.n	8007fa0 <__swsetup_r+0x50>
 8007f7c:	2309      	movs	r3, #9
 8007f7e:	6033      	str	r3, [r6, #0]
 8007f80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f84:	81a3      	strh	r3, [r4, #12]
 8007f86:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8a:	e03e      	b.n	800800a <__swsetup_r+0xba>
 8007f8c:	4b25      	ldr	r3, [pc, #148]	; (8008024 <__swsetup_r+0xd4>)
 8007f8e:	429c      	cmp	r4, r3
 8007f90:	d101      	bne.n	8007f96 <__swsetup_r+0x46>
 8007f92:	68ac      	ldr	r4, [r5, #8]
 8007f94:	e7eb      	b.n	8007f6e <__swsetup_r+0x1e>
 8007f96:	4b24      	ldr	r3, [pc, #144]	; (8008028 <__swsetup_r+0xd8>)
 8007f98:	429c      	cmp	r4, r3
 8007f9a:	bf08      	it	eq
 8007f9c:	68ec      	ldreq	r4, [r5, #12]
 8007f9e:	e7e6      	b.n	8007f6e <__swsetup_r+0x1e>
 8007fa0:	0758      	lsls	r0, r3, #29
 8007fa2:	d512      	bpl.n	8007fca <__swsetup_r+0x7a>
 8007fa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fa6:	b141      	cbz	r1, 8007fba <__swsetup_r+0x6a>
 8007fa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fac:	4299      	cmp	r1, r3
 8007fae:	d002      	beq.n	8007fb6 <__swsetup_r+0x66>
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f000 f98f 	bl	80082d4 <_free_r>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	6363      	str	r3, [r4, #52]	; 0x34
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fc0:	81a3      	strh	r3, [r4, #12]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	6063      	str	r3, [r4, #4]
 8007fc6:	6923      	ldr	r3, [r4, #16]
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	f043 0308 	orr.w	r3, r3, #8
 8007fd0:	81a3      	strh	r3, [r4, #12]
 8007fd2:	6923      	ldr	r3, [r4, #16]
 8007fd4:	b94b      	cbnz	r3, 8007fea <__swsetup_r+0x9a>
 8007fd6:	89a3      	ldrh	r3, [r4, #12]
 8007fd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fe0:	d003      	beq.n	8007fea <__swsetup_r+0x9a>
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f000 f929 	bl	800823c <__smakebuf_r>
 8007fea:	89a0      	ldrh	r0, [r4, #12]
 8007fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ff0:	f010 0301 	ands.w	r3, r0, #1
 8007ff4:	d00a      	beq.n	800800c <__swsetup_r+0xbc>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60a3      	str	r3, [r4, #8]
 8007ffa:	6963      	ldr	r3, [r4, #20]
 8007ffc:	425b      	negs	r3, r3
 8007ffe:	61a3      	str	r3, [r4, #24]
 8008000:	6923      	ldr	r3, [r4, #16]
 8008002:	b943      	cbnz	r3, 8008016 <__swsetup_r+0xc6>
 8008004:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008008:	d1ba      	bne.n	8007f80 <__swsetup_r+0x30>
 800800a:	bd70      	pop	{r4, r5, r6, pc}
 800800c:	0781      	lsls	r1, r0, #30
 800800e:	bf58      	it	pl
 8008010:	6963      	ldrpl	r3, [r4, #20]
 8008012:	60a3      	str	r3, [r4, #8]
 8008014:	e7f4      	b.n	8008000 <__swsetup_r+0xb0>
 8008016:	2000      	movs	r0, #0
 8008018:	e7f7      	b.n	800800a <__swsetup_r+0xba>
 800801a:	bf00      	nop
 800801c:	20000078 	.word	0x20000078
 8008020:	08008b18 	.word	0x08008b18
 8008024:	08008b38 	.word	0x08008b38
 8008028:	08008af8 	.word	0x08008af8

0800802c <_close_r>:
 800802c:	b538      	push	{r3, r4, r5, lr}
 800802e:	4d06      	ldr	r5, [pc, #24]	; (8008048 <_close_r+0x1c>)
 8008030:	2300      	movs	r3, #0
 8008032:	4604      	mov	r4, r0
 8008034:	4608      	mov	r0, r1
 8008036:	602b      	str	r3, [r5, #0]
 8008038:	f7f9 fa73 	bl	8001522 <_close>
 800803c:	1c43      	adds	r3, r0, #1
 800803e:	d102      	bne.n	8008046 <_close_r+0x1a>
 8008040:	682b      	ldr	r3, [r5, #0]
 8008042:	b103      	cbz	r3, 8008046 <_close_r+0x1a>
 8008044:	6023      	str	r3, [r4, #0]
 8008046:	bd38      	pop	{r3, r4, r5, pc}
 8008048:	20004d90 	.word	0x20004d90

0800804c <__sflush_r>:
 800804c:	898a      	ldrh	r2, [r1, #12]
 800804e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008052:	4605      	mov	r5, r0
 8008054:	0710      	lsls	r0, r2, #28
 8008056:	460c      	mov	r4, r1
 8008058:	d458      	bmi.n	800810c <__sflush_r+0xc0>
 800805a:	684b      	ldr	r3, [r1, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	dc05      	bgt.n	800806c <__sflush_r+0x20>
 8008060:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008062:	2b00      	cmp	r3, #0
 8008064:	dc02      	bgt.n	800806c <__sflush_r+0x20>
 8008066:	2000      	movs	r0, #0
 8008068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800806c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800806e:	2e00      	cmp	r6, #0
 8008070:	d0f9      	beq.n	8008066 <__sflush_r+0x1a>
 8008072:	2300      	movs	r3, #0
 8008074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008078:	682f      	ldr	r7, [r5, #0]
 800807a:	602b      	str	r3, [r5, #0]
 800807c:	d032      	beq.n	80080e4 <__sflush_r+0x98>
 800807e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008080:	89a3      	ldrh	r3, [r4, #12]
 8008082:	075a      	lsls	r2, r3, #29
 8008084:	d505      	bpl.n	8008092 <__sflush_r+0x46>
 8008086:	6863      	ldr	r3, [r4, #4]
 8008088:	1ac0      	subs	r0, r0, r3
 800808a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800808c:	b10b      	cbz	r3, 8008092 <__sflush_r+0x46>
 800808e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008090:	1ac0      	subs	r0, r0, r3
 8008092:	2300      	movs	r3, #0
 8008094:	4602      	mov	r2, r0
 8008096:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008098:	6a21      	ldr	r1, [r4, #32]
 800809a:	4628      	mov	r0, r5
 800809c:	47b0      	blx	r6
 800809e:	1c43      	adds	r3, r0, #1
 80080a0:	89a3      	ldrh	r3, [r4, #12]
 80080a2:	d106      	bne.n	80080b2 <__sflush_r+0x66>
 80080a4:	6829      	ldr	r1, [r5, #0]
 80080a6:	291d      	cmp	r1, #29
 80080a8:	d82c      	bhi.n	8008104 <__sflush_r+0xb8>
 80080aa:	4a2a      	ldr	r2, [pc, #168]	; (8008154 <__sflush_r+0x108>)
 80080ac:	40ca      	lsrs	r2, r1
 80080ae:	07d6      	lsls	r6, r2, #31
 80080b0:	d528      	bpl.n	8008104 <__sflush_r+0xb8>
 80080b2:	2200      	movs	r2, #0
 80080b4:	6062      	str	r2, [r4, #4]
 80080b6:	04d9      	lsls	r1, r3, #19
 80080b8:	6922      	ldr	r2, [r4, #16]
 80080ba:	6022      	str	r2, [r4, #0]
 80080bc:	d504      	bpl.n	80080c8 <__sflush_r+0x7c>
 80080be:	1c42      	adds	r2, r0, #1
 80080c0:	d101      	bne.n	80080c6 <__sflush_r+0x7a>
 80080c2:	682b      	ldr	r3, [r5, #0]
 80080c4:	b903      	cbnz	r3, 80080c8 <__sflush_r+0x7c>
 80080c6:	6560      	str	r0, [r4, #84]	; 0x54
 80080c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080ca:	602f      	str	r7, [r5, #0]
 80080cc:	2900      	cmp	r1, #0
 80080ce:	d0ca      	beq.n	8008066 <__sflush_r+0x1a>
 80080d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080d4:	4299      	cmp	r1, r3
 80080d6:	d002      	beq.n	80080de <__sflush_r+0x92>
 80080d8:	4628      	mov	r0, r5
 80080da:	f000 f8fb 	bl	80082d4 <_free_r>
 80080de:	2000      	movs	r0, #0
 80080e0:	6360      	str	r0, [r4, #52]	; 0x34
 80080e2:	e7c1      	b.n	8008068 <__sflush_r+0x1c>
 80080e4:	6a21      	ldr	r1, [r4, #32]
 80080e6:	2301      	movs	r3, #1
 80080e8:	4628      	mov	r0, r5
 80080ea:	47b0      	blx	r6
 80080ec:	1c41      	adds	r1, r0, #1
 80080ee:	d1c7      	bne.n	8008080 <__sflush_r+0x34>
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d0c4      	beq.n	8008080 <__sflush_r+0x34>
 80080f6:	2b1d      	cmp	r3, #29
 80080f8:	d001      	beq.n	80080fe <__sflush_r+0xb2>
 80080fa:	2b16      	cmp	r3, #22
 80080fc:	d101      	bne.n	8008102 <__sflush_r+0xb6>
 80080fe:	602f      	str	r7, [r5, #0]
 8008100:	e7b1      	b.n	8008066 <__sflush_r+0x1a>
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008108:	81a3      	strh	r3, [r4, #12]
 800810a:	e7ad      	b.n	8008068 <__sflush_r+0x1c>
 800810c:	690f      	ldr	r7, [r1, #16]
 800810e:	2f00      	cmp	r7, #0
 8008110:	d0a9      	beq.n	8008066 <__sflush_r+0x1a>
 8008112:	0793      	lsls	r3, r2, #30
 8008114:	680e      	ldr	r6, [r1, #0]
 8008116:	bf08      	it	eq
 8008118:	694b      	ldreq	r3, [r1, #20]
 800811a:	600f      	str	r7, [r1, #0]
 800811c:	bf18      	it	ne
 800811e:	2300      	movne	r3, #0
 8008120:	eba6 0807 	sub.w	r8, r6, r7
 8008124:	608b      	str	r3, [r1, #8]
 8008126:	f1b8 0f00 	cmp.w	r8, #0
 800812a:	dd9c      	ble.n	8008066 <__sflush_r+0x1a>
 800812c:	6a21      	ldr	r1, [r4, #32]
 800812e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008130:	4643      	mov	r3, r8
 8008132:	463a      	mov	r2, r7
 8008134:	4628      	mov	r0, r5
 8008136:	47b0      	blx	r6
 8008138:	2800      	cmp	r0, #0
 800813a:	dc06      	bgt.n	800814a <__sflush_r+0xfe>
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008142:	81a3      	strh	r3, [r4, #12]
 8008144:	f04f 30ff 	mov.w	r0, #4294967295
 8008148:	e78e      	b.n	8008068 <__sflush_r+0x1c>
 800814a:	4407      	add	r7, r0
 800814c:	eba8 0800 	sub.w	r8, r8, r0
 8008150:	e7e9      	b.n	8008126 <__sflush_r+0xda>
 8008152:	bf00      	nop
 8008154:	20400001 	.word	0x20400001

08008158 <_fflush_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	690b      	ldr	r3, [r1, #16]
 800815c:	4605      	mov	r5, r0
 800815e:	460c      	mov	r4, r1
 8008160:	b913      	cbnz	r3, 8008168 <_fflush_r+0x10>
 8008162:	2500      	movs	r5, #0
 8008164:	4628      	mov	r0, r5
 8008166:	bd38      	pop	{r3, r4, r5, pc}
 8008168:	b118      	cbz	r0, 8008172 <_fflush_r+0x1a>
 800816a:	6983      	ldr	r3, [r0, #24]
 800816c:	b90b      	cbnz	r3, 8008172 <_fflush_r+0x1a>
 800816e:	f7ff fc09 	bl	8007984 <__sinit>
 8008172:	4b14      	ldr	r3, [pc, #80]	; (80081c4 <_fflush_r+0x6c>)
 8008174:	429c      	cmp	r4, r3
 8008176:	d11b      	bne.n	80081b0 <_fflush_r+0x58>
 8008178:	686c      	ldr	r4, [r5, #4]
 800817a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d0ef      	beq.n	8008162 <_fflush_r+0xa>
 8008182:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008184:	07d0      	lsls	r0, r2, #31
 8008186:	d404      	bmi.n	8008192 <_fflush_r+0x3a>
 8008188:	0599      	lsls	r1, r3, #22
 800818a:	d402      	bmi.n	8008192 <_fflush_r+0x3a>
 800818c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800818e:	f7ff fcbc 	bl	8007b0a <__retarget_lock_acquire_recursive>
 8008192:	4628      	mov	r0, r5
 8008194:	4621      	mov	r1, r4
 8008196:	f7ff ff59 	bl	800804c <__sflush_r>
 800819a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800819c:	07da      	lsls	r2, r3, #31
 800819e:	4605      	mov	r5, r0
 80081a0:	d4e0      	bmi.n	8008164 <_fflush_r+0xc>
 80081a2:	89a3      	ldrh	r3, [r4, #12]
 80081a4:	059b      	lsls	r3, r3, #22
 80081a6:	d4dd      	bmi.n	8008164 <_fflush_r+0xc>
 80081a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081aa:	f7ff fcaf 	bl	8007b0c <__retarget_lock_release_recursive>
 80081ae:	e7d9      	b.n	8008164 <_fflush_r+0xc>
 80081b0:	4b05      	ldr	r3, [pc, #20]	; (80081c8 <_fflush_r+0x70>)
 80081b2:	429c      	cmp	r4, r3
 80081b4:	d101      	bne.n	80081ba <_fflush_r+0x62>
 80081b6:	68ac      	ldr	r4, [r5, #8]
 80081b8:	e7df      	b.n	800817a <_fflush_r+0x22>
 80081ba:	4b04      	ldr	r3, [pc, #16]	; (80081cc <_fflush_r+0x74>)
 80081bc:	429c      	cmp	r4, r3
 80081be:	bf08      	it	eq
 80081c0:	68ec      	ldreq	r4, [r5, #12]
 80081c2:	e7da      	b.n	800817a <_fflush_r+0x22>
 80081c4:	08008b18 	.word	0x08008b18
 80081c8:	08008b38 	.word	0x08008b38
 80081cc:	08008af8 	.word	0x08008af8

080081d0 <_lseek_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	4d07      	ldr	r5, [pc, #28]	; (80081f0 <_lseek_r+0x20>)
 80081d4:	4604      	mov	r4, r0
 80081d6:	4608      	mov	r0, r1
 80081d8:	4611      	mov	r1, r2
 80081da:	2200      	movs	r2, #0
 80081dc:	602a      	str	r2, [r5, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	f7f9 f9c6 	bl	8001570 <_lseek>
 80081e4:	1c43      	adds	r3, r0, #1
 80081e6:	d102      	bne.n	80081ee <_lseek_r+0x1e>
 80081e8:	682b      	ldr	r3, [r5, #0]
 80081ea:	b103      	cbz	r3, 80081ee <_lseek_r+0x1e>
 80081ec:	6023      	str	r3, [r4, #0]
 80081ee:	bd38      	pop	{r3, r4, r5, pc}
 80081f0:	20004d90 	.word	0x20004d90

080081f4 <__swhatbuf_r>:
 80081f4:	b570      	push	{r4, r5, r6, lr}
 80081f6:	460e      	mov	r6, r1
 80081f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081fc:	2900      	cmp	r1, #0
 80081fe:	b096      	sub	sp, #88	; 0x58
 8008200:	4614      	mov	r4, r2
 8008202:	461d      	mov	r5, r3
 8008204:	da07      	bge.n	8008216 <__swhatbuf_r+0x22>
 8008206:	2300      	movs	r3, #0
 8008208:	602b      	str	r3, [r5, #0]
 800820a:	89b3      	ldrh	r3, [r6, #12]
 800820c:	061a      	lsls	r2, r3, #24
 800820e:	d410      	bmi.n	8008232 <__swhatbuf_r+0x3e>
 8008210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008214:	e00e      	b.n	8008234 <__swhatbuf_r+0x40>
 8008216:	466a      	mov	r2, sp
 8008218:	f000 fbac 	bl	8008974 <_fstat_r>
 800821c:	2800      	cmp	r0, #0
 800821e:	dbf2      	blt.n	8008206 <__swhatbuf_r+0x12>
 8008220:	9a01      	ldr	r2, [sp, #4]
 8008222:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008226:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800822a:	425a      	negs	r2, r3
 800822c:	415a      	adcs	r2, r3
 800822e:	602a      	str	r2, [r5, #0]
 8008230:	e7ee      	b.n	8008210 <__swhatbuf_r+0x1c>
 8008232:	2340      	movs	r3, #64	; 0x40
 8008234:	2000      	movs	r0, #0
 8008236:	6023      	str	r3, [r4, #0]
 8008238:	b016      	add	sp, #88	; 0x58
 800823a:	bd70      	pop	{r4, r5, r6, pc}

0800823c <__smakebuf_r>:
 800823c:	898b      	ldrh	r3, [r1, #12]
 800823e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008240:	079d      	lsls	r5, r3, #30
 8008242:	4606      	mov	r6, r0
 8008244:	460c      	mov	r4, r1
 8008246:	d507      	bpl.n	8008258 <__smakebuf_r+0x1c>
 8008248:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800824c:	6023      	str	r3, [r4, #0]
 800824e:	6123      	str	r3, [r4, #16]
 8008250:	2301      	movs	r3, #1
 8008252:	6163      	str	r3, [r4, #20]
 8008254:	b002      	add	sp, #8
 8008256:	bd70      	pop	{r4, r5, r6, pc}
 8008258:	ab01      	add	r3, sp, #4
 800825a:	466a      	mov	r2, sp
 800825c:	f7ff ffca 	bl	80081f4 <__swhatbuf_r>
 8008260:	9900      	ldr	r1, [sp, #0]
 8008262:	4605      	mov	r5, r0
 8008264:	4630      	mov	r0, r6
 8008266:	f7ff fc69 	bl	8007b3c <_malloc_r>
 800826a:	b948      	cbnz	r0, 8008280 <__smakebuf_r+0x44>
 800826c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008270:	059a      	lsls	r2, r3, #22
 8008272:	d4ef      	bmi.n	8008254 <__smakebuf_r+0x18>
 8008274:	f023 0303 	bic.w	r3, r3, #3
 8008278:	f043 0302 	orr.w	r3, r3, #2
 800827c:	81a3      	strh	r3, [r4, #12]
 800827e:	e7e3      	b.n	8008248 <__smakebuf_r+0xc>
 8008280:	4b0d      	ldr	r3, [pc, #52]	; (80082b8 <__smakebuf_r+0x7c>)
 8008282:	62b3      	str	r3, [r6, #40]	; 0x28
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	6020      	str	r0, [r4, #0]
 8008288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800828c:	81a3      	strh	r3, [r4, #12]
 800828e:	9b00      	ldr	r3, [sp, #0]
 8008290:	6163      	str	r3, [r4, #20]
 8008292:	9b01      	ldr	r3, [sp, #4]
 8008294:	6120      	str	r0, [r4, #16]
 8008296:	b15b      	cbz	r3, 80082b0 <__smakebuf_r+0x74>
 8008298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800829c:	4630      	mov	r0, r6
 800829e:	f000 fb7b 	bl	8008998 <_isatty_r>
 80082a2:	b128      	cbz	r0, 80082b0 <__smakebuf_r+0x74>
 80082a4:	89a3      	ldrh	r3, [r4, #12]
 80082a6:	f023 0303 	bic.w	r3, r3, #3
 80082aa:	f043 0301 	orr.w	r3, r3, #1
 80082ae:	81a3      	strh	r3, [r4, #12]
 80082b0:	89a0      	ldrh	r0, [r4, #12]
 80082b2:	4305      	orrs	r5, r0
 80082b4:	81a5      	strh	r5, [r4, #12]
 80082b6:	e7cd      	b.n	8008254 <__smakebuf_r+0x18>
 80082b8:	0800791d 	.word	0x0800791d

080082bc <__malloc_lock>:
 80082bc:	4801      	ldr	r0, [pc, #4]	; (80082c4 <__malloc_lock+0x8>)
 80082be:	f7ff bc24 	b.w	8007b0a <__retarget_lock_acquire_recursive>
 80082c2:	bf00      	nop
 80082c4:	20004d88 	.word	0x20004d88

080082c8 <__malloc_unlock>:
 80082c8:	4801      	ldr	r0, [pc, #4]	; (80082d0 <__malloc_unlock+0x8>)
 80082ca:	f7ff bc1f 	b.w	8007b0c <__retarget_lock_release_recursive>
 80082ce:	bf00      	nop
 80082d0:	20004d88 	.word	0x20004d88

080082d4 <_free_r>:
 80082d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082d6:	2900      	cmp	r1, #0
 80082d8:	d048      	beq.n	800836c <_free_r+0x98>
 80082da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082de:	9001      	str	r0, [sp, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f1a1 0404 	sub.w	r4, r1, #4
 80082e6:	bfb8      	it	lt
 80082e8:	18e4      	addlt	r4, r4, r3
 80082ea:	f7ff ffe7 	bl	80082bc <__malloc_lock>
 80082ee:	4a20      	ldr	r2, [pc, #128]	; (8008370 <_free_r+0x9c>)
 80082f0:	9801      	ldr	r0, [sp, #4]
 80082f2:	6813      	ldr	r3, [r2, #0]
 80082f4:	4615      	mov	r5, r2
 80082f6:	b933      	cbnz	r3, 8008306 <_free_r+0x32>
 80082f8:	6063      	str	r3, [r4, #4]
 80082fa:	6014      	str	r4, [r2, #0]
 80082fc:	b003      	add	sp, #12
 80082fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008302:	f7ff bfe1 	b.w	80082c8 <__malloc_unlock>
 8008306:	42a3      	cmp	r3, r4
 8008308:	d90b      	bls.n	8008322 <_free_r+0x4e>
 800830a:	6821      	ldr	r1, [r4, #0]
 800830c:	1862      	adds	r2, r4, r1
 800830e:	4293      	cmp	r3, r2
 8008310:	bf04      	itt	eq
 8008312:	681a      	ldreq	r2, [r3, #0]
 8008314:	685b      	ldreq	r3, [r3, #4]
 8008316:	6063      	str	r3, [r4, #4]
 8008318:	bf04      	itt	eq
 800831a:	1852      	addeq	r2, r2, r1
 800831c:	6022      	streq	r2, [r4, #0]
 800831e:	602c      	str	r4, [r5, #0]
 8008320:	e7ec      	b.n	80082fc <_free_r+0x28>
 8008322:	461a      	mov	r2, r3
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	b10b      	cbz	r3, 800832c <_free_r+0x58>
 8008328:	42a3      	cmp	r3, r4
 800832a:	d9fa      	bls.n	8008322 <_free_r+0x4e>
 800832c:	6811      	ldr	r1, [r2, #0]
 800832e:	1855      	adds	r5, r2, r1
 8008330:	42a5      	cmp	r5, r4
 8008332:	d10b      	bne.n	800834c <_free_r+0x78>
 8008334:	6824      	ldr	r4, [r4, #0]
 8008336:	4421      	add	r1, r4
 8008338:	1854      	adds	r4, r2, r1
 800833a:	42a3      	cmp	r3, r4
 800833c:	6011      	str	r1, [r2, #0]
 800833e:	d1dd      	bne.n	80082fc <_free_r+0x28>
 8008340:	681c      	ldr	r4, [r3, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	6053      	str	r3, [r2, #4]
 8008346:	4421      	add	r1, r4
 8008348:	6011      	str	r1, [r2, #0]
 800834a:	e7d7      	b.n	80082fc <_free_r+0x28>
 800834c:	d902      	bls.n	8008354 <_free_r+0x80>
 800834e:	230c      	movs	r3, #12
 8008350:	6003      	str	r3, [r0, #0]
 8008352:	e7d3      	b.n	80082fc <_free_r+0x28>
 8008354:	6825      	ldr	r5, [r4, #0]
 8008356:	1961      	adds	r1, r4, r5
 8008358:	428b      	cmp	r3, r1
 800835a:	bf04      	itt	eq
 800835c:	6819      	ldreq	r1, [r3, #0]
 800835e:	685b      	ldreq	r3, [r3, #4]
 8008360:	6063      	str	r3, [r4, #4]
 8008362:	bf04      	itt	eq
 8008364:	1949      	addeq	r1, r1, r5
 8008366:	6021      	streq	r1, [r4, #0]
 8008368:	6054      	str	r4, [r2, #4]
 800836a:	e7c7      	b.n	80082fc <_free_r+0x28>
 800836c:	b003      	add	sp, #12
 800836e:	bd30      	pop	{r4, r5, pc}
 8008370:	20004af8 	.word	0x20004af8

08008374 <__sfputc_r>:
 8008374:	6893      	ldr	r3, [r2, #8]
 8008376:	3b01      	subs	r3, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	b410      	push	{r4}
 800837c:	6093      	str	r3, [r2, #8]
 800837e:	da08      	bge.n	8008392 <__sfputc_r+0x1e>
 8008380:	6994      	ldr	r4, [r2, #24]
 8008382:	42a3      	cmp	r3, r4
 8008384:	db01      	blt.n	800838a <__sfputc_r+0x16>
 8008386:	290a      	cmp	r1, #10
 8008388:	d103      	bne.n	8008392 <__sfputc_r+0x1e>
 800838a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800838e:	f7ff bd7b 	b.w	8007e88 <__swbuf_r>
 8008392:	6813      	ldr	r3, [r2, #0]
 8008394:	1c58      	adds	r0, r3, #1
 8008396:	6010      	str	r0, [r2, #0]
 8008398:	7019      	strb	r1, [r3, #0]
 800839a:	4608      	mov	r0, r1
 800839c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <__sfputs_r>:
 80083a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a4:	4606      	mov	r6, r0
 80083a6:	460f      	mov	r7, r1
 80083a8:	4614      	mov	r4, r2
 80083aa:	18d5      	adds	r5, r2, r3
 80083ac:	42ac      	cmp	r4, r5
 80083ae:	d101      	bne.n	80083b4 <__sfputs_r+0x12>
 80083b0:	2000      	movs	r0, #0
 80083b2:	e007      	b.n	80083c4 <__sfputs_r+0x22>
 80083b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b8:	463a      	mov	r2, r7
 80083ba:	4630      	mov	r0, r6
 80083bc:	f7ff ffda 	bl	8008374 <__sfputc_r>
 80083c0:	1c43      	adds	r3, r0, #1
 80083c2:	d1f3      	bne.n	80083ac <__sfputs_r+0xa>
 80083c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083c8 <_vfiprintf_r>:
 80083c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083cc:	460d      	mov	r5, r1
 80083ce:	b09d      	sub	sp, #116	; 0x74
 80083d0:	4614      	mov	r4, r2
 80083d2:	4698      	mov	r8, r3
 80083d4:	4606      	mov	r6, r0
 80083d6:	b118      	cbz	r0, 80083e0 <_vfiprintf_r+0x18>
 80083d8:	6983      	ldr	r3, [r0, #24]
 80083da:	b90b      	cbnz	r3, 80083e0 <_vfiprintf_r+0x18>
 80083dc:	f7ff fad2 	bl	8007984 <__sinit>
 80083e0:	4b89      	ldr	r3, [pc, #548]	; (8008608 <_vfiprintf_r+0x240>)
 80083e2:	429d      	cmp	r5, r3
 80083e4:	d11b      	bne.n	800841e <_vfiprintf_r+0x56>
 80083e6:	6875      	ldr	r5, [r6, #4]
 80083e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083ea:	07d9      	lsls	r1, r3, #31
 80083ec:	d405      	bmi.n	80083fa <_vfiprintf_r+0x32>
 80083ee:	89ab      	ldrh	r3, [r5, #12]
 80083f0:	059a      	lsls	r2, r3, #22
 80083f2:	d402      	bmi.n	80083fa <_vfiprintf_r+0x32>
 80083f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083f6:	f7ff fb88 	bl	8007b0a <__retarget_lock_acquire_recursive>
 80083fa:	89ab      	ldrh	r3, [r5, #12]
 80083fc:	071b      	lsls	r3, r3, #28
 80083fe:	d501      	bpl.n	8008404 <_vfiprintf_r+0x3c>
 8008400:	692b      	ldr	r3, [r5, #16]
 8008402:	b9eb      	cbnz	r3, 8008440 <_vfiprintf_r+0x78>
 8008404:	4629      	mov	r1, r5
 8008406:	4630      	mov	r0, r6
 8008408:	f7ff fda2 	bl	8007f50 <__swsetup_r>
 800840c:	b1c0      	cbz	r0, 8008440 <_vfiprintf_r+0x78>
 800840e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008410:	07dc      	lsls	r4, r3, #31
 8008412:	d50e      	bpl.n	8008432 <_vfiprintf_r+0x6a>
 8008414:	f04f 30ff 	mov.w	r0, #4294967295
 8008418:	b01d      	add	sp, #116	; 0x74
 800841a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841e:	4b7b      	ldr	r3, [pc, #492]	; (800860c <_vfiprintf_r+0x244>)
 8008420:	429d      	cmp	r5, r3
 8008422:	d101      	bne.n	8008428 <_vfiprintf_r+0x60>
 8008424:	68b5      	ldr	r5, [r6, #8]
 8008426:	e7df      	b.n	80083e8 <_vfiprintf_r+0x20>
 8008428:	4b79      	ldr	r3, [pc, #484]	; (8008610 <_vfiprintf_r+0x248>)
 800842a:	429d      	cmp	r5, r3
 800842c:	bf08      	it	eq
 800842e:	68f5      	ldreq	r5, [r6, #12]
 8008430:	e7da      	b.n	80083e8 <_vfiprintf_r+0x20>
 8008432:	89ab      	ldrh	r3, [r5, #12]
 8008434:	0598      	lsls	r0, r3, #22
 8008436:	d4ed      	bmi.n	8008414 <_vfiprintf_r+0x4c>
 8008438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800843a:	f7ff fb67 	bl	8007b0c <__retarget_lock_release_recursive>
 800843e:	e7e9      	b.n	8008414 <_vfiprintf_r+0x4c>
 8008440:	2300      	movs	r3, #0
 8008442:	9309      	str	r3, [sp, #36]	; 0x24
 8008444:	2320      	movs	r3, #32
 8008446:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800844a:	f8cd 800c 	str.w	r8, [sp, #12]
 800844e:	2330      	movs	r3, #48	; 0x30
 8008450:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008614 <_vfiprintf_r+0x24c>
 8008454:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008458:	f04f 0901 	mov.w	r9, #1
 800845c:	4623      	mov	r3, r4
 800845e:	469a      	mov	sl, r3
 8008460:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008464:	b10a      	cbz	r2, 800846a <_vfiprintf_r+0xa2>
 8008466:	2a25      	cmp	r2, #37	; 0x25
 8008468:	d1f9      	bne.n	800845e <_vfiprintf_r+0x96>
 800846a:	ebba 0b04 	subs.w	fp, sl, r4
 800846e:	d00b      	beq.n	8008488 <_vfiprintf_r+0xc0>
 8008470:	465b      	mov	r3, fp
 8008472:	4622      	mov	r2, r4
 8008474:	4629      	mov	r1, r5
 8008476:	4630      	mov	r0, r6
 8008478:	f7ff ff93 	bl	80083a2 <__sfputs_r>
 800847c:	3001      	adds	r0, #1
 800847e:	f000 80aa 	beq.w	80085d6 <_vfiprintf_r+0x20e>
 8008482:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008484:	445a      	add	r2, fp
 8008486:	9209      	str	r2, [sp, #36]	; 0x24
 8008488:	f89a 3000 	ldrb.w	r3, [sl]
 800848c:	2b00      	cmp	r3, #0
 800848e:	f000 80a2 	beq.w	80085d6 <_vfiprintf_r+0x20e>
 8008492:	2300      	movs	r3, #0
 8008494:	f04f 32ff 	mov.w	r2, #4294967295
 8008498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800849c:	f10a 0a01 	add.w	sl, sl, #1
 80084a0:	9304      	str	r3, [sp, #16]
 80084a2:	9307      	str	r3, [sp, #28]
 80084a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084a8:	931a      	str	r3, [sp, #104]	; 0x68
 80084aa:	4654      	mov	r4, sl
 80084ac:	2205      	movs	r2, #5
 80084ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b2:	4858      	ldr	r0, [pc, #352]	; (8008614 <_vfiprintf_r+0x24c>)
 80084b4:	f7f7 fe9c 	bl	80001f0 <memchr>
 80084b8:	9a04      	ldr	r2, [sp, #16]
 80084ba:	b9d8      	cbnz	r0, 80084f4 <_vfiprintf_r+0x12c>
 80084bc:	06d1      	lsls	r1, r2, #27
 80084be:	bf44      	itt	mi
 80084c0:	2320      	movmi	r3, #32
 80084c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084c6:	0713      	lsls	r3, r2, #28
 80084c8:	bf44      	itt	mi
 80084ca:	232b      	movmi	r3, #43	; 0x2b
 80084cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084d0:	f89a 3000 	ldrb.w	r3, [sl]
 80084d4:	2b2a      	cmp	r3, #42	; 0x2a
 80084d6:	d015      	beq.n	8008504 <_vfiprintf_r+0x13c>
 80084d8:	9a07      	ldr	r2, [sp, #28]
 80084da:	4654      	mov	r4, sl
 80084dc:	2000      	movs	r0, #0
 80084de:	f04f 0c0a 	mov.w	ip, #10
 80084e2:	4621      	mov	r1, r4
 80084e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084e8:	3b30      	subs	r3, #48	; 0x30
 80084ea:	2b09      	cmp	r3, #9
 80084ec:	d94e      	bls.n	800858c <_vfiprintf_r+0x1c4>
 80084ee:	b1b0      	cbz	r0, 800851e <_vfiprintf_r+0x156>
 80084f0:	9207      	str	r2, [sp, #28]
 80084f2:	e014      	b.n	800851e <_vfiprintf_r+0x156>
 80084f4:	eba0 0308 	sub.w	r3, r0, r8
 80084f8:	fa09 f303 	lsl.w	r3, r9, r3
 80084fc:	4313      	orrs	r3, r2
 80084fe:	9304      	str	r3, [sp, #16]
 8008500:	46a2      	mov	sl, r4
 8008502:	e7d2      	b.n	80084aa <_vfiprintf_r+0xe2>
 8008504:	9b03      	ldr	r3, [sp, #12]
 8008506:	1d19      	adds	r1, r3, #4
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	9103      	str	r1, [sp, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	bfbb      	ittet	lt
 8008510:	425b      	neglt	r3, r3
 8008512:	f042 0202 	orrlt.w	r2, r2, #2
 8008516:	9307      	strge	r3, [sp, #28]
 8008518:	9307      	strlt	r3, [sp, #28]
 800851a:	bfb8      	it	lt
 800851c:	9204      	strlt	r2, [sp, #16]
 800851e:	7823      	ldrb	r3, [r4, #0]
 8008520:	2b2e      	cmp	r3, #46	; 0x2e
 8008522:	d10c      	bne.n	800853e <_vfiprintf_r+0x176>
 8008524:	7863      	ldrb	r3, [r4, #1]
 8008526:	2b2a      	cmp	r3, #42	; 0x2a
 8008528:	d135      	bne.n	8008596 <_vfiprintf_r+0x1ce>
 800852a:	9b03      	ldr	r3, [sp, #12]
 800852c:	1d1a      	adds	r2, r3, #4
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	9203      	str	r2, [sp, #12]
 8008532:	2b00      	cmp	r3, #0
 8008534:	bfb8      	it	lt
 8008536:	f04f 33ff 	movlt.w	r3, #4294967295
 800853a:	3402      	adds	r4, #2
 800853c:	9305      	str	r3, [sp, #20]
 800853e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008624 <_vfiprintf_r+0x25c>
 8008542:	7821      	ldrb	r1, [r4, #0]
 8008544:	2203      	movs	r2, #3
 8008546:	4650      	mov	r0, sl
 8008548:	f7f7 fe52 	bl	80001f0 <memchr>
 800854c:	b140      	cbz	r0, 8008560 <_vfiprintf_r+0x198>
 800854e:	2340      	movs	r3, #64	; 0x40
 8008550:	eba0 000a 	sub.w	r0, r0, sl
 8008554:	fa03 f000 	lsl.w	r0, r3, r0
 8008558:	9b04      	ldr	r3, [sp, #16]
 800855a:	4303      	orrs	r3, r0
 800855c:	3401      	adds	r4, #1
 800855e:	9304      	str	r3, [sp, #16]
 8008560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008564:	482c      	ldr	r0, [pc, #176]	; (8008618 <_vfiprintf_r+0x250>)
 8008566:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800856a:	2206      	movs	r2, #6
 800856c:	f7f7 fe40 	bl	80001f0 <memchr>
 8008570:	2800      	cmp	r0, #0
 8008572:	d03f      	beq.n	80085f4 <_vfiprintf_r+0x22c>
 8008574:	4b29      	ldr	r3, [pc, #164]	; (800861c <_vfiprintf_r+0x254>)
 8008576:	bb1b      	cbnz	r3, 80085c0 <_vfiprintf_r+0x1f8>
 8008578:	9b03      	ldr	r3, [sp, #12]
 800857a:	3307      	adds	r3, #7
 800857c:	f023 0307 	bic.w	r3, r3, #7
 8008580:	3308      	adds	r3, #8
 8008582:	9303      	str	r3, [sp, #12]
 8008584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008586:	443b      	add	r3, r7
 8008588:	9309      	str	r3, [sp, #36]	; 0x24
 800858a:	e767      	b.n	800845c <_vfiprintf_r+0x94>
 800858c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008590:	460c      	mov	r4, r1
 8008592:	2001      	movs	r0, #1
 8008594:	e7a5      	b.n	80084e2 <_vfiprintf_r+0x11a>
 8008596:	2300      	movs	r3, #0
 8008598:	3401      	adds	r4, #1
 800859a:	9305      	str	r3, [sp, #20]
 800859c:	4619      	mov	r1, r3
 800859e:	f04f 0c0a 	mov.w	ip, #10
 80085a2:	4620      	mov	r0, r4
 80085a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085a8:	3a30      	subs	r2, #48	; 0x30
 80085aa:	2a09      	cmp	r2, #9
 80085ac:	d903      	bls.n	80085b6 <_vfiprintf_r+0x1ee>
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d0c5      	beq.n	800853e <_vfiprintf_r+0x176>
 80085b2:	9105      	str	r1, [sp, #20]
 80085b4:	e7c3      	b.n	800853e <_vfiprintf_r+0x176>
 80085b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80085ba:	4604      	mov	r4, r0
 80085bc:	2301      	movs	r3, #1
 80085be:	e7f0      	b.n	80085a2 <_vfiprintf_r+0x1da>
 80085c0:	ab03      	add	r3, sp, #12
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	462a      	mov	r2, r5
 80085c6:	4b16      	ldr	r3, [pc, #88]	; (8008620 <_vfiprintf_r+0x258>)
 80085c8:	a904      	add	r1, sp, #16
 80085ca:	4630      	mov	r0, r6
 80085cc:	f3af 8000 	nop.w
 80085d0:	4607      	mov	r7, r0
 80085d2:	1c78      	adds	r0, r7, #1
 80085d4:	d1d6      	bne.n	8008584 <_vfiprintf_r+0x1bc>
 80085d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085d8:	07d9      	lsls	r1, r3, #31
 80085da:	d405      	bmi.n	80085e8 <_vfiprintf_r+0x220>
 80085dc:	89ab      	ldrh	r3, [r5, #12]
 80085de:	059a      	lsls	r2, r3, #22
 80085e0:	d402      	bmi.n	80085e8 <_vfiprintf_r+0x220>
 80085e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085e4:	f7ff fa92 	bl	8007b0c <__retarget_lock_release_recursive>
 80085e8:	89ab      	ldrh	r3, [r5, #12]
 80085ea:	065b      	lsls	r3, r3, #25
 80085ec:	f53f af12 	bmi.w	8008414 <_vfiprintf_r+0x4c>
 80085f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085f2:	e711      	b.n	8008418 <_vfiprintf_r+0x50>
 80085f4:	ab03      	add	r3, sp, #12
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	462a      	mov	r2, r5
 80085fa:	4b09      	ldr	r3, [pc, #36]	; (8008620 <_vfiprintf_r+0x258>)
 80085fc:	a904      	add	r1, sp, #16
 80085fe:	4630      	mov	r0, r6
 8008600:	f000 f880 	bl	8008704 <_printf_i>
 8008604:	e7e4      	b.n	80085d0 <_vfiprintf_r+0x208>
 8008606:	bf00      	nop
 8008608:	08008b18 	.word	0x08008b18
 800860c:	08008b38 	.word	0x08008b38
 8008610:	08008af8 	.word	0x08008af8
 8008614:	08008b5c 	.word	0x08008b5c
 8008618:	08008b66 	.word	0x08008b66
 800861c:	00000000 	.word	0x00000000
 8008620:	080083a3 	.word	0x080083a3
 8008624:	08008b62 	.word	0x08008b62

08008628 <_printf_common>:
 8008628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800862c:	4616      	mov	r6, r2
 800862e:	4699      	mov	r9, r3
 8008630:	688a      	ldr	r2, [r1, #8]
 8008632:	690b      	ldr	r3, [r1, #16]
 8008634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008638:	4293      	cmp	r3, r2
 800863a:	bfb8      	it	lt
 800863c:	4613      	movlt	r3, r2
 800863e:	6033      	str	r3, [r6, #0]
 8008640:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008644:	4607      	mov	r7, r0
 8008646:	460c      	mov	r4, r1
 8008648:	b10a      	cbz	r2, 800864e <_printf_common+0x26>
 800864a:	3301      	adds	r3, #1
 800864c:	6033      	str	r3, [r6, #0]
 800864e:	6823      	ldr	r3, [r4, #0]
 8008650:	0699      	lsls	r1, r3, #26
 8008652:	bf42      	ittt	mi
 8008654:	6833      	ldrmi	r3, [r6, #0]
 8008656:	3302      	addmi	r3, #2
 8008658:	6033      	strmi	r3, [r6, #0]
 800865a:	6825      	ldr	r5, [r4, #0]
 800865c:	f015 0506 	ands.w	r5, r5, #6
 8008660:	d106      	bne.n	8008670 <_printf_common+0x48>
 8008662:	f104 0a19 	add.w	sl, r4, #25
 8008666:	68e3      	ldr	r3, [r4, #12]
 8008668:	6832      	ldr	r2, [r6, #0]
 800866a:	1a9b      	subs	r3, r3, r2
 800866c:	42ab      	cmp	r3, r5
 800866e:	dc26      	bgt.n	80086be <_printf_common+0x96>
 8008670:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008674:	1e13      	subs	r3, r2, #0
 8008676:	6822      	ldr	r2, [r4, #0]
 8008678:	bf18      	it	ne
 800867a:	2301      	movne	r3, #1
 800867c:	0692      	lsls	r2, r2, #26
 800867e:	d42b      	bmi.n	80086d8 <_printf_common+0xb0>
 8008680:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008684:	4649      	mov	r1, r9
 8008686:	4638      	mov	r0, r7
 8008688:	47c0      	blx	r8
 800868a:	3001      	adds	r0, #1
 800868c:	d01e      	beq.n	80086cc <_printf_common+0xa4>
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	68e5      	ldr	r5, [r4, #12]
 8008692:	6832      	ldr	r2, [r6, #0]
 8008694:	f003 0306 	and.w	r3, r3, #6
 8008698:	2b04      	cmp	r3, #4
 800869a:	bf08      	it	eq
 800869c:	1aad      	subeq	r5, r5, r2
 800869e:	68a3      	ldr	r3, [r4, #8]
 80086a0:	6922      	ldr	r2, [r4, #16]
 80086a2:	bf0c      	ite	eq
 80086a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086a8:	2500      	movne	r5, #0
 80086aa:	4293      	cmp	r3, r2
 80086ac:	bfc4      	itt	gt
 80086ae:	1a9b      	subgt	r3, r3, r2
 80086b0:	18ed      	addgt	r5, r5, r3
 80086b2:	2600      	movs	r6, #0
 80086b4:	341a      	adds	r4, #26
 80086b6:	42b5      	cmp	r5, r6
 80086b8:	d11a      	bne.n	80086f0 <_printf_common+0xc8>
 80086ba:	2000      	movs	r0, #0
 80086bc:	e008      	b.n	80086d0 <_printf_common+0xa8>
 80086be:	2301      	movs	r3, #1
 80086c0:	4652      	mov	r2, sl
 80086c2:	4649      	mov	r1, r9
 80086c4:	4638      	mov	r0, r7
 80086c6:	47c0      	blx	r8
 80086c8:	3001      	adds	r0, #1
 80086ca:	d103      	bne.n	80086d4 <_printf_common+0xac>
 80086cc:	f04f 30ff 	mov.w	r0, #4294967295
 80086d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d4:	3501      	adds	r5, #1
 80086d6:	e7c6      	b.n	8008666 <_printf_common+0x3e>
 80086d8:	18e1      	adds	r1, r4, r3
 80086da:	1c5a      	adds	r2, r3, #1
 80086dc:	2030      	movs	r0, #48	; 0x30
 80086de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086e2:	4422      	add	r2, r4
 80086e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086ec:	3302      	adds	r3, #2
 80086ee:	e7c7      	b.n	8008680 <_printf_common+0x58>
 80086f0:	2301      	movs	r3, #1
 80086f2:	4622      	mov	r2, r4
 80086f4:	4649      	mov	r1, r9
 80086f6:	4638      	mov	r0, r7
 80086f8:	47c0      	blx	r8
 80086fa:	3001      	adds	r0, #1
 80086fc:	d0e6      	beq.n	80086cc <_printf_common+0xa4>
 80086fe:	3601      	adds	r6, #1
 8008700:	e7d9      	b.n	80086b6 <_printf_common+0x8e>
	...

08008704 <_printf_i>:
 8008704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008708:	460c      	mov	r4, r1
 800870a:	4691      	mov	r9, r2
 800870c:	7e27      	ldrb	r7, [r4, #24]
 800870e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008710:	2f78      	cmp	r7, #120	; 0x78
 8008712:	4680      	mov	r8, r0
 8008714:	469a      	mov	sl, r3
 8008716:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800871a:	d807      	bhi.n	800872c <_printf_i+0x28>
 800871c:	2f62      	cmp	r7, #98	; 0x62
 800871e:	d80a      	bhi.n	8008736 <_printf_i+0x32>
 8008720:	2f00      	cmp	r7, #0
 8008722:	f000 80d8 	beq.w	80088d6 <_printf_i+0x1d2>
 8008726:	2f58      	cmp	r7, #88	; 0x58
 8008728:	f000 80a3 	beq.w	8008872 <_printf_i+0x16e>
 800872c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008730:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008734:	e03a      	b.n	80087ac <_printf_i+0xa8>
 8008736:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800873a:	2b15      	cmp	r3, #21
 800873c:	d8f6      	bhi.n	800872c <_printf_i+0x28>
 800873e:	a001      	add	r0, pc, #4	; (adr r0, 8008744 <_printf_i+0x40>)
 8008740:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008744:	0800879d 	.word	0x0800879d
 8008748:	080087b1 	.word	0x080087b1
 800874c:	0800872d 	.word	0x0800872d
 8008750:	0800872d 	.word	0x0800872d
 8008754:	0800872d 	.word	0x0800872d
 8008758:	0800872d 	.word	0x0800872d
 800875c:	080087b1 	.word	0x080087b1
 8008760:	0800872d 	.word	0x0800872d
 8008764:	0800872d 	.word	0x0800872d
 8008768:	0800872d 	.word	0x0800872d
 800876c:	0800872d 	.word	0x0800872d
 8008770:	080088bd 	.word	0x080088bd
 8008774:	080087e1 	.word	0x080087e1
 8008778:	0800889f 	.word	0x0800889f
 800877c:	0800872d 	.word	0x0800872d
 8008780:	0800872d 	.word	0x0800872d
 8008784:	080088df 	.word	0x080088df
 8008788:	0800872d 	.word	0x0800872d
 800878c:	080087e1 	.word	0x080087e1
 8008790:	0800872d 	.word	0x0800872d
 8008794:	0800872d 	.word	0x0800872d
 8008798:	080088a7 	.word	0x080088a7
 800879c:	680b      	ldr	r3, [r1, #0]
 800879e:	1d1a      	adds	r2, r3, #4
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	600a      	str	r2, [r1, #0]
 80087a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087ac:	2301      	movs	r3, #1
 80087ae:	e0a3      	b.n	80088f8 <_printf_i+0x1f4>
 80087b0:	6825      	ldr	r5, [r4, #0]
 80087b2:	6808      	ldr	r0, [r1, #0]
 80087b4:	062e      	lsls	r6, r5, #24
 80087b6:	f100 0304 	add.w	r3, r0, #4
 80087ba:	d50a      	bpl.n	80087d2 <_printf_i+0xce>
 80087bc:	6805      	ldr	r5, [r0, #0]
 80087be:	600b      	str	r3, [r1, #0]
 80087c0:	2d00      	cmp	r5, #0
 80087c2:	da03      	bge.n	80087cc <_printf_i+0xc8>
 80087c4:	232d      	movs	r3, #45	; 0x2d
 80087c6:	426d      	negs	r5, r5
 80087c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087cc:	485e      	ldr	r0, [pc, #376]	; (8008948 <_printf_i+0x244>)
 80087ce:	230a      	movs	r3, #10
 80087d0:	e019      	b.n	8008806 <_printf_i+0x102>
 80087d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80087d6:	6805      	ldr	r5, [r0, #0]
 80087d8:	600b      	str	r3, [r1, #0]
 80087da:	bf18      	it	ne
 80087dc:	b22d      	sxthne	r5, r5
 80087de:	e7ef      	b.n	80087c0 <_printf_i+0xbc>
 80087e0:	680b      	ldr	r3, [r1, #0]
 80087e2:	6825      	ldr	r5, [r4, #0]
 80087e4:	1d18      	adds	r0, r3, #4
 80087e6:	6008      	str	r0, [r1, #0]
 80087e8:	0628      	lsls	r0, r5, #24
 80087ea:	d501      	bpl.n	80087f0 <_printf_i+0xec>
 80087ec:	681d      	ldr	r5, [r3, #0]
 80087ee:	e002      	b.n	80087f6 <_printf_i+0xf2>
 80087f0:	0669      	lsls	r1, r5, #25
 80087f2:	d5fb      	bpl.n	80087ec <_printf_i+0xe8>
 80087f4:	881d      	ldrh	r5, [r3, #0]
 80087f6:	4854      	ldr	r0, [pc, #336]	; (8008948 <_printf_i+0x244>)
 80087f8:	2f6f      	cmp	r7, #111	; 0x6f
 80087fa:	bf0c      	ite	eq
 80087fc:	2308      	moveq	r3, #8
 80087fe:	230a      	movne	r3, #10
 8008800:	2100      	movs	r1, #0
 8008802:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008806:	6866      	ldr	r6, [r4, #4]
 8008808:	60a6      	str	r6, [r4, #8]
 800880a:	2e00      	cmp	r6, #0
 800880c:	bfa2      	ittt	ge
 800880e:	6821      	ldrge	r1, [r4, #0]
 8008810:	f021 0104 	bicge.w	r1, r1, #4
 8008814:	6021      	strge	r1, [r4, #0]
 8008816:	b90d      	cbnz	r5, 800881c <_printf_i+0x118>
 8008818:	2e00      	cmp	r6, #0
 800881a:	d04d      	beq.n	80088b8 <_printf_i+0x1b4>
 800881c:	4616      	mov	r6, r2
 800881e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008822:	fb03 5711 	mls	r7, r3, r1, r5
 8008826:	5dc7      	ldrb	r7, [r0, r7]
 8008828:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800882c:	462f      	mov	r7, r5
 800882e:	42bb      	cmp	r3, r7
 8008830:	460d      	mov	r5, r1
 8008832:	d9f4      	bls.n	800881e <_printf_i+0x11a>
 8008834:	2b08      	cmp	r3, #8
 8008836:	d10b      	bne.n	8008850 <_printf_i+0x14c>
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	07df      	lsls	r7, r3, #31
 800883c:	d508      	bpl.n	8008850 <_printf_i+0x14c>
 800883e:	6923      	ldr	r3, [r4, #16]
 8008840:	6861      	ldr	r1, [r4, #4]
 8008842:	4299      	cmp	r1, r3
 8008844:	bfde      	ittt	le
 8008846:	2330      	movle	r3, #48	; 0x30
 8008848:	f806 3c01 	strble.w	r3, [r6, #-1]
 800884c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008850:	1b92      	subs	r2, r2, r6
 8008852:	6122      	str	r2, [r4, #16]
 8008854:	f8cd a000 	str.w	sl, [sp]
 8008858:	464b      	mov	r3, r9
 800885a:	aa03      	add	r2, sp, #12
 800885c:	4621      	mov	r1, r4
 800885e:	4640      	mov	r0, r8
 8008860:	f7ff fee2 	bl	8008628 <_printf_common>
 8008864:	3001      	adds	r0, #1
 8008866:	d14c      	bne.n	8008902 <_printf_i+0x1fe>
 8008868:	f04f 30ff 	mov.w	r0, #4294967295
 800886c:	b004      	add	sp, #16
 800886e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008872:	4835      	ldr	r0, [pc, #212]	; (8008948 <_printf_i+0x244>)
 8008874:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008878:	6823      	ldr	r3, [r4, #0]
 800887a:	680e      	ldr	r6, [r1, #0]
 800887c:	061f      	lsls	r7, r3, #24
 800887e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008882:	600e      	str	r6, [r1, #0]
 8008884:	d514      	bpl.n	80088b0 <_printf_i+0x1ac>
 8008886:	07d9      	lsls	r1, r3, #31
 8008888:	bf44      	itt	mi
 800888a:	f043 0320 	orrmi.w	r3, r3, #32
 800888e:	6023      	strmi	r3, [r4, #0]
 8008890:	b91d      	cbnz	r5, 800889a <_printf_i+0x196>
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	f023 0320 	bic.w	r3, r3, #32
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	2310      	movs	r3, #16
 800889c:	e7b0      	b.n	8008800 <_printf_i+0xfc>
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	f043 0320 	orr.w	r3, r3, #32
 80088a4:	6023      	str	r3, [r4, #0]
 80088a6:	2378      	movs	r3, #120	; 0x78
 80088a8:	4828      	ldr	r0, [pc, #160]	; (800894c <_printf_i+0x248>)
 80088aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088ae:	e7e3      	b.n	8008878 <_printf_i+0x174>
 80088b0:	065e      	lsls	r6, r3, #25
 80088b2:	bf48      	it	mi
 80088b4:	b2ad      	uxthmi	r5, r5
 80088b6:	e7e6      	b.n	8008886 <_printf_i+0x182>
 80088b8:	4616      	mov	r6, r2
 80088ba:	e7bb      	b.n	8008834 <_printf_i+0x130>
 80088bc:	680b      	ldr	r3, [r1, #0]
 80088be:	6826      	ldr	r6, [r4, #0]
 80088c0:	6960      	ldr	r0, [r4, #20]
 80088c2:	1d1d      	adds	r5, r3, #4
 80088c4:	600d      	str	r5, [r1, #0]
 80088c6:	0635      	lsls	r5, r6, #24
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	d501      	bpl.n	80088d0 <_printf_i+0x1cc>
 80088cc:	6018      	str	r0, [r3, #0]
 80088ce:	e002      	b.n	80088d6 <_printf_i+0x1d2>
 80088d0:	0671      	lsls	r1, r6, #25
 80088d2:	d5fb      	bpl.n	80088cc <_printf_i+0x1c8>
 80088d4:	8018      	strh	r0, [r3, #0]
 80088d6:	2300      	movs	r3, #0
 80088d8:	6123      	str	r3, [r4, #16]
 80088da:	4616      	mov	r6, r2
 80088dc:	e7ba      	b.n	8008854 <_printf_i+0x150>
 80088de:	680b      	ldr	r3, [r1, #0]
 80088e0:	1d1a      	adds	r2, r3, #4
 80088e2:	600a      	str	r2, [r1, #0]
 80088e4:	681e      	ldr	r6, [r3, #0]
 80088e6:	6862      	ldr	r2, [r4, #4]
 80088e8:	2100      	movs	r1, #0
 80088ea:	4630      	mov	r0, r6
 80088ec:	f7f7 fc80 	bl	80001f0 <memchr>
 80088f0:	b108      	cbz	r0, 80088f6 <_printf_i+0x1f2>
 80088f2:	1b80      	subs	r0, r0, r6
 80088f4:	6060      	str	r0, [r4, #4]
 80088f6:	6863      	ldr	r3, [r4, #4]
 80088f8:	6123      	str	r3, [r4, #16]
 80088fa:	2300      	movs	r3, #0
 80088fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008900:	e7a8      	b.n	8008854 <_printf_i+0x150>
 8008902:	6923      	ldr	r3, [r4, #16]
 8008904:	4632      	mov	r2, r6
 8008906:	4649      	mov	r1, r9
 8008908:	4640      	mov	r0, r8
 800890a:	47d0      	blx	sl
 800890c:	3001      	adds	r0, #1
 800890e:	d0ab      	beq.n	8008868 <_printf_i+0x164>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	079b      	lsls	r3, r3, #30
 8008914:	d413      	bmi.n	800893e <_printf_i+0x23a>
 8008916:	68e0      	ldr	r0, [r4, #12]
 8008918:	9b03      	ldr	r3, [sp, #12]
 800891a:	4298      	cmp	r0, r3
 800891c:	bfb8      	it	lt
 800891e:	4618      	movlt	r0, r3
 8008920:	e7a4      	b.n	800886c <_printf_i+0x168>
 8008922:	2301      	movs	r3, #1
 8008924:	4632      	mov	r2, r6
 8008926:	4649      	mov	r1, r9
 8008928:	4640      	mov	r0, r8
 800892a:	47d0      	blx	sl
 800892c:	3001      	adds	r0, #1
 800892e:	d09b      	beq.n	8008868 <_printf_i+0x164>
 8008930:	3501      	adds	r5, #1
 8008932:	68e3      	ldr	r3, [r4, #12]
 8008934:	9903      	ldr	r1, [sp, #12]
 8008936:	1a5b      	subs	r3, r3, r1
 8008938:	42ab      	cmp	r3, r5
 800893a:	dcf2      	bgt.n	8008922 <_printf_i+0x21e>
 800893c:	e7eb      	b.n	8008916 <_printf_i+0x212>
 800893e:	2500      	movs	r5, #0
 8008940:	f104 0619 	add.w	r6, r4, #25
 8008944:	e7f5      	b.n	8008932 <_printf_i+0x22e>
 8008946:	bf00      	nop
 8008948:	08008b6d 	.word	0x08008b6d
 800894c:	08008b7e 	.word	0x08008b7e

08008950 <_read_r>:
 8008950:	b538      	push	{r3, r4, r5, lr}
 8008952:	4d07      	ldr	r5, [pc, #28]	; (8008970 <_read_r+0x20>)
 8008954:	4604      	mov	r4, r0
 8008956:	4608      	mov	r0, r1
 8008958:	4611      	mov	r1, r2
 800895a:	2200      	movs	r2, #0
 800895c:	602a      	str	r2, [r5, #0]
 800895e:	461a      	mov	r2, r3
 8008960:	f7f8 fdc2 	bl	80014e8 <_read>
 8008964:	1c43      	adds	r3, r0, #1
 8008966:	d102      	bne.n	800896e <_read_r+0x1e>
 8008968:	682b      	ldr	r3, [r5, #0]
 800896a:	b103      	cbz	r3, 800896e <_read_r+0x1e>
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	bd38      	pop	{r3, r4, r5, pc}
 8008970:	20004d90 	.word	0x20004d90

08008974 <_fstat_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4d07      	ldr	r5, [pc, #28]	; (8008994 <_fstat_r+0x20>)
 8008978:	2300      	movs	r3, #0
 800897a:	4604      	mov	r4, r0
 800897c:	4608      	mov	r0, r1
 800897e:	4611      	mov	r1, r2
 8008980:	602b      	str	r3, [r5, #0]
 8008982:	f7f8 fdda 	bl	800153a <_fstat>
 8008986:	1c43      	adds	r3, r0, #1
 8008988:	d102      	bne.n	8008990 <_fstat_r+0x1c>
 800898a:	682b      	ldr	r3, [r5, #0]
 800898c:	b103      	cbz	r3, 8008990 <_fstat_r+0x1c>
 800898e:	6023      	str	r3, [r4, #0]
 8008990:	bd38      	pop	{r3, r4, r5, pc}
 8008992:	bf00      	nop
 8008994:	20004d90 	.word	0x20004d90

08008998 <_isatty_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4d06      	ldr	r5, [pc, #24]	; (80089b4 <_isatty_r+0x1c>)
 800899c:	2300      	movs	r3, #0
 800899e:	4604      	mov	r4, r0
 80089a0:	4608      	mov	r0, r1
 80089a2:	602b      	str	r3, [r5, #0]
 80089a4:	f7f8 fdd9 	bl	800155a <_isatty>
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	d102      	bne.n	80089b2 <_isatty_r+0x1a>
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	b103      	cbz	r3, 80089b2 <_isatty_r+0x1a>
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
 80089b4:	20004d90 	.word	0x20004d90

080089b8 <_init>:
 80089b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ba:	bf00      	nop
 80089bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089be:	bc08      	pop	{r3}
 80089c0:	469e      	mov	lr, r3
 80089c2:	4770      	bx	lr

080089c4 <_fini>:
 80089c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c6:	bf00      	nop
 80089c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ca:	bc08      	pop	{r3}
 80089cc:	469e      	mov	lr, r3
 80089ce:	4770      	bx	lr
