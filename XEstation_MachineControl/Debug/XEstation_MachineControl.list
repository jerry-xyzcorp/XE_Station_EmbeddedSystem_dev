
XEstation_MachineControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082c8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08008478  08008478  00018478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008638  08008638  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008638  08008638  00018638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008640  08008640  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008640  08008640  00018640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008644  08008644  00018644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004cb0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004d24  20004d24  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f697  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cd5  00000000  00000000  0003f73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001628  00000000  00000000  00043410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014d0  00000000  00000000  00044a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004f0f  00000000  00000000  00045f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018668  00000000  00000000  0004ae17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e72b0  00000000  00000000  0006347f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014a72f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000649c  00000000  00000000  0014a784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008460 	.word	0x08008460

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08008460 	.word	0x08008460

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);

int _write(int file, char *ptr, int len)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 10) == HAL_OK)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	b29a      	uxth	r2, r3
 8000598:	230a      	movs	r3, #10
 800059a:	68b9      	ldr	r1, [r7, #8]
 800059c:	4806      	ldr	r0, [pc, #24]	; (80005b8 <_write+0x30>)
 800059e:	f003 f93c 	bl	800381a <HAL_UART_Transmit>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d101      	bne.n	80005ac <_write+0x24>
		return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	e001      	b.n	80005b0 <_write+0x28>
	return -1;
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20004adc 	.word	0x20004adc

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f001 f852 	bl	8001668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f848 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 fb10 	bl	8000bec <MX_GPIO_Init>
  MX_TIM1_Init();
 80005cc:	f000 f8b4 	bl	8000738 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005d0:	f000 f904 	bl	80007dc <MX_TIM2_Init>
  MX_TIM3_Init();
 80005d4:	f000 f984 	bl	80008e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005d8:	f000 fa06 	bl	80009e8 <MX_TIM4_Init>
  MX_UART5_Init();
 80005dc:	f000 fa88 	bl	8000af0 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80005e0:	f000 fab0 	bl	8000b44 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80005e4:	f000 fad8 	bl	8000b98 <MX_USART6_UART_Init>

//  MalchaTest((int)(16.25*1000)); //unit : mg<hot_water_amout>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e8:	f004 f8d6 	bl	8004798 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ec:	4a10      	ldr	r2, [pc, #64]	; (8000630 <main+0x74>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4810      	ldr	r0, [pc, #64]	; (8000634 <main+0x78>)
 80005f2:	f004 f91b 	bl	800482c <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <main+0x7c>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80005fc:	4a0f      	ldr	r2, [pc, #60]	; (800063c <main+0x80>)
 80005fe:	2100      	movs	r1, #0
 8000600:	480f      	ldr	r0, [pc, #60]	; (8000640 <main+0x84>)
 8000602:	f004 f913 	bl	800482c <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <main+0x88>)
 800060a:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 800060c:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <main+0x8c>)
 800060e:	2100      	movs	r1, #0
 8000610:	480e      	ldr	r0, [pc, #56]	; (800064c <main+0x90>)
 8000612:	f004 f90b 	bl	800482c <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <main+0x94>)
 800061a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800061c:	f004 f8e0 	bl	80047e0 <osKernelStart>

    /* USER CODE BEGIN 3 */
//	  SteppingMotorTest();
//	  L298Ntest();
//	  heaterTest();
	  printf("test ..\n\n");
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <main+0x98>)
 8000622:	f007 f8bf 	bl	80077a4 <puts>

	HAL_Delay(500);
 8000626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800062a:	f001 f85f 	bl	80016ec <HAL_Delay>
	  printf("test ..\n\n");
 800062e:	e7f7      	b.n	8000620 <main+0x64>
 8000630:	0800851c 	.word	0x0800851c
 8000634:	08000e99 	.word	0x08000e99
 8000638:	20004a90 	.word	0x20004a90
 800063c:	08008540 	.word	0x08008540
 8000640:	08000ebd 	.word	0x08000ebd
 8000644:	20004bac 	.word	0x20004bac
 8000648:	08008564 	.word	0x08008564
 800064c:	08000ee1 	.word	0x08000ee1
 8000650:	20004bf8 	.word	0x20004bf8
 8000654:	0800849c 	.word	0x0800849c

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f006 ffb3 	bl	80075d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <SystemClock_Config+0xd8>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <SystemClock_Config+0xd8>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b28      	ldr	r3, [pc, #160]	; (8000730 <SystemClock_Config+0xd8>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <SystemClock_Config+0xdc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a24      	ldr	r2, [pc, #144]	; (8000734 <SystemClock_Config+0xdc>)
 80006a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <SystemClock_Config+0xdc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c8:	2308      	movs	r3, #8
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006cc:	23b4      	movs	r3, #180	; 0xb4
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fbb3 	bl	8001e48 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e8:	f000 fc1e 	bl	8000f28 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006ec:	f001 fb5c 	bl	8001da8 <HAL_PWREx_EnableOverDrive>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006f6:	f000 fc17 	bl	8000f28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000706:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000710:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2105      	movs	r1, #5
 8000718:	4618      	mov	r0, r3
 800071a:	f001 fe0d 	bl	8002338 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000724:	f000 fc00 	bl	8000f28 <Error_Handler>
  }
}
 8000728:	bf00      	nop
 800072a:	3750      	adds	r7, #80	; 0x50
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074c:	463b      	mov	r3, r7
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_TIM1_Init+0x9c>)
 8000756:	4a20      	ldr	r2, [pc, #128]	; (80007d8 <MX_TIM1_Init+0xa0>)
 8000758:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1800-1;
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <MX_TIM1_Init+0x9c>)
 800075c:	f240 7207 	movw	r2, #1799	; 0x707
 8000760:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_TIM1_Init+0x9c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_TIM1_Init+0x9c>)
 800076a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800076e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_TIM1_Init+0x9c>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_TIM1_Init+0x9c>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_TIM1_Init+0x9c>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000782:	4814      	ldr	r0, [pc, #80]	; (80007d4 <MX_TIM1_Init+0x9c>)
 8000784:	f001 ffda 	bl	800273c <HAL_TIM_Base_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800078e:	f000 fbcb 	bl	8000f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000796:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	4619      	mov	r1, r3
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_TIM1_Init+0x9c>)
 80007a0:	f002 fab0 	bl	8002d04 <HAL_TIM_ConfigClockSource>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80007aa:	f000 fbbd 	bl	8000f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <MX_TIM1_Init+0x9c>)
 80007bc:	f002 ff50 	bl	8003660 <HAL_TIMEx_MasterConfigSynchronization>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80007c6:	f000 fbaf 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20004bb0 	.word	0x20004bb0
 80007d8:	40010000 	.word	0x40010000

080007dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	; 0x38
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
 800080a:	615a      	str	r2, [r3, #20]
 800080c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800080e:	4b33      	ldr	r3, [pc, #204]	; (80008dc <MX_TIM2_Init+0x100>)
 8000810:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000814:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000816:	4b31      	ldr	r3, [pc, #196]	; (80008dc <MX_TIM2_Init+0x100>)
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081c:	4b2f      	ldr	r3, [pc, #188]	; (80008dc <MX_TIM2_Init+0x100>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000822:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <MX_TIM2_Init+0x100>)
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082a:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <MX_TIM2_Init+0x100>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000830:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <MX_TIM2_Init+0x100>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000836:	4829      	ldr	r0, [pc, #164]	; (80008dc <MX_TIM2_Init+0x100>)
 8000838:	f001 ff80 	bl	800273c <HAL_TIM_Base_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000842:	f000 fb71 	bl	8000f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000846:	4825      	ldr	r0, [pc, #148]	; (80008dc <MX_TIM2_Init+0x100>)
 8000848:	f002 f838 	bl	80028bc <HAL_TIM_PWM_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000852:	f000 fb69 	bl	8000f28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	481d      	ldr	r0, [pc, #116]	; (80008dc <MX_TIM2_Init+0x100>)
 8000866:	f002 fb14 	bl	8002e92 <HAL_TIM_SlaveConfigSynchro>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000870:	f000 fb5a 	bl	8000f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4816      	ldr	r0, [pc, #88]	; (80008dc <MX_TIM2_Init+0x100>)
 8000884:	f002 feec 	bl	8003660 <HAL_TIMEx_MasterConfigSynchronization>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800088e:	f000 fb4b 	bl	8000f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000892:	2360      	movs	r3, #96	; 0x60
 8000894:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a2:	463b      	mov	r3, r7
 80008a4:	2200      	movs	r2, #0
 80008a6:	4619      	mov	r1, r3
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <MX_TIM2_Init+0x100>)
 80008aa:	f002 f969 	bl	8002b80 <HAL_TIM_PWM_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80008b4:	f000 fb38 	bl	8000f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008b8:	463b      	mov	r3, r7
 80008ba:	2204      	movs	r2, #4
 80008bc:	4619      	mov	r1, r3
 80008be:	4807      	ldr	r0, [pc, #28]	; (80008dc <MX_TIM2_Init+0x100>)
 80008c0:	f002 f95e 	bl	8002b80 <HAL_TIM_PWM_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80008ca:	f000 fb2d 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008ce:	4803      	ldr	r0, [pc, #12]	; (80008dc <MX_TIM2_Init+0x100>)
 80008d0:	f000 fbc4 	bl	800105c <HAL_TIM_MspPostInit>

}
 80008d4:	bf00      	nop
 80008d6:	3738      	adds	r7, #56	; 0x38
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20004c40 	.word	0x20004c40

080008e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08e      	sub	sp, #56	; 0x38
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000900:	463b      	mov	r3, r7
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]
 800090e:	615a      	str	r2, [r3, #20]
 8000910:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000912:	4b33      	ldr	r3, [pc, #204]	; (80009e0 <MX_TIM3_Init+0x100>)
 8000914:	4a33      	ldr	r2, [pc, #204]	; (80009e4 <MX_TIM3_Init+0x104>)
 8000916:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000918:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <MX_TIM3_Init+0x100>)
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <MX_TIM3_Init+0x100>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <MX_TIM3_Init+0x100>)
 8000926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800092a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092c:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <MX_TIM3_Init+0x100>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000932:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <MX_TIM3_Init+0x100>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000938:	4829      	ldr	r0, [pc, #164]	; (80009e0 <MX_TIM3_Init+0x100>)
 800093a:	f001 feff 	bl	800273c <HAL_TIM_Base_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000944:	f000 faf0 	bl	8000f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000948:	4825      	ldr	r0, [pc, #148]	; (80009e0 <MX_TIM3_Init+0x100>)
 800094a:	f001 ffb7 	bl	80028bc <HAL_TIM_PWM_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000954:	f000 fae8 	bl	8000f28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000964:	4619      	mov	r1, r3
 8000966:	481e      	ldr	r0, [pc, #120]	; (80009e0 <MX_TIM3_Init+0x100>)
 8000968:	f002 fa93 	bl	8002e92 <HAL_TIM_SlaveConfigSynchro>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000972:	f000 fad9 	bl	8000f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4816      	ldr	r0, [pc, #88]	; (80009e0 <MX_TIM3_Init+0x100>)
 8000986:	f002 fe6b 	bl	8003660 <HAL_TIMEx_MasterConfigSynchronization>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000990:	f000 faca 	bl	8000f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000994:	2360      	movs	r3, #96	; 0x60
 8000996:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a4:	463b      	mov	r3, r7
 80009a6:	2200      	movs	r2, #0
 80009a8:	4619      	mov	r1, r3
 80009aa:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_TIM3_Init+0x100>)
 80009ac:	f002 f8e8 	bl	8002b80 <HAL_TIM_PWM_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80009b6:	f000 fab7 	bl	8000f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ba:	463b      	mov	r3, r7
 80009bc:	2204      	movs	r2, #4
 80009be:	4619      	mov	r1, r3
 80009c0:	4807      	ldr	r0, [pc, #28]	; (80009e0 <MX_TIM3_Init+0x100>)
 80009c2:	f002 f8dd 	bl	8002b80 <HAL_TIM_PWM_ConfigChannel>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80009cc:	f000 faac 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009d0:	4803      	ldr	r0, [pc, #12]	; (80009e0 <MX_TIM3_Init+0x100>)
 80009d2:	f000 fb43 	bl	800105c <HAL_TIM_MspPostInit>

}
 80009d6:	bf00      	nop
 80009d8:	3738      	adds	r7, #56	; 0x38
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20004b20 	.word	0x20004b20
 80009e4:	40000400 	.word	0x40000400

080009e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08e      	sub	sp, #56	; 0x38
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a08:	463b      	mov	r3, r7
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
 8000a16:	615a      	str	r2, [r3, #20]
 8000a18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a1a:	4b33      	ldr	r3, [pc, #204]	; (8000ae8 <MX_TIM4_Init+0x100>)
 8000a1c:	4a33      	ldr	r2, [pc, #204]	; (8000aec <MX_TIM4_Init+0x104>)
 8000a1e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a20:	4b31      	ldr	r3, [pc, #196]	; (8000ae8 <MX_TIM4_Init+0x100>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a26:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <MX_TIM4_Init+0x100>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <MX_TIM4_Init+0x100>)
 8000a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a32:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a34:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <MX_TIM4_Init+0x100>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ae8 <MX_TIM4_Init+0x100>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a40:	4829      	ldr	r0, [pc, #164]	; (8000ae8 <MX_TIM4_Init+0x100>)
 8000a42:	f001 fe7b 	bl	800273c <HAL_TIM_Base_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000a4c:	f000 fa6c 	bl	8000f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a50:	4825      	ldr	r0, [pc, #148]	; (8000ae8 <MX_TIM4_Init+0x100>)
 8000a52:	f001 ff33 	bl	80028bc <HAL_TIM_PWM_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000a5c:	f000 fa64 	bl	8000f28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	481e      	ldr	r0, [pc, #120]	; (8000ae8 <MX_TIM4_Init+0x100>)
 8000a70:	f002 fa0f 	bl	8002e92 <HAL_TIM_SlaveConfigSynchro>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000a7a:	f000 fa55 	bl	8000f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4816      	ldr	r0, [pc, #88]	; (8000ae8 <MX_TIM4_Init+0x100>)
 8000a8e:	f002 fde7 	bl	8003660 <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000a98:	f000 fa46 	bl	8000f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9c:	2360      	movs	r3, #96	; 0x60
 8000a9e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aac:	463b      	mov	r3, r7
 8000aae:	2208      	movs	r2, #8
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_TIM4_Init+0x100>)
 8000ab4:	f002 f864 	bl	8002b80 <HAL_TIM_PWM_ConfigChannel>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000abe:	f000 fa33 	bl	8000f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	220c      	movs	r2, #12
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <MX_TIM4_Init+0x100>)
 8000aca:	f002 f859 	bl	8002b80 <HAL_TIM_PWM_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8000ad4:	f000 fa28 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ad8:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <MX_TIM4_Init+0x100>)
 8000ada:	f000 fabf 	bl	800105c <HAL_TIM_MspPostInit>

}
 8000ade:	bf00      	nop
 8000ae0:	3738      	adds	r7, #56	; 0x38
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20004a94 	.word	0x20004a94
 8000aec:	40000800 	.word	0x40000800

08000af0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_UART5_Init+0x4c>)
 8000af6:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <MX_UART5_Init+0x50>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <MX_UART5_Init+0x4c>)
 8000afc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b00:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_UART5_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_UART5_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_UART5_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_UART5_Init+0x4c>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_UART5_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_UART5_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_UART5_Init+0x4c>)
 8000b28:	f002 fe2a 	bl	8003780 <HAL_UART_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000b32:	f000 f9f9 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20004b68 	.word	0x20004b68
 8000b40:	40005000 	.word	0x40005000

08000b44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_USART3_UART_Init+0x4c>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <MX_USART3_UART_Init+0x50>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <MX_USART3_UART_Init+0x4c>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_USART3_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_USART3_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_USART3_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_USART3_UART_Init+0x4c>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_USART3_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_USART3_UART_Init+0x4c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_USART3_UART_Init+0x4c>)
 8000b7c:	f002 fe00 	bl	8003780 <HAL_UART_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b86:	f000 f9cf 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20004adc 	.word	0x20004adc
 8000b94:	40004800 	.word	0x40004800

08000b98 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_USART6_UART_Init+0x4c>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <MX_USART6_UART_Init+0x50>)
 8000ba0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <MX_USART6_UART_Init+0x4c>)
 8000ba4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ba8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_USART6_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_USART6_UART_Init+0x4c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_USART6_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_USART6_UART_Init+0x4c>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <MX_USART6_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_USART6_UART_Init+0x4c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_USART6_UART_Init+0x4c>)
 8000bd0:	f002 fdd6 	bl	8003780 <HAL_UART_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000bda:	f000 f9a5 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20004bfc 	.word	0x20004bfc
 8000be8:	40011400 	.word	0x40011400

08000bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08e      	sub	sp, #56	; 0x38
 8000bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
 8000c06:	4b9b      	ldr	r3, [pc, #620]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a9a      	ldr	r2, [pc, #616]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000c0c:	f043 0310 	orr.w	r3, r3, #16
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b98      	ldr	r3, [pc, #608]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0310 	and.w	r3, r3, #16
 8000c1a:	623b      	str	r3, [r7, #32]
 8000c1c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
 8000c22:	4b94      	ldr	r3, [pc, #592]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a93      	ldr	r2, [pc, #588]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000c28:	f043 0320 	orr.w	r3, r3, #32
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b91      	ldr	r3, [pc, #580]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0320 	and.w	r3, r3, #32
 8000c36:	61fb      	str	r3, [r7, #28]
 8000c38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
 8000c3e:	4b8d      	ldr	r3, [pc, #564]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a8c      	ldr	r2, [pc, #560]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b8a      	ldr	r3, [pc, #552]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c52:	61bb      	str	r3, [r7, #24]
 8000c54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	4b86      	ldr	r3, [pc, #536]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a85      	ldr	r2, [pc, #532]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b83      	ldr	r3, [pc, #524]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b7f      	ldr	r3, [pc, #508]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a7e      	ldr	r2, [pc, #504]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b7c      	ldr	r3, [pc, #496]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b78      	ldr	r3, [pc, #480]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a77      	ldr	r2, [pc, #476]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b75      	ldr	r3, [pc, #468]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	4b71      	ldr	r3, [pc, #452]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a70      	ldr	r2, [pc, #448]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b6e      	ldr	r3, [pc, #440]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	4b6a      	ldr	r3, [pc, #424]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a69      	ldr	r2, [pc, #420]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b67      	ldr	r3, [pc, #412]	; (8000e74 <MX_GPIO_Init+0x288>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PD02_DCmix_EN_Pin|PD04_DCpowder_IN2_Pin|PD04_DCpowder_IN1_Pin|PD01_DCmix_IN2_Pin
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f64f 71cd 	movw	r1, #65485	; 0xffcd
 8000ce8:	4863      	ldr	r0, [pc, #396]	; (8000e78 <MX_GPIO_Init+0x28c>)
 8000cea:	f001 f843 	bl	8001d74 <HAL_GPIO_WritePin>
                          |PD01_DCmix_IN1_Pin|CupD_STP_Pin|PD03_DCmix_IN1_Pin|CupD_DIR_Pin
                          |PD03_DCmix_IN2_Pin|LidD_STP_Pin|PD03_DCmix_EN_Pin|PD05_DCmix_IN1_Pin
                          |PD04_DCmix_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PD02_DCpowder_IN1_Pin|PD01_DCpowder_IN1_Pin|PD01_DCpowder_IN2_Pin|PD05_DCpowder_IN1_Pin
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f24f 71ac 	movw	r1, #63404	; 0xf7ac
 8000cf4:	4861      	ldr	r0, [pc, #388]	; (8000e7c <MX_GPIO_Init+0x290>)
 8000cf6:	f001 f83d 	bl	8001d74 <HAL_GPIO_WritePin>
                          |PD04_DCpowder_EN_Pin|PD05_DCpowder_IN2_Pin|PD01_DCpowder_EN_Pin|CF01_heat_IN2_Pin
                          |CupD_EN_Pin|LidD_EN_Pin|LidD_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PD02_DCpowder_EN_Pin|PD02_DCpowder_IN2_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2103      	movs	r1, #3
 8000cfe:	4860      	ldr	r0, [pc, #384]	; (8000e80 <MX_GPIO_Init+0x294>)
 8000d00:	f001 f838 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ICE01_water_Pin|ICE01_mix_Pin|PD01_heat_IN1_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2149      	movs	r1, #73	; 0x49
 8000d08:	485e      	ldr	r0, [pc, #376]	; (8000e84 <MX_GPIO_Init+0x298>)
 8000d0a:	f001 f833 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PD04_DCmix_IN1_Pin|ICE01_ice_Pin|CF01_heat_IN1_Pin|PD03_heat_IN1_Pin
 8000d0e:	2200      	movs	r2, #0
 8000d10:	21f9      	movs	r1, #249	; 0xf9
 8000d12:	485d      	ldr	r0, [pc, #372]	; (8000e88 <MX_GPIO_Init+0x29c>)
 8000d14:	f001 f82e 	bl	8001d74 <HAL_GPIO_WritePin>
                          |PD03_heat_IN2_Pin|PD04_heat_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PD04_DCmix_IN2_Pin|PD05_DCmix_IN2_Pin|PD05_DCmix_EN_Pin|PD02_heat_IN2_Pin
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f64b 4121 	movw	r1, #48161	; 0xbc21
 8000d1e:	485b      	ldr	r0, [pc, #364]	; (8000e8c <MX_GPIO_Init+0x2a0>)
 8000d20:	f001 f828 	bl	8001d74 <HAL_GPIO_WritePin>
                          |PD02_heat_IN1_Pin|PD01_heat_IN2_Pin|PD04_heat_IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PD03_DCpowder_EN_Pin|PD05_DCpowder_EN_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2103      	movs	r1, #3
 8000d28:	4859      	ldr	r0, [pc, #356]	; (8000e90 <MX_GPIO_Init+0x2a4>)
 8000d2a:	f001 f823 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD02_DCmix_IN2_Pin|PD02_DCmix_IN1_Pin|PD01_DCmix_EN_Pin|PD05_heat_IN1_Pin
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f64f 01e3 	movw	r1, #63715	; 0xf8e3
 8000d34:	4857      	ldr	r0, [pc, #348]	; (8000e94 <MX_GPIO_Init+0x2a8>)
 8000d36:	f001 f81d 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD02_DCmix_EN_Pin PD04_DCpowder_IN2_Pin PD04_DCpowder_IN1_Pin PD01_DCmix_IN2_Pin
                           PD01_DCmix_IN1_Pin CupD_STP_Pin PD03_DCmix_IN1_Pin CupD_DIR_Pin
                           PD03_DCmix_IN2_Pin LidD_STP_Pin PD03_DCmix_EN_Pin PD05_DCmix_IN1_Pin
                           PD04_DCmix_EN_Pin */
  GPIO_InitStruct.Pin = PD02_DCmix_EN_Pin|PD04_DCpowder_IN2_Pin|PD04_DCpowder_IN1_Pin|PD01_DCmix_IN2_Pin
 8000d3a:	f64f 73cd 	movw	r3, #65485	; 0xffcd
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD01_DCmix_IN1_Pin|CupD_STP_Pin|PD03_DCmix_IN1_Pin|CupD_DIR_Pin
                          |PD03_DCmix_IN2_Pin|LidD_STP_Pin|PD03_DCmix_EN_Pin|PD05_DCmix_IN1_Pin
                          |PD04_DCmix_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4849      	ldr	r0, [pc, #292]	; (8000e78 <MX_GPIO_Init+0x28c>)
 8000d54:	f000 fe62 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCpowder_IN1_Pin PD01_DCpowder_IN1_Pin PD01_DCpowder_IN2_Pin PD05_DCpowder_IN1_Pin
                           PD04_DCpowder_EN_Pin PD05_DCpowder_IN2_Pin PD01_DCpowder_EN_Pin CF01_heat_IN2_Pin
                           CupD_EN_Pin LidD_EN_Pin LidD_DIR_Pin */
  GPIO_InitStruct.Pin = PD02_DCpowder_IN1_Pin|PD01_DCpowder_IN1_Pin|PD01_DCpowder_IN2_Pin|PD05_DCpowder_IN1_Pin
 8000d58:	f24f 73ac 	movw	r3, #63404	; 0xf7ac
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD04_DCpowder_EN_Pin|PD05_DCpowder_IN2_Pin|PD01_DCpowder_EN_Pin|CF01_heat_IN2_Pin
                          |CupD_EN_Pin|LidD_EN_Pin|LidD_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4842      	ldr	r0, [pc, #264]	; (8000e7c <MX_GPIO_Init+0x290>)
 8000d72:	f000 fe53 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : Lid_up_Pin */
  GPIO_InitStruct.Pin = Lid_up_Pin;
 8000d76:	2310      	movs	r3, #16
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Lid_up_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	483c      	ldr	r0, [pc, #240]	; (8000e7c <MX_GPIO_Init+0x290>)
 8000d8a:	f000 fe47 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCpowder_EN_Pin PD02_DCpowder_IN2_Pin */
  GPIO_InitStruct.Pin = PD02_DCpowder_EN_Pin|PD02_DCpowder_IN2_Pin;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4836      	ldr	r0, [pc, #216]	; (8000e80 <MX_GPIO_Init+0x294>)
 8000da6:	f000 fe39 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ICE01_water_Pin ICE01_mix_Pin PD01_heat_IN1_Pin */
  GPIO_InitStruct.Pin = ICE01_water_Pin|ICE01_mix_Pin|PD01_heat_IN1_Pin;
 8000daa:	2349      	movs	r3, #73	; 0x49
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4830      	ldr	r0, [pc, #192]	; (8000e84 <MX_GPIO_Init+0x298>)
 8000dc2:	f000 fe2b 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : Cup_down_Pin */
  GPIO_InitStruct.Pin = Cup_down_Pin;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Cup_down_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	482a      	ldr	r0, [pc, #168]	; (8000e84 <MX_GPIO_Init+0x298>)
 8000dda:	f000 fe1f 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD04_DCmix_IN1_Pin ICE01_ice_Pin CF01_heat_IN1_Pin PD03_heat_IN1_Pin
                           PD03_heat_IN2_Pin PD04_heat_IN2_Pin */
  GPIO_InitStruct.Pin = PD04_DCmix_IN1_Pin|ICE01_ice_Pin|CF01_heat_IN1_Pin|PD03_heat_IN1_Pin
 8000dde:	23f9      	movs	r3, #249	; 0xf9
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD03_heat_IN2_Pin|PD04_heat_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df2:	4619      	mov	r1, r3
 8000df4:	4824      	ldr	r0, [pc, #144]	; (8000e88 <MX_GPIO_Init+0x29c>)
 8000df6:	f000 fe11 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD04_DCmix_IN2_Pin PD05_DCmix_IN2_Pin PD05_DCmix_EN_Pin PD02_heat_IN2_Pin
                           PD02_heat_IN1_Pin PD01_heat_IN2_Pin PD04_heat_IN1_Pin */
  GPIO_InitStruct.Pin = PD04_DCmix_IN2_Pin|PD05_DCmix_IN2_Pin|PD05_DCmix_EN_Pin|PD02_heat_IN2_Pin
 8000dfa:	f64b 4321 	movw	r3, #48161	; 0xbc21
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD02_heat_IN1_Pin|PD01_heat_IN2_Pin|PD04_heat_IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e10:	4619      	mov	r1, r3
 8000e12:	481e      	ldr	r0, [pc, #120]	; (8000e8c <MX_GPIO_Init+0x2a0>)
 8000e14:	f000 fe02 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Cup_up_Pin Lid_down_Pin */
  GPIO_InitStruct.Pin = Cup_up_Pin|Lid_down_Pin;
 8000e18:	2342      	movs	r3, #66	; 0x42
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4818      	ldr	r0, [pc, #96]	; (8000e8c <MX_GPIO_Init+0x2a0>)
 8000e2c:	f000 fdf6 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD03_DCpowder_EN_Pin PD05_DCpowder_EN_Pin */
  GPIO_InitStruct.Pin = PD03_DCpowder_EN_Pin|PD05_DCpowder_EN_Pin;
 8000e30:	2303      	movs	r3, #3
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	4812      	ldr	r0, [pc, #72]	; (8000e90 <MX_GPIO_Init+0x2a4>)
 8000e48:	f000 fde8 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCmix_IN2_Pin PD02_DCmix_IN1_Pin PD01_DCmix_EN_Pin PD05_heat_IN1_Pin
                           PD05_heat_IN2_Pin PD03_DCpowder_IN1_Pin PD03_DCpowder_IN2_Pin PD_Fan02_relay_Pin
                           PD_Fan01_relay_Pin ICE01_relay_Pin */
  GPIO_InitStruct.Pin = PD02_DCmix_IN2_Pin|PD02_DCmix_IN1_Pin|PD01_DCmix_EN_Pin|PD05_heat_IN1_Pin
 8000e4c:	f64f 03e3 	movw	r3, #63715	; 0xf8e3
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD05_heat_IN2_Pin|PD03_DCpowder_IN1_Pin|PD03_DCpowder_IN2_Pin|PD_Fan02_relay_Pin
                          |PD_Fan01_relay_Pin|ICE01_relay_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	4619      	mov	r1, r3
 8000e64:	480b      	ldr	r0, [pc, #44]	; (8000e94 <MX_GPIO_Init+0x2a8>)
 8000e66:	f000 fdd9 	bl	8001a1c <HAL_GPIO_Init>

}
 8000e6a:	bf00      	nop
 8000e6c:	3738      	adds	r7, #56	; 0x38
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40021400 	.word	0x40021400
 8000e80:	40021c00 	.word	0x40021c00
 8000e84:	40020800 	.word	0x40020800
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	40020400 	.word	0x40020400
 8000e90:	40021800 	.word	0x40021800
 8000e94:	40020c00 	.word	0x40020c00

08000e98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("task01\n");
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <StartDefaultTask+0x20>)
 8000ea2:	f006 fc7f 	bl	80077a4 <puts>
	HAL_Delay(1000);
 8000ea6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eaa:	f000 fc1f 	bl	80016ec <HAL_Delay>
    osDelay(1);
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f003 fd4e 	bl	8004950 <osDelay>
	printf("task01\n");
 8000eb4:	e7f4      	b.n	8000ea0 <StartDefaultTask+0x8>
 8000eb6:	bf00      	nop
 8000eb8:	080084a8 	.word	0x080084a8

08000ebc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	printf("task02\n");
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <StartTask02+0x20>)
 8000ec6:	f006 fc6d 	bl	80077a4 <puts>
	HAL_Delay(1000);
 8000eca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ece:	f000 fc0d 	bl	80016ec <HAL_Delay>

    osDelay(1);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f003 fd3c 	bl	8004950 <osDelay>
	printf("task02\n");
 8000ed8:	e7f4      	b.n	8000ec4 <StartTask02+0x8>
 8000eda:	bf00      	nop
 8000edc:	080084b0 	.word	0x080084b0

08000ee0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	printf("task03\n");
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <StartTask03+0x20>)
 8000eea:	f006 fc5b 	bl	80077a4 <puts>
	HAL_Delay(1000);
 8000eee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef2:	f000 fbfb 	bl	80016ec <HAL_Delay>

    osDelay(1);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f003 fd2a 	bl	8004950 <osDelay>
	printf("task03\n");
 8000efc:	e7f4      	b.n	8000ee8 <StartTask03+0x8>
 8000efe:	bf00      	nop
 8000f00:	080084b8 	.word	0x080084b8

08000f04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f16:	f000 fbc9 	bl	80016ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40001c00 	.word	0x40001c00

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
}
 8000f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <Error_Handler+0x8>
	...

08000f34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_MspInit+0x54>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	4a11      	ldr	r2, [pc, #68]	; (8000f88 <HAL_MspInit+0x54>)
 8000f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_MspInit+0x54>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_MspInit+0x54>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_MspInit+0x54>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f64:	6413      	str	r3, [r2, #64]	; 0x40
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_MspInit+0x54>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	210f      	movs	r1, #15
 8000f76:	f06f 0001 	mvn.w	r0, #1
 8000f7a:	f000 fc93 	bl	80018a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800

08000f8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a2c      	ldr	r2, [pc, #176]	; (800104c <HAL_TIM_Base_MspInit+0xc0>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d10e      	bne.n	8000fbc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <HAL_TIM_Base_MspInit+0xc4>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	4a2a      	ldr	r2, [pc, #168]	; (8001050 <HAL_TIM_Base_MspInit+0xc4>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6453      	str	r3, [r2, #68]	; 0x44
 8000fae:	4b28      	ldr	r3, [pc, #160]	; (8001050 <HAL_TIM_Base_MspInit+0xc4>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fba:	e042      	b.n	8001042 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc4:	d116      	bne.n	8000ff4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <HAL_TIM_Base_MspInit+0xc4>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a20      	ldr	r2, [pc, #128]	; (8001050 <HAL_TIM_Base_MspInit+0xc4>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <HAL_TIM_Base_MspInit+0xc4>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	201c      	movs	r0, #28
 8000fe8:	f000 fc5c 	bl	80018a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fec:	201c      	movs	r0, #28
 8000fee:	f000 fc75 	bl	80018dc <HAL_NVIC_EnableIRQ>
}
 8000ff2:	e026      	b.n	8001042 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a16      	ldr	r2, [pc, #88]	; (8001054 <HAL_TIM_Base_MspInit+0xc8>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d10e      	bne.n	800101c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <HAL_TIM_Base_MspInit+0xc4>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <HAL_TIM_Base_MspInit+0xc4>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <HAL_TIM_Base_MspInit+0xc4>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
}
 800101a:	e012      	b.n	8001042 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <HAL_TIM_Base_MspInit+0xcc>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d10d      	bne.n	8001042 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_TIM_Base_MspInit+0xc4>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	4a08      	ldr	r2, [pc, #32]	; (8001050 <HAL_TIM_Base_MspInit+0xc4>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	6413      	str	r3, [r2, #64]	; 0x40
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_TIM_Base_MspInit+0xc4>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40010000 	.word	0x40010000
 8001050:	40023800 	.word	0x40023800
 8001054:	40000400 	.word	0x40000400
 8001058:	40000800 	.word	0x40000800

0800105c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	; 0x30
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800107c:	d13d      	bne.n	80010fa <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
 8001082:	4b53      	ldr	r3, [pc, #332]	; (80011d0 <HAL_TIM_MspPostInit+0x174>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a52      	ldr	r2, [pc, #328]	; (80011d0 <HAL_TIM_MspPostInit+0x174>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b50      	ldr	r3, [pc, #320]	; (80011d0 <HAL_TIM_MspPostInit+0x174>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	61bb      	str	r3, [r7, #24]
 8001098:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	4b4c      	ldr	r3, [pc, #304]	; (80011d0 <HAL_TIM_MspPostInit+0x174>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a4b      	ldr	r2, [pc, #300]	; (80011d0 <HAL_TIM_MspPostInit+0x174>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b49      	ldr	r3, [pc, #292]	; (80011d0 <HAL_TIM_MspPostInit+0x174>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PD03_heat_EN_Pin;
 80010b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD03_heat_EN_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	4840      	ldr	r0, [pc, #256]	; (80011d4 <HAL_TIM_MspPostInit+0x178>)
 80010d4:	f000 fca2 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PD05_heat_EN_Pin;
 80010d8:	2308      	movs	r3, #8
 80010da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD05_heat_EN_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	4839      	ldr	r0, [pc, #228]	; (80011d8 <HAL_TIM_MspPostInit+0x17c>)
 80010f4:	f000 fc92 	bl	8001a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80010f8:	e065      	b.n	80011c6 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM3)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a37      	ldr	r2, [pc, #220]	; (80011dc <HAL_TIM_MspPostInit+0x180>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d13c      	bne.n	800117e <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <HAL_TIM_MspPostInit+0x174>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	4a30      	ldr	r2, [pc, #192]	; (80011d0 <HAL_TIM_MspPostInit+0x174>)
 800110e:	f043 0304 	orr.w	r3, r3, #4
 8001112:	6313      	str	r3, [r2, #48]	; 0x30
 8001114:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <HAL_TIM_MspPostInit+0x174>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <HAL_TIM_MspPostInit+0x174>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	4a29      	ldr	r2, [pc, #164]	; (80011d0 <HAL_TIM_MspPostInit+0x174>)
 800112a:	f043 0302 	orr.w	r3, r3, #2
 800112e:	6313      	str	r3, [r2, #48]	; 0x30
 8001130:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <HAL_TIM_MspPostInit+0x174>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PD04_heat_EN_Pin;
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800114c:	2302      	movs	r3, #2
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD04_heat_EN_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4822      	ldr	r0, [pc, #136]	; (80011e0 <HAL_TIM_MspPostInit+0x184>)
 8001158:	f000 fc60 	bl	8001a1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CF01_heat_EN_Pin;
 800115c:	2310      	movs	r3, #16
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800116c:	2302      	movs	r3, #2
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CF01_heat_EN_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	4818      	ldr	r0, [pc, #96]	; (80011d8 <HAL_TIM_MspPostInit+0x17c>)
 8001178:	f000 fc50 	bl	8001a1c <HAL_GPIO_Init>
}
 800117c:	e023      	b.n	80011c6 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM4)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <HAL_TIM_MspPostInit+0x188>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d11e      	bne.n	80011c6 <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <HAL_TIM_MspPostInit+0x174>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <HAL_TIM_MspPostInit+0x174>)
 8001192:	f043 0302 	orr.w	r3, r3, #2
 8001196:	6313      	str	r3, [r2, #48]	; 0x30
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_TIM_MspPostInit+0x174>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PD01_heat_EN_Pin|PD02_heat_EN_Pin;
 80011a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011b6:	2302      	movs	r3, #2
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_TIM_MspPostInit+0x17c>)
 80011c2:	f000 fc2b 	bl	8001a1c <HAL_GPIO_Init>
}
 80011c6:	bf00      	nop
 80011c8:	3730      	adds	r7, #48	; 0x30
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40000400 	.word	0x40000400
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40000800 	.word	0x40000800

080011e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	; 0x38
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a63      	ldr	r2, [pc, #396]	; (8001394 <HAL_UART_MspInit+0x1ac>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d153      	bne.n	80012b2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
 800120e:	4b62      	ldr	r3, [pc, #392]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a61      	ldr	r2, [pc, #388]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 8001214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
 800121a:	4b5f      	ldr	r3, [pc, #380]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001222:	623b      	str	r3, [r7, #32]
 8001224:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	4b5b      	ldr	r3, [pc, #364]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a5a      	ldr	r2, [pc, #360]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b58      	ldr	r3, [pc, #352]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
 8001246:	4b54      	ldr	r3, [pc, #336]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a53      	ldr	r2, [pc, #332]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b51      	ldr	r3, [pc, #324]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	61bb      	str	r3, [r7, #24]
 800125c:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = CupD_TX_Pin;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001270:	2308      	movs	r3, #8
 8001272:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CupD_TX_GPIO_Port, &GPIO_InitStruct);
 8001274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001278:	4619      	mov	r1, r3
 800127a:	4848      	ldr	r0, [pc, #288]	; (800139c <HAL_UART_MspInit+0x1b4>)
 800127c:	f000 fbce 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CupD_RX_Pin;
 8001280:	2304      	movs	r3, #4
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001290:	2308      	movs	r3, #8
 8001292:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CupD_RX_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	4841      	ldr	r0, [pc, #260]	; (80013a0 <HAL_UART_MspInit+0x1b8>)
 800129c:	f000 fbbe 	bl	8001a1c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2105      	movs	r1, #5
 80012a4:	2035      	movs	r0, #53	; 0x35
 80012a6:	f000 fafd 	bl	80018a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80012aa:	2035      	movs	r0, #53	; 0x35
 80012ac:	f000 fb16 	bl	80018dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80012b0:	e06c      	b.n	800138c <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART3)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a3b      	ldr	r2, [pc, #236]	; (80013a4 <HAL_UART_MspInit+0x1bc>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d12d      	bne.n	8001318 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	4b35      	ldr	r3, [pc, #212]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	4a34      	ldr	r2, [pc, #208]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 80012c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ca:	6413      	str	r3, [r2, #64]	; 0x40
 80012cc:	4b32      	ldr	r3, [pc, #200]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	4a2d      	ldr	r2, [pc, #180]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	6313      	str	r3, [r2, #48]	; 0x30
 80012e8:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 80012f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001306:	2307      	movs	r3, #7
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130e:	4619      	mov	r1, r3
 8001310:	4823      	ldr	r0, [pc, #140]	; (80013a0 <HAL_UART_MspInit+0x1b8>)
 8001312:	f000 fb83 	bl	8001a1c <HAL_GPIO_Init>
}
 8001316:	e039      	b.n	800138c <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART6)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a22      	ldr	r2, [pc, #136]	; (80013a8 <HAL_UART_MspInit+0x1c0>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d134      	bne.n	800138c <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 800132c:	f043 0320 	orr.w	r3, r3, #32
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f003 0320 	and.w	r3, r3, #32
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a14      	ldr	r2, [pc, #80]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 8001348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_UART_MspInit+0x1b0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LidD_RX_Pin|LidD_TX_Pin;
 800135a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800136c:	2308      	movs	r3, #8
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001374:	4619      	mov	r1, r3
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <HAL_UART_MspInit+0x1c4>)
 8001378:	f000 fb50 	bl	8001a1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2105      	movs	r1, #5
 8001380:	2047      	movs	r0, #71	; 0x47
 8001382:	f000 fa8f 	bl	80018a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001386:	2047      	movs	r0, #71	; 0x47
 8001388:	f000 faa8 	bl	80018dc <HAL_NVIC_EnableIRQ>
}
 800138c:	bf00      	nop
 800138e:	3738      	adds	r7, #56	; 0x38
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40005000 	.word	0x40005000
 8001398:	40023800 	.word	0x40023800
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020c00 	.word	0x40020c00
 80013a4:	40004800 	.word	0x40004800
 80013a8:	40011400 	.word	0x40011400
 80013ac:	40021800 	.word	0x40021800

080013b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	; 0x30
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	202c      	movs	r0, #44	; 0x2c
 80013c6:	f000 fa6d 	bl	80018a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80013ca:	202c      	movs	r0, #44	; 0x2c
 80013cc:	f000 fa86 	bl	80018dc <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <HAL_InitTick+0xa4>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <HAL_InitTick+0xa4>)
 80013da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013de:	6413      	str	r3, [r2, #64]	; 0x40
 80013e0:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <HAL_InitTick+0xa4>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013ec:	f107 0210 	add.w	r2, r7, #16
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f001 f96e 	bl	80026d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80013fc:	f001 f944 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 8001400:	4603      	mov	r3, r0
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	4a13      	ldr	r2, [pc, #76]	; (8001458 <HAL_InitTick+0xa8>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0c9b      	lsrs	r3, r3, #18
 8001410:	3b01      	subs	r3, #1
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_InitTick+0xac>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <HAL_InitTick+0xb0>)
 8001418:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_InitTick+0xac>)
 800141c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001420:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001422:	4a0e      	ldr	r2, [pc, #56]	; (800145c <HAL_InitTick+0xac>)
 8001424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001426:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_InitTick+0xac>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_InitTick+0xac>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8001434:	4809      	ldr	r0, [pc, #36]	; (800145c <HAL_InitTick+0xac>)
 8001436:	f001 f981 	bl	800273c <HAL_TIM_Base_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d104      	bne.n	800144a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001440:	4806      	ldr	r0, [pc, #24]	; (800145c <HAL_InitTick+0xac>)
 8001442:	f001 f9cb 	bl	80027dc <HAL_TIM_Base_Start_IT>
 8001446:	4603      	mov	r3, r0
 8001448:	e000      	b.n	800144c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3730      	adds	r7, #48	; 0x30
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40023800 	.word	0x40023800
 8001458:	431bde83 	.word	0x431bde83
 800145c:	20004c88 	.word	0x20004c88
 8001460:	40001c00 	.word	0x40001c00

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <NMI_Handler+0x4>

0800146a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <MemManage_Handler+0x4>

08001476 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <UsageFault_Handler+0x4>

08001482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <TIM2_IRQHandler+0x10>)
 8001496:	f001 fa6a 	bl	800296e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20004c40 	.word	0x20004c40

080014a4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80014aa:	f001 fa60 	bl	800296e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20004c88 	.word	0x20004c88

080014b8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <UART5_IRQHandler+0x10>)
 80014be:	f002 fa6f 	bl	80039a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20004b68 	.word	0x20004b68

080014cc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <USART6_IRQHandler+0x10>)
 80014d2:	f002 fa65 	bl	80039a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20004bfc 	.word	0x20004bfc

080014e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	e00a      	b.n	8001508 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014f2:	f3af 8000 	nop.w
 80014f6:	4601      	mov	r1, r0
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60ba      	str	r2, [r7, #8]
 80014fe:	b2ca      	uxtb	r2, r1
 8001500:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	dbf0      	blt.n	80014f2 <_read+0x12>
	}

return len;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_close>:
	}
	return len;
}

int _close(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
	return -1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001542:	605a      	str	r2, [r3, #4]
	return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_isatty>:

int _isatty(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
	return 1;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
	return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f005 fedc 	bl	8007370 <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20030000 	.word	0x20030000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	200000b4 	.word	0x200000b4
 80015ec:	20004d28 	.word	0x20004d28

080015f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <SystemInit+0x20>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <SystemInit+0x20>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800164c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800161a:	490e      	ldr	r1, [pc, #56]	; (8001654 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800161c:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001630:	4c0b      	ldr	r4, [pc, #44]	; (8001660 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800163e:	f7ff ffd7 	bl	80015f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001642:	f005 ff91 	bl	8007568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001646:	f7fe ffb9 	bl	80005bc <main>
  bx  lr    
 800164a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800164c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001658:	08008648 	.word	0x08008648
  ldr r2, =_sbss
 800165c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001660:	20004d24 	.word	0x20004d24

08001664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC_IRQHandler>
	...

08001668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <HAL_Init+0x40>)
 8001672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001676:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <HAL_Init+0x40>)
 800167e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001682:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_Init+0x40>)
 800168a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f000 f8fc 	bl	800188e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001696:	200f      	movs	r0, #15
 8001698:	f7ff fe8a 	bl	80013b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169c:	f7ff fc4a 	bl	8000f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023c00 	.word	0x40023c00

080016ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_IncTick+0x20>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_IncTick+0x24>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <HAL_IncTick+0x24>)
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000008 	.word	0x20000008
 80016d0:	20004cd0 	.word	0x20004cd0

080016d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return uwTick;
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <HAL_GetTick+0x14>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20004cd0 	.word	0x20004cd0

080016ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f4:	f7ff ffee 	bl	80016d4 <HAL_GetTick>
 80016f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001704:	d005      	beq.n	8001712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_Delay+0x44>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4413      	add	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001712:	bf00      	nop
 8001714:	f7ff ffde 	bl	80016d4 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	429a      	cmp	r2, r3
 8001722:	d8f7      	bhi.n	8001714 <HAL_Delay+0x28>
  {
  }
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000008 	.word	0x20000008

08001734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001750:	4013      	ands	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800175c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	60d3      	str	r3, [r2, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <__NVIC_GetPriorityGrouping+0x18>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	f003 0307 	and.w	r3, r3, #7
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	db0b      	blt.n	80017c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	f003 021f 	and.w	r2, r3, #31
 80017b0:	4907      	ldr	r1, [pc, #28]	; (80017d0 <__NVIC_EnableIRQ+0x38>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	2001      	movs	r0, #1
 80017ba:	fa00 f202 	lsl.w	r2, r0, r2
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000e100 	.word	0xe000e100

080017d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	db0a      	blt.n	80017fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	490c      	ldr	r1, [pc, #48]	; (8001820 <__NVIC_SetPriority+0x4c>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	0112      	lsls	r2, r2, #4
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	440b      	add	r3, r1
 80017f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017fc:	e00a      	b.n	8001814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4908      	ldr	r1, [pc, #32]	; (8001824 <__NVIC_SetPriority+0x50>)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	3b04      	subs	r3, #4
 800180c:	0112      	lsls	r2, r2, #4
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	440b      	add	r3, r1
 8001812:	761a      	strb	r2, [r3, #24]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000e100 	.word	0xe000e100
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f1c3 0307 	rsb	r3, r3, #7
 8001842:	2b04      	cmp	r3, #4
 8001844:	bf28      	it	cs
 8001846:	2304      	movcs	r3, #4
 8001848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3304      	adds	r3, #4
 800184e:	2b06      	cmp	r3, #6
 8001850:	d902      	bls.n	8001858 <NVIC_EncodePriority+0x30>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3b03      	subs	r3, #3
 8001856:	e000      	b.n	800185a <NVIC_EncodePriority+0x32>
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	f04f 32ff 	mov.w	r2, #4294967295
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	401a      	ands	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001870:	f04f 31ff 	mov.w	r1, #4294967295
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43d9      	mvns	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	4313      	orrs	r3, r2
         );
}
 8001882:	4618      	mov	r0, r3
 8001884:	3724      	adds	r7, #36	; 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ff4c 	bl	8001734 <__NVIC_SetPriorityGrouping>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b6:	f7ff ff61 	bl	800177c <__NVIC_GetPriorityGrouping>
 80018ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	68b9      	ldr	r1, [r7, #8]
 80018c0:	6978      	ldr	r0, [r7, #20]
 80018c2:	f7ff ffb1 	bl	8001828 <NVIC_EncodePriority>
 80018c6:	4602      	mov	r2, r0
 80018c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff80 	bl	80017d4 <__NVIC_SetPriority>
}
 80018d4:	bf00      	nop
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff54 	bl	8001798 <__NVIC_EnableIRQ>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001904:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001906:	f7ff fee5 	bl	80016d4 <HAL_GetTick>
 800190a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d008      	beq.n	800192a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e052      	b.n	80019d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0216 	bic.w	r2, r2, #22
 8001938:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695a      	ldr	r2, [r3, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001948:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	2b00      	cmp	r3, #0
 8001950:	d103      	bne.n	800195a <HAL_DMA_Abort+0x62>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0208 	bic.w	r2, r2, #8
 8001968:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0201 	bic.w	r2, r2, #1
 8001978:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800197a:	e013      	b.n	80019a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800197c:	f7ff feaa 	bl	80016d4 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b05      	cmp	r3, #5
 8001988:	d90c      	bls.n	80019a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2220      	movs	r2, #32
 800198e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2203      	movs	r2, #3
 8001994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e015      	b.n	80019d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1e4      	bne.n	800197c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b6:	223f      	movs	r2, #63	; 0x3f
 80019b8:	409a      	lsls	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d004      	beq.n	80019f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2280      	movs	r2, #128	; 0x80
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00c      	b.n	8001a10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2205      	movs	r2, #5
 80019fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0201 	bic.w	r2, r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	e177      	b.n	8001d28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	f040 8166 	bne.w	8001d22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d005      	beq.n	8001a6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d130      	bne.n	8001ad0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	2203      	movs	r2, #3
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 0201 	and.w	r2, r3, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d017      	beq.n	8001b0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d123      	bne.n	8001b60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	08da      	lsrs	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3208      	adds	r2, #8
 8001b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	08da      	lsrs	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3208      	adds	r2, #8
 8001b5a:	69b9      	ldr	r1, [r7, #24]
 8001b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0203 	and.w	r2, r3, #3
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 80c0 	beq.w	8001d22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b66      	ldr	r3, [pc, #408]	; (8001d40 <HAL_GPIO_Init+0x324>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	4a65      	ldr	r2, [pc, #404]	; (8001d40 <HAL_GPIO_Init+0x324>)
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb2:	4b63      	ldr	r3, [pc, #396]	; (8001d40 <HAL_GPIO_Init+0x324>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bbe:	4a61      	ldr	r2, [pc, #388]	; (8001d44 <HAL_GPIO_Init+0x328>)
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a58      	ldr	r2, [pc, #352]	; (8001d48 <HAL_GPIO_Init+0x32c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d037      	beq.n	8001c5a <HAL_GPIO_Init+0x23e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a57      	ldr	r2, [pc, #348]	; (8001d4c <HAL_GPIO_Init+0x330>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d031      	beq.n	8001c56 <HAL_GPIO_Init+0x23a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a56      	ldr	r2, [pc, #344]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d02b      	beq.n	8001c52 <HAL_GPIO_Init+0x236>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a55      	ldr	r2, [pc, #340]	; (8001d54 <HAL_GPIO_Init+0x338>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d025      	beq.n	8001c4e <HAL_GPIO_Init+0x232>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a54      	ldr	r2, [pc, #336]	; (8001d58 <HAL_GPIO_Init+0x33c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d01f      	beq.n	8001c4a <HAL_GPIO_Init+0x22e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a53      	ldr	r2, [pc, #332]	; (8001d5c <HAL_GPIO_Init+0x340>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d019      	beq.n	8001c46 <HAL_GPIO_Init+0x22a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a52      	ldr	r2, [pc, #328]	; (8001d60 <HAL_GPIO_Init+0x344>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d013      	beq.n	8001c42 <HAL_GPIO_Init+0x226>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a51      	ldr	r2, [pc, #324]	; (8001d64 <HAL_GPIO_Init+0x348>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00d      	beq.n	8001c3e <HAL_GPIO_Init+0x222>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a50      	ldr	r2, [pc, #320]	; (8001d68 <HAL_GPIO_Init+0x34c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d007      	beq.n	8001c3a <HAL_GPIO_Init+0x21e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4f      	ldr	r2, [pc, #316]	; (8001d6c <HAL_GPIO_Init+0x350>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_GPIO_Init+0x21a>
 8001c32:	2309      	movs	r3, #9
 8001c34:	e012      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c36:	230a      	movs	r3, #10
 8001c38:	e010      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c3a:	2308      	movs	r3, #8
 8001c3c:	e00e      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c3e:	2307      	movs	r3, #7
 8001c40:	e00c      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c42:	2306      	movs	r3, #6
 8001c44:	e00a      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c46:	2305      	movs	r3, #5
 8001c48:	e008      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	e006      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e004      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e002      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	f002 0203 	and.w	r2, r2, #3
 8001c62:	0092      	lsls	r2, r2, #2
 8001c64:	4093      	lsls	r3, r2
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c6c:	4935      	ldr	r1, [pc, #212]	; (8001d44 <HAL_GPIO_Init+0x328>)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c9e:	4a34      	ldr	r2, [pc, #208]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ca4:	4b32      	ldr	r3, [pc, #200]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cc8:	4a29      	ldr	r2, [pc, #164]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cce:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf2:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d1c:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3301      	adds	r3, #1
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	2b0f      	cmp	r3, #15
 8001d2c:	f67f ae84 	bls.w	8001a38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40013800 	.word	0x40013800
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40021400 	.word	0x40021400
 8001d60:	40021800 	.word	0x40021800
 8001d64:	40021c00 	.word	0x40021c00
 8001d68:	40022000 	.word	0x40022000
 8001d6c:	40022400 	.word	0x40022400
 8001d70:	40013c00 	.word	0x40013c00

08001d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
 8001d80:	4613      	mov	r3, r2
 8001d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d84:	787b      	ldrb	r3, [r7, #1]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d90:	e003      	b.n	8001d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	041a      	lsls	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	619a      	str	r2, [r3, #24]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <HAL_PWREx_EnableOverDrive+0x90>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a1f      	ldr	r2, [pc, #124]	; (8001e38 <HAL_PWREx_EnableOverDrive+0x90>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_PWREx_EnableOverDrive+0x90>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001dce:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <HAL_PWREx_EnableOverDrive+0x94>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dd4:	f7ff fc7e 	bl	80016d4 <HAL_GetTick>
 8001dd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dda:	e009      	b.n	8001df0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ddc:	f7ff fc7a 	bl	80016d4 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dea:	d901      	bls.n	8001df0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e01f      	b.n	8001e30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <HAL_PWREx_EnableOverDrive+0x98>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfc:	d1ee      	bne.n	8001ddc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e04:	f7ff fc66 	bl	80016d4 <HAL_GetTick>
 8001e08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e0a:	e009      	b.n	8001e20 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e0c:	f7ff fc62 	bl	80016d4 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e1a:	d901      	bls.n	8001e20 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e007      	b.n	8001e30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e2c:	d1ee      	bne.n	8001e0c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	420e0040 	.word	0x420e0040
 8001e40:	40007000 	.word	0x40007000
 8001e44:	420e0044 	.word	0x420e0044

08001e48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e264      	b.n	8002324 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d075      	beq.n	8001f52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e66:	4ba3      	ldr	r3, [pc, #652]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d00c      	beq.n	8001e8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e72:	4ba0      	ldr	r3, [pc, #640]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d112      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e7e:	4b9d      	ldr	r3, [pc, #628]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e8a:	d10b      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8c:	4b99      	ldr	r3, [pc, #612]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d05b      	beq.n	8001f50 <HAL_RCC_OscConfig+0x108>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d157      	bne.n	8001f50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e23f      	b.n	8002324 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eac:	d106      	bne.n	8001ebc <HAL_RCC_OscConfig+0x74>
 8001eae:	4b91      	ldr	r3, [pc, #580]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a90      	ldr	r2, [pc, #576]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e01d      	b.n	8001ef8 <HAL_RCC_OscConfig+0xb0>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x98>
 8001ec6:	4b8b      	ldr	r3, [pc, #556]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a8a      	ldr	r2, [pc, #552]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	4b88      	ldr	r3, [pc, #544]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a87      	ldr	r2, [pc, #540]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	e00b      	b.n	8001ef8 <HAL_RCC_OscConfig+0xb0>
 8001ee0:	4b84      	ldr	r3, [pc, #528]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a83      	ldr	r2, [pc, #524]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b81      	ldr	r3, [pc, #516]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a80      	ldr	r2, [pc, #512]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d013      	beq.n	8001f28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff fbe8 	bl	80016d4 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff fbe4 	bl	80016d4 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e204      	b.n	8002324 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	4b76      	ldr	r3, [pc, #472]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0xc0>
 8001f26:	e014      	b.n	8001f52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff fbd4 	bl	80016d4 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f30:	f7ff fbd0 	bl	80016d4 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e1f0      	b.n	8002324 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f42:	4b6c      	ldr	r3, [pc, #432]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0xe8>
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d063      	beq.n	8002026 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f5e:	4b65      	ldr	r3, [pc, #404]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00b      	beq.n	8001f82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6a:	4b62      	ldr	r3, [pc, #392]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d11c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f76:	4b5f      	ldr	r3, [pc, #380]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d116      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f82:	4b5c      	ldr	r3, [pc, #368]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_RCC_OscConfig+0x152>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d001      	beq.n	8001f9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e1c4      	b.n	8002324 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9a:	4b56      	ldr	r3, [pc, #344]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4952      	ldr	r1, [pc, #328]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	e03a      	b.n	8002026 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb8:	4b4f      	ldr	r3, [pc, #316]	; (80020f8 <HAL_RCC_OscConfig+0x2b0>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbe:	f7ff fb89 	bl	80016d4 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc6:	f7ff fb85 	bl	80016d4 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e1a5      	b.n	8002324 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd8:	4b46      	ldr	r3, [pc, #280]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe4:	4b43      	ldr	r3, [pc, #268]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4940      	ldr	r1, [pc, #256]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	600b      	str	r3, [r1, #0]
 8001ff8:	e015      	b.n	8002026 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffa:	4b3f      	ldr	r3, [pc, #252]	; (80020f8 <HAL_RCC_OscConfig+0x2b0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff fb68 	bl	80016d4 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002008:	f7ff fb64 	bl	80016d4 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e184      	b.n	8002324 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201a:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d030      	beq.n	8002094 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d016      	beq.n	8002068 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203a:	4b30      	ldr	r3, [pc, #192]	; (80020fc <HAL_RCC_OscConfig+0x2b4>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002040:	f7ff fb48 	bl	80016d4 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002048:	f7ff fb44 	bl	80016d4 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e164      	b.n	8002324 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205a:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 800205c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x200>
 8002066:	e015      	b.n	8002094 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002068:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_RCC_OscConfig+0x2b4>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206e:	f7ff fb31 	bl	80016d4 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002076:	f7ff fb2d 	bl	80016d4 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e14d      	b.n	8002324 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 800208a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f0      	bne.n	8002076 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80a0 	beq.w	80021e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a6:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10f      	bne.n	80020d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c0:	6413      	str	r3, [r2, #64]	; 0x40
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ce:	2301      	movs	r3, #1
 80020d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_OscConfig+0x2b8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d121      	bne.n	8002122 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020de:	4b08      	ldr	r3, [pc, #32]	; (8002100 <HAL_RCC_OscConfig+0x2b8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_RCC_OscConfig+0x2b8>)
 80020e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ea:	f7ff faf3 	bl	80016d4 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	e011      	b.n	8002116 <HAL_RCC_OscConfig+0x2ce>
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	42470000 	.word	0x42470000
 80020fc:	42470e80 	.word	0x42470e80
 8002100:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002104:	f7ff fae6 	bl	80016d4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e106      	b.n	8002324 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b85      	ldr	r3, [pc, #532]	; (800232c <HAL_RCC_OscConfig+0x4e4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d106      	bne.n	8002138 <HAL_RCC_OscConfig+0x2f0>
 800212a:	4b81      	ldr	r3, [pc, #516]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 800212c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212e:	4a80      	ldr	r2, [pc, #512]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6713      	str	r3, [r2, #112]	; 0x70
 8002136:	e01c      	b.n	8002172 <HAL_RCC_OscConfig+0x32a>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b05      	cmp	r3, #5
 800213e:	d10c      	bne.n	800215a <HAL_RCC_OscConfig+0x312>
 8002140:	4b7b      	ldr	r3, [pc, #492]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002144:	4a7a      	ldr	r2, [pc, #488]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 8002146:	f043 0304 	orr.w	r3, r3, #4
 800214a:	6713      	str	r3, [r2, #112]	; 0x70
 800214c:	4b78      	ldr	r3, [pc, #480]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002150:	4a77      	ldr	r2, [pc, #476]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6713      	str	r3, [r2, #112]	; 0x70
 8002158:	e00b      	b.n	8002172 <HAL_RCC_OscConfig+0x32a>
 800215a:	4b75      	ldr	r3, [pc, #468]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215e:	4a74      	ldr	r2, [pc, #464]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	6713      	str	r3, [r2, #112]	; 0x70
 8002166:	4b72      	ldr	r3, [pc, #456]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	4a71      	ldr	r2, [pc, #452]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 800216c:	f023 0304 	bic.w	r3, r3, #4
 8002170:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d015      	beq.n	80021a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217a:	f7ff faab 	bl	80016d4 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002180:	e00a      	b.n	8002198 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002182:	f7ff faa7 	bl	80016d4 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002190:	4293      	cmp	r3, r2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e0c5      	b.n	8002324 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002198:	4b65      	ldr	r3, [pc, #404]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0ee      	beq.n	8002182 <HAL_RCC_OscConfig+0x33a>
 80021a4:	e014      	b.n	80021d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a6:	f7ff fa95 	bl	80016d4 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ac:	e00a      	b.n	80021c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ae:	f7ff fa91 	bl	80016d4 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021bc:	4293      	cmp	r3, r2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e0af      	b.n	8002324 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c4:	4b5a      	ldr	r3, [pc, #360]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1ee      	bne.n	80021ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d0:	7dfb      	ldrb	r3, [r7, #23]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d105      	bne.n	80021e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d6:	4b56      	ldr	r3, [pc, #344]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	4a55      	ldr	r2, [pc, #340]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 80021dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 809b 	beq.w	8002322 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ec:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 030c 	and.w	r3, r3, #12
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d05c      	beq.n	80022b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d141      	bne.n	8002284 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002200:	4b4c      	ldr	r3, [pc, #304]	; (8002334 <HAL_RCC_OscConfig+0x4ec>)
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7ff fa65 	bl	80016d4 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220e:	f7ff fa61 	bl	80016d4 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e081      	b.n	8002324 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002220:	4b43      	ldr	r3, [pc, #268]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f0      	bne.n	800220e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69da      	ldr	r2, [r3, #28]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	019b      	lsls	r3, r3, #6
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002242:	085b      	lsrs	r3, r3, #1
 8002244:	3b01      	subs	r3, #1
 8002246:	041b      	lsls	r3, r3, #16
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224e:	061b      	lsls	r3, r3, #24
 8002250:	4937      	ldr	r1, [pc, #220]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002256:	4b37      	ldr	r3, [pc, #220]	; (8002334 <HAL_RCC_OscConfig+0x4ec>)
 8002258:	2201      	movs	r2, #1
 800225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff fa3a 	bl	80016d4 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002264:	f7ff fa36 	bl	80016d4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e056      	b.n	8002324 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002276:	4b2e      	ldr	r3, [pc, #184]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x41c>
 8002282:	e04e      	b.n	8002322 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002284:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <HAL_RCC_OscConfig+0x4ec>)
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228a:	f7ff fa23 	bl	80016d4 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002292:	f7ff fa1f 	bl	80016d4 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e03f      	b.n	8002324 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a4:	4b22      	ldr	r3, [pc, #136]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f0      	bne.n	8002292 <HAL_RCC_OscConfig+0x44a>
 80022b0:	e037      	b.n	8002322 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e032      	b.n	8002324 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022be:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <HAL_RCC_OscConfig+0x4e8>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d028      	beq.n	800231e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d121      	bne.n	800231e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d11a      	bne.n	800231e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022ee:	4013      	ands	r3, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d111      	bne.n	800231e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	085b      	lsrs	r3, r3, #1
 8002306:	3b01      	subs	r3, #1
 8002308:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d107      	bne.n	800231e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800231a:	429a      	cmp	r2, r3
 800231c:	d001      	beq.n	8002322 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40007000 	.word	0x40007000
 8002330:	40023800 	.word	0x40023800
 8002334:	42470060 	.word	0x42470060

08002338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0cc      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800234c:	4b68      	ldr	r3, [pc, #416]	; (80024f0 <HAL_RCC_ClockConfig+0x1b8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d90c      	bls.n	8002374 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b65      	ldr	r3, [pc, #404]	; (80024f0 <HAL_RCC_ClockConfig+0x1b8>)
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b63      	ldr	r3, [pc, #396]	; (80024f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0b8      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d020      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800238c:	4b59      	ldr	r3, [pc, #356]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4a58      	ldr	r2, [pc, #352]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002396:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a4:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	4a52      	ldr	r2, [pc, #328]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b0:	4b50      	ldr	r3, [pc, #320]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	494d      	ldr	r1, [pc, #308]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d044      	beq.n	8002458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d6:	4b47      	ldr	r3, [pc, #284]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d119      	bne.n	8002416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e07f      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d003      	beq.n	80023f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f6:	4b3f      	ldr	r3, [pc, #252]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e06f      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002406:	4b3b      	ldr	r3, [pc, #236]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e067      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002416:	4b37      	ldr	r3, [pc, #220]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f023 0203 	bic.w	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4934      	ldr	r1, [pc, #208]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	4313      	orrs	r3, r2
 8002426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002428:	f7ff f954 	bl	80016d4 <HAL_GetTick>
 800242c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	e00a      	b.n	8002446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002430:	f7ff f950 	bl	80016d4 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e04f      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 020c 	and.w	r2, r3, #12
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	429a      	cmp	r2, r3
 8002456:	d1eb      	bne.n	8002430 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002458:	4b25      	ldr	r3, [pc, #148]	; (80024f0 <HAL_RCC_ClockConfig+0x1b8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d20c      	bcs.n	8002480 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b22      	ldr	r3, [pc, #136]	; (80024f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e032      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4916      	ldr	r1, [pc, #88]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	4313      	orrs	r3, r2
 800249c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d009      	beq.n	80024be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	490e      	ldr	r1, [pc, #56]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024be:	f000 f821 	bl	8002504 <HAL_RCC_GetSysClockFreq>
 80024c2:	4602      	mov	r2, r0
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	490a      	ldr	r1, [pc, #40]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 80024d0:	5ccb      	ldrb	r3, [r1, r3]
 80024d2:	fa22 f303 	lsr.w	r3, r2, r3
 80024d6:	4a09      	ldr	r2, [pc, #36]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <HAL_RCC_ClockConfig+0x1c8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe ff66 	bl	80013b0 <HAL_InitTick>

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40023c00 	.word	0x40023c00
 80024f4:	40023800 	.word	0x40023800
 80024f8:	08008588 	.word	0x08008588
 80024fc:	20000000 	.word	0x20000000
 8002500:	20000004 	.word	0x20000004

08002504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002504:	b5b0      	push	{r4, r5, r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800250a:	2100      	movs	r1, #0
 800250c:	6079      	str	r1, [r7, #4]
 800250e:	2100      	movs	r1, #0
 8002510:	60f9      	str	r1, [r7, #12]
 8002512:	2100      	movs	r1, #0
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002516:	2100      	movs	r1, #0
 8002518:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800251a:	4952      	ldr	r1, [pc, #328]	; (8002664 <HAL_RCC_GetSysClockFreq+0x160>)
 800251c:	6889      	ldr	r1, [r1, #8]
 800251e:	f001 010c 	and.w	r1, r1, #12
 8002522:	2908      	cmp	r1, #8
 8002524:	d00d      	beq.n	8002542 <HAL_RCC_GetSysClockFreq+0x3e>
 8002526:	2908      	cmp	r1, #8
 8002528:	f200 8094 	bhi.w	8002654 <HAL_RCC_GetSysClockFreq+0x150>
 800252c:	2900      	cmp	r1, #0
 800252e:	d002      	beq.n	8002536 <HAL_RCC_GetSysClockFreq+0x32>
 8002530:	2904      	cmp	r1, #4
 8002532:	d003      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x38>
 8002534:	e08e      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002536:	4b4c      	ldr	r3, [pc, #304]	; (8002668 <HAL_RCC_GetSysClockFreq+0x164>)
 8002538:	60bb      	str	r3, [r7, #8]
       break;
 800253a:	e08e      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800253c:	4b4b      	ldr	r3, [pc, #300]	; (800266c <HAL_RCC_GetSysClockFreq+0x168>)
 800253e:	60bb      	str	r3, [r7, #8]
      break;
 8002540:	e08b      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002542:	4948      	ldr	r1, [pc, #288]	; (8002664 <HAL_RCC_GetSysClockFreq+0x160>)
 8002544:	6849      	ldr	r1, [r1, #4]
 8002546:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800254a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800254c:	4945      	ldr	r1, [pc, #276]	; (8002664 <HAL_RCC_GetSysClockFreq+0x160>)
 800254e:	6849      	ldr	r1, [r1, #4]
 8002550:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002554:	2900      	cmp	r1, #0
 8002556:	d024      	beq.n	80025a2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002558:	4942      	ldr	r1, [pc, #264]	; (8002664 <HAL_RCC_GetSysClockFreq+0x160>)
 800255a:	6849      	ldr	r1, [r1, #4]
 800255c:	0989      	lsrs	r1, r1, #6
 800255e:	4608      	mov	r0, r1
 8002560:	f04f 0100 	mov.w	r1, #0
 8002564:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002568:	f04f 0500 	mov.w	r5, #0
 800256c:	ea00 0204 	and.w	r2, r0, r4
 8002570:	ea01 0305 	and.w	r3, r1, r5
 8002574:	493d      	ldr	r1, [pc, #244]	; (800266c <HAL_RCC_GetSysClockFreq+0x168>)
 8002576:	fb01 f003 	mul.w	r0, r1, r3
 800257a:	2100      	movs	r1, #0
 800257c:	fb01 f102 	mul.w	r1, r1, r2
 8002580:	1844      	adds	r4, r0, r1
 8002582:	493a      	ldr	r1, [pc, #232]	; (800266c <HAL_RCC_GetSysClockFreq+0x168>)
 8002584:	fba2 0101 	umull	r0, r1, r2, r1
 8002588:	1863      	adds	r3, r4, r1
 800258a:	4619      	mov	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	461a      	mov	r2, r3
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	f7fd fe7c 	bl	8000290 <__aeabi_uldivmod>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4613      	mov	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	e04a      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a2:	4b30      	ldr	r3, [pc, #192]	; (8002664 <HAL_RCC_GetSysClockFreq+0x160>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	099b      	lsrs	r3, r3, #6
 80025a8:	461a      	mov	r2, r3
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025b2:	f04f 0100 	mov.w	r1, #0
 80025b6:	ea02 0400 	and.w	r4, r2, r0
 80025ba:	ea03 0501 	and.w	r5, r3, r1
 80025be:	4620      	mov	r0, r4
 80025c0:	4629      	mov	r1, r5
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	014b      	lsls	r3, r1, #5
 80025cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025d0:	0142      	lsls	r2, r0, #5
 80025d2:	4610      	mov	r0, r2
 80025d4:	4619      	mov	r1, r3
 80025d6:	1b00      	subs	r0, r0, r4
 80025d8:	eb61 0105 	sbc.w	r1, r1, r5
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	018b      	lsls	r3, r1, #6
 80025e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025ea:	0182      	lsls	r2, r0, #6
 80025ec:	1a12      	subs	r2, r2, r0
 80025ee:	eb63 0301 	sbc.w	r3, r3, r1
 80025f2:	f04f 0000 	mov.w	r0, #0
 80025f6:	f04f 0100 	mov.w	r1, #0
 80025fa:	00d9      	lsls	r1, r3, #3
 80025fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002600:	00d0      	lsls	r0, r2, #3
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	1912      	adds	r2, r2, r4
 8002608:	eb45 0303 	adc.w	r3, r5, r3
 800260c:	f04f 0000 	mov.w	r0, #0
 8002610:	f04f 0100 	mov.w	r1, #0
 8002614:	0299      	lsls	r1, r3, #10
 8002616:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800261a:	0290      	lsls	r0, r2, #10
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4610      	mov	r0, r2
 8002622:	4619      	mov	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	461a      	mov	r2, r3
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	f7fd fe30 	bl	8000290 <__aeabi_uldivmod>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4613      	mov	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_RCC_GetSysClockFreq+0x160>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	0c1b      	lsrs	r3, r3, #16
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	3301      	adds	r3, #1
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002650:	60bb      	str	r3, [r7, #8]
      break;
 8002652:	e002      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <HAL_RCC_GetSysClockFreq+0x164>)
 8002656:	60bb      	str	r3, [r7, #8]
      break;
 8002658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800265a:	68bb      	ldr	r3, [r7, #8]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bdb0      	pop	{r4, r5, r7, pc}
 8002664:	40023800 	.word	0x40023800
 8002668:	00f42400 	.word	0x00f42400
 800266c:	017d7840 	.word	0x017d7840

08002670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <HAL_RCC_GetHCLKFreq+0x14>)
 8002676:	681b      	ldr	r3, [r3, #0]
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	20000000 	.word	0x20000000

08002688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800268c:	f7ff fff0 	bl	8002670 <HAL_RCC_GetHCLKFreq>
 8002690:	4602      	mov	r2, r0
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	0a9b      	lsrs	r3, r3, #10
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	4903      	ldr	r1, [pc, #12]	; (80026ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800269e:	5ccb      	ldrb	r3, [r1, r3]
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40023800 	.word	0x40023800
 80026ac:	08008598 	.word	0x08008598

080026b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026b4:	f7ff ffdc 	bl	8002670 <HAL_RCC_GetHCLKFreq>
 80026b8:	4602      	mov	r2, r0
 80026ba:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	0b5b      	lsrs	r3, r3, #13
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	4903      	ldr	r1, [pc, #12]	; (80026d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026c6:	5ccb      	ldrb	r3, [r1, r3]
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40023800 	.word	0x40023800
 80026d4:	08008598 	.word	0x08008598

080026d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	220f      	movs	r2, #15
 80026e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_RCC_GetClockConfig+0x5c>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0203 	and.w	r2, r3, #3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026f4:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <HAL_RCC_GetClockConfig+0x5c>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <HAL_RCC_GetClockConfig+0x5c>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_RCC_GetClockConfig+0x5c>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	08db      	lsrs	r3, r3, #3
 8002712:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800271a:	4b07      	ldr	r3, [pc, #28]	; (8002738 <HAL_RCC_GetClockConfig+0x60>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 020f 	and.w	r2, r3, #15
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	601a      	str	r2, [r3, #0]
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800
 8002738:	40023c00 	.word	0x40023c00

0800273c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e041      	b.n	80027d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe fc12 	bl	8000f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3304      	adds	r3, #4
 8002778:	4619      	mov	r1, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f000 fbf4 	bl	8002f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d001      	beq.n	80027f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e04e      	b.n	8002892 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a23      	ldr	r2, [pc, #140]	; (80028a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d022      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281e:	d01d      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a1f      	ldr	r2, [pc, #124]	; (80028a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d018      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a1e      	ldr	r2, [pc, #120]	; (80028a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d013      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1c      	ldr	r2, [pc, #112]	; (80028ac <HAL_TIM_Base_Start_IT+0xd0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00e      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1b      	ldr	r2, [pc, #108]	; (80028b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d009      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a19      	ldr	r2, [pc, #100]	; (80028b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d004      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a18      	ldr	r2, [pc, #96]	; (80028b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d111      	bne.n	8002880 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b06      	cmp	r3, #6
 800286c:	d010      	beq.n	8002890 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0201 	orr.w	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287e:	e007      	b.n	8002890 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40010000 	.word	0x40010000
 80028a4:	40000400 	.word	0x40000400
 80028a8:	40000800 	.word	0x40000800
 80028ac:	40000c00 	.word	0x40000c00
 80028b0:	40010400 	.word	0x40010400
 80028b4:	40014000 	.word	0x40014000
 80028b8:	40001800 	.word	0x40001800

080028bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e041      	b.n	8002952 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f839 	bl	800295a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3304      	adds	r3, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f000 fb34 	bl	8002f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b02      	cmp	r3, #2
 8002982:	d122      	bne.n	80029ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b02      	cmp	r3, #2
 8002990:	d11b      	bne.n	80029ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f06f 0202 	mvn.w	r2, #2
 800299a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 faba 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 80029b6:	e005      	b.n	80029c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 faac 	bl	8002f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fabd 	bl	8002f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d122      	bne.n	8002a1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d11b      	bne.n	8002a1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f06f 0204 	mvn.w	r2, #4
 80029ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fa90 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 8002a0a:	e005      	b.n	8002a18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fa82 	bl	8002f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fa93 	bl	8002f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d122      	bne.n	8002a72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d11b      	bne.n	8002a72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f06f 0208 	mvn.w	r2, #8
 8002a42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2204      	movs	r2, #4
 8002a48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fa66 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 8002a5e:	e005      	b.n	8002a6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fa58 	bl	8002f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fa69 	bl	8002f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d122      	bne.n	8002ac6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b10      	cmp	r3, #16
 8002a8c:	d11b      	bne.n	8002ac6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f06f 0210 	mvn.w	r2, #16
 8002a96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2208      	movs	r2, #8
 8002a9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fa3c 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 8002ab2:	e005      	b.n	8002ac0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 fa2e 	bl	8002f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 fa3f 	bl	8002f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d10e      	bne.n	8002af2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f06f 0201 	mvn.w	r2, #1
 8002aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7fe fa09 	bl	8000f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afc:	2b80      	cmp	r3, #128	; 0x80
 8002afe:	d10e      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0a:	2b80      	cmp	r3, #128	; 0x80
 8002b0c:	d107      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fe27 	bl	800376c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	2b40      	cmp	r3, #64	; 0x40
 8002b2a:	d10e      	bne.n	8002b4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	2b40      	cmp	r3, #64	; 0x40
 8002b38:	d107      	bne.n	8002b4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fa04 	bl	8002f52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d10e      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	d107      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f06f 0220 	mvn.w	r2, #32
 8002b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 fdf1 	bl	8003758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e0ae      	b.n	8002cfc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	f200 809f 	bhi.w	8002cec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002bae:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb4:	08002be9 	.word	0x08002be9
 8002bb8:	08002ced 	.word	0x08002ced
 8002bbc:	08002ced 	.word	0x08002ced
 8002bc0:	08002ced 	.word	0x08002ced
 8002bc4:	08002c29 	.word	0x08002c29
 8002bc8:	08002ced 	.word	0x08002ced
 8002bcc:	08002ced 	.word	0x08002ced
 8002bd0:	08002ced 	.word	0x08002ced
 8002bd4:	08002c6b 	.word	0x08002c6b
 8002bd8:	08002ced 	.word	0x08002ced
 8002bdc:	08002ced 	.word	0x08002ced
 8002be0:	08002ced 	.word	0x08002ced
 8002be4:	08002cab 	.word	0x08002cab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fa5a 	bl	80030a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0208 	orr.w	r2, r2, #8
 8002c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0204 	bic.w	r2, r2, #4
 8002c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6999      	ldr	r1, [r3, #24]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	691a      	ldr	r2, [r3, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	619a      	str	r2, [r3, #24]
      break;
 8002c26:	e064      	b.n	8002cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 faaa 	bl	8003188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6999      	ldr	r1, [r3, #24]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	021a      	lsls	r2, r3, #8
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	619a      	str	r2, [r3, #24]
      break;
 8002c68:	e043      	b.n	8002cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 faff 	bl	8003274 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69da      	ldr	r2, [r3, #28]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0208 	orr.w	r2, r2, #8
 8002c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0204 	bic.w	r2, r2, #4
 8002c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69d9      	ldr	r1, [r3, #28]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	61da      	str	r2, [r3, #28]
      break;
 8002ca8:	e023      	b.n	8002cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fb53 	bl	800335c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69da      	ldr	r2, [r3, #28]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69da      	ldr	r2, [r3, #28]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69d9      	ldr	r1, [r3, #28]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	021a      	lsls	r2, r3, #8
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	61da      	str	r2, [r3, #28]
      break;
 8002cea:	e002      	b.n	8002cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	75fb      	strb	r3, [r7, #23]
      break;
 8002cf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_TIM_ConfigClockSource+0x1c>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e0b4      	b.n	8002e8a <HAL_TIM_ConfigClockSource+0x186>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d58:	d03e      	beq.n	8002dd8 <HAL_TIM_ConfigClockSource+0xd4>
 8002d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d5e:	f200 8087 	bhi.w	8002e70 <HAL_TIM_ConfigClockSource+0x16c>
 8002d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d66:	f000 8086 	beq.w	8002e76 <HAL_TIM_ConfigClockSource+0x172>
 8002d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6e:	d87f      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x16c>
 8002d70:	2b70      	cmp	r3, #112	; 0x70
 8002d72:	d01a      	beq.n	8002daa <HAL_TIM_ConfigClockSource+0xa6>
 8002d74:	2b70      	cmp	r3, #112	; 0x70
 8002d76:	d87b      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x16c>
 8002d78:	2b60      	cmp	r3, #96	; 0x60
 8002d7a:	d050      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0x11a>
 8002d7c:	2b60      	cmp	r3, #96	; 0x60
 8002d7e:	d877      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x16c>
 8002d80:	2b50      	cmp	r3, #80	; 0x50
 8002d82:	d03c      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0xfa>
 8002d84:	2b50      	cmp	r3, #80	; 0x50
 8002d86:	d873      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x16c>
 8002d88:	2b40      	cmp	r3, #64	; 0x40
 8002d8a:	d058      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x13a>
 8002d8c:	2b40      	cmp	r3, #64	; 0x40
 8002d8e:	d86f      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x16c>
 8002d90:	2b30      	cmp	r3, #48	; 0x30
 8002d92:	d064      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0x15a>
 8002d94:	2b30      	cmp	r3, #48	; 0x30
 8002d96:	d86b      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x16c>
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	d060      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0x15a>
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d867      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x16c>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d05c      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0x15a>
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	d05a      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0x15a>
 8002da8:	e062      	b.n	8002e70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6899      	ldr	r1, [r3, #8]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f000 fc30 	bl	800361e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	609a      	str	r2, [r3, #8]
      break;
 8002dd6:	e04f      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	6899      	ldr	r1, [r3, #8]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f000 fc19 	bl	800361e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dfa:	609a      	str	r2, [r3, #8]
      break;
 8002dfc:	e03c      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	6859      	ldr	r1, [r3, #4]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f000 fb8d 	bl	800352a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2150      	movs	r1, #80	; 0x50
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fbe6 	bl	80035e8 <TIM_ITRx_SetConfig>
      break;
 8002e1c:	e02c      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6859      	ldr	r1, [r3, #4]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f000 fbac 	bl	8003588 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2160      	movs	r1, #96	; 0x60
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fbd6 	bl	80035e8 <TIM_ITRx_SetConfig>
      break;
 8002e3c:	e01c      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6859      	ldr	r1, [r3, #4]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f000 fb6d 	bl	800352a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2140      	movs	r1, #64	; 0x40
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fbc6 	bl	80035e8 <TIM_ITRx_SetConfig>
      break;
 8002e5c:	e00c      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4619      	mov	r1, r3
 8002e68:	4610      	mov	r0, r2
 8002e6a:	f000 fbbd 	bl	80035e8 <TIM_ITRx_SetConfig>
      break;
 8002e6e:	e003      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
      break;
 8002e74:	e000      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_TIM_SlaveConfigSynchro+0x18>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e031      	b.n	8002f0e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002eba:	6839      	ldr	r1, [r7, #0]
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 faa3 	bl	8003408 <TIM_SlaveTimer_SetConfig>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d009      	beq.n	8002edc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e018      	b.n	8002f0e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eea:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002efa:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a40      	ldr	r2, [pc, #256]	; (800307c <TIM_Base_SetConfig+0x114>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d013      	beq.n	8002fa8 <TIM_Base_SetConfig+0x40>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f86:	d00f      	beq.n	8002fa8 <TIM_Base_SetConfig+0x40>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a3d      	ldr	r2, [pc, #244]	; (8003080 <TIM_Base_SetConfig+0x118>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00b      	beq.n	8002fa8 <TIM_Base_SetConfig+0x40>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a3c      	ldr	r2, [pc, #240]	; (8003084 <TIM_Base_SetConfig+0x11c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d007      	beq.n	8002fa8 <TIM_Base_SetConfig+0x40>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a3b      	ldr	r2, [pc, #236]	; (8003088 <TIM_Base_SetConfig+0x120>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d003      	beq.n	8002fa8 <TIM_Base_SetConfig+0x40>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a3a      	ldr	r2, [pc, #232]	; (800308c <TIM_Base_SetConfig+0x124>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d108      	bne.n	8002fba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a2f      	ldr	r2, [pc, #188]	; (800307c <TIM_Base_SetConfig+0x114>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d02b      	beq.n	800301a <TIM_Base_SetConfig+0xb2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc8:	d027      	beq.n	800301a <TIM_Base_SetConfig+0xb2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a2c      	ldr	r2, [pc, #176]	; (8003080 <TIM_Base_SetConfig+0x118>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d023      	beq.n	800301a <TIM_Base_SetConfig+0xb2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a2b      	ldr	r2, [pc, #172]	; (8003084 <TIM_Base_SetConfig+0x11c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d01f      	beq.n	800301a <TIM_Base_SetConfig+0xb2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a2a      	ldr	r2, [pc, #168]	; (8003088 <TIM_Base_SetConfig+0x120>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d01b      	beq.n	800301a <TIM_Base_SetConfig+0xb2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a29      	ldr	r2, [pc, #164]	; (800308c <TIM_Base_SetConfig+0x124>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d017      	beq.n	800301a <TIM_Base_SetConfig+0xb2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a28      	ldr	r2, [pc, #160]	; (8003090 <TIM_Base_SetConfig+0x128>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d013      	beq.n	800301a <TIM_Base_SetConfig+0xb2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a27      	ldr	r2, [pc, #156]	; (8003094 <TIM_Base_SetConfig+0x12c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00f      	beq.n	800301a <TIM_Base_SetConfig+0xb2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a26      	ldr	r2, [pc, #152]	; (8003098 <TIM_Base_SetConfig+0x130>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00b      	beq.n	800301a <TIM_Base_SetConfig+0xb2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a25      	ldr	r2, [pc, #148]	; (800309c <TIM_Base_SetConfig+0x134>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d007      	beq.n	800301a <TIM_Base_SetConfig+0xb2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a24      	ldr	r2, [pc, #144]	; (80030a0 <TIM_Base_SetConfig+0x138>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d003      	beq.n	800301a <TIM_Base_SetConfig+0xb2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a23      	ldr	r2, [pc, #140]	; (80030a4 <TIM_Base_SetConfig+0x13c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d108      	bne.n	800302c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a0a      	ldr	r2, [pc, #40]	; (800307c <TIM_Base_SetConfig+0x114>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d003      	beq.n	8003060 <TIM_Base_SetConfig+0xf8>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a0c      	ldr	r2, [pc, #48]	; (800308c <TIM_Base_SetConfig+0x124>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d103      	bne.n	8003068 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	615a      	str	r2, [r3, #20]
}
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40010000 	.word	0x40010000
 8003080:	40000400 	.word	0x40000400
 8003084:	40000800 	.word	0x40000800
 8003088:	40000c00 	.word	0x40000c00
 800308c:	40010400 	.word	0x40010400
 8003090:	40014000 	.word	0x40014000
 8003094:	40014400 	.word	0x40014400
 8003098:	40014800 	.word	0x40014800
 800309c:	40001800 	.word	0x40001800
 80030a0:	40001c00 	.word	0x40001c00
 80030a4:	40002000 	.word	0x40002000

080030a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f023 0201 	bic.w	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0303 	bic.w	r3, r3, #3
 80030de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f023 0302 	bic.w	r3, r3, #2
 80030f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a20      	ldr	r2, [pc, #128]	; (8003180 <TIM_OC1_SetConfig+0xd8>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d003      	beq.n	800310c <TIM_OC1_SetConfig+0x64>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a1f      	ldr	r2, [pc, #124]	; (8003184 <TIM_OC1_SetConfig+0xdc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d10c      	bne.n	8003126 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f023 0308 	bic.w	r3, r3, #8
 8003112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f023 0304 	bic.w	r3, r3, #4
 8003124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a15      	ldr	r2, [pc, #84]	; (8003180 <TIM_OC1_SetConfig+0xd8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d003      	beq.n	8003136 <TIM_OC1_SetConfig+0x8e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a14      	ldr	r2, [pc, #80]	; (8003184 <TIM_OC1_SetConfig+0xdc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d111      	bne.n	800315a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800313c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	621a      	str	r2, [r3, #32]
}
 8003174:	bf00      	nop
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	40010000 	.word	0x40010000
 8003184:	40010400 	.word	0x40010400

08003188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f023 0210 	bic.w	r2, r3, #16
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f023 0320 	bic.w	r3, r3, #32
 80031d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a22      	ldr	r2, [pc, #136]	; (800326c <TIM_OC2_SetConfig+0xe4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d003      	beq.n	80031f0 <TIM_OC2_SetConfig+0x68>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a21      	ldr	r2, [pc, #132]	; (8003270 <TIM_OC2_SetConfig+0xe8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d10d      	bne.n	800320c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800320a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a17      	ldr	r2, [pc, #92]	; (800326c <TIM_OC2_SetConfig+0xe4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_OC2_SetConfig+0x94>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a16      	ldr	r2, [pc, #88]	; (8003270 <TIM_OC2_SetConfig+0xe8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d113      	bne.n	8003244 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003222:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800322a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	621a      	str	r2, [r3, #32]
}
 800325e:	bf00      	nop
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40010000 	.word	0x40010000
 8003270:	40010400 	.word	0x40010400

08003274 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0303 	bic.w	r3, r3, #3
 80032aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a21      	ldr	r2, [pc, #132]	; (8003354 <TIM_OC3_SetConfig+0xe0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d003      	beq.n	80032da <TIM_OC3_SetConfig+0x66>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a20      	ldr	r2, [pc, #128]	; (8003358 <TIM_OC3_SetConfig+0xe4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d10d      	bne.n	80032f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a16      	ldr	r2, [pc, #88]	; (8003354 <TIM_OC3_SetConfig+0xe0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d003      	beq.n	8003306 <TIM_OC3_SetConfig+0x92>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a15      	ldr	r2, [pc, #84]	; (8003358 <TIM_OC3_SetConfig+0xe4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d113      	bne.n	800332e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800330c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	621a      	str	r2, [r3, #32]
}
 8003348:	bf00      	nop
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	40010000 	.word	0x40010000
 8003358:	40010400 	.word	0x40010400

0800335c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800338a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	031b      	lsls	r3, r3, #12
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <TIM_OC4_SetConfig+0xa4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d003      	beq.n	80033c4 <TIM_OC4_SetConfig+0x68>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a11      	ldr	r2, [pc, #68]	; (8003404 <TIM_OC4_SetConfig+0xa8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d109      	bne.n	80033d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	019b      	lsls	r3, r3, #6
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	621a      	str	r2, [r3, #32]
}
 80033f2:	bf00      	nop
 80033f4:	371c      	adds	r7, #28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40010000 	.word	0x40010000
 8003404:	40010400 	.word	0x40010400

08003408 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003424:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f023 0307 	bic.w	r3, r3, #7
 8003436:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b70      	cmp	r3, #112	; 0x70
 8003450:	d01a      	beq.n	8003488 <TIM_SlaveTimer_SetConfig+0x80>
 8003452:	2b70      	cmp	r3, #112	; 0x70
 8003454:	d860      	bhi.n	8003518 <TIM_SlaveTimer_SetConfig+0x110>
 8003456:	2b60      	cmp	r3, #96	; 0x60
 8003458:	d054      	beq.n	8003504 <TIM_SlaveTimer_SetConfig+0xfc>
 800345a:	2b60      	cmp	r3, #96	; 0x60
 800345c:	d85c      	bhi.n	8003518 <TIM_SlaveTimer_SetConfig+0x110>
 800345e:	2b50      	cmp	r3, #80	; 0x50
 8003460:	d046      	beq.n	80034f0 <TIM_SlaveTimer_SetConfig+0xe8>
 8003462:	2b50      	cmp	r3, #80	; 0x50
 8003464:	d858      	bhi.n	8003518 <TIM_SlaveTimer_SetConfig+0x110>
 8003466:	2b40      	cmp	r3, #64	; 0x40
 8003468:	d019      	beq.n	800349e <TIM_SlaveTimer_SetConfig+0x96>
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d854      	bhi.n	8003518 <TIM_SlaveTimer_SetConfig+0x110>
 800346e:	2b30      	cmp	r3, #48	; 0x30
 8003470:	d055      	beq.n	800351e <TIM_SlaveTimer_SetConfig+0x116>
 8003472:	2b30      	cmp	r3, #48	; 0x30
 8003474:	d850      	bhi.n	8003518 <TIM_SlaveTimer_SetConfig+0x110>
 8003476:	2b20      	cmp	r3, #32
 8003478:	d051      	beq.n	800351e <TIM_SlaveTimer_SetConfig+0x116>
 800347a:	2b20      	cmp	r3, #32
 800347c:	d84c      	bhi.n	8003518 <TIM_SlaveTimer_SetConfig+0x110>
 800347e:	2b00      	cmp	r3, #0
 8003480:	d04d      	beq.n	800351e <TIM_SlaveTimer_SetConfig+0x116>
 8003482:	2b10      	cmp	r3, #16
 8003484:	d04b      	beq.n	800351e <TIM_SlaveTimer_SetConfig+0x116>
 8003486:	e047      	b.n	8003518 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68d9      	ldr	r1, [r3, #12]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f000 f8c1 	bl	800361e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800349c:	e040      	b.n	8003520 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b05      	cmp	r3, #5
 80034a4:	d101      	bne.n	80034aa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e03b      	b.n	8003522 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6a1a      	ldr	r2, [r3, #32]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0201 	bic.w	r2, r2, #1
 80034c0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034d0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	621a      	str	r2, [r3, #32]
      break;
 80034ee:	e017      	b.n	8003520 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	6899      	ldr	r1, [r3, #8]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	461a      	mov	r2, r3
 80034fe:	f000 f814 	bl	800352a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003502:	e00d      	b.n	8003520 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	6899      	ldr	r1, [r3, #8]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	461a      	mov	r2, r3
 8003512:	f000 f839 	bl	8003588 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003516:	e003      	b.n	8003520 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	75fb      	strb	r3, [r7, #23]
      break;
 800351c:	e000      	b.n	8003520 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800351e:	bf00      	nop
  }

  return status;
 8003520:	7dfb      	ldrb	r3, [r7, #23]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800352a:	b480      	push	{r7}
 800352c:	b087      	sub	sp, #28
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f023 0201 	bic.w	r2, r3, #1
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003554:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f023 030a 	bic.w	r3, r3, #10
 8003566:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	621a      	str	r2, [r3, #32]
}
 800357c:	bf00      	nop
 800357e:	371c      	adds	r7, #28
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f023 0210 	bic.w	r2, r3, #16
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	031b      	lsls	r3, r3, #12
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	621a      	str	r2, [r3, #32]
}
 80035dc:	bf00      	nop
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	f043 0307 	orr.w	r3, r3, #7
 800360a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	609a      	str	r2, [r3, #8]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800361e:	b480      	push	{r7}
 8003620:	b087      	sub	sp, #28
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	607a      	str	r2, [r7, #4]
 800362a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003638:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	021a      	lsls	r2, r3, #8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	431a      	orrs	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	4313      	orrs	r3, r2
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	609a      	str	r2, [r3, #8]
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003674:	2302      	movs	r3, #2
 8003676:	e05a      	b.n	800372e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a21      	ldr	r2, [pc, #132]	; (800373c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d022      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c4:	d01d      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a1d      	ldr	r2, [pc, #116]	; (8003740 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d018      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1b      	ldr	r2, [pc, #108]	; (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d013      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1a      	ldr	r2, [pc, #104]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00e      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a18      	ldr	r2, [pc, #96]	; (800374c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d009      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a17      	ldr	r2, [pc, #92]	; (8003750 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d004      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a15      	ldr	r2, [pc, #84]	; (8003754 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d10c      	bne.n	800371c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	4313      	orrs	r3, r2
 8003712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40010000 	.word	0x40010000
 8003740:	40000400 	.word	0x40000400
 8003744:	40000800 	.word	0x40000800
 8003748:	40000c00 	.word	0x40000c00
 800374c:	40010400 	.word	0x40010400
 8003750:	40014000 	.word	0x40014000
 8003754:	40001800 	.word	0x40001800

08003758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e03f      	b.n	8003812 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d106      	bne.n	80037ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7fd fd1e 	bl	80011e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2224      	movs	r2, #36	; 0x24
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fddb 	bl	8004380 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695a      	ldr	r2, [r3, #20]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b08a      	sub	sp, #40	; 0x28
 800381e:	af02      	add	r7, sp, #8
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	603b      	str	r3, [r7, #0]
 8003826:	4613      	mov	r3, r2
 8003828:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b20      	cmp	r3, #32
 8003838:	d17c      	bne.n	8003934 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <HAL_UART_Transmit+0x2c>
 8003840:	88fb      	ldrh	r3, [r7, #6]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e075      	b.n	8003936 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_UART_Transmit+0x3e>
 8003854:	2302      	movs	r3, #2
 8003856:	e06e      	b.n	8003936 <HAL_UART_Transmit+0x11c>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2221      	movs	r2, #33	; 0x21
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800386e:	f7fd ff31 	bl	80016d4 <HAL_GetTick>
 8003872:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	88fa      	ldrh	r2, [r7, #6]
 8003878:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	88fa      	ldrh	r2, [r7, #6]
 800387e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003888:	d108      	bne.n	800389c <HAL_UART_Transmit+0x82>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d104      	bne.n	800389c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	61bb      	str	r3, [r7, #24]
 800389a:	e003      	b.n	80038a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038ac:	e02a      	b.n	8003904 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2200      	movs	r2, #0
 80038b6:	2180      	movs	r1, #128	; 0x80
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 fb1f 	bl	8003efc <UART_WaitOnFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e036      	b.n	8003936 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10b      	bne.n	80038e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	3302      	adds	r3, #2
 80038e2:	61bb      	str	r3, [r7, #24]
 80038e4:	e007      	b.n	80038f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	781a      	ldrb	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	3301      	adds	r3, #1
 80038f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1cf      	bne.n	80038ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2200      	movs	r2, #0
 8003916:	2140      	movs	r1, #64	; 0x40
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 faef 	bl	8003efc <UART_WaitOnFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e006      	b.n	8003936 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	e000      	b.n	8003936 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003934:	2302      	movs	r3, #2
  }
}
 8003936:	4618      	mov	r0, r3
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	4613      	mov	r3, r2
 800394a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b20      	cmp	r3, #32
 8003956:	d11d      	bne.n	8003994 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_UART_Receive_IT+0x26>
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e016      	b.n	8003996 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_UART_Receive_IT+0x38>
 8003972:	2302      	movs	r3, #2
 8003974:	e00f      	b.n	8003996 <HAL_UART_Receive_IT+0x58>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003984:	88fb      	ldrh	r3, [r7, #6]
 8003986:	461a      	mov	r2, r3
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 fb24 	bl	8003fd8 <UART_Start_Receive_IT>
 8003990:	4603      	mov	r3, r0
 8003992:	e000      	b.n	8003996 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003994:	2302      	movs	r3, #2
  }
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b0ba      	sub	sp, #232	; 0xe8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10f      	bne.n	8003a06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <HAL_UART_IRQHandler+0x66>
 80039f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fc03 	bl	800420a <UART_Receive_IT>
      return;
 8003a04:	e256      	b.n	8003eb4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 80de 	beq.w	8003bcc <HAL_UART_IRQHandler+0x22c>
 8003a10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d106      	bne.n	8003a2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 80d1 	beq.w	8003bcc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00b      	beq.n	8003a4e <HAL_UART_IRQHandler+0xae>
 8003a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d005      	beq.n	8003a4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f043 0201 	orr.w	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00b      	beq.n	8003a72 <HAL_UART_IRQHandler+0xd2>
 8003a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f043 0202 	orr.w	r2, r3, #2
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00b      	beq.n	8003a96 <HAL_UART_IRQHandler+0xf6>
 8003a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f043 0204 	orr.w	r2, r3, #4
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d011      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x126>
 8003aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d105      	bne.n	8003aba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f043 0208 	orr.w	r2, r3, #8
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 81ed 	beq.w	8003eaa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_UART_IRQHandler+0x14e>
 8003adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fb8e 	bl	800420a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d103      	bne.n	8003b1a <HAL_UART_IRQHandler+0x17a>
 8003b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d04f      	beq.n	8003bba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fa96 	bl	800404c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d141      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3314      	adds	r3, #20
 8003b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3314      	adds	r3, #20
 8003b56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1d9      	bne.n	8003b2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d013      	beq.n	8003baa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	4a7d      	ldr	r2, [pc, #500]	; (8003d7c <HAL_UART_IRQHandler+0x3dc>)
 8003b88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd ff22 	bl	80019d8 <HAL_DMA_Abort_IT>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d016      	beq.n	8003bc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba8:	e00e      	b.n	8003bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f990 	bl	8003ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb0:	e00a      	b.n	8003bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f98c 	bl	8003ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb8:	e006      	b.n	8003bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f988 	bl	8003ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003bc6:	e170      	b.n	8003eaa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc8:	bf00      	nop
    return;
 8003bca:	e16e      	b.n	8003eaa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	f040 814a 	bne.w	8003e6a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 8143 	beq.w	8003e6a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 813c 	beq.w	8003e6a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c12:	2b40      	cmp	r3, #64	; 0x40
 8003c14:	f040 80b4 	bne.w	8003d80 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 8140 	beq.w	8003eae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c36:	429a      	cmp	r2, r3
 8003c38:	f080 8139 	bcs.w	8003eae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c4e:	f000 8088 	beq.w	8003d62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c60:	e853 3f00 	ldrex	r3, [r3]
 8003c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c8e:	e841 2300 	strex	r3, r2, [r1]
 8003c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1d9      	bne.n	8003c52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3314      	adds	r3, #20
 8003ca4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003cae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3314      	adds	r3, #20
 8003cbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cce:	e841 2300 	strex	r3, r2, [r1]
 8003cd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003cd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1e1      	bne.n	8003c9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3314      	adds	r3, #20
 8003ce0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3314      	adds	r3, #20
 8003cfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d06:	e841 2300 	strex	r3, r2, [r1]
 8003d0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e3      	bne.n	8003cda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	330c      	adds	r3, #12
 8003d26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d32:	f023 0310 	bic.w	r3, r3, #16
 8003d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	330c      	adds	r3, #12
 8003d40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d44:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d4c:	e841 2300 	strex	r3, r2, [r1]
 8003d50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e3      	bne.n	8003d20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fd fdcb 	bl	80018f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	4619      	mov	r1, r3
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f8b6 	bl	8003ee4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d78:	e099      	b.n	8003eae <HAL_UART_IRQHandler+0x50e>
 8003d7a:	bf00      	nop
 8003d7c:	08004113 	.word	0x08004113
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 808b 	beq.w	8003eb2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003d9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8086 	beq.w	8003eb2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	330c      	adds	r3, #12
 8003dac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	330c      	adds	r3, #12
 8003dc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003dca:	647a      	str	r2, [r7, #68]	; 0x44
 8003dcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e3      	bne.n	8003da6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3314      	adds	r3, #20
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	e853 3f00 	ldrex	r3, [r3]
 8003dec:	623b      	str	r3, [r7, #32]
   return(result);
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3314      	adds	r3, #20
 8003dfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e02:	633a      	str	r2, [r7, #48]	; 0x30
 8003e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e3      	bne.n	8003dde <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	330c      	adds	r3, #12
 8003e2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	e853 3f00 	ldrex	r3, [r3]
 8003e32:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0310 	bic.w	r3, r3, #16
 8003e3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	330c      	adds	r3, #12
 8003e44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e48:	61fa      	str	r2, [r7, #28]
 8003e4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	69b9      	ldr	r1, [r7, #24]
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	617b      	str	r3, [r7, #20]
   return(result);
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e3      	bne.n	8003e24 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e60:	4619      	mov	r1, r3
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f83e 	bl	8003ee4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e68:	e023      	b.n	8003eb2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d009      	beq.n	8003e8a <HAL_UART_IRQHandler+0x4ea>
 8003e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f959 	bl	800413a <UART_Transmit_IT>
    return;
 8003e88:	e014      	b.n	8003eb4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00e      	beq.n	8003eb4 <HAL_UART_IRQHandler+0x514>
 8003e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f999 	bl	80041da <UART_EndTransmit_IT>
    return;
 8003ea8:	e004      	b.n	8003eb4 <HAL_UART_IRQHandler+0x514>
    return;
 8003eaa:	bf00      	nop
 8003eac:	e002      	b.n	8003eb4 <HAL_UART_IRQHandler+0x514>
      return;
 8003eae:	bf00      	nop
 8003eb0:	e000      	b.n	8003eb4 <HAL_UART_IRQHandler+0x514>
      return;
 8003eb2:	bf00      	nop
  }
}
 8003eb4:	37e8      	adds	r7, #232	; 0xe8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop

08003ebc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b090      	sub	sp, #64	; 0x40
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f0c:	e050      	b.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f14:	d04c      	beq.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d007      	beq.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f1c:	f7fd fbda 	bl	80016d4 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d241      	bcs.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	330c      	adds	r3, #12
 8003f4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f4c:	637a      	str	r2, [r7, #52]	; 0x34
 8003f4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e5      	bne.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3314      	adds	r3, #20
 8003f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	e853 3f00 	ldrex	r3, [r3]
 8003f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f023 0301 	bic.w	r3, r3, #1
 8003f76:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3314      	adds	r3, #20
 8003f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f80:	623a      	str	r2, [r7, #32]
 8003f82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	69f9      	ldr	r1, [r7, #28]
 8003f86:	6a3a      	ldr	r2, [r7, #32]
 8003f88:	e841 2300 	strex	r3, r2, [r1]
 8003f8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e5      	bne.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e00f      	b.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	bf0c      	ite	eq
 8003fc0:	2301      	moveq	r3, #1
 8003fc2:	2300      	movne	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d09f      	beq.n	8003f0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3740      	adds	r7, #64	; 0x40
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	88fa      	ldrh	r2, [r7, #6]
 8003ff0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	88fa      	ldrh	r2, [r7, #6]
 8003ff6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2222      	movs	r2, #34	; 0x22
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800401c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695a      	ldr	r2, [r3, #20]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0201 	orr.w	r2, r2, #1
 800402c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0220 	orr.w	r2, r2, #32
 800403c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800404c:	b480      	push	{r7}
 800404e:	b095      	sub	sp, #84	; 0x54
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	330c      	adds	r3, #12
 800405a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405e:	e853 3f00 	ldrex	r3, [r3]
 8004062:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004066:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800406a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004074:	643a      	str	r2, [r7, #64]	; 0x40
 8004076:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800407a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800407c:	e841 2300 	strex	r3, r2, [r1]
 8004080:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e5      	bne.n	8004054 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3314      	adds	r3, #20
 800408e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	e853 3f00 	ldrex	r3, [r3]
 8004096:	61fb      	str	r3, [r7, #28]
   return(result);
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f023 0301 	bic.w	r3, r3, #1
 800409e:	64bb      	str	r3, [r7, #72]	; 0x48
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3314      	adds	r3, #20
 80040a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e5      	bne.n	8004088 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d119      	bne.n	80040f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	330c      	adds	r3, #12
 80040ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f023 0310 	bic.w	r3, r3, #16
 80040da:	647b      	str	r3, [r7, #68]	; 0x44
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	330c      	adds	r3, #12
 80040e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040e4:	61ba      	str	r2, [r7, #24]
 80040e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6979      	ldr	r1, [r7, #20]
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	613b      	str	r3, [r7, #16]
   return(result);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e5      	bne.n	80040c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004106:	bf00      	nop
 8004108:	3754      	adds	r7, #84	; 0x54
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f7ff fecf 	bl	8003ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004132:	bf00      	nop
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b21      	cmp	r3, #33	; 0x21
 800414c:	d13e      	bne.n	80041cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004156:	d114      	bne.n	8004182 <UART_Transmit_IT+0x48>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d110      	bne.n	8004182 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004174:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	1c9a      	adds	r2, r3, #2
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	621a      	str	r2, [r3, #32]
 8004180:	e008      	b.n	8004194 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	1c59      	adds	r1, r3, #1
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6211      	str	r1, [r2, #32]
 800418c:	781a      	ldrb	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29b      	uxth	r3, r3
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	4619      	mov	r1, r3
 80041a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10f      	bne.n	80041c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	e000      	b.n	80041ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041cc:	2302      	movs	r3, #2
  }
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff fe5e 	bl	8003ebc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b08c      	sub	sp, #48	; 0x30
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b22      	cmp	r3, #34	; 0x22
 800421c:	f040 80ab 	bne.w	8004376 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004228:	d117      	bne.n	800425a <UART_Receive_IT+0x50>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d113      	bne.n	800425a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004232:	2300      	movs	r3, #0
 8004234:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	b29b      	uxth	r3, r3
 8004244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004248:	b29a      	uxth	r2, r3
 800424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	1c9a      	adds	r2, r3, #2
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	629a      	str	r2, [r3, #40]	; 0x28
 8004258:	e026      	b.n	80042a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004260:	2300      	movs	r3, #0
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426c:	d007      	beq.n	800427e <UART_Receive_IT+0x74>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <UART_Receive_IT+0x82>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d106      	bne.n	800428c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	b2da      	uxtb	r2, r3
 8004286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004288:	701a      	strb	r2, [r3, #0]
 800428a:	e008      	b.n	800429e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004298:	b2da      	uxtb	r2, r3
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	4619      	mov	r1, r3
 80042b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d15a      	bne.n	8004372 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0220 	bic.w	r2, r2, #32
 80042ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695a      	ldr	r2, [r3, #20]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0201 	bic.w	r2, r2, #1
 80042ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d135      	bne.n	8004368 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	330c      	adds	r3, #12
 8004308:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	613b      	str	r3, [r7, #16]
   return(result);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f023 0310 	bic.w	r3, r3, #16
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	330c      	adds	r3, #12
 8004320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004322:	623a      	str	r2, [r7, #32]
 8004324:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004326:	69f9      	ldr	r1, [r7, #28]
 8004328:	6a3a      	ldr	r2, [r7, #32]
 800432a:	e841 2300 	strex	r3, r2, [r1]
 800432e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1e5      	bne.n	8004302 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	2b10      	cmp	r3, #16
 8004342:	d10a      	bne.n	800435a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004344:	2300      	movs	r3, #0
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800435e:	4619      	mov	r1, r3
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff fdbf 	bl	8003ee4 <HAL_UARTEx_RxEventCallback>
 8004366:	e002      	b.n	800436e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f002 ff8f 	bl	800728c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	e002      	b.n	8004378 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	e000      	b.n	8004378 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004376:	2302      	movs	r3, #2
  }
}
 8004378:	4618      	mov	r0, r3
 800437a:	3730      	adds	r7, #48	; 0x30
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004384:	b09f      	sub	sp, #124	; 0x7c
 8004386:	af00      	add	r7, sp, #0
 8004388:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800438a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004396:	68d9      	ldr	r1, [r3, #12]
 8004398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	ea40 0301 	orr.w	r3, r0, r1
 80043a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	431a      	orrs	r2, r3
 80043b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80043ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043c4:	f021 010c 	bic.w	r1, r1, #12
 80043c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043ce:	430b      	orrs	r3, r1
 80043d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043de:	6999      	ldr	r1, [r3, #24]
 80043e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	ea40 0301 	orr.w	r3, r0, r1
 80043e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4bc5      	ldr	r3, [pc, #788]	; (8004704 <UART_SetConfig+0x384>)
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d004      	beq.n	80043fe <UART_SetConfig+0x7e>
 80043f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	4bc3      	ldr	r3, [pc, #780]	; (8004708 <UART_SetConfig+0x388>)
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d103      	bne.n	8004406 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043fe:	f7fe f957 	bl	80026b0 <HAL_RCC_GetPCLK2Freq>
 8004402:	6778      	str	r0, [r7, #116]	; 0x74
 8004404:	e002      	b.n	800440c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004406:	f7fe f93f 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 800440a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800440c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004414:	f040 80b6 	bne.w	8004584 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800441a:	461c      	mov	r4, r3
 800441c:	f04f 0500 	mov.w	r5, #0
 8004420:	4622      	mov	r2, r4
 8004422:	462b      	mov	r3, r5
 8004424:	1891      	adds	r1, r2, r2
 8004426:	6439      	str	r1, [r7, #64]	; 0x40
 8004428:	415b      	adcs	r3, r3
 800442a:	647b      	str	r3, [r7, #68]	; 0x44
 800442c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004430:	1912      	adds	r2, r2, r4
 8004432:	eb45 0303 	adc.w	r3, r5, r3
 8004436:	f04f 0000 	mov.w	r0, #0
 800443a:	f04f 0100 	mov.w	r1, #0
 800443e:	00d9      	lsls	r1, r3, #3
 8004440:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004444:	00d0      	lsls	r0, r2, #3
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	1911      	adds	r1, r2, r4
 800444c:	6639      	str	r1, [r7, #96]	; 0x60
 800444e:	416b      	adcs	r3, r5
 8004450:	667b      	str	r3, [r7, #100]	; 0x64
 8004452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	461a      	mov	r2, r3
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	1891      	adds	r1, r2, r2
 800445e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004460:	415b      	adcs	r3, r3
 8004462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004464:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004468:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800446c:	f7fb ff10 	bl	8000290 <__aeabi_uldivmod>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4ba5      	ldr	r3, [pc, #660]	; (800470c <UART_SetConfig+0x38c>)
 8004476:	fba3 2302 	umull	r2, r3, r3, r2
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	011e      	lsls	r6, r3, #4
 800447e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004480:	461c      	mov	r4, r3
 8004482:	f04f 0500 	mov.w	r5, #0
 8004486:	4622      	mov	r2, r4
 8004488:	462b      	mov	r3, r5
 800448a:	1891      	adds	r1, r2, r2
 800448c:	6339      	str	r1, [r7, #48]	; 0x30
 800448e:	415b      	adcs	r3, r3
 8004490:	637b      	str	r3, [r7, #52]	; 0x34
 8004492:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004496:	1912      	adds	r2, r2, r4
 8004498:	eb45 0303 	adc.w	r3, r5, r3
 800449c:	f04f 0000 	mov.w	r0, #0
 80044a0:	f04f 0100 	mov.w	r1, #0
 80044a4:	00d9      	lsls	r1, r3, #3
 80044a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044aa:	00d0      	lsls	r0, r2, #3
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	1911      	adds	r1, r2, r4
 80044b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80044b4:	416b      	adcs	r3, r5
 80044b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	461a      	mov	r2, r3
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	1891      	adds	r1, r2, r2
 80044c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80044c6:	415b      	adcs	r3, r3
 80044c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80044d2:	f7fb fedd 	bl	8000290 <__aeabi_uldivmod>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4b8c      	ldr	r3, [pc, #560]	; (800470c <UART_SetConfig+0x38c>)
 80044dc:	fba3 1302 	umull	r1, r3, r3, r2
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	2164      	movs	r1, #100	; 0x64
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	3332      	adds	r3, #50	; 0x32
 80044ee:	4a87      	ldr	r2, [pc, #540]	; (800470c <UART_SetConfig+0x38c>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044fc:	441e      	add	r6, r3
 80044fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004500:	4618      	mov	r0, r3
 8004502:	f04f 0100 	mov.w	r1, #0
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	1894      	adds	r4, r2, r2
 800450c:	623c      	str	r4, [r7, #32]
 800450e:	415b      	adcs	r3, r3
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
 8004512:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004516:	1812      	adds	r2, r2, r0
 8004518:	eb41 0303 	adc.w	r3, r1, r3
 800451c:	f04f 0400 	mov.w	r4, #0
 8004520:	f04f 0500 	mov.w	r5, #0
 8004524:	00dd      	lsls	r5, r3, #3
 8004526:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800452a:	00d4      	lsls	r4, r2, #3
 800452c:	4622      	mov	r2, r4
 800452e:	462b      	mov	r3, r5
 8004530:	1814      	adds	r4, r2, r0
 8004532:	653c      	str	r4, [r7, #80]	; 0x50
 8004534:	414b      	adcs	r3, r1
 8004536:	657b      	str	r3, [r7, #84]	; 0x54
 8004538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	461a      	mov	r2, r3
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	1891      	adds	r1, r2, r2
 8004544:	61b9      	str	r1, [r7, #24]
 8004546:	415b      	adcs	r3, r3
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800454e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004552:	f7fb fe9d 	bl	8000290 <__aeabi_uldivmod>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4b6c      	ldr	r3, [pc, #432]	; (800470c <UART_SetConfig+0x38c>)
 800455c:	fba3 1302 	umull	r1, r3, r3, r2
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	2164      	movs	r1, #100	; 0x64
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	3332      	adds	r3, #50	; 0x32
 800456e:	4a67      	ldr	r2, [pc, #412]	; (800470c <UART_SetConfig+0x38c>)
 8004570:	fba2 2303 	umull	r2, r3, r2, r3
 8004574:	095b      	lsrs	r3, r3, #5
 8004576:	f003 0207 	and.w	r2, r3, #7
 800457a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4432      	add	r2, r6
 8004580:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004582:	e0b9      	b.n	80046f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004586:	461c      	mov	r4, r3
 8004588:	f04f 0500 	mov.w	r5, #0
 800458c:	4622      	mov	r2, r4
 800458e:	462b      	mov	r3, r5
 8004590:	1891      	adds	r1, r2, r2
 8004592:	6139      	str	r1, [r7, #16]
 8004594:	415b      	adcs	r3, r3
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800459c:	1912      	adds	r2, r2, r4
 800459e:	eb45 0303 	adc.w	r3, r5, r3
 80045a2:	f04f 0000 	mov.w	r0, #0
 80045a6:	f04f 0100 	mov.w	r1, #0
 80045aa:	00d9      	lsls	r1, r3, #3
 80045ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045b0:	00d0      	lsls	r0, r2, #3
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	eb12 0804 	adds.w	r8, r2, r4
 80045ba:	eb43 0905 	adc.w	r9, r3, r5
 80045be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f04f 0100 	mov.w	r1, #0
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	008b      	lsls	r3, r1, #2
 80045d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045d6:	0082      	lsls	r2, r0, #2
 80045d8:	4640      	mov	r0, r8
 80045da:	4649      	mov	r1, r9
 80045dc:	f7fb fe58 	bl	8000290 <__aeabi_uldivmod>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4b49      	ldr	r3, [pc, #292]	; (800470c <UART_SetConfig+0x38c>)
 80045e6:	fba3 2302 	umull	r2, r3, r3, r2
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	011e      	lsls	r6, r3, #4
 80045ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045f0:	4618      	mov	r0, r3
 80045f2:	f04f 0100 	mov.w	r1, #0
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	1894      	adds	r4, r2, r2
 80045fc:	60bc      	str	r4, [r7, #8]
 80045fe:	415b      	adcs	r3, r3
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004606:	1812      	adds	r2, r2, r0
 8004608:	eb41 0303 	adc.w	r3, r1, r3
 800460c:	f04f 0400 	mov.w	r4, #0
 8004610:	f04f 0500 	mov.w	r5, #0
 8004614:	00dd      	lsls	r5, r3, #3
 8004616:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800461a:	00d4      	lsls	r4, r2, #3
 800461c:	4622      	mov	r2, r4
 800461e:	462b      	mov	r3, r5
 8004620:	1814      	adds	r4, r2, r0
 8004622:	64bc      	str	r4, [r7, #72]	; 0x48
 8004624:	414b      	adcs	r3, r1
 8004626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	4618      	mov	r0, r3
 800462e:	f04f 0100 	mov.w	r1, #0
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	008b      	lsls	r3, r1, #2
 800463c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004640:	0082      	lsls	r2, r0, #2
 8004642:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004646:	f7fb fe23 	bl	8000290 <__aeabi_uldivmod>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4b2f      	ldr	r3, [pc, #188]	; (800470c <UART_SetConfig+0x38c>)
 8004650:	fba3 1302 	umull	r1, r3, r3, r2
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	2164      	movs	r1, #100	; 0x64
 8004658:	fb01 f303 	mul.w	r3, r1, r3
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	3332      	adds	r3, #50	; 0x32
 8004662:	4a2a      	ldr	r2, [pc, #168]	; (800470c <UART_SetConfig+0x38c>)
 8004664:	fba2 2303 	umull	r2, r3, r2, r3
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800466e:	441e      	add	r6, r3
 8004670:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004672:	4618      	mov	r0, r3
 8004674:	f04f 0100 	mov.w	r1, #0
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	1894      	adds	r4, r2, r2
 800467e:	603c      	str	r4, [r7, #0]
 8004680:	415b      	adcs	r3, r3
 8004682:	607b      	str	r3, [r7, #4]
 8004684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004688:	1812      	adds	r2, r2, r0
 800468a:	eb41 0303 	adc.w	r3, r1, r3
 800468e:	f04f 0400 	mov.w	r4, #0
 8004692:	f04f 0500 	mov.w	r5, #0
 8004696:	00dd      	lsls	r5, r3, #3
 8004698:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800469c:	00d4      	lsls	r4, r2, #3
 800469e:	4622      	mov	r2, r4
 80046a0:	462b      	mov	r3, r5
 80046a2:	eb12 0a00 	adds.w	sl, r2, r0
 80046a6:	eb43 0b01 	adc.w	fp, r3, r1
 80046aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f04f 0100 	mov.w	r1, #0
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	008b      	lsls	r3, r1, #2
 80046be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046c2:	0082      	lsls	r2, r0, #2
 80046c4:	4650      	mov	r0, sl
 80046c6:	4659      	mov	r1, fp
 80046c8:	f7fb fde2 	bl	8000290 <__aeabi_uldivmod>
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4b0e      	ldr	r3, [pc, #56]	; (800470c <UART_SetConfig+0x38c>)
 80046d2:	fba3 1302 	umull	r1, r3, r3, r2
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	2164      	movs	r1, #100	; 0x64
 80046da:	fb01 f303 	mul.w	r3, r1, r3
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	3332      	adds	r3, #50	; 0x32
 80046e4:	4a09      	ldr	r2, [pc, #36]	; (800470c <UART_SetConfig+0x38c>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	f003 020f 	and.w	r2, r3, #15
 80046f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4432      	add	r2, r6
 80046f6:	609a      	str	r2, [r3, #8]
}
 80046f8:	bf00      	nop
 80046fa:	377c      	adds	r7, #124	; 0x7c
 80046fc:	46bd      	mov	sp, r7
 80046fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004702:	bf00      	nop
 8004704:	40011000 	.word	0x40011000
 8004708:	40011400 	.word	0x40011400
 800470c:	51eb851f 	.word	0x51eb851f

08004710 <__NVIC_SetPriority>:
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	6039      	str	r1, [r7, #0]
 800471a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800471c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004720:	2b00      	cmp	r3, #0
 8004722:	db0a      	blt.n	800473a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	b2da      	uxtb	r2, r3
 8004728:	490c      	ldr	r1, [pc, #48]	; (800475c <__NVIC_SetPriority+0x4c>)
 800472a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472e:	0112      	lsls	r2, r2, #4
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	440b      	add	r3, r1
 8004734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004738:	e00a      	b.n	8004750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	b2da      	uxtb	r2, r3
 800473e:	4908      	ldr	r1, [pc, #32]	; (8004760 <__NVIC_SetPriority+0x50>)
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	3b04      	subs	r3, #4
 8004748:	0112      	lsls	r2, r2, #4
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	440b      	add	r3, r1
 800474e:	761a      	strb	r2, [r3, #24]
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	e000e100 	.word	0xe000e100
 8004760:	e000ed00 	.word	0xe000ed00

08004764 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <SysTick_Handler+0x1c>)
 800476a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800476c:	f001 fd28 	bl	80061c0 <xTaskGetSchedulerState>
 8004770:	4603      	mov	r3, r0
 8004772:	2b01      	cmp	r3, #1
 8004774:	d001      	beq.n	800477a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004776:	f002 fb0f 	bl	8006d98 <xPortSysTickHandler>
  }
}
 800477a:	bf00      	nop
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	e000e010 	.word	0xe000e010

08004784 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004788:	2100      	movs	r1, #0
 800478a:	f06f 0004 	mvn.w	r0, #4
 800478e:	f7ff ffbf 	bl	8004710 <__NVIC_SetPriority>
#endif
}
 8004792:	bf00      	nop
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800479e:	f3ef 8305 	mrs	r3, IPSR
 80047a2:	603b      	str	r3, [r7, #0]
  return(result);
 80047a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80047aa:	f06f 0305 	mvn.w	r3, #5
 80047ae:	607b      	str	r3, [r7, #4]
 80047b0:	e00c      	b.n	80047cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80047b2:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <osKernelInitialize+0x44>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d105      	bne.n	80047c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80047ba:	4b08      	ldr	r3, [pc, #32]	; (80047dc <osKernelInitialize+0x44>)
 80047bc:	2201      	movs	r2, #1
 80047be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	607b      	str	r3, [r7, #4]
 80047c4:	e002      	b.n	80047cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80047c6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80047cc:	687b      	ldr	r3, [r7, #4]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	200000b8 	.word	0x200000b8

080047e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047e6:	f3ef 8305 	mrs	r3, IPSR
 80047ea:	603b      	str	r3, [r7, #0]
  return(result);
 80047ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80047f2:	f06f 0305 	mvn.w	r3, #5
 80047f6:	607b      	str	r3, [r7, #4]
 80047f8:	e010      	b.n	800481c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80047fa:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <osKernelStart+0x48>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d109      	bne.n	8004816 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004802:	f7ff ffbf 	bl	8004784 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004806:	4b08      	ldr	r3, [pc, #32]	; (8004828 <osKernelStart+0x48>)
 8004808:	2202      	movs	r2, #2
 800480a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800480c:	f001 f87c 	bl	8005908 <vTaskStartScheduler>
      stat = osOK;
 8004810:	2300      	movs	r3, #0
 8004812:	607b      	str	r3, [r7, #4]
 8004814:	e002      	b.n	800481c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004816:	f04f 33ff 	mov.w	r3, #4294967295
 800481a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800481c:	687b      	ldr	r3, [r7, #4]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	200000b8 	.word	0x200000b8

0800482c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800482c:	b580      	push	{r7, lr}
 800482e:	b08e      	sub	sp, #56	; 0x38
 8004830:	af04      	add	r7, sp, #16
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004838:	2300      	movs	r3, #0
 800483a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800483c:	f3ef 8305 	mrs	r3, IPSR
 8004840:	617b      	str	r3, [r7, #20]
  return(result);
 8004842:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004844:	2b00      	cmp	r3, #0
 8004846:	d17e      	bne.n	8004946 <osThreadNew+0x11a>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d07b      	beq.n	8004946 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800484e:	2380      	movs	r3, #128	; 0x80
 8004850:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004852:	2318      	movs	r3, #24
 8004854:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004856:	2300      	movs	r3, #0
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800485a:	f04f 33ff 	mov.w	r3, #4294967295
 800485e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d045      	beq.n	80048f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <osThreadNew+0x48>
        name = attr->name;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <osThreadNew+0x6e>
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	2b38      	cmp	r3, #56	; 0x38
 800488c:	d805      	bhi.n	800489a <osThreadNew+0x6e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <osThreadNew+0x72>
        return (NULL);
 800489a:	2300      	movs	r3, #0
 800489c:	e054      	b.n	8004948 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	089b      	lsrs	r3, r3, #2
 80048ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00e      	beq.n	80048d4 <osThreadNew+0xa8>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	2bbb      	cmp	r3, #187	; 0xbb
 80048bc:	d90a      	bls.n	80048d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d006      	beq.n	80048d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <osThreadNew+0xa8>
        mem = 1;
 80048ce:	2301      	movs	r3, #1
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	e010      	b.n	80048f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10c      	bne.n	80048f6 <osThreadNew+0xca>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d108      	bne.n	80048f6 <osThreadNew+0xca>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d104      	bne.n	80048f6 <osThreadNew+0xca>
          mem = 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61bb      	str	r3, [r7, #24]
 80048f0:	e001      	b.n	80048f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d110      	bne.n	800491e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004904:	9202      	str	r2, [sp, #8]
 8004906:	9301      	str	r3, [sp, #4]
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	6a3a      	ldr	r2, [r7, #32]
 8004910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fe0c 	bl	8005530 <xTaskCreateStatic>
 8004918:	4603      	mov	r3, r0
 800491a:	613b      	str	r3, [r7, #16]
 800491c:	e013      	b.n	8004946 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d110      	bne.n	8004946 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	b29a      	uxth	r2, r3
 8004928:	f107 0310 	add.w	r3, r7, #16
 800492c:	9301      	str	r3, [sp, #4]
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 fe57 	bl	80055ea <xTaskCreate>
 800493c:	4603      	mov	r3, r0
 800493e:	2b01      	cmp	r3, #1
 8004940:	d001      	beq.n	8004946 <osThreadNew+0x11a>
            hTask = NULL;
 8004942:	2300      	movs	r3, #0
 8004944:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004946:	693b      	ldr	r3, [r7, #16]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3728      	adds	r7, #40	; 0x28
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004958:	f3ef 8305 	mrs	r3, IPSR
 800495c:	60bb      	str	r3, [r7, #8]
  return(result);
 800495e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <osDelay+0x1c>
    stat = osErrorISR;
 8004964:	f06f 0305 	mvn.w	r3, #5
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	e007      	b.n	800497c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 ff92 	bl	80058a0 <vTaskDelay>
    }
  }

  return (stat);
 800497c:	68fb      	ldr	r3, [r7, #12]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4a07      	ldr	r2, [pc, #28]	; (80049b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004998:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	4a06      	ldr	r2, [pc, #24]	; (80049b8 <vApplicationGetIdleTaskMemory+0x30>)
 800499e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2280      	movs	r2, #128	; 0x80
 80049a4:	601a      	str	r2, [r3, #0]
}
 80049a6:	bf00      	nop
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	200000bc 	.word	0x200000bc
 80049b8:	20000178 	.word	0x20000178

080049bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4a07      	ldr	r2, [pc, #28]	; (80049e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80049cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	4a06      	ldr	r2, [pc, #24]	; (80049ec <vApplicationGetTimerTaskMemory+0x30>)
 80049d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049da:	601a      	str	r2, [r3, #0]
}
 80049dc:	bf00      	nop
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	20000378 	.word	0x20000378
 80049ec:	20000434 	.word	0x20000434

080049f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f103 0208 	add.w	r2, r3, #8
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f04f 32ff 	mov.w	r2, #4294967295
 8004a08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f103 0208 	add.w	r2, r3, #8
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f103 0208 	add.w	r2, r3, #8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b085      	sub	sp, #20
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	601a      	str	r2, [r3, #0]
}
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a92:	b480      	push	{r7}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa8:	d103      	bne.n	8004ab2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	e00c      	b.n	8004acc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3308      	adds	r3, #8
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	e002      	b.n	8004ac0 <vListInsert+0x2e>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d2f6      	bcs.n	8004aba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	601a      	str	r2, [r3, #0]
}
 8004af8:	bf00      	nop
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6892      	ldr	r2, [r2, #8]
 8004b1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6852      	ldr	r2, [r2, #4]
 8004b24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d103      	bne.n	8004b38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	1e5a      	subs	r2, r3, #1
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b7e:	bf00      	nop
 8004b80:	e7fe      	b.n	8004b80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b82:	f002 f877 	bl	8006c74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8e:	68f9      	ldr	r1, [r7, #12]
 8004b90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b92:	fb01 f303 	mul.w	r3, r1, r3
 8004b96:	441a      	add	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	68f9      	ldr	r1, [r7, #12]
 8004bb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	441a      	add	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	22ff      	movs	r2, #255	; 0xff
 8004bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	22ff      	movs	r2, #255	; 0xff
 8004bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d114      	bne.n	8004c02 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01a      	beq.n	8004c16 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	3310      	adds	r3, #16
 8004be4:	4618      	mov	r0, r3
 8004be6:	f001 f929 	bl	8005e3c <xTaskRemoveFromEventList>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d012      	beq.n	8004c16 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <xQueueGenericReset+0xcc>)
 8004bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	e009      	b.n	8004c16 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3310      	adds	r3, #16
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff fef2 	bl	80049f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3324      	adds	r3, #36	; 0x24
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff feed 	bl	80049f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c16:	f002 f85d 	bl	8006cd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c1a:	2301      	movs	r3, #1
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	e000ed04 	.word	0xe000ed04

08004c28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08e      	sub	sp, #56	; 0x38
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c4e:	bf00      	nop
 8004c50:	e7fe      	b.n	8004c50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10a      	bne.n	8004c6e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c6a:	bf00      	nop
 8004c6c:	e7fe      	b.n	8004c6c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <xQueueGenericCreateStatic+0x52>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <xQueueGenericCreateStatic+0x56>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <xQueueGenericCreateStatic+0x58>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10a      	bne.n	8004c9a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	623b      	str	r3, [r7, #32]
}
 8004c96:	bf00      	nop
 8004c98:	e7fe      	b.n	8004c98 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <xQueueGenericCreateStatic+0x7e>
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <xQueueGenericCreateStatic+0x82>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <xQueueGenericCreateStatic+0x84>
 8004caa:	2300      	movs	r3, #0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	61fb      	str	r3, [r7, #28]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004cc6:	2350      	movs	r3, #80	; 0x50
 8004cc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2b50      	cmp	r3, #80	; 0x50
 8004cce:	d00a      	beq.n	8004ce6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	61bb      	str	r3, [r7, #24]
}
 8004ce2:	bf00      	nop
 8004ce4:	e7fe      	b.n	8004ce4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ce6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00d      	beq.n	8004d0e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cfa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	4613      	mov	r3, r2
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f805 	bl	8004d18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3730      	adds	r7, #48	; 0x30
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d103      	bne.n	8004d34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	e002      	b.n	8004d3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d46:	2101      	movs	r1, #1
 8004d48:	69b8      	ldr	r0, [r7, #24]
 8004d4a:	f7ff ff05 	bl	8004b58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d56:	bf00      	nop
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08e      	sub	sp, #56	; 0x38
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10a      	bne.n	8004d92 <xQueueGenericSend+0x32>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d8e:	bf00      	nop
 8004d90:	e7fe      	b.n	8004d90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d103      	bne.n	8004da0 <xQueueGenericSend+0x40>
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <xQueueGenericSend+0x44>
 8004da0:	2301      	movs	r3, #1
 8004da2:	e000      	b.n	8004da6 <xQueueGenericSend+0x46>
 8004da4:	2300      	movs	r3, #0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10a      	bne.n	8004dc0 <xQueueGenericSend+0x60>
	__asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004dbc:	bf00      	nop
 8004dbe:	e7fe      	b.n	8004dbe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d103      	bne.n	8004dce <xQueueGenericSend+0x6e>
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <xQueueGenericSend+0x72>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e000      	b.n	8004dd4 <xQueueGenericSend+0x74>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <xQueueGenericSend+0x8e>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	623b      	str	r3, [r7, #32]
}
 8004dea:	bf00      	nop
 8004dec:	e7fe      	b.n	8004dec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dee:	f001 f9e7 	bl	80061c0 <xTaskGetSchedulerState>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d102      	bne.n	8004dfe <xQueueGenericSend+0x9e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <xQueueGenericSend+0xa2>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <xQueueGenericSend+0xa4>
 8004e02:	2300      	movs	r3, #0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <xQueueGenericSend+0xbe>
	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	61fb      	str	r3, [r7, #28]
}
 8004e1a:	bf00      	nop
 8004e1c:	e7fe      	b.n	8004e1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e1e:	f001 ff29 	bl	8006c74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d302      	bcc.n	8004e34 <xQueueGenericSend+0xd4>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d129      	bne.n	8004e88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e3a:	f000 fa0b 	bl	8005254 <prvCopyDataToQueue>
 8004e3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d010      	beq.n	8004e6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4a:	3324      	adds	r3, #36	; 0x24
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fff5 	bl	8005e3c <xTaskRemoveFromEventList>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d013      	beq.n	8004e80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e58:	4b3f      	ldr	r3, [pc, #252]	; (8004f58 <xQueueGenericSend+0x1f8>)
 8004e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	e00a      	b.n	8004e80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d007      	beq.n	8004e80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e70:	4b39      	ldr	r3, [pc, #228]	; (8004f58 <xQueueGenericSend+0x1f8>)
 8004e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e80:	f001 ff28 	bl	8006cd4 <vPortExitCritical>
				return pdPASS;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e063      	b.n	8004f50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d103      	bne.n	8004e96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e8e:	f001 ff21 	bl	8006cd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	e05c      	b.n	8004f50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d106      	bne.n	8004eaa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e9c:	f107 0314 	add.w	r3, r7, #20
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f001 f82f 	bl	8005f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004eaa:	f001 ff13 	bl	8006cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004eae:	f000 fd9b 	bl	80059e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004eb2:	f001 fedf 	bl	8006c74 <vPortEnterCritical>
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ebc:	b25b      	sxtb	r3, r3
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec2:	d103      	bne.n	8004ecc <xQueueGenericSend+0x16c>
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ed2:	b25b      	sxtb	r3, r3
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d103      	bne.n	8004ee2 <xQueueGenericSend+0x182>
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ee2:	f001 fef7 	bl	8006cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ee6:	1d3a      	adds	r2, r7, #4
 8004ee8:	f107 0314 	add.w	r3, r7, #20
 8004eec:	4611      	mov	r1, r2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f001 f81e 	bl	8005f30 <xTaskCheckForTimeOut>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d124      	bne.n	8004f44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004efa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004efc:	f000 faa2 	bl	8005444 <prvIsQueueFull>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d018      	beq.n	8004f38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	3310      	adds	r3, #16
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 ff44 	bl	8005d9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f16:	f000 fa2d 	bl	8005374 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f1a:	f000 fd73 	bl	8005a04 <xTaskResumeAll>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f47f af7c 	bne.w	8004e1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004f26:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <xQueueGenericSend+0x1f8>)
 8004f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	e772      	b.n	8004e1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f3a:	f000 fa1b 	bl	8005374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f3e:	f000 fd61 	bl	8005a04 <xTaskResumeAll>
 8004f42:	e76c      	b.n	8004e1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f46:	f000 fa15 	bl	8005374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f4a:	f000 fd5b 	bl	8005a04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3738      	adds	r7, #56	; 0x38
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	e000ed04 	.word	0xe000ed04

08004f5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b090      	sub	sp, #64	; 0x40
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10a      	bne.n	8004f8a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f86:	bf00      	nop
 8004f88:	e7fe      	b.n	8004f88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d103      	bne.n	8004f98 <xQueueGenericSendFromISR+0x3c>
 8004f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <xQueueGenericSendFromISR+0x40>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e000      	b.n	8004f9e <xQueueGenericSendFromISR+0x42>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d103      	bne.n	8004fc6 <xQueueGenericSendFromISR+0x6a>
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <xQueueGenericSendFromISR+0x6e>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <xQueueGenericSendFromISR+0x70>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10a      	bne.n	8004fe6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	623b      	str	r3, [r7, #32]
}
 8004fe2:	bf00      	nop
 8004fe4:	e7fe      	b.n	8004fe4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fe6:	f001 ff27 	bl	8006e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004fea:	f3ef 8211 	mrs	r2, BASEPRI
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	61fa      	str	r2, [r7, #28]
 8005000:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005002:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005004:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800500a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500e:	429a      	cmp	r2, r3
 8005010:	d302      	bcc.n	8005018 <xQueueGenericSendFromISR+0xbc>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b02      	cmp	r3, #2
 8005016:	d12f      	bne.n	8005078 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800501e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800502e:	f000 f911 	bl	8005254 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005032:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503a:	d112      	bne.n	8005062 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800503c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	d016      	beq.n	8005072 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005046:	3324      	adds	r3, #36	; 0x24
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fef7 	bl	8005e3c <xTaskRemoveFromEventList>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00e      	beq.n	8005072 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00b      	beq.n	8005072 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	e007      	b.n	8005072 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005062:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005066:	3301      	adds	r3, #1
 8005068:	b2db      	uxtb	r3, r3
 800506a:	b25a      	sxtb	r2, r3
 800506c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005072:	2301      	movs	r3, #1
 8005074:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005076:	e001      	b.n	800507c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005078:	2300      	movs	r3, #0
 800507a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800507c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005086:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800508a:	4618      	mov	r0, r3
 800508c:	3740      	adds	r7, #64	; 0x40
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08c      	sub	sp, #48	; 0x30
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80050a0:	2300      	movs	r3, #0
 80050a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80050a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10a      	bne.n	80050c4 <xQueueReceive+0x30>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	623b      	str	r3, [r7, #32]
}
 80050c0:	bf00      	nop
 80050c2:	e7fe      	b.n	80050c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d103      	bne.n	80050d2 <xQueueReceive+0x3e>
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <xQueueReceive+0x42>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <xQueueReceive+0x44>
 80050d6:	2300      	movs	r3, #0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <xQueueReceive+0x5e>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	61fb      	str	r3, [r7, #28]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050f2:	f001 f865 	bl	80061c0 <xTaskGetSchedulerState>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d102      	bne.n	8005102 <xQueueReceive+0x6e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <xQueueReceive+0x72>
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <xQueueReceive+0x74>
 8005106:	2300      	movs	r3, #0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <xQueueReceive+0x8e>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	61bb      	str	r3, [r7, #24]
}
 800511e:	bf00      	nop
 8005120:	e7fe      	b.n	8005120 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005122:	f001 fda7 	bl	8006c74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	2b00      	cmp	r3, #0
 8005130:	d01f      	beq.n	8005172 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005136:	f000 f8f7 	bl	8005328 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	1e5a      	subs	r2, r3, #1
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00f      	beq.n	800516a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514c:	3310      	adds	r3, #16
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fe74 	bl	8005e3c <xTaskRemoveFromEventList>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d007      	beq.n	800516a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800515a:	4b3d      	ldr	r3, [pc, #244]	; (8005250 <xQueueReceive+0x1bc>)
 800515c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800516a:	f001 fdb3 	bl	8006cd4 <vPortExitCritical>
				return pdPASS;
 800516e:	2301      	movs	r3, #1
 8005170:	e069      	b.n	8005246 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d103      	bne.n	8005180 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005178:	f001 fdac 	bl	8006cd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800517c:	2300      	movs	r3, #0
 800517e:	e062      	b.n	8005246 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005182:	2b00      	cmp	r3, #0
 8005184:	d106      	bne.n	8005194 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005186:	f107 0310 	add.w	r3, r7, #16
 800518a:	4618      	mov	r0, r3
 800518c:	f000 feba 	bl	8005f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005190:	2301      	movs	r3, #1
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005194:	f001 fd9e 	bl	8006cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005198:	f000 fc26 	bl	80059e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800519c:	f001 fd6a 	bl	8006c74 <vPortEnterCritical>
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051a6:	b25b      	sxtb	r3, r3
 80051a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ac:	d103      	bne.n	80051b6 <xQueueReceive+0x122>
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051bc:	b25b      	sxtb	r3, r3
 80051be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c2:	d103      	bne.n	80051cc <xQueueReceive+0x138>
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051cc:	f001 fd82 	bl	8006cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051d0:	1d3a      	adds	r2, r7, #4
 80051d2:	f107 0310 	add.w	r3, r7, #16
 80051d6:	4611      	mov	r1, r2
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 fea9 	bl	8005f30 <xTaskCheckForTimeOut>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d123      	bne.n	800522c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051e6:	f000 f917 	bl	8005418 <prvIsQueueEmpty>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d017      	beq.n	8005220 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	3324      	adds	r3, #36	; 0x24
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	4611      	mov	r1, r2
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 fdcf 	bl	8005d9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005200:	f000 f8b8 	bl	8005374 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005204:	f000 fbfe 	bl	8005a04 <xTaskResumeAll>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d189      	bne.n	8005122 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800520e:	4b10      	ldr	r3, [pc, #64]	; (8005250 <xQueueReceive+0x1bc>)
 8005210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	e780      	b.n	8005122 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005222:	f000 f8a7 	bl	8005374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005226:	f000 fbed 	bl	8005a04 <xTaskResumeAll>
 800522a:	e77a      	b.n	8005122 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800522c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800522e:	f000 f8a1 	bl	8005374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005232:	f000 fbe7 	bl	8005a04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005238:	f000 f8ee 	bl	8005418 <prvIsQueueEmpty>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	f43f af6f 	beq.w	8005122 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005244:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005246:	4618      	mov	r0, r3
 8005248:	3730      	adds	r7, #48	; 0x30
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	e000ed04 	.word	0xe000ed04

08005254 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10d      	bne.n	800528e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d14d      	bne.n	8005316 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	4618      	mov	r0, r3
 8005280:	f000 ffbc 	bl	80061fc <xTaskPriorityDisinherit>
 8005284:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	609a      	str	r2, [r3, #8]
 800528c:	e043      	b.n	8005316 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d119      	bne.n	80052c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6858      	ldr	r0, [r3, #4]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	461a      	mov	r2, r3
 800529e:	68b9      	ldr	r1, [r7, #8]
 80052a0:	f002 f989 	bl	80075b6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	441a      	add	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d32b      	bcc.n	8005316 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	605a      	str	r2, [r3, #4]
 80052c6:	e026      	b.n	8005316 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	68d8      	ldr	r0, [r3, #12]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d0:	461a      	mov	r2, r3
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	f002 f96f 	bl	80075b6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	425b      	negs	r3, r3
 80052e2:	441a      	add	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d207      	bcs.n	8005304 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	425b      	negs	r3, r3
 80052fe:	441a      	add	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d105      	bne.n	8005316 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	3b01      	subs	r3, #1
 8005314:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800531e:	697b      	ldr	r3, [r7, #20]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	2b00      	cmp	r3, #0
 8005338:	d018      	beq.n	800536c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	441a      	add	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	429a      	cmp	r2, r3
 8005352:	d303      	bcc.n	800535c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68d9      	ldr	r1, [r3, #12]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	461a      	mov	r2, r3
 8005366:	6838      	ldr	r0, [r7, #0]
 8005368:	f002 f925 	bl	80075b6 <memcpy>
	}
}
 800536c:	bf00      	nop
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800537c:	f001 fc7a 	bl	8006c74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005386:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005388:	e011      	b.n	80053ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	2b00      	cmp	r3, #0
 8005390:	d012      	beq.n	80053b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	3324      	adds	r3, #36	; 0x24
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fd50 	bl	8005e3c <xTaskRemoveFromEventList>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80053a2:	f000 fe27 	bl	8005ff4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80053a6:	7bfb      	ldrb	r3, [r7, #15]
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	dce9      	bgt.n	800538a <prvUnlockQueue+0x16>
 80053b6:	e000      	b.n	80053ba <prvUnlockQueue+0x46>
					break;
 80053b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	22ff      	movs	r2, #255	; 0xff
 80053be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80053c2:	f001 fc87 	bl	8006cd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80053c6:	f001 fc55 	bl	8006c74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053d2:	e011      	b.n	80053f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d012      	beq.n	8005402 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3310      	adds	r3, #16
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 fd2b 	bl	8005e3c <xTaskRemoveFromEventList>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80053ec:	f000 fe02 	bl	8005ff4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80053f0:	7bbb      	ldrb	r3, [r7, #14]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	dce9      	bgt.n	80053d4 <prvUnlockQueue+0x60>
 8005400:	e000      	b.n	8005404 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005402:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	22ff      	movs	r2, #255	; 0xff
 8005408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800540c:	f001 fc62 	bl	8006cd4 <vPortExitCritical>
}
 8005410:	bf00      	nop
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005420:	f001 fc28 	bl	8006c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	2b00      	cmp	r3, #0
 800542a:	d102      	bne.n	8005432 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800542c:	2301      	movs	r3, #1
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	e001      	b.n	8005436 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005436:	f001 fc4d 	bl	8006cd4 <vPortExitCritical>

	return xReturn;
 800543a:	68fb      	ldr	r3, [r7, #12]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800544c:	f001 fc12 	bl	8006c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005458:	429a      	cmp	r2, r3
 800545a:	d102      	bne.n	8005462 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800545c:	2301      	movs	r3, #1
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	e001      	b.n	8005466 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005462:	2300      	movs	r3, #0
 8005464:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005466:	f001 fc35 	bl	8006cd4 <vPortExitCritical>

	return xReturn;
 800546a:	68fb      	ldr	r3, [r7, #12]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	e014      	b.n	80054ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005484:	4a0f      	ldr	r2, [pc, #60]	; (80054c4 <vQueueAddToRegistry+0x50>)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10b      	bne.n	80054a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005490:	490c      	ldr	r1, [pc, #48]	; (80054c4 <vQueueAddToRegistry+0x50>)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800549a:	4a0a      	ldr	r2, [pc, #40]	; (80054c4 <vQueueAddToRegistry+0x50>)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	4413      	add	r3, r2
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80054a6:	e006      	b.n	80054b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3301      	adds	r3, #1
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b07      	cmp	r3, #7
 80054b2:	d9e7      	bls.n	8005484 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80054b4:	bf00      	nop
 80054b6:	bf00      	nop
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	20004cd4 	.word	0x20004cd4

080054c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80054d8:	f001 fbcc 	bl	8006c74 <vPortEnterCritical>
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d103      	bne.n	80054f2 <vQueueWaitForMessageRestricted+0x2a>
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054f8:	b25b      	sxtb	r3, r3
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d103      	bne.n	8005508 <vQueueWaitForMessageRestricted+0x40>
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005508:	f001 fbe4 	bl	8006cd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	2b00      	cmp	r3, #0
 8005512:	d106      	bne.n	8005522 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	3324      	adds	r3, #36	; 0x24
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fc61 	bl	8005de4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005522:	6978      	ldr	r0, [r7, #20]
 8005524:	f7ff ff26 	bl	8005374 <prvUnlockQueue>
	}
 8005528:	bf00      	nop
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005530:	b580      	push	{r7, lr}
 8005532:	b08e      	sub	sp, #56	; 0x38
 8005534:	af04      	add	r7, sp, #16
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800553e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10a      	bne.n	800555a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	623b      	str	r3, [r7, #32]
}
 8005556:	bf00      	nop
 8005558:	e7fe      	b.n	8005558 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10a      	bne.n	8005576 <xTaskCreateStatic+0x46>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	61fb      	str	r3, [r7, #28]
}
 8005572:	bf00      	nop
 8005574:	e7fe      	b.n	8005574 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005576:	23bc      	movs	r3, #188	; 0xbc
 8005578:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	2bbc      	cmp	r3, #188	; 0xbc
 800557e:	d00a      	beq.n	8005596 <xTaskCreateStatic+0x66>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	61bb      	str	r3, [r7, #24]
}
 8005592:	bf00      	nop
 8005594:	e7fe      	b.n	8005594 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005596:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	2b00      	cmp	r3, #0
 800559c:	d01e      	beq.n	80055dc <xTaskCreateStatic+0xac>
 800559e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01b      	beq.n	80055dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	2202      	movs	r2, #2
 80055b2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80055b6:	2300      	movs	r3, #0
 80055b8:	9303      	str	r3, [sp, #12]
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	9302      	str	r3, [sp, #8]
 80055be:	f107 0314 	add.w	r3, r7, #20
 80055c2:	9301      	str	r3, [sp, #4]
 80055c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 f850 	bl	8005674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055d6:	f000 f8f3 	bl	80057c0 <prvAddNewTaskToReadyList>
 80055da:	e001      	b.n	80055e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80055e0:	697b      	ldr	r3, [r7, #20]
	}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3728      	adds	r7, #40	; 0x28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b08c      	sub	sp, #48	; 0x30
 80055ee:	af04      	add	r7, sp, #16
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	603b      	str	r3, [r7, #0]
 80055f6:	4613      	mov	r3, r2
 80055f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055fa:	88fb      	ldrh	r3, [r7, #6]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4618      	mov	r0, r3
 8005600:	f001 fc5a 	bl	8006eb8 <pvPortMalloc>
 8005604:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00e      	beq.n	800562a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800560c:	20bc      	movs	r0, #188	; 0xbc
 800560e:	f001 fc53 	bl	8006eb8 <pvPortMalloc>
 8005612:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	631a      	str	r2, [r3, #48]	; 0x30
 8005620:	e005      	b.n	800562e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005622:	6978      	ldr	r0, [r7, #20]
 8005624:	f001 fd14 	bl	8007050 <vPortFree>
 8005628:	e001      	b.n	800562e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d017      	beq.n	8005664 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800563c:	88fa      	ldrh	r2, [r7, #6]
 800563e:	2300      	movs	r3, #0
 8005640:	9303      	str	r3, [sp, #12]
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	9302      	str	r3, [sp, #8]
 8005646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005648:	9301      	str	r3, [sp, #4]
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68b9      	ldr	r1, [r7, #8]
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 f80e 	bl	8005674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005658:	69f8      	ldr	r0, [r7, #28]
 800565a:	f000 f8b1 	bl	80057c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800565e:	2301      	movs	r3, #1
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	e002      	b.n	800566a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005664:	f04f 33ff 	mov.w	r3, #4294967295
 8005668:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800566a:	69bb      	ldr	r3, [r7, #24]
	}
 800566c:	4618      	mov	r0, r3
 800566e:	3720      	adds	r7, #32
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b088      	sub	sp, #32
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	461a      	mov	r2, r3
 800568c:	21a5      	movs	r1, #165	; 0xa5
 800568e:	f001 ffa0 	bl	80075d2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800569c:	3b01      	subs	r3, #1
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	f023 0307 	bic.w	r3, r3, #7
 80056aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <prvInitialiseNewTask+0x58>
	__asm volatile
 80056b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	617b      	str	r3, [r7, #20]
}
 80056c8:	bf00      	nop
 80056ca:	e7fe      	b.n	80056ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d01f      	beq.n	8005712 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056d2:	2300      	movs	r3, #0
 80056d4:	61fb      	str	r3, [r7, #28]
 80056d6:	e012      	b.n	80056fe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	4413      	add	r3, r2
 80056de:	7819      	ldrb	r1, [r3, #0]
 80056e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	4413      	add	r3, r2
 80056e6:	3334      	adds	r3, #52	; 0x34
 80056e8:	460a      	mov	r2, r1
 80056ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	4413      	add	r3, r2
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d006      	beq.n	8005706 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	3301      	adds	r3, #1
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	2b0f      	cmp	r3, #15
 8005702:	d9e9      	bls.n	80056d8 <prvInitialiseNewTask+0x64>
 8005704:	e000      	b.n	8005708 <prvInitialiseNewTask+0x94>
			{
				break;
 8005706:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005710:	e003      	b.n	800571a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	2b37      	cmp	r3, #55	; 0x37
 800571e:	d901      	bls.n	8005724 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005720:	2337      	movs	r3, #55	; 0x37
 8005722:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005728:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800572e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005732:	2200      	movs	r2, #0
 8005734:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	3304      	adds	r3, #4
 800573a:	4618      	mov	r0, r3
 800573c:	f7ff f978 	bl	8004a30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005742:	3318      	adds	r3, #24
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff f973 	bl	8004a30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800574e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005752:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800575a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800575e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005762:	2200      	movs	r2, #0
 8005764:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576a:	2200      	movs	r2, #0
 800576c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	3354      	adds	r3, #84	; 0x54
 8005774:	2260      	movs	r2, #96	; 0x60
 8005776:	2100      	movs	r1, #0
 8005778:	4618      	mov	r0, r3
 800577a:	f001 ff2a 	bl	80075d2 <memset>
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	4a0c      	ldr	r2, [pc, #48]	; (80057b4 <prvInitialiseNewTask+0x140>)
 8005782:	659a      	str	r2, [r3, #88]	; 0x58
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	4a0c      	ldr	r2, [pc, #48]	; (80057b8 <prvInitialiseNewTask+0x144>)
 8005788:	65da      	str	r2, [r3, #92]	; 0x5c
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	4a0b      	ldr	r2, [pc, #44]	; (80057bc <prvInitialiseNewTask+0x148>)
 800578e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	68f9      	ldr	r1, [r7, #12]
 8005794:	69b8      	ldr	r0, [r7, #24]
 8005796:	f001 f941 	bl	8006a1c <pxPortInitialiseStack>
 800579a:	4602      	mov	r2, r0
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80057a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057ac:	bf00      	nop
 80057ae:	3720      	adds	r7, #32
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	080085c0 	.word	0x080085c0
 80057b8:	080085e0 	.word	0x080085e0
 80057bc:	080085a0 	.word	0x080085a0

080057c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80057c8:	f001 fa54 	bl	8006c74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80057cc:	4b2d      	ldr	r3, [pc, #180]	; (8005884 <prvAddNewTaskToReadyList+0xc4>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3301      	adds	r3, #1
 80057d2:	4a2c      	ldr	r2, [pc, #176]	; (8005884 <prvAddNewTaskToReadyList+0xc4>)
 80057d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80057d6:	4b2c      	ldr	r3, [pc, #176]	; (8005888 <prvAddNewTaskToReadyList+0xc8>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d109      	bne.n	80057f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80057de:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <prvAddNewTaskToReadyList+0xc8>)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057e4:	4b27      	ldr	r3, [pc, #156]	; (8005884 <prvAddNewTaskToReadyList+0xc4>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d110      	bne.n	800580e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057ec:	f000 fc26 	bl	800603c <prvInitialiseTaskLists>
 80057f0:	e00d      	b.n	800580e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057f2:	4b26      	ldr	r3, [pc, #152]	; (800588c <prvAddNewTaskToReadyList+0xcc>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d109      	bne.n	800580e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057fa:	4b23      	ldr	r3, [pc, #140]	; (8005888 <prvAddNewTaskToReadyList+0xc8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	429a      	cmp	r2, r3
 8005806:	d802      	bhi.n	800580e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005808:	4a1f      	ldr	r2, [pc, #124]	; (8005888 <prvAddNewTaskToReadyList+0xc8>)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800580e:	4b20      	ldr	r3, [pc, #128]	; (8005890 <prvAddNewTaskToReadyList+0xd0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3301      	adds	r3, #1
 8005814:	4a1e      	ldr	r2, [pc, #120]	; (8005890 <prvAddNewTaskToReadyList+0xd0>)
 8005816:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005818:	4b1d      	ldr	r3, [pc, #116]	; (8005890 <prvAddNewTaskToReadyList+0xd0>)
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005824:	4b1b      	ldr	r3, [pc, #108]	; (8005894 <prvAddNewTaskToReadyList+0xd4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d903      	bls.n	8005834 <prvAddNewTaskToReadyList+0x74>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	4a18      	ldr	r2, [pc, #96]	; (8005894 <prvAddNewTaskToReadyList+0xd4>)
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4a15      	ldr	r2, [pc, #84]	; (8005898 <prvAddNewTaskToReadyList+0xd8>)
 8005842:	441a      	add	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	3304      	adds	r3, #4
 8005848:	4619      	mov	r1, r3
 800584a:	4610      	mov	r0, r2
 800584c:	f7ff f8fd 	bl	8004a4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005850:	f001 fa40 	bl	8006cd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005854:	4b0d      	ldr	r3, [pc, #52]	; (800588c <prvAddNewTaskToReadyList+0xcc>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00e      	beq.n	800587a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800585c:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <prvAddNewTaskToReadyList+0xc8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	429a      	cmp	r2, r3
 8005868:	d207      	bcs.n	800587a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800586a:	4b0c      	ldr	r3, [pc, #48]	; (800589c <prvAddNewTaskToReadyList+0xdc>)
 800586c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800587a:	bf00      	nop
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	20000d08 	.word	0x20000d08
 8005888:	20000834 	.word	0x20000834
 800588c:	20000d14 	.word	0x20000d14
 8005890:	20000d24 	.word	0x20000d24
 8005894:	20000d10 	.word	0x20000d10
 8005898:	20000838 	.word	0x20000838
 800589c:	e000ed04 	.word	0xe000ed04

080058a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80058a8:	2300      	movs	r3, #0
 80058aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d017      	beq.n	80058e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80058b2:	4b13      	ldr	r3, [pc, #76]	; (8005900 <vTaskDelay+0x60>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <vTaskDelay+0x30>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	60bb      	str	r3, [r7, #8]
}
 80058cc:	bf00      	nop
 80058ce:	e7fe      	b.n	80058ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80058d0:	f000 f88a 	bl	80059e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80058d4:	2100      	movs	r1, #0
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fcfe 	bl	80062d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80058dc:	f000 f892 	bl	8005a04 <xTaskResumeAll>
 80058e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d107      	bne.n	80058f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80058e8:	4b06      	ldr	r3, [pc, #24]	; (8005904 <vTaskDelay+0x64>)
 80058ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058f8:	bf00      	nop
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	20000d30 	.word	0x20000d30
 8005904:	e000ed04 	.word	0xe000ed04

08005908 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08a      	sub	sp, #40	; 0x28
 800590c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800590e:	2300      	movs	r3, #0
 8005910:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005912:	2300      	movs	r3, #0
 8005914:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005916:	463a      	mov	r2, r7
 8005918:	1d39      	adds	r1, r7, #4
 800591a:	f107 0308 	add.w	r3, r7, #8
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff f832 	bl	8004988 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005924:	6839      	ldr	r1, [r7, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	9202      	str	r2, [sp, #8]
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	2300      	movs	r3, #0
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	2300      	movs	r3, #0
 8005934:	460a      	mov	r2, r1
 8005936:	4924      	ldr	r1, [pc, #144]	; (80059c8 <vTaskStartScheduler+0xc0>)
 8005938:	4824      	ldr	r0, [pc, #144]	; (80059cc <vTaskStartScheduler+0xc4>)
 800593a:	f7ff fdf9 	bl	8005530 <xTaskCreateStatic>
 800593e:	4603      	mov	r3, r0
 8005940:	4a23      	ldr	r2, [pc, #140]	; (80059d0 <vTaskStartScheduler+0xc8>)
 8005942:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005944:	4b22      	ldr	r3, [pc, #136]	; (80059d0 <vTaskStartScheduler+0xc8>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800594c:	2301      	movs	r3, #1
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	e001      	b.n	8005956 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005952:	2300      	movs	r3, #0
 8005954:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d102      	bne.n	8005962 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800595c:	f000 fd10 	bl	8006380 <xTimerCreateTimerTask>
 8005960:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d11b      	bne.n	80059a0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596c:	f383 8811 	msr	BASEPRI, r3
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	613b      	str	r3, [r7, #16]
}
 800597a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800597c:	4b15      	ldr	r3, [pc, #84]	; (80059d4 <vTaskStartScheduler+0xcc>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3354      	adds	r3, #84	; 0x54
 8005982:	4a15      	ldr	r2, [pc, #84]	; (80059d8 <vTaskStartScheduler+0xd0>)
 8005984:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005986:	4b15      	ldr	r3, [pc, #84]	; (80059dc <vTaskStartScheduler+0xd4>)
 8005988:	f04f 32ff 	mov.w	r2, #4294967295
 800598c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800598e:	4b14      	ldr	r3, [pc, #80]	; (80059e0 <vTaskStartScheduler+0xd8>)
 8005990:	2201      	movs	r2, #1
 8005992:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005994:	4b13      	ldr	r3, [pc, #76]	; (80059e4 <vTaskStartScheduler+0xdc>)
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800599a:	f001 f8c9 	bl	8006b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800599e:	e00e      	b.n	80059be <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a6:	d10a      	bne.n	80059be <vTaskStartScheduler+0xb6>
	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	60fb      	str	r3, [r7, #12]
}
 80059ba:	bf00      	nop
 80059bc:	e7fe      	b.n	80059bc <vTaskStartScheduler+0xb4>
}
 80059be:	bf00      	nop
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	080084c0 	.word	0x080084c0
 80059cc:	0800600d 	.word	0x0800600d
 80059d0:	20000d2c 	.word	0x20000d2c
 80059d4:	20000834 	.word	0x20000834
 80059d8:	20000010 	.word	0x20000010
 80059dc:	20000d28 	.word	0x20000d28
 80059e0:	20000d14 	.word	0x20000d14
 80059e4:	20000d0c 	.word	0x20000d0c

080059e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80059ec:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <vTaskSuspendAll+0x18>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3301      	adds	r3, #1
 80059f2:	4a03      	ldr	r2, [pc, #12]	; (8005a00 <vTaskSuspendAll+0x18>)
 80059f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80059f6:	bf00      	nop
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	20000d30 	.word	0x20000d30

08005a04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a12:	4b42      	ldr	r3, [pc, #264]	; (8005b1c <xTaskResumeAll+0x118>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10a      	bne.n	8005a30 <xTaskResumeAll+0x2c>
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	603b      	str	r3, [r7, #0]
}
 8005a2c:	bf00      	nop
 8005a2e:	e7fe      	b.n	8005a2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a30:	f001 f920 	bl	8006c74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a34:	4b39      	ldr	r3, [pc, #228]	; (8005b1c <xTaskResumeAll+0x118>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	4a38      	ldr	r2, [pc, #224]	; (8005b1c <xTaskResumeAll+0x118>)
 8005a3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a3e:	4b37      	ldr	r3, [pc, #220]	; (8005b1c <xTaskResumeAll+0x118>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d162      	bne.n	8005b0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a46:	4b36      	ldr	r3, [pc, #216]	; (8005b20 <xTaskResumeAll+0x11c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d05e      	beq.n	8005b0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a4e:	e02f      	b.n	8005ab0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a50:	4b34      	ldr	r3, [pc, #208]	; (8005b24 <xTaskResumeAll+0x120>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3318      	adds	r3, #24
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff f851 	bl	8004b04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3304      	adds	r3, #4
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff f84c 	bl	8004b04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a70:	4b2d      	ldr	r3, [pc, #180]	; (8005b28 <xTaskResumeAll+0x124>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d903      	bls.n	8005a80 <xTaskResumeAll+0x7c>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	4a2a      	ldr	r2, [pc, #168]	; (8005b28 <xTaskResumeAll+0x124>)
 8005a7e:	6013      	str	r3, [r2, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4a27      	ldr	r2, [pc, #156]	; (8005b2c <xTaskResumeAll+0x128>)
 8005a8e:	441a      	add	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3304      	adds	r3, #4
 8005a94:	4619      	mov	r1, r3
 8005a96:	4610      	mov	r0, r2
 8005a98:	f7fe ffd7 	bl	8004a4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa0:	4b23      	ldr	r3, [pc, #140]	; (8005b30 <xTaskResumeAll+0x12c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d302      	bcc.n	8005ab0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005aaa:	4b22      	ldr	r3, [pc, #136]	; (8005b34 <xTaskResumeAll+0x130>)
 8005aac:	2201      	movs	r2, #1
 8005aae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ab0:	4b1c      	ldr	r3, [pc, #112]	; (8005b24 <xTaskResumeAll+0x120>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1cb      	bne.n	8005a50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005abe:	f000 fb5f 	bl	8006180 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ac2:	4b1d      	ldr	r3, [pc, #116]	; (8005b38 <xTaskResumeAll+0x134>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d010      	beq.n	8005af0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ace:	f000 f847 	bl	8005b60 <xTaskIncrementTick>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005ad8:	4b16      	ldr	r3, [pc, #88]	; (8005b34 <xTaskResumeAll+0x130>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1f1      	bne.n	8005ace <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005aea:	4b13      	ldr	r3, [pc, #76]	; (8005b38 <xTaskResumeAll+0x134>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005af0:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <xTaskResumeAll+0x130>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d009      	beq.n	8005b0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005af8:	2301      	movs	r3, #1
 8005afa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005afc:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <xTaskResumeAll+0x138>)
 8005afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b0c:	f001 f8e2 	bl	8006cd4 <vPortExitCritical>

	return xAlreadyYielded;
 8005b10:	68bb      	ldr	r3, [r7, #8]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000d30 	.word	0x20000d30
 8005b20:	20000d08 	.word	0x20000d08
 8005b24:	20000cc8 	.word	0x20000cc8
 8005b28:	20000d10 	.word	0x20000d10
 8005b2c:	20000838 	.word	0x20000838
 8005b30:	20000834 	.word	0x20000834
 8005b34:	20000d1c 	.word	0x20000d1c
 8005b38:	20000d18 	.word	0x20000d18
 8005b3c:	e000ed04 	.word	0xe000ed04

08005b40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b46:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <xTaskGetTickCount+0x1c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b4c:	687b      	ldr	r3, [r7, #4]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	20000d0c 	.word	0x20000d0c

08005b60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b66:	2300      	movs	r3, #0
 8005b68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b6a:	4b4f      	ldr	r3, [pc, #316]	; (8005ca8 <xTaskIncrementTick+0x148>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f040 808f 	bne.w	8005c92 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b74:	4b4d      	ldr	r3, [pc, #308]	; (8005cac <xTaskIncrementTick+0x14c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b7c:	4a4b      	ldr	r2, [pc, #300]	; (8005cac <xTaskIncrementTick+0x14c>)
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d120      	bne.n	8005bca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b88:	4b49      	ldr	r3, [pc, #292]	; (8005cb0 <xTaskIncrementTick+0x150>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <xTaskIncrementTick+0x48>
	__asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	603b      	str	r3, [r7, #0]
}
 8005ba4:	bf00      	nop
 8005ba6:	e7fe      	b.n	8005ba6 <xTaskIncrementTick+0x46>
 8005ba8:	4b41      	ldr	r3, [pc, #260]	; (8005cb0 <xTaskIncrementTick+0x150>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	4b41      	ldr	r3, [pc, #260]	; (8005cb4 <xTaskIncrementTick+0x154>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a3f      	ldr	r2, [pc, #252]	; (8005cb0 <xTaskIncrementTick+0x150>)
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	4a3f      	ldr	r2, [pc, #252]	; (8005cb4 <xTaskIncrementTick+0x154>)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	4b3e      	ldr	r3, [pc, #248]	; (8005cb8 <xTaskIncrementTick+0x158>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	4a3d      	ldr	r2, [pc, #244]	; (8005cb8 <xTaskIncrementTick+0x158>)
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	f000 fadb 	bl	8006180 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005bca:	4b3c      	ldr	r3, [pc, #240]	; (8005cbc <xTaskIncrementTick+0x15c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d349      	bcc.n	8005c68 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bd4:	4b36      	ldr	r3, [pc, #216]	; (8005cb0 <xTaskIncrementTick+0x150>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d104      	bne.n	8005be8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bde:	4b37      	ldr	r3, [pc, #220]	; (8005cbc <xTaskIncrementTick+0x15c>)
 8005be0:	f04f 32ff 	mov.w	r2, #4294967295
 8005be4:	601a      	str	r2, [r3, #0]
					break;
 8005be6:	e03f      	b.n	8005c68 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005be8:	4b31      	ldr	r3, [pc, #196]	; (8005cb0 <xTaskIncrementTick+0x150>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d203      	bcs.n	8005c08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c00:	4a2e      	ldr	r2, [pc, #184]	; (8005cbc <xTaskIncrementTick+0x15c>)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c06:	e02f      	b.n	8005c68 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fe ff79 	bl	8004b04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d004      	beq.n	8005c24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	3318      	adds	r3, #24
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe ff70 	bl	8004b04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c28:	4b25      	ldr	r3, [pc, #148]	; (8005cc0 <xTaskIncrementTick+0x160>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d903      	bls.n	8005c38 <xTaskIncrementTick+0xd8>
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c34:	4a22      	ldr	r2, [pc, #136]	; (8005cc0 <xTaskIncrementTick+0x160>)
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4a1f      	ldr	r2, [pc, #124]	; (8005cc4 <xTaskIncrementTick+0x164>)
 8005c46:	441a      	add	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	f7fe fefb 	bl	8004a4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c58:	4b1b      	ldr	r3, [pc, #108]	; (8005cc8 <xTaskIncrementTick+0x168>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d3b8      	bcc.n	8005bd4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005c62:	2301      	movs	r3, #1
 8005c64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c66:	e7b5      	b.n	8005bd4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c68:	4b17      	ldr	r3, [pc, #92]	; (8005cc8 <xTaskIncrementTick+0x168>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6e:	4915      	ldr	r1, [pc, #84]	; (8005cc4 <xTaskIncrementTick+0x164>)
 8005c70:	4613      	mov	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	440b      	add	r3, r1
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d901      	bls.n	8005c84 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005c80:	2301      	movs	r3, #1
 8005c82:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005c84:	4b11      	ldr	r3, [pc, #68]	; (8005ccc <xTaskIncrementTick+0x16c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d007      	beq.n	8005c9c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	e004      	b.n	8005c9c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c92:	4b0f      	ldr	r3, [pc, #60]	; (8005cd0 <xTaskIncrementTick+0x170>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3301      	adds	r3, #1
 8005c98:	4a0d      	ldr	r2, [pc, #52]	; (8005cd0 <xTaskIncrementTick+0x170>)
 8005c9a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c9c:	697b      	ldr	r3, [r7, #20]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20000d30 	.word	0x20000d30
 8005cac:	20000d0c 	.word	0x20000d0c
 8005cb0:	20000cc0 	.word	0x20000cc0
 8005cb4:	20000cc4 	.word	0x20000cc4
 8005cb8:	20000d20 	.word	0x20000d20
 8005cbc:	20000d28 	.word	0x20000d28
 8005cc0:	20000d10 	.word	0x20000d10
 8005cc4:	20000838 	.word	0x20000838
 8005cc8:	20000834 	.word	0x20000834
 8005ccc:	20000d1c 	.word	0x20000d1c
 8005cd0:	20000d18 	.word	0x20000d18

08005cd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005cda:	4b2a      	ldr	r3, [pc, #168]	; (8005d84 <vTaskSwitchContext+0xb0>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ce2:	4b29      	ldr	r3, [pc, #164]	; (8005d88 <vTaskSwitchContext+0xb4>)
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ce8:	e046      	b.n	8005d78 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005cea:	4b27      	ldr	r3, [pc, #156]	; (8005d88 <vTaskSwitchContext+0xb4>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cf0:	4b26      	ldr	r3, [pc, #152]	; (8005d8c <vTaskSwitchContext+0xb8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	e010      	b.n	8005d1a <vTaskSwitchContext+0x46>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10a      	bne.n	8005d14 <vTaskSwitchContext+0x40>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	607b      	str	r3, [r7, #4]
}
 8005d10:	bf00      	nop
 8005d12:	e7fe      	b.n	8005d12 <vTaskSwitchContext+0x3e>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	491d      	ldr	r1, [pc, #116]	; (8005d90 <vTaskSwitchContext+0xbc>)
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	440b      	add	r3, r1
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0e4      	beq.n	8005cf8 <vTaskSwitchContext+0x24>
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <vTaskSwitchContext+0xbc>)
 8005d3a:	4413      	add	r3, r2
 8005d3c:	60bb      	str	r3, [r7, #8]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	605a      	str	r2, [r3, #4]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	3308      	adds	r3, #8
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d104      	bne.n	8005d5e <vTaskSwitchContext+0x8a>
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	605a      	str	r2, [r3, #4]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	4a0b      	ldr	r2, [pc, #44]	; (8005d94 <vTaskSwitchContext+0xc0>)
 8005d66:	6013      	str	r3, [r2, #0]
 8005d68:	4a08      	ldr	r2, [pc, #32]	; (8005d8c <vTaskSwitchContext+0xb8>)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d6e:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <vTaskSwitchContext+0xc0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3354      	adds	r3, #84	; 0x54
 8005d74:	4a08      	ldr	r2, [pc, #32]	; (8005d98 <vTaskSwitchContext+0xc4>)
 8005d76:	6013      	str	r3, [r2, #0]
}
 8005d78:	bf00      	nop
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	20000d30 	.word	0x20000d30
 8005d88:	20000d1c 	.word	0x20000d1c
 8005d8c:	20000d10 	.word	0x20000d10
 8005d90:	20000838 	.word	0x20000838
 8005d94:	20000834 	.word	0x20000834
 8005d98:	20000010 	.word	0x20000010

08005d9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	60fb      	str	r3, [r7, #12]
}
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005dc2:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <vTaskPlaceOnEventList+0x44>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3318      	adds	r3, #24
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fe fe61 	bl	8004a92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	6838      	ldr	r0, [r7, #0]
 8005dd4:	f000 fa80 	bl	80062d8 <prvAddCurrentTaskToDelayedList>
}
 8005dd8:	bf00      	nop
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	20000834 	.word	0x20000834

08005de4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10a      	bne.n	8005e0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	617b      	str	r3, [r7, #20]
}
 8005e08:	bf00      	nop
 8005e0a:	e7fe      	b.n	8005e0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <vTaskPlaceOnEventListRestricted+0x54>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3318      	adds	r3, #24
 8005e12:	4619      	mov	r1, r3
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7fe fe18 	bl	8004a4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005e20:	f04f 33ff 	mov.w	r3, #4294967295
 8005e24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	68b8      	ldr	r0, [r7, #8]
 8005e2a:	f000 fa55 	bl	80062d8 <prvAddCurrentTaskToDelayedList>
	}
 8005e2e:	bf00      	nop
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000834 	.word	0x20000834

08005e3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10a      	bne.n	8005e68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	60fb      	str	r3, [r7, #12]
}
 8005e64:	bf00      	nop
 8005e66:	e7fe      	b.n	8005e66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	3318      	adds	r3, #24
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fe fe49 	bl	8004b04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e72:	4b1e      	ldr	r3, [pc, #120]	; (8005eec <xTaskRemoveFromEventList+0xb0>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d11d      	bne.n	8005eb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fe fe40 	bl	8004b04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e88:	4b19      	ldr	r3, [pc, #100]	; (8005ef0 <xTaskRemoveFromEventList+0xb4>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d903      	bls.n	8005e98 <xTaskRemoveFromEventList+0x5c>
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e94:	4a16      	ldr	r2, [pc, #88]	; (8005ef0 <xTaskRemoveFromEventList+0xb4>)
 8005e96:	6013      	str	r3, [r2, #0]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4a13      	ldr	r2, [pc, #76]	; (8005ef4 <xTaskRemoveFromEventList+0xb8>)
 8005ea6:	441a      	add	r2, r3
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	4619      	mov	r1, r3
 8005eae:	4610      	mov	r0, r2
 8005eb0:	f7fe fdcb 	bl	8004a4a <vListInsertEnd>
 8005eb4:	e005      	b.n	8005ec2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	3318      	adds	r3, #24
 8005eba:	4619      	mov	r1, r3
 8005ebc:	480e      	ldr	r0, [pc, #56]	; (8005ef8 <xTaskRemoveFromEventList+0xbc>)
 8005ebe:	f7fe fdc4 	bl	8004a4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	; (8005efc <xTaskRemoveFromEventList+0xc0>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d905      	bls.n	8005edc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ed4:	4b0a      	ldr	r3, [pc, #40]	; (8005f00 <xTaskRemoveFromEventList+0xc4>)
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	e001      	b.n	8005ee0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005edc:	2300      	movs	r3, #0
 8005ede:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ee0:	697b      	ldr	r3, [r7, #20]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000d30 	.word	0x20000d30
 8005ef0:	20000d10 	.word	0x20000d10
 8005ef4:	20000838 	.word	0x20000838
 8005ef8:	20000cc8 	.word	0x20000cc8
 8005efc:	20000834 	.word	0x20000834
 8005f00:	20000d1c 	.word	0x20000d1c

08005f04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f0c:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <vTaskInternalSetTimeOutState+0x24>)
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f14:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <vTaskInternalSetTimeOutState+0x28>)
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	605a      	str	r2, [r3, #4]
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	20000d20 	.word	0x20000d20
 8005f2c:	20000d0c 	.word	0x20000d0c

08005f30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b088      	sub	sp, #32
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	613b      	str	r3, [r7, #16]
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10a      	bne.n	8005f72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	60fb      	str	r3, [r7, #12]
}
 8005f6e:	bf00      	nop
 8005f70:	e7fe      	b.n	8005f70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005f72:	f000 fe7f 	bl	8006c74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f76:	4b1d      	ldr	r3, [pc, #116]	; (8005fec <xTaskCheckForTimeOut+0xbc>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8e:	d102      	bne.n	8005f96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61fb      	str	r3, [r7, #28]
 8005f94:	e023      	b.n	8005fde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	4b15      	ldr	r3, [pc, #84]	; (8005ff0 <xTaskCheckForTimeOut+0xc0>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d007      	beq.n	8005fb2 <xTaskCheckForTimeOut+0x82>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d302      	bcc.n	8005fb2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005fac:	2301      	movs	r3, #1
 8005fae:	61fb      	str	r3, [r7, #28]
 8005fb0:	e015      	b.n	8005fde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d20b      	bcs.n	8005fd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	1ad2      	subs	r2, r2, r3
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff ff9b 	bl	8005f04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	61fb      	str	r3, [r7, #28]
 8005fd2:	e004      	b.n	8005fde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005fde:	f000 fe79 	bl	8006cd4 <vPortExitCritical>

	return xReturn;
 8005fe2:	69fb      	ldr	r3, [r7, #28]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3720      	adds	r7, #32
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	20000d0c 	.word	0x20000d0c
 8005ff0:	20000d20 	.word	0x20000d20

08005ff4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ff8:	4b03      	ldr	r3, [pc, #12]	; (8006008 <vTaskMissedYield+0x14>)
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	601a      	str	r2, [r3, #0]
}
 8005ffe:	bf00      	nop
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	20000d1c 	.word	0x20000d1c

0800600c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006014:	f000 f852 	bl	80060bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006018:	4b06      	ldr	r3, [pc, #24]	; (8006034 <prvIdleTask+0x28>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d9f9      	bls.n	8006014 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <prvIdleTask+0x2c>)
 8006022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006030:	e7f0      	b.n	8006014 <prvIdleTask+0x8>
 8006032:	bf00      	nop
 8006034:	20000838 	.word	0x20000838
 8006038:	e000ed04 	.word	0xe000ed04

0800603c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006042:	2300      	movs	r3, #0
 8006044:	607b      	str	r3, [r7, #4]
 8006046:	e00c      	b.n	8006062 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	4613      	mov	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4a12      	ldr	r2, [pc, #72]	; (800609c <prvInitialiseTaskLists+0x60>)
 8006054:	4413      	add	r3, r2
 8006056:	4618      	mov	r0, r3
 8006058:	f7fe fcca 	bl	80049f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3301      	adds	r3, #1
 8006060:	607b      	str	r3, [r7, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b37      	cmp	r3, #55	; 0x37
 8006066:	d9ef      	bls.n	8006048 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006068:	480d      	ldr	r0, [pc, #52]	; (80060a0 <prvInitialiseTaskLists+0x64>)
 800606a:	f7fe fcc1 	bl	80049f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800606e:	480d      	ldr	r0, [pc, #52]	; (80060a4 <prvInitialiseTaskLists+0x68>)
 8006070:	f7fe fcbe 	bl	80049f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006074:	480c      	ldr	r0, [pc, #48]	; (80060a8 <prvInitialiseTaskLists+0x6c>)
 8006076:	f7fe fcbb 	bl	80049f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800607a:	480c      	ldr	r0, [pc, #48]	; (80060ac <prvInitialiseTaskLists+0x70>)
 800607c:	f7fe fcb8 	bl	80049f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006080:	480b      	ldr	r0, [pc, #44]	; (80060b0 <prvInitialiseTaskLists+0x74>)
 8006082:	f7fe fcb5 	bl	80049f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006086:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <prvInitialiseTaskLists+0x78>)
 8006088:	4a05      	ldr	r2, [pc, #20]	; (80060a0 <prvInitialiseTaskLists+0x64>)
 800608a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800608c:	4b0a      	ldr	r3, [pc, #40]	; (80060b8 <prvInitialiseTaskLists+0x7c>)
 800608e:	4a05      	ldr	r2, [pc, #20]	; (80060a4 <prvInitialiseTaskLists+0x68>)
 8006090:	601a      	str	r2, [r3, #0]
}
 8006092:	bf00      	nop
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000838 	.word	0x20000838
 80060a0:	20000c98 	.word	0x20000c98
 80060a4:	20000cac 	.word	0x20000cac
 80060a8:	20000cc8 	.word	0x20000cc8
 80060ac:	20000cdc 	.word	0x20000cdc
 80060b0:	20000cf4 	.word	0x20000cf4
 80060b4:	20000cc0 	.word	0x20000cc0
 80060b8:	20000cc4 	.word	0x20000cc4

080060bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060c2:	e019      	b.n	80060f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060c4:	f000 fdd6 	bl	8006c74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060c8:	4b10      	ldr	r3, [pc, #64]	; (800610c <prvCheckTasksWaitingTermination+0x50>)
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fe fd15 	bl	8004b04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060da:	4b0d      	ldr	r3, [pc, #52]	; (8006110 <prvCheckTasksWaitingTermination+0x54>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3b01      	subs	r3, #1
 80060e0:	4a0b      	ldr	r2, [pc, #44]	; (8006110 <prvCheckTasksWaitingTermination+0x54>)
 80060e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80060e4:	4b0b      	ldr	r3, [pc, #44]	; (8006114 <prvCheckTasksWaitingTermination+0x58>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	4a0a      	ldr	r2, [pc, #40]	; (8006114 <prvCheckTasksWaitingTermination+0x58>)
 80060ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80060ee:	f000 fdf1 	bl	8006cd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f810 	bl	8006118 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060f8:	4b06      	ldr	r3, [pc, #24]	; (8006114 <prvCheckTasksWaitingTermination+0x58>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e1      	bne.n	80060c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000cdc 	.word	0x20000cdc
 8006110:	20000d08 	.word	0x20000d08
 8006114:	20000cf0 	.word	0x20000cf0

08006118 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	3354      	adds	r3, #84	; 0x54
 8006124:	4618      	mov	r0, r3
 8006126:	f001 fb53 	bl	80077d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006130:	2b00      	cmp	r3, #0
 8006132:	d108      	bne.n	8006146 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006138:	4618      	mov	r0, r3
 800613a:	f000 ff89 	bl	8007050 <vPortFree>
				vPortFree( pxTCB );
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 ff86 	bl	8007050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006144:	e018      	b.n	8006178 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800614c:	2b01      	cmp	r3, #1
 800614e:	d103      	bne.n	8006158 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 ff7d 	bl	8007050 <vPortFree>
	}
 8006156:	e00f      	b.n	8006178 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800615e:	2b02      	cmp	r3, #2
 8006160:	d00a      	beq.n	8006178 <prvDeleteTCB+0x60>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	60fb      	str	r3, [r7, #12]
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <prvDeleteTCB+0x5e>
	}
 8006178:	bf00      	nop
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006186:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <prvResetNextTaskUnblockTime+0x38>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d104      	bne.n	800619a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006190:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <prvResetNextTaskUnblockTime+0x3c>)
 8006192:	f04f 32ff 	mov.w	r2, #4294967295
 8006196:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006198:	e008      	b.n	80061ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800619a:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <prvResetNextTaskUnblockTime+0x38>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	4a04      	ldr	r2, [pc, #16]	; (80061bc <prvResetNextTaskUnblockTime+0x3c>)
 80061aa:	6013      	str	r3, [r2, #0]
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	20000cc0 	.word	0x20000cc0
 80061bc:	20000d28 	.word	0x20000d28

080061c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80061c6:	4b0b      	ldr	r3, [pc, #44]	; (80061f4 <xTaskGetSchedulerState+0x34>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d102      	bne.n	80061d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80061ce:	2301      	movs	r3, #1
 80061d0:	607b      	str	r3, [r7, #4]
 80061d2:	e008      	b.n	80061e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061d4:	4b08      	ldr	r3, [pc, #32]	; (80061f8 <xTaskGetSchedulerState+0x38>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d102      	bne.n	80061e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80061dc:	2302      	movs	r3, #2
 80061de:	607b      	str	r3, [r7, #4]
 80061e0:	e001      	b.n	80061e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80061e2:	2300      	movs	r3, #0
 80061e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80061e6:	687b      	ldr	r3, [r7, #4]
	}
 80061e8:	4618      	mov	r0, r3
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	20000d14 	.word	0x20000d14
 80061f8:	20000d30 	.word	0x20000d30

080061fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006208:	2300      	movs	r3, #0
 800620a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d056      	beq.n	80062c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006212:	4b2e      	ldr	r3, [pc, #184]	; (80062cc <xTaskPriorityDisinherit+0xd0>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	429a      	cmp	r2, r3
 800621a:	d00a      	beq.n	8006232 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	60fb      	str	r3, [r7, #12]
}
 800622e:	bf00      	nop
 8006230:	e7fe      	b.n	8006230 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10a      	bne.n	8006250 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	60bb      	str	r3, [r7, #8]
}
 800624c:	bf00      	nop
 800624e:	e7fe      	b.n	800624e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006254:	1e5a      	subs	r2, r3, #1
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006262:	429a      	cmp	r2, r3
 8006264:	d02c      	beq.n	80062c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626a:	2b00      	cmp	r3, #0
 800626c:	d128      	bne.n	80062c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	3304      	adds	r3, #4
 8006272:	4618      	mov	r0, r3
 8006274:	f7fe fc46 	bl	8004b04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006284:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006290:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <xTaskPriorityDisinherit+0xd4>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	429a      	cmp	r2, r3
 8006296:	d903      	bls.n	80062a0 <xTaskPriorityDisinherit+0xa4>
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	4a0c      	ldr	r2, [pc, #48]	; (80062d0 <xTaskPriorityDisinherit+0xd4>)
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a4:	4613      	mov	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4a09      	ldr	r2, [pc, #36]	; (80062d4 <xTaskPriorityDisinherit+0xd8>)
 80062ae:	441a      	add	r2, r3
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	3304      	adds	r3, #4
 80062b4:	4619      	mov	r1, r3
 80062b6:	4610      	mov	r0, r2
 80062b8:	f7fe fbc7 	bl	8004a4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80062bc:	2301      	movs	r3, #1
 80062be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80062c0:	697b      	ldr	r3, [r7, #20]
	}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20000834 	.word	0x20000834
 80062d0:	20000d10 	.word	0x20000d10
 80062d4:	20000838 	.word	0x20000838

080062d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062e2:	4b21      	ldr	r3, [pc, #132]	; (8006368 <prvAddCurrentTaskToDelayedList+0x90>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062e8:	4b20      	ldr	r3, [pc, #128]	; (800636c <prvAddCurrentTaskToDelayedList+0x94>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fe fc08 	bl	8004b04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fa:	d10a      	bne.n	8006312 <prvAddCurrentTaskToDelayedList+0x3a>
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d007      	beq.n	8006312 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006302:	4b1a      	ldr	r3, [pc, #104]	; (800636c <prvAddCurrentTaskToDelayedList+0x94>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3304      	adds	r3, #4
 8006308:	4619      	mov	r1, r3
 800630a:	4819      	ldr	r0, [pc, #100]	; (8006370 <prvAddCurrentTaskToDelayedList+0x98>)
 800630c:	f7fe fb9d 	bl	8004a4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006310:	e026      	b.n	8006360 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4413      	add	r3, r2
 8006318:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800631a:	4b14      	ldr	r3, [pc, #80]	; (800636c <prvAddCurrentTaskToDelayedList+0x94>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	429a      	cmp	r2, r3
 8006328:	d209      	bcs.n	800633e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800632a:	4b12      	ldr	r3, [pc, #72]	; (8006374 <prvAddCurrentTaskToDelayedList+0x9c>)
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	4b0f      	ldr	r3, [pc, #60]	; (800636c <prvAddCurrentTaskToDelayedList+0x94>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3304      	adds	r3, #4
 8006334:	4619      	mov	r1, r3
 8006336:	4610      	mov	r0, r2
 8006338:	f7fe fbab 	bl	8004a92 <vListInsert>
}
 800633c:	e010      	b.n	8006360 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800633e:	4b0e      	ldr	r3, [pc, #56]	; (8006378 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	4b0a      	ldr	r3, [pc, #40]	; (800636c <prvAddCurrentTaskToDelayedList+0x94>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3304      	adds	r3, #4
 8006348:	4619      	mov	r1, r3
 800634a:	4610      	mov	r0, r2
 800634c:	f7fe fba1 	bl	8004a92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006350:	4b0a      	ldr	r3, [pc, #40]	; (800637c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	429a      	cmp	r2, r3
 8006358:	d202      	bcs.n	8006360 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800635a:	4a08      	ldr	r2, [pc, #32]	; (800637c <prvAddCurrentTaskToDelayedList+0xa4>)
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	6013      	str	r3, [r2, #0]
}
 8006360:	bf00      	nop
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	20000d0c 	.word	0x20000d0c
 800636c:	20000834 	.word	0x20000834
 8006370:	20000cf4 	.word	0x20000cf4
 8006374:	20000cc4 	.word	0x20000cc4
 8006378:	20000cc0 	.word	0x20000cc0
 800637c:	20000d28 	.word	0x20000d28

08006380 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b08a      	sub	sp, #40	; 0x28
 8006384:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006386:	2300      	movs	r3, #0
 8006388:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800638a:	f000 fb07 	bl	800699c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800638e:	4b1c      	ldr	r3, [pc, #112]	; (8006400 <xTimerCreateTimerTask+0x80>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d021      	beq.n	80063da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006396:	2300      	movs	r3, #0
 8006398:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800639a:	2300      	movs	r3, #0
 800639c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800639e:	1d3a      	adds	r2, r7, #4
 80063a0:	f107 0108 	add.w	r1, r7, #8
 80063a4:	f107 030c 	add.w	r3, r7, #12
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7fe fb07 	bl	80049bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	9202      	str	r2, [sp, #8]
 80063b6:	9301      	str	r3, [sp, #4]
 80063b8:	2302      	movs	r3, #2
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	2300      	movs	r3, #0
 80063be:	460a      	mov	r2, r1
 80063c0:	4910      	ldr	r1, [pc, #64]	; (8006404 <xTimerCreateTimerTask+0x84>)
 80063c2:	4811      	ldr	r0, [pc, #68]	; (8006408 <xTimerCreateTimerTask+0x88>)
 80063c4:	f7ff f8b4 	bl	8005530 <xTaskCreateStatic>
 80063c8:	4603      	mov	r3, r0
 80063ca:	4a10      	ldr	r2, [pc, #64]	; (800640c <xTimerCreateTimerTask+0x8c>)
 80063cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80063ce:	4b0f      	ldr	r3, [pc, #60]	; (800640c <xTimerCreateTimerTask+0x8c>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80063d6:	2301      	movs	r3, #1
 80063d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10a      	bne.n	80063f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	613b      	str	r3, [r7, #16]
}
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80063f6:	697b      	ldr	r3, [r7, #20]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3718      	adds	r7, #24
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	20000d64 	.word	0x20000d64
 8006404:	080084c8 	.word	0x080084c8
 8006408:	08006545 	.word	0x08006545
 800640c:	20000d68 	.word	0x20000d68

08006410 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b08a      	sub	sp, #40	; 0x28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800641e:	2300      	movs	r3, #0
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	623b      	str	r3, [r7, #32]
}
 800643a:	bf00      	nop
 800643c:	e7fe      	b.n	800643c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800643e:	4b1a      	ldr	r3, [pc, #104]	; (80064a8 <xTimerGenericCommand+0x98>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d02a      	beq.n	800649c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2b05      	cmp	r3, #5
 8006456:	dc18      	bgt.n	800648a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006458:	f7ff feb2 	bl	80061c0 <xTaskGetSchedulerState>
 800645c:	4603      	mov	r3, r0
 800645e:	2b02      	cmp	r3, #2
 8006460:	d109      	bne.n	8006476 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006462:	4b11      	ldr	r3, [pc, #68]	; (80064a8 <xTimerGenericCommand+0x98>)
 8006464:	6818      	ldr	r0, [r3, #0]
 8006466:	f107 0110 	add.w	r1, r7, #16
 800646a:	2300      	movs	r3, #0
 800646c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800646e:	f7fe fc77 	bl	8004d60 <xQueueGenericSend>
 8006472:	6278      	str	r0, [r7, #36]	; 0x24
 8006474:	e012      	b.n	800649c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006476:	4b0c      	ldr	r3, [pc, #48]	; (80064a8 <xTimerGenericCommand+0x98>)
 8006478:	6818      	ldr	r0, [r3, #0]
 800647a:	f107 0110 	add.w	r1, r7, #16
 800647e:	2300      	movs	r3, #0
 8006480:	2200      	movs	r2, #0
 8006482:	f7fe fc6d 	bl	8004d60 <xQueueGenericSend>
 8006486:	6278      	str	r0, [r7, #36]	; 0x24
 8006488:	e008      	b.n	800649c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800648a:	4b07      	ldr	r3, [pc, #28]	; (80064a8 <xTimerGenericCommand+0x98>)
 800648c:	6818      	ldr	r0, [r3, #0]
 800648e:	f107 0110 	add.w	r1, r7, #16
 8006492:	2300      	movs	r3, #0
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	f7fe fd61 	bl	8004f5c <xQueueGenericSendFromISR>
 800649a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3728      	adds	r7, #40	; 0x28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20000d64 	.word	0x20000d64

080064ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064b6:	4b22      	ldr	r3, [pc, #136]	; (8006540 <prvProcessExpiredTimer+0x94>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	3304      	adds	r3, #4
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fe fb1d 	bl	8004b04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d022      	beq.n	800651e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	699a      	ldr	r2, [r3, #24]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	18d1      	adds	r1, r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	6978      	ldr	r0, [r7, #20]
 80064e6:	f000 f8d1 	bl	800668c <prvInsertTimerInActiveList>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d01f      	beq.n	8006530 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064f0:	2300      	movs	r3, #0
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	2300      	movs	r3, #0
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	2100      	movs	r1, #0
 80064fa:	6978      	ldr	r0, [r7, #20]
 80064fc:	f7ff ff88 	bl	8006410 <xTimerGenericCommand>
 8006500:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d113      	bne.n	8006530 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	60fb      	str	r3, [r7, #12]
}
 800651a:	bf00      	nop
 800651c:	e7fe      	b.n	800651c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006524:	f023 0301 	bic.w	r3, r3, #1
 8006528:	b2da      	uxtb	r2, r3
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	6978      	ldr	r0, [r7, #20]
 8006536:	4798      	blx	r3
}
 8006538:	bf00      	nop
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	20000d5c 	.word	0x20000d5c

08006544 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800654c:	f107 0308 	add.w	r3, r7, #8
 8006550:	4618      	mov	r0, r3
 8006552:	f000 f857 	bl	8006604 <prvGetNextExpireTime>
 8006556:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4619      	mov	r1, r3
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 f803 	bl	8006568 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006562:	f000 f8d5 	bl	8006710 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006566:	e7f1      	b.n	800654c <prvTimerTask+0x8>

08006568 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006572:	f7ff fa39 	bl	80059e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006576:	f107 0308 	add.w	r3, r7, #8
 800657a:	4618      	mov	r0, r3
 800657c:	f000 f866 	bl	800664c <prvSampleTimeNow>
 8006580:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d130      	bne.n	80065ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10a      	bne.n	80065a4 <prvProcessTimerOrBlockTask+0x3c>
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	429a      	cmp	r2, r3
 8006594:	d806      	bhi.n	80065a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006596:	f7ff fa35 	bl	8005a04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800659a:	68f9      	ldr	r1, [r7, #12]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7ff ff85 	bl	80064ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80065a2:	e024      	b.n	80065ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d008      	beq.n	80065bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80065aa:	4b13      	ldr	r3, [pc, #76]	; (80065f8 <prvProcessTimerOrBlockTask+0x90>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <prvProcessTimerOrBlockTask+0x50>
 80065b4:	2301      	movs	r3, #1
 80065b6:	e000      	b.n	80065ba <prvProcessTimerOrBlockTask+0x52>
 80065b8:	2300      	movs	r3, #0
 80065ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80065bc:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <prvProcessTimerOrBlockTask+0x94>)
 80065be:	6818      	ldr	r0, [r3, #0]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	4619      	mov	r1, r3
 80065ca:	f7fe ff7d 	bl	80054c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80065ce:	f7ff fa19 	bl	8005a04 <xTaskResumeAll>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10a      	bne.n	80065ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80065d8:	4b09      	ldr	r3, [pc, #36]	; (8006600 <prvProcessTimerOrBlockTask+0x98>)
 80065da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	f3bf 8f6f 	isb	sy
}
 80065e8:	e001      	b.n	80065ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80065ea:	f7ff fa0b 	bl	8005a04 <xTaskResumeAll>
}
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000d60 	.word	0x20000d60
 80065fc:	20000d64 	.word	0x20000d64
 8006600:	e000ed04 	.word	0xe000ed04

08006604 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800660c:	4b0e      	ldr	r3, [pc, #56]	; (8006648 <prvGetNextExpireTime+0x44>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <prvGetNextExpireTime+0x16>
 8006616:	2201      	movs	r2, #1
 8006618:	e000      	b.n	800661c <prvGetNextExpireTime+0x18>
 800661a:	2200      	movs	r2, #0
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d105      	bne.n	8006634 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006628:	4b07      	ldr	r3, [pc, #28]	; (8006648 <prvGetNextExpireTime+0x44>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	e001      	b.n	8006638 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006638:	68fb      	ldr	r3, [r7, #12]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	20000d5c 	.word	0x20000d5c

0800664c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006654:	f7ff fa74 	bl	8005b40 <xTaskGetTickCount>
 8006658:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800665a:	4b0b      	ldr	r3, [pc, #44]	; (8006688 <prvSampleTimeNow+0x3c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	429a      	cmp	r2, r3
 8006662:	d205      	bcs.n	8006670 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006664:	f000 f936 	bl	80068d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	e002      	b.n	8006676 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006676:	4a04      	ldr	r2, [pc, #16]	; (8006688 <prvSampleTimeNow+0x3c>)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800667c:	68fb      	ldr	r3, [r7, #12]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20000d6c 	.word	0x20000d6c

0800668c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800669a:	2300      	movs	r3, #0
 800669c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d812      	bhi.n	80066d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	1ad2      	subs	r2, r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d302      	bcc.n	80066c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80066c0:	2301      	movs	r3, #1
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	e01b      	b.n	80066fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80066c6:	4b10      	ldr	r3, [pc, #64]	; (8006708 <prvInsertTimerInActiveList+0x7c>)
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3304      	adds	r3, #4
 80066ce:	4619      	mov	r1, r3
 80066d0:	4610      	mov	r0, r2
 80066d2:	f7fe f9de 	bl	8004a92 <vListInsert>
 80066d6:	e012      	b.n	80066fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d206      	bcs.n	80066ee <prvInsertTimerInActiveList+0x62>
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d302      	bcc.n	80066ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80066e8:	2301      	movs	r3, #1
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	e007      	b.n	80066fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066ee:	4b07      	ldr	r3, [pc, #28]	; (800670c <prvInsertTimerInActiveList+0x80>)
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3304      	adds	r3, #4
 80066f6:	4619      	mov	r1, r3
 80066f8:	4610      	mov	r0, r2
 80066fa:	f7fe f9ca 	bl	8004a92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80066fe:	697b      	ldr	r3, [r7, #20]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3718      	adds	r7, #24
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	20000d60 	.word	0x20000d60
 800670c:	20000d5c 	.word	0x20000d5c

08006710 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b08e      	sub	sp, #56	; 0x38
 8006714:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006716:	e0ca      	b.n	80068ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	da18      	bge.n	8006750 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800671e:	1d3b      	adds	r3, r7, #4
 8006720:	3304      	adds	r3, #4
 8006722:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10a      	bne.n	8006740 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	61fb      	str	r3, [r7, #28]
}
 800673c:	bf00      	nop
 800673e:	e7fe      	b.n	800673e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006746:	6850      	ldr	r0, [r2, #4]
 8006748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800674a:	6892      	ldr	r2, [r2, #8]
 800674c:	4611      	mov	r1, r2
 800674e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	f2c0 80aa 	blt.w	80068ac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d004      	beq.n	800676e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006766:	3304      	adds	r3, #4
 8006768:	4618      	mov	r0, r3
 800676a:	f7fe f9cb 	bl	8004b04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800676e:	463b      	mov	r3, r7
 8006770:	4618      	mov	r0, r3
 8006772:	f7ff ff6b 	bl	800664c <prvSampleTimeNow>
 8006776:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b09      	cmp	r3, #9
 800677c:	f200 8097 	bhi.w	80068ae <prvProcessReceivedCommands+0x19e>
 8006780:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <prvProcessReceivedCommands+0x78>)
 8006782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006786:	bf00      	nop
 8006788:	080067b1 	.word	0x080067b1
 800678c:	080067b1 	.word	0x080067b1
 8006790:	080067b1 	.word	0x080067b1
 8006794:	08006825 	.word	0x08006825
 8006798:	08006839 	.word	0x08006839
 800679c:	08006883 	.word	0x08006883
 80067a0:	080067b1 	.word	0x080067b1
 80067a4:	080067b1 	.word	0x080067b1
 80067a8:	08006825 	.word	0x08006825
 80067ac:	08006839 	.word	0x08006839
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067b6:	f043 0301 	orr.w	r3, r3, #1
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	18d1      	adds	r1, r2, r3
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067d0:	f7ff ff5c 	bl	800668c <prvInsertTimerInActiveList>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d069      	beq.n	80068ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d05e      	beq.n	80068ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	441a      	add	r2, r3
 80067f8:	2300      	movs	r3, #0
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	2300      	movs	r3, #0
 80067fe:	2100      	movs	r1, #0
 8006800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006802:	f7ff fe05 	bl	8006410 <xTimerGenericCommand>
 8006806:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d14f      	bne.n	80068ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	61bb      	str	r3, [r7, #24]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006826:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800682a:	f023 0301 	bic.w	r3, r3, #1
 800682e:	b2da      	uxtb	r2, r3
 8006830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006832:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006836:	e03a      	b.n	80068ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800683e:	f043 0301 	orr.w	r3, r3, #1
 8006842:	b2da      	uxtb	r2, r3
 8006844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10a      	bne.n	800686e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	617b      	str	r3, [r7, #20]
}
 800686a:	bf00      	nop
 800686c:	e7fe      	b.n	800686c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006870:	699a      	ldr	r2, [r3, #24]
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	18d1      	adds	r1, r2, r3
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800687c:	f7ff ff06 	bl	800668c <prvInsertTimerInActiveList>
					break;
 8006880:	e015      	b.n	80068ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d103      	bne.n	8006898 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006892:	f000 fbdd 	bl	8007050 <vPortFree>
 8006896:	e00a      	b.n	80068ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800689e:	f023 0301 	bic.w	r3, r3, #1
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80068aa:	e000      	b.n	80068ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80068ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068ae:	4b08      	ldr	r3, [pc, #32]	; (80068d0 <prvProcessReceivedCommands+0x1c0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	1d39      	adds	r1, r7, #4
 80068b4:	2200      	movs	r2, #0
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fe fbec 	bl	8005094 <xQueueReceive>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f47f af2a 	bne.w	8006718 <prvProcessReceivedCommands+0x8>
	}
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop
 80068c8:	3730      	adds	r7, #48	; 0x30
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	20000d64 	.word	0x20000d64

080068d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068da:	e048      	b.n	800696e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068dc:	4b2d      	ldr	r3, [pc, #180]	; (8006994 <prvSwitchTimerLists+0xc0>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068e6:	4b2b      	ldr	r3, [pc, #172]	; (8006994 <prvSwitchTimerLists+0xc0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3304      	adds	r3, #4
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fe f905 	bl	8004b04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b00      	cmp	r3, #0
 800690e:	d02e      	beq.n	800696e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4413      	add	r3, r2
 8006918:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	429a      	cmp	r2, r3
 8006920:	d90e      	bls.n	8006940 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800692e:	4b19      	ldr	r3, [pc, #100]	; (8006994 <prvSwitchTimerLists+0xc0>)
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3304      	adds	r3, #4
 8006936:	4619      	mov	r1, r3
 8006938:	4610      	mov	r0, r2
 800693a:	f7fe f8aa 	bl	8004a92 <vListInsert>
 800693e:	e016      	b.n	800696e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006940:	2300      	movs	r3, #0
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	2300      	movs	r3, #0
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	2100      	movs	r1, #0
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f7ff fd60 	bl	8006410 <xTimerGenericCommand>
 8006950:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	603b      	str	r3, [r7, #0]
}
 800696a:	bf00      	nop
 800696c:	e7fe      	b.n	800696c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800696e:	4b09      	ldr	r3, [pc, #36]	; (8006994 <prvSwitchTimerLists+0xc0>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1b1      	bne.n	80068dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006978:	4b06      	ldr	r3, [pc, #24]	; (8006994 <prvSwitchTimerLists+0xc0>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800697e:	4b06      	ldr	r3, [pc, #24]	; (8006998 <prvSwitchTimerLists+0xc4>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a04      	ldr	r2, [pc, #16]	; (8006994 <prvSwitchTimerLists+0xc0>)
 8006984:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006986:	4a04      	ldr	r2, [pc, #16]	; (8006998 <prvSwitchTimerLists+0xc4>)
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	6013      	str	r3, [r2, #0]
}
 800698c:	bf00      	nop
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	20000d5c 	.word	0x20000d5c
 8006998:	20000d60 	.word	0x20000d60

0800699c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80069a2:	f000 f967 	bl	8006c74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80069a6:	4b15      	ldr	r3, [pc, #84]	; (80069fc <prvCheckForValidListAndQueue+0x60>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d120      	bne.n	80069f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80069ae:	4814      	ldr	r0, [pc, #80]	; (8006a00 <prvCheckForValidListAndQueue+0x64>)
 80069b0:	f7fe f81e 	bl	80049f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80069b4:	4813      	ldr	r0, [pc, #76]	; (8006a04 <prvCheckForValidListAndQueue+0x68>)
 80069b6:	f7fe f81b 	bl	80049f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80069ba:	4b13      	ldr	r3, [pc, #76]	; (8006a08 <prvCheckForValidListAndQueue+0x6c>)
 80069bc:	4a10      	ldr	r2, [pc, #64]	; (8006a00 <prvCheckForValidListAndQueue+0x64>)
 80069be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80069c0:	4b12      	ldr	r3, [pc, #72]	; (8006a0c <prvCheckForValidListAndQueue+0x70>)
 80069c2:	4a10      	ldr	r2, [pc, #64]	; (8006a04 <prvCheckForValidListAndQueue+0x68>)
 80069c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80069c6:	2300      	movs	r3, #0
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	4b11      	ldr	r3, [pc, #68]	; (8006a10 <prvCheckForValidListAndQueue+0x74>)
 80069cc:	4a11      	ldr	r2, [pc, #68]	; (8006a14 <prvCheckForValidListAndQueue+0x78>)
 80069ce:	2110      	movs	r1, #16
 80069d0:	200a      	movs	r0, #10
 80069d2:	f7fe f929 	bl	8004c28 <xQueueGenericCreateStatic>
 80069d6:	4603      	mov	r3, r0
 80069d8:	4a08      	ldr	r2, [pc, #32]	; (80069fc <prvCheckForValidListAndQueue+0x60>)
 80069da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80069dc:	4b07      	ldr	r3, [pc, #28]	; (80069fc <prvCheckForValidListAndQueue+0x60>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d005      	beq.n	80069f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80069e4:	4b05      	ldr	r3, [pc, #20]	; (80069fc <prvCheckForValidListAndQueue+0x60>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	490b      	ldr	r1, [pc, #44]	; (8006a18 <prvCheckForValidListAndQueue+0x7c>)
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fe fd42 	bl	8005474 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069f0:	f000 f970 	bl	8006cd4 <vPortExitCritical>
}
 80069f4:	bf00      	nop
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	20000d64 	.word	0x20000d64
 8006a00:	20000d34 	.word	0x20000d34
 8006a04:	20000d48 	.word	0x20000d48
 8006a08:	20000d5c 	.word	0x20000d5c
 8006a0c:	20000d60 	.word	0x20000d60
 8006a10:	20000e10 	.word	0x20000e10
 8006a14:	20000d70 	.word	0x20000d70
 8006a18:	080084d0 	.word	0x080084d0

08006a1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3b04      	subs	r3, #4
 8006a2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3b04      	subs	r3, #4
 8006a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f023 0201 	bic.w	r2, r3, #1
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	3b04      	subs	r3, #4
 8006a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a4c:	4a0c      	ldr	r2, [pc, #48]	; (8006a80 <pxPortInitialiseStack+0x64>)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3b14      	subs	r3, #20
 8006a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3b04      	subs	r3, #4
 8006a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f06f 0202 	mvn.w	r2, #2
 8006a6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	3b20      	subs	r3, #32
 8006a70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a72:	68fb      	ldr	r3, [r7, #12]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	08006a85 	.word	0x08006a85

08006a84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a8e:	4b12      	ldr	r3, [pc, #72]	; (8006ad8 <prvTaskExitError+0x54>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a96:	d00a      	beq.n	8006aae <prvTaskExitError+0x2a>
	__asm volatile
 8006a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	60fb      	str	r3, [r7, #12]
}
 8006aaa:	bf00      	nop
 8006aac:	e7fe      	b.n	8006aac <prvTaskExitError+0x28>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	60bb      	str	r3, [r7, #8]
}
 8006ac0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ac2:	bf00      	nop
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0fc      	beq.n	8006ac4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006aca:	bf00      	nop
 8006acc:	bf00      	nop
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	2000000c 	.word	0x2000000c
 8006adc:	00000000 	.word	0x00000000

08006ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ae0:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <pxCurrentTCBConst2>)
 8006ae2:	6819      	ldr	r1, [r3, #0]
 8006ae4:	6808      	ldr	r0, [r1, #0]
 8006ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aea:	f380 8809 	msr	PSP, r0
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f04f 0000 	mov.w	r0, #0
 8006af6:	f380 8811 	msr	BASEPRI, r0
 8006afa:	4770      	bx	lr
 8006afc:	f3af 8000 	nop.w

08006b00 <pxCurrentTCBConst2>:
 8006b00:	20000834 	.word	0x20000834
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop

08006b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b08:	4808      	ldr	r0, [pc, #32]	; (8006b2c <prvPortStartFirstTask+0x24>)
 8006b0a:	6800      	ldr	r0, [r0, #0]
 8006b0c:	6800      	ldr	r0, [r0, #0]
 8006b0e:	f380 8808 	msr	MSP, r0
 8006b12:	f04f 0000 	mov.w	r0, #0
 8006b16:	f380 8814 	msr	CONTROL, r0
 8006b1a:	b662      	cpsie	i
 8006b1c:	b661      	cpsie	f
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	df00      	svc	0
 8006b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b2a:	bf00      	nop
 8006b2c:	e000ed08 	.word	0xe000ed08

08006b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b36:	4b46      	ldr	r3, [pc, #280]	; (8006c50 <xPortStartScheduler+0x120>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a46      	ldr	r2, [pc, #280]	; (8006c54 <xPortStartScheduler+0x124>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d10a      	bne.n	8006b56 <xPortStartScheduler+0x26>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	613b      	str	r3, [r7, #16]
}
 8006b52:	bf00      	nop
 8006b54:	e7fe      	b.n	8006b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b56:	4b3e      	ldr	r3, [pc, #248]	; (8006c50 <xPortStartScheduler+0x120>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a3f      	ldr	r2, [pc, #252]	; (8006c58 <xPortStartScheduler+0x128>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d10a      	bne.n	8006b76 <xPortStartScheduler+0x46>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	60fb      	str	r3, [r7, #12]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b76:	4b39      	ldr	r3, [pc, #228]	; (8006c5c <xPortStartScheduler+0x12c>)
 8006b78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	22ff      	movs	r2, #255	; 0xff
 8006b86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b90:	78fb      	ldrb	r3, [r7, #3]
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	4b31      	ldr	r3, [pc, #196]	; (8006c60 <xPortStartScheduler+0x130>)
 8006b9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b9e:	4b31      	ldr	r3, [pc, #196]	; (8006c64 <xPortStartScheduler+0x134>)
 8006ba0:	2207      	movs	r2, #7
 8006ba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ba4:	e009      	b.n	8006bba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006ba6:	4b2f      	ldr	r3, [pc, #188]	; (8006c64 <xPortStartScheduler+0x134>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	4a2d      	ldr	r2, [pc, #180]	; (8006c64 <xPortStartScheduler+0x134>)
 8006bae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bba:	78fb      	ldrb	r3, [r7, #3]
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc2:	2b80      	cmp	r3, #128	; 0x80
 8006bc4:	d0ef      	beq.n	8006ba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006bc6:	4b27      	ldr	r3, [pc, #156]	; (8006c64 <xPortStartScheduler+0x134>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f1c3 0307 	rsb	r3, r3, #7
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	d00a      	beq.n	8006be8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	60bb      	str	r3, [r7, #8]
}
 8006be4:	bf00      	nop
 8006be6:	e7fe      	b.n	8006be6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006be8:	4b1e      	ldr	r3, [pc, #120]	; (8006c64 <xPortStartScheduler+0x134>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	4a1d      	ldr	r2, [pc, #116]	; (8006c64 <xPortStartScheduler+0x134>)
 8006bf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bf2:	4b1c      	ldr	r3, [pc, #112]	; (8006c64 <xPortStartScheduler+0x134>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bfa:	4a1a      	ldr	r2, [pc, #104]	; (8006c64 <xPortStartScheduler+0x134>)
 8006bfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c06:	4b18      	ldr	r3, [pc, #96]	; (8006c68 <xPortStartScheduler+0x138>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a17      	ldr	r2, [pc, #92]	; (8006c68 <xPortStartScheduler+0x138>)
 8006c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c12:	4b15      	ldr	r3, [pc, #84]	; (8006c68 <xPortStartScheduler+0x138>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a14      	ldr	r2, [pc, #80]	; (8006c68 <xPortStartScheduler+0x138>)
 8006c18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c1e:	f000 f8dd 	bl	8006ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c22:	4b12      	ldr	r3, [pc, #72]	; (8006c6c <xPortStartScheduler+0x13c>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c28:	f000 f8fc 	bl	8006e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c2c:	4b10      	ldr	r3, [pc, #64]	; (8006c70 <xPortStartScheduler+0x140>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a0f      	ldr	r2, [pc, #60]	; (8006c70 <xPortStartScheduler+0x140>)
 8006c32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c38:	f7ff ff66 	bl	8006b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c3c:	f7ff f84a 	bl	8005cd4 <vTaskSwitchContext>
	prvTaskExitError();
 8006c40:	f7ff ff20 	bl	8006a84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	e000ed00 	.word	0xe000ed00
 8006c54:	410fc271 	.word	0x410fc271
 8006c58:	410fc270 	.word	0x410fc270
 8006c5c:	e000e400 	.word	0xe000e400
 8006c60:	20000e60 	.word	0x20000e60
 8006c64:	20000e64 	.word	0x20000e64
 8006c68:	e000ed20 	.word	0xe000ed20
 8006c6c:	2000000c 	.word	0x2000000c
 8006c70:	e000ef34 	.word	0xe000ef34

08006c74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	607b      	str	r3, [r7, #4]
}
 8006c8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c8e:	4b0f      	ldr	r3, [pc, #60]	; (8006ccc <vPortEnterCritical+0x58>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3301      	adds	r3, #1
 8006c94:	4a0d      	ldr	r2, [pc, #52]	; (8006ccc <vPortEnterCritical+0x58>)
 8006c96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c98:	4b0c      	ldr	r3, [pc, #48]	; (8006ccc <vPortEnterCritical+0x58>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d10f      	bne.n	8006cc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ca0:	4b0b      	ldr	r3, [pc, #44]	; (8006cd0 <vPortEnterCritical+0x5c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	603b      	str	r3, [r7, #0]
}
 8006cbc:	bf00      	nop
 8006cbe:	e7fe      	b.n	8006cbe <vPortEnterCritical+0x4a>
	}
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	2000000c 	.word	0x2000000c
 8006cd0:	e000ed04 	.word	0xe000ed04

08006cd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006cda:	4b12      	ldr	r3, [pc, #72]	; (8006d24 <vPortExitCritical+0x50>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <vPortExitCritical+0x24>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	607b      	str	r3, [r7, #4]
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006cf8:	4b0a      	ldr	r3, [pc, #40]	; (8006d24 <vPortExitCritical+0x50>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	4a09      	ldr	r2, [pc, #36]	; (8006d24 <vPortExitCritical+0x50>)
 8006d00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d02:	4b08      	ldr	r3, [pc, #32]	; (8006d24 <vPortExitCritical+0x50>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d105      	bne.n	8006d16 <vPortExitCritical+0x42>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	f383 8811 	msr	BASEPRI, r3
}
 8006d14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d16:	bf00      	nop
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	2000000c 	.word	0x2000000c
	...

08006d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d30:	f3ef 8009 	mrs	r0, PSP
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	4b15      	ldr	r3, [pc, #84]	; (8006d90 <pxCurrentTCBConst>)
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	f01e 0f10 	tst.w	lr, #16
 8006d40:	bf08      	it	eq
 8006d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4a:	6010      	str	r0, [r2, #0]
 8006d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d54:	f380 8811 	msr	BASEPRI, r0
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f7fe ffb8 	bl	8005cd4 <vTaskSwitchContext>
 8006d64:	f04f 0000 	mov.w	r0, #0
 8006d68:	f380 8811 	msr	BASEPRI, r0
 8006d6c:	bc09      	pop	{r0, r3}
 8006d6e:	6819      	ldr	r1, [r3, #0]
 8006d70:	6808      	ldr	r0, [r1, #0]
 8006d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d76:	f01e 0f10 	tst.w	lr, #16
 8006d7a:	bf08      	it	eq
 8006d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d80:	f380 8809 	msr	PSP, r0
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	f3af 8000 	nop.w

08006d90 <pxCurrentTCBConst>:
 8006d90:	20000834 	.word	0x20000834
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop

08006d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	607b      	str	r3, [r7, #4]
}
 8006db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006db2:	f7fe fed5 	bl	8005b60 <xTaskIncrementTick>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dbc:	4b06      	ldr	r3, [pc, #24]	; (8006dd8 <xPortSysTickHandler+0x40>)
 8006dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	f383 8811 	msr	BASEPRI, r3
}
 8006dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006dd0:	bf00      	nop
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	e000ed04 	.word	0xe000ed04

08006ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006de0:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <vPortSetupTimerInterrupt+0x34>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <vPortSetupTimerInterrupt+0x38>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006dec:	4b0a      	ldr	r3, [pc, #40]	; (8006e18 <vPortSetupTimerInterrupt+0x3c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a0a      	ldr	r2, [pc, #40]	; (8006e1c <vPortSetupTimerInterrupt+0x40>)
 8006df2:	fba2 2303 	umull	r2, r3, r2, r3
 8006df6:	099b      	lsrs	r3, r3, #6
 8006df8:	4a09      	ldr	r2, [pc, #36]	; (8006e20 <vPortSetupTimerInterrupt+0x44>)
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dfe:	4b04      	ldr	r3, [pc, #16]	; (8006e10 <vPortSetupTimerInterrupt+0x34>)
 8006e00:	2207      	movs	r2, #7
 8006e02:	601a      	str	r2, [r3, #0]
}
 8006e04:	bf00      	nop
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	e000e010 	.word	0xe000e010
 8006e14:	e000e018 	.word	0xe000e018
 8006e18:	20000000 	.word	0x20000000
 8006e1c:	10624dd3 	.word	0x10624dd3
 8006e20:	e000e014 	.word	0xe000e014

08006e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006e34 <vPortEnableVFP+0x10>
 8006e28:	6801      	ldr	r1, [r0, #0]
 8006e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e2e:	6001      	str	r1, [r0, #0]
 8006e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e32:	bf00      	nop
 8006e34:	e000ed88 	.word	0xe000ed88

08006e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e3e:	f3ef 8305 	mrs	r3, IPSR
 8006e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b0f      	cmp	r3, #15
 8006e48:	d914      	bls.n	8006e74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e4a:	4a17      	ldr	r2, [pc, #92]	; (8006ea8 <vPortValidateInterruptPriority+0x70>)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4413      	add	r3, r2
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e54:	4b15      	ldr	r3, [pc, #84]	; (8006eac <vPortValidateInterruptPriority+0x74>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	7afa      	ldrb	r2, [r7, #11]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d20a      	bcs.n	8006e74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	607b      	str	r3, [r7, #4]
}
 8006e70:	bf00      	nop
 8006e72:	e7fe      	b.n	8006e72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e74:	4b0e      	ldr	r3, [pc, #56]	; (8006eb0 <vPortValidateInterruptPriority+0x78>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e7c:	4b0d      	ldr	r3, [pc, #52]	; (8006eb4 <vPortValidateInterruptPriority+0x7c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d90a      	bls.n	8006e9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	603b      	str	r3, [r7, #0]
}
 8006e96:	bf00      	nop
 8006e98:	e7fe      	b.n	8006e98 <vPortValidateInterruptPriority+0x60>
	}
 8006e9a:	bf00      	nop
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	e000e3f0 	.word	0xe000e3f0
 8006eac:	20000e60 	.word	0x20000e60
 8006eb0:	e000ed0c 	.word	0xe000ed0c
 8006eb4:	20000e64 	.word	0x20000e64

08006eb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08a      	sub	sp, #40	; 0x28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ec4:	f7fe fd90 	bl	80059e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ec8:	4b5b      	ldr	r3, [pc, #364]	; (8007038 <pvPortMalloc+0x180>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ed0:	f000 f920 	bl	8007114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ed4:	4b59      	ldr	r3, [pc, #356]	; (800703c <pvPortMalloc+0x184>)
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4013      	ands	r3, r2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f040 8093 	bne.w	8007008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01d      	beq.n	8006f24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ee8:	2208      	movs	r2, #8
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4413      	add	r3, r2
 8006eee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d014      	beq.n	8006f24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f023 0307 	bic.w	r3, r3, #7
 8006f00:	3308      	adds	r3, #8
 8006f02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <pvPortMalloc+0x6c>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	617b      	str	r3, [r7, #20]
}
 8006f20:	bf00      	nop
 8006f22:	e7fe      	b.n	8006f22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d06e      	beq.n	8007008 <pvPortMalloc+0x150>
 8006f2a:	4b45      	ldr	r3, [pc, #276]	; (8007040 <pvPortMalloc+0x188>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d869      	bhi.n	8007008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f34:	4b43      	ldr	r3, [pc, #268]	; (8007044 <pvPortMalloc+0x18c>)
 8006f36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f38:	4b42      	ldr	r3, [pc, #264]	; (8007044 <pvPortMalloc+0x18c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f3e:	e004      	b.n	8006f4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d903      	bls.n	8006f5c <pvPortMalloc+0xa4>
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1f1      	bne.n	8006f40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f5c:	4b36      	ldr	r3, [pc, #216]	; (8007038 <pvPortMalloc+0x180>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d050      	beq.n	8007008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2208      	movs	r2, #8
 8006f6c:	4413      	add	r3, r2
 8006f6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	1ad2      	subs	r2, r2, r3
 8006f80:	2308      	movs	r3, #8
 8006f82:	005b      	lsls	r3, r3, #1
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d91f      	bls.n	8006fc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <pvPortMalloc+0xf8>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	613b      	str	r3, [r7, #16]
}
 8006fac:	bf00      	nop
 8006fae:	e7fe      	b.n	8006fae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	1ad2      	subs	r2, r2, r3
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006fc2:	69b8      	ldr	r0, [r7, #24]
 8006fc4:	f000 f908 	bl	80071d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fc8:	4b1d      	ldr	r3, [pc, #116]	; (8007040 <pvPortMalloc+0x188>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	4a1b      	ldr	r2, [pc, #108]	; (8007040 <pvPortMalloc+0x188>)
 8006fd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fd6:	4b1a      	ldr	r3, [pc, #104]	; (8007040 <pvPortMalloc+0x188>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	4b1b      	ldr	r3, [pc, #108]	; (8007048 <pvPortMalloc+0x190>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d203      	bcs.n	8006fea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fe2:	4b17      	ldr	r3, [pc, #92]	; (8007040 <pvPortMalloc+0x188>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a18      	ldr	r2, [pc, #96]	; (8007048 <pvPortMalloc+0x190>)
 8006fe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	685a      	ldr	r2, [r3, #4]
 8006fee:	4b13      	ldr	r3, [pc, #76]	; (800703c <pvPortMalloc+0x184>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ffe:	4b13      	ldr	r3, [pc, #76]	; (800704c <pvPortMalloc+0x194>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3301      	adds	r3, #1
 8007004:	4a11      	ldr	r2, [pc, #68]	; (800704c <pvPortMalloc+0x194>)
 8007006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007008:	f7fe fcfc 	bl	8005a04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	f003 0307 	and.w	r3, r3, #7
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <pvPortMalloc+0x174>
	__asm volatile
 8007016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	60fb      	str	r3, [r7, #12]
}
 8007028:	bf00      	nop
 800702a:	e7fe      	b.n	800702a <pvPortMalloc+0x172>
	return pvReturn;
 800702c:	69fb      	ldr	r3, [r7, #28]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3728      	adds	r7, #40	; 0x28
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20004a70 	.word	0x20004a70
 800703c:	20004a84 	.word	0x20004a84
 8007040:	20004a74 	.word	0x20004a74
 8007044:	20004a68 	.word	0x20004a68
 8007048:	20004a78 	.word	0x20004a78
 800704c:	20004a7c 	.word	0x20004a7c

08007050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d04d      	beq.n	80070fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007062:	2308      	movs	r3, #8
 8007064:	425b      	negs	r3, r3
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	4413      	add	r3, r2
 800706a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	4b24      	ldr	r3, [pc, #144]	; (8007108 <vPortFree+0xb8>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4013      	ands	r3, r2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10a      	bne.n	8007094 <vPortFree+0x44>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	60fb      	str	r3, [r7, #12]
}
 8007090:	bf00      	nop
 8007092:	e7fe      	b.n	8007092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00a      	beq.n	80070b2 <vPortFree+0x62>
	__asm volatile
 800709c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	60bb      	str	r3, [r7, #8]
}
 80070ae:	bf00      	nop
 80070b0:	e7fe      	b.n	80070b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	4b14      	ldr	r3, [pc, #80]	; (8007108 <vPortFree+0xb8>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4013      	ands	r3, r2
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d01e      	beq.n	80070fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d11a      	bne.n	80070fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	4b0e      	ldr	r3, [pc, #56]	; (8007108 <vPortFree+0xb8>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	43db      	mvns	r3, r3
 80070d2:	401a      	ands	r2, r3
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070d8:	f7fe fc86 	bl	80059e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	4b0a      	ldr	r3, [pc, #40]	; (800710c <vPortFree+0xbc>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4413      	add	r3, r2
 80070e6:	4a09      	ldr	r2, [pc, #36]	; (800710c <vPortFree+0xbc>)
 80070e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070ea:	6938      	ldr	r0, [r7, #16]
 80070ec:	f000 f874 	bl	80071d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80070f0:	4b07      	ldr	r3, [pc, #28]	; (8007110 <vPortFree+0xc0>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3301      	adds	r3, #1
 80070f6:	4a06      	ldr	r2, [pc, #24]	; (8007110 <vPortFree+0xc0>)
 80070f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80070fa:	f7fe fc83 	bl	8005a04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070fe:	bf00      	nop
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20004a84 	.word	0x20004a84
 800710c:	20004a74 	.word	0x20004a74
 8007110:	20004a80 	.word	0x20004a80

08007114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800711a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800711e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007120:	4b27      	ldr	r3, [pc, #156]	; (80071c0 <prvHeapInit+0xac>)
 8007122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00c      	beq.n	8007148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3307      	adds	r3, #7
 8007132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0307 	bic.w	r3, r3, #7
 800713a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	4a1f      	ldr	r2, [pc, #124]	; (80071c0 <prvHeapInit+0xac>)
 8007144:	4413      	add	r3, r2
 8007146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800714c:	4a1d      	ldr	r2, [pc, #116]	; (80071c4 <prvHeapInit+0xb0>)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007152:	4b1c      	ldr	r3, [pc, #112]	; (80071c4 <prvHeapInit+0xb0>)
 8007154:	2200      	movs	r2, #0
 8007156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	4413      	add	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007160:	2208      	movs	r2, #8
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 0307 	bic.w	r3, r3, #7
 800716e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4a15      	ldr	r2, [pc, #84]	; (80071c8 <prvHeapInit+0xb4>)
 8007174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007176:	4b14      	ldr	r3, [pc, #80]	; (80071c8 <prvHeapInit+0xb4>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2200      	movs	r2, #0
 800717c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800717e:	4b12      	ldr	r3, [pc, #72]	; (80071c8 <prvHeapInit+0xb4>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2200      	movs	r2, #0
 8007184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	1ad2      	subs	r2, r2, r3
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007194:	4b0c      	ldr	r3, [pc, #48]	; (80071c8 <prvHeapInit+0xb4>)
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	4a0a      	ldr	r2, [pc, #40]	; (80071cc <prvHeapInit+0xb8>)
 80071a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	4a09      	ldr	r2, [pc, #36]	; (80071d0 <prvHeapInit+0xbc>)
 80071aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071ac:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <prvHeapInit+0xc0>)
 80071ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071b2:	601a      	str	r2, [r3, #0]
}
 80071b4:	bf00      	nop
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	20000e68 	.word	0x20000e68
 80071c4:	20004a68 	.word	0x20004a68
 80071c8:	20004a70 	.word	0x20004a70
 80071cc:	20004a78 	.word	0x20004a78
 80071d0:	20004a74 	.word	0x20004a74
 80071d4:	20004a84 	.word	0x20004a84

080071d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071e0:	4b28      	ldr	r3, [pc, #160]	; (8007284 <prvInsertBlockIntoFreeList+0xac>)
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	e002      	b.n	80071ec <prvInsertBlockIntoFreeList+0x14>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d8f7      	bhi.n	80071e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	4413      	add	r3, r2
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	429a      	cmp	r2, r3
 8007206:	d108      	bne.n	800721a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	441a      	add	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	441a      	add	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	429a      	cmp	r2, r3
 800722c:	d118      	bne.n	8007260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4b15      	ldr	r3, [pc, #84]	; (8007288 <prvInsertBlockIntoFreeList+0xb0>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d00d      	beq.n	8007256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	441a      	add	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	e008      	b.n	8007268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007256:	4b0c      	ldr	r3, [pc, #48]	; (8007288 <prvInsertBlockIntoFreeList+0xb0>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	e003      	b.n	8007268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	429a      	cmp	r2, r3
 800726e:	d002      	beq.n	8007276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007276:	bf00      	nop
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20004a68 	.word	0x20004a68
 8007288:	20004a70 	.word	0x20004a70

0800728c <HAL_UART_RxCpltCallback>:

bool 	is_running[OFFSET] 				= {false, false};
char uartBuf[4000];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a2d      	ldr	r2, [pc, #180]	; (8007350 <HAL_UART_RxCpltCallback+0xc4>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d105      	bne.n	80072aa <HAL_UART_RxCpltCallback+0x1e>
	{
//		HAL_UART_Transmit(&huart3, cupD_res_packet, sizeof(cupD_res_packet), 100);
	    HAL_UART_Receive_IT(&huart3, pc_res_packet, sizeof(pc_res_packet));
 800729e:	220a      	movs	r2, #10
 80072a0:	492c      	ldr	r1, [pc, #176]	; (8007354 <HAL_UART_RxCpltCallback+0xc8>)
 80072a2:	482d      	ldr	r0, [pc, #180]	; (8007358 <HAL_UART_RxCpltCallback+0xcc>)
 80072a4:	f7fc fb4b 	bl	800393e <HAL_UART_Receive_IT>
		if (LidD_res_packet[RES_PACKET_BCC] == chksum)
			printf("check sus error!");

//	    HAL_UART_Receive_IT(&huart6, LidD_res_packet, sizeof(LidD_res_packet));
	}
}
 80072a8:	e04e      	b.n	8007348 <HAL_UART_RxCpltCallback+0xbc>
	else if (huart->Instance == UART5)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a2b      	ldr	r2, [pc, #172]	; (800735c <HAL_UART_RxCpltCallback+0xd0>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d122      	bne.n	80072fa <HAL_UART_RxCpltCallback+0x6e>
		HAL_UART_Transmit(&huart3, cupD_res_packet, sizeof(cupD_res_packet), 100);
 80072b4:	2364      	movs	r3, #100	; 0x64
 80072b6:	220b      	movs	r2, #11
 80072b8:	4929      	ldr	r1, [pc, #164]	; (8007360 <HAL_UART_RxCpltCallback+0xd4>)
 80072ba:	4827      	ldr	r0, [pc, #156]	; (8007358 <HAL_UART_RxCpltCallback+0xcc>)
 80072bc:	f7fc faad 	bl	800381a <HAL_UART_Transmit>
		int chksum = 0x00;
 80072c0:	2300      	movs	r3, #0
 80072c2:	617b      	str	r3, [r7, #20]
		for(int i=1; i<RES_PACKET_BCC; i++){
 80072c4:	2301      	movs	r3, #1
 80072c6:	613b      	str	r3, [r7, #16]
 80072c8:	e00a      	b.n	80072e0 <HAL_UART_RxCpltCallback+0x54>
			chksum += cupD_res_packet[i];
 80072ca:	4a25      	ldr	r2, [pc, #148]	; (8007360 <HAL_UART_RxCpltCallback+0xd4>)
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	4413      	add	r3, r2
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	4413      	add	r3, r2
 80072d8:	617b      	str	r3, [r7, #20]
		for(int i=1; i<RES_PACKET_BCC; i++){
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	3301      	adds	r3, #1
 80072de:	613b      	str	r3, [r7, #16]
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	2b09      	cmp	r3, #9
 80072e4:	ddf1      	ble.n	80072ca <HAL_UART_RxCpltCallback+0x3e>
		if (cupD_res_packet[RES_PACKET_BCC] == chksum)
 80072e6:	4b1e      	ldr	r3, [pc, #120]	; (8007360 <HAL_UART_RxCpltCallback+0xd4>)
 80072e8:	7a9b      	ldrb	r3, [r3, #10]
 80072ea:	461a      	mov	r2, r3
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d12a      	bne.n	8007348 <HAL_UART_RxCpltCallback+0xbc>
			printf("check sus error!");
 80072f2:	481c      	ldr	r0, [pc, #112]	; (8007364 <HAL_UART_RxCpltCallback+0xd8>)
 80072f4:	f000 f9d0 	bl	8007698 <iprintf>
}
 80072f8:	e026      	b.n	8007348 <HAL_UART_RxCpltCallback+0xbc>
	else if (huart->Instance == USART6)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a1a      	ldr	r2, [pc, #104]	; (8007368 <HAL_UART_RxCpltCallback+0xdc>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d121      	bne.n	8007348 <HAL_UART_RxCpltCallback+0xbc>
		HAL_UART_Transmit(&huart3, LidD_res_packet, sizeof(LidD_res_packet), 100);
 8007304:	2364      	movs	r3, #100	; 0x64
 8007306:	220b      	movs	r2, #11
 8007308:	4918      	ldr	r1, [pc, #96]	; (800736c <HAL_UART_RxCpltCallback+0xe0>)
 800730a:	4813      	ldr	r0, [pc, #76]	; (8007358 <HAL_UART_RxCpltCallback+0xcc>)
 800730c:	f7fc fa85 	bl	800381a <HAL_UART_Transmit>
		int chksum = 0x00;
 8007310:	2300      	movs	r3, #0
 8007312:	60fb      	str	r3, [r7, #12]
		for(int i=1; i<RES_PACKET_BCC; i++){
 8007314:	2301      	movs	r3, #1
 8007316:	60bb      	str	r3, [r7, #8]
 8007318:	e00a      	b.n	8007330 <HAL_UART_RxCpltCallback+0xa4>
			chksum += LidD_res_packet[i];
 800731a:	4a14      	ldr	r2, [pc, #80]	; (800736c <HAL_UART_RxCpltCallback+0xe0>)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	4413      	add	r3, r2
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4413      	add	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]
		for(int i=1; i<RES_PACKET_BCC; i++){
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	3301      	adds	r3, #1
 800732e:	60bb      	str	r3, [r7, #8]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2b09      	cmp	r3, #9
 8007334:	ddf1      	ble.n	800731a <HAL_UART_RxCpltCallback+0x8e>
		if (LidD_res_packet[RES_PACKET_BCC] == chksum)
 8007336:	4b0d      	ldr	r3, [pc, #52]	; (800736c <HAL_UART_RxCpltCallback+0xe0>)
 8007338:	7a9b      	ldrb	r3, [r3, #10]
 800733a:	461a      	mov	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4293      	cmp	r3, r2
 8007340:	d102      	bne.n	8007348 <HAL_UART_RxCpltCallback+0xbc>
			printf("check sus error!");
 8007342:	4808      	ldr	r0, [pc, #32]	; (8007364 <HAL_UART_RxCpltCallback+0xd8>)
 8007344:	f000 f9a8 	bl	8007698 <iprintf>
}
 8007348:	bf00      	nop
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	40004800 	.word	0x40004800
 8007354:	20000090 	.word	0x20000090
 8007358:	20004adc 	.word	0x20004adc
 800735c:	40005000 	.word	0x40005000
 8007360:	2000009c 	.word	0x2000009c
 8007364:	080084d8 	.word	0x080084d8
 8007368:	40011400 	.word	0x40011400
 800736c:	200000a8 	.word	0x200000a8

08007370 <__errno>:
 8007370:	4b01      	ldr	r3, [pc, #4]	; (8007378 <__errno+0x8>)
 8007372:	6818      	ldr	r0, [r3, #0]
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	20000010 	.word	0x20000010

0800737c <std>:
 800737c:	2300      	movs	r3, #0
 800737e:	b510      	push	{r4, lr}
 8007380:	4604      	mov	r4, r0
 8007382:	e9c0 3300 	strd	r3, r3, [r0]
 8007386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800738a:	6083      	str	r3, [r0, #8]
 800738c:	8181      	strh	r1, [r0, #12]
 800738e:	6643      	str	r3, [r0, #100]	; 0x64
 8007390:	81c2      	strh	r2, [r0, #14]
 8007392:	6183      	str	r3, [r0, #24]
 8007394:	4619      	mov	r1, r3
 8007396:	2208      	movs	r2, #8
 8007398:	305c      	adds	r0, #92	; 0x5c
 800739a:	f000 f91a 	bl	80075d2 <memset>
 800739e:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <std+0x38>)
 80073a0:	6263      	str	r3, [r4, #36]	; 0x24
 80073a2:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <std+0x3c>)
 80073a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80073a6:	4b05      	ldr	r3, [pc, #20]	; (80073bc <std+0x40>)
 80073a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073aa:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <std+0x44>)
 80073ac:	6224      	str	r4, [r4, #32]
 80073ae:	6323      	str	r3, [r4, #48]	; 0x30
 80073b0:	bd10      	pop	{r4, pc}
 80073b2:	bf00      	nop
 80073b4:	080078a9 	.word	0x080078a9
 80073b8:	080078cb 	.word	0x080078cb
 80073bc:	08007903 	.word	0x08007903
 80073c0:	08007927 	.word	0x08007927

080073c4 <_cleanup_r>:
 80073c4:	4901      	ldr	r1, [pc, #4]	; (80073cc <_cleanup_r+0x8>)
 80073c6:	f000 b8af 	b.w	8007528 <_fwalk_reent>
 80073ca:	bf00      	nop
 80073cc:	08007c01 	.word	0x08007c01

080073d0 <__sfmoreglue>:
 80073d0:	b570      	push	{r4, r5, r6, lr}
 80073d2:	1e4a      	subs	r2, r1, #1
 80073d4:	2568      	movs	r5, #104	; 0x68
 80073d6:	4355      	muls	r5, r2
 80073d8:	460e      	mov	r6, r1
 80073da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073de:	f000 f901 	bl	80075e4 <_malloc_r>
 80073e2:	4604      	mov	r4, r0
 80073e4:	b140      	cbz	r0, 80073f8 <__sfmoreglue+0x28>
 80073e6:	2100      	movs	r1, #0
 80073e8:	e9c0 1600 	strd	r1, r6, [r0]
 80073ec:	300c      	adds	r0, #12
 80073ee:	60a0      	str	r0, [r4, #8]
 80073f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073f4:	f000 f8ed 	bl	80075d2 <memset>
 80073f8:	4620      	mov	r0, r4
 80073fa:	bd70      	pop	{r4, r5, r6, pc}

080073fc <__sfp_lock_acquire>:
 80073fc:	4801      	ldr	r0, [pc, #4]	; (8007404 <__sfp_lock_acquire+0x8>)
 80073fe:	f000 b8d8 	b.w	80075b2 <__retarget_lock_acquire_recursive>
 8007402:	bf00      	nop
 8007404:	20004d1c 	.word	0x20004d1c

08007408 <__sfp_lock_release>:
 8007408:	4801      	ldr	r0, [pc, #4]	; (8007410 <__sfp_lock_release+0x8>)
 800740a:	f000 b8d3 	b.w	80075b4 <__retarget_lock_release_recursive>
 800740e:	bf00      	nop
 8007410:	20004d1c 	.word	0x20004d1c

08007414 <__sinit_lock_acquire>:
 8007414:	4801      	ldr	r0, [pc, #4]	; (800741c <__sinit_lock_acquire+0x8>)
 8007416:	f000 b8cc 	b.w	80075b2 <__retarget_lock_acquire_recursive>
 800741a:	bf00      	nop
 800741c:	20004d17 	.word	0x20004d17

08007420 <__sinit_lock_release>:
 8007420:	4801      	ldr	r0, [pc, #4]	; (8007428 <__sinit_lock_release+0x8>)
 8007422:	f000 b8c7 	b.w	80075b4 <__retarget_lock_release_recursive>
 8007426:	bf00      	nop
 8007428:	20004d17 	.word	0x20004d17

0800742c <__sinit>:
 800742c:	b510      	push	{r4, lr}
 800742e:	4604      	mov	r4, r0
 8007430:	f7ff fff0 	bl	8007414 <__sinit_lock_acquire>
 8007434:	69a3      	ldr	r3, [r4, #24]
 8007436:	b11b      	cbz	r3, 8007440 <__sinit+0x14>
 8007438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800743c:	f7ff bff0 	b.w	8007420 <__sinit_lock_release>
 8007440:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007444:	6523      	str	r3, [r4, #80]	; 0x50
 8007446:	4b13      	ldr	r3, [pc, #76]	; (8007494 <__sinit+0x68>)
 8007448:	4a13      	ldr	r2, [pc, #76]	; (8007498 <__sinit+0x6c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	62a2      	str	r2, [r4, #40]	; 0x28
 800744e:	42a3      	cmp	r3, r4
 8007450:	bf04      	itt	eq
 8007452:	2301      	moveq	r3, #1
 8007454:	61a3      	streq	r3, [r4, #24]
 8007456:	4620      	mov	r0, r4
 8007458:	f000 f820 	bl	800749c <__sfp>
 800745c:	6060      	str	r0, [r4, #4]
 800745e:	4620      	mov	r0, r4
 8007460:	f000 f81c 	bl	800749c <__sfp>
 8007464:	60a0      	str	r0, [r4, #8]
 8007466:	4620      	mov	r0, r4
 8007468:	f000 f818 	bl	800749c <__sfp>
 800746c:	2200      	movs	r2, #0
 800746e:	60e0      	str	r0, [r4, #12]
 8007470:	2104      	movs	r1, #4
 8007472:	6860      	ldr	r0, [r4, #4]
 8007474:	f7ff ff82 	bl	800737c <std>
 8007478:	68a0      	ldr	r0, [r4, #8]
 800747a:	2201      	movs	r2, #1
 800747c:	2109      	movs	r1, #9
 800747e:	f7ff ff7d 	bl	800737c <std>
 8007482:	68e0      	ldr	r0, [r4, #12]
 8007484:	2202      	movs	r2, #2
 8007486:	2112      	movs	r1, #18
 8007488:	f7ff ff78 	bl	800737c <std>
 800748c:	2301      	movs	r3, #1
 800748e:	61a3      	str	r3, [r4, #24]
 8007490:	e7d2      	b.n	8007438 <__sinit+0xc>
 8007492:	bf00      	nop
 8007494:	08008600 	.word	0x08008600
 8007498:	080073c5 	.word	0x080073c5

0800749c <__sfp>:
 800749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749e:	4607      	mov	r7, r0
 80074a0:	f7ff ffac 	bl	80073fc <__sfp_lock_acquire>
 80074a4:	4b1e      	ldr	r3, [pc, #120]	; (8007520 <__sfp+0x84>)
 80074a6:	681e      	ldr	r6, [r3, #0]
 80074a8:	69b3      	ldr	r3, [r6, #24]
 80074aa:	b913      	cbnz	r3, 80074b2 <__sfp+0x16>
 80074ac:	4630      	mov	r0, r6
 80074ae:	f7ff ffbd 	bl	800742c <__sinit>
 80074b2:	3648      	adds	r6, #72	; 0x48
 80074b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074b8:	3b01      	subs	r3, #1
 80074ba:	d503      	bpl.n	80074c4 <__sfp+0x28>
 80074bc:	6833      	ldr	r3, [r6, #0]
 80074be:	b30b      	cbz	r3, 8007504 <__sfp+0x68>
 80074c0:	6836      	ldr	r6, [r6, #0]
 80074c2:	e7f7      	b.n	80074b4 <__sfp+0x18>
 80074c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80074c8:	b9d5      	cbnz	r5, 8007500 <__sfp+0x64>
 80074ca:	4b16      	ldr	r3, [pc, #88]	; (8007524 <__sfp+0x88>)
 80074cc:	60e3      	str	r3, [r4, #12]
 80074ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074d2:	6665      	str	r5, [r4, #100]	; 0x64
 80074d4:	f000 f86c 	bl	80075b0 <__retarget_lock_init_recursive>
 80074d8:	f7ff ff96 	bl	8007408 <__sfp_lock_release>
 80074dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074e4:	6025      	str	r5, [r4, #0]
 80074e6:	61a5      	str	r5, [r4, #24]
 80074e8:	2208      	movs	r2, #8
 80074ea:	4629      	mov	r1, r5
 80074ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074f0:	f000 f86f 	bl	80075d2 <memset>
 80074f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074fc:	4620      	mov	r0, r4
 80074fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007500:	3468      	adds	r4, #104	; 0x68
 8007502:	e7d9      	b.n	80074b8 <__sfp+0x1c>
 8007504:	2104      	movs	r1, #4
 8007506:	4638      	mov	r0, r7
 8007508:	f7ff ff62 	bl	80073d0 <__sfmoreglue>
 800750c:	4604      	mov	r4, r0
 800750e:	6030      	str	r0, [r6, #0]
 8007510:	2800      	cmp	r0, #0
 8007512:	d1d5      	bne.n	80074c0 <__sfp+0x24>
 8007514:	f7ff ff78 	bl	8007408 <__sfp_lock_release>
 8007518:	230c      	movs	r3, #12
 800751a:	603b      	str	r3, [r7, #0]
 800751c:	e7ee      	b.n	80074fc <__sfp+0x60>
 800751e:	bf00      	nop
 8007520:	08008600 	.word	0x08008600
 8007524:	ffff0001 	.word	0xffff0001

08007528 <_fwalk_reent>:
 8007528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800752c:	4606      	mov	r6, r0
 800752e:	4688      	mov	r8, r1
 8007530:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007534:	2700      	movs	r7, #0
 8007536:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800753a:	f1b9 0901 	subs.w	r9, r9, #1
 800753e:	d505      	bpl.n	800754c <_fwalk_reent+0x24>
 8007540:	6824      	ldr	r4, [r4, #0]
 8007542:	2c00      	cmp	r4, #0
 8007544:	d1f7      	bne.n	8007536 <_fwalk_reent+0xe>
 8007546:	4638      	mov	r0, r7
 8007548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800754c:	89ab      	ldrh	r3, [r5, #12]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d907      	bls.n	8007562 <_fwalk_reent+0x3a>
 8007552:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007556:	3301      	adds	r3, #1
 8007558:	d003      	beq.n	8007562 <_fwalk_reent+0x3a>
 800755a:	4629      	mov	r1, r5
 800755c:	4630      	mov	r0, r6
 800755e:	47c0      	blx	r8
 8007560:	4307      	orrs	r7, r0
 8007562:	3568      	adds	r5, #104	; 0x68
 8007564:	e7e9      	b.n	800753a <_fwalk_reent+0x12>
	...

08007568 <__libc_init_array>:
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	4d0d      	ldr	r5, [pc, #52]	; (80075a0 <__libc_init_array+0x38>)
 800756c:	4c0d      	ldr	r4, [pc, #52]	; (80075a4 <__libc_init_array+0x3c>)
 800756e:	1b64      	subs	r4, r4, r5
 8007570:	10a4      	asrs	r4, r4, #2
 8007572:	2600      	movs	r6, #0
 8007574:	42a6      	cmp	r6, r4
 8007576:	d109      	bne.n	800758c <__libc_init_array+0x24>
 8007578:	4d0b      	ldr	r5, [pc, #44]	; (80075a8 <__libc_init_array+0x40>)
 800757a:	4c0c      	ldr	r4, [pc, #48]	; (80075ac <__libc_init_array+0x44>)
 800757c:	f000 ff70 	bl	8008460 <_init>
 8007580:	1b64      	subs	r4, r4, r5
 8007582:	10a4      	asrs	r4, r4, #2
 8007584:	2600      	movs	r6, #0
 8007586:	42a6      	cmp	r6, r4
 8007588:	d105      	bne.n	8007596 <__libc_init_array+0x2e>
 800758a:	bd70      	pop	{r4, r5, r6, pc}
 800758c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007590:	4798      	blx	r3
 8007592:	3601      	adds	r6, #1
 8007594:	e7ee      	b.n	8007574 <__libc_init_array+0xc>
 8007596:	f855 3b04 	ldr.w	r3, [r5], #4
 800759a:	4798      	blx	r3
 800759c:	3601      	adds	r6, #1
 800759e:	e7f2      	b.n	8007586 <__libc_init_array+0x1e>
 80075a0:	08008640 	.word	0x08008640
 80075a4:	08008640 	.word	0x08008640
 80075a8:	08008640 	.word	0x08008640
 80075ac:	08008644 	.word	0x08008644

080075b0 <__retarget_lock_init_recursive>:
 80075b0:	4770      	bx	lr

080075b2 <__retarget_lock_acquire_recursive>:
 80075b2:	4770      	bx	lr

080075b4 <__retarget_lock_release_recursive>:
 80075b4:	4770      	bx	lr

080075b6 <memcpy>:
 80075b6:	440a      	add	r2, r1
 80075b8:	4291      	cmp	r1, r2
 80075ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80075be:	d100      	bne.n	80075c2 <memcpy+0xc>
 80075c0:	4770      	bx	lr
 80075c2:	b510      	push	{r4, lr}
 80075c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075cc:	4291      	cmp	r1, r2
 80075ce:	d1f9      	bne.n	80075c4 <memcpy+0xe>
 80075d0:	bd10      	pop	{r4, pc}

080075d2 <memset>:
 80075d2:	4402      	add	r2, r0
 80075d4:	4603      	mov	r3, r0
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d100      	bne.n	80075dc <memset+0xa>
 80075da:	4770      	bx	lr
 80075dc:	f803 1b01 	strb.w	r1, [r3], #1
 80075e0:	e7f9      	b.n	80075d6 <memset+0x4>
	...

080075e4 <_malloc_r>:
 80075e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e6:	1ccd      	adds	r5, r1, #3
 80075e8:	f025 0503 	bic.w	r5, r5, #3
 80075ec:	3508      	adds	r5, #8
 80075ee:	2d0c      	cmp	r5, #12
 80075f0:	bf38      	it	cc
 80075f2:	250c      	movcc	r5, #12
 80075f4:	2d00      	cmp	r5, #0
 80075f6:	4606      	mov	r6, r0
 80075f8:	db01      	blt.n	80075fe <_malloc_r+0x1a>
 80075fa:	42a9      	cmp	r1, r5
 80075fc:	d903      	bls.n	8007606 <_malloc_r+0x22>
 80075fe:	230c      	movs	r3, #12
 8007600:	6033      	str	r3, [r6, #0]
 8007602:	2000      	movs	r0, #0
 8007604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007606:	f000 fbad 	bl	8007d64 <__malloc_lock>
 800760a:	4921      	ldr	r1, [pc, #132]	; (8007690 <_malloc_r+0xac>)
 800760c:	680a      	ldr	r2, [r1, #0]
 800760e:	4614      	mov	r4, r2
 8007610:	b99c      	cbnz	r4, 800763a <_malloc_r+0x56>
 8007612:	4f20      	ldr	r7, [pc, #128]	; (8007694 <_malloc_r+0xb0>)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	b923      	cbnz	r3, 8007622 <_malloc_r+0x3e>
 8007618:	4621      	mov	r1, r4
 800761a:	4630      	mov	r0, r6
 800761c:	f000 f934 	bl	8007888 <_sbrk_r>
 8007620:	6038      	str	r0, [r7, #0]
 8007622:	4629      	mov	r1, r5
 8007624:	4630      	mov	r0, r6
 8007626:	f000 f92f 	bl	8007888 <_sbrk_r>
 800762a:	1c43      	adds	r3, r0, #1
 800762c:	d123      	bne.n	8007676 <_malloc_r+0x92>
 800762e:	230c      	movs	r3, #12
 8007630:	6033      	str	r3, [r6, #0]
 8007632:	4630      	mov	r0, r6
 8007634:	f000 fb9c 	bl	8007d70 <__malloc_unlock>
 8007638:	e7e3      	b.n	8007602 <_malloc_r+0x1e>
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	1b5b      	subs	r3, r3, r5
 800763e:	d417      	bmi.n	8007670 <_malloc_r+0x8c>
 8007640:	2b0b      	cmp	r3, #11
 8007642:	d903      	bls.n	800764c <_malloc_r+0x68>
 8007644:	6023      	str	r3, [r4, #0]
 8007646:	441c      	add	r4, r3
 8007648:	6025      	str	r5, [r4, #0]
 800764a:	e004      	b.n	8007656 <_malloc_r+0x72>
 800764c:	6863      	ldr	r3, [r4, #4]
 800764e:	42a2      	cmp	r2, r4
 8007650:	bf0c      	ite	eq
 8007652:	600b      	streq	r3, [r1, #0]
 8007654:	6053      	strne	r3, [r2, #4]
 8007656:	4630      	mov	r0, r6
 8007658:	f000 fb8a 	bl	8007d70 <__malloc_unlock>
 800765c:	f104 000b 	add.w	r0, r4, #11
 8007660:	1d23      	adds	r3, r4, #4
 8007662:	f020 0007 	bic.w	r0, r0, #7
 8007666:	1ac2      	subs	r2, r0, r3
 8007668:	d0cc      	beq.n	8007604 <_malloc_r+0x20>
 800766a:	1a1b      	subs	r3, r3, r0
 800766c:	50a3      	str	r3, [r4, r2]
 800766e:	e7c9      	b.n	8007604 <_malloc_r+0x20>
 8007670:	4622      	mov	r2, r4
 8007672:	6864      	ldr	r4, [r4, #4]
 8007674:	e7cc      	b.n	8007610 <_malloc_r+0x2c>
 8007676:	1cc4      	adds	r4, r0, #3
 8007678:	f024 0403 	bic.w	r4, r4, #3
 800767c:	42a0      	cmp	r0, r4
 800767e:	d0e3      	beq.n	8007648 <_malloc_r+0x64>
 8007680:	1a21      	subs	r1, r4, r0
 8007682:	4630      	mov	r0, r6
 8007684:	f000 f900 	bl	8007888 <_sbrk_r>
 8007688:	3001      	adds	r0, #1
 800768a:	d1dd      	bne.n	8007648 <_malloc_r+0x64>
 800768c:	e7cf      	b.n	800762e <_malloc_r+0x4a>
 800768e:	bf00      	nop
 8007690:	20004a88 	.word	0x20004a88
 8007694:	20004a8c 	.word	0x20004a8c

08007698 <iprintf>:
 8007698:	b40f      	push	{r0, r1, r2, r3}
 800769a:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <iprintf+0x2c>)
 800769c:	b513      	push	{r0, r1, r4, lr}
 800769e:	681c      	ldr	r4, [r3, #0]
 80076a0:	b124      	cbz	r4, 80076ac <iprintf+0x14>
 80076a2:	69a3      	ldr	r3, [r4, #24]
 80076a4:	b913      	cbnz	r3, 80076ac <iprintf+0x14>
 80076a6:	4620      	mov	r0, r4
 80076a8:	f7ff fec0 	bl	800742c <__sinit>
 80076ac:	ab05      	add	r3, sp, #20
 80076ae:	9a04      	ldr	r2, [sp, #16]
 80076b0:	68a1      	ldr	r1, [r4, #8]
 80076b2:	9301      	str	r3, [sp, #4]
 80076b4:	4620      	mov	r0, r4
 80076b6:	f000 fbdb 	bl	8007e70 <_vfiprintf_r>
 80076ba:	b002      	add	sp, #8
 80076bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c0:	b004      	add	sp, #16
 80076c2:	4770      	bx	lr
 80076c4:	20000010 	.word	0x20000010

080076c8 <_puts_r>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	460e      	mov	r6, r1
 80076cc:	4605      	mov	r5, r0
 80076ce:	b118      	cbz	r0, 80076d8 <_puts_r+0x10>
 80076d0:	6983      	ldr	r3, [r0, #24]
 80076d2:	b90b      	cbnz	r3, 80076d8 <_puts_r+0x10>
 80076d4:	f7ff feaa 	bl	800742c <__sinit>
 80076d8:	69ab      	ldr	r3, [r5, #24]
 80076da:	68ac      	ldr	r4, [r5, #8]
 80076dc:	b913      	cbnz	r3, 80076e4 <_puts_r+0x1c>
 80076de:	4628      	mov	r0, r5
 80076e0:	f7ff fea4 	bl	800742c <__sinit>
 80076e4:	4b2c      	ldr	r3, [pc, #176]	; (8007798 <_puts_r+0xd0>)
 80076e6:	429c      	cmp	r4, r3
 80076e8:	d120      	bne.n	800772c <_puts_r+0x64>
 80076ea:	686c      	ldr	r4, [r5, #4]
 80076ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076ee:	07db      	lsls	r3, r3, #31
 80076f0:	d405      	bmi.n	80076fe <_puts_r+0x36>
 80076f2:	89a3      	ldrh	r3, [r4, #12]
 80076f4:	0598      	lsls	r0, r3, #22
 80076f6:	d402      	bmi.n	80076fe <_puts_r+0x36>
 80076f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076fa:	f7ff ff5a 	bl	80075b2 <__retarget_lock_acquire_recursive>
 80076fe:	89a3      	ldrh	r3, [r4, #12]
 8007700:	0719      	lsls	r1, r3, #28
 8007702:	d51d      	bpl.n	8007740 <_puts_r+0x78>
 8007704:	6923      	ldr	r3, [r4, #16]
 8007706:	b1db      	cbz	r3, 8007740 <_puts_r+0x78>
 8007708:	3e01      	subs	r6, #1
 800770a:	68a3      	ldr	r3, [r4, #8]
 800770c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007710:	3b01      	subs	r3, #1
 8007712:	60a3      	str	r3, [r4, #8]
 8007714:	bb39      	cbnz	r1, 8007766 <_puts_r+0x9e>
 8007716:	2b00      	cmp	r3, #0
 8007718:	da38      	bge.n	800778c <_puts_r+0xc4>
 800771a:	4622      	mov	r2, r4
 800771c:	210a      	movs	r1, #10
 800771e:	4628      	mov	r0, r5
 8007720:	f000 f906 	bl	8007930 <__swbuf_r>
 8007724:	3001      	adds	r0, #1
 8007726:	d011      	beq.n	800774c <_puts_r+0x84>
 8007728:	250a      	movs	r5, #10
 800772a:	e011      	b.n	8007750 <_puts_r+0x88>
 800772c:	4b1b      	ldr	r3, [pc, #108]	; (800779c <_puts_r+0xd4>)
 800772e:	429c      	cmp	r4, r3
 8007730:	d101      	bne.n	8007736 <_puts_r+0x6e>
 8007732:	68ac      	ldr	r4, [r5, #8]
 8007734:	e7da      	b.n	80076ec <_puts_r+0x24>
 8007736:	4b1a      	ldr	r3, [pc, #104]	; (80077a0 <_puts_r+0xd8>)
 8007738:	429c      	cmp	r4, r3
 800773a:	bf08      	it	eq
 800773c:	68ec      	ldreq	r4, [r5, #12]
 800773e:	e7d5      	b.n	80076ec <_puts_r+0x24>
 8007740:	4621      	mov	r1, r4
 8007742:	4628      	mov	r0, r5
 8007744:	f000 f958 	bl	80079f8 <__swsetup_r>
 8007748:	2800      	cmp	r0, #0
 800774a:	d0dd      	beq.n	8007708 <_puts_r+0x40>
 800774c:	f04f 35ff 	mov.w	r5, #4294967295
 8007750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007752:	07da      	lsls	r2, r3, #31
 8007754:	d405      	bmi.n	8007762 <_puts_r+0x9a>
 8007756:	89a3      	ldrh	r3, [r4, #12]
 8007758:	059b      	lsls	r3, r3, #22
 800775a:	d402      	bmi.n	8007762 <_puts_r+0x9a>
 800775c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800775e:	f7ff ff29 	bl	80075b4 <__retarget_lock_release_recursive>
 8007762:	4628      	mov	r0, r5
 8007764:	bd70      	pop	{r4, r5, r6, pc}
 8007766:	2b00      	cmp	r3, #0
 8007768:	da04      	bge.n	8007774 <_puts_r+0xac>
 800776a:	69a2      	ldr	r2, [r4, #24]
 800776c:	429a      	cmp	r2, r3
 800776e:	dc06      	bgt.n	800777e <_puts_r+0xb6>
 8007770:	290a      	cmp	r1, #10
 8007772:	d004      	beq.n	800777e <_puts_r+0xb6>
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	6022      	str	r2, [r4, #0]
 800777a:	7019      	strb	r1, [r3, #0]
 800777c:	e7c5      	b.n	800770a <_puts_r+0x42>
 800777e:	4622      	mov	r2, r4
 8007780:	4628      	mov	r0, r5
 8007782:	f000 f8d5 	bl	8007930 <__swbuf_r>
 8007786:	3001      	adds	r0, #1
 8007788:	d1bf      	bne.n	800770a <_puts_r+0x42>
 800778a:	e7df      	b.n	800774c <_puts_r+0x84>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	250a      	movs	r5, #10
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	6022      	str	r2, [r4, #0]
 8007794:	701d      	strb	r5, [r3, #0]
 8007796:	e7db      	b.n	8007750 <_puts_r+0x88>
 8007798:	080085c0 	.word	0x080085c0
 800779c:	080085e0 	.word	0x080085e0
 80077a0:	080085a0 	.word	0x080085a0

080077a4 <puts>:
 80077a4:	4b02      	ldr	r3, [pc, #8]	; (80077b0 <puts+0xc>)
 80077a6:	4601      	mov	r1, r0
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	f7ff bf8d 	b.w	80076c8 <_puts_r>
 80077ae:	bf00      	nop
 80077b0:	20000010 	.word	0x20000010

080077b4 <cleanup_glue>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	460c      	mov	r4, r1
 80077b8:	6809      	ldr	r1, [r1, #0]
 80077ba:	4605      	mov	r5, r0
 80077bc:	b109      	cbz	r1, 80077c2 <cleanup_glue+0xe>
 80077be:	f7ff fff9 	bl	80077b4 <cleanup_glue>
 80077c2:	4621      	mov	r1, r4
 80077c4:	4628      	mov	r0, r5
 80077c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077ca:	f000 bad7 	b.w	8007d7c <_free_r>
	...

080077d0 <_reclaim_reent>:
 80077d0:	4b2c      	ldr	r3, [pc, #176]	; (8007884 <_reclaim_reent+0xb4>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4283      	cmp	r3, r0
 80077d6:	b570      	push	{r4, r5, r6, lr}
 80077d8:	4604      	mov	r4, r0
 80077da:	d051      	beq.n	8007880 <_reclaim_reent+0xb0>
 80077dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80077de:	b143      	cbz	r3, 80077f2 <_reclaim_reent+0x22>
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d14a      	bne.n	800787c <_reclaim_reent+0xac>
 80077e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077e8:	6819      	ldr	r1, [r3, #0]
 80077ea:	b111      	cbz	r1, 80077f2 <_reclaim_reent+0x22>
 80077ec:	4620      	mov	r0, r4
 80077ee:	f000 fac5 	bl	8007d7c <_free_r>
 80077f2:	6961      	ldr	r1, [r4, #20]
 80077f4:	b111      	cbz	r1, 80077fc <_reclaim_reent+0x2c>
 80077f6:	4620      	mov	r0, r4
 80077f8:	f000 fac0 	bl	8007d7c <_free_r>
 80077fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80077fe:	b111      	cbz	r1, 8007806 <_reclaim_reent+0x36>
 8007800:	4620      	mov	r0, r4
 8007802:	f000 fabb 	bl	8007d7c <_free_r>
 8007806:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007808:	b111      	cbz	r1, 8007810 <_reclaim_reent+0x40>
 800780a:	4620      	mov	r0, r4
 800780c:	f000 fab6 	bl	8007d7c <_free_r>
 8007810:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007812:	b111      	cbz	r1, 800781a <_reclaim_reent+0x4a>
 8007814:	4620      	mov	r0, r4
 8007816:	f000 fab1 	bl	8007d7c <_free_r>
 800781a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800781c:	b111      	cbz	r1, 8007824 <_reclaim_reent+0x54>
 800781e:	4620      	mov	r0, r4
 8007820:	f000 faac 	bl	8007d7c <_free_r>
 8007824:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007826:	b111      	cbz	r1, 800782e <_reclaim_reent+0x5e>
 8007828:	4620      	mov	r0, r4
 800782a:	f000 faa7 	bl	8007d7c <_free_r>
 800782e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007830:	b111      	cbz	r1, 8007838 <_reclaim_reent+0x68>
 8007832:	4620      	mov	r0, r4
 8007834:	f000 faa2 	bl	8007d7c <_free_r>
 8007838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800783a:	b111      	cbz	r1, 8007842 <_reclaim_reent+0x72>
 800783c:	4620      	mov	r0, r4
 800783e:	f000 fa9d 	bl	8007d7c <_free_r>
 8007842:	69a3      	ldr	r3, [r4, #24]
 8007844:	b1e3      	cbz	r3, 8007880 <_reclaim_reent+0xb0>
 8007846:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007848:	4620      	mov	r0, r4
 800784a:	4798      	blx	r3
 800784c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800784e:	b1b9      	cbz	r1, 8007880 <_reclaim_reent+0xb0>
 8007850:	4620      	mov	r0, r4
 8007852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007856:	f7ff bfad 	b.w	80077b4 <cleanup_glue>
 800785a:	5949      	ldr	r1, [r1, r5]
 800785c:	b941      	cbnz	r1, 8007870 <_reclaim_reent+0xa0>
 800785e:	3504      	adds	r5, #4
 8007860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007862:	2d80      	cmp	r5, #128	; 0x80
 8007864:	68d9      	ldr	r1, [r3, #12]
 8007866:	d1f8      	bne.n	800785a <_reclaim_reent+0x8a>
 8007868:	4620      	mov	r0, r4
 800786a:	f000 fa87 	bl	8007d7c <_free_r>
 800786e:	e7ba      	b.n	80077e6 <_reclaim_reent+0x16>
 8007870:	680e      	ldr	r6, [r1, #0]
 8007872:	4620      	mov	r0, r4
 8007874:	f000 fa82 	bl	8007d7c <_free_r>
 8007878:	4631      	mov	r1, r6
 800787a:	e7ef      	b.n	800785c <_reclaim_reent+0x8c>
 800787c:	2500      	movs	r5, #0
 800787e:	e7ef      	b.n	8007860 <_reclaim_reent+0x90>
 8007880:	bd70      	pop	{r4, r5, r6, pc}
 8007882:	bf00      	nop
 8007884:	20000010 	.word	0x20000010

08007888 <_sbrk_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4d06      	ldr	r5, [pc, #24]	; (80078a4 <_sbrk_r+0x1c>)
 800788c:	2300      	movs	r3, #0
 800788e:	4604      	mov	r4, r0
 8007890:	4608      	mov	r0, r1
 8007892:	602b      	str	r3, [r5, #0]
 8007894:	f7f9 fe76 	bl	8001584 <_sbrk>
 8007898:	1c43      	adds	r3, r0, #1
 800789a:	d102      	bne.n	80078a2 <_sbrk_r+0x1a>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	b103      	cbz	r3, 80078a2 <_sbrk_r+0x1a>
 80078a0:	6023      	str	r3, [r4, #0]
 80078a2:	bd38      	pop	{r3, r4, r5, pc}
 80078a4:	20004d20 	.word	0x20004d20

080078a8 <__sread>:
 80078a8:	b510      	push	{r4, lr}
 80078aa:	460c      	mov	r4, r1
 80078ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b0:	f000 fda2 	bl	80083f8 <_read_r>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	bfab      	itete	ge
 80078b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078ba:	89a3      	ldrhlt	r3, [r4, #12]
 80078bc:	181b      	addge	r3, r3, r0
 80078be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078c2:	bfac      	ite	ge
 80078c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80078c6:	81a3      	strhlt	r3, [r4, #12]
 80078c8:	bd10      	pop	{r4, pc}

080078ca <__swrite>:
 80078ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ce:	461f      	mov	r7, r3
 80078d0:	898b      	ldrh	r3, [r1, #12]
 80078d2:	05db      	lsls	r3, r3, #23
 80078d4:	4605      	mov	r5, r0
 80078d6:	460c      	mov	r4, r1
 80078d8:	4616      	mov	r6, r2
 80078da:	d505      	bpl.n	80078e8 <__swrite+0x1e>
 80078dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078e0:	2302      	movs	r3, #2
 80078e2:	2200      	movs	r2, #0
 80078e4:	f000 f9c8 	bl	8007c78 <_lseek_r>
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078f2:	81a3      	strh	r3, [r4, #12]
 80078f4:	4632      	mov	r2, r6
 80078f6:	463b      	mov	r3, r7
 80078f8:	4628      	mov	r0, r5
 80078fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078fe:	f000 b869 	b.w	80079d4 <_write_r>

08007902 <__sseek>:
 8007902:	b510      	push	{r4, lr}
 8007904:	460c      	mov	r4, r1
 8007906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800790a:	f000 f9b5 	bl	8007c78 <_lseek_r>
 800790e:	1c43      	adds	r3, r0, #1
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	bf15      	itete	ne
 8007914:	6560      	strne	r0, [r4, #84]	; 0x54
 8007916:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800791a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800791e:	81a3      	strheq	r3, [r4, #12]
 8007920:	bf18      	it	ne
 8007922:	81a3      	strhne	r3, [r4, #12]
 8007924:	bd10      	pop	{r4, pc}

08007926 <__sclose>:
 8007926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800792a:	f000 b8d3 	b.w	8007ad4 <_close_r>
	...

08007930 <__swbuf_r>:
 8007930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007932:	460e      	mov	r6, r1
 8007934:	4614      	mov	r4, r2
 8007936:	4605      	mov	r5, r0
 8007938:	b118      	cbz	r0, 8007942 <__swbuf_r+0x12>
 800793a:	6983      	ldr	r3, [r0, #24]
 800793c:	b90b      	cbnz	r3, 8007942 <__swbuf_r+0x12>
 800793e:	f7ff fd75 	bl	800742c <__sinit>
 8007942:	4b21      	ldr	r3, [pc, #132]	; (80079c8 <__swbuf_r+0x98>)
 8007944:	429c      	cmp	r4, r3
 8007946:	d12b      	bne.n	80079a0 <__swbuf_r+0x70>
 8007948:	686c      	ldr	r4, [r5, #4]
 800794a:	69a3      	ldr	r3, [r4, #24]
 800794c:	60a3      	str	r3, [r4, #8]
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	071a      	lsls	r2, r3, #28
 8007952:	d52f      	bpl.n	80079b4 <__swbuf_r+0x84>
 8007954:	6923      	ldr	r3, [r4, #16]
 8007956:	b36b      	cbz	r3, 80079b4 <__swbuf_r+0x84>
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	6820      	ldr	r0, [r4, #0]
 800795c:	1ac0      	subs	r0, r0, r3
 800795e:	6963      	ldr	r3, [r4, #20]
 8007960:	b2f6      	uxtb	r6, r6
 8007962:	4283      	cmp	r3, r0
 8007964:	4637      	mov	r7, r6
 8007966:	dc04      	bgt.n	8007972 <__swbuf_r+0x42>
 8007968:	4621      	mov	r1, r4
 800796a:	4628      	mov	r0, r5
 800796c:	f000 f948 	bl	8007c00 <_fflush_r>
 8007970:	bb30      	cbnz	r0, 80079c0 <__swbuf_r+0x90>
 8007972:	68a3      	ldr	r3, [r4, #8]
 8007974:	3b01      	subs	r3, #1
 8007976:	60a3      	str	r3, [r4, #8]
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	6022      	str	r2, [r4, #0]
 800797e:	701e      	strb	r6, [r3, #0]
 8007980:	6963      	ldr	r3, [r4, #20]
 8007982:	3001      	adds	r0, #1
 8007984:	4283      	cmp	r3, r0
 8007986:	d004      	beq.n	8007992 <__swbuf_r+0x62>
 8007988:	89a3      	ldrh	r3, [r4, #12]
 800798a:	07db      	lsls	r3, r3, #31
 800798c:	d506      	bpl.n	800799c <__swbuf_r+0x6c>
 800798e:	2e0a      	cmp	r6, #10
 8007990:	d104      	bne.n	800799c <__swbuf_r+0x6c>
 8007992:	4621      	mov	r1, r4
 8007994:	4628      	mov	r0, r5
 8007996:	f000 f933 	bl	8007c00 <_fflush_r>
 800799a:	b988      	cbnz	r0, 80079c0 <__swbuf_r+0x90>
 800799c:	4638      	mov	r0, r7
 800799e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a0:	4b0a      	ldr	r3, [pc, #40]	; (80079cc <__swbuf_r+0x9c>)
 80079a2:	429c      	cmp	r4, r3
 80079a4:	d101      	bne.n	80079aa <__swbuf_r+0x7a>
 80079a6:	68ac      	ldr	r4, [r5, #8]
 80079a8:	e7cf      	b.n	800794a <__swbuf_r+0x1a>
 80079aa:	4b09      	ldr	r3, [pc, #36]	; (80079d0 <__swbuf_r+0xa0>)
 80079ac:	429c      	cmp	r4, r3
 80079ae:	bf08      	it	eq
 80079b0:	68ec      	ldreq	r4, [r5, #12]
 80079b2:	e7ca      	b.n	800794a <__swbuf_r+0x1a>
 80079b4:	4621      	mov	r1, r4
 80079b6:	4628      	mov	r0, r5
 80079b8:	f000 f81e 	bl	80079f8 <__swsetup_r>
 80079bc:	2800      	cmp	r0, #0
 80079be:	d0cb      	beq.n	8007958 <__swbuf_r+0x28>
 80079c0:	f04f 37ff 	mov.w	r7, #4294967295
 80079c4:	e7ea      	b.n	800799c <__swbuf_r+0x6c>
 80079c6:	bf00      	nop
 80079c8:	080085c0 	.word	0x080085c0
 80079cc:	080085e0 	.word	0x080085e0
 80079d0:	080085a0 	.word	0x080085a0

080079d4 <_write_r>:
 80079d4:	b538      	push	{r3, r4, r5, lr}
 80079d6:	4d07      	ldr	r5, [pc, #28]	; (80079f4 <_write_r+0x20>)
 80079d8:	4604      	mov	r4, r0
 80079da:	4608      	mov	r0, r1
 80079dc:	4611      	mov	r1, r2
 80079de:	2200      	movs	r2, #0
 80079e0:	602a      	str	r2, [r5, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	f7f8 fdd0 	bl	8000588 <_write>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	d102      	bne.n	80079f2 <_write_r+0x1e>
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	b103      	cbz	r3, 80079f2 <_write_r+0x1e>
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	20004d20 	.word	0x20004d20

080079f8 <__swsetup_r>:
 80079f8:	4b32      	ldr	r3, [pc, #200]	; (8007ac4 <__swsetup_r+0xcc>)
 80079fa:	b570      	push	{r4, r5, r6, lr}
 80079fc:	681d      	ldr	r5, [r3, #0]
 80079fe:	4606      	mov	r6, r0
 8007a00:	460c      	mov	r4, r1
 8007a02:	b125      	cbz	r5, 8007a0e <__swsetup_r+0x16>
 8007a04:	69ab      	ldr	r3, [r5, #24]
 8007a06:	b913      	cbnz	r3, 8007a0e <__swsetup_r+0x16>
 8007a08:	4628      	mov	r0, r5
 8007a0a:	f7ff fd0f 	bl	800742c <__sinit>
 8007a0e:	4b2e      	ldr	r3, [pc, #184]	; (8007ac8 <__swsetup_r+0xd0>)
 8007a10:	429c      	cmp	r4, r3
 8007a12:	d10f      	bne.n	8007a34 <__swsetup_r+0x3c>
 8007a14:	686c      	ldr	r4, [r5, #4]
 8007a16:	89a3      	ldrh	r3, [r4, #12]
 8007a18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a1c:	0719      	lsls	r1, r3, #28
 8007a1e:	d42c      	bmi.n	8007a7a <__swsetup_r+0x82>
 8007a20:	06dd      	lsls	r5, r3, #27
 8007a22:	d411      	bmi.n	8007a48 <__swsetup_r+0x50>
 8007a24:	2309      	movs	r3, #9
 8007a26:	6033      	str	r3, [r6, #0]
 8007a28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a2c:	81a3      	strh	r3, [r4, #12]
 8007a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a32:	e03e      	b.n	8007ab2 <__swsetup_r+0xba>
 8007a34:	4b25      	ldr	r3, [pc, #148]	; (8007acc <__swsetup_r+0xd4>)
 8007a36:	429c      	cmp	r4, r3
 8007a38:	d101      	bne.n	8007a3e <__swsetup_r+0x46>
 8007a3a:	68ac      	ldr	r4, [r5, #8]
 8007a3c:	e7eb      	b.n	8007a16 <__swsetup_r+0x1e>
 8007a3e:	4b24      	ldr	r3, [pc, #144]	; (8007ad0 <__swsetup_r+0xd8>)
 8007a40:	429c      	cmp	r4, r3
 8007a42:	bf08      	it	eq
 8007a44:	68ec      	ldreq	r4, [r5, #12]
 8007a46:	e7e6      	b.n	8007a16 <__swsetup_r+0x1e>
 8007a48:	0758      	lsls	r0, r3, #29
 8007a4a:	d512      	bpl.n	8007a72 <__swsetup_r+0x7a>
 8007a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a4e:	b141      	cbz	r1, 8007a62 <__swsetup_r+0x6a>
 8007a50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a54:	4299      	cmp	r1, r3
 8007a56:	d002      	beq.n	8007a5e <__swsetup_r+0x66>
 8007a58:	4630      	mov	r0, r6
 8007a5a:	f000 f98f 	bl	8007d7c <_free_r>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	6363      	str	r3, [r4, #52]	; 0x34
 8007a62:	89a3      	ldrh	r3, [r4, #12]
 8007a64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a68:	81a3      	strh	r3, [r4, #12]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	6063      	str	r3, [r4, #4]
 8007a6e:	6923      	ldr	r3, [r4, #16]
 8007a70:	6023      	str	r3, [r4, #0]
 8007a72:	89a3      	ldrh	r3, [r4, #12]
 8007a74:	f043 0308 	orr.w	r3, r3, #8
 8007a78:	81a3      	strh	r3, [r4, #12]
 8007a7a:	6923      	ldr	r3, [r4, #16]
 8007a7c:	b94b      	cbnz	r3, 8007a92 <__swsetup_r+0x9a>
 8007a7e:	89a3      	ldrh	r3, [r4, #12]
 8007a80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a88:	d003      	beq.n	8007a92 <__swsetup_r+0x9a>
 8007a8a:	4621      	mov	r1, r4
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	f000 f929 	bl	8007ce4 <__smakebuf_r>
 8007a92:	89a0      	ldrh	r0, [r4, #12]
 8007a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a98:	f010 0301 	ands.w	r3, r0, #1
 8007a9c:	d00a      	beq.n	8007ab4 <__swsetup_r+0xbc>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	60a3      	str	r3, [r4, #8]
 8007aa2:	6963      	ldr	r3, [r4, #20]
 8007aa4:	425b      	negs	r3, r3
 8007aa6:	61a3      	str	r3, [r4, #24]
 8007aa8:	6923      	ldr	r3, [r4, #16]
 8007aaa:	b943      	cbnz	r3, 8007abe <__swsetup_r+0xc6>
 8007aac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ab0:	d1ba      	bne.n	8007a28 <__swsetup_r+0x30>
 8007ab2:	bd70      	pop	{r4, r5, r6, pc}
 8007ab4:	0781      	lsls	r1, r0, #30
 8007ab6:	bf58      	it	pl
 8007ab8:	6963      	ldrpl	r3, [r4, #20]
 8007aba:	60a3      	str	r3, [r4, #8]
 8007abc:	e7f4      	b.n	8007aa8 <__swsetup_r+0xb0>
 8007abe:	2000      	movs	r0, #0
 8007ac0:	e7f7      	b.n	8007ab2 <__swsetup_r+0xba>
 8007ac2:	bf00      	nop
 8007ac4:	20000010 	.word	0x20000010
 8007ac8:	080085c0 	.word	0x080085c0
 8007acc:	080085e0 	.word	0x080085e0
 8007ad0:	080085a0 	.word	0x080085a0

08007ad4 <_close_r>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	4d06      	ldr	r5, [pc, #24]	; (8007af0 <_close_r+0x1c>)
 8007ad8:	2300      	movs	r3, #0
 8007ada:	4604      	mov	r4, r0
 8007adc:	4608      	mov	r0, r1
 8007ade:	602b      	str	r3, [r5, #0]
 8007ae0:	f7f9 fd1b 	bl	800151a <_close>
 8007ae4:	1c43      	adds	r3, r0, #1
 8007ae6:	d102      	bne.n	8007aee <_close_r+0x1a>
 8007ae8:	682b      	ldr	r3, [r5, #0]
 8007aea:	b103      	cbz	r3, 8007aee <_close_r+0x1a>
 8007aec:	6023      	str	r3, [r4, #0]
 8007aee:	bd38      	pop	{r3, r4, r5, pc}
 8007af0:	20004d20 	.word	0x20004d20

08007af4 <__sflush_r>:
 8007af4:	898a      	ldrh	r2, [r1, #12]
 8007af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007afa:	4605      	mov	r5, r0
 8007afc:	0710      	lsls	r0, r2, #28
 8007afe:	460c      	mov	r4, r1
 8007b00:	d458      	bmi.n	8007bb4 <__sflush_r+0xc0>
 8007b02:	684b      	ldr	r3, [r1, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	dc05      	bgt.n	8007b14 <__sflush_r+0x20>
 8007b08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	dc02      	bgt.n	8007b14 <__sflush_r+0x20>
 8007b0e:	2000      	movs	r0, #0
 8007b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b16:	2e00      	cmp	r6, #0
 8007b18:	d0f9      	beq.n	8007b0e <__sflush_r+0x1a>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b20:	682f      	ldr	r7, [r5, #0]
 8007b22:	602b      	str	r3, [r5, #0]
 8007b24:	d032      	beq.n	8007b8c <__sflush_r+0x98>
 8007b26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b28:	89a3      	ldrh	r3, [r4, #12]
 8007b2a:	075a      	lsls	r2, r3, #29
 8007b2c:	d505      	bpl.n	8007b3a <__sflush_r+0x46>
 8007b2e:	6863      	ldr	r3, [r4, #4]
 8007b30:	1ac0      	subs	r0, r0, r3
 8007b32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b34:	b10b      	cbz	r3, 8007b3a <__sflush_r+0x46>
 8007b36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b38:	1ac0      	subs	r0, r0, r3
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b40:	6a21      	ldr	r1, [r4, #32]
 8007b42:	4628      	mov	r0, r5
 8007b44:	47b0      	blx	r6
 8007b46:	1c43      	adds	r3, r0, #1
 8007b48:	89a3      	ldrh	r3, [r4, #12]
 8007b4a:	d106      	bne.n	8007b5a <__sflush_r+0x66>
 8007b4c:	6829      	ldr	r1, [r5, #0]
 8007b4e:	291d      	cmp	r1, #29
 8007b50:	d82c      	bhi.n	8007bac <__sflush_r+0xb8>
 8007b52:	4a2a      	ldr	r2, [pc, #168]	; (8007bfc <__sflush_r+0x108>)
 8007b54:	40ca      	lsrs	r2, r1
 8007b56:	07d6      	lsls	r6, r2, #31
 8007b58:	d528      	bpl.n	8007bac <__sflush_r+0xb8>
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	6062      	str	r2, [r4, #4]
 8007b5e:	04d9      	lsls	r1, r3, #19
 8007b60:	6922      	ldr	r2, [r4, #16]
 8007b62:	6022      	str	r2, [r4, #0]
 8007b64:	d504      	bpl.n	8007b70 <__sflush_r+0x7c>
 8007b66:	1c42      	adds	r2, r0, #1
 8007b68:	d101      	bne.n	8007b6e <__sflush_r+0x7a>
 8007b6a:	682b      	ldr	r3, [r5, #0]
 8007b6c:	b903      	cbnz	r3, 8007b70 <__sflush_r+0x7c>
 8007b6e:	6560      	str	r0, [r4, #84]	; 0x54
 8007b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b72:	602f      	str	r7, [r5, #0]
 8007b74:	2900      	cmp	r1, #0
 8007b76:	d0ca      	beq.n	8007b0e <__sflush_r+0x1a>
 8007b78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b7c:	4299      	cmp	r1, r3
 8007b7e:	d002      	beq.n	8007b86 <__sflush_r+0x92>
 8007b80:	4628      	mov	r0, r5
 8007b82:	f000 f8fb 	bl	8007d7c <_free_r>
 8007b86:	2000      	movs	r0, #0
 8007b88:	6360      	str	r0, [r4, #52]	; 0x34
 8007b8a:	e7c1      	b.n	8007b10 <__sflush_r+0x1c>
 8007b8c:	6a21      	ldr	r1, [r4, #32]
 8007b8e:	2301      	movs	r3, #1
 8007b90:	4628      	mov	r0, r5
 8007b92:	47b0      	blx	r6
 8007b94:	1c41      	adds	r1, r0, #1
 8007b96:	d1c7      	bne.n	8007b28 <__sflush_r+0x34>
 8007b98:	682b      	ldr	r3, [r5, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d0c4      	beq.n	8007b28 <__sflush_r+0x34>
 8007b9e:	2b1d      	cmp	r3, #29
 8007ba0:	d001      	beq.n	8007ba6 <__sflush_r+0xb2>
 8007ba2:	2b16      	cmp	r3, #22
 8007ba4:	d101      	bne.n	8007baa <__sflush_r+0xb6>
 8007ba6:	602f      	str	r7, [r5, #0]
 8007ba8:	e7b1      	b.n	8007b0e <__sflush_r+0x1a>
 8007baa:	89a3      	ldrh	r3, [r4, #12]
 8007bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bb0:	81a3      	strh	r3, [r4, #12]
 8007bb2:	e7ad      	b.n	8007b10 <__sflush_r+0x1c>
 8007bb4:	690f      	ldr	r7, [r1, #16]
 8007bb6:	2f00      	cmp	r7, #0
 8007bb8:	d0a9      	beq.n	8007b0e <__sflush_r+0x1a>
 8007bba:	0793      	lsls	r3, r2, #30
 8007bbc:	680e      	ldr	r6, [r1, #0]
 8007bbe:	bf08      	it	eq
 8007bc0:	694b      	ldreq	r3, [r1, #20]
 8007bc2:	600f      	str	r7, [r1, #0]
 8007bc4:	bf18      	it	ne
 8007bc6:	2300      	movne	r3, #0
 8007bc8:	eba6 0807 	sub.w	r8, r6, r7
 8007bcc:	608b      	str	r3, [r1, #8]
 8007bce:	f1b8 0f00 	cmp.w	r8, #0
 8007bd2:	dd9c      	ble.n	8007b0e <__sflush_r+0x1a>
 8007bd4:	6a21      	ldr	r1, [r4, #32]
 8007bd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bd8:	4643      	mov	r3, r8
 8007bda:	463a      	mov	r2, r7
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b0      	blx	r6
 8007be0:	2800      	cmp	r0, #0
 8007be2:	dc06      	bgt.n	8007bf2 <__sflush_r+0xfe>
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bea:	81a3      	strh	r3, [r4, #12]
 8007bec:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf0:	e78e      	b.n	8007b10 <__sflush_r+0x1c>
 8007bf2:	4407      	add	r7, r0
 8007bf4:	eba8 0800 	sub.w	r8, r8, r0
 8007bf8:	e7e9      	b.n	8007bce <__sflush_r+0xda>
 8007bfa:	bf00      	nop
 8007bfc:	20400001 	.word	0x20400001

08007c00 <_fflush_r>:
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	690b      	ldr	r3, [r1, #16]
 8007c04:	4605      	mov	r5, r0
 8007c06:	460c      	mov	r4, r1
 8007c08:	b913      	cbnz	r3, 8007c10 <_fflush_r+0x10>
 8007c0a:	2500      	movs	r5, #0
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	bd38      	pop	{r3, r4, r5, pc}
 8007c10:	b118      	cbz	r0, 8007c1a <_fflush_r+0x1a>
 8007c12:	6983      	ldr	r3, [r0, #24]
 8007c14:	b90b      	cbnz	r3, 8007c1a <_fflush_r+0x1a>
 8007c16:	f7ff fc09 	bl	800742c <__sinit>
 8007c1a:	4b14      	ldr	r3, [pc, #80]	; (8007c6c <_fflush_r+0x6c>)
 8007c1c:	429c      	cmp	r4, r3
 8007c1e:	d11b      	bne.n	8007c58 <_fflush_r+0x58>
 8007c20:	686c      	ldr	r4, [r5, #4]
 8007c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d0ef      	beq.n	8007c0a <_fflush_r+0xa>
 8007c2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c2c:	07d0      	lsls	r0, r2, #31
 8007c2e:	d404      	bmi.n	8007c3a <_fflush_r+0x3a>
 8007c30:	0599      	lsls	r1, r3, #22
 8007c32:	d402      	bmi.n	8007c3a <_fflush_r+0x3a>
 8007c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c36:	f7ff fcbc 	bl	80075b2 <__retarget_lock_acquire_recursive>
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	f7ff ff59 	bl	8007af4 <__sflush_r>
 8007c42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c44:	07da      	lsls	r2, r3, #31
 8007c46:	4605      	mov	r5, r0
 8007c48:	d4e0      	bmi.n	8007c0c <_fflush_r+0xc>
 8007c4a:	89a3      	ldrh	r3, [r4, #12]
 8007c4c:	059b      	lsls	r3, r3, #22
 8007c4e:	d4dd      	bmi.n	8007c0c <_fflush_r+0xc>
 8007c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c52:	f7ff fcaf 	bl	80075b4 <__retarget_lock_release_recursive>
 8007c56:	e7d9      	b.n	8007c0c <_fflush_r+0xc>
 8007c58:	4b05      	ldr	r3, [pc, #20]	; (8007c70 <_fflush_r+0x70>)
 8007c5a:	429c      	cmp	r4, r3
 8007c5c:	d101      	bne.n	8007c62 <_fflush_r+0x62>
 8007c5e:	68ac      	ldr	r4, [r5, #8]
 8007c60:	e7df      	b.n	8007c22 <_fflush_r+0x22>
 8007c62:	4b04      	ldr	r3, [pc, #16]	; (8007c74 <_fflush_r+0x74>)
 8007c64:	429c      	cmp	r4, r3
 8007c66:	bf08      	it	eq
 8007c68:	68ec      	ldreq	r4, [r5, #12]
 8007c6a:	e7da      	b.n	8007c22 <_fflush_r+0x22>
 8007c6c:	080085c0 	.word	0x080085c0
 8007c70:	080085e0 	.word	0x080085e0
 8007c74:	080085a0 	.word	0x080085a0

08007c78 <_lseek_r>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	4d07      	ldr	r5, [pc, #28]	; (8007c98 <_lseek_r+0x20>)
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	4608      	mov	r0, r1
 8007c80:	4611      	mov	r1, r2
 8007c82:	2200      	movs	r2, #0
 8007c84:	602a      	str	r2, [r5, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	f7f9 fc6e 	bl	8001568 <_lseek>
 8007c8c:	1c43      	adds	r3, r0, #1
 8007c8e:	d102      	bne.n	8007c96 <_lseek_r+0x1e>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	b103      	cbz	r3, 8007c96 <_lseek_r+0x1e>
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	20004d20 	.word	0x20004d20

08007c9c <__swhatbuf_r>:
 8007c9c:	b570      	push	{r4, r5, r6, lr}
 8007c9e:	460e      	mov	r6, r1
 8007ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca4:	2900      	cmp	r1, #0
 8007ca6:	b096      	sub	sp, #88	; 0x58
 8007ca8:	4614      	mov	r4, r2
 8007caa:	461d      	mov	r5, r3
 8007cac:	da07      	bge.n	8007cbe <__swhatbuf_r+0x22>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	602b      	str	r3, [r5, #0]
 8007cb2:	89b3      	ldrh	r3, [r6, #12]
 8007cb4:	061a      	lsls	r2, r3, #24
 8007cb6:	d410      	bmi.n	8007cda <__swhatbuf_r+0x3e>
 8007cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cbc:	e00e      	b.n	8007cdc <__swhatbuf_r+0x40>
 8007cbe:	466a      	mov	r2, sp
 8007cc0:	f000 fbac 	bl	800841c <_fstat_r>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	dbf2      	blt.n	8007cae <__swhatbuf_r+0x12>
 8007cc8:	9a01      	ldr	r2, [sp, #4]
 8007cca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007cce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007cd2:	425a      	negs	r2, r3
 8007cd4:	415a      	adcs	r2, r3
 8007cd6:	602a      	str	r2, [r5, #0]
 8007cd8:	e7ee      	b.n	8007cb8 <__swhatbuf_r+0x1c>
 8007cda:	2340      	movs	r3, #64	; 0x40
 8007cdc:	2000      	movs	r0, #0
 8007cde:	6023      	str	r3, [r4, #0]
 8007ce0:	b016      	add	sp, #88	; 0x58
 8007ce2:	bd70      	pop	{r4, r5, r6, pc}

08007ce4 <__smakebuf_r>:
 8007ce4:	898b      	ldrh	r3, [r1, #12]
 8007ce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ce8:	079d      	lsls	r5, r3, #30
 8007cea:	4606      	mov	r6, r0
 8007cec:	460c      	mov	r4, r1
 8007cee:	d507      	bpl.n	8007d00 <__smakebuf_r+0x1c>
 8007cf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007cf4:	6023      	str	r3, [r4, #0]
 8007cf6:	6123      	str	r3, [r4, #16]
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	6163      	str	r3, [r4, #20]
 8007cfc:	b002      	add	sp, #8
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}
 8007d00:	ab01      	add	r3, sp, #4
 8007d02:	466a      	mov	r2, sp
 8007d04:	f7ff ffca 	bl	8007c9c <__swhatbuf_r>
 8007d08:	9900      	ldr	r1, [sp, #0]
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	f7ff fc69 	bl	80075e4 <_malloc_r>
 8007d12:	b948      	cbnz	r0, 8007d28 <__smakebuf_r+0x44>
 8007d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d18:	059a      	lsls	r2, r3, #22
 8007d1a:	d4ef      	bmi.n	8007cfc <__smakebuf_r+0x18>
 8007d1c:	f023 0303 	bic.w	r3, r3, #3
 8007d20:	f043 0302 	orr.w	r3, r3, #2
 8007d24:	81a3      	strh	r3, [r4, #12]
 8007d26:	e7e3      	b.n	8007cf0 <__smakebuf_r+0xc>
 8007d28:	4b0d      	ldr	r3, [pc, #52]	; (8007d60 <__smakebuf_r+0x7c>)
 8007d2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	6020      	str	r0, [r4, #0]
 8007d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d34:	81a3      	strh	r3, [r4, #12]
 8007d36:	9b00      	ldr	r3, [sp, #0]
 8007d38:	6163      	str	r3, [r4, #20]
 8007d3a:	9b01      	ldr	r3, [sp, #4]
 8007d3c:	6120      	str	r0, [r4, #16]
 8007d3e:	b15b      	cbz	r3, 8007d58 <__smakebuf_r+0x74>
 8007d40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d44:	4630      	mov	r0, r6
 8007d46:	f000 fb7b 	bl	8008440 <_isatty_r>
 8007d4a:	b128      	cbz	r0, 8007d58 <__smakebuf_r+0x74>
 8007d4c:	89a3      	ldrh	r3, [r4, #12]
 8007d4e:	f023 0303 	bic.w	r3, r3, #3
 8007d52:	f043 0301 	orr.w	r3, r3, #1
 8007d56:	81a3      	strh	r3, [r4, #12]
 8007d58:	89a0      	ldrh	r0, [r4, #12]
 8007d5a:	4305      	orrs	r5, r0
 8007d5c:	81a5      	strh	r5, [r4, #12]
 8007d5e:	e7cd      	b.n	8007cfc <__smakebuf_r+0x18>
 8007d60:	080073c5 	.word	0x080073c5

08007d64 <__malloc_lock>:
 8007d64:	4801      	ldr	r0, [pc, #4]	; (8007d6c <__malloc_lock+0x8>)
 8007d66:	f7ff bc24 	b.w	80075b2 <__retarget_lock_acquire_recursive>
 8007d6a:	bf00      	nop
 8007d6c:	20004d18 	.word	0x20004d18

08007d70 <__malloc_unlock>:
 8007d70:	4801      	ldr	r0, [pc, #4]	; (8007d78 <__malloc_unlock+0x8>)
 8007d72:	f7ff bc1f 	b.w	80075b4 <__retarget_lock_release_recursive>
 8007d76:	bf00      	nop
 8007d78:	20004d18 	.word	0x20004d18

08007d7c <_free_r>:
 8007d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d7e:	2900      	cmp	r1, #0
 8007d80:	d048      	beq.n	8007e14 <_free_r+0x98>
 8007d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d86:	9001      	str	r0, [sp, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8007d8e:	bfb8      	it	lt
 8007d90:	18e4      	addlt	r4, r4, r3
 8007d92:	f7ff ffe7 	bl	8007d64 <__malloc_lock>
 8007d96:	4a20      	ldr	r2, [pc, #128]	; (8007e18 <_free_r+0x9c>)
 8007d98:	9801      	ldr	r0, [sp, #4]
 8007d9a:	6813      	ldr	r3, [r2, #0]
 8007d9c:	4615      	mov	r5, r2
 8007d9e:	b933      	cbnz	r3, 8007dae <_free_r+0x32>
 8007da0:	6063      	str	r3, [r4, #4]
 8007da2:	6014      	str	r4, [r2, #0]
 8007da4:	b003      	add	sp, #12
 8007da6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007daa:	f7ff bfe1 	b.w	8007d70 <__malloc_unlock>
 8007dae:	42a3      	cmp	r3, r4
 8007db0:	d90b      	bls.n	8007dca <_free_r+0x4e>
 8007db2:	6821      	ldr	r1, [r4, #0]
 8007db4:	1862      	adds	r2, r4, r1
 8007db6:	4293      	cmp	r3, r2
 8007db8:	bf04      	itt	eq
 8007dba:	681a      	ldreq	r2, [r3, #0]
 8007dbc:	685b      	ldreq	r3, [r3, #4]
 8007dbe:	6063      	str	r3, [r4, #4]
 8007dc0:	bf04      	itt	eq
 8007dc2:	1852      	addeq	r2, r2, r1
 8007dc4:	6022      	streq	r2, [r4, #0]
 8007dc6:	602c      	str	r4, [r5, #0]
 8007dc8:	e7ec      	b.n	8007da4 <_free_r+0x28>
 8007dca:	461a      	mov	r2, r3
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	b10b      	cbz	r3, 8007dd4 <_free_r+0x58>
 8007dd0:	42a3      	cmp	r3, r4
 8007dd2:	d9fa      	bls.n	8007dca <_free_r+0x4e>
 8007dd4:	6811      	ldr	r1, [r2, #0]
 8007dd6:	1855      	adds	r5, r2, r1
 8007dd8:	42a5      	cmp	r5, r4
 8007dda:	d10b      	bne.n	8007df4 <_free_r+0x78>
 8007ddc:	6824      	ldr	r4, [r4, #0]
 8007dde:	4421      	add	r1, r4
 8007de0:	1854      	adds	r4, r2, r1
 8007de2:	42a3      	cmp	r3, r4
 8007de4:	6011      	str	r1, [r2, #0]
 8007de6:	d1dd      	bne.n	8007da4 <_free_r+0x28>
 8007de8:	681c      	ldr	r4, [r3, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	6053      	str	r3, [r2, #4]
 8007dee:	4421      	add	r1, r4
 8007df0:	6011      	str	r1, [r2, #0]
 8007df2:	e7d7      	b.n	8007da4 <_free_r+0x28>
 8007df4:	d902      	bls.n	8007dfc <_free_r+0x80>
 8007df6:	230c      	movs	r3, #12
 8007df8:	6003      	str	r3, [r0, #0]
 8007dfa:	e7d3      	b.n	8007da4 <_free_r+0x28>
 8007dfc:	6825      	ldr	r5, [r4, #0]
 8007dfe:	1961      	adds	r1, r4, r5
 8007e00:	428b      	cmp	r3, r1
 8007e02:	bf04      	itt	eq
 8007e04:	6819      	ldreq	r1, [r3, #0]
 8007e06:	685b      	ldreq	r3, [r3, #4]
 8007e08:	6063      	str	r3, [r4, #4]
 8007e0a:	bf04      	itt	eq
 8007e0c:	1949      	addeq	r1, r1, r5
 8007e0e:	6021      	streq	r1, [r4, #0]
 8007e10:	6054      	str	r4, [r2, #4]
 8007e12:	e7c7      	b.n	8007da4 <_free_r+0x28>
 8007e14:	b003      	add	sp, #12
 8007e16:	bd30      	pop	{r4, r5, pc}
 8007e18:	20004a88 	.word	0x20004a88

08007e1c <__sfputc_r>:
 8007e1c:	6893      	ldr	r3, [r2, #8]
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	b410      	push	{r4}
 8007e24:	6093      	str	r3, [r2, #8]
 8007e26:	da08      	bge.n	8007e3a <__sfputc_r+0x1e>
 8007e28:	6994      	ldr	r4, [r2, #24]
 8007e2a:	42a3      	cmp	r3, r4
 8007e2c:	db01      	blt.n	8007e32 <__sfputc_r+0x16>
 8007e2e:	290a      	cmp	r1, #10
 8007e30:	d103      	bne.n	8007e3a <__sfputc_r+0x1e>
 8007e32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e36:	f7ff bd7b 	b.w	8007930 <__swbuf_r>
 8007e3a:	6813      	ldr	r3, [r2, #0]
 8007e3c:	1c58      	adds	r0, r3, #1
 8007e3e:	6010      	str	r0, [r2, #0]
 8007e40:	7019      	strb	r1, [r3, #0]
 8007e42:	4608      	mov	r0, r1
 8007e44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <__sfputs_r>:
 8007e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4c:	4606      	mov	r6, r0
 8007e4e:	460f      	mov	r7, r1
 8007e50:	4614      	mov	r4, r2
 8007e52:	18d5      	adds	r5, r2, r3
 8007e54:	42ac      	cmp	r4, r5
 8007e56:	d101      	bne.n	8007e5c <__sfputs_r+0x12>
 8007e58:	2000      	movs	r0, #0
 8007e5a:	e007      	b.n	8007e6c <__sfputs_r+0x22>
 8007e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e60:	463a      	mov	r2, r7
 8007e62:	4630      	mov	r0, r6
 8007e64:	f7ff ffda 	bl	8007e1c <__sfputc_r>
 8007e68:	1c43      	adds	r3, r0, #1
 8007e6a:	d1f3      	bne.n	8007e54 <__sfputs_r+0xa>
 8007e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e70 <_vfiprintf_r>:
 8007e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	460d      	mov	r5, r1
 8007e76:	b09d      	sub	sp, #116	; 0x74
 8007e78:	4614      	mov	r4, r2
 8007e7a:	4698      	mov	r8, r3
 8007e7c:	4606      	mov	r6, r0
 8007e7e:	b118      	cbz	r0, 8007e88 <_vfiprintf_r+0x18>
 8007e80:	6983      	ldr	r3, [r0, #24]
 8007e82:	b90b      	cbnz	r3, 8007e88 <_vfiprintf_r+0x18>
 8007e84:	f7ff fad2 	bl	800742c <__sinit>
 8007e88:	4b89      	ldr	r3, [pc, #548]	; (80080b0 <_vfiprintf_r+0x240>)
 8007e8a:	429d      	cmp	r5, r3
 8007e8c:	d11b      	bne.n	8007ec6 <_vfiprintf_r+0x56>
 8007e8e:	6875      	ldr	r5, [r6, #4]
 8007e90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e92:	07d9      	lsls	r1, r3, #31
 8007e94:	d405      	bmi.n	8007ea2 <_vfiprintf_r+0x32>
 8007e96:	89ab      	ldrh	r3, [r5, #12]
 8007e98:	059a      	lsls	r2, r3, #22
 8007e9a:	d402      	bmi.n	8007ea2 <_vfiprintf_r+0x32>
 8007e9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e9e:	f7ff fb88 	bl	80075b2 <__retarget_lock_acquire_recursive>
 8007ea2:	89ab      	ldrh	r3, [r5, #12]
 8007ea4:	071b      	lsls	r3, r3, #28
 8007ea6:	d501      	bpl.n	8007eac <_vfiprintf_r+0x3c>
 8007ea8:	692b      	ldr	r3, [r5, #16]
 8007eaa:	b9eb      	cbnz	r3, 8007ee8 <_vfiprintf_r+0x78>
 8007eac:	4629      	mov	r1, r5
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f7ff fda2 	bl	80079f8 <__swsetup_r>
 8007eb4:	b1c0      	cbz	r0, 8007ee8 <_vfiprintf_r+0x78>
 8007eb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007eb8:	07dc      	lsls	r4, r3, #31
 8007eba:	d50e      	bpl.n	8007eda <_vfiprintf_r+0x6a>
 8007ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec0:	b01d      	add	sp, #116	; 0x74
 8007ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec6:	4b7b      	ldr	r3, [pc, #492]	; (80080b4 <_vfiprintf_r+0x244>)
 8007ec8:	429d      	cmp	r5, r3
 8007eca:	d101      	bne.n	8007ed0 <_vfiprintf_r+0x60>
 8007ecc:	68b5      	ldr	r5, [r6, #8]
 8007ece:	e7df      	b.n	8007e90 <_vfiprintf_r+0x20>
 8007ed0:	4b79      	ldr	r3, [pc, #484]	; (80080b8 <_vfiprintf_r+0x248>)
 8007ed2:	429d      	cmp	r5, r3
 8007ed4:	bf08      	it	eq
 8007ed6:	68f5      	ldreq	r5, [r6, #12]
 8007ed8:	e7da      	b.n	8007e90 <_vfiprintf_r+0x20>
 8007eda:	89ab      	ldrh	r3, [r5, #12]
 8007edc:	0598      	lsls	r0, r3, #22
 8007ede:	d4ed      	bmi.n	8007ebc <_vfiprintf_r+0x4c>
 8007ee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ee2:	f7ff fb67 	bl	80075b4 <__retarget_lock_release_recursive>
 8007ee6:	e7e9      	b.n	8007ebc <_vfiprintf_r+0x4c>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	9309      	str	r3, [sp, #36]	; 0x24
 8007eec:	2320      	movs	r3, #32
 8007eee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ef2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ef6:	2330      	movs	r3, #48	; 0x30
 8007ef8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80080bc <_vfiprintf_r+0x24c>
 8007efc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f00:	f04f 0901 	mov.w	r9, #1
 8007f04:	4623      	mov	r3, r4
 8007f06:	469a      	mov	sl, r3
 8007f08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f0c:	b10a      	cbz	r2, 8007f12 <_vfiprintf_r+0xa2>
 8007f0e:	2a25      	cmp	r2, #37	; 0x25
 8007f10:	d1f9      	bne.n	8007f06 <_vfiprintf_r+0x96>
 8007f12:	ebba 0b04 	subs.w	fp, sl, r4
 8007f16:	d00b      	beq.n	8007f30 <_vfiprintf_r+0xc0>
 8007f18:	465b      	mov	r3, fp
 8007f1a:	4622      	mov	r2, r4
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f7ff ff93 	bl	8007e4a <__sfputs_r>
 8007f24:	3001      	adds	r0, #1
 8007f26:	f000 80aa 	beq.w	800807e <_vfiprintf_r+0x20e>
 8007f2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f2c:	445a      	add	r2, fp
 8007f2e:	9209      	str	r2, [sp, #36]	; 0x24
 8007f30:	f89a 3000 	ldrb.w	r3, [sl]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 80a2 	beq.w	800807e <_vfiprintf_r+0x20e>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f44:	f10a 0a01 	add.w	sl, sl, #1
 8007f48:	9304      	str	r3, [sp, #16]
 8007f4a:	9307      	str	r3, [sp, #28]
 8007f4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f50:	931a      	str	r3, [sp, #104]	; 0x68
 8007f52:	4654      	mov	r4, sl
 8007f54:	2205      	movs	r2, #5
 8007f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f5a:	4858      	ldr	r0, [pc, #352]	; (80080bc <_vfiprintf_r+0x24c>)
 8007f5c:	f7f8 f948 	bl	80001f0 <memchr>
 8007f60:	9a04      	ldr	r2, [sp, #16]
 8007f62:	b9d8      	cbnz	r0, 8007f9c <_vfiprintf_r+0x12c>
 8007f64:	06d1      	lsls	r1, r2, #27
 8007f66:	bf44      	itt	mi
 8007f68:	2320      	movmi	r3, #32
 8007f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f6e:	0713      	lsls	r3, r2, #28
 8007f70:	bf44      	itt	mi
 8007f72:	232b      	movmi	r3, #43	; 0x2b
 8007f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f78:	f89a 3000 	ldrb.w	r3, [sl]
 8007f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f7e:	d015      	beq.n	8007fac <_vfiprintf_r+0x13c>
 8007f80:	9a07      	ldr	r2, [sp, #28]
 8007f82:	4654      	mov	r4, sl
 8007f84:	2000      	movs	r0, #0
 8007f86:	f04f 0c0a 	mov.w	ip, #10
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f90:	3b30      	subs	r3, #48	; 0x30
 8007f92:	2b09      	cmp	r3, #9
 8007f94:	d94e      	bls.n	8008034 <_vfiprintf_r+0x1c4>
 8007f96:	b1b0      	cbz	r0, 8007fc6 <_vfiprintf_r+0x156>
 8007f98:	9207      	str	r2, [sp, #28]
 8007f9a:	e014      	b.n	8007fc6 <_vfiprintf_r+0x156>
 8007f9c:	eba0 0308 	sub.w	r3, r0, r8
 8007fa0:	fa09 f303 	lsl.w	r3, r9, r3
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	9304      	str	r3, [sp, #16]
 8007fa8:	46a2      	mov	sl, r4
 8007faa:	e7d2      	b.n	8007f52 <_vfiprintf_r+0xe2>
 8007fac:	9b03      	ldr	r3, [sp, #12]
 8007fae:	1d19      	adds	r1, r3, #4
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	9103      	str	r1, [sp, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	bfbb      	ittet	lt
 8007fb8:	425b      	neglt	r3, r3
 8007fba:	f042 0202 	orrlt.w	r2, r2, #2
 8007fbe:	9307      	strge	r3, [sp, #28]
 8007fc0:	9307      	strlt	r3, [sp, #28]
 8007fc2:	bfb8      	it	lt
 8007fc4:	9204      	strlt	r2, [sp, #16]
 8007fc6:	7823      	ldrb	r3, [r4, #0]
 8007fc8:	2b2e      	cmp	r3, #46	; 0x2e
 8007fca:	d10c      	bne.n	8007fe6 <_vfiprintf_r+0x176>
 8007fcc:	7863      	ldrb	r3, [r4, #1]
 8007fce:	2b2a      	cmp	r3, #42	; 0x2a
 8007fd0:	d135      	bne.n	800803e <_vfiprintf_r+0x1ce>
 8007fd2:	9b03      	ldr	r3, [sp, #12]
 8007fd4:	1d1a      	adds	r2, r3, #4
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	9203      	str	r2, [sp, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	bfb8      	it	lt
 8007fde:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fe2:	3402      	adds	r4, #2
 8007fe4:	9305      	str	r3, [sp, #20]
 8007fe6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80080cc <_vfiprintf_r+0x25c>
 8007fea:	7821      	ldrb	r1, [r4, #0]
 8007fec:	2203      	movs	r2, #3
 8007fee:	4650      	mov	r0, sl
 8007ff0:	f7f8 f8fe 	bl	80001f0 <memchr>
 8007ff4:	b140      	cbz	r0, 8008008 <_vfiprintf_r+0x198>
 8007ff6:	2340      	movs	r3, #64	; 0x40
 8007ff8:	eba0 000a 	sub.w	r0, r0, sl
 8007ffc:	fa03 f000 	lsl.w	r0, r3, r0
 8008000:	9b04      	ldr	r3, [sp, #16]
 8008002:	4303      	orrs	r3, r0
 8008004:	3401      	adds	r4, #1
 8008006:	9304      	str	r3, [sp, #16]
 8008008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800800c:	482c      	ldr	r0, [pc, #176]	; (80080c0 <_vfiprintf_r+0x250>)
 800800e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008012:	2206      	movs	r2, #6
 8008014:	f7f8 f8ec 	bl	80001f0 <memchr>
 8008018:	2800      	cmp	r0, #0
 800801a:	d03f      	beq.n	800809c <_vfiprintf_r+0x22c>
 800801c:	4b29      	ldr	r3, [pc, #164]	; (80080c4 <_vfiprintf_r+0x254>)
 800801e:	bb1b      	cbnz	r3, 8008068 <_vfiprintf_r+0x1f8>
 8008020:	9b03      	ldr	r3, [sp, #12]
 8008022:	3307      	adds	r3, #7
 8008024:	f023 0307 	bic.w	r3, r3, #7
 8008028:	3308      	adds	r3, #8
 800802a:	9303      	str	r3, [sp, #12]
 800802c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800802e:	443b      	add	r3, r7
 8008030:	9309      	str	r3, [sp, #36]	; 0x24
 8008032:	e767      	b.n	8007f04 <_vfiprintf_r+0x94>
 8008034:	fb0c 3202 	mla	r2, ip, r2, r3
 8008038:	460c      	mov	r4, r1
 800803a:	2001      	movs	r0, #1
 800803c:	e7a5      	b.n	8007f8a <_vfiprintf_r+0x11a>
 800803e:	2300      	movs	r3, #0
 8008040:	3401      	adds	r4, #1
 8008042:	9305      	str	r3, [sp, #20]
 8008044:	4619      	mov	r1, r3
 8008046:	f04f 0c0a 	mov.w	ip, #10
 800804a:	4620      	mov	r0, r4
 800804c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008050:	3a30      	subs	r2, #48	; 0x30
 8008052:	2a09      	cmp	r2, #9
 8008054:	d903      	bls.n	800805e <_vfiprintf_r+0x1ee>
 8008056:	2b00      	cmp	r3, #0
 8008058:	d0c5      	beq.n	8007fe6 <_vfiprintf_r+0x176>
 800805a:	9105      	str	r1, [sp, #20]
 800805c:	e7c3      	b.n	8007fe6 <_vfiprintf_r+0x176>
 800805e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008062:	4604      	mov	r4, r0
 8008064:	2301      	movs	r3, #1
 8008066:	e7f0      	b.n	800804a <_vfiprintf_r+0x1da>
 8008068:	ab03      	add	r3, sp, #12
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	462a      	mov	r2, r5
 800806e:	4b16      	ldr	r3, [pc, #88]	; (80080c8 <_vfiprintf_r+0x258>)
 8008070:	a904      	add	r1, sp, #16
 8008072:	4630      	mov	r0, r6
 8008074:	f3af 8000 	nop.w
 8008078:	4607      	mov	r7, r0
 800807a:	1c78      	adds	r0, r7, #1
 800807c:	d1d6      	bne.n	800802c <_vfiprintf_r+0x1bc>
 800807e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008080:	07d9      	lsls	r1, r3, #31
 8008082:	d405      	bmi.n	8008090 <_vfiprintf_r+0x220>
 8008084:	89ab      	ldrh	r3, [r5, #12]
 8008086:	059a      	lsls	r2, r3, #22
 8008088:	d402      	bmi.n	8008090 <_vfiprintf_r+0x220>
 800808a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800808c:	f7ff fa92 	bl	80075b4 <__retarget_lock_release_recursive>
 8008090:	89ab      	ldrh	r3, [r5, #12]
 8008092:	065b      	lsls	r3, r3, #25
 8008094:	f53f af12 	bmi.w	8007ebc <_vfiprintf_r+0x4c>
 8008098:	9809      	ldr	r0, [sp, #36]	; 0x24
 800809a:	e711      	b.n	8007ec0 <_vfiprintf_r+0x50>
 800809c:	ab03      	add	r3, sp, #12
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	462a      	mov	r2, r5
 80080a2:	4b09      	ldr	r3, [pc, #36]	; (80080c8 <_vfiprintf_r+0x258>)
 80080a4:	a904      	add	r1, sp, #16
 80080a6:	4630      	mov	r0, r6
 80080a8:	f000 f880 	bl	80081ac <_printf_i>
 80080ac:	e7e4      	b.n	8008078 <_vfiprintf_r+0x208>
 80080ae:	bf00      	nop
 80080b0:	080085c0 	.word	0x080085c0
 80080b4:	080085e0 	.word	0x080085e0
 80080b8:	080085a0 	.word	0x080085a0
 80080bc:	08008604 	.word	0x08008604
 80080c0:	0800860e 	.word	0x0800860e
 80080c4:	00000000 	.word	0x00000000
 80080c8:	08007e4b 	.word	0x08007e4b
 80080cc:	0800860a 	.word	0x0800860a

080080d0 <_printf_common>:
 80080d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d4:	4616      	mov	r6, r2
 80080d6:	4699      	mov	r9, r3
 80080d8:	688a      	ldr	r2, [r1, #8]
 80080da:	690b      	ldr	r3, [r1, #16]
 80080dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080e0:	4293      	cmp	r3, r2
 80080e2:	bfb8      	it	lt
 80080e4:	4613      	movlt	r3, r2
 80080e6:	6033      	str	r3, [r6, #0]
 80080e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080ec:	4607      	mov	r7, r0
 80080ee:	460c      	mov	r4, r1
 80080f0:	b10a      	cbz	r2, 80080f6 <_printf_common+0x26>
 80080f2:	3301      	adds	r3, #1
 80080f4:	6033      	str	r3, [r6, #0]
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	0699      	lsls	r1, r3, #26
 80080fa:	bf42      	ittt	mi
 80080fc:	6833      	ldrmi	r3, [r6, #0]
 80080fe:	3302      	addmi	r3, #2
 8008100:	6033      	strmi	r3, [r6, #0]
 8008102:	6825      	ldr	r5, [r4, #0]
 8008104:	f015 0506 	ands.w	r5, r5, #6
 8008108:	d106      	bne.n	8008118 <_printf_common+0x48>
 800810a:	f104 0a19 	add.w	sl, r4, #25
 800810e:	68e3      	ldr	r3, [r4, #12]
 8008110:	6832      	ldr	r2, [r6, #0]
 8008112:	1a9b      	subs	r3, r3, r2
 8008114:	42ab      	cmp	r3, r5
 8008116:	dc26      	bgt.n	8008166 <_printf_common+0x96>
 8008118:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800811c:	1e13      	subs	r3, r2, #0
 800811e:	6822      	ldr	r2, [r4, #0]
 8008120:	bf18      	it	ne
 8008122:	2301      	movne	r3, #1
 8008124:	0692      	lsls	r2, r2, #26
 8008126:	d42b      	bmi.n	8008180 <_printf_common+0xb0>
 8008128:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800812c:	4649      	mov	r1, r9
 800812e:	4638      	mov	r0, r7
 8008130:	47c0      	blx	r8
 8008132:	3001      	adds	r0, #1
 8008134:	d01e      	beq.n	8008174 <_printf_common+0xa4>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	68e5      	ldr	r5, [r4, #12]
 800813a:	6832      	ldr	r2, [r6, #0]
 800813c:	f003 0306 	and.w	r3, r3, #6
 8008140:	2b04      	cmp	r3, #4
 8008142:	bf08      	it	eq
 8008144:	1aad      	subeq	r5, r5, r2
 8008146:	68a3      	ldr	r3, [r4, #8]
 8008148:	6922      	ldr	r2, [r4, #16]
 800814a:	bf0c      	ite	eq
 800814c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008150:	2500      	movne	r5, #0
 8008152:	4293      	cmp	r3, r2
 8008154:	bfc4      	itt	gt
 8008156:	1a9b      	subgt	r3, r3, r2
 8008158:	18ed      	addgt	r5, r5, r3
 800815a:	2600      	movs	r6, #0
 800815c:	341a      	adds	r4, #26
 800815e:	42b5      	cmp	r5, r6
 8008160:	d11a      	bne.n	8008198 <_printf_common+0xc8>
 8008162:	2000      	movs	r0, #0
 8008164:	e008      	b.n	8008178 <_printf_common+0xa8>
 8008166:	2301      	movs	r3, #1
 8008168:	4652      	mov	r2, sl
 800816a:	4649      	mov	r1, r9
 800816c:	4638      	mov	r0, r7
 800816e:	47c0      	blx	r8
 8008170:	3001      	adds	r0, #1
 8008172:	d103      	bne.n	800817c <_printf_common+0xac>
 8008174:	f04f 30ff 	mov.w	r0, #4294967295
 8008178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800817c:	3501      	adds	r5, #1
 800817e:	e7c6      	b.n	800810e <_printf_common+0x3e>
 8008180:	18e1      	adds	r1, r4, r3
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	2030      	movs	r0, #48	; 0x30
 8008186:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800818a:	4422      	add	r2, r4
 800818c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008190:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008194:	3302      	adds	r3, #2
 8008196:	e7c7      	b.n	8008128 <_printf_common+0x58>
 8008198:	2301      	movs	r3, #1
 800819a:	4622      	mov	r2, r4
 800819c:	4649      	mov	r1, r9
 800819e:	4638      	mov	r0, r7
 80081a0:	47c0      	blx	r8
 80081a2:	3001      	adds	r0, #1
 80081a4:	d0e6      	beq.n	8008174 <_printf_common+0xa4>
 80081a6:	3601      	adds	r6, #1
 80081a8:	e7d9      	b.n	800815e <_printf_common+0x8e>
	...

080081ac <_printf_i>:
 80081ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081b0:	460c      	mov	r4, r1
 80081b2:	4691      	mov	r9, r2
 80081b4:	7e27      	ldrb	r7, [r4, #24]
 80081b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80081b8:	2f78      	cmp	r7, #120	; 0x78
 80081ba:	4680      	mov	r8, r0
 80081bc:	469a      	mov	sl, r3
 80081be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081c2:	d807      	bhi.n	80081d4 <_printf_i+0x28>
 80081c4:	2f62      	cmp	r7, #98	; 0x62
 80081c6:	d80a      	bhi.n	80081de <_printf_i+0x32>
 80081c8:	2f00      	cmp	r7, #0
 80081ca:	f000 80d8 	beq.w	800837e <_printf_i+0x1d2>
 80081ce:	2f58      	cmp	r7, #88	; 0x58
 80081d0:	f000 80a3 	beq.w	800831a <_printf_i+0x16e>
 80081d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80081d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081dc:	e03a      	b.n	8008254 <_printf_i+0xa8>
 80081de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081e2:	2b15      	cmp	r3, #21
 80081e4:	d8f6      	bhi.n	80081d4 <_printf_i+0x28>
 80081e6:	a001      	add	r0, pc, #4	; (adr r0, 80081ec <_printf_i+0x40>)
 80081e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80081ec:	08008245 	.word	0x08008245
 80081f0:	08008259 	.word	0x08008259
 80081f4:	080081d5 	.word	0x080081d5
 80081f8:	080081d5 	.word	0x080081d5
 80081fc:	080081d5 	.word	0x080081d5
 8008200:	080081d5 	.word	0x080081d5
 8008204:	08008259 	.word	0x08008259
 8008208:	080081d5 	.word	0x080081d5
 800820c:	080081d5 	.word	0x080081d5
 8008210:	080081d5 	.word	0x080081d5
 8008214:	080081d5 	.word	0x080081d5
 8008218:	08008365 	.word	0x08008365
 800821c:	08008289 	.word	0x08008289
 8008220:	08008347 	.word	0x08008347
 8008224:	080081d5 	.word	0x080081d5
 8008228:	080081d5 	.word	0x080081d5
 800822c:	08008387 	.word	0x08008387
 8008230:	080081d5 	.word	0x080081d5
 8008234:	08008289 	.word	0x08008289
 8008238:	080081d5 	.word	0x080081d5
 800823c:	080081d5 	.word	0x080081d5
 8008240:	0800834f 	.word	0x0800834f
 8008244:	680b      	ldr	r3, [r1, #0]
 8008246:	1d1a      	adds	r2, r3, #4
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	600a      	str	r2, [r1, #0]
 800824c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008250:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008254:	2301      	movs	r3, #1
 8008256:	e0a3      	b.n	80083a0 <_printf_i+0x1f4>
 8008258:	6825      	ldr	r5, [r4, #0]
 800825a:	6808      	ldr	r0, [r1, #0]
 800825c:	062e      	lsls	r6, r5, #24
 800825e:	f100 0304 	add.w	r3, r0, #4
 8008262:	d50a      	bpl.n	800827a <_printf_i+0xce>
 8008264:	6805      	ldr	r5, [r0, #0]
 8008266:	600b      	str	r3, [r1, #0]
 8008268:	2d00      	cmp	r5, #0
 800826a:	da03      	bge.n	8008274 <_printf_i+0xc8>
 800826c:	232d      	movs	r3, #45	; 0x2d
 800826e:	426d      	negs	r5, r5
 8008270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008274:	485e      	ldr	r0, [pc, #376]	; (80083f0 <_printf_i+0x244>)
 8008276:	230a      	movs	r3, #10
 8008278:	e019      	b.n	80082ae <_printf_i+0x102>
 800827a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800827e:	6805      	ldr	r5, [r0, #0]
 8008280:	600b      	str	r3, [r1, #0]
 8008282:	bf18      	it	ne
 8008284:	b22d      	sxthne	r5, r5
 8008286:	e7ef      	b.n	8008268 <_printf_i+0xbc>
 8008288:	680b      	ldr	r3, [r1, #0]
 800828a:	6825      	ldr	r5, [r4, #0]
 800828c:	1d18      	adds	r0, r3, #4
 800828e:	6008      	str	r0, [r1, #0]
 8008290:	0628      	lsls	r0, r5, #24
 8008292:	d501      	bpl.n	8008298 <_printf_i+0xec>
 8008294:	681d      	ldr	r5, [r3, #0]
 8008296:	e002      	b.n	800829e <_printf_i+0xf2>
 8008298:	0669      	lsls	r1, r5, #25
 800829a:	d5fb      	bpl.n	8008294 <_printf_i+0xe8>
 800829c:	881d      	ldrh	r5, [r3, #0]
 800829e:	4854      	ldr	r0, [pc, #336]	; (80083f0 <_printf_i+0x244>)
 80082a0:	2f6f      	cmp	r7, #111	; 0x6f
 80082a2:	bf0c      	ite	eq
 80082a4:	2308      	moveq	r3, #8
 80082a6:	230a      	movne	r3, #10
 80082a8:	2100      	movs	r1, #0
 80082aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082ae:	6866      	ldr	r6, [r4, #4]
 80082b0:	60a6      	str	r6, [r4, #8]
 80082b2:	2e00      	cmp	r6, #0
 80082b4:	bfa2      	ittt	ge
 80082b6:	6821      	ldrge	r1, [r4, #0]
 80082b8:	f021 0104 	bicge.w	r1, r1, #4
 80082bc:	6021      	strge	r1, [r4, #0]
 80082be:	b90d      	cbnz	r5, 80082c4 <_printf_i+0x118>
 80082c0:	2e00      	cmp	r6, #0
 80082c2:	d04d      	beq.n	8008360 <_printf_i+0x1b4>
 80082c4:	4616      	mov	r6, r2
 80082c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80082ca:	fb03 5711 	mls	r7, r3, r1, r5
 80082ce:	5dc7      	ldrb	r7, [r0, r7]
 80082d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80082d4:	462f      	mov	r7, r5
 80082d6:	42bb      	cmp	r3, r7
 80082d8:	460d      	mov	r5, r1
 80082da:	d9f4      	bls.n	80082c6 <_printf_i+0x11a>
 80082dc:	2b08      	cmp	r3, #8
 80082de:	d10b      	bne.n	80082f8 <_printf_i+0x14c>
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	07df      	lsls	r7, r3, #31
 80082e4:	d508      	bpl.n	80082f8 <_printf_i+0x14c>
 80082e6:	6923      	ldr	r3, [r4, #16]
 80082e8:	6861      	ldr	r1, [r4, #4]
 80082ea:	4299      	cmp	r1, r3
 80082ec:	bfde      	ittt	le
 80082ee:	2330      	movle	r3, #48	; 0x30
 80082f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80082f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80082f8:	1b92      	subs	r2, r2, r6
 80082fa:	6122      	str	r2, [r4, #16]
 80082fc:	f8cd a000 	str.w	sl, [sp]
 8008300:	464b      	mov	r3, r9
 8008302:	aa03      	add	r2, sp, #12
 8008304:	4621      	mov	r1, r4
 8008306:	4640      	mov	r0, r8
 8008308:	f7ff fee2 	bl	80080d0 <_printf_common>
 800830c:	3001      	adds	r0, #1
 800830e:	d14c      	bne.n	80083aa <_printf_i+0x1fe>
 8008310:	f04f 30ff 	mov.w	r0, #4294967295
 8008314:	b004      	add	sp, #16
 8008316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800831a:	4835      	ldr	r0, [pc, #212]	; (80083f0 <_printf_i+0x244>)
 800831c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008320:	6823      	ldr	r3, [r4, #0]
 8008322:	680e      	ldr	r6, [r1, #0]
 8008324:	061f      	lsls	r7, r3, #24
 8008326:	f856 5b04 	ldr.w	r5, [r6], #4
 800832a:	600e      	str	r6, [r1, #0]
 800832c:	d514      	bpl.n	8008358 <_printf_i+0x1ac>
 800832e:	07d9      	lsls	r1, r3, #31
 8008330:	bf44      	itt	mi
 8008332:	f043 0320 	orrmi.w	r3, r3, #32
 8008336:	6023      	strmi	r3, [r4, #0]
 8008338:	b91d      	cbnz	r5, 8008342 <_printf_i+0x196>
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	f023 0320 	bic.w	r3, r3, #32
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	2310      	movs	r3, #16
 8008344:	e7b0      	b.n	80082a8 <_printf_i+0xfc>
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	f043 0320 	orr.w	r3, r3, #32
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	2378      	movs	r3, #120	; 0x78
 8008350:	4828      	ldr	r0, [pc, #160]	; (80083f4 <_printf_i+0x248>)
 8008352:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008356:	e7e3      	b.n	8008320 <_printf_i+0x174>
 8008358:	065e      	lsls	r6, r3, #25
 800835a:	bf48      	it	mi
 800835c:	b2ad      	uxthmi	r5, r5
 800835e:	e7e6      	b.n	800832e <_printf_i+0x182>
 8008360:	4616      	mov	r6, r2
 8008362:	e7bb      	b.n	80082dc <_printf_i+0x130>
 8008364:	680b      	ldr	r3, [r1, #0]
 8008366:	6826      	ldr	r6, [r4, #0]
 8008368:	6960      	ldr	r0, [r4, #20]
 800836a:	1d1d      	adds	r5, r3, #4
 800836c:	600d      	str	r5, [r1, #0]
 800836e:	0635      	lsls	r5, r6, #24
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	d501      	bpl.n	8008378 <_printf_i+0x1cc>
 8008374:	6018      	str	r0, [r3, #0]
 8008376:	e002      	b.n	800837e <_printf_i+0x1d2>
 8008378:	0671      	lsls	r1, r6, #25
 800837a:	d5fb      	bpl.n	8008374 <_printf_i+0x1c8>
 800837c:	8018      	strh	r0, [r3, #0]
 800837e:	2300      	movs	r3, #0
 8008380:	6123      	str	r3, [r4, #16]
 8008382:	4616      	mov	r6, r2
 8008384:	e7ba      	b.n	80082fc <_printf_i+0x150>
 8008386:	680b      	ldr	r3, [r1, #0]
 8008388:	1d1a      	adds	r2, r3, #4
 800838a:	600a      	str	r2, [r1, #0]
 800838c:	681e      	ldr	r6, [r3, #0]
 800838e:	6862      	ldr	r2, [r4, #4]
 8008390:	2100      	movs	r1, #0
 8008392:	4630      	mov	r0, r6
 8008394:	f7f7 ff2c 	bl	80001f0 <memchr>
 8008398:	b108      	cbz	r0, 800839e <_printf_i+0x1f2>
 800839a:	1b80      	subs	r0, r0, r6
 800839c:	6060      	str	r0, [r4, #4]
 800839e:	6863      	ldr	r3, [r4, #4]
 80083a0:	6123      	str	r3, [r4, #16]
 80083a2:	2300      	movs	r3, #0
 80083a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083a8:	e7a8      	b.n	80082fc <_printf_i+0x150>
 80083aa:	6923      	ldr	r3, [r4, #16]
 80083ac:	4632      	mov	r2, r6
 80083ae:	4649      	mov	r1, r9
 80083b0:	4640      	mov	r0, r8
 80083b2:	47d0      	blx	sl
 80083b4:	3001      	adds	r0, #1
 80083b6:	d0ab      	beq.n	8008310 <_printf_i+0x164>
 80083b8:	6823      	ldr	r3, [r4, #0]
 80083ba:	079b      	lsls	r3, r3, #30
 80083bc:	d413      	bmi.n	80083e6 <_printf_i+0x23a>
 80083be:	68e0      	ldr	r0, [r4, #12]
 80083c0:	9b03      	ldr	r3, [sp, #12]
 80083c2:	4298      	cmp	r0, r3
 80083c4:	bfb8      	it	lt
 80083c6:	4618      	movlt	r0, r3
 80083c8:	e7a4      	b.n	8008314 <_printf_i+0x168>
 80083ca:	2301      	movs	r3, #1
 80083cc:	4632      	mov	r2, r6
 80083ce:	4649      	mov	r1, r9
 80083d0:	4640      	mov	r0, r8
 80083d2:	47d0      	blx	sl
 80083d4:	3001      	adds	r0, #1
 80083d6:	d09b      	beq.n	8008310 <_printf_i+0x164>
 80083d8:	3501      	adds	r5, #1
 80083da:	68e3      	ldr	r3, [r4, #12]
 80083dc:	9903      	ldr	r1, [sp, #12]
 80083de:	1a5b      	subs	r3, r3, r1
 80083e0:	42ab      	cmp	r3, r5
 80083e2:	dcf2      	bgt.n	80083ca <_printf_i+0x21e>
 80083e4:	e7eb      	b.n	80083be <_printf_i+0x212>
 80083e6:	2500      	movs	r5, #0
 80083e8:	f104 0619 	add.w	r6, r4, #25
 80083ec:	e7f5      	b.n	80083da <_printf_i+0x22e>
 80083ee:	bf00      	nop
 80083f0:	08008615 	.word	0x08008615
 80083f4:	08008626 	.word	0x08008626

080083f8 <_read_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4d07      	ldr	r5, [pc, #28]	; (8008418 <_read_r+0x20>)
 80083fc:	4604      	mov	r4, r0
 80083fe:	4608      	mov	r0, r1
 8008400:	4611      	mov	r1, r2
 8008402:	2200      	movs	r2, #0
 8008404:	602a      	str	r2, [r5, #0]
 8008406:	461a      	mov	r2, r3
 8008408:	f7f9 f86a 	bl	80014e0 <_read>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	d102      	bne.n	8008416 <_read_r+0x1e>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	b103      	cbz	r3, 8008416 <_read_r+0x1e>
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	20004d20 	.word	0x20004d20

0800841c <_fstat_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4d07      	ldr	r5, [pc, #28]	; (800843c <_fstat_r+0x20>)
 8008420:	2300      	movs	r3, #0
 8008422:	4604      	mov	r4, r0
 8008424:	4608      	mov	r0, r1
 8008426:	4611      	mov	r1, r2
 8008428:	602b      	str	r3, [r5, #0]
 800842a:	f7f9 f882 	bl	8001532 <_fstat>
 800842e:	1c43      	adds	r3, r0, #1
 8008430:	d102      	bne.n	8008438 <_fstat_r+0x1c>
 8008432:	682b      	ldr	r3, [r5, #0]
 8008434:	b103      	cbz	r3, 8008438 <_fstat_r+0x1c>
 8008436:	6023      	str	r3, [r4, #0]
 8008438:	bd38      	pop	{r3, r4, r5, pc}
 800843a:	bf00      	nop
 800843c:	20004d20 	.word	0x20004d20

08008440 <_isatty_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4d06      	ldr	r5, [pc, #24]	; (800845c <_isatty_r+0x1c>)
 8008444:	2300      	movs	r3, #0
 8008446:	4604      	mov	r4, r0
 8008448:	4608      	mov	r0, r1
 800844a:	602b      	str	r3, [r5, #0]
 800844c:	f7f9 f881 	bl	8001552 <_isatty>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	d102      	bne.n	800845a <_isatty_r+0x1a>
 8008454:	682b      	ldr	r3, [r5, #0]
 8008456:	b103      	cbz	r3, 800845a <_isatty_r+0x1a>
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	bd38      	pop	{r3, r4, r5, pc}
 800845c:	20004d20 	.word	0x20004d20

08008460 <_init>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	bf00      	nop
 8008464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008466:	bc08      	pop	{r3}
 8008468:	469e      	mov	lr, r3
 800846a:	4770      	bx	lr

0800846c <_fini>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	bf00      	nop
 8008470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008472:	bc08      	pop	{r3}
 8008474:	469e      	mov	lr, r3
 8008476:	4770      	bx	lr
