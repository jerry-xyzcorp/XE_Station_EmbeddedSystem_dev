
XEstation_MachineControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004378  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004528  08004528  00014528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004584  08004584  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08004584  08004584  00014584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800458c  0800458c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800458c  0800458c  0001458c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08004594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          000011d0  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001270  20001270  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa22  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f16  00000000  00000000  0002faf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  00031a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bc8  00000000  00000000  00032688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e59  00000000  00000000  00033250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e59c  00000000  00000000  000570a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db37b  00000000  00000000  00065645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001409c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037f8  00000000  00000000  00140a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004510 	.word	0x08004510

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	08004510 	.word	0x08004510

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 ff0e 	bl	80013bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f816 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 fade 	bl	8000b64 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005a8:	f000 f882 	bl	80006b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005ac:	f000 f8d2 	bl	8000754 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005b0:	f000 f952 	bl	8000858 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005b4:	f000 f9d4 	bl	8000960 <MX_TIM4_Init>
  MX_UART5_Init();
 80005b8:	f000 fa56 	bl	8000a68 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80005bc:	f000 fa7e 	bl	8000abc <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80005c0:	f000 faa6 	bl	8000b10 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  initCupLidDispensor();
 80005c4:	f003 fa90 	bl	8003ae8 <initCupLidDispensor>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SteppingMotorTest();
 80005c8:	f003 fa50 	bl	8003a6c <SteppingMotorTest>
 80005cc:	e7fc      	b.n	80005c8 <main+0x30>
	...

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	; 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fb60 	bl	8003ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <SystemClock_Config+0xd8>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a2a      	ldr	r2, [pc, #168]	; (80006a8 <SystemClock_Config+0xd8>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <SystemClock_Config+0xd8>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <SystemClock_Config+0xdc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a24      	ldr	r2, [pc, #144]	; (80006ac <SystemClock_Config+0xdc>)
 800061a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <SystemClock_Config+0xdc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2310      	movs	r3, #16
 8000636:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000640:	2308      	movs	r3, #8
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000644:	23b4      	movs	r3, #180	; 0xb4
 8000646:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f001 fa87 	bl	8001b68 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000660:	f000 fbd6 	bl	8000e10 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000664:	f001 fa30 	bl	8001ac8 <HAL_PWREx_EnableOverDrive>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800066e:	f000 fbcf 	bl	8000e10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2302      	movs	r3, #2
 8000678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000682:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000688:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2105      	movs	r1, #5
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fce1 	bl	8002058 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800069c:	f000 fbb8 	bl	8000e10 <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	3750      	adds	r7, #80	; 0x50
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c4:	463b      	mov	r3, r7
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_TIM1_Init+0x9c>)
 80006ce:	4a20      	ldr	r2, [pc, #128]	; (8000750 <MX_TIM1_Init+0xa0>)
 80006d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1800-1;
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <MX_TIM1_Init+0x9c>)
 80006d4:	f240 7207 	movw	r2, #1799	; 0x707
 80006d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_TIM1_Init+0x9c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_TIM1_Init+0x9c>)
 80006e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_TIM1_Init+0x9c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_TIM1_Init+0x9c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_TIM1_Init+0x9c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006fa:	4814      	ldr	r0, [pc, #80]	; (800074c <MX_TIM1_Init+0x9c>)
 80006fc:	f001 fe7c 	bl	80023f8 <HAL_TIM_Base_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000706:	f000 fb83 	bl	8000e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	4619      	mov	r1, r3
 8000716:	480d      	ldr	r0, [pc, #52]	; (800074c <MX_TIM1_Init+0x9c>)
 8000718:	f002 f94a 	bl	80029b0 <HAL_TIM_ConfigClockSource>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000722:	f000 fb75 	bl	8000e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800072e:	463b      	mov	r3, r7
 8000730:	4619      	mov	r1, r3
 8000732:	4806      	ldr	r0, [pc, #24]	; (800074c <MX_TIM1_Init+0x9c>)
 8000734:	f002 fdf4 	bl	8003320 <HAL_TIMEx_MasterConfigSynchronization>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800073e:	f000 fb67 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200001e8 	.word	0x200001e8
 8000750:	40010000 	.word	0x40010000

08000754 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800075a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000774:	463b      	mov	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
 8000782:	615a      	str	r2, [r3, #20]
 8000784:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000786:	4b33      	ldr	r3, [pc, #204]	; (8000854 <MX_TIM2_Init+0x100>)
 8000788:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800078c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800078e:	4b31      	ldr	r3, [pc, #196]	; (8000854 <MX_TIM2_Init+0x100>)
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000794:	4b2f      	ldr	r3, [pc, #188]	; (8000854 <MX_TIM2_Init+0x100>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800079a:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <MX_TIM2_Init+0x100>)
 800079c:	f04f 32ff 	mov.w	r2, #4294967295
 80007a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a2:	4b2c      	ldr	r3, [pc, #176]	; (8000854 <MX_TIM2_Init+0x100>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a8:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <MX_TIM2_Init+0x100>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ae:	4829      	ldr	r0, [pc, #164]	; (8000854 <MX_TIM2_Init+0x100>)
 80007b0:	f001 fe22 	bl	80023f8 <HAL_TIM_Base_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80007ba:	f000 fb29 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007be:	4825      	ldr	r0, [pc, #148]	; (8000854 <MX_TIM2_Init+0x100>)
 80007c0:	f001 fed2 	bl	8002568 <HAL_TIM_PWM_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80007ca:	f000 fb21 	bl	8000e10 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80007d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007da:	4619      	mov	r1, r3
 80007dc:	481d      	ldr	r0, [pc, #116]	; (8000854 <MX_TIM2_Init+0x100>)
 80007de:	f002 f9ae 	bl	8002b3e <HAL_TIM_SlaveConfigSynchro>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80007e8:	f000 fb12 	bl	8000e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4816      	ldr	r0, [pc, #88]	; (8000854 <MX_TIM2_Init+0x100>)
 80007fc:	f002 fd90 	bl	8003320 <HAL_TIMEx_MasterConfigSynchronization>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000806:	f000 fb03 	bl	8000e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800080a:	2360      	movs	r3, #96	; 0x60
 800080c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800081a:	463b      	mov	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	4619      	mov	r1, r3
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <MX_TIM2_Init+0x100>)
 8000822:	f002 f803 	bl	800282c <HAL_TIM_PWM_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800082c:	f000 faf0 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	2204      	movs	r2, #4
 8000834:	4619      	mov	r1, r3
 8000836:	4807      	ldr	r0, [pc, #28]	; (8000854 <MX_TIM2_Init+0x100>)
 8000838:	f001 fff8 	bl	800282c <HAL_TIM_PWM_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000842:	f000 fae5 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000846:	4803      	ldr	r0, [pc, #12]	; (8000854 <MX_TIM2_Init+0x100>)
 8000848:	f000 fb78 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 800084c:	bf00      	nop
 800084e:	3738      	adds	r7, #56	; 0x38
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000274 	.word	0x20000274

08000858 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08e      	sub	sp, #56	; 0x38
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000878:	463b      	mov	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
 8000886:	615a      	str	r2, [r3, #20]
 8000888:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800088a:	4b33      	ldr	r3, [pc, #204]	; (8000958 <MX_TIM3_Init+0x100>)
 800088c:	4a33      	ldr	r2, [pc, #204]	; (800095c <MX_TIM3_Init+0x104>)
 800088e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000890:	4b31      	ldr	r3, [pc, #196]	; (8000958 <MX_TIM3_Init+0x100>)
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b30      	ldr	r3, [pc, #192]	; (8000958 <MX_TIM3_Init+0x100>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800089c:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <MX_TIM3_Init+0x100>)
 800089e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a4:	4b2c      	ldr	r3, [pc, #176]	; (8000958 <MX_TIM3_Init+0x100>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008aa:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <MX_TIM3_Init+0x100>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008b0:	4829      	ldr	r0, [pc, #164]	; (8000958 <MX_TIM3_Init+0x100>)
 80008b2:	f001 fda1 	bl	80023f8 <HAL_TIM_Base_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80008bc:	f000 faa8 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008c0:	4825      	ldr	r0, [pc, #148]	; (8000958 <MX_TIM3_Init+0x100>)
 80008c2:	f001 fe51 	bl	8002568 <HAL_TIM_PWM_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80008cc:	f000 faa0 	bl	8000e10 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80008d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008dc:	4619      	mov	r1, r3
 80008de:	481e      	ldr	r0, [pc, #120]	; (8000958 <MX_TIM3_Init+0x100>)
 80008e0:	f002 f92d 	bl	8002b3e <HAL_TIM_SlaveConfigSynchro>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80008ea:	f000 fa91 	bl	8000e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4816      	ldr	r0, [pc, #88]	; (8000958 <MX_TIM3_Init+0x100>)
 80008fe:	f002 fd0f 	bl	8003320 <HAL_TIMEx_MasterConfigSynchronization>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000908:	f000 fa82 	bl	8000e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800090c:	2360      	movs	r3, #96	; 0x60
 800090e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	2200      	movs	r2, #0
 8000920:	4619      	mov	r1, r3
 8000922:	480d      	ldr	r0, [pc, #52]	; (8000958 <MX_TIM3_Init+0x100>)
 8000924:	f001 ff82 	bl	800282c <HAL_TIM_PWM_ConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800092e:	f000 fa6f 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	2204      	movs	r2, #4
 8000936:	4619      	mov	r1, r3
 8000938:	4807      	ldr	r0, [pc, #28]	; (8000958 <MX_TIM3_Init+0x100>)
 800093a:	f001 ff77 	bl	800282c <HAL_TIM_PWM_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000944:	f000 fa64 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <MX_TIM3_Init+0x100>)
 800094a:	f000 faf7 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 800094e:	bf00      	nop
 8000950:	3738      	adds	r7, #56	; 0x38
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000015c 	.word	0x2000015c
 800095c:	40000400 	.word	0x40000400

08000960 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	; 0x38
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000980:	463b      	mov	r3, r7
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]
 800098e:	615a      	str	r2, [r3, #20]
 8000990:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000992:	4b33      	ldr	r3, [pc, #204]	; (8000a60 <MX_TIM4_Init+0x100>)
 8000994:	4a33      	ldr	r2, [pc, #204]	; (8000a64 <MX_TIM4_Init+0x104>)
 8000996:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000998:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <MX_TIM4_Init+0x100>)
 800099a:	2200      	movs	r2, #0
 800099c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099e:	4b30      	ldr	r3, [pc, #192]	; (8000a60 <MX_TIM4_Init+0x100>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80009a4:	4b2e      	ldr	r3, [pc, #184]	; (8000a60 <MX_TIM4_Init+0x100>)
 80009a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ac:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <MX_TIM4_Init+0x100>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b2:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <MX_TIM4_Init+0x100>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009b8:	4829      	ldr	r0, [pc, #164]	; (8000a60 <MX_TIM4_Init+0x100>)
 80009ba:	f001 fd1d 	bl	80023f8 <HAL_TIM_Base_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80009c4:	f000 fa24 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009c8:	4825      	ldr	r0, [pc, #148]	; (8000a60 <MX_TIM4_Init+0x100>)
 80009ca:	f001 fdcd 	bl	8002568 <HAL_TIM_PWM_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80009d4:	f000 fa1c 	bl	8000e10 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80009e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e4:	4619      	mov	r1, r3
 80009e6:	481e      	ldr	r0, [pc, #120]	; (8000a60 <MX_TIM4_Init+0x100>)
 80009e8:	f002 f8a9 	bl	8002b3e <HAL_TIM_SlaveConfigSynchro>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80009f2:	f000 fa0d 	bl	8000e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4816      	ldr	r0, [pc, #88]	; (8000a60 <MX_TIM4_Init+0x100>)
 8000a06:	f002 fc8b 	bl	8003320 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000a10:	f000 f9fe 	bl	8000e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a14:	2360      	movs	r3, #96	; 0x60
 8000a16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a24:	463b      	mov	r3, r7
 8000a26:	2208      	movs	r2, #8
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480d      	ldr	r0, [pc, #52]	; (8000a60 <MX_TIM4_Init+0x100>)
 8000a2c:	f001 fefe 	bl	800282c <HAL_TIM_PWM_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000a36:	f000 f9eb 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	220c      	movs	r2, #12
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4807      	ldr	r0, [pc, #28]	; (8000a60 <MX_TIM4_Init+0x100>)
 8000a42:	f001 fef3 	bl	800282c <HAL_TIM_PWM_ConfigChannel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8000a4c:	f000 f9e0 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a50:	4803      	ldr	r0, [pc, #12]	; (8000a60 <MX_TIM4_Init+0x100>)
 8000a52:	f000 fa73 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 8000a56:	bf00      	nop
 8000a58:	3738      	adds	r7, #56	; 0x38
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200000d0 	.word	0x200000d0
 8000a64:	40000800 	.word	0x40000800

08000a68 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_UART5_Init+0x4c>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MX_UART5_Init+0x50>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_UART5_Init+0x4c>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_UART5_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_UART5_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_UART5_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_UART5_Init+0x4c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_UART5_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_UART5_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_UART5_Init+0x4c>)
 8000aa0:	f002 fcce 	bl	8003440 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000aaa:	f000 f9b1 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200001a4 	.word	0x200001a4
 8000ab8:	40005000 	.word	0x40005000

08000abc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_USART3_UART_Init+0x50>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000af4:	f002 fca4 	bl	8003440 <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000afe:	f000 f987 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000118 	.word	0x20000118
 8000b0c:	40004800 	.word	0x40004800

08000b10 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_USART6_UART_Init+0x4c>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <MX_USART6_UART_Init+0x50>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_USART6_UART_Init+0x4c>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_USART6_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_USART6_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_USART6_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_USART6_UART_Init+0x4c>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_USART6_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_USART6_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_USART6_UART_Init+0x4c>)
 8000b48:	f002 fc7a 	bl	8003440 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b52:	f000 f95d 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000230 	.word	0x20000230
 8000b60:	40011400 	.word	0x40011400

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08e      	sub	sp, #56	; 0x38
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
 8000b7e:	4b9b      	ldr	r3, [pc, #620]	; (8000dec <MX_GPIO_Init+0x288>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a9a      	ldr	r2, [pc, #616]	; (8000dec <MX_GPIO_Init+0x288>)
 8000b84:	f043 0310 	orr.w	r3, r3, #16
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b98      	ldr	r3, [pc, #608]	; (8000dec <MX_GPIO_Init+0x288>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0310 	and.w	r3, r3, #16
 8000b92:	623b      	str	r3, [r7, #32]
 8000b94:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
 8000b9a:	4b94      	ldr	r3, [pc, #592]	; (8000dec <MX_GPIO_Init+0x288>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a93      	ldr	r2, [pc, #588]	; (8000dec <MX_GPIO_Init+0x288>)
 8000ba0:	f043 0320 	orr.w	r3, r3, #32
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b91      	ldr	r3, [pc, #580]	; (8000dec <MX_GPIO_Init+0x288>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0320 	and.w	r3, r3, #32
 8000bae:	61fb      	str	r3, [r7, #28]
 8000bb0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
 8000bb6:	4b8d      	ldr	r3, [pc, #564]	; (8000dec <MX_GPIO_Init+0x288>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a8c      	ldr	r2, [pc, #560]	; (8000dec <MX_GPIO_Init+0x288>)
 8000bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b8a      	ldr	r3, [pc, #552]	; (8000dec <MX_GPIO_Init+0x288>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	4b86      	ldr	r3, [pc, #536]	; (8000dec <MX_GPIO_Init+0x288>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a85      	ldr	r2, [pc, #532]	; (8000dec <MX_GPIO_Init+0x288>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b83      	ldr	r3, [pc, #524]	; (8000dec <MX_GPIO_Init+0x288>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b7f      	ldr	r3, [pc, #508]	; (8000dec <MX_GPIO_Init+0x288>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a7e      	ldr	r2, [pc, #504]	; (8000dec <MX_GPIO_Init+0x288>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b7c      	ldr	r3, [pc, #496]	; (8000dec <MX_GPIO_Init+0x288>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b78      	ldr	r3, [pc, #480]	; (8000dec <MX_GPIO_Init+0x288>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a77      	ldr	r2, [pc, #476]	; (8000dec <MX_GPIO_Init+0x288>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b75      	ldr	r3, [pc, #468]	; (8000dec <MX_GPIO_Init+0x288>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	4b71      	ldr	r3, [pc, #452]	; (8000dec <MX_GPIO_Init+0x288>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a70      	ldr	r2, [pc, #448]	; (8000dec <MX_GPIO_Init+0x288>)
 8000c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b6e      	ldr	r3, [pc, #440]	; (8000dec <MX_GPIO_Init+0x288>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b6a      	ldr	r3, [pc, #424]	; (8000dec <MX_GPIO_Init+0x288>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a69      	ldr	r2, [pc, #420]	; (8000dec <MX_GPIO_Init+0x288>)
 8000c48:	f043 0308 	orr.w	r3, r3, #8
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b67      	ldr	r3, [pc, #412]	; (8000dec <MX_GPIO_Init+0x288>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0308 	and.w	r3, r3, #8
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PD02_DCmix_EN_Pin|PD04_DCpowder_IN2_Pin|PD04_DCpowder_IN1_Pin|CupD_STP_Pin
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f64f 614d 	movw	r1, #65101	; 0xfe4d
 8000c60:	4863      	ldr	r0, [pc, #396]	; (8000df0 <MX_GPIO_Init+0x28c>)
 8000c62:	f000 ff17 	bl	8001a94 <HAL_GPIO_WritePin>
                          |PD03_DCmix_IN1_Pin|CupD_DIR_Pin|PD03_DCmix_IN2_Pin|LidD_STP_Pin
                          |PD03_DCmix_EN_Pin|PD05_DCmix_IN1_Pin|PD04_DCmix_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PD02_DCpowder_IN1_Pin|PD01_DCpowder_EN_Pin|PD01_DCpowder_IN1_Pin|PD05_DCpowder_IN1_Pin
 8000c66:	2200      	movs	r2, #0
 8000c68:	f24f 71ac 	movw	r1, #63404	; 0xf7ac
 8000c6c:	4861      	ldr	r0, [pc, #388]	; (8000df4 <MX_GPIO_Init+0x290>)
 8000c6e:	f000 ff11 	bl	8001a94 <HAL_GPIO_WritePin>
                          |PD04_DCpowder_EN_Pin|PD05_DCpowder_IN2_Pin|PD01_DCpowder_IN2_Pin|CF01_heat_IN2_Pin
                          |CupD_EN_Pin|LidD_EN_Pin|LidD_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PD02_DCpowder_EN_Pin|PD02_DCpowder_IN2_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2103      	movs	r1, #3
 8000c76:	4860      	ldr	r0, [pc, #384]	; (8000df8 <MX_GPIO_Init+0x294>)
 8000c78:	f000 ff0c 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ICE01_water_Pin|ICE01_mix_Pin|PD01_heat_IN1_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2149      	movs	r1, #73	; 0x49
 8000c80:	485e      	ldr	r0, [pc, #376]	; (8000dfc <MX_GPIO_Init+0x298>)
 8000c82:	f000 ff07 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PD04_DCmix_IN1_Pin|ICE01_ice_Pin|CF01_heat_IN1_Pin|PD03_heat_IN1_Pin
 8000c86:	2200      	movs	r2, #0
 8000c88:	21f9      	movs	r1, #249	; 0xf9
 8000c8a:	485d      	ldr	r0, [pc, #372]	; (8000e00 <MX_GPIO_Init+0x29c>)
 8000c8c:	f000 ff02 	bl	8001a94 <HAL_GPIO_WritePin>
                          |PD03_heat_IN2_Pin|PD04_heat_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PD04_DCmix_IN2_Pin|PD05_DCmix_IN2_Pin|PD05_DCmix_EN_Pin|PD02_heat_IN2_Pin
 8000c90:	2200      	movs	r2, #0
 8000c92:	f64b 4121 	movw	r1, #48161	; 0xbc21
 8000c96:	485b      	ldr	r0, [pc, #364]	; (8000e04 <MX_GPIO_Init+0x2a0>)
 8000c98:	f000 fefc 	bl	8001a94 <HAL_GPIO_WritePin>
                          |PD02_heat_IN1_Pin|PD01_heat_IN2_Pin|PD04_heat_IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PD03_DCpowder_EN_Pin|PD05_DCpowder_EN_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2103      	movs	r1, #3
 8000ca0:	4859      	ldr	r0, [pc, #356]	; (8000e08 <MX_GPIO_Init+0x2a4>)
 8000ca2:	f000 fef7 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD02_DCmix_IN2_Pin|PD02_DCmix_IN1_Pin|PD01_DCmix_EN_Pin|PD05_heat_IN1_Pin
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f647 01e3 	movw	r1, #30947	; 0x78e3
 8000cac:	4857      	ldr	r0, [pc, #348]	; (8000e0c <MX_GPIO_Init+0x2a8>)
 8000cae:	f000 fef1 	bl	8001a94 <HAL_GPIO_WritePin>
                          |ICE01_relay_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD02_DCmix_EN_Pin PD04_DCpowder_IN2_Pin PD04_DCpowder_IN1_Pin CupD_STP_Pin
                           PD03_DCmix_IN1_Pin CupD_DIR_Pin PD03_DCmix_IN2_Pin LidD_STP_Pin
                           PD03_DCmix_EN_Pin PD05_DCmix_IN1_Pin PD04_DCmix_EN_Pin */
  GPIO_InitStruct.Pin = PD02_DCmix_EN_Pin|PD04_DCpowder_IN2_Pin|PD04_DCpowder_IN1_Pin|CupD_STP_Pin
 8000cb2:	f64f 634d 	movw	r3, #65101	; 0xfe4d
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD03_DCmix_IN1_Pin|CupD_DIR_Pin|PD03_DCmix_IN2_Pin|LidD_STP_Pin
                          |PD03_DCmix_EN_Pin|PD05_DCmix_IN1_Pin|PD04_DCmix_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4849      	ldr	r0, [pc, #292]	; (8000df0 <MX_GPIO_Init+0x28c>)
 8000ccc:	f000 fd1e 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCpowder_IN1_Pin PD01_DCpowder_EN_Pin PD01_DCpowder_IN1_Pin PD05_DCpowder_IN1_Pin
                           PD04_DCpowder_EN_Pin PD05_DCpowder_IN2_Pin PD01_DCpowder_IN2_Pin CF01_heat_IN2_Pin
                           CupD_EN_Pin LidD_EN_Pin LidD_DIR_Pin */
  GPIO_InitStruct.Pin = PD02_DCpowder_IN1_Pin|PD01_DCpowder_EN_Pin|PD01_DCpowder_IN1_Pin|PD05_DCpowder_IN1_Pin
 8000cd0:	f24f 73ac 	movw	r3, #63404	; 0xf7ac
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD04_DCpowder_EN_Pin|PD05_DCpowder_IN2_Pin|PD01_DCpowder_IN2_Pin|CF01_heat_IN2_Pin
                          |CupD_EN_Pin|LidD_EN_Pin|LidD_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4842      	ldr	r0, [pc, #264]	; (8000df4 <MX_GPIO_Init+0x290>)
 8000cea:	f000 fd0f 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : Lid_up_Pin */
  GPIO_InitStruct.Pin = Lid_up_Pin;
 8000cee:	2310      	movs	r3, #16
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Lid_up_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	483c      	ldr	r0, [pc, #240]	; (8000df4 <MX_GPIO_Init+0x290>)
 8000d02:	f000 fd03 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCpowder_EN_Pin PD02_DCpowder_IN2_Pin */
  GPIO_InitStruct.Pin = PD02_DCpowder_EN_Pin|PD02_DCpowder_IN2_Pin;
 8000d06:	2303      	movs	r3, #3
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4836      	ldr	r0, [pc, #216]	; (8000df8 <MX_GPIO_Init+0x294>)
 8000d1e:	f000 fcf5 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : ICE01_water_Pin ICE01_mix_Pin PD01_heat_IN1_Pin */
  GPIO_InitStruct.Pin = ICE01_water_Pin|ICE01_mix_Pin|PD01_heat_IN1_Pin;
 8000d22:	2349      	movs	r3, #73	; 0x49
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d36:	4619      	mov	r1, r3
 8000d38:	4830      	ldr	r0, [pc, #192]	; (8000dfc <MX_GPIO_Init+0x298>)
 8000d3a:	f000 fce7 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : Cup_down_Pin */
  GPIO_InitStruct.Pin = Cup_down_Pin;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Cup_down_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	482a      	ldr	r0, [pc, #168]	; (8000dfc <MX_GPIO_Init+0x298>)
 8000d52:	f000 fcdb 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD04_DCmix_IN1_Pin ICE01_ice_Pin CF01_heat_IN1_Pin PD03_heat_IN1_Pin
                           PD03_heat_IN2_Pin PD04_heat_IN2_Pin */
  GPIO_InitStruct.Pin = PD04_DCmix_IN1_Pin|ICE01_ice_Pin|CF01_heat_IN1_Pin|PD03_heat_IN1_Pin
 8000d56:	23f9      	movs	r3, #249	; 0xf9
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD03_heat_IN2_Pin|PD04_heat_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4824      	ldr	r0, [pc, #144]	; (8000e00 <MX_GPIO_Init+0x29c>)
 8000d6e:	f000 fccd 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD04_DCmix_IN2_Pin PD05_DCmix_IN2_Pin PD05_DCmix_EN_Pin PD02_heat_IN2_Pin
                           PD02_heat_IN1_Pin PD01_heat_IN2_Pin PD04_heat_IN1_Pin */
  GPIO_InitStruct.Pin = PD04_DCmix_IN2_Pin|PD05_DCmix_IN2_Pin|PD05_DCmix_EN_Pin|PD02_heat_IN2_Pin
 8000d72:	f64b 4321 	movw	r3, #48161	; 0xbc21
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD02_heat_IN1_Pin|PD01_heat_IN2_Pin|PD04_heat_IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	481e      	ldr	r0, [pc, #120]	; (8000e04 <MX_GPIO_Init+0x2a0>)
 8000d8c:	f000 fcbe 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : Cup_up_Pin Lid_down_Pin */
  GPIO_InitStruct.Pin = Cup_up_Pin|Lid_down_Pin;
 8000d90:	2342      	movs	r3, #66	; 0x42
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	4818      	ldr	r0, [pc, #96]	; (8000e04 <MX_GPIO_Init+0x2a0>)
 8000da4:	f000 fcb2 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD03_DCpowder_EN_Pin PD05_DCpowder_EN_Pin */
  GPIO_InitStruct.Pin = PD03_DCpowder_EN_Pin|PD05_DCpowder_EN_Pin;
 8000da8:	2303      	movs	r3, #3
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4812      	ldr	r0, [pc, #72]	; (8000e08 <MX_GPIO_Init+0x2a4>)
 8000dc0:	f000 fca4 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCmix_IN2_Pin PD02_DCmix_IN1_Pin PD01_DCmix_EN_Pin PD05_heat_IN1_Pin
                           PD03_DCpowder_IN1_Pin PD03_DCpowder_IN2_Pin PD_Fan02_relay_Pin PD_Fan01_relay_Pin
                           ICE01_relay_Pin */
  GPIO_InitStruct.Pin = PD02_DCmix_IN2_Pin|PD02_DCmix_IN1_Pin|PD01_DCmix_EN_Pin|PD05_heat_IN1_Pin
 8000dc4:	f647 03e3 	movw	r3, #30947	; 0x78e3
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
                          |PD03_DCpowder_IN1_Pin|PD03_DCpowder_IN2_Pin|PD_Fan02_relay_Pin|PD_Fan01_relay_Pin
                          |ICE01_relay_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480b      	ldr	r0, [pc, #44]	; (8000e0c <MX_GPIO_Init+0x2a8>)
 8000dde:	f000 fc95 	bl	800170c <HAL_GPIO_Init>

}
 8000de2:	bf00      	nop
 8000de4:	3738      	adds	r7, #56	; 0x38
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40021400 	.word	0x40021400
 8000df8:	40021c00 	.word	0x40021c00
 8000dfc:	40020800 	.word	0x40020800
 8000e00:	40020000 	.word	0x40020000
 8000e04:	40020400 	.word	0x40020400
 8000e08:	40021800 	.word	0x40021800
 8000e0c:	40020c00 	.word	0x40020c00

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <Error_Handler+0x8>
	...

08000e1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800

08000e6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a2c      	ldr	r2, [pc, #176]	; (8000f2c <HAL_TIM_Base_MspInit+0xc0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d10e      	bne.n	8000e9c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <HAL_TIM_Base_MspInit+0xc4>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	4a2a      	ldr	r2, [pc, #168]	; (8000f30 <HAL_TIM_Base_MspInit+0xc4>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8e:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <HAL_TIM_Base_MspInit+0xc4>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e9a:	e042      	b.n	8000f22 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ea4:	d116      	bne.n	8000ed4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <HAL_TIM_Base_MspInit+0xc4>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	4a20      	ldr	r2, [pc, #128]	; (8000f30 <HAL_TIM_Base_MspInit+0xc4>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <HAL_TIM_Base_MspInit+0xc4>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	201c      	movs	r0, #28
 8000ec8:	f000 fbe9 	bl	800169e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ecc:	201c      	movs	r0, #28
 8000ece:	f000 fc02 	bl	80016d6 <HAL_NVIC_EnableIRQ>
}
 8000ed2:	e026      	b.n	8000f22 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a16      	ldr	r2, [pc, #88]	; (8000f34 <HAL_TIM_Base_MspInit+0xc8>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d10e      	bne.n	8000efc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <HAL_TIM_Base_MspInit+0xc4>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <HAL_TIM_Base_MspInit+0xc4>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <HAL_TIM_Base_MspInit+0xc4>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	e012      	b.n	8000f22 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_TIM_Base_MspInit+0xcc>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d10d      	bne.n	8000f22 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_TIM_Base_MspInit+0xc4>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_TIM_Base_MspInit+0xc4>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_TIM_Base_MspInit+0xc4>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40000400 	.word	0x40000400
 8000f38:	40000800 	.word	0x40000800

08000f3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	; 0x30
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f5c:	d13d      	bne.n	8000fda <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
 8000f62:	4b53      	ldr	r3, [pc, #332]	; (80010b0 <HAL_TIM_MspPostInit+0x174>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a52      	ldr	r2, [pc, #328]	; (80010b0 <HAL_TIM_MspPostInit+0x174>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b50      	ldr	r3, [pc, #320]	; (80010b0 <HAL_TIM_MspPostInit+0x174>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	4b4c      	ldr	r3, [pc, #304]	; (80010b0 <HAL_TIM_MspPostInit+0x174>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a4b      	ldr	r2, [pc, #300]	; (80010b0 <HAL_TIM_MspPostInit+0x174>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b49      	ldr	r3, [pc, #292]	; (80010b0 <HAL_TIM_MspPostInit+0x174>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PD03_heat_EN_Pin;
 8000f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD03_heat_EN_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4840      	ldr	r0, [pc, #256]	; (80010b4 <HAL_TIM_MspPostInit+0x178>)
 8000fb4:	f000 fbaa 	bl	800170c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PD05_heat_EN_Pin;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD05_heat_EN_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4839      	ldr	r0, [pc, #228]	; (80010b8 <HAL_TIM_MspPostInit+0x17c>)
 8000fd4:	f000 fb9a 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000fd8:	e065      	b.n	80010a6 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM3)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a37      	ldr	r2, [pc, #220]	; (80010bc <HAL_TIM_MspPostInit+0x180>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d13c      	bne.n	800105e <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <HAL_TIM_MspPostInit+0x174>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	4a30      	ldr	r2, [pc, #192]	; (80010b0 <HAL_TIM_MspPostInit+0x174>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff4:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <HAL_TIM_MspPostInit+0x174>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <HAL_TIM_MspPostInit+0x174>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	4a29      	ldr	r2, [pc, #164]	; (80010b0 <HAL_TIM_MspPostInit+0x174>)
 800100a:	f043 0302 	orr.w	r3, r3, #2
 800100e:	6313      	str	r3, [r2, #48]	; 0x30
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <HAL_TIM_MspPostInit+0x174>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PD04_heat_EN_Pin;
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800102c:	2302      	movs	r3, #2
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD04_heat_EN_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	4822      	ldr	r0, [pc, #136]	; (80010c0 <HAL_TIM_MspPostInit+0x184>)
 8001038:	f000 fb68 	bl	800170c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CF01_heat_EN_Pin;
 800103c:	2310      	movs	r3, #16
 800103e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800104c:	2302      	movs	r3, #2
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CF01_heat_EN_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	4818      	ldr	r0, [pc, #96]	; (80010b8 <HAL_TIM_MspPostInit+0x17c>)
 8001058:	f000 fb58 	bl	800170c <HAL_GPIO_Init>
}
 800105c:	e023      	b.n	80010a6 <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM4)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <HAL_TIM_MspPostInit+0x188>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d11e      	bne.n	80010a6 <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <HAL_TIM_MspPostInit+0x174>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	4a0f      	ldr	r2, [pc, #60]	; (80010b0 <HAL_TIM_MspPostInit+0x174>)
 8001072:	f043 0302 	orr.w	r3, r3, #2
 8001076:	6313      	str	r3, [r2, #48]	; 0x30
 8001078:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <HAL_TIM_MspPostInit+0x174>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PD01_heat_EN_Pin|PD02_heat_EN_Pin;
 8001084:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001096:	2302      	movs	r3, #2
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <HAL_TIM_MspPostInit+0x17c>)
 80010a2:	f000 fb33 	bl	800170c <HAL_GPIO_Init>
}
 80010a6:	bf00      	nop
 80010a8:	3730      	adds	r7, #48	; 0x30
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40000400 	.word	0x40000400
 80010c0:	40020800 	.word	0x40020800
 80010c4:	40000800 	.word	0x40000800

080010c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08e      	sub	sp, #56	; 0x38
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a5b      	ldr	r2, [pc, #364]	; (8001254 <HAL_UART_MspInit+0x18c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d14b      	bne.n	8001182 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
 80010ee:	4b5a      	ldr	r3, [pc, #360]	; (8001258 <HAL_UART_MspInit+0x190>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	4a59      	ldr	r2, [pc, #356]	; (8001258 <HAL_UART_MspInit+0x190>)
 80010f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010f8:	6413      	str	r3, [r2, #64]	; 0x40
 80010fa:	4b57      	ldr	r3, [pc, #348]	; (8001258 <HAL_UART_MspInit+0x190>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001102:	623b      	str	r3, [r7, #32]
 8001104:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
 800110a:	4b53      	ldr	r3, [pc, #332]	; (8001258 <HAL_UART_MspInit+0x190>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a52      	ldr	r2, [pc, #328]	; (8001258 <HAL_UART_MspInit+0x190>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b50      	ldr	r3, [pc, #320]	; (8001258 <HAL_UART_MspInit+0x190>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	4b4c      	ldr	r3, [pc, #304]	; (8001258 <HAL_UART_MspInit+0x190>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a4b      	ldr	r2, [pc, #300]	; (8001258 <HAL_UART_MspInit+0x190>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b49      	ldr	r3, [pc, #292]	; (8001258 <HAL_UART_MspInit+0x190>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = CupD_TX_Pin;
 800113e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001150:	2308      	movs	r3, #8
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CupD_TX_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001158:	4619      	mov	r1, r3
 800115a:	4840      	ldr	r0, [pc, #256]	; (800125c <HAL_UART_MspInit+0x194>)
 800115c:	f000 fad6 	bl	800170c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CupD_RX_Pin;
 8001160:	2304      	movs	r3, #4
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001170:	2308      	movs	r3, #8
 8001172:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CupD_RX_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001178:	4619      	mov	r1, r3
 800117a:	4839      	ldr	r0, [pc, #228]	; (8001260 <HAL_UART_MspInit+0x198>)
 800117c:	f000 fac6 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001180:	e064      	b.n	800124c <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART3)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a37      	ldr	r2, [pc, #220]	; (8001264 <HAL_UART_MspInit+0x19c>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d12d      	bne.n	80011e8 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART3_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	4b31      	ldr	r3, [pc, #196]	; (8001258 <HAL_UART_MspInit+0x190>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	4a30      	ldr	r2, [pc, #192]	; (8001258 <HAL_UART_MspInit+0x190>)
 8001196:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800119a:	6413      	str	r3, [r2, #64]	; 0x40
 800119c:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <HAL_UART_MspInit+0x190>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <HAL_UART_MspInit+0x190>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	4a29      	ldr	r2, [pc, #164]	; (8001258 <HAL_UART_MspInit+0x190>)
 80011b2:	f043 0308 	orr.w	r3, r3, #8
 80011b6:	6313      	str	r3, [r2, #48]	; 0x30
 80011b8:	4b27      	ldr	r3, [pc, #156]	; (8001258 <HAL_UART_MspInit+0x190>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 80011c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011d6:	2307      	movs	r3, #7
 80011d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	4619      	mov	r1, r3
 80011e0:	481f      	ldr	r0, [pc, #124]	; (8001260 <HAL_UART_MspInit+0x198>)
 80011e2:	f000 fa93 	bl	800170c <HAL_GPIO_Init>
}
 80011e6:	e031      	b.n	800124c <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART6)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <HAL_UART_MspInit+0x1a0>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d12c      	bne.n	800124c <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART6_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_UART_MspInit+0x190>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a17      	ldr	r2, [pc, #92]	; (8001258 <HAL_UART_MspInit+0x190>)
 80011fc:	f043 0320 	orr.w	r3, r3, #32
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_UART_MspInit+0x190>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f003 0320 	and.w	r3, r3, #32
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_UART_MspInit+0x190>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a10      	ldr	r2, [pc, #64]	; (8001258 <HAL_UART_MspInit+0x190>)
 8001218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_UART_MspInit+0x190>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LidD_RX_Pin|LidD_TX_Pin;
 800122a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800123c:	2308      	movs	r3, #8
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001244:	4619      	mov	r1, r3
 8001246:	4809      	ldr	r0, [pc, #36]	; (800126c <HAL_UART_MspInit+0x1a4>)
 8001248:	f000 fa60 	bl	800170c <HAL_GPIO_Init>
}
 800124c:	bf00      	nop
 800124e:	3738      	adds	r7, #56	; 0x38
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40005000 	.word	0x40005000
 8001258:	40023800 	.word	0x40023800
 800125c:	40020800 	.word	0x40020800
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40004800 	.word	0x40004800
 8001268:	40011400 	.word	0x40011400
 800126c:	40021800 	.word	0x40021800

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <NMI_Handler+0x4>

08001276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <HardFault_Handler+0x4>

0800127c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <MemManage_Handler+0x4>

08001282 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <UsageFault_Handler+0x4>

0800128e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012bc:	f000 f8d0 	bl	8001460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <TIM2_IRQHandler+0x10>)
 80012ca:	f001 f9a6 	bl	800261a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000274 	.word	0x20000274

080012d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e0:	4a14      	ldr	r2, [pc, #80]	; (8001334 <_sbrk+0x5c>)
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <_sbrk+0x60>)
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <_sbrk+0x64>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <_sbrk+0x68>)
 80012f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	429a      	cmp	r2, r3
 8001306:	d207      	bcs.n	8001318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001308:	f002 fca2 	bl	8003c50 <__errno>
 800130c:	4603      	mov	r3, r0
 800130e:	220c      	movs	r2, #12
 8001310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	e009      	b.n	800132c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <_sbrk+0x64>)
 8001328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20030000 	.word	0x20030000
 8001338:	00000400 	.word	0x00000400
 800133c:	200000bc 	.word	0x200000bc
 8001340:	20001270 	.word	0x20001270

08001344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <SystemInit+0x20>)
 800134a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <SystemInit+0x20>)
 8001350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800136c:	480d      	ldr	r0, [pc, #52]	; (80013a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800136e:	490e      	ldr	r1, [pc, #56]	; (80013a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001370:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001374:	e002      	b.n	800137c <LoopCopyDataInit>

08001376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137a:	3304      	adds	r3, #4

0800137c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800137c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001380:	d3f9      	bcc.n	8001376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001382:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001384:	4c0b      	ldr	r4, [pc, #44]	; (80013b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001388:	e001      	b.n	800138e <LoopFillZerobss>

0800138a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800138c:	3204      	adds	r2, #4

0800138e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001390:	d3fb      	bcc.n	800138a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001392:	f7ff ffd7 	bl	8001344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001396:	f002 fc61 	bl	8003c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800139a:	f7ff f8fd 	bl	8000598 <main>
  bx  lr    
 800139e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80013a0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80013ac:	08004594 	.word	0x08004594
  ldr r2, =_sbss
 80013b0:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80013b4:	20001270 	.word	0x20001270

080013b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC_IRQHandler>
	...

080013bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <HAL_Init+0x40>)
 80013c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_Init+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <HAL_Init+0x40>)
 80013d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_Init+0x40>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a07      	ldr	r2, [pc, #28]	; (80013fc <HAL_Init+0x40>)
 80013de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e4:	2003      	movs	r0, #3
 80013e6:	f000 f94f 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ea:	200f      	movs	r0, #15
 80013ec:	f000 f808 	bl	8001400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f0:	f7ff fd14 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023c00 	.word	0x40023c00

08001400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_InitTick+0x54>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_InitTick+0x58>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001416:	fbb3 f3f1 	udiv	r3, r3, r1
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f967 	bl	80016f2 <HAL_SYSTICK_Config>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e00e      	b.n	800144c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b0f      	cmp	r3, #15
 8001432:	d80a      	bhi.n	800144a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001434:	2200      	movs	r2, #0
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f000 f92f 	bl	800169e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001440:	4a06      	ldr	r2, [pc, #24]	; (800145c <HAL_InitTick+0x5c>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e000      	b.n	800144c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000000 	.word	0x20000000
 8001458:	20000008 	.word	0x20000008
 800145c:	20000004 	.word	0x20000004

08001460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x20>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_IncTick+0x24>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <HAL_IncTick+0x24>)
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000008 	.word	0x20000008
 8001484:	200002bc 	.word	0x200002bc

08001488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_GetTick+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	200002bc 	.word	0x200002bc

080014a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff ffee 	bl	8001488 <HAL_GetTick>
 80014ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b8:	d005      	beq.n	80014c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_Delay+0x44>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014c6:	bf00      	nop
 80014c8:	f7ff ffde 	bl	8001488 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d8f7      	bhi.n	80014c8 <HAL_Delay+0x28>
  {
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008

080014e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <__NVIC_SetPriorityGrouping+0x44>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001504:	4013      	ands	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151a:	4a04      	ldr	r2, [pc, #16]	; (800152c <__NVIC_SetPriorityGrouping+0x44>)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	60d3      	str	r3, [r2, #12]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <__NVIC_GetPriorityGrouping+0x18>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	f003 0307 	and.w	r3, r3, #7
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db0b      	blt.n	8001576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 021f 	and.w	r2, r3, #31
 8001564:	4907      	ldr	r1, [pc, #28]	; (8001584 <__NVIC_EnableIRQ+0x38>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	2001      	movs	r0, #1
 800156e:	fa00 f202 	lsl.w	r2, r0, r2
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	; (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	; (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	; 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	; 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001654:	d301      	bcc.n	800165a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001656:	2301      	movs	r3, #1
 8001658:	e00f      	b.n	800167a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <SysTick_Config+0x40>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001662:	210f      	movs	r1, #15
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f7ff ff8e 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <SysTick_Config+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <SysTick_Config+0x40>)
 8001674:	2207      	movs	r2, #7
 8001676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	e000e010 	.word	0xe000e010

08001688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff29 	bl	80014e8 <__NVIC_SetPriorityGrouping>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b0:	f7ff ff3e 	bl	8001530 <__NVIC_GetPriorityGrouping>
 80016b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	6978      	ldr	r0, [r7, #20]
 80016bc:	f7ff ff8e 	bl	80015dc <NVIC_EncodePriority>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff5d 	bl	8001588 <__NVIC_SetPriority>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff31 	bl	800154c <__NVIC_EnableIRQ>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffa2 	bl	8001644 <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	e177      	b.n	8001a18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001728:	2201      	movs	r2, #1
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	429a      	cmp	r2, r3
 8001742:	f040 8166 	bne.w	8001a12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d005      	beq.n	800175e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175a:	2b02      	cmp	r3, #2
 800175c:	d130      	bne.n	80017c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001794:	2201      	movs	r2, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 0201 	and.w	r2, r3, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d017      	beq.n	80017fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d123      	bne.n	8001850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	08da      	lsrs	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3208      	adds	r2, #8
 800184a:	69b9      	ldr	r1, [r7, #24]
 800184c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0203 	and.w	r2, r3, #3
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80c0 	beq.w	8001a12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b66      	ldr	r3, [pc, #408]	; (8001a30 <HAL_GPIO_Init+0x324>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	4a65      	ldr	r2, [pc, #404]	; (8001a30 <HAL_GPIO_Init+0x324>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	; 0x44
 80018a2:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <HAL_GPIO_Init+0x324>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ae:	4a61      	ldr	r2, [pc, #388]	; (8001a34 <HAL_GPIO_Init+0x328>)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a58      	ldr	r2, [pc, #352]	; (8001a38 <HAL_GPIO_Init+0x32c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d037      	beq.n	800194a <HAL_GPIO_Init+0x23e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a57      	ldr	r2, [pc, #348]	; (8001a3c <HAL_GPIO_Init+0x330>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d031      	beq.n	8001946 <HAL_GPIO_Init+0x23a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a56      	ldr	r2, [pc, #344]	; (8001a40 <HAL_GPIO_Init+0x334>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d02b      	beq.n	8001942 <HAL_GPIO_Init+0x236>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a55      	ldr	r2, [pc, #340]	; (8001a44 <HAL_GPIO_Init+0x338>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d025      	beq.n	800193e <HAL_GPIO_Init+0x232>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a54      	ldr	r2, [pc, #336]	; (8001a48 <HAL_GPIO_Init+0x33c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d01f      	beq.n	800193a <HAL_GPIO_Init+0x22e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a53      	ldr	r2, [pc, #332]	; (8001a4c <HAL_GPIO_Init+0x340>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d019      	beq.n	8001936 <HAL_GPIO_Init+0x22a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a52      	ldr	r2, [pc, #328]	; (8001a50 <HAL_GPIO_Init+0x344>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d013      	beq.n	8001932 <HAL_GPIO_Init+0x226>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a51      	ldr	r2, [pc, #324]	; (8001a54 <HAL_GPIO_Init+0x348>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d00d      	beq.n	800192e <HAL_GPIO_Init+0x222>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a50      	ldr	r2, [pc, #320]	; (8001a58 <HAL_GPIO_Init+0x34c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d007      	beq.n	800192a <HAL_GPIO_Init+0x21e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4f      	ldr	r2, [pc, #316]	; (8001a5c <HAL_GPIO_Init+0x350>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d101      	bne.n	8001926 <HAL_GPIO_Init+0x21a>
 8001922:	2309      	movs	r3, #9
 8001924:	e012      	b.n	800194c <HAL_GPIO_Init+0x240>
 8001926:	230a      	movs	r3, #10
 8001928:	e010      	b.n	800194c <HAL_GPIO_Init+0x240>
 800192a:	2308      	movs	r3, #8
 800192c:	e00e      	b.n	800194c <HAL_GPIO_Init+0x240>
 800192e:	2307      	movs	r3, #7
 8001930:	e00c      	b.n	800194c <HAL_GPIO_Init+0x240>
 8001932:	2306      	movs	r3, #6
 8001934:	e00a      	b.n	800194c <HAL_GPIO_Init+0x240>
 8001936:	2305      	movs	r3, #5
 8001938:	e008      	b.n	800194c <HAL_GPIO_Init+0x240>
 800193a:	2304      	movs	r3, #4
 800193c:	e006      	b.n	800194c <HAL_GPIO_Init+0x240>
 800193e:	2303      	movs	r3, #3
 8001940:	e004      	b.n	800194c <HAL_GPIO_Init+0x240>
 8001942:	2302      	movs	r3, #2
 8001944:	e002      	b.n	800194c <HAL_GPIO_Init+0x240>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_GPIO_Init+0x240>
 800194a:	2300      	movs	r3, #0
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	f002 0203 	and.w	r2, r2, #3
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	4093      	lsls	r3, r2
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800195c:	4935      	ldr	r1, [pc, #212]	; (8001a34 <HAL_GPIO_Init+0x328>)
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800196a:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <HAL_GPIO_Init+0x354>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800198e:	4a34      	ldr	r2, [pc, #208]	; (8001a60 <HAL_GPIO_Init+0x354>)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001994:	4b32      	ldr	r3, [pc, #200]	; (8001a60 <HAL_GPIO_Init+0x354>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019b8:	4a29      	ldr	r2, [pc, #164]	; (8001a60 <HAL_GPIO_Init+0x354>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <HAL_GPIO_Init+0x354>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019e2:	4a1f      	ldr	r2, [pc, #124]	; (8001a60 <HAL_GPIO_Init+0x354>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <HAL_GPIO_Init+0x354>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a0c:	4a14      	ldr	r2, [pc, #80]	; (8001a60 <HAL_GPIO_Init+0x354>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3301      	adds	r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	2b0f      	cmp	r3, #15
 8001a1c:	f67f ae84 	bls.w	8001728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3724      	adds	r7, #36	; 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40013800 	.word	0x40013800
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	40020800 	.word	0x40020800
 8001a44:	40020c00 	.word	0x40020c00
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40021400 	.word	0x40021400
 8001a50:	40021800 	.word	0x40021800
 8001a54:	40021c00 	.word	0x40021c00
 8001a58:	40022000 	.word	0x40022000
 8001a5c:	40022400 	.word	0x40022400
 8001a60:	40013c00 	.word	0x40013c00

08001a64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	887b      	ldrh	r3, [r7, #2]
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	e001      	b.n	8001a86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	807b      	strh	r3, [r7, #2]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa4:	787b      	ldrb	r3, [r7, #1]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ab0:	e003      	b.n	8001aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ab2:	887b      	ldrh	r3, [r7, #2]
 8001ab4:	041a      	lsls	r2, r3, #16
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	619a      	str	r2, [r3, #24]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <HAL_PWREx_EnableOverDrive+0x90>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001aee:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_PWREx_EnableOverDrive+0x94>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001af4:	f7ff fcc8 	bl	8001488 <HAL_GetTick>
 8001af8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001afa:	e009      	b.n	8001b10 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001afc:	f7ff fcc4 	bl	8001488 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b0a:	d901      	bls.n	8001b10 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e01f      	b.n	8001b50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1c:	d1ee      	bne.n	8001afc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b24:	f7ff fcb0 	bl	8001488 <HAL_GetTick>
 8001b28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b2a:	e009      	b.n	8001b40 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b2c:	f7ff fcac 	bl	8001488 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b3a:	d901      	bls.n	8001b40 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e007      	b.n	8001b50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b4c:	d1ee      	bne.n	8001b2c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	420e0040 	.word	0x420e0040
 8001b60:	40007000 	.word	0x40007000
 8001b64:	420e0044 	.word	0x420e0044

08001b68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e264      	b.n	8002044 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d075      	beq.n	8001c72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b86:	4ba3      	ldr	r3, [pc, #652]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d00c      	beq.n	8001bac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b92:	4ba0      	ldr	r3, [pc, #640]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d112      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9e:	4b9d      	ldr	r3, [pc, #628]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001baa:	d10b      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	4b99      	ldr	r3, [pc, #612]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d05b      	beq.n	8001c70 <HAL_RCC_OscConfig+0x108>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d157      	bne.n	8001c70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e23f      	b.n	8002044 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bcc:	d106      	bne.n	8001bdc <HAL_RCC_OscConfig+0x74>
 8001bce:	4b91      	ldr	r3, [pc, #580]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a90      	ldr	r2, [pc, #576]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e01d      	b.n	8001c18 <HAL_RCC_OscConfig+0xb0>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x98>
 8001be6:	4b8b      	ldr	r3, [pc, #556]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a8a      	ldr	r2, [pc, #552]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4b88      	ldr	r3, [pc, #544]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a87      	ldr	r2, [pc, #540]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e00b      	b.n	8001c18 <HAL_RCC_OscConfig+0xb0>
 8001c00:	4b84      	ldr	r3, [pc, #528]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a83      	ldr	r2, [pc, #524]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b81      	ldr	r3, [pc, #516]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a80      	ldr	r2, [pc, #512]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d013      	beq.n	8001c48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fc32 	bl	8001488 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff fc2e 	bl	8001488 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	; 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e204      	b.n	8002044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	4b76      	ldr	r3, [pc, #472]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0xc0>
 8001c46:	e014      	b.n	8001c72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff fc1e 	bl	8001488 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff fc1a 	bl	8001488 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	; 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e1f0      	b.n	8002044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c62:	4b6c      	ldr	r3, [pc, #432]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0xe8>
 8001c6e:	e000      	b.n	8001c72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d063      	beq.n	8001d46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c7e:	4b65      	ldr	r3, [pc, #404]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00b      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8a:	4b62      	ldr	r3, [pc, #392]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d11c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c96:	4b5f      	ldr	r3, [pc, #380]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d116      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca2:	4b5c      	ldr	r3, [pc, #368]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d005      	beq.n	8001cba <HAL_RCC_OscConfig+0x152>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d001      	beq.n	8001cba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e1c4      	b.n	8002044 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cba:	4b56      	ldr	r3, [pc, #344]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4952      	ldr	r1, [pc, #328]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cce:	e03a      	b.n	8001d46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d020      	beq.n	8001d1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd8:	4b4f      	ldr	r3, [pc, #316]	; (8001e18 <HAL_RCC_OscConfig+0x2b0>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7ff fbd3 	bl	8001488 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7ff fbcf 	bl	8001488 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e1a5      	b.n	8002044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf8:	4b46      	ldr	r3, [pc, #280]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b43      	ldr	r3, [pc, #268]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4940      	ldr	r1, [pc, #256]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
 8001d18:	e015      	b.n	8001d46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1a:	4b3f      	ldr	r3, [pc, #252]	; (8001e18 <HAL_RCC_OscConfig+0x2b0>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff fbb2 	bl	8001488 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d28:	f7ff fbae 	bl	8001488 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e184      	b.n	8002044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d030      	beq.n	8001db4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d016      	beq.n	8001d88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5a:	4b30      	ldr	r3, [pc, #192]	; (8001e1c <HAL_RCC_OscConfig+0x2b4>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7ff fb92 	bl	8001488 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d68:	f7ff fb8e 	bl	8001488 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e164      	b.n	8002044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x200>
 8001d86:	e015      	b.n	8001db4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d88:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <HAL_RCC_OscConfig+0x2b4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8e:	f7ff fb7b 	bl	8001488 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d96:	f7ff fb77 	bl	8001488 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e14d      	b.n	8002044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f0      	bne.n	8001d96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80a0 	beq.w	8001f02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10f      	bne.n	8001df2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
 8001de2:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <HAL_RCC_OscConfig+0x2ac>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dee:	2301      	movs	r3, #1
 8001df0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_RCC_OscConfig+0x2b8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d121      	bne.n	8001e42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <HAL_RCC_OscConfig+0x2b8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <HAL_RCC_OscConfig+0x2b8>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fb3d 	bl	8001488 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e10:	e011      	b.n	8001e36 <HAL_RCC_OscConfig+0x2ce>
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800
 8001e18:	42470000 	.word	0x42470000
 8001e1c:	42470e80 	.word	0x42470e80
 8001e20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e24:	f7ff fb30 	bl	8001488 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e106      	b.n	8002044 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e36:	4b85      	ldr	r3, [pc, #532]	; (800204c <HAL_RCC_OscConfig+0x4e4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d106      	bne.n	8001e58 <HAL_RCC_OscConfig+0x2f0>
 8001e4a:	4b81      	ldr	r3, [pc, #516]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4e:	4a80      	ldr	r2, [pc, #512]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6713      	str	r3, [r2, #112]	; 0x70
 8001e56:	e01c      	b.n	8001e92 <HAL_RCC_OscConfig+0x32a>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	d10c      	bne.n	8001e7a <HAL_RCC_OscConfig+0x312>
 8001e60:	4b7b      	ldr	r3, [pc, #492]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e64:	4a7a      	ldr	r2, [pc, #488]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001e66:	f043 0304 	orr.w	r3, r3, #4
 8001e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6c:	4b78      	ldr	r3, [pc, #480]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e70:	4a77      	ldr	r2, [pc, #476]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6713      	str	r3, [r2, #112]	; 0x70
 8001e78:	e00b      	b.n	8001e92 <HAL_RCC_OscConfig+0x32a>
 8001e7a:	4b75      	ldr	r3, [pc, #468]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7e:	4a74      	ldr	r2, [pc, #464]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	6713      	str	r3, [r2, #112]	; 0x70
 8001e86:	4b72      	ldr	r3, [pc, #456]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	4a71      	ldr	r2, [pc, #452]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001e8c:	f023 0304 	bic.w	r3, r3, #4
 8001e90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d015      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9a:	f7ff faf5 	bl	8001488 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea0:	e00a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea2:	f7ff faf1 	bl	8001488 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e0c5      	b.n	8002044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb8:	4b65      	ldr	r3, [pc, #404]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ee      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x33a>
 8001ec4:	e014      	b.n	8001ef0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec6:	f7ff fadf 	bl	8001488 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ece:	f7ff fadb 	bl	8001488 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e0af      	b.n	8002044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee4:	4b5a      	ldr	r3, [pc, #360]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1ee      	bne.n	8001ece <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d105      	bne.n	8001f02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef6:	4b56      	ldr	r3, [pc, #344]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a55      	ldr	r2, [pc, #340]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 809b 	beq.w	8002042 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f0c:	4b50      	ldr	r3, [pc, #320]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d05c      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d141      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f20:	4b4c      	ldr	r3, [pc, #304]	; (8002054 <HAL_RCC_OscConfig+0x4ec>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7ff faaf 	bl	8001488 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7ff faab 	bl	8001488 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e081      	b.n	8002044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f40:	4b43      	ldr	r3, [pc, #268]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f0      	bne.n	8001f2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69da      	ldr	r2, [r3, #28]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	019b      	lsls	r3, r3, #6
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	3b01      	subs	r3, #1
 8001f66:	041b      	lsls	r3, r3, #16
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6e:	061b      	lsls	r3, r3, #24
 8001f70:	4937      	ldr	r1, [pc, #220]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f76:	4b37      	ldr	r3, [pc, #220]	; (8002054 <HAL_RCC_OscConfig+0x4ec>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff fa84 	bl	8001488 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f84:	f7ff fa80 	bl	8001488 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e056      	b.n	8002044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f96:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x41c>
 8001fa2:	e04e      	b.n	8002042 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <HAL_RCC_OscConfig+0x4ec>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001faa:	f7ff fa6d 	bl	8001488 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb2:	f7ff fa69 	bl	8001488 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e03f      	b.n	8002044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc4:	4b22      	ldr	r3, [pc, #136]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f0      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x44a>
 8001fd0:	e037      	b.n	8002042 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e032      	b.n	8002044 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fde:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <HAL_RCC_OscConfig+0x4e8>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d028      	beq.n	800203e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d121      	bne.n	800203e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d11a      	bne.n	800203e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800200e:	4013      	ands	r3, r2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002014:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002016:	4293      	cmp	r3, r2
 8002018:	d111      	bne.n	800203e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	085b      	lsrs	r3, r3, #1
 8002026:	3b01      	subs	r3, #1
 8002028:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800202a:	429a      	cmp	r2, r3
 800202c:	d107      	bne.n	800203e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d001      	beq.n	8002042 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40007000 	.word	0x40007000
 8002050:	40023800 	.word	0x40023800
 8002054:	42470060 	.word	0x42470060

08002058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0cc      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b68      	ldr	r3, [pc, #416]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d90c      	bls.n	8002094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b65      	ldr	r3, [pc, #404]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b63      	ldr	r3, [pc, #396]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0b8      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d020      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020ac:	4b59      	ldr	r3, [pc, #356]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4a58      	ldr	r2, [pc, #352]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c4:	4b53      	ldr	r3, [pc, #332]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	4a52      	ldr	r2, [pc, #328]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d0:	4b50      	ldr	r3, [pc, #320]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	494d      	ldr	r1, [pc, #308]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d044      	beq.n	8002178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	4b47      	ldr	r3, [pc, #284]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d119      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e07f      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d003      	beq.n	8002116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002112:	2b03      	cmp	r3, #3
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002116:	4b3f      	ldr	r3, [pc, #252]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e06f      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002126:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e067      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002136:	4b37      	ldr	r3, [pc, #220]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f023 0203 	bic.w	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4934      	ldr	r1, [pc, #208]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	4313      	orrs	r3, r2
 8002146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002148:	f7ff f99e 	bl	8001488 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	e00a      	b.n	8002166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7ff f99a 	bl	8001488 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e04f      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	4b2b      	ldr	r3, [pc, #172]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 020c 	and.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	429a      	cmp	r2, r3
 8002176:	d1eb      	bne.n	8002150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002178:	4b25      	ldr	r3, [pc, #148]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d20c      	bcs.n	80021a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b22      	ldr	r3, [pc, #136]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e032      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ac:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4916      	ldr	r1, [pc, #88]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d009      	beq.n	80021de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	490e      	ldr	r1, [pc, #56]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021de:	f000 f821 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 80021e2:	4602      	mov	r2, r0
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	490a      	ldr	r1, [pc, #40]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	5ccb      	ldrb	r3, [r1, r3]
 80021f2:	fa22 f303 	lsr.w	r3, r2, r3
 80021f6:	4a09      	ldr	r2, [pc, #36]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff f8fe 	bl	8001400 <HAL_InitTick>

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023c00 	.word	0x40023c00
 8002214:	40023800 	.word	0x40023800
 8002218:	08004538 	.word	0x08004538
 800221c:	20000000 	.word	0x20000000
 8002220:	20000004 	.word	0x20000004

08002224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002224:	b5b0      	push	{r4, r5, r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800222a:	2100      	movs	r1, #0
 800222c:	6079      	str	r1, [r7, #4]
 800222e:	2100      	movs	r1, #0
 8002230:	60f9      	str	r1, [r7, #12]
 8002232:	2100      	movs	r1, #0
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002236:	2100      	movs	r1, #0
 8002238:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800223a:	4952      	ldr	r1, [pc, #328]	; (8002384 <HAL_RCC_GetSysClockFreq+0x160>)
 800223c:	6889      	ldr	r1, [r1, #8]
 800223e:	f001 010c 	and.w	r1, r1, #12
 8002242:	2908      	cmp	r1, #8
 8002244:	d00d      	beq.n	8002262 <HAL_RCC_GetSysClockFreq+0x3e>
 8002246:	2908      	cmp	r1, #8
 8002248:	f200 8094 	bhi.w	8002374 <HAL_RCC_GetSysClockFreq+0x150>
 800224c:	2900      	cmp	r1, #0
 800224e:	d002      	beq.n	8002256 <HAL_RCC_GetSysClockFreq+0x32>
 8002250:	2904      	cmp	r1, #4
 8002252:	d003      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x38>
 8002254:	e08e      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002256:	4b4c      	ldr	r3, [pc, #304]	; (8002388 <HAL_RCC_GetSysClockFreq+0x164>)
 8002258:	60bb      	str	r3, [r7, #8]
       break;
 800225a:	e08e      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800225c:	4b4b      	ldr	r3, [pc, #300]	; (800238c <HAL_RCC_GetSysClockFreq+0x168>)
 800225e:	60bb      	str	r3, [r7, #8]
      break;
 8002260:	e08b      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002262:	4948      	ldr	r1, [pc, #288]	; (8002384 <HAL_RCC_GetSysClockFreq+0x160>)
 8002264:	6849      	ldr	r1, [r1, #4]
 8002266:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800226a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800226c:	4945      	ldr	r1, [pc, #276]	; (8002384 <HAL_RCC_GetSysClockFreq+0x160>)
 800226e:	6849      	ldr	r1, [r1, #4]
 8002270:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002274:	2900      	cmp	r1, #0
 8002276:	d024      	beq.n	80022c2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002278:	4942      	ldr	r1, [pc, #264]	; (8002384 <HAL_RCC_GetSysClockFreq+0x160>)
 800227a:	6849      	ldr	r1, [r1, #4]
 800227c:	0989      	lsrs	r1, r1, #6
 800227e:	4608      	mov	r0, r1
 8002280:	f04f 0100 	mov.w	r1, #0
 8002284:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002288:	f04f 0500 	mov.w	r5, #0
 800228c:	ea00 0204 	and.w	r2, r0, r4
 8002290:	ea01 0305 	and.w	r3, r1, r5
 8002294:	493d      	ldr	r1, [pc, #244]	; (800238c <HAL_RCC_GetSysClockFreq+0x168>)
 8002296:	fb01 f003 	mul.w	r0, r1, r3
 800229a:	2100      	movs	r1, #0
 800229c:	fb01 f102 	mul.w	r1, r1, r2
 80022a0:	1844      	adds	r4, r0, r1
 80022a2:	493a      	ldr	r1, [pc, #232]	; (800238c <HAL_RCC_GetSysClockFreq+0x168>)
 80022a4:	fba2 0101 	umull	r0, r1, r2, r1
 80022a8:	1863      	adds	r3, r4, r1
 80022aa:	4619      	mov	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	461a      	mov	r2, r3
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	f7fd fff4 	bl	80002a0 <__aeabi_uldivmod>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4613      	mov	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	e04a      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c2:	4b30      	ldr	r3, [pc, #192]	; (8002384 <HAL_RCC_GetSysClockFreq+0x160>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	099b      	lsrs	r3, r3, #6
 80022c8:	461a      	mov	r2, r3
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022d2:	f04f 0100 	mov.w	r1, #0
 80022d6:	ea02 0400 	and.w	r4, r2, r0
 80022da:	ea03 0501 	and.w	r5, r3, r1
 80022de:	4620      	mov	r0, r4
 80022e0:	4629      	mov	r1, r5
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	014b      	lsls	r3, r1, #5
 80022ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022f0:	0142      	lsls	r2, r0, #5
 80022f2:	4610      	mov	r0, r2
 80022f4:	4619      	mov	r1, r3
 80022f6:	1b00      	subs	r0, r0, r4
 80022f8:	eb61 0105 	sbc.w	r1, r1, r5
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	018b      	lsls	r3, r1, #6
 8002306:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800230a:	0182      	lsls	r2, r0, #6
 800230c:	1a12      	subs	r2, r2, r0
 800230e:	eb63 0301 	sbc.w	r3, r3, r1
 8002312:	f04f 0000 	mov.w	r0, #0
 8002316:	f04f 0100 	mov.w	r1, #0
 800231a:	00d9      	lsls	r1, r3, #3
 800231c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002320:	00d0      	lsls	r0, r2, #3
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	1912      	adds	r2, r2, r4
 8002328:	eb45 0303 	adc.w	r3, r5, r3
 800232c:	f04f 0000 	mov.w	r0, #0
 8002330:	f04f 0100 	mov.w	r1, #0
 8002334:	0299      	lsls	r1, r3, #10
 8002336:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800233a:	0290      	lsls	r0, r2, #10
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	461a      	mov	r2, r3
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	f7fd ffa8 	bl	80002a0 <__aeabi_uldivmod>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4613      	mov	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <HAL_RCC_GetSysClockFreq+0x160>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	0c1b      	lsrs	r3, r3, #16
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	3301      	adds	r3, #1
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002370:	60bb      	str	r3, [r7, #8]
      break;
 8002372:	e002      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002374:	4b04      	ldr	r3, [pc, #16]	; (8002388 <HAL_RCC_GetSysClockFreq+0x164>)
 8002376:	60bb      	str	r3, [r7, #8]
      break;
 8002378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237a:	68bb      	ldr	r3, [r7, #8]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bdb0      	pop	{r4, r5, r7, pc}
 8002384:	40023800 	.word	0x40023800
 8002388:	00f42400 	.word	0x00f42400
 800238c:	017d7840 	.word	0x017d7840

08002390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000000 	.word	0x20000000

080023a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023ac:	f7ff fff0 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	0a9b      	lsrs	r3, r3, #10
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	4903      	ldr	r1, [pc, #12]	; (80023cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023be:	5ccb      	ldrb	r3, [r1, r3]
 80023c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40023800 	.word	0x40023800
 80023cc:	08004548 	.word	0x08004548

080023d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023d4:	f7ff ffdc 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023d8:	4602      	mov	r2, r0
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	0b5b      	lsrs	r3, r3, #13
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	4903      	ldr	r1, [pc, #12]	; (80023f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023e6:	5ccb      	ldrb	r3, [r1, r3]
 80023e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40023800 	.word	0x40023800
 80023f4:	08004548 	.word	0x08004548

080023f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e041      	b.n	800248e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d106      	bne.n	8002424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7fe fd24 	bl	8000e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3304      	adds	r3, #4
 8002434:	4619      	mov	r1, r3
 8002436:	4610      	mov	r0, r2
 8002438:	f000 fbf6 	bl	8002c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d001      	beq.n	80024b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e046      	b.n	800253e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a23      	ldr	r2, [pc, #140]	; (800254c <HAL_TIM_Base_Start+0xb4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d022      	beq.n	8002508 <HAL_TIM_Base_Start+0x70>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ca:	d01d      	beq.n	8002508 <HAL_TIM_Base_Start+0x70>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1f      	ldr	r2, [pc, #124]	; (8002550 <HAL_TIM_Base_Start+0xb8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d018      	beq.n	8002508 <HAL_TIM_Base_Start+0x70>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1e      	ldr	r2, [pc, #120]	; (8002554 <HAL_TIM_Base_Start+0xbc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d013      	beq.n	8002508 <HAL_TIM_Base_Start+0x70>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a1c      	ldr	r2, [pc, #112]	; (8002558 <HAL_TIM_Base_Start+0xc0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00e      	beq.n	8002508 <HAL_TIM_Base_Start+0x70>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a1b      	ldr	r2, [pc, #108]	; (800255c <HAL_TIM_Base_Start+0xc4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d009      	beq.n	8002508 <HAL_TIM_Base_Start+0x70>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a19      	ldr	r2, [pc, #100]	; (8002560 <HAL_TIM_Base_Start+0xc8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d004      	beq.n	8002508 <HAL_TIM_Base_Start+0x70>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a18      	ldr	r2, [pc, #96]	; (8002564 <HAL_TIM_Base_Start+0xcc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d111      	bne.n	800252c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b06      	cmp	r3, #6
 8002518:	d010      	beq.n	800253c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252a:	e007      	b.n	800253c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0201 	orr.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40010000 	.word	0x40010000
 8002550:	40000400 	.word	0x40000400
 8002554:	40000800 	.word	0x40000800
 8002558:	40000c00 	.word	0x40000c00
 800255c:	40010400 	.word	0x40010400
 8002560:	40014000 	.word	0x40014000
 8002564:	40001800 	.word	0x40001800

08002568 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e041      	b.n	80025fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f839 	bl	8002606 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3304      	adds	r3, #4
 80025a4:	4619      	mov	r1, r3
 80025a6:	4610      	mov	r0, r2
 80025a8:	f000 fb3e 	bl	8002c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b02      	cmp	r3, #2
 800262e:	d122      	bne.n	8002676 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b02      	cmp	r3, #2
 800263c:	d11b      	bne.n	8002676 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f06f 0202 	mvn.w	r2, #2
 8002646:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 fac4 	bl	8002bea <HAL_TIM_IC_CaptureCallback>
 8002662:	e005      	b.n	8002670 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 fab6 	bl	8002bd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fac7 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b04      	cmp	r3, #4
 8002682:	d122      	bne.n	80026ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	2b04      	cmp	r3, #4
 8002690:	d11b      	bne.n	80026ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f06f 0204 	mvn.w	r2, #4
 800269a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 fa9a 	bl	8002bea <HAL_TIM_IC_CaptureCallback>
 80026b6:	e005      	b.n	80026c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 fa8c 	bl	8002bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fa9d 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d122      	bne.n	800271e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d11b      	bne.n	800271e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f06f 0208 	mvn.w	r2, #8
 80026ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2204      	movs	r2, #4
 80026f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fa70 	bl	8002bea <HAL_TIM_IC_CaptureCallback>
 800270a:	e005      	b.n	8002718 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 fa62 	bl	8002bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fa73 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b10      	cmp	r3, #16
 800272a:	d122      	bne.n	8002772 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	2b10      	cmp	r3, #16
 8002738:	d11b      	bne.n	8002772 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f06f 0210 	mvn.w	r2, #16
 8002742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2208      	movs	r2, #8
 8002748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fa46 	bl	8002bea <HAL_TIM_IC_CaptureCallback>
 800275e:	e005      	b.n	800276c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fa38 	bl	8002bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fa49 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d10e      	bne.n	800279e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b01      	cmp	r3, #1
 800278c:	d107      	bne.n	800279e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f06f 0201 	mvn.w	r2, #1
 8002796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 fa12 	bl	8002bc2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a8:	2b80      	cmp	r3, #128	; 0x80
 80027aa:	d10e      	bne.n	80027ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b6:	2b80      	cmp	r3, #128	; 0x80
 80027b8:	d107      	bne.n	80027ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 fe31 	bl	800342c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d4:	2b40      	cmp	r3, #64	; 0x40
 80027d6:	d10e      	bne.n	80027f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e2:	2b40      	cmp	r3, #64	; 0x40
 80027e4:	d107      	bne.n	80027f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 fa0e 	bl	8002c12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b20      	cmp	r3, #32
 8002802:	d10e      	bne.n	8002822 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b20      	cmp	r3, #32
 8002810:	d107      	bne.n	8002822 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f06f 0220 	mvn.w	r2, #32
 800281a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 fdfb 	bl	8003418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002846:	2302      	movs	r3, #2
 8002848:	e0ae      	b.n	80029a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b0c      	cmp	r3, #12
 8002856:	f200 809f 	bhi.w	8002998 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800285a:	a201      	add	r2, pc, #4	; (adr r2, 8002860 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800285c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002860:	08002895 	.word	0x08002895
 8002864:	08002999 	.word	0x08002999
 8002868:	08002999 	.word	0x08002999
 800286c:	08002999 	.word	0x08002999
 8002870:	080028d5 	.word	0x080028d5
 8002874:	08002999 	.word	0x08002999
 8002878:	08002999 	.word	0x08002999
 800287c:	08002999 	.word	0x08002999
 8002880:	08002917 	.word	0x08002917
 8002884:	08002999 	.word	0x08002999
 8002888:	08002999 	.word	0x08002999
 800288c:	08002999 	.word	0x08002999
 8002890:	08002957 	.word	0x08002957
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fa64 	bl	8002d68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0208 	orr.w	r2, r2, #8
 80028ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0204 	bic.w	r2, r2, #4
 80028be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6999      	ldr	r1, [r3, #24]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	619a      	str	r2, [r3, #24]
      break;
 80028d2:	e064      	b.n	800299e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fab4 	bl	8002e48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6999      	ldr	r1, [r3, #24]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	021a      	lsls	r2, r3, #8
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	619a      	str	r2, [r3, #24]
      break;
 8002914:	e043      	b.n	800299e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68b9      	ldr	r1, [r7, #8]
 800291c:	4618      	mov	r0, r3
 800291e:	f000 fb09 	bl	8002f34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69da      	ldr	r2, [r3, #28]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0208 	orr.w	r2, r2, #8
 8002930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69da      	ldr	r2, [r3, #28]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0204 	bic.w	r2, r2, #4
 8002940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69d9      	ldr	r1, [r3, #28]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	61da      	str	r2, [r3, #28]
      break;
 8002954:	e023      	b.n	800299e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fb5d 	bl	800301c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	69da      	ldr	r2, [r3, #28]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69d9      	ldr	r1, [r3, #28]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	021a      	lsls	r2, r3, #8
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	61da      	str	r2, [r3, #28]
      break;
 8002996:	e002      	b.n	800299e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	75fb      	strb	r3, [r7, #23]
      break;
 800299c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d101      	bne.n	80029cc <HAL_TIM_ConfigClockSource+0x1c>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e0b4      	b.n	8002b36 <HAL_TIM_ConfigClockSource+0x186>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a04:	d03e      	beq.n	8002a84 <HAL_TIM_ConfigClockSource+0xd4>
 8002a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a0a:	f200 8087 	bhi.w	8002b1c <HAL_TIM_ConfigClockSource+0x16c>
 8002a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a12:	f000 8086 	beq.w	8002b22 <HAL_TIM_ConfigClockSource+0x172>
 8002a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1a:	d87f      	bhi.n	8002b1c <HAL_TIM_ConfigClockSource+0x16c>
 8002a1c:	2b70      	cmp	r3, #112	; 0x70
 8002a1e:	d01a      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0xa6>
 8002a20:	2b70      	cmp	r3, #112	; 0x70
 8002a22:	d87b      	bhi.n	8002b1c <HAL_TIM_ConfigClockSource+0x16c>
 8002a24:	2b60      	cmp	r3, #96	; 0x60
 8002a26:	d050      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0x11a>
 8002a28:	2b60      	cmp	r3, #96	; 0x60
 8002a2a:	d877      	bhi.n	8002b1c <HAL_TIM_ConfigClockSource+0x16c>
 8002a2c:	2b50      	cmp	r3, #80	; 0x50
 8002a2e:	d03c      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0xfa>
 8002a30:	2b50      	cmp	r3, #80	; 0x50
 8002a32:	d873      	bhi.n	8002b1c <HAL_TIM_ConfigClockSource+0x16c>
 8002a34:	2b40      	cmp	r3, #64	; 0x40
 8002a36:	d058      	beq.n	8002aea <HAL_TIM_ConfigClockSource+0x13a>
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	d86f      	bhi.n	8002b1c <HAL_TIM_ConfigClockSource+0x16c>
 8002a3c:	2b30      	cmp	r3, #48	; 0x30
 8002a3e:	d064      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x15a>
 8002a40:	2b30      	cmp	r3, #48	; 0x30
 8002a42:	d86b      	bhi.n	8002b1c <HAL_TIM_ConfigClockSource+0x16c>
 8002a44:	2b20      	cmp	r3, #32
 8002a46:	d060      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x15a>
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	d867      	bhi.n	8002b1c <HAL_TIM_ConfigClockSource+0x16c>
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d05c      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x15a>
 8002a50:	2b10      	cmp	r3, #16
 8002a52:	d05a      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x15a>
 8002a54:	e062      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6899      	ldr	r1, [r3, #8]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f000 fc3a 	bl	80032de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	609a      	str	r2, [r3, #8]
      break;
 8002a82:	e04f      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	6899      	ldr	r1, [r3, #8]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f000 fc23 	bl	80032de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aa6:	609a      	str	r2, [r3, #8]
      break;
 8002aa8:	e03c      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6859      	ldr	r1, [r3, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f000 fb97 	bl	80031ea <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2150      	movs	r1, #80	; 0x50
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fbf0 	bl	80032a8 <TIM_ITRx_SetConfig>
      break;
 8002ac8:	e02c      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6859      	ldr	r1, [r3, #4]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f000 fbb6 	bl	8003248 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2160      	movs	r1, #96	; 0x60
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fbe0 	bl	80032a8 <TIM_ITRx_SetConfig>
      break;
 8002ae8:	e01c      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6859      	ldr	r1, [r3, #4]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	461a      	mov	r2, r3
 8002af8:	f000 fb77 	bl	80031ea <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2140      	movs	r1, #64	; 0x40
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fbd0 	bl	80032a8 <TIM_ITRx_SetConfig>
      break;
 8002b08:	e00c      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4619      	mov	r1, r3
 8002b14:	4610      	mov	r0, r2
 8002b16:	f000 fbc7 	bl	80032a8 <TIM_ITRx_SetConfig>
      break;
 8002b1a:	e003      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b20:	e000      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e031      	b.n	8002bba <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2202      	movs	r2, #2
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002b66:	6839      	ldr	r1, [r7, #0]
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 faad 	bl	80030c8 <TIM_SlaveTimer_SetConfig>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d009      	beq.n	8002b88 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e018      	b.n	8002bba <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b96:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ba6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a40      	ldr	r2, [pc, #256]	; (8002d3c <TIM_Base_SetConfig+0x114>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d013      	beq.n	8002c68 <TIM_Base_SetConfig+0x40>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c46:	d00f      	beq.n	8002c68 <TIM_Base_SetConfig+0x40>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a3d      	ldr	r2, [pc, #244]	; (8002d40 <TIM_Base_SetConfig+0x118>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00b      	beq.n	8002c68 <TIM_Base_SetConfig+0x40>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a3c      	ldr	r2, [pc, #240]	; (8002d44 <TIM_Base_SetConfig+0x11c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d007      	beq.n	8002c68 <TIM_Base_SetConfig+0x40>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a3b      	ldr	r2, [pc, #236]	; (8002d48 <TIM_Base_SetConfig+0x120>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d003      	beq.n	8002c68 <TIM_Base_SetConfig+0x40>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a3a      	ldr	r2, [pc, #232]	; (8002d4c <TIM_Base_SetConfig+0x124>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d108      	bne.n	8002c7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a2f      	ldr	r2, [pc, #188]	; (8002d3c <TIM_Base_SetConfig+0x114>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d02b      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c88:	d027      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a2c      	ldr	r2, [pc, #176]	; (8002d40 <TIM_Base_SetConfig+0x118>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d023      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a2b      	ldr	r2, [pc, #172]	; (8002d44 <TIM_Base_SetConfig+0x11c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d01f      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a2a      	ldr	r2, [pc, #168]	; (8002d48 <TIM_Base_SetConfig+0x120>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01b      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a29      	ldr	r2, [pc, #164]	; (8002d4c <TIM_Base_SetConfig+0x124>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d017      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a28      	ldr	r2, [pc, #160]	; (8002d50 <TIM_Base_SetConfig+0x128>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a27      	ldr	r2, [pc, #156]	; (8002d54 <TIM_Base_SetConfig+0x12c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00f      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a26      	ldr	r2, [pc, #152]	; (8002d58 <TIM_Base_SetConfig+0x130>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00b      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a25      	ldr	r2, [pc, #148]	; (8002d5c <TIM_Base_SetConfig+0x134>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a24      	ldr	r2, [pc, #144]	; (8002d60 <TIM_Base_SetConfig+0x138>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d003      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a23      	ldr	r2, [pc, #140]	; (8002d64 <TIM_Base_SetConfig+0x13c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d108      	bne.n	8002cec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <TIM_Base_SetConfig+0x114>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d003      	beq.n	8002d20 <TIM_Base_SetConfig+0xf8>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a0c      	ldr	r2, [pc, #48]	; (8002d4c <TIM_Base_SetConfig+0x124>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d103      	bne.n	8002d28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	615a      	str	r2, [r3, #20]
}
 8002d2e:	bf00      	nop
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40010000 	.word	0x40010000
 8002d40:	40000400 	.word	0x40000400
 8002d44:	40000800 	.word	0x40000800
 8002d48:	40000c00 	.word	0x40000c00
 8002d4c:	40010400 	.word	0x40010400
 8002d50:	40014000 	.word	0x40014000
 8002d54:	40014400 	.word	0x40014400
 8002d58:	40014800 	.word	0x40014800
 8002d5c:	40001800 	.word	0x40001800
 8002d60:	40001c00 	.word	0x40001c00
 8002d64:	40002000 	.word	0x40002000

08002d68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	f023 0201 	bic.w	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0303 	bic.w	r3, r3, #3
 8002d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f023 0302 	bic.w	r3, r3, #2
 8002db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a20      	ldr	r2, [pc, #128]	; (8002e40 <TIM_OC1_SetConfig+0xd8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d003      	beq.n	8002dcc <TIM_OC1_SetConfig+0x64>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a1f      	ldr	r2, [pc, #124]	; (8002e44 <TIM_OC1_SetConfig+0xdc>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d10c      	bne.n	8002de6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f023 0308 	bic.w	r3, r3, #8
 8002dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f023 0304 	bic.w	r3, r3, #4
 8002de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <TIM_OC1_SetConfig+0xd8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d003      	beq.n	8002df6 <TIM_OC1_SetConfig+0x8e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a14      	ldr	r2, [pc, #80]	; (8002e44 <TIM_OC1_SetConfig+0xdc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d111      	bne.n	8002e1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	621a      	str	r2, [r3, #32]
}
 8002e34:	bf00      	nop
 8002e36:	371c      	adds	r7, #28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	40010000 	.word	0x40010000
 8002e44:	40010400 	.word	0x40010400

08002e48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	f023 0210 	bic.w	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f023 0320 	bic.w	r3, r3, #32
 8002e92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <TIM_OC2_SetConfig+0xe4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d003      	beq.n	8002eb0 <TIM_OC2_SetConfig+0x68>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a21      	ldr	r2, [pc, #132]	; (8002f30 <TIM_OC2_SetConfig+0xe8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d10d      	bne.n	8002ecc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a17      	ldr	r2, [pc, #92]	; (8002f2c <TIM_OC2_SetConfig+0xe4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d003      	beq.n	8002edc <TIM_OC2_SetConfig+0x94>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <TIM_OC2_SetConfig+0xe8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d113      	bne.n	8002f04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	621a      	str	r2, [r3, #32]
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40010000 	.word	0x40010000
 8002f30:	40010400 	.word	0x40010400

08002f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f023 0303 	bic.w	r3, r3, #3
 8002f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a21      	ldr	r2, [pc, #132]	; (8003014 <TIM_OC3_SetConfig+0xe0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d003      	beq.n	8002f9a <TIM_OC3_SetConfig+0x66>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a20      	ldr	r2, [pc, #128]	; (8003018 <TIM_OC3_SetConfig+0xe4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d10d      	bne.n	8002fb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	021b      	lsls	r3, r3, #8
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a16      	ldr	r2, [pc, #88]	; (8003014 <TIM_OC3_SetConfig+0xe0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d003      	beq.n	8002fc6 <TIM_OC3_SetConfig+0x92>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a15      	ldr	r2, [pc, #84]	; (8003018 <TIM_OC3_SetConfig+0xe4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d113      	bne.n	8002fee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	621a      	str	r2, [r3, #32]
}
 8003008:	bf00      	nop
 800300a:	371c      	adds	r7, #28
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	40010000 	.word	0x40010000
 8003018:	40010400 	.word	0x40010400

0800301c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800304a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	031b      	lsls	r3, r3, #12
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a12      	ldr	r2, [pc, #72]	; (80030c0 <TIM_OC4_SetConfig+0xa4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d003      	beq.n	8003084 <TIM_OC4_SetConfig+0x68>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a11      	ldr	r2, [pc, #68]	; (80030c4 <TIM_OC4_SetConfig+0xa8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d109      	bne.n	8003098 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800308a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	019b      	lsls	r3, r3, #6
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	621a      	str	r2, [r3, #32]
}
 80030b2:	bf00      	nop
 80030b4:	371c      	adds	r7, #28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40010000 	.word	0x40010000
 80030c4:	40010400 	.word	0x40010400

080030c8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f023 0307 	bic.w	r3, r3, #7
 80030f6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b70      	cmp	r3, #112	; 0x70
 8003110:	d01a      	beq.n	8003148 <TIM_SlaveTimer_SetConfig+0x80>
 8003112:	2b70      	cmp	r3, #112	; 0x70
 8003114:	d860      	bhi.n	80031d8 <TIM_SlaveTimer_SetConfig+0x110>
 8003116:	2b60      	cmp	r3, #96	; 0x60
 8003118:	d054      	beq.n	80031c4 <TIM_SlaveTimer_SetConfig+0xfc>
 800311a:	2b60      	cmp	r3, #96	; 0x60
 800311c:	d85c      	bhi.n	80031d8 <TIM_SlaveTimer_SetConfig+0x110>
 800311e:	2b50      	cmp	r3, #80	; 0x50
 8003120:	d046      	beq.n	80031b0 <TIM_SlaveTimer_SetConfig+0xe8>
 8003122:	2b50      	cmp	r3, #80	; 0x50
 8003124:	d858      	bhi.n	80031d8 <TIM_SlaveTimer_SetConfig+0x110>
 8003126:	2b40      	cmp	r3, #64	; 0x40
 8003128:	d019      	beq.n	800315e <TIM_SlaveTimer_SetConfig+0x96>
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	d854      	bhi.n	80031d8 <TIM_SlaveTimer_SetConfig+0x110>
 800312e:	2b30      	cmp	r3, #48	; 0x30
 8003130:	d055      	beq.n	80031de <TIM_SlaveTimer_SetConfig+0x116>
 8003132:	2b30      	cmp	r3, #48	; 0x30
 8003134:	d850      	bhi.n	80031d8 <TIM_SlaveTimer_SetConfig+0x110>
 8003136:	2b20      	cmp	r3, #32
 8003138:	d051      	beq.n	80031de <TIM_SlaveTimer_SetConfig+0x116>
 800313a:	2b20      	cmp	r3, #32
 800313c:	d84c      	bhi.n	80031d8 <TIM_SlaveTimer_SetConfig+0x110>
 800313e:	2b00      	cmp	r3, #0
 8003140:	d04d      	beq.n	80031de <TIM_SlaveTimer_SetConfig+0x116>
 8003142:	2b10      	cmp	r3, #16
 8003144:	d04b      	beq.n	80031de <TIM_SlaveTimer_SetConfig+0x116>
 8003146:	e047      	b.n	80031d8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68d9      	ldr	r1, [r3, #12]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f000 f8c1 	bl	80032de <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800315c:	e040      	b.n	80031e0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b05      	cmp	r3, #5
 8003164:	d101      	bne.n	800316a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e03b      	b.n	80031e2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6a1a      	ldr	r2, [r3, #32]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0201 	bic.w	r2, r2, #1
 8003180:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003190:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	4313      	orrs	r3, r2
 800319c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	621a      	str	r2, [r3, #32]
      break;
 80031ae:	e017      	b.n	80031e0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6899      	ldr	r1, [r3, #8]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	461a      	mov	r2, r3
 80031be:	f000 f814 	bl	80031ea <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80031c2:	e00d      	b.n	80031e0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	6899      	ldr	r1, [r3, #8]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	461a      	mov	r2, r3
 80031d2:	f000 f839 	bl	8003248 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80031d6:	e003      	b.n	80031e0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	75fb      	strb	r3, [r7, #23]
      break;
 80031dc:	e000      	b.n	80031e0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80031de:	bf00      	nop
  }

  return status;
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b087      	sub	sp, #28
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	f023 0201 	bic.w	r2, r3, #1
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f023 030a 	bic.w	r3, r3, #10
 8003226:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	621a      	str	r2, [r3, #32]
}
 800323c:	bf00      	nop
 800323e:	371c      	adds	r7, #28
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f023 0210 	bic.w	r2, r3, #16
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003272:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	031b      	lsls	r3, r3, #12
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003284:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	621a      	str	r2, [r3, #32]
}
 800329c:	bf00      	nop
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f043 0307 	orr.w	r3, r3, #7
 80032ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	609a      	str	r2, [r3, #8]
}
 80032d2:	bf00      	nop
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032de:	b480      	push	{r7}
 80032e0:	b087      	sub	sp, #28
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	607a      	str	r2, [r7, #4]
 80032ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	021a      	lsls	r2, r3, #8
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	431a      	orrs	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	4313      	orrs	r3, r2
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	609a      	str	r2, [r3, #8]
}
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003334:	2302      	movs	r3, #2
 8003336:	e05a      	b.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800335e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a21      	ldr	r2, [pc, #132]	; (80033fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d022      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003384:	d01d      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d018      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a1b      	ldr	r2, [pc, #108]	; (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1a      	ldr	r2, [pc, #104]	; (8003408 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00e      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a18      	ldr	r2, [pc, #96]	; (800340c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d009      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a17      	ldr	r2, [pc, #92]	; (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d004      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a15      	ldr	r2, [pc, #84]	; (8003414 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d10c      	bne.n	80033dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40010000 	.word	0x40010000
 8003400:	40000400 	.word	0x40000400
 8003404:	40000800 	.word	0x40000800
 8003408:	40000c00 	.word	0x40000c00
 800340c:	40010400 	.word	0x40010400
 8003410:	40014000 	.word	0x40014000
 8003414:	40001800 	.word	0x40001800

08003418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e03f      	b.n	80034d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd fe2e 	bl	80010c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	; 0x24
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f929 	bl	80036dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b08a      	sub	sp, #40	; 0x28
 80034de:	af02      	add	r7, sp, #8
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	4613      	mov	r3, r2
 80034e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	d17c      	bne.n	80035f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <HAL_UART_Transmit+0x2c>
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e075      	b.n	80035f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_UART_Transmit+0x3e>
 8003514:	2302      	movs	r3, #2
 8003516:	e06e      	b.n	80035f6 <HAL_UART_Transmit+0x11c>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2221      	movs	r2, #33	; 0x21
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800352e:	f7fd ffab 	bl	8001488 <HAL_GetTick>
 8003532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	88fa      	ldrh	r2, [r7, #6]
 8003538:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	88fa      	ldrh	r2, [r7, #6]
 800353e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003548:	d108      	bne.n	800355c <HAL_UART_Transmit+0x82>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d104      	bne.n	800355c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	e003      	b.n	8003564 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003560:	2300      	movs	r3, #0
 8003562:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800356c:	e02a      	b.n	80035c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	2180      	movs	r1, #128	; 0x80
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f840 	bl	80035fe <UART_WaitOnFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e036      	b.n	80035f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10b      	bne.n	80035a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800359c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	3302      	adds	r3, #2
 80035a2:	61bb      	str	r3, [r7, #24]
 80035a4:	e007      	b.n	80035b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	781a      	ldrb	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	3301      	adds	r3, #1
 80035b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1cf      	bne.n	800356e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2200      	movs	r2, #0
 80035d6:	2140      	movs	r1, #64	; 0x40
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f810 	bl	80035fe <UART_WaitOnFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e006      	b.n	80035f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e000      	b.n	80035f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035f4:	2302      	movs	r3, #2
  }
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b090      	sub	sp, #64	; 0x40
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	4613      	mov	r3, r2
 800360c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360e:	e050      	b.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003616:	d04c      	beq.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <UART_WaitOnFlagUntilTimeout+0x30>
 800361e:	f7fd ff33 	bl	8001488 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800362a:	429a      	cmp	r2, r3
 800362c:	d241      	bcs.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003638:	e853 3f00 	ldrex	r3, [r3]
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	330c      	adds	r3, #12
 800364c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800364e:	637a      	str	r2, [r7, #52]	; 0x34
 8003650:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003652:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003656:	e841 2300 	strex	r3, r2, [r1]
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e5      	bne.n	800362e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3314      	adds	r3, #20
 8003668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	e853 3f00 	ldrex	r3, [r3]
 8003670:	613b      	str	r3, [r7, #16]
   return(result);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	63bb      	str	r3, [r7, #56]	; 0x38
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3314      	adds	r3, #20
 8003680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003682:	623a      	str	r2, [r7, #32]
 8003684:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003686:	69f9      	ldr	r1, [r7, #28]
 8003688:	6a3a      	ldr	r2, [r7, #32]
 800368a:	e841 2300 	strex	r3, r2, [r1]
 800368e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1e5      	bne.n	8003662 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e00f      	b.n	80036d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4013      	ands	r3, r2
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	429a      	cmp	r2, r3
 80036c0:	bf0c      	ite	eq
 80036c2:	2301      	moveq	r3, #1
 80036c4:	2300      	movne	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	461a      	mov	r2, r3
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d09f      	beq.n	8003610 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3740      	adds	r7, #64	; 0x40
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e0:	b09f      	sub	sp, #124	; 0x7c
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f2:	68d9      	ldr	r1, [r3, #12]
 80036f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	ea40 0301 	orr.w	r3, r0, r1
 80036fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	431a      	orrs	r2, r3
 8003708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	431a      	orrs	r2, r3
 800370e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	4313      	orrs	r3, r2
 8003714:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003720:	f021 010c 	bic.w	r1, r1, #12
 8003724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800372a:	430b      	orrs	r3, r1
 800372c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800372e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373a:	6999      	ldr	r1, [r3, #24]
 800373c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	ea40 0301 	orr.w	r3, r0, r1
 8003744:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	4bc5      	ldr	r3, [pc, #788]	; (8003a60 <UART_SetConfig+0x384>)
 800374c:	429a      	cmp	r2, r3
 800374e:	d004      	beq.n	800375a <UART_SetConfig+0x7e>
 8003750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4bc3      	ldr	r3, [pc, #780]	; (8003a64 <UART_SetConfig+0x388>)
 8003756:	429a      	cmp	r2, r3
 8003758:	d103      	bne.n	8003762 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800375a:	f7fe fe39 	bl	80023d0 <HAL_RCC_GetPCLK2Freq>
 800375e:	6778      	str	r0, [r7, #116]	; 0x74
 8003760:	e002      	b.n	8003768 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003762:	f7fe fe21 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
 8003766:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003770:	f040 80b6 	bne.w	80038e0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003776:	461c      	mov	r4, r3
 8003778:	f04f 0500 	mov.w	r5, #0
 800377c:	4622      	mov	r2, r4
 800377e:	462b      	mov	r3, r5
 8003780:	1891      	adds	r1, r2, r2
 8003782:	6439      	str	r1, [r7, #64]	; 0x40
 8003784:	415b      	adcs	r3, r3
 8003786:	647b      	str	r3, [r7, #68]	; 0x44
 8003788:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800378c:	1912      	adds	r2, r2, r4
 800378e:	eb45 0303 	adc.w	r3, r5, r3
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f04f 0100 	mov.w	r1, #0
 800379a:	00d9      	lsls	r1, r3, #3
 800379c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037a0:	00d0      	lsls	r0, r2, #3
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	1911      	adds	r1, r2, r4
 80037a8:	6639      	str	r1, [r7, #96]	; 0x60
 80037aa:	416b      	adcs	r3, r5
 80037ac:	667b      	str	r3, [r7, #100]	; 0x64
 80037ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	461a      	mov	r2, r3
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	1891      	adds	r1, r2, r2
 80037ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80037bc:	415b      	adcs	r3, r3
 80037be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80037c8:	f7fc fd6a 	bl	80002a0 <__aeabi_uldivmod>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4ba5      	ldr	r3, [pc, #660]	; (8003a68 <UART_SetConfig+0x38c>)
 80037d2:	fba3 2302 	umull	r2, r3, r3, r2
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	011e      	lsls	r6, r3, #4
 80037da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037dc:	461c      	mov	r4, r3
 80037de:	f04f 0500 	mov.w	r5, #0
 80037e2:	4622      	mov	r2, r4
 80037e4:	462b      	mov	r3, r5
 80037e6:	1891      	adds	r1, r2, r2
 80037e8:	6339      	str	r1, [r7, #48]	; 0x30
 80037ea:	415b      	adcs	r3, r3
 80037ec:	637b      	str	r3, [r7, #52]	; 0x34
 80037ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80037f2:	1912      	adds	r2, r2, r4
 80037f4:	eb45 0303 	adc.w	r3, r5, r3
 80037f8:	f04f 0000 	mov.w	r0, #0
 80037fc:	f04f 0100 	mov.w	r1, #0
 8003800:	00d9      	lsls	r1, r3, #3
 8003802:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003806:	00d0      	lsls	r0, r2, #3
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	1911      	adds	r1, r2, r4
 800380e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003810:	416b      	adcs	r3, r5
 8003812:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	461a      	mov	r2, r3
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	1891      	adds	r1, r2, r2
 8003820:	62b9      	str	r1, [r7, #40]	; 0x28
 8003822:	415b      	adcs	r3, r3
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800382a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800382e:	f7fc fd37 	bl	80002a0 <__aeabi_uldivmod>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4b8c      	ldr	r3, [pc, #560]	; (8003a68 <UART_SetConfig+0x38c>)
 8003838:	fba3 1302 	umull	r1, r3, r3, r2
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	2164      	movs	r1, #100	; 0x64
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	3332      	adds	r3, #50	; 0x32
 800384a:	4a87      	ldr	r2, [pc, #540]	; (8003a68 <UART_SetConfig+0x38c>)
 800384c:	fba2 2303 	umull	r2, r3, r2, r3
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003858:	441e      	add	r6, r3
 800385a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800385c:	4618      	mov	r0, r3
 800385e:	f04f 0100 	mov.w	r1, #0
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	1894      	adds	r4, r2, r2
 8003868:	623c      	str	r4, [r7, #32]
 800386a:	415b      	adcs	r3, r3
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
 800386e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003872:	1812      	adds	r2, r2, r0
 8003874:	eb41 0303 	adc.w	r3, r1, r3
 8003878:	f04f 0400 	mov.w	r4, #0
 800387c:	f04f 0500 	mov.w	r5, #0
 8003880:	00dd      	lsls	r5, r3, #3
 8003882:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003886:	00d4      	lsls	r4, r2, #3
 8003888:	4622      	mov	r2, r4
 800388a:	462b      	mov	r3, r5
 800388c:	1814      	adds	r4, r2, r0
 800388e:	653c      	str	r4, [r7, #80]	; 0x50
 8003890:	414b      	adcs	r3, r1
 8003892:	657b      	str	r3, [r7, #84]	; 0x54
 8003894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	461a      	mov	r2, r3
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	1891      	adds	r1, r2, r2
 80038a0:	61b9      	str	r1, [r7, #24]
 80038a2:	415b      	adcs	r3, r3
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80038ae:	f7fc fcf7 	bl	80002a0 <__aeabi_uldivmod>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	4b6c      	ldr	r3, [pc, #432]	; (8003a68 <UART_SetConfig+0x38c>)
 80038b8:	fba3 1302 	umull	r1, r3, r3, r2
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	2164      	movs	r1, #100	; 0x64
 80038c0:	fb01 f303 	mul.w	r3, r1, r3
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	3332      	adds	r3, #50	; 0x32
 80038ca:	4a67      	ldr	r2, [pc, #412]	; (8003a68 <UART_SetConfig+0x38c>)
 80038cc:	fba2 2303 	umull	r2, r3, r2, r3
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	f003 0207 	and.w	r2, r3, #7
 80038d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4432      	add	r2, r6
 80038dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038de:	e0b9      	b.n	8003a54 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038e2:	461c      	mov	r4, r3
 80038e4:	f04f 0500 	mov.w	r5, #0
 80038e8:	4622      	mov	r2, r4
 80038ea:	462b      	mov	r3, r5
 80038ec:	1891      	adds	r1, r2, r2
 80038ee:	6139      	str	r1, [r7, #16]
 80038f0:	415b      	adcs	r3, r3
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038f8:	1912      	adds	r2, r2, r4
 80038fa:	eb45 0303 	adc.w	r3, r5, r3
 80038fe:	f04f 0000 	mov.w	r0, #0
 8003902:	f04f 0100 	mov.w	r1, #0
 8003906:	00d9      	lsls	r1, r3, #3
 8003908:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800390c:	00d0      	lsls	r0, r2, #3
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	eb12 0804 	adds.w	r8, r2, r4
 8003916:	eb43 0905 	adc.w	r9, r3, r5
 800391a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4618      	mov	r0, r3
 8003920:	f04f 0100 	mov.w	r1, #0
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	008b      	lsls	r3, r1, #2
 800392e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003932:	0082      	lsls	r2, r0, #2
 8003934:	4640      	mov	r0, r8
 8003936:	4649      	mov	r1, r9
 8003938:	f7fc fcb2 	bl	80002a0 <__aeabi_uldivmod>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4b49      	ldr	r3, [pc, #292]	; (8003a68 <UART_SetConfig+0x38c>)
 8003942:	fba3 2302 	umull	r2, r3, r3, r2
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	011e      	lsls	r6, r3, #4
 800394a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800394c:	4618      	mov	r0, r3
 800394e:	f04f 0100 	mov.w	r1, #0
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	1894      	adds	r4, r2, r2
 8003958:	60bc      	str	r4, [r7, #8]
 800395a:	415b      	adcs	r3, r3
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003962:	1812      	adds	r2, r2, r0
 8003964:	eb41 0303 	adc.w	r3, r1, r3
 8003968:	f04f 0400 	mov.w	r4, #0
 800396c:	f04f 0500 	mov.w	r5, #0
 8003970:	00dd      	lsls	r5, r3, #3
 8003972:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003976:	00d4      	lsls	r4, r2, #3
 8003978:	4622      	mov	r2, r4
 800397a:	462b      	mov	r3, r5
 800397c:	1814      	adds	r4, r2, r0
 800397e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003980:	414b      	adcs	r3, r1
 8003982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4618      	mov	r0, r3
 800398a:	f04f 0100 	mov.w	r1, #0
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	008b      	lsls	r3, r1, #2
 8003998:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800399c:	0082      	lsls	r2, r0, #2
 800399e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80039a2:	f7fc fc7d 	bl	80002a0 <__aeabi_uldivmod>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4b2f      	ldr	r3, [pc, #188]	; (8003a68 <UART_SetConfig+0x38c>)
 80039ac:	fba3 1302 	umull	r1, r3, r3, r2
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	2164      	movs	r1, #100	; 0x64
 80039b4:	fb01 f303 	mul.w	r3, r1, r3
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	3332      	adds	r3, #50	; 0x32
 80039be:	4a2a      	ldr	r2, [pc, #168]	; (8003a68 <UART_SetConfig+0x38c>)
 80039c0:	fba2 2303 	umull	r2, r3, r2, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ca:	441e      	add	r6, r3
 80039cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ce:	4618      	mov	r0, r3
 80039d0:	f04f 0100 	mov.w	r1, #0
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	1894      	adds	r4, r2, r2
 80039da:	603c      	str	r4, [r7, #0]
 80039dc:	415b      	adcs	r3, r3
 80039de:	607b      	str	r3, [r7, #4]
 80039e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039e4:	1812      	adds	r2, r2, r0
 80039e6:	eb41 0303 	adc.w	r3, r1, r3
 80039ea:	f04f 0400 	mov.w	r4, #0
 80039ee:	f04f 0500 	mov.w	r5, #0
 80039f2:	00dd      	lsls	r5, r3, #3
 80039f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039f8:	00d4      	lsls	r4, r2, #3
 80039fa:	4622      	mov	r2, r4
 80039fc:	462b      	mov	r3, r5
 80039fe:	eb12 0a00 	adds.w	sl, r2, r0
 8003a02:	eb43 0b01 	adc.w	fp, r3, r1
 8003a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f04f 0100 	mov.w	r1, #0
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	008b      	lsls	r3, r1, #2
 8003a1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a1e:	0082      	lsls	r2, r0, #2
 8003a20:	4650      	mov	r0, sl
 8003a22:	4659      	mov	r1, fp
 8003a24:	f7fc fc3c 	bl	80002a0 <__aeabi_uldivmod>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <UART_SetConfig+0x38c>)
 8003a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	2164      	movs	r1, #100	; 0x64
 8003a36:	fb01 f303 	mul.w	r3, r1, r3
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	3332      	adds	r3, #50	; 0x32
 8003a40:	4a09      	ldr	r2, [pc, #36]	; (8003a68 <UART_SetConfig+0x38c>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	f003 020f 	and.w	r2, r3, #15
 8003a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4432      	add	r2, r6
 8003a52:	609a      	str	r2, [r3, #8]
}
 8003a54:	bf00      	nop
 8003a56:	377c      	adds	r7, #124	; 0x7c
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a5e:	bf00      	nop
 8003a60:	40011000 	.word	0x40011000
 8003a64:	40011400 	.word	0x40011400
 8003a68:	51eb851f 	.word	0x51eb851f

08003a6c <SteppingMotorTest>:

bool 	is_running[OFFSET] 				= {false, false};
char uartBuf[4000];

void SteppingMotorTest(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
	// 90 degree rotation test

	sprintf(uartBuf, "ROTATE start!!\n");
 8003a70:	490d      	ldr	r1, [pc, #52]	; (8003aa8 <SteppingMotorTest+0x3c>)
 8003a72:	480e      	ldr	r0, [pc, #56]	; (8003aac <SteppingMotorTest+0x40>)
 8003a74:	f000 f91e 	bl	8003cb4 <siprintf>
	 HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 8003a78:	480c      	ldr	r0, [pc, #48]	; (8003aac <SteppingMotorTest+0x40>)
 8003a7a:	f7fc fbb9 	bl	80001f0 <strlen>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	2364      	movs	r3, #100	; 0x64
 8003a84:	4909      	ldr	r1, [pc, #36]	; (8003aac <SteppingMotorTest+0x40>)
 8003a86:	480a      	ldr	r0, [pc, #40]	; (8003ab0 <SteppingMotorTest+0x44>)
 8003a88:	f7ff fd27 	bl	80034da <HAL_UART_Transmit>

	controlSteppingMotor(CUP_D, STEPPING_MOTOR_ON, QUARTER, FREQ_FAST);
 8003a8c:	2332      	movs	r3, #50	; 0x32
 8003a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a92:	2101      	movs	r1, #1
 8003a94:	2002      	movs	r0, #2
 8003a96:	f000 f831 	bl	8003afc <controlSteppingMotor>
	HAL_Delay(2000);
 8003a9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003a9e:	f7fd fcff 	bl	80014a0 <HAL_Delay>


}
 8003aa2:	bf00      	nop
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	08004528 	.word	0x08004528
 8003aac:	200002c0 	.word	0x200002c0
 8003ab0:	20000118 	.word	0x20000118

08003ab4 <pulseMaker>:

void pulseMaker (uint16_t time)	//delay function in 10us
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003abe:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <pulseMaker+0x30>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8003ac6:	bf00      	nop
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <pulseMaker+0x30>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d3f9      	bcc.n	8003ac8 <pulseMaker+0x14>
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	200001e8 	.word	0x200001e8

08003ae8 <initCupLidDispensor>:

void initCupLidDispensor(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);
 8003aec:	4802      	ldr	r0, [pc, #8]	; (8003af8 <initCupLidDispensor+0x10>)
 8003aee:	f7fe fcd3 	bl	8002498 <HAL_TIM_Base_Start>

}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	200001e8 	.word	0x200001e8

08003afc <controlSteppingMotor>:

void controlSteppingMotor(uint8_t device_id, bool cmd, uint16_t angle, uint8_t freq)
{
 8003afc:	b590      	push	{r4, r7, lr}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4604      	mov	r4, r0
 8003b04:	4608      	mov	r0, r1
 8003b06:	4611      	mov	r1, r2
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4623      	mov	r3, r4
 8003b0c:	71fb      	strb	r3, [r7, #7]
 8003b0e:	4603      	mov	r3, r0
 8003b10:	71bb      	strb	r3, [r7, #6]
 8003b12:	460b      	mov	r3, r1
 8003b14:	80bb      	strh	r3, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	70fb      	strb	r3, [r7, #3]
	uint8_t ID = device_id - OFFSET;
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	3b02      	subs	r3, #2
 8003b1e:	737b      	strb	r3, [r7, #13]

	if(cmd == STEPPING_MOTOR_ON){
 8003b20:	79bb      	ldrb	r3, [r7, #6]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d178      	bne.n	8003c18 <controlSteppingMotor+0x11c>
		is_running[ID] = true;
 8003b26:	7b7b      	ldrb	r3, [r7, #13]
 8003b28:	4a42      	ldr	r2, [pc, #264]	; (8003c34 <controlSteppingMotor+0x138>)
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	54d1      	strb	r1, [r2, r3]
		HAL_GPIO_WritePin(CupD_EN_GPIO_Port, CupD_EN_Pin, GPIO_PIN_SET); //EN - SET = enable MOTOR
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b34:	4840      	ldr	r0, [pc, #256]	; (8003c38 <controlSteppingMotor+0x13c>)
 8003b36:	f7fd ffad 	bl	8001a94 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8003b3a:	200a      	movs	r0, #10
 8003b3c:	f7fd fcb0 	bl	80014a0 <HAL_Delay>

		for(uint16_t step=0; step < angle; step++){
 8003b40:	2300      	movs	r3, #0
 8003b42:	81fb      	strh	r3, [r7, #14]
 8003b44:	e064      	b.n	8003c10 <controlSteppingMotor+0x114>
			HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID], SteppingMotor_Pin[ID], GPIO_PIN_SET);
 8003b46:	7b7b      	ldrb	r3, [r7, #13]
 8003b48:	4a3c      	ldr	r2, [pc, #240]	; (8003c3c <controlSteppingMotor+0x140>)
 8003b4a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b4e:	7b7b      	ldrb	r3, [r7, #13]
 8003b50:	4a3b      	ldr	r2, [pc, #236]	; (8003c40 <controlSteppingMotor+0x144>)
 8003b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2201      	movs	r2, #1
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	f7fd ff9a 	bl	8001a94 <HAL_GPIO_WritePin>
			pulseMaker(freq);
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff ffa5 	bl	8003ab4 <pulseMaker>
			HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID], SteppingMotor_Pin[ID], GPIO_PIN_RESET);
 8003b6a:	7b7b      	ldrb	r3, [r7, #13]
 8003b6c:	4a33      	ldr	r2, [pc, #204]	; (8003c3c <controlSteppingMotor+0x140>)
 8003b6e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b72:	7b7b      	ldrb	r3, [r7, #13]
 8003b74:	4a32      	ldr	r2, [pc, #200]	; (8003c40 <controlSteppingMotor+0x144>)
 8003b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	4619      	mov	r1, r3
 8003b80:	f7fd ff88 	bl	8001a94 <HAL_GPIO_WritePin>
			pulseMaker(freq);
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff ff93 	bl	8003ab4 <pulseMaker>

			if(is_detected[ID][UP] == false){
 8003b8e:	7b7b      	ldrb	r3, [r7, #13]
 8003b90:	4a2c      	ldr	r2, [pc, #176]	; (8003c44 <controlSteppingMotor+0x148>)
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	4413      	add	r3, r2
 8003b96:	785b      	ldrb	r3, [r3, #1]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d117      	bne.n	8003bcc <controlSteppingMotor+0xd0>
				if(HAL_GPIO_ReadPin(MotorSpeedSensor_GPIO_Port[ID][UP], MotorSpeedSensor_Pin[ID][UP]))
 8003b9c:	7b7b      	ldrb	r3, [r7, #13]
 8003b9e:	4a2a      	ldr	r2, [pc, #168]	; (8003c48 <controlSteppingMotor+0x14c>)
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	7b7b      	ldrb	r3, [r7, #13]
 8003ba8:	4928      	ldr	r1, [pc, #160]	; (8003c4c <controlSteppingMotor+0x150>)
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	440b      	add	r3, r1
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	f7fd ff55 	bl	8001a64 <HAL_GPIO_ReadPin>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <controlSteppingMotor+0xd0>
					is_detected[ID][UP] = true;
 8003bc0:	7b7b      	ldrb	r3, [r7, #13]
 8003bc2:	4a20      	ldr	r2, [pc, #128]	; (8003c44 <controlSteppingMotor+0x148>)
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	4413      	add	r3, r2
 8003bc8:	2201      	movs	r2, #1
 8003bca:	705a      	strb	r2, [r3, #1]
			}
			if(is_detected[ID][DOWN] == false){
 8003bcc:	7b7b      	ldrb	r3, [r7, #13]
 8003bce:	4a1d      	ldr	r2, [pc, #116]	; (8003c44 <controlSteppingMotor+0x148>)
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d117      	bne.n	8003c0a <controlSteppingMotor+0x10e>
				if(HAL_GPIO_ReadPin(MotorSpeedSensor_GPIO_Port[ID][DOWN], MotorSpeedSensor_Pin[ID][DOWN]))
 8003bda:	7b7b      	ldrb	r3, [r7, #13]
 8003bdc:	4a1a      	ldr	r2, [pc, #104]	; (8003c48 <controlSteppingMotor+0x14c>)
 8003bde:	3301      	adds	r3, #1
 8003be0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003be4:	7b7b      	ldrb	r3, [r7, #13]
 8003be6:	4919      	ldr	r1, [pc, #100]	; (8003c4c <controlSteppingMotor+0x150>)
 8003be8:	3301      	adds	r3, #1
 8003bea:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	f7fd ff36 	bl	8001a64 <HAL_GPIO_ReadPin>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <controlSteppingMotor+0x10e>
					is_detected[ID][DOWN] = true;
 8003bfe:	7b7b      	ldrb	r3, [r7, #13]
 8003c00:	4a10      	ldr	r2, [pc, #64]	; (8003c44 <controlSteppingMotor+0x148>)
 8003c02:	3301      	adds	r3, #1
 8003c04:	2101      	movs	r1, #1
 8003c06:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		for(uint16_t step=0; step < angle; step++){
 8003c0a:	89fb      	ldrh	r3, [r7, #14]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	81fb      	strh	r3, [r7, #14]
 8003c10:	89fa      	ldrh	r2, [r7, #14]
 8003c12:	88bb      	ldrh	r3, [r7, #4]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d396      	bcc.n	8003b46 <controlSteppingMotor+0x4a>
			}
		}
	}
	// STEPPING_MOTOR_OFF
	HAL_GPIO_WritePin(CupD_EN_GPIO_Port, CupD_EN_Pin, GPIO_PIN_RESET); //EN - RESET = disable MOTOR
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c1e:	4806      	ldr	r0, [pc, #24]	; (8003c38 <controlSteppingMotor+0x13c>)
 8003c20:	f7fd ff38 	bl	8001a94 <HAL_GPIO_WritePin>

	is_running[ID] = false;
 8003c24:	7b7b      	ldrb	r3, [r7, #13]
 8003c26:	4a03      	ldr	r2, [pc, #12]	; (8003c34 <controlSteppingMotor+0x138>)
 8003c28:	2100      	movs	r1, #0
 8003c2a:	54d1      	strb	r1, [r2, r3]
}
 8003c2c:	bf00      	nop
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd90      	pop	{r4, r7, pc}
 8003c34:	200000c4 	.word	0x200000c4
 8003c38:	40021400 	.word	0x40021400
 8003c3c:	2000000c 	.word	0x2000000c
 8003c40:	20000014 	.word	0x20000014
 8003c44:	200000c0 	.word	0x200000c0
 8003c48:	2000001c 	.word	0x2000001c
 8003c4c:	2000002c 	.word	0x2000002c

08003c50 <__errno>:
 8003c50:	4b01      	ldr	r3, [pc, #4]	; (8003c58 <__errno+0x8>)
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	2000003c 	.word	0x2000003c

08003c5c <__libc_init_array>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4d0d      	ldr	r5, [pc, #52]	; (8003c94 <__libc_init_array+0x38>)
 8003c60:	4c0d      	ldr	r4, [pc, #52]	; (8003c98 <__libc_init_array+0x3c>)
 8003c62:	1b64      	subs	r4, r4, r5
 8003c64:	10a4      	asrs	r4, r4, #2
 8003c66:	2600      	movs	r6, #0
 8003c68:	42a6      	cmp	r6, r4
 8003c6a:	d109      	bne.n	8003c80 <__libc_init_array+0x24>
 8003c6c:	4d0b      	ldr	r5, [pc, #44]	; (8003c9c <__libc_init_array+0x40>)
 8003c6e:	4c0c      	ldr	r4, [pc, #48]	; (8003ca0 <__libc_init_array+0x44>)
 8003c70:	f000 fc4e 	bl	8004510 <_init>
 8003c74:	1b64      	subs	r4, r4, r5
 8003c76:	10a4      	asrs	r4, r4, #2
 8003c78:	2600      	movs	r6, #0
 8003c7a:	42a6      	cmp	r6, r4
 8003c7c:	d105      	bne.n	8003c8a <__libc_init_array+0x2e>
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c84:	4798      	blx	r3
 8003c86:	3601      	adds	r6, #1
 8003c88:	e7ee      	b.n	8003c68 <__libc_init_array+0xc>
 8003c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8e:	4798      	blx	r3
 8003c90:	3601      	adds	r6, #1
 8003c92:	e7f2      	b.n	8003c7a <__libc_init_array+0x1e>
 8003c94:	0800458c 	.word	0x0800458c
 8003c98:	0800458c 	.word	0x0800458c
 8003c9c:	0800458c 	.word	0x0800458c
 8003ca0:	08004590 	.word	0x08004590

08003ca4 <memset>:
 8003ca4:	4402      	add	r2, r0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d100      	bne.n	8003cae <memset+0xa>
 8003cac:	4770      	bx	lr
 8003cae:	f803 1b01 	strb.w	r1, [r3], #1
 8003cb2:	e7f9      	b.n	8003ca8 <memset+0x4>

08003cb4 <siprintf>:
 8003cb4:	b40e      	push	{r1, r2, r3}
 8003cb6:	b500      	push	{lr}
 8003cb8:	b09c      	sub	sp, #112	; 0x70
 8003cba:	ab1d      	add	r3, sp, #116	; 0x74
 8003cbc:	9002      	str	r0, [sp, #8]
 8003cbe:	9006      	str	r0, [sp, #24]
 8003cc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cc4:	4809      	ldr	r0, [pc, #36]	; (8003cec <siprintf+0x38>)
 8003cc6:	9107      	str	r1, [sp, #28]
 8003cc8:	9104      	str	r1, [sp, #16]
 8003cca:	4909      	ldr	r1, [pc, #36]	; (8003cf0 <siprintf+0x3c>)
 8003ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cd0:	9105      	str	r1, [sp, #20]
 8003cd2:	6800      	ldr	r0, [r0, #0]
 8003cd4:	9301      	str	r3, [sp, #4]
 8003cd6:	a902      	add	r1, sp, #8
 8003cd8:	f000 f868 	bl	8003dac <_svfiprintf_r>
 8003cdc:	9b02      	ldr	r3, [sp, #8]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	b01c      	add	sp, #112	; 0x70
 8003ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ce8:	b003      	add	sp, #12
 8003cea:	4770      	bx	lr
 8003cec:	2000003c 	.word	0x2000003c
 8003cf0:	ffff0208 	.word	0xffff0208

08003cf4 <__ssputs_r>:
 8003cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf8:	688e      	ldr	r6, [r1, #8]
 8003cfa:	429e      	cmp	r6, r3
 8003cfc:	4682      	mov	sl, r0
 8003cfe:	460c      	mov	r4, r1
 8003d00:	4690      	mov	r8, r2
 8003d02:	461f      	mov	r7, r3
 8003d04:	d838      	bhi.n	8003d78 <__ssputs_r+0x84>
 8003d06:	898a      	ldrh	r2, [r1, #12]
 8003d08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d0c:	d032      	beq.n	8003d74 <__ssputs_r+0x80>
 8003d0e:	6825      	ldr	r5, [r4, #0]
 8003d10:	6909      	ldr	r1, [r1, #16]
 8003d12:	eba5 0901 	sub.w	r9, r5, r1
 8003d16:	6965      	ldr	r5, [r4, #20]
 8003d18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d20:	3301      	adds	r3, #1
 8003d22:	444b      	add	r3, r9
 8003d24:	106d      	asrs	r5, r5, #1
 8003d26:	429d      	cmp	r5, r3
 8003d28:	bf38      	it	cc
 8003d2a:	461d      	movcc	r5, r3
 8003d2c:	0553      	lsls	r3, r2, #21
 8003d2e:	d531      	bpl.n	8003d94 <__ssputs_r+0xa0>
 8003d30:	4629      	mov	r1, r5
 8003d32:	f000 fb47 	bl	80043c4 <_malloc_r>
 8003d36:	4606      	mov	r6, r0
 8003d38:	b950      	cbnz	r0, 8003d50 <__ssputs_r+0x5c>
 8003d3a:	230c      	movs	r3, #12
 8003d3c:	f8ca 3000 	str.w	r3, [sl]
 8003d40:	89a3      	ldrh	r3, [r4, #12]
 8003d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d46:	81a3      	strh	r3, [r4, #12]
 8003d48:	f04f 30ff 	mov.w	r0, #4294967295
 8003d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d50:	6921      	ldr	r1, [r4, #16]
 8003d52:	464a      	mov	r2, r9
 8003d54:	f000 fabe 	bl	80042d4 <memcpy>
 8003d58:	89a3      	ldrh	r3, [r4, #12]
 8003d5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d62:	81a3      	strh	r3, [r4, #12]
 8003d64:	6126      	str	r6, [r4, #16]
 8003d66:	6165      	str	r5, [r4, #20]
 8003d68:	444e      	add	r6, r9
 8003d6a:	eba5 0509 	sub.w	r5, r5, r9
 8003d6e:	6026      	str	r6, [r4, #0]
 8003d70:	60a5      	str	r5, [r4, #8]
 8003d72:	463e      	mov	r6, r7
 8003d74:	42be      	cmp	r6, r7
 8003d76:	d900      	bls.n	8003d7a <__ssputs_r+0x86>
 8003d78:	463e      	mov	r6, r7
 8003d7a:	4632      	mov	r2, r6
 8003d7c:	6820      	ldr	r0, [r4, #0]
 8003d7e:	4641      	mov	r1, r8
 8003d80:	f000 fab6 	bl	80042f0 <memmove>
 8003d84:	68a3      	ldr	r3, [r4, #8]
 8003d86:	6822      	ldr	r2, [r4, #0]
 8003d88:	1b9b      	subs	r3, r3, r6
 8003d8a:	4432      	add	r2, r6
 8003d8c:	60a3      	str	r3, [r4, #8]
 8003d8e:	6022      	str	r2, [r4, #0]
 8003d90:	2000      	movs	r0, #0
 8003d92:	e7db      	b.n	8003d4c <__ssputs_r+0x58>
 8003d94:	462a      	mov	r2, r5
 8003d96:	f000 fb6f 	bl	8004478 <_realloc_r>
 8003d9a:	4606      	mov	r6, r0
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	d1e1      	bne.n	8003d64 <__ssputs_r+0x70>
 8003da0:	6921      	ldr	r1, [r4, #16]
 8003da2:	4650      	mov	r0, sl
 8003da4:	f000 fabe 	bl	8004324 <_free_r>
 8003da8:	e7c7      	b.n	8003d3a <__ssputs_r+0x46>
	...

08003dac <_svfiprintf_r>:
 8003dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db0:	4698      	mov	r8, r3
 8003db2:	898b      	ldrh	r3, [r1, #12]
 8003db4:	061b      	lsls	r3, r3, #24
 8003db6:	b09d      	sub	sp, #116	; 0x74
 8003db8:	4607      	mov	r7, r0
 8003dba:	460d      	mov	r5, r1
 8003dbc:	4614      	mov	r4, r2
 8003dbe:	d50e      	bpl.n	8003dde <_svfiprintf_r+0x32>
 8003dc0:	690b      	ldr	r3, [r1, #16]
 8003dc2:	b963      	cbnz	r3, 8003dde <_svfiprintf_r+0x32>
 8003dc4:	2140      	movs	r1, #64	; 0x40
 8003dc6:	f000 fafd 	bl	80043c4 <_malloc_r>
 8003dca:	6028      	str	r0, [r5, #0]
 8003dcc:	6128      	str	r0, [r5, #16]
 8003dce:	b920      	cbnz	r0, 8003dda <_svfiprintf_r+0x2e>
 8003dd0:	230c      	movs	r3, #12
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd8:	e0d1      	b.n	8003f7e <_svfiprintf_r+0x1d2>
 8003dda:	2340      	movs	r3, #64	; 0x40
 8003ddc:	616b      	str	r3, [r5, #20]
 8003dde:	2300      	movs	r3, #0
 8003de0:	9309      	str	r3, [sp, #36]	; 0x24
 8003de2:	2320      	movs	r3, #32
 8003de4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003de8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dec:	2330      	movs	r3, #48	; 0x30
 8003dee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003f98 <_svfiprintf_r+0x1ec>
 8003df2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003df6:	f04f 0901 	mov.w	r9, #1
 8003dfa:	4623      	mov	r3, r4
 8003dfc:	469a      	mov	sl, r3
 8003dfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e02:	b10a      	cbz	r2, 8003e08 <_svfiprintf_r+0x5c>
 8003e04:	2a25      	cmp	r2, #37	; 0x25
 8003e06:	d1f9      	bne.n	8003dfc <_svfiprintf_r+0x50>
 8003e08:	ebba 0b04 	subs.w	fp, sl, r4
 8003e0c:	d00b      	beq.n	8003e26 <_svfiprintf_r+0x7a>
 8003e0e:	465b      	mov	r3, fp
 8003e10:	4622      	mov	r2, r4
 8003e12:	4629      	mov	r1, r5
 8003e14:	4638      	mov	r0, r7
 8003e16:	f7ff ff6d 	bl	8003cf4 <__ssputs_r>
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	f000 80aa 	beq.w	8003f74 <_svfiprintf_r+0x1c8>
 8003e20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e22:	445a      	add	r2, fp
 8003e24:	9209      	str	r2, [sp, #36]	; 0x24
 8003e26:	f89a 3000 	ldrb.w	r3, [sl]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 80a2 	beq.w	8003f74 <_svfiprintf_r+0x1c8>
 8003e30:	2300      	movs	r3, #0
 8003e32:	f04f 32ff 	mov.w	r2, #4294967295
 8003e36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e3a:	f10a 0a01 	add.w	sl, sl, #1
 8003e3e:	9304      	str	r3, [sp, #16]
 8003e40:	9307      	str	r3, [sp, #28]
 8003e42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e46:	931a      	str	r3, [sp, #104]	; 0x68
 8003e48:	4654      	mov	r4, sl
 8003e4a:	2205      	movs	r2, #5
 8003e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e50:	4851      	ldr	r0, [pc, #324]	; (8003f98 <_svfiprintf_r+0x1ec>)
 8003e52:	f7fc f9d5 	bl	8000200 <memchr>
 8003e56:	9a04      	ldr	r2, [sp, #16]
 8003e58:	b9d8      	cbnz	r0, 8003e92 <_svfiprintf_r+0xe6>
 8003e5a:	06d0      	lsls	r0, r2, #27
 8003e5c:	bf44      	itt	mi
 8003e5e:	2320      	movmi	r3, #32
 8003e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e64:	0711      	lsls	r1, r2, #28
 8003e66:	bf44      	itt	mi
 8003e68:	232b      	movmi	r3, #43	; 0x2b
 8003e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e72:	2b2a      	cmp	r3, #42	; 0x2a
 8003e74:	d015      	beq.n	8003ea2 <_svfiprintf_r+0xf6>
 8003e76:	9a07      	ldr	r2, [sp, #28]
 8003e78:	4654      	mov	r4, sl
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	f04f 0c0a 	mov.w	ip, #10
 8003e80:	4621      	mov	r1, r4
 8003e82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e86:	3b30      	subs	r3, #48	; 0x30
 8003e88:	2b09      	cmp	r3, #9
 8003e8a:	d94e      	bls.n	8003f2a <_svfiprintf_r+0x17e>
 8003e8c:	b1b0      	cbz	r0, 8003ebc <_svfiprintf_r+0x110>
 8003e8e:	9207      	str	r2, [sp, #28]
 8003e90:	e014      	b.n	8003ebc <_svfiprintf_r+0x110>
 8003e92:	eba0 0308 	sub.w	r3, r0, r8
 8003e96:	fa09 f303 	lsl.w	r3, r9, r3
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	9304      	str	r3, [sp, #16]
 8003e9e:	46a2      	mov	sl, r4
 8003ea0:	e7d2      	b.n	8003e48 <_svfiprintf_r+0x9c>
 8003ea2:	9b03      	ldr	r3, [sp, #12]
 8003ea4:	1d19      	adds	r1, r3, #4
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	9103      	str	r1, [sp, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	bfbb      	ittet	lt
 8003eae:	425b      	neglt	r3, r3
 8003eb0:	f042 0202 	orrlt.w	r2, r2, #2
 8003eb4:	9307      	strge	r3, [sp, #28]
 8003eb6:	9307      	strlt	r3, [sp, #28]
 8003eb8:	bfb8      	it	lt
 8003eba:	9204      	strlt	r2, [sp, #16]
 8003ebc:	7823      	ldrb	r3, [r4, #0]
 8003ebe:	2b2e      	cmp	r3, #46	; 0x2e
 8003ec0:	d10c      	bne.n	8003edc <_svfiprintf_r+0x130>
 8003ec2:	7863      	ldrb	r3, [r4, #1]
 8003ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ec6:	d135      	bne.n	8003f34 <_svfiprintf_r+0x188>
 8003ec8:	9b03      	ldr	r3, [sp, #12]
 8003eca:	1d1a      	adds	r2, r3, #4
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	9203      	str	r2, [sp, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	bfb8      	it	lt
 8003ed4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ed8:	3402      	adds	r4, #2
 8003eda:	9305      	str	r3, [sp, #20]
 8003edc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003fa8 <_svfiprintf_r+0x1fc>
 8003ee0:	7821      	ldrb	r1, [r4, #0]
 8003ee2:	2203      	movs	r2, #3
 8003ee4:	4650      	mov	r0, sl
 8003ee6:	f7fc f98b 	bl	8000200 <memchr>
 8003eea:	b140      	cbz	r0, 8003efe <_svfiprintf_r+0x152>
 8003eec:	2340      	movs	r3, #64	; 0x40
 8003eee:	eba0 000a 	sub.w	r0, r0, sl
 8003ef2:	fa03 f000 	lsl.w	r0, r3, r0
 8003ef6:	9b04      	ldr	r3, [sp, #16]
 8003ef8:	4303      	orrs	r3, r0
 8003efa:	3401      	adds	r4, #1
 8003efc:	9304      	str	r3, [sp, #16]
 8003efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f02:	4826      	ldr	r0, [pc, #152]	; (8003f9c <_svfiprintf_r+0x1f0>)
 8003f04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f08:	2206      	movs	r2, #6
 8003f0a:	f7fc f979 	bl	8000200 <memchr>
 8003f0e:	2800      	cmp	r0, #0
 8003f10:	d038      	beq.n	8003f84 <_svfiprintf_r+0x1d8>
 8003f12:	4b23      	ldr	r3, [pc, #140]	; (8003fa0 <_svfiprintf_r+0x1f4>)
 8003f14:	bb1b      	cbnz	r3, 8003f5e <_svfiprintf_r+0x1b2>
 8003f16:	9b03      	ldr	r3, [sp, #12]
 8003f18:	3307      	adds	r3, #7
 8003f1a:	f023 0307 	bic.w	r3, r3, #7
 8003f1e:	3308      	adds	r3, #8
 8003f20:	9303      	str	r3, [sp, #12]
 8003f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f24:	4433      	add	r3, r6
 8003f26:	9309      	str	r3, [sp, #36]	; 0x24
 8003f28:	e767      	b.n	8003dfa <_svfiprintf_r+0x4e>
 8003f2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f2e:	460c      	mov	r4, r1
 8003f30:	2001      	movs	r0, #1
 8003f32:	e7a5      	b.n	8003e80 <_svfiprintf_r+0xd4>
 8003f34:	2300      	movs	r3, #0
 8003f36:	3401      	adds	r4, #1
 8003f38:	9305      	str	r3, [sp, #20]
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f04f 0c0a 	mov.w	ip, #10
 8003f40:	4620      	mov	r0, r4
 8003f42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f46:	3a30      	subs	r2, #48	; 0x30
 8003f48:	2a09      	cmp	r2, #9
 8003f4a:	d903      	bls.n	8003f54 <_svfiprintf_r+0x1a8>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0c5      	beq.n	8003edc <_svfiprintf_r+0x130>
 8003f50:	9105      	str	r1, [sp, #20]
 8003f52:	e7c3      	b.n	8003edc <_svfiprintf_r+0x130>
 8003f54:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f58:	4604      	mov	r4, r0
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e7f0      	b.n	8003f40 <_svfiprintf_r+0x194>
 8003f5e:	ab03      	add	r3, sp, #12
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	462a      	mov	r2, r5
 8003f64:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <_svfiprintf_r+0x1f8>)
 8003f66:	a904      	add	r1, sp, #16
 8003f68:	4638      	mov	r0, r7
 8003f6a:	f3af 8000 	nop.w
 8003f6e:	1c42      	adds	r2, r0, #1
 8003f70:	4606      	mov	r6, r0
 8003f72:	d1d6      	bne.n	8003f22 <_svfiprintf_r+0x176>
 8003f74:	89ab      	ldrh	r3, [r5, #12]
 8003f76:	065b      	lsls	r3, r3, #25
 8003f78:	f53f af2c 	bmi.w	8003dd4 <_svfiprintf_r+0x28>
 8003f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f7e:	b01d      	add	sp, #116	; 0x74
 8003f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f84:	ab03      	add	r3, sp, #12
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	462a      	mov	r2, r5
 8003f8a:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <_svfiprintf_r+0x1f8>)
 8003f8c:	a904      	add	r1, sp, #16
 8003f8e:	4638      	mov	r0, r7
 8003f90:	f000 f87a 	bl	8004088 <_printf_i>
 8003f94:	e7eb      	b.n	8003f6e <_svfiprintf_r+0x1c2>
 8003f96:	bf00      	nop
 8003f98:	08004550 	.word	0x08004550
 8003f9c:	0800455a 	.word	0x0800455a
 8003fa0:	00000000 	.word	0x00000000
 8003fa4:	08003cf5 	.word	0x08003cf5
 8003fa8:	08004556 	.word	0x08004556

08003fac <_printf_common>:
 8003fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb0:	4616      	mov	r6, r2
 8003fb2:	4699      	mov	r9, r3
 8003fb4:	688a      	ldr	r2, [r1, #8]
 8003fb6:	690b      	ldr	r3, [r1, #16]
 8003fb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	bfb8      	it	lt
 8003fc0:	4613      	movlt	r3, r2
 8003fc2:	6033      	str	r3, [r6, #0]
 8003fc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fc8:	4607      	mov	r7, r0
 8003fca:	460c      	mov	r4, r1
 8003fcc:	b10a      	cbz	r2, 8003fd2 <_printf_common+0x26>
 8003fce:	3301      	adds	r3, #1
 8003fd0:	6033      	str	r3, [r6, #0]
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	0699      	lsls	r1, r3, #26
 8003fd6:	bf42      	ittt	mi
 8003fd8:	6833      	ldrmi	r3, [r6, #0]
 8003fda:	3302      	addmi	r3, #2
 8003fdc:	6033      	strmi	r3, [r6, #0]
 8003fde:	6825      	ldr	r5, [r4, #0]
 8003fe0:	f015 0506 	ands.w	r5, r5, #6
 8003fe4:	d106      	bne.n	8003ff4 <_printf_common+0x48>
 8003fe6:	f104 0a19 	add.w	sl, r4, #25
 8003fea:	68e3      	ldr	r3, [r4, #12]
 8003fec:	6832      	ldr	r2, [r6, #0]
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	42ab      	cmp	r3, r5
 8003ff2:	dc26      	bgt.n	8004042 <_printf_common+0x96>
 8003ff4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ff8:	1e13      	subs	r3, r2, #0
 8003ffa:	6822      	ldr	r2, [r4, #0]
 8003ffc:	bf18      	it	ne
 8003ffe:	2301      	movne	r3, #1
 8004000:	0692      	lsls	r2, r2, #26
 8004002:	d42b      	bmi.n	800405c <_printf_common+0xb0>
 8004004:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004008:	4649      	mov	r1, r9
 800400a:	4638      	mov	r0, r7
 800400c:	47c0      	blx	r8
 800400e:	3001      	adds	r0, #1
 8004010:	d01e      	beq.n	8004050 <_printf_common+0xa4>
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	68e5      	ldr	r5, [r4, #12]
 8004016:	6832      	ldr	r2, [r6, #0]
 8004018:	f003 0306 	and.w	r3, r3, #6
 800401c:	2b04      	cmp	r3, #4
 800401e:	bf08      	it	eq
 8004020:	1aad      	subeq	r5, r5, r2
 8004022:	68a3      	ldr	r3, [r4, #8]
 8004024:	6922      	ldr	r2, [r4, #16]
 8004026:	bf0c      	ite	eq
 8004028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800402c:	2500      	movne	r5, #0
 800402e:	4293      	cmp	r3, r2
 8004030:	bfc4      	itt	gt
 8004032:	1a9b      	subgt	r3, r3, r2
 8004034:	18ed      	addgt	r5, r5, r3
 8004036:	2600      	movs	r6, #0
 8004038:	341a      	adds	r4, #26
 800403a:	42b5      	cmp	r5, r6
 800403c:	d11a      	bne.n	8004074 <_printf_common+0xc8>
 800403e:	2000      	movs	r0, #0
 8004040:	e008      	b.n	8004054 <_printf_common+0xa8>
 8004042:	2301      	movs	r3, #1
 8004044:	4652      	mov	r2, sl
 8004046:	4649      	mov	r1, r9
 8004048:	4638      	mov	r0, r7
 800404a:	47c0      	blx	r8
 800404c:	3001      	adds	r0, #1
 800404e:	d103      	bne.n	8004058 <_printf_common+0xac>
 8004050:	f04f 30ff 	mov.w	r0, #4294967295
 8004054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004058:	3501      	adds	r5, #1
 800405a:	e7c6      	b.n	8003fea <_printf_common+0x3e>
 800405c:	18e1      	adds	r1, r4, r3
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	2030      	movs	r0, #48	; 0x30
 8004062:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004066:	4422      	add	r2, r4
 8004068:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800406c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004070:	3302      	adds	r3, #2
 8004072:	e7c7      	b.n	8004004 <_printf_common+0x58>
 8004074:	2301      	movs	r3, #1
 8004076:	4622      	mov	r2, r4
 8004078:	4649      	mov	r1, r9
 800407a:	4638      	mov	r0, r7
 800407c:	47c0      	blx	r8
 800407e:	3001      	adds	r0, #1
 8004080:	d0e6      	beq.n	8004050 <_printf_common+0xa4>
 8004082:	3601      	adds	r6, #1
 8004084:	e7d9      	b.n	800403a <_printf_common+0x8e>
	...

08004088 <_printf_i>:
 8004088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800408c:	460c      	mov	r4, r1
 800408e:	4691      	mov	r9, r2
 8004090:	7e27      	ldrb	r7, [r4, #24]
 8004092:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004094:	2f78      	cmp	r7, #120	; 0x78
 8004096:	4680      	mov	r8, r0
 8004098:	469a      	mov	sl, r3
 800409a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800409e:	d807      	bhi.n	80040b0 <_printf_i+0x28>
 80040a0:	2f62      	cmp	r7, #98	; 0x62
 80040a2:	d80a      	bhi.n	80040ba <_printf_i+0x32>
 80040a4:	2f00      	cmp	r7, #0
 80040a6:	f000 80d8 	beq.w	800425a <_printf_i+0x1d2>
 80040aa:	2f58      	cmp	r7, #88	; 0x58
 80040ac:	f000 80a3 	beq.w	80041f6 <_printf_i+0x16e>
 80040b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040b8:	e03a      	b.n	8004130 <_printf_i+0xa8>
 80040ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040be:	2b15      	cmp	r3, #21
 80040c0:	d8f6      	bhi.n	80040b0 <_printf_i+0x28>
 80040c2:	a001      	add	r0, pc, #4	; (adr r0, 80040c8 <_printf_i+0x40>)
 80040c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80040c8:	08004121 	.word	0x08004121
 80040cc:	08004135 	.word	0x08004135
 80040d0:	080040b1 	.word	0x080040b1
 80040d4:	080040b1 	.word	0x080040b1
 80040d8:	080040b1 	.word	0x080040b1
 80040dc:	080040b1 	.word	0x080040b1
 80040e0:	08004135 	.word	0x08004135
 80040e4:	080040b1 	.word	0x080040b1
 80040e8:	080040b1 	.word	0x080040b1
 80040ec:	080040b1 	.word	0x080040b1
 80040f0:	080040b1 	.word	0x080040b1
 80040f4:	08004241 	.word	0x08004241
 80040f8:	08004165 	.word	0x08004165
 80040fc:	08004223 	.word	0x08004223
 8004100:	080040b1 	.word	0x080040b1
 8004104:	080040b1 	.word	0x080040b1
 8004108:	08004263 	.word	0x08004263
 800410c:	080040b1 	.word	0x080040b1
 8004110:	08004165 	.word	0x08004165
 8004114:	080040b1 	.word	0x080040b1
 8004118:	080040b1 	.word	0x080040b1
 800411c:	0800422b 	.word	0x0800422b
 8004120:	680b      	ldr	r3, [r1, #0]
 8004122:	1d1a      	adds	r2, r3, #4
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	600a      	str	r2, [r1, #0]
 8004128:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800412c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004130:	2301      	movs	r3, #1
 8004132:	e0a3      	b.n	800427c <_printf_i+0x1f4>
 8004134:	6825      	ldr	r5, [r4, #0]
 8004136:	6808      	ldr	r0, [r1, #0]
 8004138:	062e      	lsls	r6, r5, #24
 800413a:	f100 0304 	add.w	r3, r0, #4
 800413e:	d50a      	bpl.n	8004156 <_printf_i+0xce>
 8004140:	6805      	ldr	r5, [r0, #0]
 8004142:	600b      	str	r3, [r1, #0]
 8004144:	2d00      	cmp	r5, #0
 8004146:	da03      	bge.n	8004150 <_printf_i+0xc8>
 8004148:	232d      	movs	r3, #45	; 0x2d
 800414a:	426d      	negs	r5, r5
 800414c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004150:	485e      	ldr	r0, [pc, #376]	; (80042cc <_printf_i+0x244>)
 8004152:	230a      	movs	r3, #10
 8004154:	e019      	b.n	800418a <_printf_i+0x102>
 8004156:	f015 0f40 	tst.w	r5, #64	; 0x40
 800415a:	6805      	ldr	r5, [r0, #0]
 800415c:	600b      	str	r3, [r1, #0]
 800415e:	bf18      	it	ne
 8004160:	b22d      	sxthne	r5, r5
 8004162:	e7ef      	b.n	8004144 <_printf_i+0xbc>
 8004164:	680b      	ldr	r3, [r1, #0]
 8004166:	6825      	ldr	r5, [r4, #0]
 8004168:	1d18      	adds	r0, r3, #4
 800416a:	6008      	str	r0, [r1, #0]
 800416c:	0628      	lsls	r0, r5, #24
 800416e:	d501      	bpl.n	8004174 <_printf_i+0xec>
 8004170:	681d      	ldr	r5, [r3, #0]
 8004172:	e002      	b.n	800417a <_printf_i+0xf2>
 8004174:	0669      	lsls	r1, r5, #25
 8004176:	d5fb      	bpl.n	8004170 <_printf_i+0xe8>
 8004178:	881d      	ldrh	r5, [r3, #0]
 800417a:	4854      	ldr	r0, [pc, #336]	; (80042cc <_printf_i+0x244>)
 800417c:	2f6f      	cmp	r7, #111	; 0x6f
 800417e:	bf0c      	ite	eq
 8004180:	2308      	moveq	r3, #8
 8004182:	230a      	movne	r3, #10
 8004184:	2100      	movs	r1, #0
 8004186:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800418a:	6866      	ldr	r6, [r4, #4]
 800418c:	60a6      	str	r6, [r4, #8]
 800418e:	2e00      	cmp	r6, #0
 8004190:	bfa2      	ittt	ge
 8004192:	6821      	ldrge	r1, [r4, #0]
 8004194:	f021 0104 	bicge.w	r1, r1, #4
 8004198:	6021      	strge	r1, [r4, #0]
 800419a:	b90d      	cbnz	r5, 80041a0 <_printf_i+0x118>
 800419c:	2e00      	cmp	r6, #0
 800419e:	d04d      	beq.n	800423c <_printf_i+0x1b4>
 80041a0:	4616      	mov	r6, r2
 80041a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80041a6:	fb03 5711 	mls	r7, r3, r1, r5
 80041aa:	5dc7      	ldrb	r7, [r0, r7]
 80041ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041b0:	462f      	mov	r7, r5
 80041b2:	42bb      	cmp	r3, r7
 80041b4:	460d      	mov	r5, r1
 80041b6:	d9f4      	bls.n	80041a2 <_printf_i+0x11a>
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d10b      	bne.n	80041d4 <_printf_i+0x14c>
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	07df      	lsls	r7, r3, #31
 80041c0:	d508      	bpl.n	80041d4 <_printf_i+0x14c>
 80041c2:	6923      	ldr	r3, [r4, #16]
 80041c4:	6861      	ldr	r1, [r4, #4]
 80041c6:	4299      	cmp	r1, r3
 80041c8:	bfde      	ittt	le
 80041ca:	2330      	movle	r3, #48	; 0x30
 80041cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041d4:	1b92      	subs	r2, r2, r6
 80041d6:	6122      	str	r2, [r4, #16]
 80041d8:	f8cd a000 	str.w	sl, [sp]
 80041dc:	464b      	mov	r3, r9
 80041de:	aa03      	add	r2, sp, #12
 80041e0:	4621      	mov	r1, r4
 80041e2:	4640      	mov	r0, r8
 80041e4:	f7ff fee2 	bl	8003fac <_printf_common>
 80041e8:	3001      	adds	r0, #1
 80041ea:	d14c      	bne.n	8004286 <_printf_i+0x1fe>
 80041ec:	f04f 30ff 	mov.w	r0, #4294967295
 80041f0:	b004      	add	sp, #16
 80041f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041f6:	4835      	ldr	r0, [pc, #212]	; (80042cc <_printf_i+0x244>)
 80041f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	680e      	ldr	r6, [r1, #0]
 8004200:	061f      	lsls	r7, r3, #24
 8004202:	f856 5b04 	ldr.w	r5, [r6], #4
 8004206:	600e      	str	r6, [r1, #0]
 8004208:	d514      	bpl.n	8004234 <_printf_i+0x1ac>
 800420a:	07d9      	lsls	r1, r3, #31
 800420c:	bf44      	itt	mi
 800420e:	f043 0320 	orrmi.w	r3, r3, #32
 8004212:	6023      	strmi	r3, [r4, #0]
 8004214:	b91d      	cbnz	r5, 800421e <_printf_i+0x196>
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	f023 0320 	bic.w	r3, r3, #32
 800421c:	6023      	str	r3, [r4, #0]
 800421e:	2310      	movs	r3, #16
 8004220:	e7b0      	b.n	8004184 <_printf_i+0xfc>
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	f043 0320 	orr.w	r3, r3, #32
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	2378      	movs	r3, #120	; 0x78
 800422c:	4828      	ldr	r0, [pc, #160]	; (80042d0 <_printf_i+0x248>)
 800422e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004232:	e7e3      	b.n	80041fc <_printf_i+0x174>
 8004234:	065e      	lsls	r6, r3, #25
 8004236:	bf48      	it	mi
 8004238:	b2ad      	uxthmi	r5, r5
 800423a:	e7e6      	b.n	800420a <_printf_i+0x182>
 800423c:	4616      	mov	r6, r2
 800423e:	e7bb      	b.n	80041b8 <_printf_i+0x130>
 8004240:	680b      	ldr	r3, [r1, #0]
 8004242:	6826      	ldr	r6, [r4, #0]
 8004244:	6960      	ldr	r0, [r4, #20]
 8004246:	1d1d      	adds	r5, r3, #4
 8004248:	600d      	str	r5, [r1, #0]
 800424a:	0635      	lsls	r5, r6, #24
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	d501      	bpl.n	8004254 <_printf_i+0x1cc>
 8004250:	6018      	str	r0, [r3, #0]
 8004252:	e002      	b.n	800425a <_printf_i+0x1d2>
 8004254:	0671      	lsls	r1, r6, #25
 8004256:	d5fb      	bpl.n	8004250 <_printf_i+0x1c8>
 8004258:	8018      	strh	r0, [r3, #0]
 800425a:	2300      	movs	r3, #0
 800425c:	6123      	str	r3, [r4, #16]
 800425e:	4616      	mov	r6, r2
 8004260:	e7ba      	b.n	80041d8 <_printf_i+0x150>
 8004262:	680b      	ldr	r3, [r1, #0]
 8004264:	1d1a      	adds	r2, r3, #4
 8004266:	600a      	str	r2, [r1, #0]
 8004268:	681e      	ldr	r6, [r3, #0]
 800426a:	6862      	ldr	r2, [r4, #4]
 800426c:	2100      	movs	r1, #0
 800426e:	4630      	mov	r0, r6
 8004270:	f7fb ffc6 	bl	8000200 <memchr>
 8004274:	b108      	cbz	r0, 800427a <_printf_i+0x1f2>
 8004276:	1b80      	subs	r0, r0, r6
 8004278:	6060      	str	r0, [r4, #4]
 800427a:	6863      	ldr	r3, [r4, #4]
 800427c:	6123      	str	r3, [r4, #16]
 800427e:	2300      	movs	r3, #0
 8004280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004284:	e7a8      	b.n	80041d8 <_printf_i+0x150>
 8004286:	6923      	ldr	r3, [r4, #16]
 8004288:	4632      	mov	r2, r6
 800428a:	4649      	mov	r1, r9
 800428c:	4640      	mov	r0, r8
 800428e:	47d0      	blx	sl
 8004290:	3001      	adds	r0, #1
 8004292:	d0ab      	beq.n	80041ec <_printf_i+0x164>
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	079b      	lsls	r3, r3, #30
 8004298:	d413      	bmi.n	80042c2 <_printf_i+0x23a>
 800429a:	68e0      	ldr	r0, [r4, #12]
 800429c:	9b03      	ldr	r3, [sp, #12]
 800429e:	4298      	cmp	r0, r3
 80042a0:	bfb8      	it	lt
 80042a2:	4618      	movlt	r0, r3
 80042a4:	e7a4      	b.n	80041f0 <_printf_i+0x168>
 80042a6:	2301      	movs	r3, #1
 80042a8:	4632      	mov	r2, r6
 80042aa:	4649      	mov	r1, r9
 80042ac:	4640      	mov	r0, r8
 80042ae:	47d0      	blx	sl
 80042b0:	3001      	adds	r0, #1
 80042b2:	d09b      	beq.n	80041ec <_printf_i+0x164>
 80042b4:	3501      	adds	r5, #1
 80042b6:	68e3      	ldr	r3, [r4, #12]
 80042b8:	9903      	ldr	r1, [sp, #12]
 80042ba:	1a5b      	subs	r3, r3, r1
 80042bc:	42ab      	cmp	r3, r5
 80042be:	dcf2      	bgt.n	80042a6 <_printf_i+0x21e>
 80042c0:	e7eb      	b.n	800429a <_printf_i+0x212>
 80042c2:	2500      	movs	r5, #0
 80042c4:	f104 0619 	add.w	r6, r4, #25
 80042c8:	e7f5      	b.n	80042b6 <_printf_i+0x22e>
 80042ca:	bf00      	nop
 80042cc:	08004561 	.word	0x08004561
 80042d0:	08004572 	.word	0x08004572

080042d4 <memcpy>:
 80042d4:	440a      	add	r2, r1
 80042d6:	4291      	cmp	r1, r2
 80042d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80042dc:	d100      	bne.n	80042e0 <memcpy+0xc>
 80042de:	4770      	bx	lr
 80042e0:	b510      	push	{r4, lr}
 80042e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042ea:	4291      	cmp	r1, r2
 80042ec:	d1f9      	bne.n	80042e2 <memcpy+0xe>
 80042ee:	bd10      	pop	{r4, pc}

080042f0 <memmove>:
 80042f0:	4288      	cmp	r0, r1
 80042f2:	b510      	push	{r4, lr}
 80042f4:	eb01 0402 	add.w	r4, r1, r2
 80042f8:	d902      	bls.n	8004300 <memmove+0x10>
 80042fa:	4284      	cmp	r4, r0
 80042fc:	4623      	mov	r3, r4
 80042fe:	d807      	bhi.n	8004310 <memmove+0x20>
 8004300:	1e43      	subs	r3, r0, #1
 8004302:	42a1      	cmp	r1, r4
 8004304:	d008      	beq.n	8004318 <memmove+0x28>
 8004306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800430a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800430e:	e7f8      	b.n	8004302 <memmove+0x12>
 8004310:	4402      	add	r2, r0
 8004312:	4601      	mov	r1, r0
 8004314:	428a      	cmp	r2, r1
 8004316:	d100      	bne.n	800431a <memmove+0x2a>
 8004318:	bd10      	pop	{r4, pc}
 800431a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800431e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004322:	e7f7      	b.n	8004314 <memmove+0x24>

08004324 <_free_r>:
 8004324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004326:	2900      	cmp	r1, #0
 8004328:	d048      	beq.n	80043bc <_free_r+0x98>
 800432a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800432e:	9001      	str	r0, [sp, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	f1a1 0404 	sub.w	r4, r1, #4
 8004336:	bfb8      	it	lt
 8004338:	18e4      	addlt	r4, r4, r3
 800433a:	f000 f8d3 	bl	80044e4 <__malloc_lock>
 800433e:	4a20      	ldr	r2, [pc, #128]	; (80043c0 <_free_r+0x9c>)
 8004340:	9801      	ldr	r0, [sp, #4]
 8004342:	6813      	ldr	r3, [r2, #0]
 8004344:	4615      	mov	r5, r2
 8004346:	b933      	cbnz	r3, 8004356 <_free_r+0x32>
 8004348:	6063      	str	r3, [r4, #4]
 800434a:	6014      	str	r4, [r2, #0]
 800434c:	b003      	add	sp, #12
 800434e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004352:	f000 b8cd 	b.w	80044f0 <__malloc_unlock>
 8004356:	42a3      	cmp	r3, r4
 8004358:	d90b      	bls.n	8004372 <_free_r+0x4e>
 800435a:	6821      	ldr	r1, [r4, #0]
 800435c:	1862      	adds	r2, r4, r1
 800435e:	4293      	cmp	r3, r2
 8004360:	bf04      	itt	eq
 8004362:	681a      	ldreq	r2, [r3, #0]
 8004364:	685b      	ldreq	r3, [r3, #4]
 8004366:	6063      	str	r3, [r4, #4]
 8004368:	bf04      	itt	eq
 800436a:	1852      	addeq	r2, r2, r1
 800436c:	6022      	streq	r2, [r4, #0]
 800436e:	602c      	str	r4, [r5, #0]
 8004370:	e7ec      	b.n	800434c <_free_r+0x28>
 8004372:	461a      	mov	r2, r3
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	b10b      	cbz	r3, 800437c <_free_r+0x58>
 8004378:	42a3      	cmp	r3, r4
 800437a:	d9fa      	bls.n	8004372 <_free_r+0x4e>
 800437c:	6811      	ldr	r1, [r2, #0]
 800437e:	1855      	adds	r5, r2, r1
 8004380:	42a5      	cmp	r5, r4
 8004382:	d10b      	bne.n	800439c <_free_r+0x78>
 8004384:	6824      	ldr	r4, [r4, #0]
 8004386:	4421      	add	r1, r4
 8004388:	1854      	adds	r4, r2, r1
 800438a:	42a3      	cmp	r3, r4
 800438c:	6011      	str	r1, [r2, #0]
 800438e:	d1dd      	bne.n	800434c <_free_r+0x28>
 8004390:	681c      	ldr	r4, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	6053      	str	r3, [r2, #4]
 8004396:	4421      	add	r1, r4
 8004398:	6011      	str	r1, [r2, #0]
 800439a:	e7d7      	b.n	800434c <_free_r+0x28>
 800439c:	d902      	bls.n	80043a4 <_free_r+0x80>
 800439e:	230c      	movs	r3, #12
 80043a0:	6003      	str	r3, [r0, #0]
 80043a2:	e7d3      	b.n	800434c <_free_r+0x28>
 80043a4:	6825      	ldr	r5, [r4, #0]
 80043a6:	1961      	adds	r1, r4, r5
 80043a8:	428b      	cmp	r3, r1
 80043aa:	bf04      	itt	eq
 80043ac:	6819      	ldreq	r1, [r3, #0]
 80043ae:	685b      	ldreq	r3, [r3, #4]
 80043b0:	6063      	str	r3, [r4, #4]
 80043b2:	bf04      	itt	eq
 80043b4:	1949      	addeq	r1, r1, r5
 80043b6:	6021      	streq	r1, [r4, #0]
 80043b8:	6054      	str	r4, [r2, #4]
 80043ba:	e7c7      	b.n	800434c <_free_r+0x28>
 80043bc:	b003      	add	sp, #12
 80043be:	bd30      	pop	{r4, r5, pc}
 80043c0:	200000c8 	.word	0x200000c8

080043c4 <_malloc_r>:
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	1ccd      	adds	r5, r1, #3
 80043c8:	f025 0503 	bic.w	r5, r5, #3
 80043cc:	3508      	adds	r5, #8
 80043ce:	2d0c      	cmp	r5, #12
 80043d0:	bf38      	it	cc
 80043d2:	250c      	movcc	r5, #12
 80043d4:	2d00      	cmp	r5, #0
 80043d6:	4606      	mov	r6, r0
 80043d8:	db01      	blt.n	80043de <_malloc_r+0x1a>
 80043da:	42a9      	cmp	r1, r5
 80043dc:	d903      	bls.n	80043e6 <_malloc_r+0x22>
 80043de:	230c      	movs	r3, #12
 80043e0:	6033      	str	r3, [r6, #0]
 80043e2:	2000      	movs	r0, #0
 80043e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043e6:	f000 f87d 	bl	80044e4 <__malloc_lock>
 80043ea:	4921      	ldr	r1, [pc, #132]	; (8004470 <_malloc_r+0xac>)
 80043ec:	680a      	ldr	r2, [r1, #0]
 80043ee:	4614      	mov	r4, r2
 80043f0:	b99c      	cbnz	r4, 800441a <_malloc_r+0x56>
 80043f2:	4f20      	ldr	r7, [pc, #128]	; (8004474 <_malloc_r+0xb0>)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	b923      	cbnz	r3, 8004402 <_malloc_r+0x3e>
 80043f8:	4621      	mov	r1, r4
 80043fa:	4630      	mov	r0, r6
 80043fc:	f000 f862 	bl	80044c4 <_sbrk_r>
 8004400:	6038      	str	r0, [r7, #0]
 8004402:	4629      	mov	r1, r5
 8004404:	4630      	mov	r0, r6
 8004406:	f000 f85d 	bl	80044c4 <_sbrk_r>
 800440a:	1c43      	adds	r3, r0, #1
 800440c:	d123      	bne.n	8004456 <_malloc_r+0x92>
 800440e:	230c      	movs	r3, #12
 8004410:	6033      	str	r3, [r6, #0]
 8004412:	4630      	mov	r0, r6
 8004414:	f000 f86c 	bl	80044f0 <__malloc_unlock>
 8004418:	e7e3      	b.n	80043e2 <_malloc_r+0x1e>
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	1b5b      	subs	r3, r3, r5
 800441e:	d417      	bmi.n	8004450 <_malloc_r+0x8c>
 8004420:	2b0b      	cmp	r3, #11
 8004422:	d903      	bls.n	800442c <_malloc_r+0x68>
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	441c      	add	r4, r3
 8004428:	6025      	str	r5, [r4, #0]
 800442a:	e004      	b.n	8004436 <_malloc_r+0x72>
 800442c:	6863      	ldr	r3, [r4, #4]
 800442e:	42a2      	cmp	r2, r4
 8004430:	bf0c      	ite	eq
 8004432:	600b      	streq	r3, [r1, #0]
 8004434:	6053      	strne	r3, [r2, #4]
 8004436:	4630      	mov	r0, r6
 8004438:	f000 f85a 	bl	80044f0 <__malloc_unlock>
 800443c:	f104 000b 	add.w	r0, r4, #11
 8004440:	1d23      	adds	r3, r4, #4
 8004442:	f020 0007 	bic.w	r0, r0, #7
 8004446:	1ac2      	subs	r2, r0, r3
 8004448:	d0cc      	beq.n	80043e4 <_malloc_r+0x20>
 800444a:	1a1b      	subs	r3, r3, r0
 800444c:	50a3      	str	r3, [r4, r2]
 800444e:	e7c9      	b.n	80043e4 <_malloc_r+0x20>
 8004450:	4622      	mov	r2, r4
 8004452:	6864      	ldr	r4, [r4, #4]
 8004454:	e7cc      	b.n	80043f0 <_malloc_r+0x2c>
 8004456:	1cc4      	adds	r4, r0, #3
 8004458:	f024 0403 	bic.w	r4, r4, #3
 800445c:	42a0      	cmp	r0, r4
 800445e:	d0e3      	beq.n	8004428 <_malloc_r+0x64>
 8004460:	1a21      	subs	r1, r4, r0
 8004462:	4630      	mov	r0, r6
 8004464:	f000 f82e 	bl	80044c4 <_sbrk_r>
 8004468:	3001      	adds	r0, #1
 800446a:	d1dd      	bne.n	8004428 <_malloc_r+0x64>
 800446c:	e7cf      	b.n	800440e <_malloc_r+0x4a>
 800446e:	bf00      	nop
 8004470:	200000c8 	.word	0x200000c8
 8004474:	200000cc 	.word	0x200000cc

08004478 <_realloc_r>:
 8004478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447a:	4607      	mov	r7, r0
 800447c:	4614      	mov	r4, r2
 800447e:	460e      	mov	r6, r1
 8004480:	b921      	cbnz	r1, 800448c <_realloc_r+0x14>
 8004482:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004486:	4611      	mov	r1, r2
 8004488:	f7ff bf9c 	b.w	80043c4 <_malloc_r>
 800448c:	b922      	cbnz	r2, 8004498 <_realloc_r+0x20>
 800448e:	f7ff ff49 	bl	8004324 <_free_r>
 8004492:	4625      	mov	r5, r4
 8004494:	4628      	mov	r0, r5
 8004496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004498:	f000 f830 	bl	80044fc <_malloc_usable_size_r>
 800449c:	42a0      	cmp	r0, r4
 800449e:	d20f      	bcs.n	80044c0 <_realloc_r+0x48>
 80044a0:	4621      	mov	r1, r4
 80044a2:	4638      	mov	r0, r7
 80044a4:	f7ff ff8e 	bl	80043c4 <_malloc_r>
 80044a8:	4605      	mov	r5, r0
 80044aa:	2800      	cmp	r0, #0
 80044ac:	d0f2      	beq.n	8004494 <_realloc_r+0x1c>
 80044ae:	4631      	mov	r1, r6
 80044b0:	4622      	mov	r2, r4
 80044b2:	f7ff ff0f 	bl	80042d4 <memcpy>
 80044b6:	4631      	mov	r1, r6
 80044b8:	4638      	mov	r0, r7
 80044ba:	f7ff ff33 	bl	8004324 <_free_r>
 80044be:	e7e9      	b.n	8004494 <_realloc_r+0x1c>
 80044c0:	4635      	mov	r5, r6
 80044c2:	e7e7      	b.n	8004494 <_realloc_r+0x1c>

080044c4 <_sbrk_r>:
 80044c4:	b538      	push	{r3, r4, r5, lr}
 80044c6:	4d06      	ldr	r5, [pc, #24]	; (80044e0 <_sbrk_r+0x1c>)
 80044c8:	2300      	movs	r3, #0
 80044ca:	4604      	mov	r4, r0
 80044cc:	4608      	mov	r0, r1
 80044ce:	602b      	str	r3, [r5, #0]
 80044d0:	f7fc ff02 	bl	80012d8 <_sbrk>
 80044d4:	1c43      	adds	r3, r0, #1
 80044d6:	d102      	bne.n	80044de <_sbrk_r+0x1a>
 80044d8:	682b      	ldr	r3, [r5, #0]
 80044da:	b103      	cbz	r3, 80044de <_sbrk_r+0x1a>
 80044dc:	6023      	str	r3, [r4, #0]
 80044de:	bd38      	pop	{r3, r4, r5, pc}
 80044e0:	20001260 	.word	0x20001260

080044e4 <__malloc_lock>:
 80044e4:	4801      	ldr	r0, [pc, #4]	; (80044ec <__malloc_lock+0x8>)
 80044e6:	f000 b811 	b.w	800450c <__retarget_lock_acquire_recursive>
 80044ea:	bf00      	nop
 80044ec:	20001268 	.word	0x20001268

080044f0 <__malloc_unlock>:
 80044f0:	4801      	ldr	r0, [pc, #4]	; (80044f8 <__malloc_unlock+0x8>)
 80044f2:	f000 b80c 	b.w	800450e <__retarget_lock_release_recursive>
 80044f6:	bf00      	nop
 80044f8:	20001268 	.word	0x20001268

080044fc <_malloc_usable_size_r>:
 80044fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004500:	1f18      	subs	r0, r3, #4
 8004502:	2b00      	cmp	r3, #0
 8004504:	bfbc      	itt	lt
 8004506:	580b      	ldrlt	r3, [r1, r0]
 8004508:	18c0      	addlt	r0, r0, r3
 800450a:	4770      	bx	lr

0800450c <__retarget_lock_acquire_recursive>:
 800450c:	4770      	bx	lr

0800450e <__retarget_lock_release_recursive>:
 800450e:	4770      	bx	lr

08004510 <_init>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	bf00      	nop
 8004514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004516:	bc08      	pop	{r3}
 8004518:	469e      	mov	lr, r3
 800451a:	4770      	bx	lr

0800451c <_fini>:
 800451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451e:	bf00      	nop
 8004520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004522:	bc08      	pop	{r3}
 8004524:	469e      	mov	lr, r3
 8004526:	4770      	bx	lr
