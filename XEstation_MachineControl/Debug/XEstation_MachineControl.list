
XEstation_MachineControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d04  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  08007eb4  08007eb4  00017eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081c8  080081c8  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  080081c8  080081c8  000181c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081d0  080081d0  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081d0  080081d0  000181d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081d4  080081d4  000181d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  080081d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020258  2**0
                  CONTENTS
 10 .bss          00000b18  20000258  20000258  00020258  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d70  20000d70  00020258  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c520  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038e3  00000000  00000000  0003c7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b0  00000000  00000000  00040090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001368  00000000  00000000  00041540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004d38  00000000  00000000  000428a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017797  00000000  00000000  000475e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e68ad  00000000  00000000  0005ed77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00145624  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005eec  00000000  00000000  00145678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000258 	.word	0x20000258
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007e9c 	.word	0x08007e9c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000025c 	.word	0x2000025c
 80001ec:	08007e9c 	.word	0x08007e9c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96e 	b.w	8000d70 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f040 8083 	bne.w	8000bc2 <__udivmoddi4+0x116>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d947      	bls.n	8000b52 <__udivmoddi4+0xa6>
 8000ac2:	fab2 f282 	clz	r2, r2
 8000ac6:	b142      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	f1c2 0020 	rsb	r0, r2, #32
 8000acc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	4097      	lsls	r7, r2
 8000ad4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ae4:	fa1f fe87 	uxth.w	lr, r7
 8000ae8:	fb08 c116 	mls	r1, r8, r6, ip
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb06 f10e 	mul.w	r1, r6, lr
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000afe:	f080 8119 	bcs.w	8000d34 <__udivmoddi4+0x288>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8116 	bls.w	8000d34 <__udivmoddi4+0x288>
 8000b08:	3e02      	subs	r6, #2
 8000b0a:	443b      	add	r3, r7
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b14:	fb08 3310 	mls	r3, r8, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	193c      	adds	r4, r7, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8105 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	f240 8102 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b34:	3802      	subs	r0, #2
 8000b36:	443c      	add	r4, r7
 8000b38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3c:	eba4 040e 	sub.w	r4, r4, lr
 8000b40:	2600      	movs	r6, #0
 8000b42:	b11d      	cbz	r5, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c5 4300 	strd	r4, r3, [r5]
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	b902      	cbnz	r2, 8000b56 <__udivmoddi4+0xaa>
 8000b54:	deff      	udf	#255	; 0xff
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d150      	bne.n	8000c00 <__udivmoddi4+0x154>
 8000b5e:	1bcb      	subs	r3, r1, r7
 8000b60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b64:	fa1f f887 	uxth.w	r8, r7
 8000b68:	2601      	movs	r6, #1
 8000b6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b6e:	0c21      	lsrs	r1, r4, #16
 8000b70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b78:	fb08 f30c 	mul.w	r3, r8, ip
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000b80:	1879      	adds	r1, r7, r1
 8000b82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0xe2>
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	f200 80e9 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000b8e:	4684      	mov	ip, r0
 8000b90:	1ac9      	subs	r1, r1, r3
 8000b92:	b2a3      	uxth	r3, r4
 8000b94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ba0:	fb08 f800 	mul.w	r8, r8, r0
 8000ba4:	45a0      	cmp	r8, r4
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x10c>
 8000ba8:	193c      	adds	r4, r7, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x10a>
 8000bb0:	45a0      	cmp	r8, r4
 8000bb2:	f200 80d9 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	eba4 0408 	sub.w	r4, r4, r8
 8000bbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc0:	e7bf      	b.n	8000b42 <__udivmoddi4+0x96>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0x12e>
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	f000 80b1 	beq.w	8000d2e <__udivmoddi4+0x282>
 8000bcc:	2600      	movs	r6, #0
 8000bce:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f683 	clz	r6, r3
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d14a      	bne.n	8000c78 <__udivmoddi4+0x1cc>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0x140>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80b8 	bhi.w	8000d5c <__udivmoddi4+0x2b0>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0103 	sbc.w	r1, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d0a8      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000bfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bfe:	e7a5      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000c00:	f1c2 0320 	rsb	r3, r2, #32
 8000c04:	fa20 f603 	lsr.w	r6, r0, r3
 8000c08:	4097      	lsls	r7, r2
 8000c0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c12:	40d9      	lsrs	r1, r3
 8000c14:	4330      	orrs	r0, r6
 8000c16:	0c03      	lsrs	r3, r0, #16
 8000c18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c1c:	fa1f f887 	uxth.w	r8, r7
 8000c20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb06 f108 	mul.w	r1, r6, r8
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x19c>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c3a:	f080 808d 	bcs.w	8000d58 <__udivmoddi4+0x2ac>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 808a 	bls.w	8000d58 <__udivmoddi4+0x2ac>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b281      	uxth	r1, r0
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c58:	fb00 f308 	mul.w	r3, r0, r8
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x1c4>
 8000c60:	1879      	adds	r1, r7, r1
 8000c62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c66:	d273      	bcs.n	8000d50 <__udivmoddi4+0x2a4>
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d971      	bls.n	8000d50 <__udivmoddi4+0x2a4>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4439      	add	r1, r7
 8000c70:	1acb      	subs	r3, r1, r3
 8000c72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c76:	e778      	b.n	8000b6a <__udivmoddi4+0xbe>
 8000c78:	f1c6 0c20 	rsb	ip, r6, #32
 8000c7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c84:	431c      	orrs	r4, r3
 8000c86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c96:	431f      	orrs	r7, r3
 8000c98:	0c3b      	lsrs	r3, r7, #16
 8000c9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c9e:	fa1f f884 	uxth.w	r8, r4
 8000ca2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ca6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000caa:	fb09 fa08 	mul.w	sl, r9, r8
 8000cae:	458a      	cmp	sl, r1
 8000cb0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cb4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x220>
 8000cba:	1861      	adds	r1, r4, r1
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	d248      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc2:	458a      	cmp	sl, r1
 8000cc4:	d946      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4421      	add	r1, r4
 8000ccc:	eba1 010a 	sub.w	r1, r1, sl
 8000cd0:	b2bf      	uxth	r7, r7
 8000cd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cde:	fb00 f808 	mul.w	r8, r0, r8
 8000ce2:	45b8      	cmp	r8, r7
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x24a>
 8000ce6:	19e7      	adds	r7, r4, r7
 8000ce8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cec:	d22e      	bcs.n	8000d4c <__udivmoddi4+0x2a0>
 8000cee:	45b8      	cmp	r8, r7
 8000cf0:	d92c      	bls.n	8000d4c <__udivmoddi4+0x2a0>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4427      	add	r7, r4
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	eba7 0708 	sub.w	r7, r7, r8
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	454f      	cmp	r7, r9
 8000d04:	46c6      	mov	lr, r8
 8000d06:	4649      	mov	r1, r9
 8000d08:	d31a      	bcc.n	8000d40 <__udivmoddi4+0x294>
 8000d0a:	d017      	beq.n	8000d3c <__udivmoddi4+0x290>
 8000d0c:	b15d      	cbz	r5, 8000d26 <__udivmoddi4+0x27a>
 8000d0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d12:	eb67 0701 	sbc.w	r7, r7, r1
 8000d16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d1a:	40f2      	lsrs	r2, r6
 8000d1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d20:	40f7      	lsrs	r7, r6
 8000d22:	e9c5 2700 	strd	r2, r7, [r5]
 8000d26:	2600      	movs	r6, #0
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e70b      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e9      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6fd      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d3c:	4543      	cmp	r3, r8
 8000d3e:	d2e5      	bcs.n	8000d0c <__udivmoddi4+0x260>
 8000d40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d44:	eb69 0104 	sbc.w	r1, r9, r4
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7df      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7d2      	b.n	8000cf6 <__udivmoddi4+0x24a>
 8000d50:	4660      	mov	r0, ip
 8000d52:	e78d      	b.n	8000c70 <__udivmoddi4+0x1c4>
 8000d54:	4681      	mov	r9, r0
 8000d56:	e7b9      	b.n	8000ccc <__udivmoddi4+0x220>
 8000d58:	4666      	mov	r6, ip
 8000d5a:	e775      	b.n	8000c48 <__udivmoddi4+0x19c>
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	e74a      	b.n	8000bf6 <__udivmoddi4+0x14a>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	4439      	add	r1, r7
 8000d66:	e713      	b.n	8000b90 <__udivmoddi4+0xe4>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	443c      	add	r4, r7
 8000d6c:	e724      	b.n	8000bb8 <__udivmoddi4+0x10c>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 10) == HAL_OK)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	230a      	movs	r3, #10
 8000d86:	68b9      	ldr	r1, [r7, #8]
 8000d88:	4806      	ldr	r0, [pc, #24]	; (8000da4 <_write+0x30>)
 8000d8a:	f003 fc5c 	bl	8004646 <HAL_UART_Transmit>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d101      	bne.n	8000d98 <_write+0x24>
		return len;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	e001      	b.n	8000d9c <_write+0x28>
	return -1;
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200009ec 	.word	0x200009ec

08000da8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a2f      	ldr	r2, [pc, #188]	; (8000e74 <HAL_UART_RxCpltCallback+0xcc>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d058      	beq.n	8000e6c <HAL_UART_RxCpltCallback+0xc4>

//		pc_comm_flag = true;
//
//		HAL_UART_Receive_IT(&huart3, pc_res_packet, sizeof(pc_res_packet));
	}
	else if (huart->Instance == UART5)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a2e      	ldr	r2, [pc, #184]	; (8000e78 <HAL_UART_RxCpltCallback+0xd0>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d127      	bne.n	8000e14 <HAL_UART_RxCpltCallback+0x6c>
	{
		HAL_UART_Transmit(&huart3, cupD_res_packet, sizeof(cupD_res_packet), 100);
 8000dc4:	2364      	movs	r3, #100	; 0x64
 8000dc6:	2214      	movs	r2, #20
 8000dc8:	492c      	ldr	r1, [pc, #176]	; (8000e7c <HAL_UART_RxCpltCallback+0xd4>)
 8000dca:	482d      	ldr	r0, [pc, #180]	; (8000e80 <HAL_UART_RxCpltCallback+0xd8>)
 8000dcc:	f003 fc3b 	bl	8004646 <HAL_UART_Transmit>
//		for(int i=0; i<20; i++){
//			printf("")
//		}
		// calc checksum
		int chksum = 0x00;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
		for(int i=1; i<RES_PACKET_BCC; i++){
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	e00a      	b.n	8000df0 <HAL_UART_RxCpltCallback+0x48>
			chksum += cupD_res_packet[i];
 8000dda:	4a28      	ldr	r2, [pc, #160]	; (8000e7c <HAL_UART_RxCpltCallback+0xd4>)
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4413      	add	r3, r2
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	4413      	add	r3, r2
 8000de8:	617b      	str	r3, [r7, #20]
		for(int i=1; i<RES_PACKET_BCC; i++){
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	3301      	adds	r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	2b09      	cmp	r3, #9
 8000df4:	ddf1      	ble.n	8000dda <HAL_UART_RxCpltCallback+0x32>
		}
		if (cupD_res_packet[RES_PACKET_BCC] == chksum)
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <HAL_UART_RxCpltCallback+0xd4>)
 8000df8:	7a9b      	ldrb	r3, [r3, #10]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d102      	bne.n	8000e08 <HAL_UART_RxCpltCallback+0x60>
			printf("check sum error!");
 8000e02:	4820      	ldr	r0, [pc, #128]	; (8000e84 <HAL_UART_RxCpltCallback+0xdc>)
 8000e04:	f006 fa20 	bl	8007248 <iprintf>

	    HAL_UART_Receive_IT(&huart5, cupD_res_packet, sizeof(cupD_res_packet));
 8000e08:	2214      	movs	r2, #20
 8000e0a:	491c      	ldr	r1, [pc, #112]	; (8000e7c <HAL_UART_RxCpltCallback+0xd4>)
 8000e0c:	481e      	ldr	r0, [pc, #120]	; (8000e88 <HAL_UART_RxCpltCallback+0xe0>)
 8000e0e:	f003 fd4e 	bl	80048ae <HAL_UART_Receive_IT>
		if (LidD_res_packet[RES_PACKET_BCC] == chksum)
			printf("check sum error!");

	    HAL_UART_Receive_IT(&huart6, LidD_res_packet, sizeof(LidD_res_packet));
	}
}
 8000e12:	e02b      	b.n	8000e6c <HAL_UART_RxCpltCallback+0xc4>
	else if (huart->Instance == USART6)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a1c      	ldr	r2, [pc, #112]	; (8000e8c <HAL_UART_RxCpltCallback+0xe4>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d126      	bne.n	8000e6c <HAL_UART_RxCpltCallback+0xc4>
		HAL_UART_Transmit(&huart3, LidD_res_packet, sizeof(LidD_res_packet), 100);
 8000e1e:	2364      	movs	r3, #100	; 0x64
 8000e20:	2214      	movs	r2, #20
 8000e22:	491b      	ldr	r1, [pc, #108]	; (8000e90 <HAL_UART_RxCpltCallback+0xe8>)
 8000e24:	4816      	ldr	r0, [pc, #88]	; (8000e80 <HAL_UART_RxCpltCallback+0xd8>)
 8000e26:	f003 fc0e 	bl	8004646 <HAL_UART_Transmit>
		int chksum = 0x00;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
		for(int i=1; i<RES_PACKET_BCC; i++){
 8000e2e:	2301      	movs	r3, #1
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	e00a      	b.n	8000e4a <HAL_UART_RxCpltCallback+0xa2>
			chksum += LidD_res_packet[i];
 8000e34:	4a16      	ldr	r2, [pc, #88]	; (8000e90 <HAL_UART_RxCpltCallback+0xe8>)
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	4413      	add	r3, r2
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4413      	add	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]
		for(int i=1; i<RES_PACKET_BCC; i++){
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	3301      	adds	r3, #1
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	2b09      	cmp	r3, #9
 8000e4e:	ddf1      	ble.n	8000e34 <HAL_UART_RxCpltCallback+0x8c>
		if (LidD_res_packet[RES_PACKET_BCC] == chksum)
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_UART_RxCpltCallback+0xe8>)
 8000e52:	7a9b      	ldrb	r3, [r3, #10]
 8000e54:	461a      	mov	r2, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d102      	bne.n	8000e62 <HAL_UART_RxCpltCallback+0xba>
			printf("check sum error!");
 8000e5c:	4809      	ldr	r0, [pc, #36]	; (8000e84 <HAL_UART_RxCpltCallback+0xdc>)
 8000e5e:	f006 f9f3 	bl	8007248 <iprintf>
	    HAL_UART_Receive_IT(&huart6, LidD_res_packet, sizeof(LidD_res_packet));
 8000e62:	2214      	movs	r2, #20
 8000e64:	490a      	ldr	r1, [pc, #40]	; (8000e90 <HAL_UART_RxCpltCallback+0xe8>)
 8000e66:	480b      	ldr	r0, [pc, #44]	; (8000e94 <HAL_UART_RxCpltCallback+0xec>)
 8000e68:	f003 fd21 	bl	80048ae <HAL_UART_Receive_IT>
}
 8000e6c:	bf00      	nop
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40004800 	.word	0x40004800
 8000e78:	40005000 	.word	0x40005000
 8000e7c:	20000274 	.word	0x20000274
 8000e80:	200009ec 	.word	0x200009ec
 8000e84:	08007f00 	.word	0x08007f00
 8000e88:	20000ad4 	.word	0x20000ad4
 8000e8c:	40011400 	.word	0x40011400
 8000e90:	20000288 	.word	0x20000288
 8000e94:	20000bf4 	.word	0x20000bf4

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b0a4      	sub	sp, #144	; 0x90
 8000e9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f001 fb27 	bl	80024f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 faf5 	bl	8001490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 fe37 	bl	8001b18 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000eaa:	f000 fb61 	bl	8001570 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000eae:	f000 fbb1 	bl	8001614 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eb2:	f000 fbfd 	bl	80016b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000eb6:	f000 fc4b 	bl	8001750 <MX_TIM4_Init>
  MX_UART5_Init();
 8000eba:	f000 fdaf 	bl	8001a1c <MX_UART5_Init>
  MX_USART3_UART_Init();
 8000ebe:	f000 fdd7 	bl	8001a70 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000ec2:	f000 fdff 	bl	8001ac4 <MX_USART6_UART_Init>
  MX_TIM12_Init();
 8000ec6:	f000 fd4b 	bl	8001960 <MX_TIM12_Init>
  MX_TIM7_Init();
 8000eca:	f000 fc91 	bl	80017f0 <MX_TIM7_Init>
  MX_TIM9_Init();
 8000ece:	f000 fcc5 	bl	800185c <MX_TIM9_Init>
  MX_TIM10_Init();
 8000ed2:	f000 fcfd 	bl	80018d0 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000ed6:	f000 fd1f 	bl	8001918 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

//  HAL_UART_Receive_IT(&huart3, pc_res_packet, sizeof(pc_res_packet));
	init_iceDispensor();
 8000eda:	f005 ff07 	bl	8006cec <init_iceDispensor>
	initCupLidDispensor();
 8000ede:	f005 fc65 	bl	80067ac <initCupLidDispensor>
	init_powderMachine();
 8000ee2:	f004 fe1b 	bl	8005b1c <init_powderMachine>
//  MalchaTest((int)(16.25*1000)); //unit : mg<hot_water_amout>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ee6:	f004 fbdb 	bl	80056a0 <osKernelInitialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		uint8_t buf = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		uint8_t stx = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		uint8_t len = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

		// receive packet
		HAL_UART_Receive(&huart3, &stx, sizeof(stx), 10);
 8000efc:	f107 0156 	add.w	r1, r7, #86	; 0x56
 8000f00:	230a      	movs	r3, #10
 8000f02:	2201      	movs	r2, #1
 8000f04:	489e      	ldr	r0, [pc, #632]	; (8001180 <main+0x2e8>)
 8000f06:	f003 fc30 	bl	800476a <HAL_UART_Receive>

		// STX
		if (stx == 0x02)
 8000f0a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	f040 809e 	bne.w	8001050 <main+0x1b8>
		{
			// LEN
			HAL_UART_Receive(&huart3, &len, sizeof(len), 10);
 8000f14:	f107 0155 	add.w	r1, r7, #85	; 0x55
 8000f18:	230a      	movs	r3, #10
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4898      	ldr	r0, [pc, #608]	; (8001180 <main+0x2e8>)
 8000f1e:	f003 fc24 	bl	800476a <HAL_UART_Receive>
			uint8_t *data_arr = (uint8_t*)malloc(sizeof(uint8_t) * (len+2));
 8000f22:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000f26:	3302      	adds	r3, #2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f006 f8cb 	bl	80070c4 <malloc>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	66fb      	str	r3, [r7, #108]	; 0x6c

			for(int i=0; i<len+2; i++){
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000f38:	e00a      	b.n	8000f50 <main+0xb8>
				data_arr[i] = 0;
 8000f3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f40:	4413      	add	r3, r2
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<len+2; i++){
 8000f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000f50:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000f54:	3301      	adds	r3, #1
 8000f56:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	dded      	ble.n	8000f3a <main+0xa2>
			}

			data_arr[0] = stx;
 8000f5e:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f64:	701a      	strb	r2, [r3, #0]
			data_arr[1] = len;
 8000f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f68:	3301      	adds	r3, #1
 8000f6a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8000f6e:	701a      	strb	r2, [r3, #0]

			for(int i=2; i<len+1; i++)
 8000f70:	2302      	movs	r3, #2
 8000f72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000f76:	e016      	b.n	8000fa6 <main+0x10e>
			{
				HAL_UART_Receive(&huart3, &buf, sizeof(buf), 10);
 8000f78:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8000f7c:	230a      	movs	r3, #10
 8000f7e:	2201      	movs	r2, #1
 8000f80:	487f      	ldr	r0, [pc, #508]	; (8001180 <main+0x2e8>)
 8000f82:	f003 fbf2 	bl	800476a <HAL_UART_Receive>

				if(buf != NULL)
 8000f86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d006      	beq.n	8000f9c <main+0x104>
					data_arr[i] = buf;
 8000f8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f94:	4413      	add	r3, r2
 8000f96:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000f9a:	701a      	strb	r2, [r3, #0]
			for(int i=2; i<len+1; i++)
 8000f9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000fa6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000faa:	461a      	mov	r2, r3
 8000fac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	dde1      	ble.n	8000f78 <main+0xe0>
			}

			// check checksum
			for(int i = 2; i < len; i++)
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000fb8:	e014      	b.n	8000fe4 <main+0x14c>
				data_arr[len+1] ^= data_arr[i];
 8000fba:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000fc2:	4413      	add	r3, r2
 8000fc4:	7819      	ldrb	r1, [r3, #0]
 8000fc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000fca:	4413      	add	r3, r2
 8000fcc:	781a      	ldrb	r2, [r3, #0]
 8000fce:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000fd6:	4403      	add	r3, r0
 8000fd8:	404a      	eors	r2, r1
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	701a      	strb	r2, [r3, #0]
			for(int i = 2; i < len; i++)
 8000fde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000fe4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000fe8:	461a      	mov	r2, r3
 8000fea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fec:	4293      	cmp	r3, r2
 8000fee:	dbe4      	blt.n	8000fba <main+0x122>

			// EXECUTION CODE
			for(int i=0; i<len+2; i++){ // for test
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	67bb      	str	r3, [r7, #120]	; 0x78
 8000ff4:	e01c      	b.n	8001030 <main+0x198>
				PC_CMD_arr[data_arr[DEV_ID_idx]][i] = data_arr[i];
 8000ff6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ff8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000ffa:	4413      	add	r3, r2
 8000ffc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000ffe:	3204      	adds	r2, #4
 8001000:	7812      	ldrb	r2, [r2, #0]
 8001002:	4610      	mov	r0, r2
 8001004:	7819      	ldrb	r1, [r3, #0]
 8001006:	4a5f      	ldr	r2, [pc, #380]	; (8001184 <main+0x2ec>)
 8001008:	2364      	movs	r3, #100	; 0x64
 800100a:	fb03 f300 	mul.w	r3, r3, r0
 800100e:	441a      	add	r2, r3
 8001010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001012:	4413      	add	r3, r2
 8001014:	460a      	mov	r2, r1
 8001016:	701a      	strb	r2, [r3, #0]
				TEST_CMD_arr[i] = data_arr[i];
 8001018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800101a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800101c:	4413      	add	r3, r2
 800101e:	7819      	ldrb	r1, [r3, #0]
 8001020:	4a59      	ldr	r2, [pc, #356]	; (8001188 <main+0x2f0>)
 8001022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001024:	4413      	add	r3, r2
 8001026:	460a      	mov	r2, r1
 8001028:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<len+2; i++){ // for test
 800102a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800102c:	3301      	adds	r3, #1
 800102e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001030:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001034:	3301      	adds	r3, #1
 8001036:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001038:	429a      	cmp	r2, r3
 800103a:	dddc      	ble.n	8000ff6 <main+0x15e>
			}

			DEV_ID_flag[data_arr[DEV_ID_idx]] = true;
 800103c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800103e:	3304      	adds	r3, #4
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	4b51      	ldr	r3, [pc, #324]	; (800118c <main+0x2f4>)
 8001046:	2101      	movs	r1, #1
 8001048:	5499      	strb	r1, [r3, r2]

			free(data_arr);
 800104a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800104c:	f006 f842 	bl	80070d4 <free>
		}

		if(DEV_ID_flag[ID_POW] == true){
 8001050:	4b4e      	ldr	r3, [pc, #312]	; (800118c <main+0x2f4>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	f040 80ee 	bne.w	8001236 <main+0x39e>
			switch(PC_CMD_arr[ID_POW][CMD_idx]){
 800105a:	4b4a      	ldr	r3, [pc, #296]	; (8001184 <main+0x2ec>)
 800105c:	78db      	ldrb	r3, [r3, #3]
 800105e:	2b0f      	cmp	r3, #15
 8001060:	f200 80da 	bhi.w	8001218 <main+0x380>
 8001064:	a201      	add	r2, pc, #4	; (adr r2, 800106c <main+0x1d4>)
 8001066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106a:	bf00      	nop
 800106c:	08001219 	.word	0x08001219
 8001070:	08001219 	.word	0x08001219
 8001074:	08001219 	.word	0x08001219
 8001078:	08001219 	.word	0x08001219
 800107c:	08001219 	.word	0x08001219
 8001080:	08001219 	.word	0x08001219
 8001084:	08001219 	.word	0x08001219
 8001088:	08001219 	.word	0x08001219
 800108c:	08001219 	.word	0x08001219
 8001090:	08001219 	.word	0x08001219
 8001094:	08001219 	.word	0x08001219
 8001098:	08001219 	.word	0x08001219
 800109c:	08001219 	.word	0x08001219
 80010a0:	080010ad 	.word	0x080010ad
 80010a4:	0800115d 	.word	0x0800115d
 80010a8:	08001219 	.word	0x08001219
			case is_idle:
				break;

			case make_beverage:
			{
				uint32_t water_gram[POWDER_NUM] = {0};
 80010ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
				uint32_t powder_gram[POWDER_NUM] = {0};
 80010bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]

				for(int i=0; i<POWDER_NUM; i++){
 80010cc:	2300      	movs	r3, #0
 80010ce:	677b      	str	r3, [r7, #116]	; 0x74
 80010d0:	e036      	b.n	8001140 <main+0x2a8>
					water_gram[i] = (int)(((PC_CMD_arr[ID_POW][DATA_idx+2*i] << 8) + PC_CMD_arr[ID_POW][DATA_idx+2*i+1])/10);
 80010d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	3305      	adds	r3, #5
 80010d8:	4a2a      	ldr	r2, [pc, #168]	; (8001184 <main+0x2ec>)
 80010da:	5cd3      	ldrb	r3, [r2, r3]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80010e0:	3203      	adds	r2, #3
 80010e2:	0052      	lsls	r2, r2, #1
 80010e4:	4927      	ldr	r1, [pc, #156]	; (8001184 <main+0x2ec>)
 80010e6:	5c8a      	ldrb	r2, [r1, r2]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a29      	ldr	r2, [pc, #164]	; (8001190 <main+0x2f8>)
 80010ec:	fb82 1203 	smull	r1, r2, r2, r3
 80010f0:	1092      	asrs	r2, r2, #2
 80010f2:	17db      	asrs	r3, r3, #31
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001100:	440b      	add	r3, r1
 8001102:	f843 2c48 	str.w	r2, [r3, #-72]
					powder_gram[i] = (int)(((PC_CMD_arr[ID_POW][DATA_idx+2*i+2*POWDER_NUM] << 8) + PC_CMD_arr[ID_POW][DATA_idx+2*i+1+2*POWDER_NUM])/10);
 8001106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	330f      	adds	r3, #15
 800110c:	4a1d      	ldr	r2, [pc, #116]	; (8001184 <main+0x2ec>)
 800110e:	5cd3      	ldrb	r3, [r2, r3]
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001114:	3208      	adds	r2, #8
 8001116:	0052      	lsls	r2, r2, #1
 8001118:	491a      	ldr	r1, [pc, #104]	; (8001184 <main+0x2ec>)
 800111a:	5c8a      	ldrb	r2, [r1, r2]
 800111c:	4413      	add	r3, r2
 800111e:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <main+0x2f8>)
 8001120:	fb82 1203 	smull	r1, r2, r2, r3
 8001124:	1092      	asrs	r2, r2, #2
 8001126:	17db      	asrs	r3, r3, #31
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	461a      	mov	r2, r3
 800112c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001134:	440b      	add	r3, r1
 8001136:	f843 2c5c 	str.w	r2, [r3, #-92]
				for(int i=0; i<POWDER_NUM; i++){
 800113a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800113c:	3301      	adds	r3, #1
 800113e:	677b      	str	r3, [r7, #116]	; 0x74
 8001140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001142:	2b04      	cmp	r3, #4
 8001144:	ddc5      	ble.n	80010d2 <main+0x23a>
				}
				run_powderMachine();
 8001146:	f004 fdd9 	bl	8005cfc <run_powderMachine>
				make_powderbeverage(water_gram, powder_gram);
 800114a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800114e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f004 fe5f 	bl	8005e18 <make_powderbeverage>

				// hot
//				caffelatte(235);
				// ice
//				caffelatte(120);
				break;
 800115a:	e05d      	b.n	8001218 <main+0x380>
			}

			case clean:
			{
				uint32_t water_gram[POWDER_NUM] = {0};
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
				uint32_t powder_gram[POWDER_NUM] = {0};
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

				for(int i=0; i<POWDER_NUM; i++){
 800117a:	2300      	movs	r3, #0
 800117c:	673b      	str	r3, [r7, #112]	; 0x70
 800117e:	e040      	b.n	8001202 <main+0x36a>
 8001180:	200009ec 	.word	0x200009ec
 8001184:	200002a4 	.word	0x200002a4
 8001188:	20000498 	.word	0x20000498
 800118c:	2000029c 	.word	0x2000029c
 8001190:	66666667 	.word	0x66666667
					water_gram[i] = (int)(((PC_CMD_arr[ID_POW][DATA_idx+2*i] << 8) + PC_CMD_arr[ID_POW][DATA_idx+2*i+1])/10);
 8001194:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	3305      	adds	r3, #5
 800119a:	4ab6      	ldr	r2, [pc, #728]	; (8001474 <main+0x5dc>)
 800119c:	5cd3      	ldrb	r3, [r2, r3]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80011a2:	3203      	adds	r2, #3
 80011a4:	0052      	lsls	r2, r2, #1
 80011a6:	49b3      	ldr	r1, [pc, #716]	; (8001474 <main+0x5dc>)
 80011a8:	5c8a      	ldrb	r2, [r1, r2]
 80011aa:	4413      	add	r3, r2
 80011ac:	4ab2      	ldr	r2, [pc, #712]	; (8001478 <main+0x5e0>)
 80011ae:	fb82 1203 	smull	r1, r2, r2, r3
 80011b2:	1092      	asrs	r2, r2, #2
 80011b4:	17db      	asrs	r3, r3, #31
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	461a      	mov	r2, r3
 80011ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80011c2:	440b      	add	r3, r1
 80011c4:	f843 2c70 	str.w	r2, [r3, #-112]
					powder_gram[i] = (int)(((PC_CMD_arr[ID_POW][DATA_idx+2*i+2*POWDER_NUM] << 8) + PC_CMD_arr[ID_POW][DATA_idx+2*i+1+2*POWDER_NUM])/10);
 80011c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	330f      	adds	r3, #15
 80011ce:	4aa9      	ldr	r2, [pc, #676]	; (8001474 <main+0x5dc>)
 80011d0:	5cd3      	ldrb	r3, [r2, r3]
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80011d6:	3208      	adds	r2, #8
 80011d8:	0052      	lsls	r2, r2, #1
 80011da:	49a6      	ldr	r1, [pc, #664]	; (8001474 <main+0x5dc>)
 80011dc:	5c8a      	ldrb	r2, [r1, r2]
 80011de:	4413      	add	r3, r2
 80011e0:	4aa5      	ldr	r2, [pc, #660]	; (8001478 <main+0x5e0>)
 80011e2:	fb82 1203 	smull	r1, r2, r2, r3
 80011e6:	1092      	asrs	r2, r2, #2
 80011e8:	17db      	asrs	r3, r3, #31
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80011f6:	440b      	add	r3, r1
 80011f8:	f843 2c84 	str.w	r2, [r3, #-132]
				for(int i=0; i<POWDER_NUM; i++){
 80011fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011fe:	3301      	adds	r3, #1
 8001200:	673b      	str	r3, [r7, #112]	; 0x70
 8001202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001204:	2b04      	cmp	r3, #4
 8001206:	ddc5      	ble.n	8001194 <main+0x2fc>
				}
				cleanPowderMachine(water_gram, powder_gram);
 8001208:	1d3a      	adds	r2, r7, #4
 800120a:	f107 0318 	add.w	r3, r7, #24
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f004 fd85 	bl	8005d20 <cleanPowderMachine>

				break;
 8001216:	bf00      	nop
			}

			case get_sensor:
				break;
			}
			DEV_ID_flag[ID_POW] = false;
 8001218:	4b98      	ldr	r3, [pc, #608]	; (800147c <main+0x5e4>)
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]

			uint8_t* pointer;
			pointer = PC_CMD_arr;
 800121e:	4b95      	ldr	r3, [pc, #596]	; (8001474 <main+0x5dc>)
 8001220:	66bb      	str	r3, [r7, #104]	; 0x68
//			HAL_UART_Transmit(&huart3, pointer+ID_POW*100, PC_CMD_arr[ID_POW][LEN_idx]+4, 100); // SUCCESS
			HAL_UART_Transmit(&huart3, (uint8_t *)TEST_CMD_arr, TEST_CMD_arr[LEN_idx]+2, 100); // SUCCESS
 8001222:	4b97      	ldr	r3, [pc, #604]	; (8001480 <main+0x5e8>)
 8001224:	785b      	ldrb	r3, [r3, #1]
 8001226:	b29b      	uxth	r3, r3
 8001228:	3302      	adds	r3, #2
 800122a:	b29a      	uxth	r2, r3
 800122c:	2364      	movs	r3, #100	; 0x64
 800122e:	4994      	ldr	r1, [pc, #592]	; (8001480 <main+0x5e8>)
 8001230:	4894      	ldr	r0, [pc, #592]	; (8001484 <main+0x5ec>)
 8001232:	f003 fa08 	bl	8004646 <HAL_UART_Transmit>

			// transmit packet
	//		HAL_UART_Transmit(&huart3, (uint8_t *)POW_CMD_arr, POW_CMD_arr[LEN_idx]+2, 100); // SUCCESS
		}

		if(DEV_ID_flag[ID_ICE] == true){
 8001236:	4b91      	ldr	r3, [pc, #580]	; (800147c <main+0x5e4>)
 8001238:	785b      	ldrb	r3, [r3, #1]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d140      	bne.n	80012c0 <main+0x428>
			switch(PC_CMD_arr[ID_ICE][CMD_idx]){
 800123e:	4b8d      	ldr	r3, [pc, #564]	; (8001474 <main+0x5dc>)
 8001240:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d829      	bhi.n	800129c <main+0x404>
 8001248:	a201      	add	r2, pc, #4	; (adr r2, 8001250 <main+0x3b8>)
 800124a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124e:	bf00      	nop
 8001250:	0800129d 	.word	0x0800129d
 8001254:	0800129d 	.word	0x0800129d
 8001258:	0800129d 	.word	0x0800129d
 800125c:	0800129d 	.word	0x0800129d
 8001260:	0800129d 	.word	0x0800129d
 8001264:	0800129d 	.word	0x0800129d
 8001268:	0800129d 	.word	0x0800129d
 800126c:	0800129d 	.word	0x0800129d
 8001270:	0800129d 	.word	0x0800129d
 8001274:	0800129d 	.word	0x0800129d
 8001278:	0800129d 	.word	0x0800129d
 800127c:	0800129d 	.word	0x0800129d
 8001280:	0800129d 	.word	0x0800129d
 8001284:	08001291 	.word	0x08001291
 8001288:	0800129d 	.word	0x0800129d
 800128c:	0800129d 	.word	0x0800129d

				//	HOT AMERICANO
//				startExit(0, 3500);

				//CAFFELATTE
				startExit(0, 2700);
 8001290:	f640 218c 	movw	r1, #2700	; 0xa8c
 8001294:	2000      	movs	r0, #0
 8001296:	f005 fdb9 	bl	8006e0c <startExit>
				break;
 800129a:	bf00      	nop
			case clean:
				break;
			case get_sensor:
				break;
			}
			DEV_ID_flag[ID_ICE] = false;
 800129c:	4b77      	ldr	r3, [pc, #476]	; (800147c <main+0x5e4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	705a      	strb	r2, [r3, #1]

			// transmit packet
			uint8_t* pointer;
			pointer = PC_CMD_arr;
 80012a2:	4b74      	ldr	r3, [pc, #464]	; (8001474 <main+0x5dc>)
 80012a4:	667b      	str	r3, [r7, #100]	; 0x64
			HAL_UART_Transmit(&huart3, pointer+ID_ICE*100, PC_CMD_arr[ID_ICE][LEN_idx]+2, 100); // SUCCESS
 80012a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012a8:	f103 0164 	add.w	r1, r3, #100	; 0x64
 80012ac:	4b71      	ldr	r3, [pc, #452]	; (8001474 <main+0x5dc>)
 80012ae:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	3302      	adds	r3, #2
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	2364      	movs	r3, #100	; 0x64
 80012ba:	4872      	ldr	r0, [pc, #456]	; (8001484 <main+0x5ec>)
 80012bc:	f003 f9c3 	bl	8004646 <HAL_UART_Transmit>
		}

		if(DEV_ID_flag[ID_CUP] == true){
 80012c0:	4b6e      	ldr	r3, [pc, #440]	; (800147c <main+0x5e4>)
 80012c2:	789b      	ldrb	r3, [r3, #2]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d14b      	bne.n	8001360 <main+0x4c8>
			switch(PC_CMD_arr[ID_CUP][CMD_idx]){
 80012c8:	4b6a      	ldr	r3, [pc, #424]	; (8001474 <main+0x5dc>)
 80012ca:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 80012ce:	2b0e      	cmp	r3, #14
 80012d0:	d837      	bhi.n	8001342 <main+0x4aa>
 80012d2:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <main+0x440>)
 80012d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d8:	08001343 	.word	0x08001343
 80012dc:	08001343 	.word	0x08001343
 80012e0:	08001343 	.word	0x08001343
 80012e4:	08001343 	.word	0x08001343
 80012e8:	08001343 	.word	0x08001343
 80012ec:	08001343 	.word	0x08001343
 80012f0:	08001343 	.word	0x08001343
 80012f4:	08001343 	.word	0x08001343
 80012f8:	08001343 	.word	0x08001343
 80012fc:	08001343 	.word	0x08001343
 8001300:	08001343 	.word	0x08001343
 8001304:	08001343 	.word	0x08001343
 8001308:	08001343 	.word	0x08001343
 800130c:	08001315 	.word	0x08001315
 8001310:	0800132d 	.word	0x0800132d
//				if(is_cup_lid_running(CUP_D) == false)
//					is_xxx_return_val = true;
				break;

			case dispatch:
				cup_lid_dispatch(CUP_D);
 8001314:	2002      	movs	r0, #2
 8001316:	f005 fbcb 	bl	8006ab0 <cup_lid_dispatch>
				if (HAL_UART_Init(&huart5) != HAL_OK)
 800131a:	485b      	ldr	r0, [pc, #364]	; (8001488 <main+0x5f0>)
 800131c:	f003 f946 	bl	80045ac <HAL_UART_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00c      	beq.n	8001340 <main+0x4a8>
				  {
				    Error_Handler();
 8001326:	f000 fd3d 	bl	8001da4 <Error_Handler>
				  }
				break;
 800132a:	e009      	b.n	8001340 <main+0x4a8>

			case rotate:
	//			= PC_CMD_arr[ID_CUP][DATA_idx];
				controlSteppingMotor(CUP_D, STEPPING_MOTOR_ON, CLOCKWISE, QUARTER, FREQ_FAST);
 800132c:	2332      	movs	r3, #50	; 0x32
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	f241 3388 	movw	r3, #5000	; 0x1388
 8001334:	2200      	movs	r2, #0
 8001336:	2101      	movs	r1, #1
 8001338:	2002      	movs	r0, #2
 800133a:	f005 fa41 	bl	80067c0 <controlSteppingMotor>
				break;
 800133e:	e000      	b.n	8001342 <main+0x4aa>
				break;
 8001340:	bf00      	nop
			}
			DEV_ID_flag[ID_CUP] = false;
 8001342:	4b4e      	ldr	r3, [pc, #312]	; (800147c <main+0x5e4>)
 8001344:	2200      	movs	r2, #0
 8001346:	709a      	strb	r2, [r3, #2]

			// transmit packer
			uint8_t* pointer;
			pointer = PC_CMD_arr;
 8001348:	4b4a      	ldr	r3, [pc, #296]	; (8001474 <main+0x5dc>)
 800134a:	663b      	str	r3, [r7, #96]	; 0x60
//			HAL_UART_Transmit(&huart3, pointer+ID_CUP*100, PC_CMD_arr[ID_CUP][LEN_idx]+4, 100); // SUCCESS
			HAL_UART_Transmit(&huart3, (uint8_t *)TEST_CMD_arr, TEST_CMD_arr[LEN_idx]+2, 100); // SUCCESS
 800134c:	4b4c      	ldr	r3, [pc, #304]	; (8001480 <main+0x5e8>)
 800134e:	785b      	ldrb	r3, [r3, #1]
 8001350:	b29b      	uxth	r3, r3
 8001352:	3302      	adds	r3, #2
 8001354:	b29a      	uxth	r2, r3
 8001356:	2364      	movs	r3, #100	; 0x64
 8001358:	4949      	ldr	r1, [pc, #292]	; (8001480 <main+0x5e8>)
 800135a:	484a      	ldr	r0, [pc, #296]	; (8001484 <main+0x5ec>)
 800135c:	f003 f973 	bl	8004646 <HAL_UART_Transmit>

		}
		if(DEV_ID_flag[ID_LID] == true){
 8001360:	4b46      	ldr	r3, [pc, #280]	; (800147c <main+0x5e4>)
 8001362:	78db      	ldrb	r3, [r3, #3]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d14b      	bne.n	8001400 <main+0x568>
			switch(PC_CMD_arr[ID_LID][CMD_idx]){
 8001368:	4b42      	ldr	r3, [pc, #264]	; (8001474 <main+0x5dc>)
 800136a:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 800136e:	2b0e      	cmp	r3, #14
 8001370:	d837      	bhi.n	80013e2 <main+0x54a>
 8001372:	a201      	add	r2, pc, #4	; (adr r2, 8001378 <main+0x4e0>)
 8001374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001378:	080013e3 	.word	0x080013e3
 800137c:	080013e3 	.word	0x080013e3
 8001380:	080013e3 	.word	0x080013e3
 8001384:	080013e3 	.word	0x080013e3
 8001388:	080013e3 	.word	0x080013e3
 800138c:	080013e3 	.word	0x080013e3
 8001390:	080013e3 	.word	0x080013e3
 8001394:	080013e3 	.word	0x080013e3
 8001398:	080013e3 	.word	0x080013e3
 800139c:	080013e3 	.word	0x080013e3
 80013a0:	080013e3 	.word	0x080013e3
 80013a4:	080013e3 	.word	0x080013e3
 80013a8:	080013e3 	.word	0x080013e3
 80013ac:	080013b5 	.word	0x080013b5
 80013b0:	080013cd 	.word	0x080013cd
//				if(is_cup_lid_running(LID_D) == false)
//					is_xxx_return_val = true;
				break;

			case dispatch:
				cup_lid_dispatch(LID_D);
 80013b4:	2003      	movs	r0, #3
 80013b6:	f005 fb7b 	bl	8006ab0 <cup_lid_dispatch>
				if (HAL_UART_Init(&huart6) != HAL_OK)
 80013ba:	4834      	ldr	r0, [pc, #208]	; (800148c <main+0x5f4>)
 80013bc:	f003 f8f6 	bl	80045ac <HAL_UART_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00c      	beq.n	80013e0 <main+0x548>
				  {
				    Error_Handler();
 80013c6:	f000 fced 	bl	8001da4 <Error_Handler>
				  }
				break;
 80013ca:	e009      	b.n	80013e0 <main+0x548>

			case rotate:
				controlSteppingMotor(LID_D, STEPPING_MOTOR_ON, CLOCKWISE, QUARTER, FREQ_FAST);
 80013cc:	2332      	movs	r3, #50	; 0x32
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80013d4:	2200      	movs	r2, #0
 80013d6:	2101      	movs	r1, #1
 80013d8:	2003      	movs	r0, #3
 80013da:	f005 f9f1 	bl	80067c0 <controlSteppingMotor>
				break;
 80013de:	e000      	b.n	80013e2 <main+0x54a>
				break;
 80013e0:	bf00      	nop
			}
			DEV_ID_flag[ID_LID] = false;
 80013e2:	4b26      	ldr	r3, [pc, #152]	; (800147c <main+0x5e4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	70da      	strb	r2, [r3, #3]

			// transmit packer
			uint8_t* pointer;
			pointer = PC_CMD_arr;
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <main+0x5dc>)
 80013ea:	65fb      	str	r3, [r7, #92]	; 0x5c
//			HAL_UART_Transmit(&huart3, pointer+ID_LID*100, PC_CMD_arr[ID_LID][LEN_idx]+4, 100); // SUCCESS
			HAL_UART_Transmit(&huart3, (uint8_t *)TEST_CMD_arr, TEST_CMD_arr[LEN_idx]+2, 100); // SUCCESS
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <main+0x5e8>)
 80013ee:	785b      	ldrb	r3, [r3, #1]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	3302      	adds	r3, #2
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	2364      	movs	r3, #100	; 0x64
 80013f8:	4921      	ldr	r1, [pc, #132]	; (8001480 <main+0x5e8>)
 80013fa:	4822      	ldr	r0, [pc, #136]	; (8001484 <main+0x5ec>)
 80013fc:	f003 f923 	bl	8004646 <HAL_UART_Transmit>
		}


		if(DEV_ID_flag[ID_HOT] == true){
 8001400:	4b1e      	ldr	r3, [pc, #120]	; (800147c <main+0x5e4>)
 8001402:	791b      	ldrb	r3, [r3, #4]
 8001404:	2b01      	cmp	r3, #1
 8001406:	f47f ad70 	bne.w	8000eea <main+0x52>
			switch(PC_CMD_arr[ID_HOT][CMD_idx]){
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <main+0x5dc>)
 800140c:	f893 3193 	ldrb.w	r3, [r3, #403]	; 0x193
 8001410:	2b0d      	cmp	r3, #13
 8001412:	d81f      	bhi.n	8001454 <main+0x5bc>
 8001414:	a201      	add	r2, pc, #4	; (adr r2, 800141c <main+0x584>)
 8001416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141a:	bf00      	nop
 800141c:	08001455 	.word	0x08001455
 8001420:	08001455 	.word	0x08001455
 8001424:	08001455 	.word	0x08001455
 8001428:	08001455 	.word	0x08001455
 800142c:	08001455 	.word	0x08001455
 8001430:	08001455 	.word	0x08001455
 8001434:	08001455 	.word	0x08001455
 8001438:	08001455 	.word	0x08001455
 800143c:	08001455 	.word	0x08001455
 8001440:	08001455 	.word	0x08001455
 8001444:	08001455 	.word	0x08001455
 8001448:	08001455 	.word	0x08001455
 800144c:	08001455 	.word	0x08001455
 8001450:	08001455 	.word	0x08001455
//				dispatch_hot_coffee_water(375);
//				dispatch_hot_coffee_water(120);

				break;
			}
			DEV_ID_flag[ID_HOT] = false;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <main+0x5e4>)
 8001456:	2200      	movs	r2, #0
 8001458:	711a      	strb	r2, [r3, #4]

			// transmit packer

			uint8_t* pointer;
			pointer = PC_CMD_arr;
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <main+0x5dc>)
 800145c:	65bb      	str	r3, [r7, #88]	; 0x58
//			HAL_UART_Transmit(&huart3, pointer+ID_HOT*100, PC_CMD_arr[ID_HOT][LEN_idx]+4, 100); // SUCCESS
			HAL_UART_Transmit(&huart3, (uint8_t *)TEST_CMD_arr, TEST_CMD_arr[LEN_idx]+2, 100); // SUCCESS
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <main+0x5e8>)
 8001460:	785b      	ldrb	r3, [r3, #1]
 8001462:	b29b      	uxth	r3, r3
 8001464:	3302      	adds	r3, #2
 8001466:	b29a      	uxth	r2, r3
 8001468:	2364      	movs	r3, #100	; 0x64
 800146a:	4905      	ldr	r1, [pc, #20]	; (8001480 <main+0x5e8>)
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <main+0x5ec>)
 800146e:	f003 f8ea 	bl	8004646 <HAL_UART_Transmit>
  {
 8001472:	e53a      	b.n	8000eea <main+0x52>
 8001474:	200002a4 	.word	0x200002a4
 8001478:	66666667 	.word	0x66666667
 800147c:	2000029c 	.word	0x2000029c
 8001480:	20000498 	.word	0x20000498
 8001484:	200009ec 	.word	0x200009ec
 8001488:	20000ad4 	.word	0x20000ad4
 800148c:	20000bf4 	.word	0x20000bf4

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b094      	sub	sp, #80	; 0x50
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 0320 	add.w	r3, r7, #32
 800149a:	2230      	movs	r2, #48	; 0x30
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f005 fe20 	bl	80070e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <SystemClock_Config+0xd8>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	4a2a      	ldr	r2, [pc, #168]	; (8001568 <SystemClock_Config+0xd8>)
 80014be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c2:	6413      	str	r3, [r2, #64]	; 0x40
 80014c4:	4b28      	ldr	r3, [pc, #160]	; (8001568 <SystemClock_Config+0xd8>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d0:	2300      	movs	r3, #0
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <SystemClock_Config+0xdc>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a24      	ldr	r2, [pc, #144]	; (800156c <SystemClock_Config+0xdc>)
 80014da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <SystemClock_Config+0xdc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ec:	2302      	movs	r3, #2
 80014ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f0:	2301      	movs	r3, #1
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014f4:	2310      	movs	r3, #16
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f8:	2302      	movs	r3, #2
 80014fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014fc:	2300      	movs	r3, #0
 80014fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001500:	2308      	movs	r3, #8
 8001502:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001504:	23b4      	movs	r3, #180	; 0xb4
 8001506:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001508:	2302      	movs	r3, #2
 800150a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800150c:	2304      	movs	r3, #4
 800150e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001510:	f107 0320 	add.w	r3, r7, #32
 8001514:	4618      	mov	r0, r3
 8001516:	f001 fbf3 	bl	8002d00 <HAL_RCC_OscConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001520:	f000 fc40 	bl	8001da4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001524:	f001 fb9c 	bl	8002c60 <HAL_PWREx_EnableOverDrive>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800152e:	f000 fc39 	bl	8001da4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001532:	230f      	movs	r3, #15
 8001534:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001536:	2302      	movs	r3, #2
 8001538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800153e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001542:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001548:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	2105      	movs	r1, #5
 8001550:	4618      	mov	r0, r3
 8001552:	f001 fe4d 	bl	80031f0 <HAL_RCC_ClockConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800155c:	f000 fc22 	bl	8001da4 <Error_Handler>
  }
}
 8001560:	bf00      	nop
 8001562:	3750      	adds	r7, #80	; 0x50
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	40007000 	.word	0x40007000

08001570 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	463b      	mov	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800158c:	4b1f      	ldr	r3, [pc, #124]	; (800160c <MX_TIM1_Init+0x9c>)
 800158e:	4a20      	ldr	r2, [pc, #128]	; (8001610 <MX_TIM1_Init+0xa0>)
 8001590:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1800-1;
 8001592:	4b1e      	ldr	r3, [pc, #120]	; (800160c <MX_TIM1_Init+0x9c>)
 8001594:	f240 7207 	movw	r2, #1799	; 0x707
 8001598:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <MX_TIM1_Init+0x9c>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <MX_TIM1_Init+0x9c>)
 80015a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <MX_TIM1_Init+0x9c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <MX_TIM1_Init+0x9c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b4:	4b15      	ldr	r3, [pc, #84]	; (800160c <MX_TIM1_Init+0x9c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015ba:	4814      	ldr	r0, [pc, #80]	; (800160c <MX_TIM1_Init+0x9c>)
 80015bc:	f002 f81a 	bl	80035f4 <HAL_TIM_Base_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80015c6:	f000 fbed 	bl	8001da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4619      	mov	r1, r3
 80015d6:	480d      	ldr	r0, [pc, #52]	; (800160c <MX_TIM1_Init+0x9c>)
 80015d8:	f002 fb31 	bl	8003c3e <HAL_TIM_ConfigClockSource>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80015e2:	f000 fbdf 	bl	8001da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ee:	463b      	mov	r3, r7
 80015f0:	4619      	mov	r1, r3
 80015f2:	4806      	ldr	r0, [pc, #24]	; (800160c <MX_TIM1_Init+0x9c>)
 80015f4:	f002 ff4a 	bl	800448c <HAL_TIMEx_MasterConfigSynchronization>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80015fe:	f000 fbd1 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000b60 	.word	0x20000b60
 8001610:	40010000 	.word	0x40010000

08001614 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
 8001628:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001632:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <MX_TIM2_Init+0x98>)
 8001634:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001638:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <MX_TIM2_Init+0x98>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <MX_TIM2_Init+0x98>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <MX_TIM2_Init+0x98>)
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MX_TIM2_Init+0x98>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <MX_TIM2_Init+0x98>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800165a:	4814      	ldr	r0, [pc, #80]	; (80016ac <MX_TIM2_Init+0x98>)
 800165c:	f001 ffca 	bl	80035f4 <HAL_TIM_Base_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001666:	f000 fb9d 	bl	8001da4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	4619      	mov	r1, r3
 8001678:	480c      	ldr	r0, [pc, #48]	; (80016ac <MX_TIM2_Init+0x98>)
 800167a:	f002 fba7 	bl	8003dcc <HAL_TIM_SlaveConfigSynchro>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001684:	f000 fb8e 	bl	8001da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	4619      	mov	r1, r3
 8001694:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_TIM2_Init+0x98>)
 8001696:	f002 fef9 	bl	800448c <HAL_TIMEx_MasterConfigSynchronization>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80016a0:	f000 fb80 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	3720      	adds	r7, #32
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000c38 	.word	0x20000c38

080016b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <MX_TIM3_Init+0x98>)
 80016d0:	4a1e      	ldr	r2, [pc, #120]	; (800174c <MX_TIM3_Init+0x9c>)
 80016d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <MX_TIM3_Init+0x98>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <MX_TIM3_Init+0x98>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <MX_TIM3_Init+0x98>)
 80016e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <MX_TIM3_Init+0x98>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <MX_TIM3_Init+0x98>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016f4:	4814      	ldr	r0, [pc, #80]	; (8001748 <MX_TIM3_Init+0x98>)
 80016f6:	f001 ff7d 	bl	80035f4 <HAL_TIM_Base_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001700:	f000 fb50 	bl	8001da4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	4619      	mov	r1, r3
 8001712:	480d      	ldr	r0, [pc, #52]	; (8001748 <MX_TIM3_Init+0x98>)
 8001714:	f002 fb5a 	bl	8003dcc <HAL_TIM_SlaveConfigSynchro>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800171e:	f000 fb41 	bl	8001da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	4619      	mov	r1, r3
 800172e:	4806      	ldr	r0, [pc, #24]	; (8001748 <MX_TIM3_Init+0x98>)
 8001730:	f002 feac 	bl	800448c <HAL_TIMEx_MasterConfigSynchronization>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800173a:	f000 fb33 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000a84 	.word	0x20000a84
 800174c:	40000400 	.word	0x40000400

08001750 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <MX_TIM4_Init+0x98>)
 8001770:	4a1e      	ldr	r2, [pc, #120]	; (80017ec <MX_TIM4_Init+0x9c>)
 8001772:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1800-1;
 8001774:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <MX_TIM4_Init+0x98>)
 8001776:	f240 7207 	movw	r2, #1799	; 0x707
 800177a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <MX_TIM4_Init+0x98>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <MX_TIM4_Init+0x98>)
 8001784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001788:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <MX_TIM4_Init+0x98>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <MX_TIM4_Init+0x98>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001796:	4814      	ldr	r0, [pc, #80]	; (80017e8 <MX_TIM4_Init+0x98>)
 8001798:	f001 ff2c 	bl	80035f4 <HAL_TIM_Base_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80017a2:	f000 faff 	bl	8001da4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	4619      	mov	r1, r3
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <MX_TIM4_Init+0x98>)
 80017b6:	f002 fb09 	bl	8003dcc <HAL_TIM_SlaveConfigSynchro>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80017c0:	f000 faf0 	bl	8001da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c4:	2300      	movs	r3, #0
 80017c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_TIM4_Init+0x98>)
 80017d2:	f002 fe5b 	bl	800448c <HAL_TIMEx_MasterConfigSynchronization>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80017dc:	f000 fae2 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200009a4 	.word	0x200009a4
 80017ec:	40000800 	.word	0x40000800

080017f0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f6:	463b      	mov	r3, r7
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <MX_TIM7_Init+0x64>)
 8001800:	4a15      	ldr	r2, [pc, #84]	; (8001858 <MX_TIM7_Init+0x68>)
 8001802:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000-1;
 8001804:	4b13      	ldr	r3, [pc, #76]	; (8001854 <MX_TIM7_Init+0x64>)
 8001806:	f242 3227 	movw	r2, #8999	; 0x2327
 800180a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <MX_TIM7_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <MX_TIM7_Init+0x64>)
 8001814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001818:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <MX_TIM7_Init+0x64>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001820:	480c      	ldr	r0, [pc, #48]	; (8001854 <MX_TIM7_Init+0x64>)
 8001822:	f001 fee7 	bl	80035f4 <HAL_TIM_Base_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800182c:	f000 faba 	bl	8001da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001838:	463b      	mov	r3, r7
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	; (8001854 <MX_TIM7_Init+0x64>)
 800183e:	f002 fe25 	bl	800448c <HAL_TIMEx_MasterConfigSynchronization>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001848:	f000 faac 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000cc8 	.word	0x20000cc8
 8001858:	40001400 	.word	0x40001400

0800185c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001862:	463b      	mov	r3, r7
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <MX_TIM9_Init+0x6c>)
 8001870:	4a16      	ldr	r2, [pc, #88]	; (80018cc <MX_TIM9_Init+0x70>)
 8001872:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 18000-1;
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <MX_TIM9_Init+0x6c>)
 8001876:	f244 624f 	movw	r2, #17999	; 0x464f
 800187a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <MX_TIM9_Init+0x6c>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_TIM9_Init+0x6c>)
 8001884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001888:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <MX_TIM9_Init+0x6c>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <MX_TIM9_Init+0x6c>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001896:	480c      	ldr	r0, [pc, #48]	; (80018c8 <MX_TIM9_Init+0x6c>)
 8001898:	f001 feac 	bl	80035f4 <HAL_TIM_Base_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80018a2:	f000 fa7f 	bl	8001da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018aa:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80018ac:	463b      	mov	r3, r7
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_TIM9_Init+0x6c>)
 80018b2:	f002 f9c4 	bl	8003c3e <HAL_TIM_ConfigClockSource>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80018bc:	f000 fa72 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000ba8 	.word	0x20000ba8
 80018cc:	40014000 	.word	0x40014000

080018d0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_TIM10_Init+0x40>)
 80018d6:	4a0f      	ldr	r2, [pc, #60]	; (8001914 <MX_TIM10_Init+0x44>)
 80018d8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 18000-1;
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <MX_TIM10_Init+0x40>)
 80018dc:	f244 624f 	movw	r2, #17999	; 0x464f
 80018e0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <MX_TIM10_Init+0x40>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_TIM10_Init+0x40>)
 80018ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ee:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <MX_TIM10_Init+0x40>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_TIM10_Init+0x40>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <MX_TIM10_Init+0x40>)
 80018fe:	f001 fe79 	bl	80035f4 <HAL_TIM_Base_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001908:	f000 fa4c 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000a30 	.word	0x20000a30
 8001914:	40014400 	.word	0x40014400

08001918 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <MX_TIM11_Init+0x40>)
 800191e:	4a0f      	ldr	r2, [pc, #60]	; (800195c <MX_TIM11_Init+0x44>)
 8001920:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 18000-1;
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <MX_TIM11_Init+0x40>)
 8001924:	f244 624f 	movw	r2, #17999	; 0x464f
 8001928:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <MX_TIM11_Init+0x40>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <MX_TIM11_Init+0x40>)
 8001932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001936:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <MX_TIM11_Init+0x40>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <MX_TIM11_Init+0x40>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001944:	4804      	ldr	r0, [pc, #16]	; (8001958 <MX_TIM11_Init+0x40>)
 8001946:	f001 fe55 	bl	80035f4 <HAL_TIM_Base_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001950:	f000 fa28 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000b18 	.word	0x20000b18
 800195c:	40014800 	.word	0x40014800

08001960 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001966:	f107 0310 	add.w	r3, r7, #16
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001974:	463b      	mov	r3, r7
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001980:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <MX_TIM12_Init+0xb4>)
 8001982:	4a25      	ldr	r2, [pc, #148]	; (8001a18 <MX_TIM12_Init+0xb8>)
 8001984:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 18000-1;
 8001986:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <MX_TIM12_Init+0xb4>)
 8001988:	f244 624f 	movw	r2, #17999	; 0x464f
 800198c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198e:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <MX_TIM12_Init+0xb4>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001994:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <MX_TIM12_Init+0xb4>)
 8001996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800199a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199c:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <MX_TIM12_Init+0xb4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <MX_TIM12_Init+0xb4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80019a8:	481a      	ldr	r0, [pc, #104]	; (8001a14 <MX_TIM12_Init+0xb4>)
 80019aa:	f001 fe23 	bl	80035f4 <HAL_TIM_Base_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM12_Init+0x58>
  {
    Error_Handler();
 80019b4:	f000 f9f6 	bl	8001da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80019be:	f107 0310 	add.w	r3, r7, #16
 80019c2:	4619      	mov	r1, r3
 80019c4:	4813      	ldr	r0, [pc, #76]	; (8001a14 <MX_TIM12_Init+0xb4>)
 80019c6:	f002 f93a 	bl	8003c3e <HAL_TIM_ConfigClockSource>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80019d0:	f000 f9e8 	bl	8001da4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 80019d4:	480f      	ldr	r0, [pc, #60]	; (8001a14 <MX_TIM12_Init+0xb4>)
 80019d6:	f001 ff35 	bl	8003844 <HAL_TIM_IC_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 80019e0:	f000 f9e0 	bl	8001da4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019e4:	2300      	movs	r3, #0
 80019e6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019e8:	2301      	movs	r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019f4:	463b      	mov	r3, r7
 80019f6:	2200      	movs	r2, #0
 80019f8:	4619      	mov	r1, r3
 80019fa:	4806      	ldr	r0, [pc, #24]	; (8001a14 <MX_TIM12_Init+0xb4>)
 80019fc:	f002 f883 	bl	8003b06 <HAL_TIM_IC_ConfigChannel>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM12_Init+0xaa>
  {
    Error_Handler();
 8001a06:	f000 f9cd 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	3720      	adds	r7, #32
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000c80 	.word	0x20000c80
 8001a18:	40001800 	.word	0x40001800

08001a1c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_UART5_Init+0x4c>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <MX_UART5_Init+0x50>)
 8001a24:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <MX_UART5_Init+0x4c>)
 8001a28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a2c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_UART5_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_UART5_Init+0x4c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <MX_UART5_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_UART5_Init+0x4c>)
 8001a42:	220c      	movs	r2, #12
 8001a44:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <MX_UART5_Init+0x4c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_UART5_Init+0x4c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_UART5_Init+0x4c>)
 8001a54:	f002 fdaa 	bl	80045ac <HAL_UART_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001a5e:	f000 f9a1 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000ad4 	.word	0x20000ad4
 8001a6c:	40005000 	.word	0x40005000

08001a70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a76:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <MX_USART3_UART_Init+0x50>)
 8001a78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a7c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001a80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a96:	220c      	movs	r2, #12
 8001a98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <MX_USART3_UART_Init+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <MX_USART3_UART_Init+0x4c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <MX_USART3_UART_Init+0x4c>)
 8001aa8:	f002 fd80 	bl	80045ac <HAL_UART_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ab2:	f000 f977 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200009ec 	.word	0x200009ec
 8001ac0:	40004800 	.word	0x40004800

08001ac4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_USART6_UART_Init+0x4c>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <MX_USART6_UART_Init+0x50>)
 8001acc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <MX_USART6_UART_Init+0x4c>)
 8001ad0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ad4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <MX_USART6_UART_Init+0x4c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <MX_USART6_UART_Init+0x4c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <MX_USART6_UART_Init+0x4c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <MX_USART6_UART_Init+0x4c>)
 8001aea:	220c      	movs	r2, #12
 8001aec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <MX_USART6_UART_Init+0x4c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <MX_USART6_UART_Init+0x4c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <MX_USART6_UART_Init+0x4c>)
 8001afc:	f002 fd56 	bl	80045ac <HAL_UART_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b06:	f000 f94d 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000bf4 	.word	0x20000bf4
 8001b14:	40011400 	.word	0x40011400

08001b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	; 0x30
 8001b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
 8001b2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	4b8b      	ldr	r3, [pc, #556]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a8a      	ldr	r2, [pc, #552]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001b38:	f043 0310 	orr.w	r3, r3, #16
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b88      	ldr	r3, [pc, #544]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	61bb      	str	r3, [r7, #24]
 8001b48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	4b84      	ldr	r3, [pc, #528]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a83      	ldr	r2, [pc, #524]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001b54:	f043 0320 	orr.w	r3, r3, #32
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b81      	ldr	r3, [pc, #516]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0320 	and.w	r3, r3, #32
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4b7d      	ldr	r3, [pc, #500]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a7c      	ldr	r2, [pc, #496]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b7a      	ldr	r3, [pc, #488]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b76      	ldr	r3, [pc, #472]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a75      	ldr	r2, [pc, #468]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b73      	ldr	r3, [pc, #460]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	4b6f      	ldr	r3, [pc, #444]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a6e      	ldr	r2, [pc, #440]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b6c      	ldr	r3, [pc, #432]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	4b68      	ldr	r3, [pc, #416]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a67      	ldr	r2, [pc, #412]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b65      	ldr	r3, [pc, #404]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	603b      	str	r3, [r7, #0]
 8001bda:	4b61      	ldr	r3, [pc, #388]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a60      	ldr	r2, [pc, #384]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b5e      	ldr	r3, [pc, #376]	; (8001d60 <MX_GPIO_Init+0x248>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PD02_DCmix_EN_Pin|PD04_DCpowder_IN2_Pin|PD02_DCpowder_EN_Pin|PD04_DCpowder_IN1_Pin
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f64f 71ed 	movw	r1, #65517	; 0xffed
 8001bf8:	485a      	ldr	r0, [pc, #360]	; (8001d64 <MX_GPIO_Init+0x24c>)
 8001bfa:	f001 f817 	bl	8002c2c <HAL_GPIO_WritePin>
                          |PD01_DCmix_IN2_Pin|PD01_DCmix_IN1_Pin|CupD_STP_Pin|PD03_DCmix_IN1_Pin
                          |CupD_DIR_Pin|PD03_DCmix_IN2_Pin|LidD_STP_Pin|PD03_DCmix_EN_Pin
                          |PD05_DCmix_IN1_Pin|PD04_DCmix_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PD02_DCpowder_IN1_Pin|PD01_DCpowder_IN1_Pin|PD01_DCpowder_IN2_Pin|PD05_DCpowder_IN1_Pin
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f24f 71ac 	movw	r1, #63404	; 0xf7ac
 8001c04:	4858      	ldr	r0, [pc, #352]	; (8001d68 <MX_GPIO_Init+0x250>)
 8001c06:	f001 f811 	bl	8002c2c <HAL_GPIO_WritePin>
                          |PD04_DCpowder_EN_Pin|PD05_DCpowder_IN2_Pin|PD01_DCpowder_EN_Pin|CF01_heat_IN2_Pin
                          |CupD_EN_Pin|LidD_EN_Pin|LidD_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ICE01_water_Pin|ICE01_mix_Pin|PD01_heat_IN1_Pin|PD04_heat_EN_Pin, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	21c9      	movs	r1, #201	; 0xc9
 8001c0e:	4857      	ldr	r0, [pc, #348]	; (8001d6c <MX_GPIO_Init+0x254>)
 8001c10:	f001 f80c 	bl	8002c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PD04_DCmix_IN1_Pin|ICE01_ice_Pin|CF01_heat_IN1_Pin|PD03_heat_IN1_Pin
 8001c14:	2200      	movs	r2, #0
 8001c16:	f248 01f9 	movw	r1, #33017	; 0x80f9
 8001c1a:	4855      	ldr	r0, [pc, #340]	; (8001d70 <MX_GPIO_Init+0x258>)
 8001c1c:	f001 f806 	bl	8002c2c <HAL_GPIO_WritePin>
                          |PD03_heat_IN2_Pin|PD04_heat_IN2_Pin|PD03_heat_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PD04_DCmix_IN2_Pin|PD05_DCmix_IN2_Pin|PD05_DCmix_EN_Pin|PD02_heat_IN2_Pin
 8001c20:	2200      	movs	r2, #0
 8001c22:	f64b 7139 	movw	r1, #48953	; 0xbf39
 8001c26:	4853      	ldr	r0, [pc, #332]	; (8001d74 <MX_GPIO_Init+0x25c>)
 8001c28:	f001 f800 	bl	8002c2c <HAL_GPIO_WritePin>
                          |PD02_heat_IN1_Pin|PD01_heat_IN2_Pin|PD05_heat_EN_Pin|CF01_heat_EN_Pin
                          |PD04_heat_IN1_Pin|PD01_heat_EN_Pin|PD02_heat_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PD03_DCpowder_EN_Pin|PD05_DCpowder_EN_Pin|PD02_DCpowder_IN2_Pin, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	210b      	movs	r1, #11
 8001c30:	4851      	ldr	r0, [pc, #324]	; (8001d78 <MX_GPIO_Init+0x260>)
 8001c32:	f000 fffb 	bl	8002c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD02_DCmix_IN2_Pin|PD02_DCmix_IN1_Pin|PD01_DCmix_EN_Pin|PD05_heat_IN1_Pin
 8001c36:	2200      	movs	r2, #0
 8001c38:	f64f 01e3 	movw	r1, #63715	; 0xf8e3
 8001c3c:	484f      	ldr	r0, [pc, #316]	; (8001d7c <MX_GPIO_Init+0x264>)
 8001c3e:	f000 fff5 	bl	8002c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD02_DCmix_EN_Pin PD04_DCpowder_IN2_Pin PD02_DCpowder_EN_Pin PD04_DCpowder_IN1_Pin
                           PD01_DCmix_IN2_Pin PD01_DCmix_IN1_Pin CupD_STP_Pin PD03_DCmix_IN1_Pin
                           CupD_DIR_Pin PD03_DCmix_IN2_Pin LidD_STP_Pin PD03_DCmix_EN_Pin
                           PD05_DCmix_IN1_Pin PD04_DCmix_EN_Pin */
  GPIO_InitStruct.Pin = PD02_DCmix_EN_Pin|PD04_DCpowder_IN2_Pin|PD02_DCpowder_EN_Pin|PD04_DCpowder_IN1_Pin
 8001c42:	f64f 73ed 	movw	r3, #65517	; 0xffed
 8001c46:	61fb      	str	r3, [r7, #28]
                          |PD01_DCmix_IN2_Pin|PD01_DCmix_IN1_Pin|CupD_STP_Pin|PD03_DCmix_IN1_Pin
                          |CupD_DIR_Pin|PD03_DCmix_IN2_Pin|LidD_STP_Pin|PD03_DCmix_EN_Pin
                          |PD05_DCmix_IN1_Pin|PD04_DCmix_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4842      	ldr	r0, [pc, #264]	; (8001d64 <MX_GPIO_Init+0x24c>)
 8001c5c:	f000 fe22 	bl	80028a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCpowder_IN1_Pin PD01_DCpowder_IN1_Pin PD01_DCpowder_IN2_Pin PD05_DCpowder_IN1_Pin
                           PD04_DCpowder_EN_Pin PD05_DCpowder_IN2_Pin PD01_DCpowder_EN_Pin CF01_heat_IN2_Pin
                           CupD_EN_Pin LidD_EN_Pin LidD_DIR_Pin */
  GPIO_InitStruct.Pin = PD02_DCpowder_IN1_Pin|PD01_DCpowder_IN1_Pin|PD01_DCpowder_IN2_Pin|PD05_DCpowder_IN1_Pin
 8001c60:	f24f 73ac 	movw	r3, #63404	; 0xf7ac
 8001c64:	61fb      	str	r3, [r7, #28]
                          |PD04_DCpowder_EN_Pin|PD05_DCpowder_IN2_Pin|PD01_DCpowder_EN_Pin|CF01_heat_IN2_Pin
                          |CupD_EN_Pin|LidD_EN_Pin|LidD_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c66:	2301      	movs	r3, #1
 8001c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	4619      	mov	r1, r3
 8001c78:	483b      	ldr	r0, [pc, #236]	; (8001d68 <MX_GPIO_Init+0x250>)
 8001c7a:	f000 fe13 	bl	80028a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Lid_up_Pin */
  GPIO_InitStruct.Pin = Lid_up_Pin;
 8001c7e:	2310      	movs	r3, #16
 8001c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Lid_up_GPIO_Port, &GPIO_InitStruct);
 8001c8a:	f107 031c 	add.w	r3, r7, #28
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4835      	ldr	r0, [pc, #212]	; (8001d68 <MX_GPIO_Init+0x250>)
 8001c92:	f000 fe07 	bl	80028a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ICE01_water_Pin ICE01_mix_Pin PD01_heat_IN1_Pin PD04_heat_EN_Pin */
  GPIO_InitStruct.Pin = ICE01_water_Pin|ICE01_mix_Pin|PD01_heat_IN1_Pin|PD04_heat_EN_Pin;
 8001c96:	23c9      	movs	r3, #201	; 0xc9
 8001c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	4619      	mov	r1, r3
 8001cac:	482f      	ldr	r0, [pc, #188]	; (8001d6c <MX_GPIO_Init+0x254>)
 8001cae:	f000 fdf9 	bl	80028a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Cup_down_Pin */
  GPIO_InitStruct.Pin = Cup_down_Pin;
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Cup_down_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	f107 031c 	add.w	r3, r7, #28
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4829      	ldr	r0, [pc, #164]	; (8001d6c <MX_GPIO_Init+0x254>)
 8001cc6:	f000 fded 	bl	80028a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD04_DCmix_IN1_Pin ICE01_ice_Pin CF01_heat_IN1_Pin PD03_heat_IN1_Pin
                           PD03_heat_IN2_Pin PD04_heat_IN2_Pin PD03_heat_EN_Pin */
  GPIO_InitStruct.Pin = PD04_DCmix_IN1_Pin|ICE01_ice_Pin|CF01_heat_IN1_Pin|PD03_heat_IN1_Pin
 8001cca:	f248 03f9 	movw	r3, #33017	; 0x80f9
 8001cce:	61fb      	str	r3, [r7, #28]
                          |PD03_heat_IN2_Pin|PD04_heat_IN2_Pin|PD03_heat_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4823      	ldr	r0, [pc, #140]	; (8001d70 <MX_GPIO_Init+0x258>)
 8001ce4:	f000 fdde 	bl	80028a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD04_DCmix_IN2_Pin PD05_DCmix_IN2_Pin PD05_DCmix_EN_Pin PD02_heat_IN2_Pin
                           PD02_heat_IN1_Pin PD01_heat_IN2_Pin PD05_heat_EN_Pin CF01_heat_EN_Pin
                           PD04_heat_IN1_Pin PD01_heat_EN_Pin PD02_heat_EN_Pin */
  GPIO_InitStruct.Pin = PD04_DCmix_IN2_Pin|PD05_DCmix_IN2_Pin|PD05_DCmix_EN_Pin|PD02_heat_IN2_Pin
 8001ce8:	f64b 7339 	movw	r3, #48953	; 0xbf39
 8001cec:	61fb      	str	r3, [r7, #28]
                          |PD02_heat_IN1_Pin|PD01_heat_IN2_Pin|PD05_heat_EN_Pin|CF01_heat_EN_Pin
                          |PD04_heat_IN1_Pin|PD01_heat_EN_Pin|PD02_heat_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfa:	f107 031c 	add.w	r3, r7, #28
 8001cfe:	4619      	mov	r1, r3
 8001d00:	481c      	ldr	r0, [pc, #112]	; (8001d74 <MX_GPIO_Init+0x25c>)
 8001d02:	f000 fdcf 	bl	80028a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Cup_up_Pin Lid_down_Pin */
  GPIO_InitStruct.Pin = Cup_up_Pin|Lid_down_Pin;
 8001d06:	2342      	movs	r3, #66	; 0x42
 8001d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	4619      	mov	r1, r3
 8001d18:	4816      	ldr	r0, [pc, #88]	; (8001d74 <MX_GPIO_Init+0x25c>)
 8001d1a:	f000 fdc3 	bl	80028a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD03_DCpowder_EN_Pin PD05_DCpowder_EN_Pin PD02_DCpowder_IN2_Pin */
  GPIO_InitStruct.Pin = PD03_DCpowder_EN_Pin|PD05_DCpowder_EN_Pin|PD02_DCpowder_IN2_Pin;
 8001d1e:	230b      	movs	r3, #11
 8001d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d22:	2301      	movs	r3, #1
 8001d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d2e:	f107 031c 	add.w	r3, r7, #28
 8001d32:	4619      	mov	r1, r3
 8001d34:	4810      	ldr	r0, [pc, #64]	; (8001d78 <MX_GPIO_Init+0x260>)
 8001d36:	f000 fdb5 	bl	80028a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_DCmix_IN2_Pin PD02_DCmix_IN1_Pin PD01_DCmix_EN_Pin PD05_heat_IN1_Pin
                           PD05_heat_IN2_Pin PD03_DCpowder_IN1_Pin PD03_DCpowder_IN2_Pin PD_Fan02_relay_Pin
                           PD_Fan01_relay_Pin ICE01_relay_Pin */
  GPIO_InitStruct.Pin = PD02_DCmix_IN2_Pin|PD02_DCmix_IN1_Pin|PD01_DCmix_EN_Pin|PD05_heat_IN1_Pin
 8001d3a:	f64f 03e3 	movw	r3, #63715	; 0xf8e3
 8001d3e:	61fb      	str	r3, [r7, #28]
                          |PD05_heat_IN2_Pin|PD03_DCpowder_IN1_Pin|PD03_DCpowder_IN2_Pin|PD_Fan02_relay_Pin
                          |PD_Fan01_relay_Pin|ICE01_relay_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d40:	2301      	movs	r3, #1
 8001d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d4c:	f107 031c 	add.w	r3, r7, #28
 8001d50:	4619      	mov	r1, r3
 8001d52:	480a      	ldr	r0, [pc, #40]	; (8001d7c <MX_GPIO_Init+0x264>)
 8001d54:	f000 fda6 	bl	80028a4 <HAL_GPIO_Init>

}
 8001d58:	bf00      	nop
 8001d5a:	3730      	adds	r7, #48	; 0x30
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40021400 	.word	0x40021400
 8001d6c:	40020800 	.word	0x40020800
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40021800 	.word	0x40021800
 8001d7c:	40020c00 	.word	0x40020c00

08001d80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d101      	bne.n	8001d96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d92:	f000 fbcf 	bl	8002534 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40001c00 	.word	0x40001c00

08001da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001da8:	b672      	cpsid	i
}
 8001daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dac:	e7fe      	b.n	8001dac <Error_Handler+0x8>
	...

08001db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_MspInit+0x54>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	4a11      	ldr	r2, [pc, #68]	; (8001e04 <HAL_MspInit+0x54>)
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <HAL_MspInit+0x54>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	603b      	str	r3, [r7, #0]
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_MspInit+0x54>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_MspInit+0x54>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_MspInit+0x54>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	210f      	movs	r1, #15
 8001df2:	f06f 0001 	mvn.w	r0, #1
 8001df6:	f000 fc99 	bl	800272c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800

08001e08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b092      	sub	sp, #72	; 0x48
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a75      	ldr	r2, [pc, #468]	; (8001ffc <HAL_TIM_Base_MspInit+0x1f4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d10e      	bne.n	8001e48 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e2e:	4b74      	ldr	r3, [pc, #464]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	4a73      	ldr	r2, [pc, #460]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3a:	4b71      	ldr	r3, [pc, #452]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	633b      	str	r3, [r7, #48]	; 0x30
 8001e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001e46:	e0d5      	b.n	8001ff4 <HAL_TIM_Base_MspInit+0x1ec>
  else if(htim_base->Instance==TIM2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e50:	d116      	bne.n	8001e80 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e56:	4b6a      	ldr	r3, [pc, #424]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a69      	ldr	r2, [pc, #420]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b67      	ldr	r3, [pc, #412]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2105      	movs	r1, #5
 8001e72:	201c      	movs	r0, #28
 8001e74:	f000 fc5a 	bl	800272c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e78:	201c      	movs	r0, #28
 8001e7a:	f000 fc73 	bl	8002764 <HAL_NVIC_EnableIRQ>
}
 8001e7e:	e0b9      	b.n	8001ff4 <HAL_TIM_Base_MspInit+0x1ec>
  else if(htim_base->Instance==TIM3)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a5f      	ldr	r2, [pc, #380]	; (8002004 <HAL_TIM_Base_MspInit+0x1fc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d116      	bne.n	8001eb8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e8e:	4b5c      	ldr	r3, [pc, #368]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4a5b      	ldr	r2, [pc, #364]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9a:	4b59      	ldr	r3, [pc, #356]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2105      	movs	r1, #5
 8001eaa:	201d      	movs	r0, #29
 8001eac:	f000 fc3e 	bl	800272c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001eb0:	201d      	movs	r0, #29
 8001eb2:	f000 fc57 	bl	8002764 <HAL_NVIC_EnableIRQ>
}
 8001eb6:	e09d      	b.n	8001ff4 <HAL_TIM_Base_MspInit+0x1ec>
  else if(htim_base->Instance==TIM4)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a52      	ldr	r2, [pc, #328]	; (8002008 <HAL_TIM_Base_MspInit+0x200>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d116      	bne.n	8001ef0 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec6:	4b4e      	ldr	r3, [pc, #312]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a4d      	ldr	r2, [pc, #308]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001ecc:	f043 0304 	orr.w	r3, r3, #4
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b4b      	ldr	r3, [pc, #300]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2105      	movs	r1, #5
 8001ee2:	201e      	movs	r0, #30
 8001ee4:	f000 fc22 	bl	800272c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ee8:	201e      	movs	r0, #30
 8001eea:	f000 fc3b 	bl	8002764 <HAL_NVIC_EnableIRQ>
}
 8001eee:	e081      	b.n	8001ff4 <HAL_TIM_Base_MspInit+0x1ec>
  else if(htim_base->Instance==TIM7)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a45      	ldr	r2, [pc, #276]	; (800200c <HAL_TIM_Base_MspInit+0x204>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d10e      	bne.n	8001f18 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
 8001efe:	4b40      	ldr	r3, [pc, #256]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	4a3f      	ldr	r2, [pc, #252]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001f04:	f043 0320 	orr.w	r3, r3, #32
 8001f08:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0a:	4b3d      	ldr	r3, [pc, #244]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f003 0320 	and.w	r3, r3, #32
 8001f12:	623b      	str	r3, [r7, #32]
 8001f14:	6a3b      	ldr	r3, [r7, #32]
}
 8001f16:	e06d      	b.n	8001ff4 <HAL_TIM_Base_MspInit+0x1ec>
  else if(htim_base->Instance==TIM9)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a3c      	ldr	r2, [pc, #240]	; (8002010 <HAL_TIM_Base_MspInit+0x208>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d10e      	bne.n	8001f40 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	4b36      	ldr	r3, [pc, #216]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	4a35      	ldr	r2, [pc, #212]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f30:	6453      	str	r3, [r2, #68]	; 0x44
 8001f32:	4b33      	ldr	r3, [pc, #204]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
}
 8001f3e:	e059      	b.n	8001ff4 <HAL_TIM_Base_MspInit+0x1ec>
  else if(htim_base->Instance==TIM10)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a33      	ldr	r2, [pc, #204]	; (8002014 <HAL_TIM_Base_MspInit+0x20c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d10e      	bne.n	8001f68 <HAL_TIM_Base_MspInit+0x160>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	4a2b      	ldr	r2, [pc, #172]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f58:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5a:	4b29      	ldr	r3, [pc, #164]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	69bb      	ldr	r3, [r7, #24]
}
 8001f66:	e045      	b.n	8001ff4 <HAL_TIM_Base_MspInit+0x1ec>
  else if(htim_base->Instance==TIM11)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a2a      	ldr	r2, [pc, #168]	; (8002018 <HAL_TIM_Base_MspInit+0x210>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d10e      	bne.n	8001f90 <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	4b22      	ldr	r3, [pc, #136]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	4a21      	ldr	r2, [pc, #132]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f80:	6453      	str	r3, [r2, #68]	; 0x44
 8001f82:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697b      	ldr	r3, [r7, #20]
}
 8001f8e:	e031      	b.n	8001ff4 <HAL_TIM_Base_MspInit+0x1ec>
  else if(htim_base->Instance==TIM12)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a21      	ldr	r2, [pc, #132]	; (800201c <HAL_TIM_Base_MspInit+0x214>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d12c      	bne.n	8001ff4 <HAL_TIM_Base_MspInit+0x1ec>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	4b18      	ldr	r3, [pc, #96]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a17      	ldr	r2, [pc, #92]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a10      	ldr	r2, [pc, #64]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_TIM_Base_MspInit+0x1f8>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001fd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fd6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001fe4:	2309      	movs	r3, #9
 8001fe6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fec:	4619      	mov	r1, r3
 8001fee:	480c      	ldr	r0, [pc, #48]	; (8002020 <HAL_TIM_Base_MspInit+0x218>)
 8001ff0:	f000 fc58 	bl	80028a4 <HAL_GPIO_Init>
}
 8001ff4:	bf00      	nop
 8001ff6:	3748      	adds	r7, #72	; 0x48
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40010000 	.word	0x40010000
 8002000:	40023800 	.word	0x40023800
 8002004:	40000400 	.word	0x40000400
 8002008:	40000800 	.word	0x40000800
 800200c:	40001400 	.word	0x40001400
 8002010:	40014000 	.word	0x40014000
 8002014:	40014400 	.word	0x40014400
 8002018:	40014800 	.word	0x40014800
 800201c:	40001800 	.word	0x40001800
 8002020:	40020400 	.word	0x40020400

08002024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08e      	sub	sp, #56	; 0x38
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a67      	ldr	r2, [pc, #412]	; (80021e0 <HAL_UART_MspInit+0x1bc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d153      	bne.n	80020ee <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
 800204a:	4b66      	ldr	r3, [pc, #408]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a65      	ldr	r2, [pc, #404]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 8002050:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b63      	ldr	r3, [pc, #396]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800205e:	623b      	str	r3, [r7, #32]
 8002060:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	4b5f      	ldr	r3, [pc, #380]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a5e      	ldr	r2, [pc, #376]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b5c      	ldr	r3, [pc, #368]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	61fb      	str	r3, [r7, #28]
 800207c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	4b58      	ldr	r3, [pc, #352]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a57      	ldr	r2, [pc, #348]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 8002088:	f043 0308 	orr.w	r3, r3, #8
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b55      	ldr	r3, [pc, #340]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = CupD_TX_Pin;
 800209a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a8:	2303      	movs	r3, #3
 80020aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020ac:	2308      	movs	r3, #8
 80020ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CupD_TX_GPIO_Port, &GPIO_InitStruct);
 80020b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b4:	4619      	mov	r1, r3
 80020b6:	484c      	ldr	r0, [pc, #304]	; (80021e8 <HAL_UART_MspInit+0x1c4>)
 80020b8:	f000 fbf4 	bl	80028a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CupD_RX_Pin;
 80020bc:	2304      	movs	r3, #4
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c8:	2303      	movs	r3, #3
 80020ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020cc:	2308      	movs	r3, #8
 80020ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CupD_RX_GPIO_Port, &GPIO_InitStruct);
 80020d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d4:	4619      	mov	r1, r3
 80020d6:	4845      	ldr	r0, [pc, #276]	; (80021ec <HAL_UART_MspInit+0x1c8>)
 80020d8:	f000 fbe4 	bl	80028a4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	2105      	movs	r1, #5
 80020e0:	2035      	movs	r0, #53	; 0x35
 80020e2:	f000 fb23 	bl	800272c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80020e6:	2035      	movs	r0, #53	; 0x35
 80020e8:	f000 fb3c 	bl	8002764 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80020ec:	e074      	b.n	80021d8 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a3f      	ldr	r2, [pc, #252]	; (80021f0 <HAL_UART_MspInit+0x1cc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d135      	bne.n	8002164 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	4a38      	ldr	r2, [pc, #224]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 8002102:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002106:	6413      	str	r3, [r2, #64]	; 0x40
 8002108:	4b36      	ldr	r3, [pc, #216]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	4b32      	ldr	r3, [pc, #200]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	4a31      	ldr	r2, [pc, #196]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	6313      	str	r3, [r2, #48]	; 0x30
 8002124:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 8002130:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002142:	2307      	movs	r3, #7
 8002144:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214a:	4619      	mov	r1, r3
 800214c:	4826      	ldr	r0, [pc, #152]	; (80021e8 <HAL_UART_MspInit+0x1c4>)
 800214e:	f000 fba9 	bl	80028a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	2105      	movs	r1, #5
 8002156:	2027      	movs	r0, #39	; 0x27
 8002158:	f000 fae8 	bl	800272c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800215c:	2027      	movs	r0, #39	; 0x27
 800215e:	f000 fb01 	bl	8002764 <HAL_NVIC_EnableIRQ>
}
 8002162:	e039      	b.n	80021d8 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART6)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a22      	ldr	r2, [pc, #136]	; (80021f4 <HAL_UART_MspInit+0x1d0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d134      	bne.n	80021d8 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART6_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	4a1b      	ldr	r2, [pc, #108]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 8002178:	f043 0320 	orr.w	r3, r3, #32
 800217c:	6453      	str	r3, [r2, #68]	; 0x44
 800217e:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 8002194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_UART_MspInit+0x1c0>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LidD_RX_Pin|LidD_TX_Pin;
 80021a6:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b4:	2303      	movs	r3, #3
 80021b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80021b8:	2308      	movs	r3, #8
 80021ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c0:	4619      	mov	r1, r3
 80021c2:	480d      	ldr	r0, [pc, #52]	; (80021f8 <HAL_UART_MspInit+0x1d4>)
 80021c4:	f000 fb6e 	bl	80028a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2105      	movs	r1, #5
 80021cc:	2047      	movs	r0, #71	; 0x47
 80021ce:	f000 faad 	bl	800272c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80021d2:	2047      	movs	r0, #71	; 0x47
 80021d4:	f000 fac6 	bl	8002764 <HAL_NVIC_EnableIRQ>
}
 80021d8:	bf00      	nop
 80021da:	3738      	adds	r7, #56	; 0x38
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40005000 	.word	0x40005000
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020800 	.word	0x40020800
 80021ec:	40020c00 	.word	0x40020c00
 80021f0:	40004800 	.word	0x40004800
 80021f4:	40011400 	.word	0x40011400
 80021f8:	40021800 	.word	0x40021800

080021fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08c      	sub	sp, #48	; 0x30
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 800220c:	2200      	movs	r2, #0
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	202c      	movs	r0, #44	; 0x2c
 8002212:	f000 fa8b 	bl	800272c <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002216:	202c      	movs	r0, #44	; 0x2c
 8002218:	f000 faa4 	bl	8002764 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <HAL_InitTick+0xa4>)
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	4a1e      	ldr	r2, [pc, #120]	; (80022a0 <HAL_InitTick+0xa4>)
 8002226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222a:	6413      	str	r3, [r2, #64]	; 0x40
 800222c:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <HAL_InitTick+0xa4>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002238:	f107 0210 	add.w	r2, r7, #16
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f001 f9a4 	bl	8003590 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002248:	f001 f97a 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 800224c:	4603      	mov	r3, r0
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002254:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <HAL_InitTick+0xa8>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0c9b      	lsrs	r3, r3, #18
 800225c:	3b01      	subs	r3, #1
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <HAL_InitTick+0xac>)
 8002262:	4a12      	ldr	r2, [pc, #72]	; (80022ac <HAL_InitTick+0xb0>)
 8002264:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <HAL_InitTick+0xac>)
 8002268:	f240 32e7 	movw	r2, #999	; 0x3e7
 800226c:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 800226e:	4a0e      	ldr	r2, [pc, #56]	; (80022a8 <HAL_InitTick+0xac>)
 8002270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002272:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <HAL_InitTick+0xac>)
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_InitTick+0xac>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8002280:	4809      	ldr	r0, [pc, #36]	; (80022a8 <HAL_InitTick+0xac>)
 8002282:	f001 f9b7 	bl	80035f4 <HAL_TIM_Base_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d104      	bne.n	8002296 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 800228c:	4806      	ldr	r0, [pc, #24]	; (80022a8 <HAL_InitTick+0xac>)
 800228e:	f001 fa69 	bl	8003764 <HAL_TIM_Base_Start_IT>
 8002292:	4603      	mov	r3, r0
 8002294:	e000      	b.n	8002298 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
}
 8002298:	4618      	mov	r0, r3
 800229a:	3730      	adds	r7, #48	; 0x30
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40023800 	.word	0x40023800
 80022a4:	431bde83 	.word	0x431bde83
 80022a8:	20000d14 	.word	0x20000d14
 80022ac:	40001c00 	.word	0x40001c00

080022b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <NMI_Handler+0x4>

080022b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ba:	e7fe      	b.n	80022ba <HardFault_Handler+0x4>

080022bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <MemManage_Handler+0x4>

080022c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c6:	e7fe      	b.n	80022c6 <BusFault_Handler+0x4>

080022c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022cc:	e7fe      	b.n	80022cc <UsageFault_Handler+0x4>

080022ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <TIM2_IRQHandler+0x10>)
 80022e2:	f001 fb08 	bl	80038f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000c38 	.word	0x20000c38

080022f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <TIM3_IRQHandler+0x10>)
 80022f6:	f001 fafe 	bl	80038f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000a84 	.word	0x20000a84

08002304 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <TIM4_IRQHandler+0x10>)
 800230a:	f001 faf4 	bl	80038f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200009a4 	.word	0x200009a4

08002318 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <USART3_IRQHandler+0x10>)
 800231e:	f002 faf7 	bl	8004910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	200009ec 	.word	0x200009ec

0800232c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002332:	f001 fae0 	bl	80038f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000d14 	.word	0x20000d14

08002340 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002344:	4802      	ldr	r0, [pc, #8]	; (8002350 <UART5_IRQHandler+0x10>)
 8002346:	f002 fae3 	bl	8004910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000ad4 	.word	0x20000ad4

08002354 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002358:	4802      	ldr	r0, [pc, #8]	; (8002364 <USART6_IRQHandler+0x10>)
 800235a:	f002 fad9 	bl	8004910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000bf4 	.word	0x20000bf4

08002368 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	e00a      	b.n	8002390 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800237a:	f3af 8000 	nop.w
 800237e:	4601      	mov	r1, r0
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	60ba      	str	r2, [r7, #8]
 8002386:	b2ca      	uxtb	r2, r1
 8002388:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	3301      	adds	r3, #1
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	dbf0      	blt.n	800237a <_read+0x12>
	}

return len;
 8002398:	687b      	ldr	r3, [r7, #4]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
	return -1;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ca:	605a      	str	r2, [r3, #4]
	return 0;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <_isatty>:

int _isatty(int file)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
	return 1;
 80023e2:	2301      	movs	r3, #1
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
	return 0;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002414:	4a14      	ldr	r2, [pc, #80]	; (8002468 <_sbrk+0x5c>)
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <_sbrk+0x60>)
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <_sbrk+0x64>)
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <_sbrk+0x68>)
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	429a      	cmp	r2, r3
 800243a:	d207      	bcs.n	800244c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800243c:	f004 fd1e 	bl	8006e7c <__errno>
 8002440:	4603      	mov	r3, r0
 8002442:	220c      	movs	r2, #12
 8002444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
 800244a:	e009      	b.n	8002460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <_sbrk+0x64>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <_sbrk+0x64>)
 800245c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245e:	68fb      	ldr	r3, [r7, #12]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20030000 	.word	0x20030000
 800246c:	00000400 	.word	0x00000400
 8002470:	200004fc 	.word	0x200004fc
 8002474:	20000d70 	.word	0x20000d70

08002478 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <SystemInit+0x20>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	4a05      	ldr	r2, [pc, #20]	; (8002498 <SystemInit+0x20>)
 8002484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800249c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024a0:	480d      	ldr	r0, [pc, #52]	; (80024d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024a2:	490e      	ldr	r1, [pc, #56]	; (80024dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024a4:	4a0e      	ldr	r2, [pc, #56]	; (80024e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a8:	e002      	b.n	80024b0 <LoopCopyDataInit>

080024aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ae:	3304      	adds	r3, #4

080024b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b4:	d3f9      	bcc.n	80024aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b6:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024b8:	4c0b      	ldr	r4, [pc, #44]	; (80024e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024bc:	e001      	b.n	80024c2 <LoopFillZerobss>

080024be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c0:	3204      	adds	r2, #4

080024c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c4:	d3fb      	bcc.n	80024be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024c6:	f7ff ffd7 	bl	8002478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ca:	f004 fdd3 	bl	8007074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ce:	f7fe fce3 	bl	8000e98 <main>
  bx  lr    
 80024d2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80024d4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80024d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024dc:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 80024e0:	080081d8 	.word	0x080081d8
  ldr r2, =_sbss
 80024e4:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80024e8:	20000d70 	.word	0x20000d70

080024ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024ec:	e7fe      	b.n	80024ec <ADC_IRQHandler>
	...

080024f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024f4:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <HAL_Init+0x40>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0d      	ldr	r2, [pc, #52]	; (8002530 <HAL_Init+0x40>)
 80024fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_Init+0x40>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <HAL_Init+0x40>)
 8002506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800250a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HAL_Init+0x40>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a07      	ldr	r2, [pc, #28]	; (8002530 <HAL_Init+0x40>)
 8002512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002516:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002518:	2003      	movs	r0, #3
 800251a:	f000 f8fc 	bl	8002716 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800251e:	2005      	movs	r0, #5
 8002520:	f7ff fe6c 	bl	80021fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002524:	f7ff fc44 	bl	8001db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40023c00 	.word	0x40023c00

08002534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_IncTick+0x20>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_IncTick+0x24>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4413      	add	r3, r2
 8002544:	4a04      	ldr	r2, [pc, #16]	; (8002558 <HAL_IncTick+0x24>)
 8002546:	6013      	str	r3, [r2, #0]
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000008 	.word	0x20000008
 8002558:	20000d5c 	.word	0x20000d5c

0800255c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return uwTick;
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <HAL_GetTick+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000d5c 	.word	0x20000d5c

08002574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800257c:	f7ff ffee 	bl	800255c <HAL_GetTick>
 8002580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d005      	beq.n	800259a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <HAL_Delay+0x44>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800259a:	bf00      	nop
 800259c:	f7ff ffde 	bl	800255c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d8f7      	bhi.n	800259c <HAL_Delay+0x28>
  {
  }
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000008 	.word	0x20000008

080025bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d8:	4013      	ands	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ee:	4a04      	ldr	r2, [pc, #16]	; (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	60d3      	str	r3, [r2, #12]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <__NVIC_GetPriorityGrouping+0x18>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	f003 0307 	and.w	r3, r3, #7
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	2b00      	cmp	r3, #0
 8002630:	db0b      	blt.n	800264a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	4907      	ldr	r1, [pc, #28]	; (8002658 <__NVIC_EnableIRQ+0x38>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	2001      	movs	r0, #1
 8002642:	fa00 f202 	lsl.w	r2, r0, r2
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000e100 	.word	0xe000e100

0800265c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	6039      	str	r1, [r7, #0]
 8002666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266c:	2b00      	cmp	r3, #0
 800266e:	db0a      	blt.n	8002686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	b2da      	uxtb	r2, r3
 8002674:	490c      	ldr	r1, [pc, #48]	; (80026a8 <__NVIC_SetPriority+0x4c>)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	0112      	lsls	r2, r2, #4
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	440b      	add	r3, r1
 8002680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002684:	e00a      	b.n	800269c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	b2da      	uxtb	r2, r3
 800268a:	4908      	ldr	r1, [pc, #32]	; (80026ac <__NVIC_SetPriority+0x50>)
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	3b04      	subs	r3, #4
 8002694:	0112      	lsls	r2, r2, #4
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	440b      	add	r3, r1
 800269a:	761a      	strb	r2, [r3, #24]
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000e100 	.word	0xe000e100
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f1c3 0307 	rsb	r3, r3, #7
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	bf28      	it	cs
 80026ce:	2304      	movcs	r3, #4
 80026d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3304      	adds	r3, #4
 80026d6:	2b06      	cmp	r3, #6
 80026d8:	d902      	bls.n	80026e0 <NVIC_EncodePriority+0x30>
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3b03      	subs	r3, #3
 80026de:	e000      	b.n	80026e2 <NVIC_EncodePriority+0x32>
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	f04f 32ff 	mov.w	r2, #4294967295
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	401a      	ands	r2, r3
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f8:	f04f 31ff 	mov.w	r1, #4294967295
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002702:	43d9      	mvns	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	4313      	orrs	r3, r2
         );
}
 800270a:	4618      	mov	r0, r3
 800270c:	3724      	adds	r7, #36	; 0x24
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff ff4c 	bl	80025bc <__NVIC_SetPriorityGrouping>
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800273e:	f7ff ff61 	bl	8002604 <__NVIC_GetPriorityGrouping>
 8002742:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	6978      	ldr	r0, [r7, #20]
 800274a:	f7ff ffb1 	bl	80026b0 <NVIC_EncodePriority>
 800274e:	4602      	mov	r2, r0
 8002750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff ff80 	bl	800265c <__NVIC_SetPriority>
}
 800275c:	bf00      	nop
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff ff54 	bl	8002620 <__NVIC_EnableIRQ>
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800278e:	f7ff fee5 	bl	800255c <HAL_GetTick>
 8002792:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d008      	beq.n	80027b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2280      	movs	r2, #128	; 0x80
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e052      	b.n	8002858 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0216 	bic.w	r2, r2, #22
 80027c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d103      	bne.n	80027e2 <HAL_DMA_Abort+0x62>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d007      	beq.n	80027f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0208 	bic.w	r2, r2, #8
 80027f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0201 	bic.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002802:	e013      	b.n	800282c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002804:	f7ff feaa 	bl	800255c <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b05      	cmp	r3, #5
 8002810:	d90c      	bls.n	800282c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2220      	movs	r2, #32
 8002816:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2203      	movs	r2, #3
 800281c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e015      	b.n	8002858 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1e4      	bne.n	8002804 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283e:	223f      	movs	r2, #63	; 0x3f
 8002840:	409a      	lsls	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d004      	beq.n	800287e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2280      	movs	r2, #128	; 0x80
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e00c      	b.n	8002898 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2205      	movs	r2, #5
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0201 	bic.w	r2, r2, #1
 8002894:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b089      	sub	sp, #36	; 0x24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	e177      	b.n	8002bb0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028c0:	2201      	movs	r2, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	429a      	cmp	r2, r3
 80028da:	f040 8166 	bne.w	8002baa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d005      	beq.n	80028f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d130      	bne.n	8002958 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	2203      	movs	r2, #3
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800292c:	2201      	movs	r2, #1
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	091b      	lsrs	r3, r3, #4
 8002942:	f003 0201 	and.w	r2, r3, #1
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	2b03      	cmp	r3, #3
 8002962:	d017      	beq.n	8002994 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2203      	movs	r2, #3
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d123      	bne.n	80029e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	08da      	lsrs	r2, r3, #3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3208      	adds	r2, #8
 80029a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	220f      	movs	r2, #15
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	08da      	lsrs	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3208      	adds	r2, #8
 80029e2:	69b9      	ldr	r1, [r7, #24]
 80029e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	2203      	movs	r2, #3
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0203 	and.w	r2, r3, #3
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80c0 	beq.w	8002baa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	4b66      	ldr	r3, [pc, #408]	; (8002bc8 <HAL_GPIO_Init+0x324>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	4a65      	ldr	r2, [pc, #404]	; (8002bc8 <HAL_GPIO_Init+0x324>)
 8002a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a38:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3a:	4b63      	ldr	r3, [pc, #396]	; (8002bc8 <HAL_GPIO_Init+0x324>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a46:	4a61      	ldr	r2, [pc, #388]	; (8002bcc <HAL_GPIO_Init+0x328>)
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	089b      	lsrs	r3, r3, #2
 8002a4c:	3302      	adds	r3, #2
 8002a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	220f      	movs	r2, #15
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a58      	ldr	r2, [pc, #352]	; (8002bd0 <HAL_GPIO_Init+0x32c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d037      	beq.n	8002ae2 <HAL_GPIO_Init+0x23e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a57      	ldr	r2, [pc, #348]	; (8002bd4 <HAL_GPIO_Init+0x330>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d031      	beq.n	8002ade <HAL_GPIO_Init+0x23a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a56      	ldr	r2, [pc, #344]	; (8002bd8 <HAL_GPIO_Init+0x334>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d02b      	beq.n	8002ada <HAL_GPIO_Init+0x236>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a55      	ldr	r2, [pc, #340]	; (8002bdc <HAL_GPIO_Init+0x338>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d025      	beq.n	8002ad6 <HAL_GPIO_Init+0x232>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a54      	ldr	r2, [pc, #336]	; (8002be0 <HAL_GPIO_Init+0x33c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d01f      	beq.n	8002ad2 <HAL_GPIO_Init+0x22e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a53      	ldr	r2, [pc, #332]	; (8002be4 <HAL_GPIO_Init+0x340>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d019      	beq.n	8002ace <HAL_GPIO_Init+0x22a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a52      	ldr	r2, [pc, #328]	; (8002be8 <HAL_GPIO_Init+0x344>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d013      	beq.n	8002aca <HAL_GPIO_Init+0x226>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a51      	ldr	r2, [pc, #324]	; (8002bec <HAL_GPIO_Init+0x348>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00d      	beq.n	8002ac6 <HAL_GPIO_Init+0x222>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a50      	ldr	r2, [pc, #320]	; (8002bf0 <HAL_GPIO_Init+0x34c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d007      	beq.n	8002ac2 <HAL_GPIO_Init+0x21e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a4f      	ldr	r2, [pc, #316]	; (8002bf4 <HAL_GPIO_Init+0x350>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d101      	bne.n	8002abe <HAL_GPIO_Init+0x21a>
 8002aba:	2309      	movs	r3, #9
 8002abc:	e012      	b.n	8002ae4 <HAL_GPIO_Init+0x240>
 8002abe:	230a      	movs	r3, #10
 8002ac0:	e010      	b.n	8002ae4 <HAL_GPIO_Init+0x240>
 8002ac2:	2308      	movs	r3, #8
 8002ac4:	e00e      	b.n	8002ae4 <HAL_GPIO_Init+0x240>
 8002ac6:	2307      	movs	r3, #7
 8002ac8:	e00c      	b.n	8002ae4 <HAL_GPIO_Init+0x240>
 8002aca:	2306      	movs	r3, #6
 8002acc:	e00a      	b.n	8002ae4 <HAL_GPIO_Init+0x240>
 8002ace:	2305      	movs	r3, #5
 8002ad0:	e008      	b.n	8002ae4 <HAL_GPIO_Init+0x240>
 8002ad2:	2304      	movs	r3, #4
 8002ad4:	e006      	b.n	8002ae4 <HAL_GPIO_Init+0x240>
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e004      	b.n	8002ae4 <HAL_GPIO_Init+0x240>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e002      	b.n	8002ae4 <HAL_GPIO_Init+0x240>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <HAL_GPIO_Init+0x240>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	69fa      	ldr	r2, [r7, #28]
 8002ae6:	f002 0203 	and.w	r2, r2, #3
 8002aea:	0092      	lsls	r2, r2, #2
 8002aec:	4093      	lsls	r3, r2
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002af4:	4935      	ldr	r1, [pc, #212]	; (8002bcc <HAL_GPIO_Init+0x328>)
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	089b      	lsrs	r3, r3, #2
 8002afa:	3302      	adds	r3, #2
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b02:	4b3d      	ldr	r3, [pc, #244]	; (8002bf8 <HAL_GPIO_Init+0x354>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b26:	4a34      	ldr	r2, [pc, #208]	; (8002bf8 <HAL_GPIO_Init+0x354>)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b2c:	4b32      	ldr	r3, [pc, #200]	; (8002bf8 <HAL_GPIO_Init+0x354>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b50:	4a29      	ldr	r2, [pc, #164]	; (8002bf8 <HAL_GPIO_Init+0x354>)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b56:	4b28      	ldr	r3, [pc, #160]	; (8002bf8 <HAL_GPIO_Init+0x354>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b7a:	4a1f      	ldr	r2, [pc, #124]	; (8002bf8 <HAL_GPIO_Init+0x354>)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b80:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <HAL_GPIO_Init+0x354>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ba4:	4a14      	ldr	r2, [pc, #80]	; (8002bf8 <HAL_GPIO_Init+0x354>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3301      	adds	r3, #1
 8002bae:	61fb      	str	r3, [r7, #28]
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	2b0f      	cmp	r3, #15
 8002bb4:	f67f ae84 	bls.w	80028c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop
 8002bbc:	3724      	adds	r7, #36	; 0x24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40013800 	.word	0x40013800
 8002bd0:	40020000 	.word	0x40020000
 8002bd4:	40020400 	.word	0x40020400
 8002bd8:	40020800 	.word	0x40020800
 8002bdc:	40020c00 	.word	0x40020c00
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40021400 	.word	0x40021400
 8002be8:	40021800 	.word	0x40021800
 8002bec:	40021c00 	.word	0x40021c00
 8002bf0:	40022000 	.word	0x40022000
 8002bf4:	40022400 	.word	0x40022400
 8002bf8:	40013c00 	.word	0x40013c00

08002bfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	887b      	ldrh	r3, [r7, #2]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
 8002c18:	e001      	b.n	8002c1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	807b      	strh	r3, [r7, #2]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c3c:	787b      	ldrb	r3, [r7, #1]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c42:	887a      	ldrh	r2, [r7, #2]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c48:	e003      	b.n	8002c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c4a:	887b      	ldrh	r3, [r7, #2]
 8002c4c:	041a      	lsls	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	619a      	str	r2, [r3, #24]
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	4a1f      	ldr	r2, [pc, #124]	; (8002cf0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c78:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c86:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c8c:	f7ff fc66 	bl	800255c <HAL_GetTick>
 8002c90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c92:	e009      	b.n	8002ca8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c94:	f7ff fc62 	bl	800255c <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ca2:	d901      	bls.n	8002ca8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e01f      	b.n	8002ce8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ca8:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb4:	d1ee      	bne.n	8002c94 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cbc:	f7ff fc4e 	bl	800255c <HAL_GetTick>
 8002cc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cc2:	e009      	b.n	8002cd8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cc4:	f7ff fc4a 	bl	800255c <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cd2:	d901      	bls.n	8002cd8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e007      	b.n	8002ce8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cd8:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ce4:	d1ee      	bne.n	8002cc4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	420e0040 	.word	0x420e0040
 8002cf8:	40007000 	.word	0x40007000
 8002cfc:	420e0044 	.word	0x420e0044

08002d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e264      	b.n	80031dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d075      	beq.n	8002e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d1e:	4ba3      	ldr	r3, [pc, #652]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d00c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d2a:	4ba0      	ldr	r3, [pc, #640]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d112      	bne.n	8002d5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d36:	4b9d      	ldr	r3, [pc, #628]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d42:	d10b      	bne.n	8002d5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	4b99      	ldr	r3, [pc, #612]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d05b      	beq.n	8002e08 <HAL_RCC_OscConfig+0x108>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d157      	bne.n	8002e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e23f      	b.n	80031dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d64:	d106      	bne.n	8002d74 <HAL_RCC_OscConfig+0x74>
 8002d66:	4b91      	ldr	r3, [pc, #580]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a90      	ldr	r2, [pc, #576]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	e01d      	b.n	8002db0 <HAL_RCC_OscConfig+0xb0>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x98>
 8002d7e:	4b8b      	ldr	r3, [pc, #556]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a8a      	ldr	r2, [pc, #552]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b88      	ldr	r3, [pc, #544]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a87      	ldr	r2, [pc, #540]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e00b      	b.n	8002db0 <HAL_RCC_OscConfig+0xb0>
 8002d98:	4b84      	ldr	r3, [pc, #528]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a83      	ldr	r2, [pc, #524]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	4b81      	ldr	r3, [pc, #516]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a80      	ldr	r2, [pc, #512]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d013      	beq.n	8002de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7ff fbd0 	bl	800255c <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc0:	f7ff fbcc 	bl	800255c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	; 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e204      	b.n	80031dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd2:	4b76      	ldr	r3, [pc, #472]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0xc0>
 8002dde:	e014      	b.n	8002e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7ff fbbc 	bl	800255c <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de8:	f7ff fbb8 	bl	800255c <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	; 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e1f0      	b.n	80031dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfa:	4b6c      	ldr	r3, [pc, #432]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0xe8>
 8002e06:	e000      	b.n	8002e0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d063      	beq.n	8002ede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e16:	4b65      	ldr	r3, [pc, #404]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e22:	4b62      	ldr	r3, [pc, #392]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d11c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2e:	4b5f      	ldr	r3, [pc, #380]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d116      	bne.n	8002e68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3a:	4b5c      	ldr	r3, [pc, #368]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d005      	beq.n	8002e52 <HAL_RCC_OscConfig+0x152>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d001      	beq.n	8002e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e1c4      	b.n	80031dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e52:	4b56      	ldr	r3, [pc, #344]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4952      	ldr	r1, [pc, #328]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e66:	e03a      	b.n	8002ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d020      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e70:	4b4f      	ldr	r3, [pc, #316]	; (8002fb0 <HAL_RCC_OscConfig+0x2b0>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7ff fb71 	bl	800255c <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7e:	f7ff fb6d 	bl	800255c <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e1a5      	b.n	80031dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e90:	4b46      	ldr	r3, [pc, #280]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9c:	4b43      	ldr	r3, [pc, #268]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4940      	ldr	r1, [pc, #256]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	600b      	str	r3, [r1, #0]
 8002eb0:	e015      	b.n	8002ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eb2:	4b3f      	ldr	r3, [pc, #252]	; (8002fb0 <HAL_RCC_OscConfig+0x2b0>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7ff fb50 	bl	800255c <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec0:	f7ff fb4c 	bl	800255c <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e184      	b.n	80031dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed2:	4b36      	ldr	r3, [pc, #216]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d030      	beq.n	8002f4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d016      	beq.n	8002f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef2:	4b30      	ldr	r3, [pc, #192]	; (8002fb4 <HAL_RCC_OscConfig+0x2b4>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef8:	f7ff fb30 	bl	800255c <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f00:	f7ff fb2c 	bl	800255c <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e164      	b.n	80031dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f12:	4b26      	ldr	r3, [pc, #152]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x200>
 8002f1e:	e015      	b.n	8002f4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f20:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <HAL_RCC_OscConfig+0x2b4>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f26:	f7ff fb19 	bl	800255c <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f2e:	f7ff fb15 	bl	800255c <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e14d      	b.n	80031dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80a0 	beq.w	800309a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5e:	4b13      	ldr	r3, [pc, #76]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10f      	bne.n	8002f8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	4a0e      	ldr	r2, [pc, #56]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f78:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f86:	2301      	movs	r3, #1
 8002f88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_RCC_OscConfig+0x2b8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d121      	bne.n	8002fda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <HAL_RCC_OscConfig+0x2b8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a07      	ldr	r2, [pc, #28]	; (8002fb8 <HAL_RCC_OscConfig+0x2b8>)
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fa2:	f7ff fadb 	bl	800255c <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa8:	e011      	b.n	8002fce <HAL_RCC_OscConfig+0x2ce>
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	42470000 	.word	0x42470000
 8002fb4:	42470e80 	.word	0x42470e80
 8002fb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbc:	f7ff face 	bl	800255c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e106      	b.n	80031dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fce:	4b85      	ldr	r3, [pc, #532]	; (80031e4 <HAL_RCC_OscConfig+0x4e4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d106      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x2f0>
 8002fe2:	4b81      	ldr	r3, [pc, #516]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	4a80      	ldr	r2, [pc, #512]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6713      	str	r3, [r2, #112]	; 0x70
 8002fee:	e01c      	b.n	800302a <HAL_RCC_OscConfig+0x32a>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	d10c      	bne.n	8003012 <HAL_RCC_OscConfig+0x312>
 8002ff8:	4b7b      	ldr	r3, [pc, #492]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffc:	4a7a      	ldr	r2, [pc, #488]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 8002ffe:	f043 0304 	orr.w	r3, r3, #4
 8003002:	6713      	str	r3, [r2, #112]	; 0x70
 8003004:	4b78      	ldr	r3, [pc, #480]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 8003006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003008:	4a77      	ldr	r2, [pc, #476]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	6713      	str	r3, [r2, #112]	; 0x70
 8003010:	e00b      	b.n	800302a <HAL_RCC_OscConfig+0x32a>
 8003012:	4b75      	ldr	r3, [pc, #468]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003016:	4a74      	ldr	r2, [pc, #464]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 8003018:	f023 0301 	bic.w	r3, r3, #1
 800301c:	6713      	str	r3, [r2, #112]	; 0x70
 800301e:	4b72      	ldr	r3, [pc, #456]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	4a71      	ldr	r2, [pc, #452]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 8003024:	f023 0304 	bic.w	r3, r3, #4
 8003028:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d015      	beq.n	800305e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003032:	f7ff fa93 	bl	800255c <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f7ff fa8f 	bl	800255c <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f241 3288 	movw	r2, #5000	; 0x1388
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e0c5      	b.n	80031dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003050:	4b65      	ldr	r3, [pc, #404]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ee      	beq.n	800303a <HAL_RCC_OscConfig+0x33a>
 800305c:	e014      	b.n	8003088 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305e:	f7ff fa7d 	bl	800255c <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003064:	e00a      	b.n	800307c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7ff fa79 	bl	800255c <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f241 3288 	movw	r2, #5000	; 0x1388
 8003074:	4293      	cmp	r3, r2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e0af      	b.n	80031dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307c:	4b5a      	ldr	r3, [pc, #360]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1ee      	bne.n	8003066 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003088:	7dfb      	ldrb	r3, [r7, #23]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d105      	bne.n	800309a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308e:	4b56      	ldr	r3, [pc, #344]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	4a55      	ldr	r2, [pc, #340]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 8003094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003098:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 809b 	beq.w	80031da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030a4:	4b50      	ldr	r3, [pc, #320]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d05c      	beq.n	800316a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d141      	bne.n	800313c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b8:	4b4c      	ldr	r3, [pc, #304]	; (80031ec <HAL_RCC_OscConfig+0x4ec>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030be:	f7ff fa4d 	bl	800255c <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c6:	f7ff fa49 	bl	800255c <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e081      	b.n	80031dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d8:	4b43      	ldr	r3, [pc, #268]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f0      	bne.n	80030c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69da      	ldr	r2, [r3, #28]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	019b      	lsls	r3, r3, #6
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	085b      	lsrs	r3, r3, #1
 80030fc:	3b01      	subs	r3, #1
 80030fe:	041b      	lsls	r3, r3, #16
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003106:	061b      	lsls	r3, r3, #24
 8003108:	4937      	ldr	r1, [pc, #220]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 800310a:	4313      	orrs	r3, r2
 800310c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800310e:	4b37      	ldr	r3, [pc, #220]	; (80031ec <HAL_RCC_OscConfig+0x4ec>)
 8003110:	2201      	movs	r2, #1
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7ff fa22 	bl	800255c <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311c:	f7ff fa1e 	bl	800255c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e056      	b.n	80031dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312e:	4b2e      	ldr	r3, [pc, #184]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0x41c>
 800313a:	e04e      	b.n	80031da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313c:	4b2b      	ldr	r3, [pc, #172]	; (80031ec <HAL_RCC_OscConfig+0x4ec>)
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003142:	f7ff fa0b 	bl	800255c <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314a:	f7ff fa07 	bl	800255c <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e03f      	b.n	80031dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315c:	4b22      	ldr	r3, [pc, #136]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f0      	bne.n	800314a <HAL_RCC_OscConfig+0x44a>
 8003168:	e037      	b.n	80031da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e032      	b.n	80031dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003176:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <HAL_RCC_OscConfig+0x4e8>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d028      	beq.n	80031d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800318e:	429a      	cmp	r2, r3
 8003190:	d121      	bne.n	80031d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d11a      	bne.n	80031d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031a6:	4013      	ands	r3, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d111      	bne.n	80031d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	3b01      	subs	r3, #1
 80031c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d107      	bne.n	80031d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d001      	beq.n	80031da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40007000 	.word	0x40007000
 80031e8:	40023800 	.word	0x40023800
 80031ec:	42470060 	.word	0x42470060

080031f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0cc      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003204:	4b68      	ldr	r3, [pc, #416]	; (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d90c      	bls.n	800322c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003212:	4b65      	ldr	r3, [pc, #404]	; (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321a:	4b63      	ldr	r3, [pc, #396]	; (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d001      	beq.n	800322c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0b8      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d020      	beq.n	800327a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003244:	4b59      	ldr	r3, [pc, #356]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4a58      	ldr	r2, [pc, #352]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800324e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800325c:	4b53      	ldr	r3, [pc, #332]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4a52      	ldr	r2, [pc, #328]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003268:	4b50      	ldr	r3, [pc, #320]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	494d      	ldr	r1, [pc, #308]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d044      	beq.n	8003310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d107      	bne.n	800329e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	4b47      	ldr	r3, [pc, #284]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d119      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e07f      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d003      	beq.n	80032ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d107      	bne.n	80032be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ae:	4b3f      	ldr	r3, [pc, #252]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e06f      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032be:	4b3b      	ldr	r3, [pc, #236]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e067      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ce:	4b37      	ldr	r3, [pc, #220]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f023 0203 	bic.w	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4934      	ldr	r1, [pc, #208]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e0:	f7ff f93c 	bl	800255c <HAL_GetTick>
 80032e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e8:	f7ff f938 	bl	800255c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e04f      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	4b2b      	ldr	r3, [pc, #172]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 020c 	and.w	r2, r3, #12
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	429a      	cmp	r2, r3
 800330e:	d1eb      	bne.n	80032e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003310:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d20c      	bcs.n	8003338 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4b22      	ldr	r3, [pc, #136]	; (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b20      	ldr	r3, [pc, #128]	; (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e032      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003344:	4b19      	ldr	r3, [pc, #100]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4916      	ldr	r1, [pc, #88]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003362:	4b12      	ldr	r3, [pc, #72]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	490e      	ldr	r1, [pc, #56]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	4313      	orrs	r3, r2
 8003374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003376:	f000 f821 	bl	80033bc <HAL_RCC_GetSysClockFreq>
 800337a:	4602      	mov	r2, r0
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	490a      	ldr	r1, [pc, #40]	; (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003388:	5ccb      	ldrb	r3, [r1, r3]
 800338a:	fa22 f303 	lsr.w	r3, r2, r3
 800338e:	4a09      	ldr	r2, [pc, #36]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003392:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe ff30 	bl	80021fc <HAL_InitTick>

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40023c00 	.word	0x40023c00
 80033ac:	40023800 	.word	0x40023800
 80033b0:	08008118 	.word	0x08008118
 80033b4:	20000000 	.word	0x20000000
 80033b8:	20000004 	.word	0x20000004

080033bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033bc:	b5b0      	push	{r4, r5, r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033c2:	2100      	movs	r1, #0
 80033c4:	6079      	str	r1, [r7, #4]
 80033c6:	2100      	movs	r1, #0
 80033c8:	60f9      	str	r1, [r7, #12]
 80033ca:	2100      	movs	r1, #0
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80033ce:	2100      	movs	r1, #0
 80033d0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d2:	4952      	ldr	r1, [pc, #328]	; (800351c <HAL_RCC_GetSysClockFreq+0x160>)
 80033d4:	6889      	ldr	r1, [r1, #8]
 80033d6:	f001 010c 	and.w	r1, r1, #12
 80033da:	2908      	cmp	r1, #8
 80033dc:	d00d      	beq.n	80033fa <HAL_RCC_GetSysClockFreq+0x3e>
 80033de:	2908      	cmp	r1, #8
 80033e0:	f200 8094 	bhi.w	800350c <HAL_RCC_GetSysClockFreq+0x150>
 80033e4:	2900      	cmp	r1, #0
 80033e6:	d002      	beq.n	80033ee <HAL_RCC_GetSysClockFreq+0x32>
 80033e8:	2904      	cmp	r1, #4
 80033ea:	d003      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x38>
 80033ec:	e08e      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033ee:	4b4c      	ldr	r3, [pc, #304]	; (8003520 <HAL_RCC_GetSysClockFreq+0x164>)
 80033f0:	60bb      	str	r3, [r7, #8]
       break;
 80033f2:	e08e      	b.n	8003512 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033f4:	4b4b      	ldr	r3, [pc, #300]	; (8003524 <HAL_RCC_GetSysClockFreq+0x168>)
 80033f6:	60bb      	str	r3, [r7, #8]
      break;
 80033f8:	e08b      	b.n	8003512 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033fa:	4948      	ldr	r1, [pc, #288]	; (800351c <HAL_RCC_GetSysClockFreq+0x160>)
 80033fc:	6849      	ldr	r1, [r1, #4]
 80033fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003402:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003404:	4945      	ldr	r1, [pc, #276]	; (800351c <HAL_RCC_GetSysClockFreq+0x160>)
 8003406:	6849      	ldr	r1, [r1, #4]
 8003408:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800340c:	2900      	cmp	r1, #0
 800340e:	d024      	beq.n	800345a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003410:	4942      	ldr	r1, [pc, #264]	; (800351c <HAL_RCC_GetSysClockFreq+0x160>)
 8003412:	6849      	ldr	r1, [r1, #4]
 8003414:	0989      	lsrs	r1, r1, #6
 8003416:	4608      	mov	r0, r1
 8003418:	f04f 0100 	mov.w	r1, #0
 800341c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003420:	f04f 0500 	mov.w	r5, #0
 8003424:	ea00 0204 	and.w	r2, r0, r4
 8003428:	ea01 0305 	and.w	r3, r1, r5
 800342c:	493d      	ldr	r1, [pc, #244]	; (8003524 <HAL_RCC_GetSysClockFreq+0x168>)
 800342e:	fb01 f003 	mul.w	r0, r1, r3
 8003432:	2100      	movs	r1, #0
 8003434:	fb01 f102 	mul.w	r1, r1, r2
 8003438:	1844      	adds	r4, r0, r1
 800343a:	493a      	ldr	r1, [pc, #232]	; (8003524 <HAL_RCC_GetSysClockFreq+0x168>)
 800343c:	fba2 0101 	umull	r0, r1, r2, r1
 8003440:	1863      	adds	r3, r4, r1
 8003442:	4619      	mov	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	461a      	mov	r2, r3
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	f7fd fb16 	bl	8000a7c <__aeabi_uldivmod>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4613      	mov	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e04a      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800345a:	4b30      	ldr	r3, [pc, #192]	; (800351c <HAL_RCC_GetSysClockFreq+0x160>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	099b      	lsrs	r3, r3, #6
 8003460:	461a      	mov	r2, r3
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	f240 10ff 	movw	r0, #511	; 0x1ff
 800346a:	f04f 0100 	mov.w	r1, #0
 800346e:	ea02 0400 	and.w	r4, r2, r0
 8003472:	ea03 0501 	and.w	r5, r3, r1
 8003476:	4620      	mov	r0, r4
 8003478:	4629      	mov	r1, r5
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	014b      	lsls	r3, r1, #5
 8003484:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003488:	0142      	lsls	r2, r0, #5
 800348a:	4610      	mov	r0, r2
 800348c:	4619      	mov	r1, r3
 800348e:	1b00      	subs	r0, r0, r4
 8003490:	eb61 0105 	sbc.w	r1, r1, r5
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	018b      	lsls	r3, r1, #6
 800349e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034a2:	0182      	lsls	r2, r0, #6
 80034a4:	1a12      	subs	r2, r2, r0
 80034a6:	eb63 0301 	sbc.w	r3, r3, r1
 80034aa:	f04f 0000 	mov.w	r0, #0
 80034ae:	f04f 0100 	mov.w	r1, #0
 80034b2:	00d9      	lsls	r1, r3, #3
 80034b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034b8:	00d0      	lsls	r0, r2, #3
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	1912      	adds	r2, r2, r4
 80034c0:	eb45 0303 	adc.w	r3, r5, r3
 80034c4:	f04f 0000 	mov.w	r0, #0
 80034c8:	f04f 0100 	mov.w	r1, #0
 80034cc:	0299      	lsls	r1, r3, #10
 80034ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034d2:	0290      	lsls	r0, r2, #10
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	461a      	mov	r2, r3
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	f7fd faca 	bl	8000a7c <__aeabi_uldivmod>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4613      	mov	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034f0:	4b0a      	ldr	r3, [pc, #40]	; (800351c <HAL_RCC_GetSysClockFreq+0x160>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	0c1b      	lsrs	r3, r3, #16
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	3301      	adds	r3, #1
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	fbb2 f3f3 	udiv	r3, r2, r3
 8003508:	60bb      	str	r3, [r7, #8]
      break;
 800350a:	e002      	b.n	8003512 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <HAL_RCC_GetSysClockFreq+0x164>)
 800350e:	60bb      	str	r3, [r7, #8]
      break;
 8003510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003512:	68bb      	ldr	r3, [r7, #8]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bdb0      	pop	{r4, r5, r7, pc}
 800351c:	40023800 	.word	0x40023800
 8003520:	00f42400 	.word	0x00f42400
 8003524:	017d7840 	.word	0x017d7840

08003528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <HAL_RCC_GetHCLKFreq+0x14>)
 800352e:	681b      	ldr	r3, [r3, #0]
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20000000 	.word	0x20000000

08003540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003544:	f7ff fff0 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8003548:	4602      	mov	r2, r0
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	0a9b      	lsrs	r3, r3, #10
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	4903      	ldr	r1, [pc, #12]	; (8003564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003556:	5ccb      	ldrb	r3, [r1, r3]
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800355c:	4618      	mov	r0, r3
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40023800 	.word	0x40023800
 8003564:	08008128 	.word	0x08008128

08003568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800356c:	f7ff ffdc 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8003570:	4602      	mov	r2, r0
 8003572:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	0b5b      	lsrs	r3, r3, #13
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	4903      	ldr	r1, [pc, #12]	; (800358c <HAL_RCC_GetPCLK2Freq+0x24>)
 800357e:	5ccb      	ldrb	r3, [r1, r3]
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003584:	4618      	mov	r0, r3
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40023800 	.word	0x40023800
 800358c:	08008128 	.word	0x08008128

08003590 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	220f      	movs	r2, #15
 800359e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035a0:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_RCC_GetClockConfig+0x5c>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 0203 	and.w	r2, r3, #3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035ac:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <HAL_RCC_GetClockConfig+0x5c>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <HAL_RCC_GetClockConfig+0x5c>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80035c4:	4b09      	ldr	r3, [pc, #36]	; (80035ec <HAL_RCC_GetClockConfig+0x5c>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	08db      	lsrs	r3, r3, #3
 80035ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035d2:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <HAL_RCC_GetClockConfig+0x60>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 020f 	and.w	r2, r3, #15
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	601a      	str	r2, [r3, #0]
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40023c00 	.word	0x40023c00

080035f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e041      	b.n	800368a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fe fbf4 	bl	8001e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f000 fc34 	bl	8003ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d001      	beq.n	80036ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e046      	b.n	800373a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a23      	ldr	r2, [pc, #140]	; (8003748 <HAL_TIM_Base_Start+0xb4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d022      	beq.n	8003704 <HAL_TIM_Base_Start+0x70>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c6:	d01d      	beq.n	8003704 <HAL_TIM_Base_Start+0x70>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1f      	ldr	r2, [pc, #124]	; (800374c <HAL_TIM_Base_Start+0xb8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d018      	beq.n	8003704 <HAL_TIM_Base_Start+0x70>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1e      	ldr	r2, [pc, #120]	; (8003750 <HAL_TIM_Base_Start+0xbc>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d013      	beq.n	8003704 <HAL_TIM_Base_Start+0x70>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1c      	ldr	r2, [pc, #112]	; (8003754 <HAL_TIM_Base_Start+0xc0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00e      	beq.n	8003704 <HAL_TIM_Base_Start+0x70>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1b      	ldr	r2, [pc, #108]	; (8003758 <HAL_TIM_Base_Start+0xc4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d009      	beq.n	8003704 <HAL_TIM_Base_Start+0x70>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a19      	ldr	r2, [pc, #100]	; (800375c <HAL_TIM_Base_Start+0xc8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d004      	beq.n	8003704 <HAL_TIM_Base_Start+0x70>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a18      	ldr	r2, [pc, #96]	; (8003760 <HAL_TIM_Base_Start+0xcc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d111      	bne.n	8003728 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b06      	cmp	r3, #6
 8003714:	d010      	beq.n	8003738 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0201 	orr.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003726:	e007      	b.n	8003738 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40010000 	.word	0x40010000
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00
 8003758:	40010400 	.word	0x40010400
 800375c:	40014000 	.word	0x40014000
 8003760:	40001800 	.word	0x40001800

08003764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b01      	cmp	r3, #1
 8003776:	d001      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e04e      	b.n	800381a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a23      	ldr	r2, [pc, #140]	; (8003828 <HAL_TIM_Base_Start_IT+0xc4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d022      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x80>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a6:	d01d      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x80>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1f      	ldr	r2, [pc, #124]	; (800382c <HAL_TIM_Base_Start_IT+0xc8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d018      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x80>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <HAL_TIM_Base_Start_IT+0xcc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d013      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x80>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1c      	ldr	r2, [pc, #112]	; (8003834 <HAL_TIM_Base_Start_IT+0xd0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00e      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x80>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <HAL_TIM_Base_Start_IT+0xd4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d009      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x80>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a19      	ldr	r2, [pc, #100]	; (800383c <HAL_TIM_Base_Start_IT+0xd8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d004      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x80>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a18      	ldr	r2, [pc, #96]	; (8003840 <HAL_TIM_Base_Start_IT+0xdc>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d111      	bne.n	8003808 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b06      	cmp	r3, #6
 80037f4:	d010      	beq.n	8003818 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0201 	orr.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003806:	e007      	b.n	8003818 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40010000 	.word	0x40010000
 800382c:	40000400 	.word	0x40000400
 8003830:	40000800 	.word	0x40000800
 8003834:	40000c00 	.word	0x40000c00
 8003838:	40010400 	.word	0x40010400
 800383c:	40014000 	.word	0x40014000
 8003840:	40001800 	.word	0x40001800

08003844 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e041      	b.n	80038da <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d106      	bne.n	8003870 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f839 	bl	80038e2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3304      	adds	r3, #4
 8003880:	4619      	mov	r1, r3
 8003882:	4610      	mov	r0, r2
 8003884:	f000 fb0c 	bl	8003ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b02      	cmp	r3, #2
 800390a:	d122      	bne.n	8003952 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b02      	cmp	r3, #2
 8003918:	d11b      	bne.n	8003952 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f06f 0202 	mvn.w	r2, #2
 8003922:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fa93 	bl	8003e64 <HAL_TIM_IC_CaptureCallback>
 800393e:	e005      	b.n	800394c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fa85 	bl	8003e50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fa96 	bl	8003e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b04      	cmp	r3, #4
 800395e:	d122      	bne.n	80039a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b04      	cmp	r3, #4
 800396c:	d11b      	bne.n	80039a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f06f 0204 	mvn.w	r2, #4
 8003976:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fa69 	bl	8003e64 <HAL_TIM_IC_CaptureCallback>
 8003992:	e005      	b.n	80039a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fa5b 	bl	8003e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fa6c 	bl	8003e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d122      	bne.n	80039fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d11b      	bne.n	80039fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f06f 0208 	mvn.w	r2, #8
 80039ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2204      	movs	r2, #4
 80039d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fa3f 	bl	8003e64 <HAL_TIM_IC_CaptureCallback>
 80039e6:	e005      	b.n	80039f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fa31 	bl	8003e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fa42 	bl	8003e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	d122      	bne.n	8003a4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	d11b      	bne.n	8003a4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f06f 0210 	mvn.w	r2, #16
 8003a1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2208      	movs	r2, #8
 8003a24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 fa15 	bl	8003e64 <HAL_TIM_IC_CaptureCallback>
 8003a3a:	e005      	b.n	8003a48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fa07 	bl	8003e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fa18 	bl	8003e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d10e      	bne.n	8003a7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d107      	bne.n	8003a7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f06f 0201 	mvn.w	r2, #1
 8003a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7fe f983 	bl	8001d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a84:	2b80      	cmp	r3, #128	; 0x80
 8003a86:	d10e      	bne.n	8003aa6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a92:	2b80      	cmp	r3, #128	; 0x80
 8003a94:	d107      	bne.n	8003aa6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fd79 	bl	8004598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d10e      	bne.n	8003ad2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abe:	2b40      	cmp	r3, #64	; 0x40
 8003ac0:	d107      	bne.n	8003ad2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f9dd 	bl	8003e8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d10e      	bne.n	8003afe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	d107      	bne.n	8003afe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f06f 0220 	mvn.w	r2, #32
 8003af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fd43 	bl	8004584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b086      	sub	sp, #24
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e088      	b.n	8003c36 <HAL_TIM_IC_ConfigChannel+0x130>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d11b      	bne.n	8003b6a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	6819      	ldr	r1, [r3, #0]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f000 fadf 	bl	8004104 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 020c 	bic.w	r2, r2, #12
 8003b54:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6999      	ldr	r1, [r3, #24]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	619a      	str	r2, [r3, #24]
 8003b68:	e060      	b.n	8003c2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d11c      	bne.n	8003baa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	6819      	ldr	r1, [r3, #0]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f000 fb63 	bl	800424a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b92:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6999      	ldr	r1, [r3, #24]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	021a      	lsls	r2, r3, #8
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	619a      	str	r2, [r3, #24]
 8003ba8:	e040      	b.n	8003c2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d11b      	bne.n	8003be8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	6819      	ldr	r1, [r3, #0]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f000 fbb0 	bl	8004324 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69da      	ldr	r2, [r3, #28]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 020c 	bic.w	r2, r2, #12
 8003bd2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69d9      	ldr	r1, [r3, #28]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	61da      	str	r2, [r3, #28]
 8003be6:	e021      	b.n	8003c2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b0c      	cmp	r3, #12
 8003bec:	d11c      	bne.n	8003c28 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6819      	ldr	r1, [r3, #0]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f000 fbcd 	bl	800439c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69da      	ldr	r2, [r3, #28]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c10:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69d9      	ldr	r1, [r3, #28]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	021a      	lsls	r2, r3, #8
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	61da      	str	r2, [r3, #28]
 8003c26:	e001      	b.n	8003c2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_TIM_ConfigClockSource+0x1c>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e0b4      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x186>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2202      	movs	r2, #2
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c78:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c80:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c92:	d03e      	beq.n	8003d12 <HAL_TIM_ConfigClockSource+0xd4>
 8003c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c98:	f200 8087 	bhi.w	8003daa <HAL_TIM_ConfigClockSource+0x16c>
 8003c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca0:	f000 8086 	beq.w	8003db0 <HAL_TIM_ConfigClockSource+0x172>
 8003ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca8:	d87f      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x16c>
 8003caa:	2b70      	cmp	r3, #112	; 0x70
 8003cac:	d01a      	beq.n	8003ce4 <HAL_TIM_ConfigClockSource+0xa6>
 8003cae:	2b70      	cmp	r3, #112	; 0x70
 8003cb0:	d87b      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x16c>
 8003cb2:	2b60      	cmp	r3, #96	; 0x60
 8003cb4:	d050      	beq.n	8003d58 <HAL_TIM_ConfigClockSource+0x11a>
 8003cb6:	2b60      	cmp	r3, #96	; 0x60
 8003cb8:	d877      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x16c>
 8003cba:	2b50      	cmp	r3, #80	; 0x50
 8003cbc:	d03c      	beq.n	8003d38 <HAL_TIM_ConfigClockSource+0xfa>
 8003cbe:	2b50      	cmp	r3, #80	; 0x50
 8003cc0:	d873      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x16c>
 8003cc2:	2b40      	cmp	r3, #64	; 0x40
 8003cc4:	d058      	beq.n	8003d78 <HAL_TIM_ConfigClockSource+0x13a>
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	d86f      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x16c>
 8003cca:	2b30      	cmp	r3, #48	; 0x30
 8003ccc:	d064      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x15a>
 8003cce:	2b30      	cmp	r3, #48	; 0x30
 8003cd0:	d86b      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x16c>
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d060      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x15a>
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d867      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x16c>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d05c      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x15a>
 8003cde:	2b10      	cmp	r3, #16
 8003ce0:	d05a      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x15a>
 8003ce2:	e062      	b.n	8003daa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	6899      	ldr	r1, [r3, #8]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f000 fbaa 	bl	800444c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d06:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	609a      	str	r2, [r3, #8]
      break;
 8003d10:	e04f      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6899      	ldr	r1, [r3, #8]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f000 fb93 	bl	800444c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d34:	609a      	str	r2, [r3, #8]
      break;
 8003d36:	e03c      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	6859      	ldr	r1, [r3, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	461a      	mov	r2, r3
 8003d46:	f000 fa51 	bl	80041ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2150      	movs	r1, #80	; 0x50
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fb60 	bl	8004416 <TIM_ITRx_SetConfig>
      break;
 8003d56:	e02c      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	461a      	mov	r2, r3
 8003d66:	f000 faad 	bl	80042c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2160      	movs	r1, #96	; 0x60
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fb50 	bl	8004416 <TIM_ITRx_SetConfig>
      break;
 8003d76:	e01c      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	6859      	ldr	r1, [r3, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	461a      	mov	r2, r3
 8003d86:	f000 fa31 	bl	80041ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2140      	movs	r1, #64	; 0x40
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fb40 	bl	8004416 <TIM_ITRx_SetConfig>
      break;
 8003d96:	e00c      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4619      	mov	r1, r3
 8003da2:	4610      	mov	r0, r2
 8003da4:	f000 fb37 	bl	8004416 <TIM_ITRx_SetConfig>
      break;
 8003da8:	e003      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
      break;
 8003dae:	e000      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003db0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e031      	b.n	8003e48 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003df4:	6839      	ldr	r1, [r7, #0]
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f8f2 	bl	8003fe0 <TIM_SlaveTimer_SetConfig>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e018      	b.n	8003e48 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e24:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e34:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a40      	ldr	r2, [pc, #256]	; (8003fb4 <TIM_Base_SetConfig+0x114>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d013      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ebe:	d00f      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a3d      	ldr	r2, [pc, #244]	; (8003fb8 <TIM_Base_SetConfig+0x118>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00b      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a3c      	ldr	r2, [pc, #240]	; (8003fbc <TIM_Base_SetConfig+0x11c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d007      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a3b      	ldr	r2, [pc, #236]	; (8003fc0 <TIM_Base_SetConfig+0x120>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a3a      	ldr	r2, [pc, #232]	; (8003fc4 <TIM_Base_SetConfig+0x124>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d108      	bne.n	8003ef2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a2f      	ldr	r2, [pc, #188]	; (8003fb4 <TIM_Base_SetConfig+0x114>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d02b      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f00:	d027      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a2c      	ldr	r2, [pc, #176]	; (8003fb8 <TIM_Base_SetConfig+0x118>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d023      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a2b      	ldr	r2, [pc, #172]	; (8003fbc <TIM_Base_SetConfig+0x11c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01f      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a2a      	ldr	r2, [pc, #168]	; (8003fc0 <TIM_Base_SetConfig+0x120>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d01b      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a29      	ldr	r2, [pc, #164]	; (8003fc4 <TIM_Base_SetConfig+0x124>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d017      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a28      	ldr	r2, [pc, #160]	; (8003fc8 <TIM_Base_SetConfig+0x128>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a27      	ldr	r2, [pc, #156]	; (8003fcc <TIM_Base_SetConfig+0x12c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00f      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a26      	ldr	r2, [pc, #152]	; (8003fd0 <TIM_Base_SetConfig+0x130>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00b      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a25      	ldr	r2, [pc, #148]	; (8003fd4 <TIM_Base_SetConfig+0x134>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d007      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a24      	ldr	r2, [pc, #144]	; (8003fd8 <TIM_Base_SetConfig+0x138>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d003      	beq.n	8003f52 <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a23      	ldr	r2, [pc, #140]	; (8003fdc <TIM_Base_SetConfig+0x13c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d108      	bne.n	8003f64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a0a      	ldr	r2, [pc, #40]	; (8003fb4 <TIM_Base_SetConfig+0x114>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <TIM_Base_SetConfig+0xf8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a0c      	ldr	r2, [pc, #48]	; (8003fc4 <TIM_Base_SetConfig+0x124>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d103      	bne.n	8003fa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	615a      	str	r2, [r3, #20]
}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800
 8003fc0:	40000c00 	.word	0x40000c00
 8003fc4:	40010400 	.word	0x40010400
 8003fc8:	40014000 	.word	0x40014000
 8003fcc:	40014400 	.word	0x40014400
 8003fd0:	40014800 	.word	0x40014800
 8003fd4:	40001800 	.word	0x40001800
 8003fd8:	40001c00 	.word	0x40001c00
 8003fdc:	40002000 	.word	0x40002000

08003fe0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f023 0307 	bic.w	r3, r3, #7
 800400e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b70      	cmp	r3, #112	; 0x70
 8004028:	d01a      	beq.n	8004060 <TIM_SlaveTimer_SetConfig+0x80>
 800402a:	2b70      	cmp	r3, #112	; 0x70
 800402c:	d860      	bhi.n	80040f0 <TIM_SlaveTimer_SetConfig+0x110>
 800402e:	2b60      	cmp	r3, #96	; 0x60
 8004030:	d054      	beq.n	80040dc <TIM_SlaveTimer_SetConfig+0xfc>
 8004032:	2b60      	cmp	r3, #96	; 0x60
 8004034:	d85c      	bhi.n	80040f0 <TIM_SlaveTimer_SetConfig+0x110>
 8004036:	2b50      	cmp	r3, #80	; 0x50
 8004038:	d046      	beq.n	80040c8 <TIM_SlaveTimer_SetConfig+0xe8>
 800403a:	2b50      	cmp	r3, #80	; 0x50
 800403c:	d858      	bhi.n	80040f0 <TIM_SlaveTimer_SetConfig+0x110>
 800403e:	2b40      	cmp	r3, #64	; 0x40
 8004040:	d019      	beq.n	8004076 <TIM_SlaveTimer_SetConfig+0x96>
 8004042:	2b40      	cmp	r3, #64	; 0x40
 8004044:	d854      	bhi.n	80040f0 <TIM_SlaveTimer_SetConfig+0x110>
 8004046:	2b30      	cmp	r3, #48	; 0x30
 8004048:	d055      	beq.n	80040f6 <TIM_SlaveTimer_SetConfig+0x116>
 800404a:	2b30      	cmp	r3, #48	; 0x30
 800404c:	d850      	bhi.n	80040f0 <TIM_SlaveTimer_SetConfig+0x110>
 800404e:	2b20      	cmp	r3, #32
 8004050:	d051      	beq.n	80040f6 <TIM_SlaveTimer_SetConfig+0x116>
 8004052:	2b20      	cmp	r3, #32
 8004054:	d84c      	bhi.n	80040f0 <TIM_SlaveTimer_SetConfig+0x110>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d04d      	beq.n	80040f6 <TIM_SlaveTimer_SetConfig+0x116>
 800405a:	2b10      	cmp	r3, #16
 800405c:	d04b      	beq.n	80040f6 <TIM_SlaveTimer_SetConfig+0x116>
 800405e:	e047      	b.n	80040f0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68d9      	ldr	r1, [r3, #12]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f000 f9ec 	bl	800444c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004074:	e040      	b.n	80040f8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b05      	cmp	r3, #5
 800407c:	d101      	bne.n	8004082 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e03b      	b.n	80040fa <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6a1a      	ldr	r2, [r3, #32]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0201 	bic.w	r2, r2, #1
 8004098:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040a8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	621a      	str	r2, [r3, #32]
      break;
 80040c6:	e017      	b.n	80040f8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	6899      	ldr	r1, [r3, #8]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	461a      	mov	r2, r3
 80040d6:	f000 f889 	bl	80041ec <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80040da:	e00d      	b.n	80040f8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	6899      	ldr	r1, [r3, #8]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	461a      	mov	r2, r3
 80040ea:	f000 f8eb 	bl	80042c4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80040ee:	e003      	b.n	80040f8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	75fb      	strb	r3, [r7, #23]
      break;
 80040f4:	e000      	b.n	80040f8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80040f6:	bf00      	nop
  }

  return status;
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
 8004110:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f023 0201 	bic.w	r2, r3, #1
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4a28      	ldr	r2, [pc, #160]	; (80041d0 <TIM_TI1_SetConfig+0xcc>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01b      	beq.n	800416a <TIM_TI1_SetConfig+0x66>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004138:	d017      	beq.n	800416a <TIM_TI1_SetConfig+0x66>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4a25      	ldr	r2, [pc, #148]	; (80041d4 <TIM_TI1_SetConfig+0xd0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <TIM_TI1_SetConfig+0x66>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4a24      	ldr	r2, [pc, #144]	; (80041d8 <TIM_TI1_SetConfig+0xd4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00f      	beq.n	800416a <TIM_TI1_SetConfig+0x66>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4a23      	ldr	r2, [pc, #140]	; (80041dc <TIM_TI1_SetConfig+0xd8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d00b      	beq.n	800416a <TIM_TI1_SetConfig+0x66>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4a22      	ldr	r2, [pc, #136]	; (80041e0 <TIM_TI1_SetConfig+0xdc>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d007      	beq.n	800416a <TIM_TI1_SetConfig+0x66>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4a21      	ldr	r2, [pc, #132]	; (80041e4 <TIM_TI1_SetConfig+0xe0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d003      	beq.n	800416a <TIM_TI1_SetConfig+0x66>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4a20      	ldr	r2, [pc, #128]	; (80041e8 <TIM_TI1_SetConfig+0xe4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d101      	bne.n	800416e <TIM_TI1_SetConfig+0x6a>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <TIM_TI1_SetConfig+0x6c>
 800416e:	2300      	movs	r3, #0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f023 0303 	bic.w	r3, r3, #3
 800417a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	e003      	b.n	800418e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004194:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	b2db      	uxtb	r3, r3
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f023 030a 	bic.w	r3, r3, #10
 80041a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f003 030a 	and.w	r3, r3, #10
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	621a      	str	r2, [r3, #32]
}
 80041c2:	bf00      	nop
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40010000 	.word	0x40010000
 80041d4:	40000400 	.word	0x40000400
 80041d8:	40000800 	.word	0x40000800
 80041dc:	40000c00 	.word	0x40000c00
 80041e0:	40010400 	.word	0x40010400
 80041e4:	40014000 	.word	0x40014000
 80041e8:	40001800 	.word	0x40001800

080041ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f023 0201 	bic.w	r2, r3, #1
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f023 030a 	bic.w	r3, r3, #10
 8004228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	621a      	str	r2, [r3, #32]
}
 800423e:	bf00      	nop
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800424a:	b480      	push	{r7}
 800424c:	b087      	sub	sp, #28
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	607a      	str	r2, [r7, #4]
 8004256:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	f023 0210 	bic.w	r2, r3, #16
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004276:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004288:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	031b      	lsls	r3, r3, #12
 800428e:	b29b      	uxth	r3, r3
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	4313      	orrs	r3, r2
 8004294:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800429c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	621a      	str	r2, [r3, #32]
}
 80042b8:	bf00      	nop
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	f023 0210 	bic.w	r2, r3, #16
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	031b      	lsls	r3, r3, #12
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004300:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	621a      	str	r2, [r3, #32]
}
 8004318:	bf00      	nop
 800431a:	371c      	adds	r7, #28
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f023 0303 	bic.w	r3, r3, #3
 8004350:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004360:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	b2db      	uxtb	r3, r3
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004374:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	621a      	str	r2, [r3, #32]
}
 8004390:	bf00      	nop
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	021b      	lsls	r3, r3, #8
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	031b      	lsls	r3, r3, #12
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80043ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	031b      	lsls	r3, r3, #12
 80043f4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004416:	b480      	push	{r7}
 8004418:	b085      	sub	sp, #20
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	f043 0307 	orr.w	r3, r3, #7
 8004438:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	609a      	str	r2, [r3, #8]
}
 8004440:	bf00      	nop
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004466:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	021a      	lsls	r2, r3, #8
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	431a      	orrs	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4313      	orrs	r3, r2
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	609a      	str	r2, [r3, #8]
}
 8004480:	bf00      	nop
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e05a      	b.n	800455a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a21      	ldr	r2, [pc, #132]	; (8004568 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d022      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f0:	d01d      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1d      	ldr	r2, [pc, #116]	; (800456c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d018      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a1b      	ldr	r2, [pc, #108]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d013      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a1a      	ldr	r2, [pc, #104]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00e      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a18      	ldr	r2, [pc, #96]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d009      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a17      	ldr	r2, [pc, #92]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a15      	ldr	r2, [pc, #84]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10c      	bne.n	8004548 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	4313      	orrs	r3, r2
 800453e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40010000 	.word	0x40010000
 800456c:	40000400 	.word	0x40000400
 8004570:	40000800 	.word	0x40000800
 8004574:	40000c00 	.word	0x40000c00
 8004578:	40010400 	.word	0x40010400
 800457c:	40014000 	.word	0x40014000
 8004580:	40001800 	.word	0x40001800

08004584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e03f      	b.n	800463e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fd fd26 	bl	8002024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2224      	movs	r2, #36	; 0x24
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fe7d 	bl	80052f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004604:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004614:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004624:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b08a      	sub	sp, #40	; 0x28
 800464a:	af02      	add	r7, sp, #8
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	603b      	str	r3, [r7, #0]
 8004652:	4613      	mov	r3, r2
 8004654:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b20      	cmp	r3, #32
 8004664:	d17c      	bne.n	8004760 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <HAL_UART_Transmit+0x2c>
 800466c:	88fb      	ldrh	r3, [r7, #6]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e075      	b.n	8004762 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_UART_Transmit+0x3e>
 8004680:	2302      	movs	r3, #2
 8004682:	e06e      	b.n	8004762 <HAL_UART_Transmit+0x11c>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2221      	movs	r2, #33	; 0x21
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800469a:	f7fd ff5f 	bl	800255c <HAL_GetTick>
 800469e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	88fa      	ldrh	r2, [r7, #6]
 80046a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	88fa      	ldrh	r2, [r7, #6]
 80046aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b4:	d108      	bne.n	80046c8 <HAL_UART_Transmit+0x82>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d104      	bne.n	80046c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	61bb      	str	r3, [r7, #24]
 80046c6:	e003      	b.n	80046d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80046d8:	e02a      	b.n	8004730 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2200      	movs	r2, #0
 80046e2:	2180      	movs	r1, #128	; 0x80
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 fbc1 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e036      	b.n	8004762 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10b      	bne.n	8004712 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004708:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	3302      	adds	r3, #2
 800470e:	61bb      	str	r3, [r7, #24]
 8004710:	e007      	b.n	8004722 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	781a      	ldrb	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	3301      	adds	r3, #1
 8004720:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004726:	b29b      	uxth	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1cf      	bne.n	80046da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2200      	movs	r2, #0
 8004742:	2140      	movs	r1, #64	; 0x40
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 fb91 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e006      	b.n	8004762 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	e000      	b.n	8004762 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004760:	2302      	movs	r3, #2
  }
}
 8004762:	4618      	mov	r0, r3
 8004764:	3720      	adds	r7, #32
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b08a      	sub	sp, #40	; 0x28
 800476e:	af02      	add	r7, sp, #8
 8004770:	60f8      	str	r0, [r7, #12]
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	603b      	str	r3, [r7, #0]
 8004776:	4613      	mov	r3, r2
 8004778:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b20      	cmp	r3, #32
 8004788:	f040 808c 	bne.w	80048a4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <HAL_UART_Receive+0x2e>
 8004792:	88fb      	ldrh	r3, [r7, #6]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e084      	b.n	80048a6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <HAL_UART_Receive+0x40>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e07d      	b.n	80048a6 <HAL_UART_Receive+0x13c>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2222      	movs	r2, #34	; 0x22
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047c6:	f7fd fec9 	bl	800255c <HAL_GetTick>
 80047ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	88fa      	ldrh	r2, [r7, #6]
 80047d0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	88fa      	ldrh	r2, [r7, #6]
 80047d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e0:	d108      	bne.n	80047f4 <HAL_UART_Receive+0x8a>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d104      	bne.n	80047f4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	61bb      	str	r3, [r7, #24]
 80047f2:	e003      	b.n	80047fc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004804:	e043      	b.n	800488e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2200      	movs	r2, #0
 800480e:	2120      	movs	r1, #32
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 fb2b 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e042      	b.n	80048a6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10c      	bne.n	8004840 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	b29b      	uxth	r3, r3
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	b29a      	uxth	r2, r3
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	3302      	adds	r3, #2
 800483c:	61bb      	str	r3, [r7, #24]
 800483e:	e01f      	b.n	8004880 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004848:	d007      	beq.n	800485a <HAL_UART_Receive+0xf0>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10a      	bne.n	8004868 <HAL_UART_Receive+0xfe>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	b2da      	uxtb	r2, r3
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	e008      	b.n	800487a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004874:	b2da      	uxtb	r2, r3
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3301      	adds	r3, #1
 800487e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1b6      	bne.n	8004806 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	e000      	b.n	80048a6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80048a4:	2302      	movs	r3, #2
  }
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3720      	adds	r7, #32
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	4613      	mov	r3, r2
 80048ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d11d      	bne.n	8004904 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_UART_Receive_IT+0x26>
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e016      	b.n	8004906 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <HAL_UART_Receive_IT+0x38>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e00f      	b.n	8004906 <HAL_UART_Receive_IT+0x58>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80048f4:	88fb      	ldrh	r3, [r7, #6]
 80048f6:	461a      	mov	r2, r3
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fb24 	bl	8004f48 <UART_Start_Receive_IT>
 8004900:	4603      	mov	r3, r0
 8004902:	e000      	b.n	8004906 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004904:	2302      	movs	r3, #2
  }
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b0ba      	sub	sp, #232	; 0xe8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004936:	2300      	movs	r3, #0
 8004938:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800493c:	2300      	movs	r3, #0
 800493e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800494e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10f      	bne.n	8004976 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <HAL_UART_IRQHandler+0x66>
 8004962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fc03 	bl	800517a <UART_Receive_IT>
      return;
 8004974:	e256      	b.n	8004e24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004976:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 80de 	beq.w	8004b3c <HAL_UART_IRQHandler+0x22c>
 8004980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	d106      	bne.n	800499a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800498c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004990:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 80d1 	beq.w	8004b3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800499a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00b      	beq.n	80049be <HAL_UART_IRQHandler+0xae>
 80049a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f043 0201 	orr.w	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00b      	beq.n	80049e2 <HAL_UART_IRQHandler+0xd2>
 80049ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d005      	beq.n	80049e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f043 0202 	orr.w	r2, r3, #2
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <HAL_UART_IRQHandler+0xf6>
 80049ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f043 0204 	orr.w	r2, r3, #4
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d011      	beq.n	8004a36 <HAL_UART_IRQHandler+0x126>
 8004a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d105      	bne.n	8004a2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d005      	beq.n	8004a36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	f043 0208 	orr.w	r2, r3, #8
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 81ed 	beq.w	8004e1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d008      	beq.n	8004a5e <HAL_UART_IRQHandler+0x14e>
 8004a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fb8e 	bl	800517a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	bf0c      	ite	eq
 8004a6c:	2301      	moveq	r3, #1
 8004a6e:	2300      	movne	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d103      	bne.n	8004a8a <HAL_UART_IRQHandler+0x17a>
 8004a82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d04f      	beq.n	8004b2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fa96 	bl	8004fbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9a:	2b40      	cmp	r3, #64	; 0x40
 8004a9c:	d141      	bne.n	8004b22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3314      	adds	r3, #20
 8004aa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ab4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004abc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3314      	adds	r3, #20
 8004ac6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004aca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ace:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ad6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ada:	e841 2300 	strex	r3, r2, [r1]
 8004ade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ae2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1d9      	bne.n	8004a9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d013      	beq.n	8004b1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	4a7d      	ldr	r2, [pc, #500]	; (8004cec <HAL_UART_IRQHandler+0x3dc>)
 8004af8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fd feae 	bl	8002860 <HAL_DMA_Abort_IT>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d016      	beq.n	8004b38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b14:	4610      	mov	r0, r2
 8004b16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b18:	e00e      	b.n	8004b38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f990 	bl	8004e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b20:	e00a      	b.n	8004b38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f98c 	bl	8004e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b28:	e006      	b.n	8004b38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f988 	bl	8004e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b36:	e170      	b.n	8004e1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b38:	bf00      	nop
    return;
 8004b3a:	e16e      	b.n	8004e1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	f040 814a 	bne.w	8004dda <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4a:	f003 0310 	and.w	r3, r3, #16
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 8143 	beq.w	8004dda <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 813c 	beq.w	8004dda <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b62:	2300      	movs	r3, #0
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b82:	2b40      	cmp	r3, #64	; 0x40
 8004b84:	f040 80b4 	bne.w	8004cf0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 8140 	beq.w	8004e1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ba2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	f080 8139 	bcs.w	8004e1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bb2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bbe:	f000 8088 	beq.w	8004cd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	330c      	adds	r3, #12
 8004bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004bd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004be0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	330c      	adds	r3, #12
 8004bea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004bee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004bfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bfe:	e841 2300 	strex	r3, r2, [r1]
 8004c02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1d9      	bne.n	8004bc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3314      	adds	r3, #20
 8004c14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c18:	e853 3f00 	ldrex	r3, [r3]
 8004c1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c20:	f023 0301 	bic.w	r3, r3, #1
 8004c24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3314      	adds	r3, #20
 8004c2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c3e:	e841 2300 	strex	r3, r2, [r1]
 8004c42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1e1      	bne.n	8004c0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3314      	adds	r3, #20
 8004c50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c54:	e853 3f00 	ldrex	r3, [r3]
 8004c58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3314      	adds	r3, #20
 8004c6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e3      	bne.n	8004c4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	330c      	adds	r3, #12
 8004c96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c9a:	e853 3f00 	ldrex	r3, [r3]
 8004c9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ca2:	f023 0310 	bic.w	r3, r3, #16
 8004ca6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	330c      	adds	r3, #12
 8004cb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004cb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8004cb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cbc:	e841 2300 	strex	r3, r2, [r1]
 8004cc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1e3      	bne.n	8004c90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fd fd57 	bl	8002780 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f8b6 	bl	8004e54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ce8:	e099      	b.n	8004e1e <HAL_UART_IRQHandler+0x50e>
 8004cea:	bf00      	nop
 8004cec:	08005083 	.word	0x08005083
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 808b 	beq.w	8004e22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8086 	beq.w	8004e22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	330c      	adds	r3, #12
 8004d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	330c      	adds	r3, #12
 8004d36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d3a:	647a      	str	r2, [r7, #68]	; 0x44
 8004d3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d42:	e841 2300 	strex	r3, r2, [r1]
 8004d46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1e3      	bne.n	8004d16 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3314      	adds	r3, #20
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	f023 0301 	bic.w	r3, r3, #1
 8004d64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3314      	adds	r3, #20
 8004d6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d72:	633a      	str	r2, [r7, #48]	; 0x30
 8004d74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e3      	bne.n	8004d4e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	330c      	adds	r3, #12
 8004d9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	e853 3f00 	ldrex	r3, [r3]
 8004da2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0310 	bic.w	r3, r3, #16
 8004daa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	330c      	adds	r3, #12
 8004db4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004db8:	61fa      	str	r2, [r7, #28]
 8004dba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	69b9      	ldr	r1, [r7, #24]
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	e841 2300 	strex	r3, r2, [r1]
 8004dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e3      	bne.n	8004d94 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f83e 	bl	8004e54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dd8:	e023      	b.n	8004e22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d009      	beq.n	8004dfa <HAL_UART_IRQHandler+0x4ea>
 8004de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f959 	bl	80050aa <UART_Transmit_IT>
    return;
 8004df8:	e014      	b.n	8004e24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00e      	beq.n	8004e24 <HAL_UART_IRQHandler+0x514>
 8004e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d008      	beq.n	8004e24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f999 	bl	800514a <UART_EndTransmit_IT>
    return;
 8004e18:	e004      	b.n	8004e24 <HAL_UART_IRQHandler+0x514>
    return;
 8004e1a:	bf00      	nop
 8004e1c:	e002      	b.n	8004e24 <HAL_UART_IRQHandler+0x514>
      return;
 8004e1e:	bf00      	nop
 8004e20:	e000      	b.n	8004e24 <HAL_UART_IRQHandler+0x514>
      return;
 8004e22:	bf00      	nop
  }
}
 8004e24:	37e8      	adds	r7, #232	; 0xe8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop

08004e2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b090      	sub	sp, #64	; 0x40
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7c:	e050      	b.n	8004f20 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d04c      	beq.n	8004f20 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d007      	beq.n	8004e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e8c:	f7fd fb66 	bl	800255c <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d241      	bcs.n	8004f20 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	330c      	adds	r3, #12
 8004ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	e853 3f00 	ldrex	r3, [r3]
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	330c      	adds	r3, #12
 8004eba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ebc:	637a      	str	r2, [r7, #52]	; 0x34
 8004ebe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ec4:	e841 2300 	strex	r3, r2, [r1]
 8004ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e5      	bne.n	8004e9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3314      	adds	r3, #20
 8004ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	e853 3f00 	ldrex	r3, [r3]
 8004ede:	613b      	str	r3, [r7, #16]
   return(result);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f023 0301 	bic.w	r3, r3, #1
 8004ee6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3314      	adds	r3, #20
 8004eee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ef0:	623a      	str	r2, [r7, #32]
 8004ef2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef4:	69f9      	ldr	r1, [r7, #28]
 8004ef6:	6a3a      	ldr	r2, [r7, #32]
 8004ef8:	e841 2300 	strex	r3, r2, [r1]
 8004efc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e5      	bne.n	8004ed0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e00f      	b.n	8004f40 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	bf0c      	ite	eq
 8004f30:	2301      	moveq	r3, #1
 8004f32:	2300      	movne	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d09f      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3740      	adds	r7, #64	; 0x40
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	4613      	mov	r3, r2
 8004f54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	88fa      	ldrh	r2, [r7, #6]
 8004f60:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	88fa      	ldrh	r2, [r7, #6]
 8004f66:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2222      	movs	r2, #34	; 0x22
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f8c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695a      	ldr	r2, [r3, #20]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0201 	orr.w	r2, r2, #1
 8004f9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f042 0220 	orr.w	r2, r2, #32
 8004fac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b095      	sub	sp, #84	; 0x54
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	330c      	adds	r3, #12
 8004fca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	330c      	adds	r3, #12
 8004fe2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fe4:	643a      	str	r2, [r7, #64]	; 0x40
 8004fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e5      	bne.n	8004fc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3314      	adds	r3, #20
 8004ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	e853 3f00 	ldrex	r3, [r3]
 8005006:	61fb      	str	r3, [r7, #28]
   return(result);
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f023 0301 	bic.w	r3, r3, #1
 800500e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3314      	adds	r3, #20
 8005016:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005018:	62fa      	str	r2, [r7, #44]	; 0x2c
 800501a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800501e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005020:	e841 2300 	strex	r3, r2, [r1]
 8005024:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1e5      	bne.n	8004ff8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005030:	2b01      	cmp	r3, #1
 8005032:	d119      	bne.n	8005068 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	330c      	adds	r3, #12
 800503a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	e853 3f00 	ldrex	r3, [r3]
 8005042:	60bb      	str	r3, [r7, #8]
   return(result);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f023 0310 	bic.w	r3, r3, #16
 800504a:	647b      	str	r3, [r7, #68]	; 0x44
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	330c      	adds	r3, #12
 8005052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005054:	61ba      	str	r2, [r7, #24]
 8005056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005058:	6979      	ldr	r1, [r7, #20]
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	e841 2300 	strex	r3, r2, [r1]
 8005060:	613b      	str	r3, [r7, #16]
   return(result);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1e5      	bne.n	8005034 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005076:	bf00      	nop
 8005078:	3754      	adds	r7, #84	; 0x54
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b084      	sub	sp, #16
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7ff fecf 	bl	8004e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050a2:	bf00      	nop
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b085      	sub	sp, #20
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b21      	cmp	r3, #33	; 0x21
 80050bc:	d13e      	bne.n	800513c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c6:	d114      	bne.n	80050f2 <UART_Transmit_IT+0x48>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d110      	bne.n	80050f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	1c9a      	adds	r2, r3, #2
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	621a      	str	r2, [r3, #32]
 80050f0:	e008      	b.n	8005104 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	1c59      	adds	r1, r3, #1
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6211      	str	r1, [r2, #32]
 80050fc:	781a      	ldrb	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29b      	uxth	r3, r3
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	4619      	mov	r1, r3
 8005112:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10f      	bne.n	8005138 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005126:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005136:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	e000      	b.n	800513e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800513c:	2302      	movs	r3, #2
  }
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005160:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff fe5e 	bl	8004e2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b08c      	sub	sp, #48	; 0x30
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b22      	cmp	r3, #34	; 0x22
 800518c:	f040 80ab 	bne.w	80052e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005198:	d117      	bne.n	80051ca <UART_Receive_IT+0x50>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d113      	bne.n	80051ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	1c9a      	adds	r2, r3, #2
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	629a      	str	r2, [r3, #40]	; 0x28
 80051c8:	e026      	b.n	8005218 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051dc:	d007      	beq.n	80051ee <UART_Receive_IT+0x74>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10a      	bne.n	80051fc <UART_Receive_IT+0x82>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	e008      	b.n	800520e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005208:	b2da      	uxtb	r2, r3
 800520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29b      	uxth	r3, r3
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	4619      	mov	r1, r3
 8005226:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005228:	2b00      	cmp	r3, #0
 800522a:	d15a      	bne.n	80052e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0220 	bic.w	r2, r2, #32
 800523a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800524a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695a      	ldr	r2, [r3, #20]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0201 	bic.w	r2, r2, #1
 800525a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005268:	2b01      	cmp	r3, #1
 800526a:	d135      	bne.n	80052d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	330c      	adds	r3, #12
 8005278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	613b      	str	r3, [r7, #16]
   return(result);
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f023 0310 	bic.w	r3, r3, #16
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	330c      	adds	r3, #12
 8005290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005292:	623a      	str	r2, [r7, #32]
 8005294:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	69f9      	ldr	r1, [r7, #28]
 8005298:	6a3a      	ldr	r2, [r7, #32]
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	61bb      	str	r3, [r7, #24]
   return(result);
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e5      	bne.n	8005272 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0310 	and.w	r3, r3, #16
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d10a      	bne.n	80052ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052ce:	4619      	mov	r1, r3
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff fdbf 	bl	8004e54 <HAL_UARTEx_RxEventCallback>
 80052d6:	e002      	b.n	80052de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7fb fd65 	bl	8000da8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	e002      	b.n	80052e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e000      	b.n	80052e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80052e6:	2302      	movs	r3, #2
  }
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3730      	adds	r7, #48	; 0x30
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f4:	b09f      	sub	sp, #124	; 0x7c
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005306:	68d9      	ldr	r1, [r3, #12]
 8005308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	ea40 0301 	orr.w	r3, r0, r1
 8005310:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	431a      	orrs	r2, r3
 800531c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	431a      	orrs	r2, r3
 8005322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	4313      	orrs	r3, r2
 8005328:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800532a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005334:	f021 010c 	bic.w	r1, r1, #12
 8005338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800533e:	430b      	orrs	r3, r1
 8005340:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800534c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534e:	6999      	ldr	r1, [r3, #24]
 8005350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	ea40 0301 	orr.w	r3, r0, r1
 8005358:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800535a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4bc5      	ldr	r3, [pc, #788]	; (8005674 <UART_SetConfig+0x384>)
 8005360:	429a      	cmp	r2, r3
 8005362:	d004      	beq.n	800536e <UART_SetConfig+0x7e>
 8005364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	4bc3      	ldr	r3, [pc, #780]	; (8005678 <UART_SetConfig+0x388>)
 800536a:	429a      	cmp	r2, r3
 800536c:	d103      	bne.n	8005376 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800536e:	f7fe f8fb 	bl	8003568 <HAL_RCC_GetPCLK2Freq>
 8005372:	6778      	str	r0, [r7, #116]	; 0x74
 8005374:	e002      	b.n	800537c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005376:	f7fe f8e3 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 800537a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800537c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005384:	f040 80b6 	bne.w	80054f4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800538a:	461c      	mov	r4, r3
 800538c:	f04f 0500 	mov.w	r5, #0
 8005390:	4622      	mov	r2, r4
 8005392:	462b      	mov	r3, r5
 8005394:	1891      	adds	r1, r2, r2
 8005396:	6439      	str	r1, [r7, #64]	; 0x40
 8005398:	415b      	adcs	r3, r3
 800539a:	647b      	str	r3, [r7, #68]	; 0x44
 800539c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053a0:	1912      	adds	r2, r2, r4
 80053a2:	eb45 0303 	adc.w	r3, r5, r3
 80053a6:	f04f 0000 	mov.w	r0, #0
 80053aa:	f04f 0100 	mov.w	r1, #0
 80053ae:	00d9      	lsls	r1, r3, #3
 80053b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053b4:	00d0      	lsls	r0, r2, #3
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	1911      	adds	r1, r2, r4
 80053bc:	6639      	str	r1, [r7, #96]	; 0x60
 80053be:	416b      	adcs	r3, r5
 80053c0:	667b      	str	r3, [r7, #100]	; 0x64
 80053c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	461a      	mov	r2, r3
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	1891      	adds	r1, r2, r2
 80053ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80053d0:	415b      	adcs	r3, r3
 80053d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80053dc:	f7fb fb4e 	bl	8000a7c <__aeabi_uldivmod>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4ba5      	ldr	r3, [pc, #660]	; (800567c <UART_SetConfig+0x38c>)
 80053e6:	fba3 2302 	umull	r2, r3, r3, r2
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	011e      	lsls	r6, r3, #4
 80053ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053f0:	461c      	mov	r4, r3
 80053f2:	f04f 0500 	mov.w	r5, #0
 80053f6:	4622      	mov	r2, r4
 80053f8:	462b      	mov	r3, r5
 80053fa:	1891      	adds	r1, r2, r2
 80053fc:	6339      	str	r1, [r7, #48]	; 0x30
 80053fe:	415b      	adcs	r3, r3
 8005400:	637b      	str	r3, [r7, #52]	; 0x34
 8005402:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005406:	1912      	adds	r2, r2, r4
 8005408:	eb45 0303 	adc.w	r3, r5, r3
 800540c:	f04f 0000 	mov.w	r0, #0
 8005410:	f04f 0100 	mov.w	r1, #0
 8005414:	00d9      	lsls	r1, r3, #3
 8005416:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800541a:	00d0      	lsls	r0, r2, #3
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	1911      	adds	r1, r2, r4
 8005422:	65b9      	str	r1, [r7, #88]	; 0x58
 8005424:	416b      	adcs	r3, r5
 8005426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	461a      	mov	r2, r3
 800542e:	f04f 0300 	mov.w	r3, #0
 8005432:	1891      	adds	r1, r2, r2
 8005434:	62b9      	str	r1, [r7, #40]	; 0x28
 8005436:	415b      	adcs	r3, r3
 8005438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800543a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800543e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005442:	f7fb fb1b 	bl	8000a7c <__aeabi_uldivmod>
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	4b8c      	ldr	r3, [pc, #560]	; (800567c <UART_SetConfig+0x38c>)
 800544c:	fba3 1302 	umull	r1, r3, r3, r2
 8005450:	095b      	lsrs	r3, r3, #5
 8005452:	2164      	movs	r1, #100	; 0x64
 8005454:	fb01 f303 	mul.w	r3, r1, r3
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	3332      	adds	r3, #50	; 0x32
 800545e:	4a87      	ldr	r2, [pc, #540]	; (800567c <UART_SetConfig+0x38c>)
 8005460:	fba2 2303 	umull	r2, r3, r2, r3
 8005464:	095b      	lsrs	r3, r3, #5
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800546c:	441e      	add	r6, r3
 800546e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005470:	4618      	mov	r0, r3
 8005472:	f04f 0100 	mov.w	r1, #0
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	1894      	adds	r4, r2, r2
 800547c:	623c      	str	r4, [r7, #32]
 800547e:	415b      	adcs	r3, r3
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
 8005482:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005486:	1812      	adds	r2, r2, r0
 8005488:	eb41 0303 	adc.w	r3, r1, r3
 800548c:	f04f 0400 	mov.w	r4, #0
 8005490:	f04f 0500 	mov.w	r5, #0
 8005494:	00dd      	lsls	r5, r3, #3
 8005496:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800549a:	00d4      	lsls	r4, r2, #3
 800549c:	4622      	mov	r2, r4
 800549e:	462b      	mov	r3, r5
 80054a0:	1814      	adds	r4, r2, r0
 80054a2:	653c      	str	r4, [r7, #80]	; 0x50
 80054a4:	414b      	adcs	r3, r1
 80054a6:	657b      	str	r3, [r7, #84]	; 0x54
 80054a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	461a      	mov	r2, r3
 80054ae:	f04f 0300 	mov.w	r3, #0
 80054b2:	1891      	adds	r1, r2, r2
 80054b4:	61b9      	str	r1, [r7, #24]
 80054b6:	415b      	adcs	r3, r3
 80054b8:	61fb      	str	r3, [r7, #28]
 80054ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80054c2:	f7fb fadb 	bl	8000a7c <__aeabi_uldivmod>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4b6c      	ldr	r3, [pc, #432]	; (800567c <UART_SetConfig+0x38c>)
 80054cc:	fba3 1302 	umull	r1, r3, r3, r2
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	2164      	movs	r1, #100	; 0x64
 80054d4:	fb01 f303 	mul.w	r3, r1, r3
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	3332      	adds	r3, #50	; 0x32
 80054de:	4a67      	ldr	r2, [pc, #412]	; (800567c <UART_SetConfig+0x38c>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	f003 0207 	and.w	r2, r3, #7
 80054ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4432      	add	r2, r6
 80054f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054f2:	e0b9      	b.n	8005668 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054f6:	461c      	mov	r4, r3
 80054f8:	f04f 0500 	mov.w	r5, #0
 80054fc:	4622      	mov	r2, r4
 80054fe:	462b      	mov	r3, r5
 8005500:	1891      	adds	r1, r2, r2
 8005502:	6139      	str	r1, [r7, #16]
 8005504:	415b      	adcs	r3, r3
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800550c:	1912      	adds	r2, r2, r4
 800550e:	eb45 0303 	adc.w	r3, r5, r3
 8005512:	f04f 0000 	mov.w	r0, #0
 8005516:	f04f 0100 	mov.w	r1, #0
 800551a:	00d9      	lsls	r1, r3, #3
 800551c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005520:	00d0      	lsls	r0, r2, #3
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	eb12 0804 	adds.w	r8, r2, r4
 800552a:	eb43 0905 	adc.w	r9, r3, r5
 800552e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	4618      	mov	r0, r3
 8005534:	f04f 0100 	mov.w	r1, #0
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	f04f 0300 	mov.w	r3, #0
 8005540:	008b      	lsls	r3, r1, #2
 8005542:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005546:	0082      	lsls	r2, r0, #2
 8005548:	4640      	mov	r0, r8
 800554a:	4649      	mov	r1, r9
 800554c:	f7fb fa96 	bl	8000a7c <__aeabi_uldivmod>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4b49      	ldr	r3, [pc, #292]	; (800567c <UART_SetConfig+0x38c>)
 8005556:	fba3 2302 	umull	r2, r3, r3, r2
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	011e      	lsls	r6, r3, #4
 800555e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005560:	4618      	mov	r0, r3
 8005562:	f04f 0100 	mov.w	r1, #0
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	1894      	adds	r4, r2, r2
 800556c:	60bc      	str	r4, [r7, #8]
 800556e:	415b      	adcs	r3, r3
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005576:	1812      	adds	r2, r2, r0
 8005578:	eb41 0303 	adc.w	r3, r1, r3
 800557c:	f04f 0400 	mov.w	r4, #0
 8005580:	f04f 0500 	mov.w	r5, #0
 8005584:	00dd      	lsls	r5, r3, #3
 8005586:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800558a:	00d4      	lsls	r4, r2, #3
 800558c:	4622      	mov	r2, r4
 800558e:	462b      	mov	r3, r5
 8005590:	1814      	adds	r4, r2, r0
 8005592:	64bc      	str	r4, [r7, #72]	; 0x48
 8005594:	414b      	adcs	r3, r1
 8005596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	4618      	mov	r0, r3
 800559e:	f04f 0100 	mov.w	r1, #0
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	008b      	lsls	r3, r1, #2
 80055ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055b0:	0082      	lsls	r2, r0, #2
 80055b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80055b6:	f7fb fa61 	bl	8000a7c <__aeabi_uldivmod>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4b2f      	ldr	r3, [pc, #188]	; (800567c <UART_SetConfig+0x38c>)
 80055c0:	fba3 1302 	umull	r1, r3, r3, r2
 80055c4:	095b      	lsrs	r3, r3, #5
 80055c6:	2164      	movs	r1, #100	; 0x64
 80055c8:	fb01 f303 	mul.w	r3, r1, r3
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	3332      	adds	r3, #50	; 0x32
 80055d2:	4a2a      	ldr	r2, [pc, #168]	; (800567c <UART_SetConfig+0x38c>)
 80055d4:	fba2 2303 	umull	r2, r3, r2, r3
 80055d8:	095b      	lsrs	r3, r3, #5
 80055da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055de:	441e      	add	r6, r3
 80055e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055e2:	4618      	mov	r0, r3
 80055e4:	f04f 0100 	mov.w	r1, #0
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	1894      	adds	r4, r2, r2
 80055ee:	603c      	str	r4, [r7, #0]
 80055f0:	415b      	adcs	r3, r3
 80055f2:	607b      	str	r3, [r7, #4]
 80055f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055f8:	1812      	adds	r2, r2, r0
 80055fa:	eb41 0303 	adc.w	r3, r1, r3
 80055fe:	f04f 0400 	mov.w	r4, #0
 8005602:	f04f 0500 	mov.w	r5, #0
 8005606:	00dd      	lsls	r5, r3, #3
 8005608:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800560c:	00d4      	lsls	r4, r2, #3
 800560e:	4622      	mov	r2, r4
 8005610:	462b      	mov	r3, r5
 8005612:	eb12 0a00 	adds.w	sl, r2, r0
 8005616:	eb43 0b01 	adc.w	fp, r3, r1
 800561a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	4618      	mov	r0, r3
 8005620:	f04f 0100 	mov.w	r1, #0
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	f04f 0300 	mov.w	r3, #0
 800562c:	008b      	lsls	r3, r1, #2
 800562e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005632:	0082      	lsls	r2, r0, #2
 8005634:	4650      	mov	r0, sl
 8005636:	4659      	mov	r1, fp
 8005638:	f7fb fa20 	bl	8000a7c <__aeabi_uldivmod>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	4b0e      	ldr	r3, [pc, #56]	; (800567c <UART_SetConfig+0x38c>)
 8005642:	fba3 1302 	umull	r1, r3, r3, r2
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	2164      	movs	r1, #100	; 0x64
 800564a:	fb01 f303 	mul.w	r3, r1, r3
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	3332      	adds	r3, #50	; 0x32
 8005654:	4a09      	ldr	r2, [pc, #36]	; (800567c <UART_SetConfig+0x38c>)
 8005656:	fba2 2303 	umull	r2, r3, r2, r3
 800565a:	095b      	lsrs	r3, r3, #5
 800565c:	f003 020f 	and.w	r2, r3, #15
 8005660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4432      	add	r2, r6
 8005666:	609a      	str	r2, [r3, #8]
}
 8005668:	bf00      	nop
 800566a:	377c      	adds	r7, #124	; 0x7c
 800566c:	46bd      	mov	sp, r7
 800566e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005672:	bf00      	nop
 8005674:	40011000 	.word	0x40011000
 8005678:	40011400 	.word	0x40011400
 800567c:	51eb851f 	.word	0x51eb851f

08005680 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <SysTick_Handler+0x1c>)
 8005686:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005688:	f000 f9ba 	bl	8005a00 <xTaskGetSchedulerState>
 800568c:	4603      	mov	r3, r0
 800568e:	2b01      	cmp	r3, #1
 8005690:	d001      	beq.n	8005696 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005692:	f000 fa21 	bl	8005ad8 <xPortSysTickHandler>
  }
}
 8005696:	bf00      	nop
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	e000e010 	.word	0xe000e010

080056a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056a6:	f3ef 8305 	mrs	r3, IPSR
 80056aa:	603b      	str	r3, [r7, #0]
  return(result);
 80056ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80056b2:	f06f 0305 	mvn.w	r3, #5
 80056b6:	607b      	str	r3, [r7, #4]
 80056b8:	e00c      	b.n	80056d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80056ba:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <osKernelInitialize+0x44>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d105      	bne.n	80056ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80056c2:	4b08      	ldr	r3, [pc, #32]	; (80056e4 <osKernelInitialize+0x44>)
 80056c4:	2201      	movs	r2, #1
 80056c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	607b      	str	r3, [r7, #4]
 80056cc:	e002      	b.n	80056d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80056ce:	f04f 33ff 	mov.w	r3, #4294967295
 80056d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056d4:	687b      	ldr	r3, [r7, #4]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000500 	.word	0x20000500

080056e8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	601a      	str	r2, [r3, #0]
}
 8005724:	bf00      	nop
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6892      	ldr	r2, [r2, #8]
 8005746:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6852      	ldr	r2, [r2, #4]
 8005750:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	429a      	cmp	r2, r3
 800575a:	d103      	bne.n	8005764 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	1e5a      	subs	r2, r3, #1
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800578e:	4b4f      	ldr	r3, [pc, #316]	; (80058cc <xTaskIncrementTick+0x148>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f040 808f 	bne.w	80058b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005798:	4b4d      	ldr	r3, [pc, #308]	; (80058d0 <xTaskIncrementTick+0x14c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3301      	adds	r3, #1
 800579e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057a0:	4a4b      	ldr	r2, [pc, #300]	; (80058d0 <xTaskIncrementTick+0x14c>)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d120      	bne.n	80057ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80057ac:	4b49      	ldr	r3, [pc, #292]	; (80058d4 <xTaskIncrementTick+0x150>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <xTaskIncrementTick+0x46>
 80057cc:	4b41      	ldr	r3, [pc, #260]	; (80058d4 <xTaskIncrementTick+0x150>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	4b41      	ldr	r3, [pc, #260]	; (80058d8 <xTaskIncrementTick+0x154>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a3f      	ldr	r2, [pc, #252]	; (80058d4 <xTaskIncrementTick+0x150>)
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	4a3f      	ldr	r2, [pc, #252]	; (80058d8 <xTaskIncrementTick+0x154>)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	4b3e      	ldr	r3, [pc, #248]	; (80058dc <xTaskIncrementTick+0x158>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3301      	adds	r3, #1
 80057e6:	4a3d      	ldr	r2, [pc, #244]	; (80058dc <xTaskIncrementTick+0x158>)
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	f000 f8e9 	bl	80059c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057ee:	4b3c      	ldr	r3, [pc, #240]	; (80058e0 <xTaskIncrementTick+0x15c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d349      	bcc.n	800588c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057f8:	4b36      	ldr	r3, [pc, #216]	; (80058d4 <xTaskIncrementTick+0x150>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d104      	bne.n	800580c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005802:	4b37      	ldr	r3, [pc, #220]	; (80058e0 <xTaskIncrementTick+0x15c>)
 8005804:	f04f 32ff 	mov.w	r2, #4294967295
 8005808:	601a      	str	r2, [r3, #0]
					break;
 800580a:	e03f      	b.n	800588c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800580c:	4b31      	ldr	r3, [pc, #196]	; (80058d4 <xTaskIncrementTick+0x150>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	429a      	cmp	r2, r3
 8005822:	d203      	bcs.n	800582c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005824:	4a2e      	ldr	r2, [pc, #184]	; (80058e0 <xTaskIncrementTick+0x15c>)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800582a:	e02f      	b.n	800588c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	3304      	adds	r3, #4
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff ff7d 	bl	8005730 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	2b00      	cmp	r3, #0
 800583c:	d004      	beq.n	8005848 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	3318      	adds	r3, #24
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff ff74 	bl	8005730 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584c:	4b25      	ldr	r3, [pc, #148]	; (80058e4 <xTaskIncrementTick+0x160>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	429a      	cmp	r2, r3
 8005852:	d903      	bls.n	800585c <xTaskIncrementTick+0xd8>
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	4a22      	ldr	r2, [pc, #136]	; (80058e4 <xTaskIncrementTick+0x160>)
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4a1f      	ldr	r2, [pc, #124]	; (80058e8 <xTaskIncrementTick+0x164>)
 800586a:	441a      	add	r2, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	3304      	adds	r3, #4
 8005870:	4619      	mov	r1, r3
 8005872:	4610      	mov	r0, r2
 8005874:	f7ff ff38 	bl	80056e8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587c:	4b1b      	ldr	r3, [pc, #108]	; (80058ec <xTaskIncrementTick+0x168>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005882:	429a      	cmp	r2, r3
 8005884:	d3b8      	bcc.n	80057f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005886:	2301      	movs	r3, #1
 8005888:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800588a:	e7b5      	b.n	80057f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800588c:	4b17      	ldr	r3, [pc, #92]	; (80058ec <xTaskIncrementTick+0x168>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005892:	4915      	ldr	r1, [pc, #84]	; (80058e8 <xTaskIncrementTick+0x164>)
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	440b      	add	r3, r1
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d901      	bls.n	80058a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80058a4:	2301      	movs	r3, #1
 80058a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058a8:	4b11      	ldr	r3, [pc, #68]	; (80058f0 <xTaskIncrementTick+0x16c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d007      	beq.n	80058c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80058b0:	2301      	movs	r3, #1
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	e004      	b.n	80058c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058b6:	4b0f      	ldr	r3, [pc, #60]	; (80058f4 <xTaskIncrementTick+0x170>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3301      	adds	r3, #1
 80058bc:	4a0d      	ldr	r2, [pc, #52]	; (80058f4 <xTaskIncrementTick+0x170>)
 80058be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058c0:	697b      	ldr	r3, [r7, #20]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	2000098c 	.word	0x2000098c
 80058d0:	20000970 	.word	0x20000970
 80058d4:	20000968 	.word	0x20000968
 80058d8:	2000096c 	.word	0x2000096c
 80058dc:	20000984 	.word	0x20000984
 80058e0:	20000988 	.word	0x20000988
 80058e4:	20000974 	.word	0x20000974
 80058e8:	20000508 	.word	0x20000508
 80058ec:	20000504 	.word	0x20000504
 80058f0:	20000980 	.word	0x20000980
 80058f4:	2000097c 	.word	0x2000097c

080058f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058fe:	4b2a      	ldr	r3, [pc, #168]	; (80059a8 <vTaskSwitchContext+0xb0>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005906:	4b29      	ldr	r3, [pc, #164]	; (80059ac <vTaskSwitchContext+0xb4>)
 8005908:	2201      	movs	r2, #1
 800590a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800590c:	e046      	b.n	800599c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800590e:	4b27      	ldr	r3, [pc, #156]	; (80059ac <vTaskSwitchContext+0xb4>)
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005914:	4b26      	ldr	r3, [pc, #152]	; (80059b0 <vTaskSwitchContext+0xb8>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	e010      	b.n	800593e <vTaskSwitchContext+0x46>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10a      	bne.n	8005938 <vTaskSwitchContext+0x40>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	607b      	str	r3, [r7, #4]
}
 8005934:	bf00      	nop
 8005936:	e7fe      	b.n	8005936 <vTaskSwitchContext+0x3e>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3b01      	subs	r3, #1
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	491d      	ldr	r1, [pc, #116]	; (80059b4 <vTaskSwitchContext+0xbc>)
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	440b      	add	r3, r1
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0e4      	beq.n	800591c <vTaskSwitchContext+0x24>
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4a15      	ldr	r2, [pc, #84]	; (80059b4 <vTaskSwitchContext+0xbc>)
 800595e:	4413      	add	r3, r2
 8005960:	60bb      	str	r3, [r7, #8]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	605a      	str	r2, [r3, #4]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	3308      	adds	r3, #8
 8005974:	429a      	cmp	r2, r3
 8005976:	d104      	bne.n	8005982 <vTaskSwitchContext+0x8a>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	605a      	str	r2, [r3, #4]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	4a0b      	ldr	r2, [pc, #44]	; (80059b8 <vTaskSwitchContext+0xc0>)
 800598a:	6013      	str	r3, [r2, #0]
 800598c:	4a08      	ldr	r2, [pc, #32]	; (80059b0 <vTaskSwitchContext+0xb8>)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005992:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <vTaskSwitchContext+0xc0>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3354      	adds	r3, #84	; 0x54
 8005998:	4a08      	ldr	r2, [pc, #32]	; (80059bc <vTaskSwitchContext+0xc4>)
 800599a:	6013      	str	r3, [r2, #0]
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	2000098c 	.word	0x2000098c
 80059ac:	20000980 	.word	0x20000980
 80059b0:	20000974 	.word	0x20000974
 80059b4:	20000508 	.word	0x20000508
 80059b8:	20000504 	.word	0x20000504
 80059bc:	200001f4 	.word	0x200001f4

080059c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059c6:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <prvResetNextTaskUnblockTime+0x38>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d104      	bne.n	80059da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059d0:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <prvResetNextTaskUnblockTime+0x3c>)
 80059d2:	f04f 32ff 	mov.w	r2, #4294967295
 80059d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059d8:	e008      	b.n	80059ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059da:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <prvResetNextTaskUnblockTime+0x38>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	4a04      	ldr	r2, [pc, #16]	; (80059fc <prvResetNextTaskUnblockTime+0x3c>)
 80059ea:	6013      	str	r3, [r2, #0]
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	20000968 	.word	0x20000968
 80059fc:	20000988 	.word	0x20000988

08005a00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a06:	4b0b      	ldr	r3, [pc, #44]	; (8005a34 <xTaskGetSchedulerState+0x34>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d102      	bne.n	8005a14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	607b      	str	r3, [r7, #4]
 8005a12:	e008      	b.n	8005a26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a14:	4b08      	ldr	r3, [pc, #32]	; (8005a38 <xTaskGetSchedulerState+0x38>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d102      	bne.n	8005a22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	607b      	str	r3, [r7, #4]
 8005a20:	e001      	b.n	8005a26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a22:	2300      	movs	r3, #0
 8005a24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a26:	687b      	ldr	r3, [r7, #4]
	}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	20000978 	.word	0x20000978
 8005a38:	2000098c 	.word	0x2000098c
 8005a3c:	00000000 	.word	0x00000000

08005a40 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a40:	4b07      	ldr	r3, [pc, #28]	; (8005a60 <pxCurrentTCBConst2>)
 8005a42:	6819      	ldr	r1, [r3, #0]
 8005a44:	6808      	ldr	r0, [r1, #0]
 8005a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4a:	f380 8809 	msr	PSP, r0
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f04f 0000 	mov.w	r0, #0
 8005a56:	f380 8811 	msr	BASEPRI, r0
 8005a5a:	4770      	bx	lr
 8005a5c:	f3af 8000 	nop.w

08005a60 <pxCurrentTCBConst2>:
 8005a60:	20000504 	.word	0x20000504
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop
	...

08005a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a70:	f3ef 8009 	mrs	r0, PSP
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	4b15      	ldr	r3, [pc, #84]	; (8005ad0 <pxCurrentTCBConst>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	f01e 0f10 	tst.w	lr, #16
 8005a80:	bf08      	it	eq
 8005a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8a:	6010      	str	r0, [r2, #0]
 8005a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a94:	f380 8811 	msr	BASEPRI, r0
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f7ff ff2a 	bl	80058f8 <vTaskSwitchContext>
 8005aa4:	f04f 0000 	mov.w	r0, #0
 8005aa8:	f380 8811 	msr	BASEPRI, r0
 8005aac:	bc09      	pop	{r0, r3}
 8005aae:	6819      	ldr	r1, [r3, #0]
 8005ab0:	6808      	ldr	r0, [r1, #0]
 8005ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab6:	f01e 0f10 	tst.w	lr, #16
 8005aba:	bf08      	it	eq
 8005abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ac0:	f380 8809 	msr	PSP, r0
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	f3af 8000 	nop.w

08005ad0 <pxCurrentTCBConst>:
 8005ad0:	20000504 	.word	0x20000504
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop

08005ad8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	607b      	str	r3, [r7, #4]
}
 8005af0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005af2:	f7ff fe47 	bl	8005784 <xTaskIncrementTick>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005afc:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <xPortSysTickHandler+0x40>)
 8005afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	2300      	movs	r3, #0
 8005b06:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b10:	bf00      	nop
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	e000ed04 	.word	0xe000ed04

08005b1c <init_powderMachine>:




bool init_powderMachine(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
//	 powder motor direction must be fixed!
	// init DCpowder motor direction & disable motor
	for(uint8_t i = 0; i<sizeof(PD_DCpowder_GPIO_Port) / sizeof(PD_DCpowder_GPIO_Port[0]); i++){
 8005b22:	2300      	movs	r3, #0
 8005b24:	71fb      	strb	r3, [r7, #7]
 8005b26:	e045      	b.n	8005bb4 <init_powderMachine+0x98>
		HAL_GPIO_WritePin(PD_DCpowder_GPIO_Port[i][IN1], PD_DCpowder_Pin[i][IN1], GPIO_PIN_RESET);
 8005b28:	79fa      	ldrb	r2, [r7, #7]
 8005b2a:	496d      	ldr	r1, [pc, #436]	; (8005ce0 <init_powderMachine+0x1c4>)
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	440b      	add	r3, r1
 8005b36:	3304      	adds	r3, #4
 8005b38:	6818      	ldr	r0, [r3, #0]
 8005b3a:	79fa      	ldrb	r2, [r7, #7]
 8005b3c:	4969      	ldr	r1, [pc, #420]	; (8005ce4 <init_powderMachine+0x1c8>)
 8005b3e:	4613      	mov	r3, r2
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	440b      	add	r3, r1
 8005b48:	3304      	adds	r3, #4
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2200      	movs	r2, #0
 8005b50:	4619      	mov	r1, r3
 8005b52:	f7fd f86b 	bl	8002c2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCpowder_GPIO_Port[i][IN2], PD_DCpowder_Pin[i][IN2], GPIO_PIN_SET);
 8005b56:	79fa      	ldrb	r2, [r7, #7]
 8005b58:	4961      	ldr	r1, [pc, #388]	; (8005ce0 <init_powderMachine+0x1c4>)
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	3308      	adds	r3, #8
 8005b66:	6818      	ldr	r0, [r3, #0]
 8005b68:	79fa      	ldrb	r2, [r7, #7]
 8005b6a:	495e      	ldr	r1, [pc, #376]	; (8005ce4 <init_powderMachine+0x1c8>)
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	440b      	add	r3, r1
 8005b76:	3308      	adds	r3, #8
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	4619      	mov	r1, r3
 8005b80:	f7fd f854 	bl	8002c2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCpowder_GPIO_Port[i][EN], PD_DCpowder_Pin[i][EN], GPIO_PIN_RESET);
 8005b84:	79fa      	ldrb	r2, [r7, #7]
 8005b86:	4956      	ldr	r1, [pc, #344]	; (8005ce0 <init_powderMachine+0x1c4>)
 8005b88:	4613      	mov	r3, r2
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	440b      	add	r3, r1
 8005b92:	6818      	ldr	r0, [r3, #0]
 8005b94:	79fa      	ldrb	r2, [r7, #7]
 8005b96:	4953      	ldr	r1, [pc, #332]	; (8005ce4 <init_powderMachine+0x1c8>)
 8005b98:	4613      	mov	r3, r2
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	4619      	mov	r1, r3
 8005baa:	f7fd f83f 	bl	8002c2c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i<sizeof(PD_DCpowder_GPIO_Port) / sizeof(PD_DCpowder_GPIO_Port[0]); i++){
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	71fb      	strb	r3, [r7, #7]
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d9b6      	bls.n	8005b28 <init_powderMachine+0xc>
	}

	// init DCmix motor direction & disable motor
	for(uint8_t i = 0; i<sizeof(PD_DCmix_GPIO_Port) / sizeof(PD_DCmix_GPIO_Port[0]); i++){
 8005bba:	2300      	movs	r3, #0
 8005bbc:	71bb      	strb	r3, [r7, #6]
 8005bbe:	e045      	b.n	8005c4c <init_powderMachine+0x130>
		HAL_GPIO_WritePin(PD_DCmix_GPIO_Port[i][IN1], PD_DCmix_Pin[i][IN1], GPIO_PIN_SET);
 8005bc0:	79ba      	ldrb	r2, [r7, #6]
 8005bc2:	4949      	ldr	r1, [pc, #292]	; (8005ce8 <init_powderMachine+0x1cc>)
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	440b      	add	r3, r1
 8005bce:	3304      	adds	r3, #4
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	79ba      	ldrb	r2, [r7, #6]
 8005bd4:	4945      	ldr	r1, [pc, #276]	; (8005cec <init_powderMachine+0x1d0>)
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	440b      	add	r3, r1
 8005be0:	3304      	adds	r3, #4
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2201      	movs	r2, #1
 8005be8:	4619      	mov	r1, r3
 8005bea:	f7fd f81f 	bl	8002c2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCmix_GPIO_Port[i][IN2], PD_DCmix_Pin[i][IN2], GPIO_PIN_RESET);
 8005bee:	79ba      	ldrb	r2, [r7, #6]
 8005bf0:	493d      	ldr	r1, [pc, #244]	; (8005ce8 <init_powderMachine+0x1cc>)
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	4413      	add	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	440b      	add	r3, r1
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	79ba      	ldrb	r2, [r7, #6]
 8005c02:	493a      	ldr	r1, [pc, #232]	; (8005cec <init_powderMachine+0x1d0>)
 8005c04:	4613      	mov	r3, r2
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	4413      	add	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	440b      	add	r3, r1
 8005c0e:	3308      	adds	r3, #8
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	2200      	movs	r2, #0
 8005c16:	4619      	mov	r1, r3
 8005c18:	f7fd f808 	bl	8002c2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PD_DCmix_GPIO_Port[i][EN], PD_DCmix_Pin[i][EN], GPIO_PIN_RESET);
 8005c1c:	79ba      	ldrb	r2, [r7, #6]
 8005c1e:	4932      	ldr	r1, [pc, #200]	; (8005ce8 <init_powderMachine+0x1cc>)
 8005c20:	4613      	mov	r3, r2
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	440b      	add	r3, r1
 8005c2a:	6818      	ldr	r0, [r3, #0]
 8005c2c:	79ba      	ldrb	r2, [r7, #6]
 8005c2e:	492f      	ldr	r1, [pc, #188]	; (8005cec <init_powderMachine+0x1d0>)
 8005c30:	4613      	mov	r3, r2
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	4413      	add	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	440b      	add	r3, r1
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	2200      	movs	r2, #0
 8005c40:	4619      	mov	r1, r3
 8005c42:	f7fc fff3 	bl	8002c2c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i<sizeof(PD_DCmix_GPIO_Port) / sizeof(PD_DCmix_GPIO_Port[0]); i++){
 8005c46:	79bb      	ldrb	r3, [r7, #6]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	71bb      	strb	r3, [r7, #6]
 8005c4c:	79bb      	ldrb	r3, [r7, #6]
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d9b6      	bls.n	8005bc0 <init_powderMachine+0xa4>
//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //PD05_heat
//	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //CF01_heat


	// init heater motor direction
	for(uint8_t i = 0; i<sizeof(heat_GPIO_Port) / sizeof(heat_GPIO_Port[0]); i++){
 8005c52:	2300      	movs	r3, #0
 8005c54:	717b      	strb	r3, [r7, #5]
 8005c56:	e030      	b.n	8005cba <init_powderMachine+0x19e>
		HAL_GPIO_WritePin(heat_GPIO_Port[i][IN1], heat_Pin[i][IN1], GPIO_PIN_SET);
 8005c58:	797a      	ldrb	r2, [r7, #5]
 8005c5a:	4925      	ldr	r1, [pc, #148]	; (8005cf0 <init_powderMachine+0x1d4>)
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	4413      	add	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	440b      	add	r3, r1
 8005c66:	3304      	adds	r3, #4
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	797a      	ldrb	r2, [r7, #5]
 8005c6c:	4921      	ldr	r1, [pc, #132]	; (8005cf4 <init_powderMachine+0x1d8>)
 8005c6e:	4613      	mov	r3, r2
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	4413      	add	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	440b      	add	r3, r1
 8005c78:	3304      	adds	r3, #4
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2201      	movs	r2, #1
 8005c80:	4619      	mov	r1, r3
 8005c82:	f7fc ffd3 	bl	8002c2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(heat_GPIO_Port[i][IN2], heat_Pin[i][IN2], GPIO_PIN_RESET);
 8005c86:	797a      	ldrb	r2, [r7, #5]
 8005c88:	4919      	ldr	r1, [pc, #100]	; (8005cf0 <init_powderMachine+0x1d4>)
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	440b      	add	r3, r1
 8005c94:	3308      	adds	r3, #8
 8005c96:	6818      	ldr	r0, [r3, #0]
 8005c98:	797a      	ldrb	r2, [r7, #5]
 8005c9a:	4916      	ldr	r1, [pc, #88]	; (8005cf4 <init_powderMachine+0x1d8>)
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	440b      	add	r3, r1
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2200      	movs	r2, #0
 8005cae:	4619      	mov	r1, r3
 8005cb0:	f7fc ffbc 	bl	8002c2c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i<sizeof(heat_GPIO_Port) / sizeof(heat_GPIO_Port[0]); i++){
 8005cb4:	797b      	ldrb	r3, [r7, #5]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	717b      	strb	r3, [r7, #5]
 8005cba:	797b      	ldrb	r3, [r7, #5]
 8005cbc:	2b05      	cmp	r3, #5
 8005cbe:	d9cb      	bls.n	8005c58 <init_powderMachine+0x13c>
	}

	// fan motor init(stop)
	HAL_GPIO_WritePin(PD_Fan01_relay_GPIO_Port, PD_Fan01_relay_Pin, GPIO_PIN_RESET);	// Relay Open
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	2140      	movs	r1, #64	; 0x40
 8005cc4:	480c      	ldr	r0, [pc, #48]	; (8005cf8 <init_powderMachine+0x1dc>)
 8005cc6:	f7fc ffb1 	bl	8002c2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PD_Fan02_relay_GPIO_Port, PD_Fan02_relay_Pin, GPIO_PIN_RESET);	// Relay Open
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2120      	movs	r1, #32
 8005cce:	480a      	ldr	r0, [pc, #40]	; (8005cf8 <init_powderMachine+0x1dc>)
 8005cd0:	f7fc ffac 	bl	8002c2c <HAL_GPIO_WritePin>

	return true;
 8005cd4:	2301      	movs	r3, #1
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	2000000c 	.word	0x2000000c
 8005ce4:	200000cc 	.word	0x200000cc
 8005ce8:	20000048 	.word	0x20000048
 8005cec:	20000108 	.word	0x20000108
 8005cf0:	20000084 	.word	0x20000084
 8005cf4:	20000144 	.word	0x20000144
 8005cf8:	40020c00 	.word	0x40020c00

08005cfc <run_powderMachine>:
	return true;
}


bool run_powderMachine(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
	// fan motor init(on)
	HAL_GPIO_WritePin(PD_Fan01_relay_GPIO_Port, PD_Fan01_relay_Pin, GPIO_PIN_SET);	// Relay Close
 8005d00:	2201      	movs	r2, #1
 8005d02:	2140      	movs	r1, #64	; 0x40
 8005d04:	4805      	ldr	r0, [pc, #20]	; (8005d1c <run_powderMachine+0x20>)
 8005d06:	f7fc ff91 	bl	8002c2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PD_Fan02_relay_GPIO_Port, PD_Fan02_relay_Pin, GPIO_PIN_SET);	// Relay Close
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	2120      	movs	r1, #32
 8005d0e:	4803      	ldr	r0, [pc, #12]	; (8005d1c <run_powderMachine+0x20>)
 8005d10:	f7fc ff8c 	bl	8002c2c <HAL_GPIO_WritePin>

	return true;
 8005d14:	2301      	movs	r3, #1
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	40020c00 	.word	0x40020c00

08005d20 <cleanPowderMachine>:
//{
//
//}

bool cleanPowderMachine(uint32_t* hot_water_gram, uint32_t* powder_gram)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
	uint32_t water_exit_time[POWDER_NUM] = {0,};//(int)(((hot_water_amout-0.45)/21.1)*1000); // macro function.
 8005d2a:	f107 0308 	add.w	r3, r7, #8
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	605a      	str	r2, [r3, #4]
 8005d34:	609a      	str	r2, [r3, #8]
 8005d36:	60da      	str	r2, [r3, #12]
 8005d38:	611a      	str	r2, [r3, #16]
	uint32_t water_time = 2500;
 8005d3a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8005d3e:	61fb      	str	r3, [r7, #28]
//	HAL_GPIO_WritePin(heat_GPIO_Port[POWDER_MALCHA][EN], heat_Pin[POWDER_MALCHA][EN], GPIO_PIN_SET);
//	HAL_Delay(water_time);
//	HAL_GPIO_WritePin(heat_GPIO_Port[POWDER_MALCHA][EN], heat_Pin[POWDER_MALCHA][EN], GPIO_PIN_RESET);

	// 0. heater on -> pre-wataer
	HAL_GPIO_WritePin(heat_GPIO_Port[POWDER_MILK][EN], heat_Pin[POWDER_MILK][EN], GPIO_PIN_SET);
 8005d40:	4b33      	ldr	r3, [pc, #204]	; (8005e10 <cleanPowderMachine+0xf0>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a33      	ldr	r2, [pc, #204]	; (8005e14 <cleanPowderMachine+0xf4>)
 8005d46:	6812      	ldr	r2, [r2, #0]
 8005d48:	b291      	uxth	r1, r2
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fc ff6d 	bl	8002c2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(heat_GPIO_Port[POWDER_CHOCO][EN], heat_Pin[POWDER_CHOCO][EN], GPIO_PIN_SET);
 8005d52:	4b2f      	ldr	r3, [pc, #188]	; (8005e10 <cleanPowderMachine+0xf0>)
 8005d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d56:	4a2f      	ldr	r2, [pc, #188]	; (8005e14 <cleanPowderMachine+0xf4>)
 8005d58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d5a:	b291      	uxth	r1, r2
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fc ff64 	bl	8002c2c <HAL_GPIO_WritePin>
	HAL_Delay(water_time);
 8005d64:	69f8      	ldr	r0, [r7, #28]
 8005d66:	f7fc fc05 	bl	8002574 <HAL_Delay>

	HAL_GPIO_WritePin(heat_GPIO_Port[POWDER_MILK][EN], heat_Pin[POWDER_MILK][EN], GPIO_PIN_RESET);
 8005d6a:	4b29      	ldr	r3, [pc, #164]	; (8005e10 <cleanPowderMachine+0xf0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a29      	ldr	r2, [pc, #164]	; (8005e14 <cleanPowderMachine+0xf4>)
 8005d70:	6812      	ldr	r2, [r2, #0]
 8005d72:	b291      	uxth	r1, r2
 8005d74:	2200      	movs	r2, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fc ff58 	bl	8002c2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(heat_GPIO_Port[POWDER_CHOCO][EN], heat_Pin[POWDER_CHOCO][EN], GPIO_PIN_RESET);
 8005d7c:	4b24      	ldr	r3, [pc, #144]	; (8005e10 <cleanPowderMachine+0xf0>)
 8005d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d80:	4a24      	ldr	r2, [pc, #144]	; (8005e14 <cleanPowderMachine+0xf4>)
 8005d82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d84:	b291      	uxth	r1, r2
 8005d86:	2200      	movs	r2, #0
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fc ff4f 	bl	8002c2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(heat_GPIO_Port[POWDER_MALCHA][EN], heat_Pin[POWDER_MALCHA][EN], GPIO_PIN_SET);
 8005d8e:	4b20      	ldr	r3, [pc, #128]	; (8005e10 <cleanPowderMachine+0xf0>)
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	4a20      	ldr	r2, [pc, #128]	; (8005e14 <cleanPowderMachine+0xf4>)
 8005d94:	68d2      	ldr	r2, [r2, #12]
 8005d96:	b291      	uxth	r1, r2
 8005d98:	2201      	movs	r2, #1
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fc ff46 	bl	8002c2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(heat_GPIO_Port[POWDER_ICETEA][EN], heat_Pin[POWDER_ICETEA][EN], GPIO_PIN_SET);
 8005da0:	4b1b      	ldr	r3, [pc, #108]	; (8005e10 <cleanPowderMachine+0xf0>)
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	4a1b      	ldr	r2, [pc, #108]	; (8005e14 <cleanPowderMachine+0xf4>)
 8005da6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005da8:	b291      	uxth	r1, r2
 8005daa:	2201      	movs	r2, #1
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fc ff3d 	bl	8002c2c <HAL_GPIO_WritePin>
	HAL_Delay(water_time);
 8005db2:	69f8      	ldr	r0, [r7, #28]
 8005db4:	f7fc fbde 	bl	8002574 <HAL_Delay>

	HAL_GPIO_WritePin(heat_GPIO_Port[POWDER_MALCHA][EN], heat_Pin[POWDER_MALCHA][EN], GPIO_PIN_RESET);
 8005db8:	4b15      	ldr	r3, [pc, #84]	; (8005e10 <cleanPowderMachine+0xf0>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <cleanPowderMachine+0xf4>)
 8005dbe:	68d2      	ldr	r2, [r2, #12]
 8005dc0:	b291      	uxth	r1, r2
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fc ff31 	bl	8002c2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(heat_GPIO_Port[POWDER_ICETEA][EN], heat_Pin[POWDER_ICETEA][EN], GPIO_PIN_RESET);
 8005dca:	4b11      	ldr	r3, [pc, #68]	; (8005e10 <cleanPowderMachine+0xf0>)
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	4a11      	ldr	r2, [pc, #68]	; (8005e14 <cleanPowderMachine+0xf4>)
 8005dd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dd2:	b291      	uxth	r1, r2
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fc ff28 	bl	8002c2c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(heat_GPIO_Port[POWDER_MILKTEA][EN], heat_Pin[POWDER_MILKTEA][EN], GPIO_PIN_SET);
 8005ddc:	4b0c      	ldr	r3, [pc, #48]	; (8005e10 <cleanPowderMachine+0xf0>)
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	4a0c      	ldr	r2, [pc, #48]	; (8005e14 <cleanPowderMachine+0xf4>)
 8005de2:	6992      	ldr	r2, [r2, #24]
 8005de4:	b291      	uxth	r1, r2
 8005de6:	2201      	movs	r2, #1
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fc ff1f 	bl	8002c2c <HAL_GPIO_WritePin>
	HAL_Delay(water_time);
 8005dee:	69f8      	ldr	r0, [r7, #28]
 8005df0:	f7fc fbc0 	bl	8002574 <HAL_Delay>
	HAL_GPIO_WritePin(heat_GPIO_Port[POWDER_MILKTEA][EN], heat_Pin[POWDER_MILKTEA][EN], GPIO_PIN_RESET);
 8005df4:	4b06      	ldr	r3, [pc, #24]	; (8005e10 <cleanPowderMachine+0xf0>)
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	4a06      	ldr	r2, [pc, #24]	; (8005e14 <cleanPowderMachine+0xf4>)
 8005dfa:	6992      	ldr	r2, [r2, #24]
 8005dfc:	b291      	uxth	r1, r2
 8005dfe:	2200      	movs	r2, #0
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fc ff13 	bl	8002c2c <HAL_GPIO_WritePin>

	return true;
 8005e06:	2301      	movs	r3, #1
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3720      	adds	r7, #32
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	20000084 	.word	0x20000084
 8005e14:	20000144 	.word	0x20000144

08005e18 <make_powderbeverage>:

bool make_powderbeverage(uint32_t* hot_water_gram, uint32_t* powder_gram)
{
 8005e18:	b5b0      	push	{r4, r5, r7, lr}
 8005e1a:	b09c      	sub	sp, #112	; 0x70
 8005e1c:	af02      	add	r7, sp, #8
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(PD_Fan01_relay_GPIO_Port, PD_Fan01_relay_Pin, GPIO_PIN_SET);	// Relay Open
 8005e22:	2201      	movs	r2, #1
 8005e24:	2140      	movs	r1, #64	; 0x40
 8005e26:	48b4      	ldr	r0, [pc, #720]	; (80060f8 <make_powderbeverage+0x2e0>)
 8005e28:	f7fc ff00 	bl	8002c2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PD_Fan02_relay_GPIO_Port, PD_Fan02_relay_Pin, GPIO_PIN_SET);	// Relay Open
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	2120      	movs	r1, #32
 8005e30:	48b1      	ldr	r0, [pc, #708]	; (80060f8 <make_powderbeverage+0x2e0>)
 8005e32:	f7fc fefb 	bl	8002c2c <HAL_GPIO_WritePin>

	uint32_t water_exit_time[POWDER_NUM] = {0,};
 8005e36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	605a      	str	r2, [r3, #4]
 8005e40:	609a      	str	r2, [r3, #8]
 8005e42:	60da      	str	r2, [r3, #12]
 8005e44:	611a      	str	r2, [r3, #16]
	uint32_t powder_exit_time[POWDER_NUM] = {0,};
 8005e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	605a      	str	r2, [r3, #4]
 8005e50:	609a      	str	r2, [r3, #8]
 8005e52:	60da      	str	r2, [r3, #12]
 8005e54:	611a      	str	r2, [r3, #16]
	uint32_t water_dutyRate[POWDER_NUM] = {0,};
 8005e56:	f107 0318 	add.w	r3, r7, #24
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	605a      	str	r2, [r3, #4]
 8005e60:	609a      	str	r2, [r3, #8]
 8005e62:	60da      	str	r2, [r3, #12]
 8005e64:	611a      	str	r2, [r3, #16]

	uint8_t recipes_idx[3] = {0};
 8005e66:	4ba5      	ldr	r3, [pc, #660]	; (80060fc <make_powderbeverage+0x2e4>)
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	82bb      	strh	r3, [r7, #20]
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	75bb      	strb	r3, [r7, #22]
	uint32_t powder_max[3] = {0};
 8005e70:	f107 0308 	add.w	r3, r7, #8
 8005e74:	2200      	movs	r2, #0
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	605a      	str	r2, [r3, #4]
 8005e7a:	609a      	str	r2, [r3, #8]
	uint8_t powder_exit_num_holes = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	printf(">> make_powderbeverage !!\n");
 8005e82:	489f      	ldr	r0, [pc, #636]	; (8006100 <make_powderbeverage+0x2e8>)
 8005e84:	f001 fa66 	bl	8007354 <puts>

	for(uint8_t i=0; i<POWDER_NUM; i++){
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005e8e:	e011      	b.n	8005eb4 <make_powderbeverage+0x9c>
		if(powder_gram[i] != 0){
 8005e90:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	4413      	add	r3, r2
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d004      	beq.n	8005eaa <make_powderbeverage+0x92>
			powder_exit_num_holes ++;
 8005ea0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	for(uint8_t i=0; i<POWDER_NUM; i++){
 8005eaa:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005eae:	3301      	adds	r3, #1
 8005eb0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005eb4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	d9e9      	bls.n	8005e90 <make_powderbeverage+0x78>
		}
	}

	printf("powder holes : %d \n", powder_exit_num_holes);
 8005ebc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4890      	ldr	r0, [pc, #576]	; (8006104 <make_powderbeverage+0x2ec>)
 8005ec4:	f001 f9c0 	bl	8007248 <iprintf>

	for(uint8_t i=0; i<POWDER_NUM; i++){
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8005ece:	e017      	b.n	8005f00 <make_powderbeverage+0xe8>
		if(powder_max[0] < powder_gram[i]){
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	6839      	ldr	r1, [r7, #0]
 8005eda:	440b      	add	r3, r1
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d209      	bcs.n	8005ef6 <make_powderbeverage+0xde>
			powder_max[0] = powder_gram[i];
 8005ee2:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	4413      	add	r3, r2
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60bb      	str	r3, [r7, #8]
			recipes_idx[0] = i;
 8005ef0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005ef4:	753b      	strb	r3, [r7, #20]
	for(uint8_t i=0; i<POWDER_NUM; i++){
 8005ef6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005efa:	3301      	adds	r3, #1
 8005efc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8005f00:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d9e3      	bls.n	8005ed0 <make_powderbeverage+0xb8>
		}
	}

	for(uint8_t i=0; i<POWDER_NUM; i++){
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8005f0e:	e01c      	b.n	8005f4a <make_powderbeverage+0x132>
		if((powder_max[1] < powder_gram[i]) && (i != recipes_idx[1])){
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	440b      	add	r3, r1
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d20e      	bcs.n	8005f40 <make_powderbeverage+0x128>
 8005f22:	7d7b      	ldrb	r3, [r7, #21]
 8005f24:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d009      	beq.n	8005f40 <make_powderbeverage+0x128>
			powder_max[1] = powder_gram[i];
 8005f2c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	4413      	add	r3, r2
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60fb      	str	r3, [r7, #12]
			recipes_idx[1] = i;
 8005f3a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8005f3e:	757b      	strb	r3, [r7, #21]
	for(uint8_t i=0; i<POWDER_NUM; i++){
 8005f40:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8005f44:	3301      	adds	r3, #1
 8005f46:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8005f4a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d9de      	bls.n	8005f10 <make_powderbeverage+0xf8>
		}
	}

	for(uint8_t i=0; i<POWDER_NUM; i++){
 8005f52:	2300      	movs	r3, #0
 8005f54:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8005f58:	e021      	b.n	8005f9e <make_powderbeverage+0x186>
		if((powder_max[2] < powder_gram[i]) && (i != recipes_idx[1]) && (i != recipes_idx[2])){
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	6839      	ldr	r1, [r7, #0]
 8005f64:	440b      	add	r3, r1
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d213      	bcs.n	8005f94 <make_powderbeverage+0x17c>
 8005f6c:	7d7b      	ldrb	r3, [r7, #21]
 8005f6e:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d00e      	beq.n	8005f94 <make_powderbeverage+0x17c>
 8005f76:	7dbb      	ldrb	r3, [r7, #22]
 8005f78:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d009      	beq.n	8005f94 <make_powderbeverage+0x17c>
			powder_max[2] = powder_gram[i];
 8005f80:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	4413      	add	r3, r2
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	613b      	str	r3, [r7, #16]
			recipes_idx[2] = i;
 8005f8e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005f92:	75bb      	strb	r3, [r7, #22]
	for(uint8_t i=0; i<POWDER_NUM; i++){
 8005f94:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005f98:	3301      	adds	r3, #1
 8005f9a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8005f9e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d9d9      	bls.n	8005f5a <make_powderbeverage+0x142>
		}
	}

	for(int i=0; i<powder_exit_num_holes; i++){
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005faa:	e00c      	b.n	8005fc6 <make_powderbeverage+0x1ae>
		printf("recipes_idx[%d] : %d \n", i, recipes_idx[i]);
 8005fac:	f107 0214 	add.w	r2, r7, #20
 8005fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fb2:	4413      	add	r3, r2
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005fba:	4853      	ldr	r0, [pc, #332]	; (8006108 <make_powderbeverage+0x2f0>)
 8005fbc:	f001 f944 	bl	8007248 <iprintf>
	for(int i=0; i<powder_exit_num_holes; i++){
 8005fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005fca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	dbed      	blt.n	8005fac <make_powderbeverage+0x194>
	}

	// 0. heater on -> pre-wataer
 	for(uint8_t i=0; i<POWDER_NUM; i++){
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8005fd6:	e049      	b.n	800606c <make_powderbeverage+0x254>
		if(hot_water_gram[i] != 0){
 8005fd8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d03c      	beq.n	8006062 <make_powderbeverage+0x24a>
			water_exit_time[i] = (int)(((hot_water_gram[i]-0.45)/21.1)*1000);
 8005fe8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fa fa8d 	bl	8000514 <__aeabi_ui2d>
 8005ffa:	a33b      	add	r3, pc, #236	; (adr r3, 80060e8 <make_powderbeverage+0x2d0>)
 8005ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006000:	f7fa f94a 	bl	8000298 <__aeabi_dsub>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4610      	mov	r0, r2
 800600a:	4619      	mov	r1, r3
 800600c:	a338      	add	r3, pc, #224	; (adr r3, 80060f0 <make_powderbeverage+0x2d8>)
 800600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006012:	f7fa fc23 	bl	800085c <__aeabi_ddiv>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4610      	mov	r0, r2
 800601c:	4619      	mov	r1, r3
 800601e:	f04f 0200 	mov.w	r2, #0
 8006022:	4b3a      	ldr	r3, [pc, #232]	; (800610c <make_powderbeverage+0x2f4>)
 8006024:	f7fa faf0 	bl	8000608 <__aeabi_dmul>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	4610      	mov	r0, r2
 800602e:	4619      	mov	r1, r3
 8006030:	f7fa fcfc 	bl	8000a2c <__aeabi_d2iz>
 8006034:	4602      	mov	r2, r0
 8006036:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8006040:	440b      	add	r3, r1
 8006042:	f843 2c28 	str.w	r2, [r3, #-40]
			printf("water[%d] : %d\n", i, water_exit_time[i]);
 8006046:	f897 105b 	ldrb.w	r1, [r7, #91]	; 0x5b
 800604a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8006054:	4413      	add	r3, r2
 8006056:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800605a:	461a      	mov	r2, r3
 800605c:	482c      	ldr	r0, [pc, #176]	; (8006110 <make_powderbeverage+0x2f8>)
 800605e:	f001 f8f3 	bl	8007248 <iprintf>
 	for(uint8_t i=0; i<POWDER_NUM; i++){
 8006062:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006066:	3301      	adds	r3, #1
 8006068:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800606c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006070:	2b04      	cmp	r3, #4
 8006072:	d9b1      	bls.n	8005fd8 <make_powderbeverage+0x1c0>

//			HAL_GPIO_WritePin(heat_GPIO_Port[i][EN], heat_Pin[i][EN], GPIO_PIN_SET);

		}
	}
 	HAL_GPIO_WritePin(heat_GPIO_Port[recipes_idx[0]][EN], heat_Pin[recipes_idx[0]][EN], GPIO_PIN_SET);
 8006074:	7d3b      	ldrb	r3, [r7, #20]
 8006076:	4619      	mov	r1, r3
 8006078:	4a26      	ldr	r2, [pc, #152]	; (8006114 <make_powderbeverage+0x2fc>)
 800607a:	460b      	mov	r3, r1
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	440b      	add	r3, r1
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	6818      	ldr	r0, [r3, #0]
 8006086:	7d3b      	ldrb	r3, [r7, #20]
 8006088:	4619      	mov	r1, r3
 800608a:	4a23      	ldr	r2, [pc, #140]	; (8006118 <make_powderbeverage+0x300>)
 800608c:	460b      	mov	r3, r1
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	440b      	add	r3, r1
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	b29b      	uxth	r3, r3
 800609a:	2201      	movs	r2, #1
 800609c:	4619      	mov	r1, r3
 800609e:	f7fc fdc5 	bl	8002c2c <HAL_GPIO_WritePin>

 	if(powder_exit_num_holes != 1){
 80060a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d016      	beq.n	80060d8 <make_powderbeverage+0x2c0>
		HAL_GPIO_WritePin(heat_GPIO_Port[recipes_idx[1]][EN], heat_Pin[recipes_idx[1]][EN], GPIO_PIN_SET);
 80060aa:	7d7b      	ldrb	r3, [r7, #21]
 80060ac:	4619      	mov	r1, r3
 80060ae:	4a19      	ldr	r2, [pc, #100]	; (8006114 <make_powderbeverage+0x2fc>)
 80060b0:	460b      	mov	r3, r1
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	440b      	add	r3, r1
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	7d7b      	ldrb	r3, [r7, #21]
 80060be:	4619      	mov	r1, r3
 80060c0:	4a15      	ldr	r2, [pc, #84]	; (8006118 <make_powderbeverage+0x300>)
 80060c2:	460b      	mov	r3, r1
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	440b      	add	r3, r1
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2201      	movs	r2, #1
 80060d2:	4619      	mov	r1, r3
 80060d4:	f7fc fdaa 	bl	8002c2c <HAL_GPIO_WritePin>
 	}
	HAL_Delay(1000); // wait time
 80060d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80060dc:	f7fc fa4a 	bl	8002574 <HAL_Delay>

 	for(uint8_t i=0; i<POWDER_NUM; i++){
 80060e0:	2300      	movs	r3, #0
 80060e2:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 80060e6:	e054      	b.n	8006192 <make_powderbeverage+0x37a>
 80060e8:	cccccccd 	.word	0xcccccccd
 80060ec:	3fdccccc 	.word	0x3fdccccc
 80060f0:	9999999a 	.word	0x9999999a
 80060f4:	40351999 	.word	0x40351999
 80060f8:	40020c00 	.word	0x40020c00
 80060fc:	08007ff4 	.word	0x08007ff4
 8006100:	08007f50 	.word	0x08007f50
 8006104:	08007f6c 	.word	0x08007f6c
 8006108:	08007f80 	.word	0x08007f80
 800610c:	408f4000 	.word	0x408f4000
 8006110:	08007f98 	.word	0x08007f98
 8006114:	20000084 	.word	0x20000084
 8006118:	20000144 	.word	0x20000144
		if(hot_water_gram[i] != 0){
 800611c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	4413      	add	r3, r2
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d02d      	beq.n	8006188 <make_powderbeverage+0x370>
			HAL_GPIO_WritePin(heat_GPIO_Port[i][EN], heat_Pin[i][EN], GPIO_PIN_RESET);
 800612c:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 8006130:	49a8      	ldr	r1, [pc, #672]	; (80063d4 <make_powderbeverage+0x5bc>)
 8006132:	4613      	mov	r3, r2
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 8006142:	49a5      	ldr	r1, [pc, #660]	; (80063d8 <make_powderbeverage+0x5c0>)
 8006144:	4613      	mov	r3, r2
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	440b      	add	r3, r1
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	2200      	movs	r2, #0
 8006154:	4619      	mov	r1, r3
 8006156:	f7fc fd69 	bl	8002c2c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(heat_GPIO_Port[i][EN], heat_Pin[i][EN], GPIO_PIN_RESET);
 800615a:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 800615e:	499d      	ldr	r1, [pc, #628]	; (80063d4 <make_powderbeverage+0x5bc>)
 8006160:	4613      	mov	r3, r2
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	4413      	add	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	440b      	add	r3, r1
 800616a:	6818      	ldr	r0, [r3, #0]
 800616c:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 8006170:	4999      	ldr	r1, [pc, #612]	; (80063d8 <make_powderbeverage+0x5c0>)
 8006172:	4613      	mov	r3, r2
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	4413      	add	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	440b      	add	r3, r1
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	2200      	movs	r2, #0
 8006182:	4619      	mov	r1, r3
 8006184:	f7fc fd52 	bl	8002c2c <HAL_GPIO_WritePin>
 	for(uint8_t i=0; i<POWDER_NUM; i++){
 8006188:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800618c:	3301      	adds	r3, #1
 800618e:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 8006192:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8006196:	2b04      	cmp	r3, #4
 8006198:	d9c0      	bls.n	800611c <make_powderbeverage+0x304>



	///////////////////////////////////////////////////////////////////////////////////////////
	// 1. exit powder
	for(uint8_t i=0; i<POWDER_NUM; i++){
 800619a:	2300      	movs	r3, #0
 800619c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 80061a0:	e03a      	b.n	8006218 <make_powderbeverage+0x400>
		if(powder_gram[i] != 0){
 80061a2:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	4413      	add	r3, r2
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d02d      	beq.n	800620e <make_powderbeverage+0x3f6>
//			water_dutyRate[i] = 200;
			HAL_GPIO_WritePin(PD_DCpowder_GPIO_Port[i][EN], PD_DCpowder_Pin[i][EN], GPIO_PIN_SET);
 80061b2:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 80061b6:	4989      	ldr	r1, [pc, #548]	; (80063dc <make_powderbeverage+0x5c4>)
 80061b8:	4613      	mov	r3, r2
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	4413      	add	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	440b      	add	r3, r1
 80061c2:	6818      	ldr	r0, [r3, #0]
 80061c4:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 80061c8:	4985      	ldr	r1, [pc, #532]	; (80063e0 <make_powderbeverage+0x5c8>)
 80061ca:	4613      	mov	r3, r2
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	440b      	add	r3, r1
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	2201      	movs	r2, #1
 80061da:	4619      	mov	r1, r3
 80061dc:	f7fc fd26 	bl	8002c2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PD_DCmix_GPIO_Port[i][EN], PD_DCmix_Pin[i][EN], GPIO_PIN_SET);
 80061e0:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 80061e4:	497f      	ldr	r1, [pc, #508]	; (80063e4 <make_powderbeverage+0x5cc>)
 80061e6:	4613      	mov	r3, r2
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	440b      	add	r3, r1
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 80061f6:	497c      	ldr	r1, [pc, #496]	; (80063e8 <make_powderbeverage+0x5d0>)
 80061f8:	4613      	mov	r3, r2
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	4413      	add	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	440b      	add	r3, r1
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	b29b      	uxth	r3, r3
 8006206:	2201      	movs	r2, #1
 8006208:	4619      	mov	r1, r3
 800620a:	f7fc fd0f 	bl	8002c2c <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<POWDER_NUM; i++){
 800620e:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8006212:	3301      	adds	r3, #1
 8006214:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8006218:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800621c:	2b04      	cmp	r3, #4
 800621e:	d9c0      	bls.n	80061a2 <make_powderbeverage+0x38a>
		}
	}

	for(uint8_t i=0; i<POWDER_NUM; i++){
 8006220:	2300      	movs	r3, #0
 8006222:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8006226:	e062      	b.n	80062ee <make_powderbeverage+0x4d6>
		if(powder_gram[i] != 0){
 8006228:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	4413      	add	r3, r2
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d055      	beq.n	80062e4 <make_powderbeverage+0x4cc>
			printf("powder_gram[%d]: %d\n", i, powder_gram[i]);
 8006238:	f897 1058 	ldrb.w	r1, [r7, #88]	; 0x58
 800623c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	4413      	add	r3, r2
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	4868      	ldr	r0, [pc, #416]	; (80063ec <make_powderbeverage+0x5d4>)
 800624c:	f000 fffc 	bl	8007248 <iprintf>

			powder_exit_time[i] = ((powder_gram[i])*250);
 8006250:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	4413      	add	r3, r2
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8006260:	21fa      	movs	r1, #250	; 0xfa
 8006262:	fb01 f202 	mul.w	r2, r1, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800626c:	440b      	add	r3, r1
 800626e:	f843 2c3c 	str.w	r2, [r3, #-60]
			water_dutyRate[i] = (uint32_t)((water_exit_time[i]*100/powder_exit_time[i]));
 8006272:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800627c:	4413      	add	r3, r2
 800627e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8006282:	2264      	movs	r2, #100	; 0x64
 8006284:	fb02 f103 	mul.w	r1, r2, r3
 8006288:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8006292:	4413      	add	r3, r2
 8006294:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8006298:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800629c:	fbb1 f2f2 	udiv	r2, r1, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80062a6:	440b      	add	r3, r1
 80062a8:	f843 2c50 	str.w	r2, [r3, #-80]
			printf("powder[%d]: %d\n", i, powder_exit_time[i]);
 80062ac:	f897 1058 	ldrb.w	r1, [r7, #88]	; 0x58
 80062b0:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80062ba:	4413      	add	r3, r2
 80062bc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80062c0:	461a      	mov	r2, r3
 80062c2:	484b      	ldr	r0, [pc, #300]	; (80063f0 <make_powderbeverage+0x5d8>)
 80062c4:	f000 ffc0 	bl	8007248 <iprintf>
			printf("dutyRate[%d]: %d\n", i, water_dutyRate[i]);
 80062c8:	f897 1058 	ldrb.w	r1, [r7, #88]	; 0x58
 80062cc:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80062d6:	4413      	add	r3, r2
 80062d8:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80062dc:	461a      	mov	r2, r3
 80062de:	4845      	ldr	r0, [pc, #276]	; (80063f4 <make_powderbeverage+0x5dc>)
 80062e0:	f000 ffb2 	bl	8007248 <iprintf>
	for(uint8_t i=0; i<POWDER_NUM; i++){
 80062e4:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80062e8:	3301      	adds	r3, #1
 80062ea:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 80062ee:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80062f2:	2b04      	cmp	r3, #4
 80062f4:	d998      	bls.n	8006228 <make_powderbeverage+0x410>
		}
	}

	for(uint8_t i=0; i<POWDER_NUM; i++){
 80062f6:	2300      	movs	r3, #0
 80062f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80062fc:	e03a      	b.n	8006374 <make_powderbeverage+0x55c>
		if(powder_gram[i] != 0){
 80062fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	4413      	add	r3, r2
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d02d      	beq.n	800636a <make_powderbeverage+0x552>
			HAL_GPIO_WritePin(PD_DCpowder_GPIO_Port[i][EN], PD_DCpowder_Pin[i][EN], GPIO_PIN_SET);
 800630e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006312:	4932      	ldr	r1, [pc, #200]	; (80063dc <make_powderbeverage+0x5c4>)
 8006314:	4613      	mov	r3, r2
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	4413      	add	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	440b      	add	r3, r1
 800631e:	6818      	ldr	r0, [r3, #0]
 8006320:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006324:	492e      	ldr	r1, [pc, #184]	; (80063e0 <make_powderbeverage+0x5c8>)
 8006326:	4613      	mov	r3, r2
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	4413      	add	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	440b      	add	r3, r1
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	b29b      	uxth	r3, r3
 8006334:	2201      	movs	r2, #1
 8006336:	4619      	mov	r1, r3
 8006338:	f7fc fc78 	bl	8002c2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PD_DCmix_GPIO_Port[i][EN], PD_DCmix_Pin[i][EN], GPIO_PIN_SET);
 800633c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006340:	4928      	ldr	r1, [pc, #160]	; (80063e4 <make_powderbeverage+0x5cc>)
 8006342:	4613      	mov	r3, r2
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	4413      	add	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	440b      	add	r3, r1
 800634c:	6818      	ldr	r0, [r3, #0]
 800634e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006352:	4925      	ldr	r1, [pc, #148]	; (80063e8 <make_powderbeverage+0x5d0>)
 8006354:	4613      	mov	r3, r2
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	b29b      	uxth	r3, r3
 8006362:	2201      	movs	r2, #1
 8006364:	4619      	mov	r1, r3
 8006366:	f7fc fc61 	bl	8002c2c <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<POWDER_NUM; i++){
 800636a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800636e:	3301      	adds	r3, #1
 8006370:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8006374:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006378:	2b04      	cmp	r3, #4
 800637a:	d9c0      	bls.n	80062fe <make_powderbeverage+0x4e6>
		}
	}


	makeDutyRatio(recipes_idx[0], recipes_idx[1], water_dutyRate[recipes_idx[0]], water_dutyRate[recipes_idx[1]], powder_exit_time[recipes_idx[0]], powder_exit_time[recipes_idx[1]]);
 800637c:	7d3b      	ldrb	r3, [r7, #20]
 800637e:	461c      	mov	r4, r3
 8006380:	7d7b      	ldrb	r3, [r7, #21]
 8006382:	461d      	mov	r5, r3
 8006384:	7d3b      	ldrb	r3, [r7, #20]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800638c:	4413      	add	r3, r2
 800638e:	f853 1c50 	ldr.w	r1, [r3, #-80]
 8006392:	7d7b      	ldrb	r3, [r7, #21]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800639a:	4413      	add	r3, r2
 800639c:	f853 0c50 	ldr.w	r0, [r3, #-80]
 80063a0:	7d3b      	ldrb	r3, [r7, #20]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80063a8:	4413      	add	r3, r2
 80063aa:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80063ae:	7d7b      	ldrb	r3, [r7, #21]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	f107 0c68 	add.w	ip, r7, #104	; 0x68
 80063b6:	4463      	add	r3, ip
 80063b8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80063bc:	9301      	str	r3, [sp, #4]
 80063be:	9200      	str	r2, [sp, #0]
 80063c0:	4603      	mov	r3, r0
 80063c2:	460a      	mov	r2, r1
 80063c4:	4629      	mov	r1, r5
 80063c6:	4620      	mov	r0, r4
 80063c8:	f000 f894 	bl	80064f4 <makeDutyRatio>

	// 3. STOP EXIT powder
	for(uint8_t i=0; i<POWDER_NUM; i++){
 80063cc:	2300      	movs	r3, #0
 80063ce:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80063d2:	e04c      	b.n	800646e <make_powderbeverage+0x656>
 80063d4:	20000084 	.word	0x20000084
 80063d8:	20000144 	.word	0x20000144
 80063dc:	2000000c 	.word	0x2000000c
 80063e0:	200000cc 	.word	0x200000cc
 80063e4:	20000048 	.word	0x20000048
 80063e8:	20000108 	.word	0x20000108
 80063ec:	08007fa8 	.word	0x08007fa8
 80063f0:	08007fc0 	.word	0x08007fc0
 80063f4:	08007fd0 	.word	0x08007fd0
		if(powder_gram[i] != 0){
 80063f8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	4413      	add	r3, r2
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d02d      	beq.n	8006464 <make_powderbeverage+0x64c>
			HAL_GPIO_WritePin(PD_DCpowder_GPIO_Port[i][EN], PD_DCpowder_Pin[i][EN], GPIO_PIN_RESET);
 8006408:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 800640c:	4934      	ldr	r1, [pc, #208]	; (80064e0 <make_powderbeverage+0x6c8>)
 800640e:	4613      	mov	r3, r2
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	4413      	add	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	440b      	add	r3, r1
 8006418:	6818      	ldr	r0, [r3, #0]
 800641a:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 800641e:	4931      	ldr	r1, [pc, #196]	; (80064e4 <make_powderbeverage+0x6cc>)
 8006420:	4613      	mov	r3, r2
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	4413      	add	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	440b      	add	r3, r1
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	b29b      	uxth	r3, r3
 800642e:	2200      	movs	r2, #0
 8006430:	4619      	mov	r1, r3
 8006432:	f7fc fbfb 	bl	8002c2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PD_DCmix_GPIO_Port[i][EN], PD_DCmix_Pin[i][EN], GPIO_PIN_RESET);
 8006436:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 800643a:	492b      	ldr	r1, [pc, #172]	; (80064e8 <make_powderbeverage+0x6d0>)
 800643c:	4613      	mov	r3, r2
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	440b      	add	r3, r1
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 800644c:	4927      	ldr	r1, [pc, #156]	; (80064ec <make_powderbeverage+0x6d4>)
 800644e:	4613      	mov	r3, r2
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	4413      	add	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	440b      	add	r3, r1
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	b29b      	uxth	r3, r3
 800645c:	2200      	movs	r2, #0
 800645e:	4619      	mov	r1, r3
 8006460:	f7fc fbe4 	bl	8002c2c <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<POWDER_NUM; i++){
 8006464:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8006468:	3301      	adds	r3, #1
 800646a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800646e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8006472:	2b04      	cmp	r3, #4
 8006474:	d9c0      	bls.n	80063f8 <make_powderbeverage+0x5e0>
		}
	}
	if(powder_exit_num_holes == 3){
 8006476:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800647a:	2b03      	cmp	r3, #3
 800647c:	d127      	bne.n	80064ce <make_powderbeverage+0x6b6>
		makeDutyRatio(recipes_idx[2], recipes_idx[2], water_dutyRate[recipes_idx[2]], water_dutyRate[recipes_idx[2]], powder_exit_time[recipes_idx[2]], powder_exit_time[recipes_idx[2]]);
 800647e:	7dbb      	ldrb	r3, [r7, #22]
 8006480:	461c      	mov	r4, r3
 8006482:	7dbb      	ldrb	r3, [r7, #22]
 8006484:	461d      	mov	r5, r3
 8006486:	7dbb      	ldrb	r3, [r7, #22]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800648e:	4413      	add	r3, r2
 8006490:	f853 1c50 	ldr.w	r1, [r3, #-80]
 8006494:	7dbb      	ldrb	r3, [r7, #22]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800649c:	4413      	add	r3, r2
 800649e:	f853 0c50 	ldr.w	r0, [r3, #-80]
 80064a2:	7dbb      	ldrb	r3, [r7, #22]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80064aa:	4413      	add	r3, r2
 80064ac:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80064b0:	7dbb      	ldrb	r3, [r7, #22]
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	f107 0c68 	add.w	ip, r7, #104	; 0x68
 80064b8:	4463      	add	r3, ip
 80064ba:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80064be:	9301      	str	r3, [sp, #4]
 80064c0:	9200      	str	r2, [sp, #0]
 80064c2:	4603      	mov	r3, r0
 80064c4:	460a      	mov	r2, r1
 80064c6:	4629      	mov	r1, r5
 80064c8:	4620      	mov	r0, r4
 80064ca:	f000 f813 	bl	80064f4 <makeDutyRatio>

	}

	printf("finished! !!\n");
 80064ce:	4808      	ldr	r0, [pc, #32]	; (80064f0 <make_powderbeverage+0x6d8>)
 80064d0:	f000 ff40 	bl	8007354 <puts>

	return true;
 80064d4:	2301      	movs	r3, #1
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3768      	adds	r7, #104	; 0x68
 80064da:	46bd      	mov	sp, r7
 80064dc:	bdb0      	pop	{r4, r5, r7, pc}
 80064de:	bf00      	nop
 80064e0:	2000000c 	.word	0x2000000c
 80064e4:	200000cc 	.word	0x200000cc
 80064e8:	20000048 	.word	0x20000048
 80064ec:	20000108 	.word	0x20000108
 80064f0:	08007fe4 	.word	0x08007fe4

080064f4 <makeDutyRatio>:
	HAL_GPIO_WritePin(heat_GPIO_Port[CF01_HEAT][IN1], heat_Pin[CF01_HEAT][IN1], GPIO_PIN_SET);
	HAL_GPIO_WritePin(heat_GPIO_Port[CF01_HEAT][IN2], heat_Pin[CF01_HEAT][IN2], GPIO_PIN_SET);
}

void makeDutyRatio(uint8_t powder_hole1, uint8_t powder_hole2, uint32_t dutyRate1, uint32_t dutyRate2, uint32_t exit_time1, uint32_t exit_time2) // 0~100
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b094      	sub	sp, #80	; 0x50
 80064f8:	af04      	add	r7, sp, #16
 80064fa:	60ba      	str	r2, [r7, #8]
 80064fc:	607b      	str	r3, [r7, #4]
 80064fe:	4603      	mov	r3, r0
 8006500:	73fb      	strb	r3, [r7, #15]
 8006502:	460b      	mov	r3, r1
 8006504:	73bb      	strb	r3, [r7, #14]
	printf(" %d, %d, %d, %d, %d, %d\n", powder_hole1, powder_hole2, dutyRate1, dutyRate2, exit_time1, exit_time2);
 8006506:	7bf9      	ldrb	r1, [r7, #15]
 8006508:	7bba      	ldrb	r2, [r7, #14]
 800650a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800650c:	9302      	str	r3, [sp, #8]
 800650e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006510:	9301      	str	r3, [sp, #4]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	4892      	ldr	r0, [pc, #584]	; (8006764 <makeDutyRatio+0x270>)
 800651a:	f000 fe95 	bl	8007248 <iprintf>
	// 1CYCLE : 100ms
	if(powder_hole1 == powder_hole2)
 800651e:	7bfa      	ldrb	r2, [r7, #15]
 8006520:	7bbb      	ldrb	r3, [r7, #14]
 8006522:	429a      	cmp	r2, r3
 8006524:	d144      	bne.n	80065b0 <makeDutyRatio+0xbc>
	{
//		dutyRate1 : 6 X, 15 OK
		for(int i=0; i<exit_time1/100; i++){
 8006526:	2300      	movs	r3, #0
 8006528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800652a:	e038      	b.n	800659e <makeDutyRatio+0xaa>

			HAL_GPIO_WritePin(heat_GPIO_Port[powder_hole1][EN], heat_Pin[powder_hole1][EN], GPIO_PIN_SET);
 800652c:	7bfa      	ldrb	r2, [r7, #15]
 800652e:	498e      	ldr	r1, [pc, #568]	; (8006768 <makeDutyRatio+0x274>)
 8006530:	4613      	mov	r3, r2
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	4413      	add	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	440b      	add	r3, r1
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	7bfa      	ldrb	r2, [r7, #15]
 800653e:	498b      	ldr	r1, [pc, #556]	; (800676c <makeDutyRatio+0x278>)
 8006540:	4613      	mov	r3, r2
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	4413      	add	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	440b      	add	r3, r1
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	b29b      	uxth	r3, r3
 800654e:	2201      	movs	r2, #1
 8006550:	4619      	mov	r1, r3
 8006552:	f7fc fb6b 	bl	8002c2c <HAL_GPIO_WritePin>
			HAL_Delay(dutyRate1);
 8006556:	68b8      	ldr	r0, [r7, #8]
 8006558:	f7fc f80c 	bl	8002574 <HAL_Delay>

			HAL_GPIO_WritePin(heat_GPIO_Port[powder_hole1][EN], heat_Pin[powder_hole1][EN], GPIO_PIN_RESET);
 800655c:	7bfa      	ldrb	r2, [r7, #15]
 800655e:	4982      	ldr	r1, [pc, #520]	; (8006768 <makeDutyRatio+0x274>)
 8006560:	4613      	mov	r3, r2
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	440b      	add	r3, r1
 800656a:	6818      	ldr	r0, [r3, #0]
 800656c:	7bfa      	ldrb	r2, [r7, #15]
 800656e:	497f      	ldr	r1, [pc, #508]	; (800676c <makeDutyRatio+0x278>)
 8006570:	4613      	mov	r3, r2
 8006572:	005b      	lsls	r3, r3, #1
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	440b      	add	r3, r1
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	b29b      	uxth	r3, r3
 800657e:	2200      	movs	r2, #0
 8006580:	4619      	mov	r1, r3
 8006582:	f7fc fb53 	bl	8002c2c <HAL_GPIO_WritePin>
			HAL_Delay(100-dutyRate1);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800658c:	4618      	mov	r0, r3
 800658e:	f7fb fff1 	bl	8002574 <HAL_Delay>

			printf("100ms\n");
 8006592:	4877      	ldr	r0, [pc, #476]	; (8006770 <makeDutyRatio+0x27c>)
 8006594:	f000 fede 	bl	8007354 <puts>
		for(int i=0; i<exit_time1/100; i++){
 8006598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659a:	3301      	adds	r3, #1
 800659c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800659e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065a0:	4a74      	ldr	r2, [pc, #464]	; (8006774 <makeDutyRatio+0x280>)
 80065a2:	fba2 2303 	umull	r2, r3, r2, r3
 80065a6:	095a      	lsrs	r2, r3, #5
 80065a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d8be      	bhi.n	800652c <makeDutyRatio+0x38>

		}

	}

}
 80065ae:	e0d4      	b.n	800675a <makeDutyRatio+0x266>
		uint32_t exit_time_long = exit_time1;
 80065b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065b2:	63bb      	str	r3, [r7, #56]	; 0x38
		uint32_t exit_time_short = exit_time2;
 80065b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b6:	637b      	str	r3, [r7, #52]	; 0x34
		uint32_t exit_duty_long = dutyRate1;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t exit_duty_short = dutyRate2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint8_t powder_hole_long = powder_hole1;
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		uint8_t powder_hole_short = powder_hole2;
 80065c6:	7bbb      	ldrb	r3, [r7, #14]
 80065c8:	77fb      	strb	r3, [r7, #31]
		if(exit_time_long < exit_time_short){
 80065ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d205      	bcs.n	80065de <makeDutyRatio+0xea>
			uint32_t exit_time_tmp = exit_time_long;
 80065d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d4:	61bb      	str	r3, [r7, #24]
			exit_time_long = exit_time_short;
 80065d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d8:	63bb      	str	r3, [r7, #56]	; 0x38
			exit_time_short = exit_time_tmp;
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	637b      	str	r3, [r7, #52]	; 0x34
		bool reverse_duty = false;
 80065de:	2300      	movs	r3, #0
 80065e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		if(exit_duty_long < exit_duty_short){
 80065e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d210      	bcs.n	800660e <makeDutyRatio+0x11a>
			reverse_duty = true;
 80065ec:	2301      	movs	r3, #1
 80065ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			uint8_t powder_hole_tmp = powder_hole_long;
 80065f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065f6:	75fb      	strb	r3, [r7, #23]
			uint32_t exit_duty_tmp = exit_duty_long;
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	613b      	str	r3, [r7, #16]
			exit_duty_long = exit_duty_short;
 80065fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fe:	633b      	str	r3, [r7, #48]	; 0x30
			exit_duty_short = exit_duty_tmp;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	62fb      	str	r3, [r7, #44]	; 0x2c
			powder_hole_long = powder_hole_tmp;
 8006604:	7dfb      	ldrb	r3, [r7, #23]
 8006606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			powder_hole_tmp = powder_hole_short;
 800660a:	7ffb      	ldrb	r3, [r7, #31]
 800660c:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<exit_time_short/100; i++){
 800660e:	2300      	movs	r3, #0
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
 8006612:	e06c      	b.n	80066ee <makeDutyRatio+0x1fa>
			HAL_GPIO_WritePin(heat_GPIO_Port[powder_hole_short][EN], heat_Pin[powder_hole_short][EN], GPIO_PIN_SET);
 8006614:	7ffa      	ldrb	r2, [r7, #31]
 8006616:	4954      	ldr	r1, [pc, #336]	; (8006768 <makeDutyRatio+0x274>)
 8006618:	4613      	mov	r3, r2
 800661a:	005b      	lsls	r3, r3, #1
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	440b      	add	r3, r1
 8006622:	6818      	ldr	r0, [r3, #0]
 8006624:	7ffa      	ldrb	r2, [r7, #31]
 8006626:	4951      	ldr	r1, [pc, #324]	; (800676c <makeDutyRatio+0x278>)
 8006628:	4613      	mov	r3, r2
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	4413      	add	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	440b      	add	r3, r1
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	b29b      	uxth	r3, r3
 8006636:	2201      	movs	r2, #1
 8006638:	4619      	mov	r1, r3
 800663a:	f7fc faf7 	bl	8002c2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(heat_GPIO_Port[powder_hole_long][EN], heat_Pin[powder_hole_long][EN], GPIO_PIN_SET);
 800663e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006642:	4949      	ldr	r1, [pc, #292]	; (8006768 <makeDutyRatio+0x274>)
 8006644:	4613      	mov	r3, r2
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	4413      	add	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	440b      	add	r3, r1
 800664e:	6818      	ldr	r0, [r3, #0]
 8006650:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006654:	4945      	ldr	r1, [pc, #276]	; (800676c <makeDutyRatio+0x278>)
 8006656:	4613      	mov	r3, r2
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	4413      	add	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	440b      	add	r3, r1
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	b29b      	uxth	r3, r3
 8006664:	2201      	movs	r2, #1
 8006666:	4619      	mov	r1, r3
 8006668:	f7fc fae0 	bl	8002c2c <HAL_GPIO_WritePin>
			HAL_Delay(exit_duty_short);
 800666c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800666e:	f7fb ff81 	bl	8002574 <HAL_Delay>
			HAL_GPIO_WritePin(heat_GPIO_Port[powder_hole_short][EN], heat_Pin[powder_hole_short][EN], GPIO_PIN_RESET);
 8006672:	7ffa      	ldrb	r2, [r7, #31]
 8006674:	493c      	ldr	r1, [pc, #240]	; (8006768 <makeDutyRatio+0x274>)
 8006676:	4613      	mov	r3, r2
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	4413      	add	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	440b      	add	r3, r1
 8006680:	6818      	ldr	r0, [r3, #0]
 8006682:	7ffa      	ldrb	r2, [r7, #31]
 8006684:	4939      	ldr	r1, [pc, #228]	; (800676c <makeDutyRatio+0x278>)
 8006686:	4613      	mov	r3, r2
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	4413      	add	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	440b      	add	r3, r1
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	b29b      	uxth	r3, r3
 8006694:	2200      	movs	r2, #0
 8006696:	4619      	mov	r1, r3
 8006698:	f7fc fac8 	bl	8002c2c <HAL_GPIO_WritePin>
			HAL_Delay(exit_duty_long-exit_duty_short);
 800669c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fb ff66 	bl	8002574 <HAL_Delay>
			HAL_GPIO_WritePin(heat_GPIO_Port[powder_hole_long][EN], heat_Pin[powder_hole_long][EN], GPIO_PIN_RESET);
 80066a8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80066ac:	492e      	ldr	r1, [pc, #184]	; (8006768 <makeDutyRatio+0x274>)
 80066ae:	4613      	mov	r3, r2
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	440b      	add	r3, r1
 80066b8:	6818      	ldr	r0, [r3, #0]
 80066ba:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80066be:	492b      	ldr	r1, [pc, #172]	; (800676c <makeDutyRatio+0x278>)
 80066c0:	4613      	mov	r3, r2
 80066c2:	005b      	lsls	r3, r3, #1
 80066c4:	4413      	add	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	440b      	add	r3, r1
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2200      	movs	r2, #0
 80066d0:	4619      	mov	r1, r3
 80066d2:	f7fc faab 	bl	8002c2c <HAL_GPIO_WritePin>
			HAL_Delay(100-exit_duty_long);
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fb ff49 	bl	8002574 <HAL_Delay>
			printf("100ms\n");
 80066e2:	4823      	ldr	r0, [pc, #140]	; (8006770 <makeDutyRatio+0x27c>)
 80066e4:	f000 fe36 	bl	8007354 <puts>
		for(int i=0; i<exit_time_short/100; i++){
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	3301      	adds	r3, #1
 80066ec:	627b      	str	r3, [r7, #36]	; 0x24
 80066ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f0:	4a20      	ldr	r2, [pc, #128]	; (8006774 <makeDutyRatio+0x280>)
 80066f2:	fba2 2303 	umull	r2, r3, r2, r3
 80066f6:	095a      	lsrs	r2, r3, #5
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d88a      	bhi.n	8006614 <makeDutyRatio+0x120>
		for(int i=0; i<(exit_time_long-exit_time_short)/100; i++){
 80066fe:	2300      	movs	r3, #0
 8006700:	623b      	str	r3, [r7, #32]
 8006702:	e020      	b.n	8006746 <makeDutyRatio+0x252>
			if(reverse_duty == true){
 8006704:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006708:	2b01      	cmp	r3, #1
 800670a:	d119      	bne.n	8006740 <makeDutyRatio+0x24c>
				HAL_GPIO_WritePin(heat_GPIO_Port[powder_hole_long][EN], heat_Pin[powder_hole_long][EN], GPIO_PIN_RESET);
 800670c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006710:	4915      	ldr	r1, [pc, #84]	; (8006768 <makeDutyRatio+0x274>)
 8006712:	4613      	mov	r3, r2
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	440b      	add	r3, r1
 800671c:	6818      	ldr	r0, [r3, #0]
 800671e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006722:	4912      	ldr	r1, [pc, #72]	; (800676c <makeDutyRatio+0x278>)
 8006724:	4613      	mov	r3, r2
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	4413      	add	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	440b      	add	r3, r1
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	b29b      	uxth	r3, r3
 8006732:	2200      	movs	r2, #0
 8006734:	4619      	mov	r1, r3
 8006736:	f7fc fa79 	bl	8002c2c <HAL_GPIO_WritePin>
				HAL_Delay(exit_duty_short);
 800673a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800673c:	f7fb ff1a 	bl	8002574 <HAL_Delay>
		for(int i=0; i<(exit_time_long-exit_time_short)/100; i++){
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	3301      	adds	r3, #1
 8006744:	623b      	str	r3, [r7, #32]
 8006746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	4a09      	ldr	r2, [pc, #36]	; (8006774 <makeDutyRatio+0x280>)
 800674e:	fba2 2303 	umull	r2, r3, r2, r3
 8006752:	095a      	lsrs	r2, r3, #5
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	429a      	cmp	r2, r3
 8006758:	d8d4      	bhi.n	8006704 <makeDutyRatio+0x210>
}
 800675a:	bf00      	nop
 800675c:	3740      	adds	r7, #64	; 0x40
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	08007ff8 	.word	0x08007ff8
 8006768:	20000084 	.word	0x20000084
 800676c:	20000144 	.word	0x20000144
 8006770:	08008014 	.word	0x08008014
 8006774:	51eb851f 	.word	0x51eb851f

08006778 <pulseMaker>:
	controlSteppingMotor(CUP_D, STEPPING_MOTOR_ON, CLOCKWISE, QUARTER, FREQ_FAST);

}

void pulseMaker (uint16_t time)	//delay function in 10us
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	4603      	mov	r3, r0
 8006780:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8006782:	4b09      	ldr	r3, [pc, #36]	; (80067a8 <pulseMaker+0x30>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2200      	movs	r2, #0
 8006788:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 800678a:	bf00      	nop
 800678c:	4b06      	ldr	r3, [pc, #24]	; (80067a8 <pulseMaker+0x30>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006792:	88fb      	ldrh	r3, [r7, #6]
 8006794:	429a      	cmp	r2, r3
 8006796:	d3f9      	bcc.n	800678c <pulseMaker+0x14>
}
 8006798:	bf00      	nop
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	20000b60 	.word	0x20000b60

080067ac <initCupLidDispensor>:

bool initCupLidDispensor(void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);
 80067b0:	4802      	ldr	r0, [pc, #8]	; (80067bc <initCupLidDispensor+0x10>)
 80067b2:	f7fc ff6f 	bl	8003694 <HAL_TIM_Base_Start>
	return true;
 80067b6:	2301      	movs	r3, #1
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	20000b60 	.word	0x20000b60

080067c0 <controlSteppingMotor>:

void controlSteppingMotor(uint8_t device_id, bool cmd, uint8_t dir, uint16_t angle, uint8_t freq)
{
 80067c0:	b590      	push	{r4, r7, lr}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	4604      	mov	r4, r0
 80067c8:	4608      	mov	r0, r1
 80067ca:	4611      	mov	r1, r2
 80067cc:	461a      	mov	r2, r3
 80067ce:	4623      	mov	r3, r4
 80067d0:	71fb      	strb	r3, [r7, #7]
 80067d2:	4603      	mov	r3, r0
 80067d4:	71bb      	strb	r3, [r7, #6]
 80067d6:	460b      	mov	r3, r1
 80067d8:	717b      	strb	r3, [r7, #5]
 80067da:	4613      	mov	r3, r2
 80067dc:	807b      	strh	r3, [r7, #2]
	uint8_t ID = device_id - OFFSET;
 80067de:	79fb      	ldrb	r3, [r7, #7]
 80067e0:	3b02      	subs	r3, #2
 80067e2:	72fb      	strb	r3, [r7, #11]

	if(cmd == STEPPING_MOTOR_ON){
 80067e4:	79bb      	ldrb	r3, [r7, #6]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	f040 8135 	bne.w	8006a56 <controlSteppingMotor+0x296>
		//EN : SET = enable MOTOR
		HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID][EN], SteppingMotor_Pin[ID][EN], GPIO_PIN_SET);
 80067ec:	7afa      	ldrb	r2, [r7, #11]
 80067ee:	49a8      	ldr	r1, [pc, #672]	; (8006a90 <controlSteppingMotor+0x2d0>)
 80067f0:	4613      	mov	r3, r2
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	440b      	add	r3, r1
 80067fa:	6818      	ldr	r0, [r3, #0]
 80067fc:	7afa      	ldrb	r2, [r7, #11]
 80067fe:	49a5      	ldr	r1, [pc, #660]	; (8006a94 <controlSteppingMotor+0x2d4>)
 8006800:	4613      	mov	r3, r2
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	4413      	add	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	440b      	add	r3, r1
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	2201      	movs	r2, #1
 8006810:	4619      	mov	r1, r3
 8006812:	f7fc fa0b 	bl	8002c2c <HAL_GPIO_WritePin>

		// DIR : Sset motor direction
		if(dir == CLOCKWISE)
 8006816:	797b      	ldrb	r3, [r7, #5]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d117      	bne.n	800684c <controlSteppingMotor+0x8c>
			HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID][DIR], SteppingMotor_Pin[ID][DIR], GPIO_PIN_RESET);
 800681c:	7afa      	ldrb	r2, [r7, #11]
 800681e:	499c      	ldr	r1, [pc, #624]	; (8006a90 <controlSteppingMotor+0x2d0>)
 8006820:	4613      	mov	r3, r2
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	4413      	add	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	440b      	add	r3, r1
 800682a:	3308      	adds	r3, #8
 800682c:	6818      	ldr	r0, [r3, #0]
 800682e:	7afa      	ldrb	r2, [r7, #11]
 8006830:	4998      	ldr	r1, [pc, #608]	; (8006a94 <controlSteppingMotor+0x2d4>)
 8006832:	4613      	mov	r3, r2
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	4413      	add	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	440b      	add	r3, r1
 800683c:	3308      	adds	r3, #8
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	2200      	movs	r2, #0
 8006844:	4619      	mov	r1, r3
 8006846:	f7fc f9f1 	bl	8002c2c <HAL_GPIO_WritePin>
 800684a:	e019      	b.n	8006880 <controlSteppingMotor+0xc0>
		else if(dir == COUNTER_CLOCKWISE)
 800684c:	797b      	ldrb	r3, [r7, #5]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d116      	bne.n	8006880 <controlSteppingMotor+0xc0>
			HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID][DIR], SteppingMotor_Pin[ID][DIR], GPIO_PIN_SET);
 8006852:	7afa      	ldrb	r2, [r7, #11]
 8006854:	498e      	ldr	r1, [pc, #568]	; (8006a90 <controlSteppingMotor+0x2d0>)
 8006856:	4613      	mov	r3, r2
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	4413      	add	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	440b      	add	r3, r1
 8006860:	3308      	adds	r3, #8
 8006862:	6818      	ldr	r0, [r3, #0]
 8006864:	7afa      	ldrb	r2, [r7, #11]
 8006866:	498b      	ldr	r1, [pc, #556]	; (8006a94 <controlSteppingMotor+0x2d4>)
 8006868:	4613      	mov	r3, r2
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	3308      	adds	r3, #8
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	2201      	movs	r2, #1
 800687a:	4619      	mov	r1, r3
 800687c:	f7fc f9d6 	bl	8002c2c <HAL_GPIO_WritePin>

		is_running[ID] = true;
 8006880:	7afb      	ldrb	r3, [r7, #11]
 8006882:	4a85      	ldr	r2, [pc, #532]	; (8006a98 <controlSteppingMotor+0x2d8>)
 8006884:	2101      	movs	r1, #1
 8006886:	54d1      	strb	r1, [r2, r3]
		HAL_Delay(10);
 8006888:	200a      	movs	r0, #10
 800688a:	f7fb fe73 	bl	8002574 <HAL_Delay>

		for(uint16_t step=0; step < angle/10; step++){
 800688e:	2300      	movs	r3, #0
 8006890:	81fb      	strh	r3, [r7, #14]
 8006892:	e04a      	b.n	800692a <controlSteppingMotor+0x16a>
			printf("%d \n",HAL_GPIO_ReadPin(MotorSpeedSensor_GPIO_Port[0][UP], MotorSpeedSensor_Pin[0][UP]));
 8006894:	4b81      	ldr	r3, [pc, #516]	; (8006a9c <controlSteppingMotor+0x2dc>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a81      	ldr	r2, [pc, #516]	; (8006aa0 <controlSteppingMotor+0x2e0>)
 800689a:	6812      	ldr	r2, [r2, #0]
 800689c:	b292      	uxth	r2, r2
 800689e:	4611      	mov	r1, r2
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fc f9ab 	bl	8002bfc <HAL_GPIO_ReadPin>
 80068a6:	4603      	mov	r3, r0
 80068a8:	4619      	mov	r1, r3
 80068aa:	487e      	ldr	r0, [pc, #504]	; (8006aa4 <controlSteppingMotor+0x2e4>)
 80068ac:	f000 fccc 	bl	8007248 <iprintf>

			HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID][STP], SteppingMotor_Pin[ID][STP], GPIO_PIN_SET);
 80068b0:	7afa      	ldrb	r2, [r7, #11]
 80068b2:	4977      	ldr	r1, [pc, #476]	; (8006a90 <controlSteppingMotor+0x2d0>)
 80068b4:	4613      	mov	r3, r2
 80068b6:	005b      	lsls	r3, r3, #1
 80068b8:	4413      	add	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	440b      	add	r3, r1
 80068be:	3304      	adds	r3, #4
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	7afa      	ldrb	r2, [r7, #11]
 80068c4:	4973      	ldr	r1, [pc, #460]	; (8006a94 <controlSteppingMotor+0x2d4>)
 80068c6:	4613      	mov	r3, r2
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	4413      	add	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	440b      	add	r3, r1
 80068d0:	3304      	adds	r3, #4
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	2201      	movs	r2, #1
 80068d8:	4619      	mov	r1, r3
 80068da:	f7fc f9a7 	bl	8002c2c <HAL_GPIO_WritePin>
			pulseMaker(freq);
 80068de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff ff47 	bl	8006778 <pulseMaker>
			HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID][STP], SteppingMotor_Pin[ID][STP], GPIO_PIN_RESET);
 80068ea:	7afa      	ldrb	r2, [r7, #11]
 80068ec:	4968      	ldr	r1, [pc, #416]	; (8006a90 <controlSteppingMotor+0x2d0>)
 80068ee:	4613      	mov	r3, r2
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	440b      	add	r3, r1
 80068f8:	3304      	adds	r3, #4
 80068fa:	6818      	ldr	r0, [r3, #0]
 80068fc:	7afa      	ldrb	r2, [r7, #11]
 80068fe:	4965      	ldr	r1, [pc, #404]	; (8006a94 <controlSteppingMotor+0x2d4>)
 8006900:	4613      	mov	r3, r2
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	3304      	adds	r3, #4
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	b29b      	uxth	r3, r3
 8006910:	2200      	movs	r2, #0
 8006912:	4619      	mov	r1, r3
 8006914:	f7fc f98a 	bl	8002c2c <HAL_GPIO_WritePin>
			pulseMaker(freq);
 8006918:	f897 3020 	ldrb.w	r3, [r7, #32]
 800691c:	b29b      	uxth	r3, r3
 800691e:	4618      	mov	r0, r3
 8006920:	f7ff ff2a 	bl	8006778 <pulseMaker>
		for(uint16_t step=0; step < angle/10; step++){
 8006924:	89fb      	ldrh	r3, [r7, #14]
 8006926:	3301      	adds	r3, #1
 8006928:	81fb      	strh	r3, [r7, #14]
 800692a:	887b      	ldrh	r3, [r7, #2]
 800692c:	4a5e      	ldr	r2, [pc, #376]	; (8006aa8 <controlSteppingMotor+0x2e8>)
 800692e:	fba2 2303 	umull	r2, r3, r2, r3
 8006932:	08db      	lsrs	r3, r3, #3
 8006934:	b29b      	uxth	r3, r3
 8006936:	89fa      	ldrh	r2, [r7, #14]
 8006938:	429a      	cmp	r2, r3
 800693a:	d3ab      	bcc.n	8006894 <controlSteppingMotor+0xd4>
		}

//		printf("detection mode on!\n");
		for(uint16_t step=0; step < angle*2; step++){
 800693c:	2300      	movs	r3, #0
 800693e:	81bb      	strh	r3, [r7, #12]
 8006940:	e083      	b.n	8006a4a <controlSteppingMotor+0x28a>
			HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID][STP], SteppingMotor_Pin[ID][STP], GPIO_PIN_SET);
 8006942:	7afa      	ldrb	r2, [r7, #11]
 8006944:	4952      	ldr	r1, [pc, #328]	; (8006a90 <controlSteppingMotor+0x2d0>)
 8006946:	4613      	mov	r3, r2
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	4413      	add	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	440b      	add	r3, r1
 8006950:	3304      	adds	r3, #4
 8006952:	6818      	ldr	r0, [r3, #0]
 8006954:	7afa      	ldrb	r2, [r7, #11]
 8006956:	494f      	ldr	r1, [pc, #316]	; (8006a94 <controlSteppingMotor+0x2d4>)
 8006958:	4613      	mov	r3, r2
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	4413      	add	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	440b      	add	r3, r1
 8006962:	3304      	adds	r3, #4
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	b29b      	uxth	r3, r3
 8006968:	2201      	movs	r2, #1
 800696a:	4619      	mov	r1, r3
 800696c:	f7fc f95e 	bl	8002c2c <HAL_GPIO_WritePin>
			pulseMaker(freq);
 8006970:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006974:	b29b      	uxth	r3, r3
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff fefe 	bl	8006778 <pulseMaker>
			HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID][STP], SteppingMotor_Pin[ID][STP], GPIO_PIN_RESET);
 800697c:	7afa      	ldrb	r2, [r7, #11]
 800697e:	4944      	ldr	r1, [pc, #272]	; (8006a90 <controlSteppingMotor+0x2d0>)
 8006980:	4613      	mov	r3, r2
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	4413      	add	r3, r2
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	440b      	add	r3, r1
 800698a:	3304      	adds	r3, #4
 800698c:	6818      	ldr	r0, [r3, #0]
 800698e:	7afa      	ldrb	r2, [r7, #11]
 8006990:	4940      	ldr	r1, [pc, #256]	; (8006a94 <controlSteppingMotor+0x2d4>)
 8006992:	4613      	mov	r3, r2
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	440b      	add	r3, r1
 800699c:	3304      	adds	r3, #4
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2200      	movs	r2, #0
 80069a4:	4619      	mov	r1, r3
 80069a6:	f7fc f941 	bl	8002c2c <HAL_GPIO_WritePin>
			pulseMaker(freq);
 80069aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7ff fee1 	bl	8006778 <pulseMaker>

			if(is_detected[ID][UP] == false){
 80069b6:	7afb      	ldrb	r3, [r7, #11]
 80069b8:	4a3c      	ldr	r2, [pc, #240]	; (8006aac <controlSteppingMotor+0x2ec>)
 80069ba:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d121      	bne.n	8006a06 <controlSteppingMotor+0x246>
				if(HAL_GPIO_ReadPin(MotorSpeedSensor_GPIO_Port[ID][UP], MotorSpeedSensor_Pin[ID][UP]) & (is_detected[ID][DOWN] == true)){
 80069c2:	7afb      	ldrb	r3, [r7, #11]
 80069c4:	4a35      	ldr	r2, [pc, #212]	; (8006a9c <controlSteppingMotor+0x2dc>)
 80069c6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80069ca:	7afb      	ldrb	r3, [r7, #11]
 80069cc:	4934      	ldr	r1, [pc, #208]	; (8006aa0 <controlSteppingMotor+0x2e0>)
 80069ce:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	4619      	mov	r1, r3
 80069d6:	4610      	mov	r0, r2
 80069d8:	f7fc f910 	bl	8002bfc <HAL_GPIO_ReadPin>
 80069dc:	4603      	mov	r3, r0
 80069de:	4619      	mov	r1, r3
 80069e0:	7afb      	ldrb	r3, [r7, #11]
 80069e2:	4a32      	ldr	r2, [pc, #200]	; (8006aac <controlSteppingMotor+0x2ec>)
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	4413      	add	r3, r2
 80069e8:	785b      	ldrb	r3, [r3, #1]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	bf0c      	ite	eq
 80069ee:	2301      	moveq	r3, #1
 80069f0:	2300      	movne	r3, #0
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	400b      	ands	r3, r1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <controlSteppingMotor+0x246>
					is_detected[ID][UP] = true;
 80069fa:	7afb      	ldrb	r3, [r7, #11]
 80069fc:	4a2b      	ldr	r2, [pc, #172]	; (8006aac <controlSteppingMotor+0x2ec>)
 80069fe:	2101      	movs	r1, #1
 8006a00:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
//					printf("up detected\n");
					break;
 8006a04:	e027      	b.n	8006a56 <controlSteppingMotor+0x296>
				}
			}

			if(is_detected[ID][DOWN] == false){
 8006a06:	7afb      	ldrb	r3, [r7, #11]
 8006a08:	4a28      	ldr	r2, [pc, #160]	; (8006aac <controlSteppingMotor+0x2ec>)
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	4413      	add	r3, r2
 8006a0e:	785b      	ldrb	r3, [r3, #1]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d117      	bne.n	8006a44 <controlSteppingMotor+0x284>
				if(HAL_GPIO_ReadPin(MotorSpeedSensor_GPIO_Port[ID][DOWN], MotorSpeedSensor_Pin[ID][DOWN])){
 8006a14:	7afb      	ldrb	r3, [r7, #11]
 8006a16:	4a21      	ldr	r2, [pc, #132]	; (8006a9c <controlSteppingMotor+0x2dc>)
 8006a18:	00db      	lsls	r3, r3, #3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	7afb      	ldrb	r3, [r7, #11]
 8006a20:	491f      	ldr	r1, [pc, #124]	; (8006aa0 <controlSteppingMotor+0x2e0>)
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	440b      	add	r3, r1
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	f7fc f8e5 	bl	8002bfc <HAL_GPIO_ReadPin>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d005      	beq.n	8006a44 <controlSteppingMotor+0x284>
					is_detected[ID][DOWN] = true;
 8006a38:	7afb      	ldrb	r3, [r7, #11]
 8006a3a:	4a1c      	ldr	r2, [pc, #112]	; (8006aac <controlSteppingMotor+0x2ec>)
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	4413      	add	r3, r2
 8006a40:	2201      	movs	r2, #1
 8006a42:	705a      	strb	r2, [r3, #1]
		for(uint16_t step=0; step < angle*2; step++){
 8006a44:	89bb      	ldrh	r3, [r7, #12]
 8006a46:	3301      	adds	r3, #1
 8006a48:	81bb      	strh	r3, [r7, #12]
 8006a4a:	89ba      	ldrh	r2, [r7, #12]
 8006a4c:	887b      	ldrh	r3, [r7, #2]
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	429a      	cmp	r2, r3
 8006a52:	f6ff af76 	blt.w	8006942 <controlSteppingMotor+0x182>
				}
			}
		}
	}
	// STEPPING_MOTOR_OFF
	HAL_GPIO_WritePin(SteppingMotor_GPIO_Port[ID][EN], SteppingMotor_Pin[ID][EN], GPIO_PIN_RESET); //EN - RESET = disable MOTOR
 8006a56:	7afa      	ldrb	r2, [r7, #11]
 8006a58:	490d      	ldr	r1, [pc, #52]	; (8006a90 <controlSteppingMotor+0x2d0>)
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	005b      	lsls	r3, r3, #1
 8006a5e:	4413      	add	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	440b      	add	r3, r1
 8006a64:	6818      	ldr	r0, [r3, #0]
 8006a66:	7afa      	ldrb	r2, [r7, #11]
 8006a68:	490a      	ldr	r1, [pc, #40]	; (8006a94 <controlSteppingMotor+0x2d4>)
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	4413      	add	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	440b      	add	r3, r1
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2200      	movs	r2, #0
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	f7fc f8d6 	bl	8002c2c <HAL_GPIO_WritePin>

	is_running[ID] = false;
 8006a80:	7afb      	ldrb	r3, [r7, #11]
 8006a82:	4a05      	ldr	r2, [pc, #20]	; (8006a98 <controlSteppingMotor+0x2d8>)
 8006a84:	2100      	movs	r1, #0
 8006a86:	54d1      	strb	r1, [r2, r3]
}
 8006a88:	bf00      	nop
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd90      	pop	{r4, r7, pc}
 8006a90:	200001a4 	.word	0x200001a4
 8006a94:	200001bc 	.word	0x200001bc
 8006a98:	20000994 	.word	0x20000994
 8006a9c:	200001d4 	.word	0x200001d4
 8006aa0:	200001e4 	.word	0x200001e4
 8006aa4:	080080d8 	.word	0x080080d8
 8006aa8:	cccccccd 	.word	0xcccccccd
 8006aac:	20000990 	.word	0x20000990

08006ab0 <cup_lid_dispatch>:
		if(is_running[id] == true)
			return RUNNING;
	}
}
bool cup_lid_dispatch(uint8_t device_id)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	71fb      	strb	r3, [r7, #7]
//	  {
//	    Error_Handler();
//	  }
//	HAL_Delay(3000);

	sendCommand(device_id, STATUS_CHECK);
 8006aba:	79fb      	ldrb	r3, [r7, #7]
 8006abc:	2100      	movs	r1, #0
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 f814 	bl	8006aec <sendCommand>
	HAL_Delay(3000);
 8006ac4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006ac8:	f7fb fd54 	bl	8002574 <HAL_Delay>

	sendCommand(device_id, DISPATCH_1_CUP);
 8006acc:	79fb      	ldrb	r3, [r7, #7]
 8006ace:	2101      	movs	r1, #1
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 f80b 	bl	8006aec <sendCommand>

	sendCommand(device_id, IS_FINISHED);
 8006ad6:	79fb      	ldrb	r3, [r7, #7]
 8006ad8:	2102      	movs	r1, #2
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 f806 	bl	8006aec <sendCommand>
//	sendCommand(device_id, IS_FINISHED);


//	printf("send dispatch\n");
//	sendCommand(device_id, IS_FINISHED);
	return true;
 8006ae0:	2301      	movs	r3, #1
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <sendCommand>:


void sendCommand(uint8_t device_id, uint8_t cmd)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08a      	sub	sp, #40	; 0x28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	4603      	mov	r3, r0
 8006af4:	460a      	mov	r2, r1
 8006af6:	71fb      	strb	r3, [r7, #7]
 8006af8:	4613      	mov	r3, r2
 8006afa:	71bb      	strb	r3, [r7, #6]
	// calc checksum
	int BCC = dispenser_req_packet_list[cmd][LEN]+3;
 8006afc:	79ba      	ldrb	r2, [r7, #6]
 8006afe:	4977      	ldr	r1, [pc, #476]	; (8006cdc <sendCommand+0x1f0>)
 8006b00:	4613      	mov	r3, r2
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	1a9b      	subs	r3, r3, r2
 8006b06:	440b      	add	r3, r1
 8006b08:	3301      	adds	r3, #1
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	3303      	adds	r3, #3
 8006b0e:	617b      	str	r3, [r7, #20]

	for(int i=1; i<BCC; i++){
 8006b10:	2301      	movs	r3, #1
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
 8006b14:	e020      	b.n	8006b58 <sendCommand+0x6c>
		dispenser_req_packet_list[cmd][BCC] += dispenser_req_packet_list[cmd][i];
 8006b16:	79ba      	ldrb	r2, [r7, #6]
 8006b18:	4970      	ldr	r1, [pc, #448]	; (8006cdc <sendCommand+0x1f0>)
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	1a9b      	subs	r3, r3, r2
 8006b20:	18ca      	adds	r2, r1, r3
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	4413      	add	r3, r2
 8006b26:	7819      	ldrb	r1, [r3, #0]
 8006b28:	79ba      	ldrb	r2, [r7, #6]
 8006b2a:	486c      	ldr	r0, [pc, #432]	; (8006cdc <sendCommand+0x1f0>)
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	00db      	lsls	r3, r3, #3
 8006b30:	1a9b      	subs	r3, r3, r2
 8006b32:	18c2      	adds	r2, r0, r3
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	4413      	add	r3, r2
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	79ba      	ldrb	r2, [r7, #6]
 8006b3c:	440b      	add	r3, r1
 8006b3e:	b2d8      	uxtb	r0, r3
 8006b40:	4966      	ldr	r1, [pc, #408]	; (8006cdc <sendCommand+0x1f0>)
 8006b42:	4613      	mov	r3, r2
 8006b44:	00db      	lsls	r3, r3, #3
 8006b46:	1a9b      	subs	r3, r3, r2
 8006b48:	18ca      	adds	r2, r1, r3
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	4602      	mov	r2, r0
 8006b50:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<BCC; i++){
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	3301      	adds	r3, #1
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
 8006b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	dbda      	blt.n	8006b16 <sendCommand+0x2a>
	}

	// request packet
	if (device_id == CUP_D){
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d150      	bne.n	8006c08 <sendCommand+0x11c>
//		HAL_UART_Receive_IT(&huart5, cupD_res_packet, sizeof(cupD_res_packet));
		HAL_UART_Transmit(&huart5, (uint8_t *)dispenser_req_packet_list[cmd], dispenser_req_packet_list[cmd][1]+4, 100);
 8006b66:	79ba      	ldrb	r2, [r7, #6]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	1a9b      	subs	r3, r3, r2
 8006b6e:	4a5b      	ldr	r2, [pc, #364]	; (8006cdc <sendCommand+0x1f0>)
 8006b70:	1899      	adds	r1, r3, r2
 8006b72:	79ba      	ldrb	r2, [r7, #6]
 8006b74:	4859      	ldr	r0, [pc, #356]	; (8006cdc <sendCommand+0x1f0>)
 8006b76:	4613      	mov	r3, r2
 8006b78:	00db      	lsls	r3, r3, #3
 8006b7a:	1a9b      	subs	r3, r3, r2
 8006b7c:	4403      	add	r3, r0
 8006b7e:	3301      	adds	r3, #1
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	3304      	adds	r3, #4
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	2364      	movs	r3, #100	; 0x64
 8006b8a:	4855      	ldr	r0, [pc, #340]	; (8006ce0 <sendCommand+0x1f4>)
 8006b8c:	f7fd fd5b 	bl	8004646 <HAL_UART_Transmit>

		uint8_t stx = 0;
 8006b90:	2300      	movs	r3, #0
 8006b92:	733b      	strb	r3, [r7, #12]
		uint8_t len = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	72fb      	strb	r3, [r7, #11]
		uint8_t etx = 0;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	72bb      	strb	r3, [r7, #10]
		uint8_t buf = 0;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	727b      	strb	r3, [r7, #9]
		uint8_t chk = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	723b      	strb	r3, [r7, #8]

		// receive packet
		HAL_UART_Receive(&huart5, &stx, sizeof(stx), 10);
 8006ba4:	f107 010c 	add.w	r1, r7, #12
 8006ba8:	230a      	movs	r3, #10
 8006baa:	2201      	movs	r2, #1
 8006bac:	484c      	ldr	r0, [pc, #304]	; (8006ce0 <sendCommand+0x1f4>)
 8006bae:	f7fd fddc 	bl	800476a <HAL_UART_Receive>
		if (stx == 0x02){
 8006bb2:	7b3b      	ldrb	r3, [r7, #12]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d135      	bne.n	8006c24 <sendCommand+0x138>
			HAL_UART_Receive(&huart5, &len, sizeof(len), 10);
 8006bb8:	f107 010b 	add.w	r1, r7, #11
 8006bbc:	230a      	movs	r3, #10
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	4847      	ldr	r0, [pc, #284]	; (8006ce0 <sendCommand+0x1f4>)
 8006bc2:	f7fd fdd2 	bl	800476a <HAL_UART_Receive>
			for(int i=0; i<len; i++){
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	623b      	str	r3, [r7, #32]
 8006bca:	e009      	b.n	8006be0 <sendCommand+0xf4>
				HAL_UART_Receive(&huart5, &buf, sizeof(buf), 10);
 8006bcc:	f107 0109 	add.w	r1, r7, #9
 8006bd0:	230a      	movs	r3, #10
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	4842      	ldr	r0, [pc, #264]	; (8006ce0 <sendCommand+0x1f4>)
 8006bd6:	f7fd fdc8 	bl	800476a <HAL_UART_Receive>
			for(int i=0; i<len; i++){
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	623b      	str	r3, [r7, #32]
 8006be0:	7afb      	ldrb	r3, [r7, #11]
 8006be2:	461a      	mov	r2, r3
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	4293      	cmp	r3, r2
 8006be8:	dbf0      	blt.n	8006bcc <sendCommand+0xe0>
			}
			HAL_UART_Receive(&huart5, &etx, sizeof(etx), 10);
 8006bea:	f107 010a 	add.w	r1, r7, #10
 8006bee:	230a      	movs	r3, #10
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	483b      	ldr	r0, [pc, #236]	; (8006ce0 <sendCommand+0x1f4>)
 8006bf4:	f7fd fdb9 	bl	800476a <HAL_UART_Receive>
			HAL_UART_Receive(&huart5, &chk, sizeof(chk), 10);
 8006bf8:	f107 0108 	add.w	r1, r7, #8
 8006bfc:	230a      	movs	r3, #10
 8006bfe:	2201      	movs	r2, #1
 8006c00:	4837      	ldr	r0, [pc, #220]	; (8006ce0 <sendCommand+0x1f4>)
 8006c02:	f7fd fdb2 	bl	800476a <HAL_UART_Receive>
 8006c06:	e00d      	b.n	8006c24 <sendCommand+0x138>


		}
	}
	else if (device_id == LID_D){
 8006c08:	79fb      	ldrb	r3, [r7, #7]
 8006c0a:	2b03      	cmp	r3, #3
 8006c0c:	d10a      	bne.n	8006c24 <sendCommand+0x138>
//		HAL_UART_Receive_IT(&huart6, LidD_res_packet, sizeof(LidD_res_packet));
		HAL_UART_Transmit(&huart6, (uint8_t *)dispenser_req_packet_list[cmd], sizeof(dispenser_req_packet_list[cmd]), 100);
 8006c0e:	79ba      	ldrb	r2, [r7, #6]
 8006c10:	4613      	mov	r3, r2
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	1a9b      	subs	r3, r3, r2
 8006c16:	4a31      	ldr	r2, [pc, #196]	; (8006cdc <sendCommand+0x1f0>)
 8006c18:	1899      	adds	r1, r3, r2
 8006c1a:	2364      	movs	r3, #100	; 0x64
 8006c1c:	2207      	movs	r2, #7
 8006c1e:	4831      	ldr	r0, [pc, #196]	; (8006ce4 <sendCommand+0x1f8>)
 8006c20:	f7fd fd11 	bl	8004646 <HAL_UART_Transmit>
	}

	uint8_t buf = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	73fb      	strb	r3, [r7, #15]
	uint8_t stx = 0;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	73bb      	strb	r3, [r7, #14]
	uint8_t len = 0;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	737b      	strb	r3, [r7, #13]

	// receive packet
	HAL_UART_Receive(&huart6, &stx, sizeof(stx), 10);
 8006c30:	f107 010e 	add.w	r1, r7, #14
 8006c34:	230a      	movs	r3, #10
 8006c36:	2201      	movs	r2, #1
 8006c38:	482a      	ldr	r0, [pc, #168]	; (8006ce4 <sendCommand+0x1f8>)
 8006c3a:	f7fd fd96 	bl	800476a <HAL_UART_Receive>

	// STX
	if (stx == 0x02)
 8006c3e:	7bbb      	ldrb	r3, [r7, #14]
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d147      	bne.n	8006cd4 <sendCommand+0x1e8>
	{
		// LEN
		HAL_UART_Receive(&huart6, &len, sizeof(len), 10);
 8006c44:	f107 010d 	add.w	r1, r7, #13
 8006c48:	230a      	movs	r3, #10
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	4825      	ldr	r0, [pc, #148]	; (8006ce4 <sendCommand+0x1f8>)
 8006c4e:	f7fd fd8c 	bl	800476a <HAL_UART_Receive>
		uint8_t *data_arr = (uint8_t*)malloc(sizeof(uint8_t) * (len+2));
 8006c52:	7b7b      	ldrb	r3, [r7, #13]
 8006c54:	3302      	adds	r3, #2
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 fa34 	bl	80070c4 <malloc>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	613b      	str	r3, [r7, #16]

		for(int i=0; i<len+2; i++){
 8006c60:	2300      	movs	r3, #0
 8006c62:	61fb      	str	r3, [r7, #28]
 8006c64:	e007      	b.n	8006c76 <sendCommand+0x18a>
			data_arr[i] = 0;
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<len+2; i++){
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	3301      	adds	r3, #1
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	7b7b      	ldrb	r3, [r7, #13]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	69fa      	ldr	r2, [r7, #28]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	ddf2      	ble.n	8006c66 <sendCommand+0x17a>
		}

		data_arr[0] = stx;
 8006c80:	7bba      	ldrb	r2, [r7, #14]
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	701a      	strb	r2, [r3, #0]
		data_arr[1] = len;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	7b7a      	ldrb	r2, [r7, #13]
 8006c8c:	701a      	strb	r2, [r3, #0]

		for(int i=2; i<len+1; i++)
 8006c8e:	2302      	movs	r3, #2
 8006c90:	61bb      	str	r3, [r7, #24]
 8006c92:	e011      	b.n	8006cb8 <sendCommand+0x1cc>
		{
			HAL_UART_Receive(&huart6, &buf, sizeof(buf), 10);
 8006c94:	f107 010f 	add.w	r1, r7, #15
 8006c98:	230a      	movs	r3, #10
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	4811      	ldr	r0, [pc, #68]	; (8006ce4 <sendCommand+0x1f8>)
 8006c9e:	f7fd fd64 	bl	800476a <HAL_UART_Receive>

			if(buf != NULL)
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d004      	beq.n	8006cb2 <sendCommand+0x1c6>
				data_arr[i] = buf;
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	4413      	add	r3, r2
 8006cae:	7bfa      	ldrb	r2, [r7, #15]
 8006cb0:	701a      	strb	r2, [r3, #0]
		for(int i=2; i<len+1; i++)
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	61bb      	str	r3, [r7, #24]
 8006cb8:	7b7b      	ldrb	r3, [r7, #13]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	dde8      	ble.n	8006c94 <sendCommand+0x1a8>

		// EXECUTION CODE
//		for(int i=0; i<len+2; i++){ // for test
//			LidD_res_packet[i] = data_arr[i];
//		}
		HAL_UART_Transmit(&huart3, (uint8_t *)data_arr, 7+4, 100);
 8006cc2:	2364      	movs	r3, #100	; 0x64
 8006cc4:	220b      	movs	r2, #11
 8006cc6:	6939      	ldr	r1, [r7, #16]
 8006cc8:	4807      	ldr	r0, [pc, #28]	; (8006ce8 <sendCommand+0x1fc>)
 8006cca:	f7fd fcbc 	bl	8004646 <HAL_UART_Transmit>

		free(data_arr);
 8006cce:	6938      	ldr	r0, [r7, #16]
 8006cd0:	f000 fa00 	bl	80070d4 <free>
	}

	// for debug
//	HAL_UART_Transmit(&huart3, (uint8_t *)dispenser_req_packet_list[cmd], sizeof(dispenser_req_packet_list[cmd]), 100);
}
 8006cd4:	bf00      	nop
 8006cd6:	3728      	adds	r7, #40	; 0x28
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	2000018c 	.word	0x2000018c
 8006ce0:	20000ad4 	.word	0x20000ad4
 8006ce4:	20000bf4 	.word	0x20000bf4
 8006ce8:	200009ec 	.word	0x200009ec

08006cec <init_iceDispensor>:


#include "User_IceDispenser.h"

bool init_iceDispensor(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICE01_relay_GPIO_Port, ICE01_relay_Pin, GPIO_PIN_SET);	// Relay Open
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	2180      	movs	r1, #128	; 0x80
 8006cf4:	480c      	ldr	r0, [pc, #48]	; (8006d28 <init_iceDispensor+0x3c>)
 8006cf6:	f7fb ff99 	bl	8002c2c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ICE01_water_GPIO_Port, ICE01_water_Pin, GPIO_PIN_SET);
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	480b      	ldr	r0, [pc, #44]	; (8006d2c <init_iceDispensor+0x40>)
 8006d00:	f7fb ff94 	bl	8002c2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICE01_ice_GPIO_Port, ICE01_ice_Pin, GPIO_PIN_SET);
 8006d04:	2201      	movs	r2, #1
 8006d06:	2108      	movs	r1, #8
 8006d08:	4809      	ldr	r0, [pc, #36]	; (8006d30 <init_iceDispensor+0x44>)
 8006d0a:	f7fb ff8f 	bl	8002c2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ICE01_mix_GPIO_Port, ICE01_mix_Pin, GPIO_PIN_SET);
 8006d0e:	2201      	movs	r2, #1
 8006d10:	2108      	movs	r1, #8
 8006d12:	4806      	ldr	r0, [pc, #24]	; (8006d2c <init_iceDispensor+0x40>)
 8006d14:	f7fb ff8a 	bl	8002c2c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8006d18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d1c:	f7fb fc2a 	bl	8002574 <HAL_Delay>

	return true;
 8006d20:	2301      	movs	r3, #1
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	40020c00 	.word	0x40020c00
 8006d2c:	40020800 	.word	0x40020800
 8006d30:	40020000 	.word	0x40020000

08006d34 <lever_control>:

void lever_control(uint32_t exit_time)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
	// lever on
	HAL_GPIO_WritePin(ICE01_relay_GPIO_Port, ICE01_relay_Pin, GPIO_PIN_RESET);	// Relay Close
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2180      	movs	r1, #128	; 0x80
 8006d40:	4807      	ldr	r0, [pc, #28]	; (8006d60 <lever_control+0x2c>)
 8006d42:	f7fb ff73 	bl	8002c2c <HAL_GPIO_WritePin>
	HAL_Delay(exit_time); // unit : ms
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7fb fc14 	bl	8002574 <HAL_Delay>

	// lever off
	HAL_GPIO_WritePin(ICE01_relay_GPIO_Port, ICE01_relay_Pin, GPIO_PIN_SET);	// Relay Open
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	2180      	movs	r1, #128	; 0x80
 8006d50:	4803      	ldr	r0, [pc, #12]	; (8006d60 <lever_control+0x2c>)
 8006d52:	f7fb ff6b 	bl	8002c2c <HAL_GPIO_WritePin>
}
 8006d56:	bf00      	nop
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	40020c00 	.word	0x40020c00

08006d64 <iceDispenser_SetMode>:

void iceDispenser_SetMode(uint16_t water_time, uint16_t ice_time)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	460a      	mov	r2, r1
 8006d6e:	80fb      	strh	r3, [r7, #6]
 8006d70:	4613      	mov	r3, r2
 8006d72:	80bb      	strh	r3, [r7, #4]
	uint16_t wait_time = 500; // 5sec
 8006d74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006d78:	81fb      	strh	r3, [r7, #14]

	if(ice_time == 0){
 8006d7a:	88bb      	ldrh	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d111      	bne.n	8006da4 <iceDispenser_SetMode+0x40>
		HAL_GPIO_WritePin(ICE01_water_GPIO_Port, ICE01_water_Pin, GPIO_PIN_RESET);
 8006d80:	2200      	movs	r2, #0
 8006d82:	2101      	movs	r1, #1
 8006d84:	481c      	ldr	r0, [pc, #112]	; (8006df8 <iceDispenser_SetMode+0x94>)
 8006d86:	f7fb ff51 	bl	8002c2c <HAL_GPIO_WritePin>
		HAL_Delay(wait_time);
 8006d8a:	89fb      	ldrh	r3, [r7, #14]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fb fbf1 	bl	8002574 <HAL_Delay>
		HAL_GPIO_WritePin(ICE01_water_GPIO_Port, ICE01_water_Pin, GPIO_PIN_SET);
 8006d92:	2201      	movs	r2, #1
 8006d94:	2101      	movs	r1, #1
 8006d96:	4818      	ldr	r0, [pc, #96]	; (8006df8 <iceDispenser_SetMode+0x94>)
 8006d98:	f7fb ff48 	bl	8002c2c <HAL_GPIO_WritePin>
		printf("mode : water\n");
 8006d9c:	4817      	ldr	r0, [pc, #92]	; (8006dfc <iceDispenser_SetMode+0x98>)
 8006d9e:	f000 fad9 	bl	8007354 <puts>
		HAL_GPIO_WritePin(ICE01_mix_GPIO_Port, ICE01_mix_Pin, GPIO_PIN_RESET);
		HAL_Delay(wait_time);
		HAL_GPIO_WritePin(ICE01_mix_GPIO_Port, ICE01_mix_Pin, GPIO_PIN_SET);
		printf("mode : mix\n");
	}
}
 8006da2:	e025      	b.n	8006df0 <iceDispenser_SetMode+0x8c>
	else if(water_time == 0){
 8006da4:	88fb      	ldrh	r3, [r7, #6]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d111      	bne.n	8006dce <iceDispenser_SetMode+0x6a>
		HAL_GPIO_WritePin(ICE01_ice_GPIO_Port, ICE01_ice_Pin, GPIO_PIN_RESET);
 8006daa:	2200      	movs	r2, #0
 8006dac:	2108      	movs	r1, #8
 8006dae:	4814      	ldr	r0, [pc, #80]	; (8006e00 <iceDispenser_SetMode+0x9c>)
 8006db0:	f7fb ff3c 	bl	8002c2c <HAL_GPIO_WritePin>
		HAL_Delay(wait_time);
 8006db4:	89fb      	ldrh	r3, [r7, #14]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fb fbdc 	bl	8002574 <HAL_Delay>
		HAL_GPIO_WritePin(ICE01_ice_GPIO_Port, ICE01_ice_Pin, GPIO_PIN_SET);
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	2108      	movs	r1, #8
 8006dc0:	480f      	ldr	r0, [pc, #60]	; (8006e00 <iceDispenser_SetMode+0x9c>)
 8006dc2:	f7fb ff33 	bl	8002c2c <HAL_GPIO_WritePin>
		printf("mode : ice\n");
 8006dc6:	480f      	ldr	r0, [pc, #60]	; (8006e04 <iceDispenser_SetMode+0xa0>)
 8006dc8:	f000 fac4 	bl	8007354 <puts>
}
 8006dcc:	e010      	b.n	8006df0 <iceDispenser_SetMode+0x8c>
		HAL_GPIO_WritePin(ICE01_mix_GPIO_Port, ICE01_mix_Pin, GPIO_PIN_RESET);
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2108      	movs	r1, #8
 8006dd2:	4809      	ldr	r0, [pc, #36]	; (8006df8 <iceDispenser_SetMode+0x94>)
 8006dd4:	f7fb ff2a 	bl	8002c2c <HAL_GPIO_WritePin>
		HAL_Delay(wait_time);
 8006dd8:	89fb      	ldrh	r3, [r7, #14]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fb fbca 	bl	8002574 <HAL_Delay>
		HAL_GPIO_WritePin(ICE01_mix_GPIO_Port, ICE01_mix_Pin, GPIO_PIN_SET);
 8006de0:	2201      	movs	r2, #1
 8006de2:	2108      	movs	r1, #8
 8006de4:	4804      	ldr	r0, [pc, #16]	; (8006df8 <iceDispenser_SetMode+0x94>)
 8006de6:	f7fb ff21 	bl	8002c2c <HAL_GPIO_WritePin>
		printf("mode : mix\n");
 8006dea:	4807      	ldr	r0, [pc, #28]	; (8006e08 <iceDispenser_SetMode+0xa4>)
 8006dec:	f000 fab2 	bl	8007354 <puts>
}
 8006df0:	bf00      	nop
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	40020800 	.word	0x40020800
 8006dfc:	080080e0 	.word	0x080080e0
 8006e00:	40020000 	.word	0x40020000
 8006e04:	080080f0 	.word	0x080080f0
 8006e08:	080080fc 	.word	0x080080fc

08006e0c <startExit>:
{
	return ERROR;
}

bool startExit(uint32_t water_gram, uint32_t ice_gram)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
	uint32_t water_time = 0;
 8006e16:	2300      	movs	r3, #0
 8006e18:	617b      	str	r3, [r7, #20]
	uint32_t ice_time = 2700; //223g/243g
 8006e1a:	f640 238c 	movw	r3, #2700	; 0xa8c
 8006e1e:	613b      	str	r3, [r7, #16]

	if (water_gram == 100)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b64      	cmp	r3, #100	; 0x64
 8006e24:	d102      	bne.n	8006e2c <startExit+0x20>
		water_time = 3000;
 8006e26:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006e2a:	617b      	str	r3, [r7, #20]
	if (ice_gram == 264)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8006e32:	d102      	bne.n	8006e3a <startExit+0x2e>
		ice_time = 3000;
 8006e34:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006e38:	613b      	str	r3, [r7, #16]

	// set mode - ice, water, mix
	iceDispenser_SetMode(water_time, ice_time);
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	b292      	uxth	r2, r2
 8006e42:	4611      	mov	r1, r2
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7ff ff8d 	bl	8006d64 <iceDispenser_SetMode>

	// set exit time
	uint32_t exit_time = 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60fb      	str	r3, [r7, #12]
	if(water_time > ice_time)
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d902      	bls.n	8006e5c <startExit+0x50>
		exit_time = water_time;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	e001      	b.n	8006e60 <startExit+0x54>
	else
		exit_time = ice_time;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	60fb      	str	r3, [r7, #12]
	printf("exit_time : %d\n", exit_time);
 8006e60:	68f9      	ldr	r1, [r7, #12]
 8006e62:	4805      	ldr	r0, [pc, #20]	; (8006e78 <startExit+0x6c>)
 8006e64:	f000 f9f0 	bl	8007248 <iprintf>

	// lever control
	lever_control(exit_time);
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f7ff ff63 	bl	8006d34 <lever_control>

	return true;
 8006e6e:	2301      	movs	r3, #1
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	08008108 	.word	0x08008108

08006e7c <__errno>:
 8006e7c:	4b01      	ldr	r3, [pc, #4]	; (8006e84 <__errno+0x8>)
 8006e7e:	6818      	ldr	r0, [r3, #0]
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	200001f4 	.word	0x200001f4

08006e88 <std>:
 8006e88:	2300      	movs	r3, #0
 8006e8a:	b510      	push	{r4, lr}
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e96:	6083      	str	r3, [r0, #8]
 8006e98:	8181      	strh	r1, [r0, #12]
 8006e9a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e9c:	81c2      	strh	r2, [r0, #14]
 8006e9e:	6183      	str	r3, [r0, #24]
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	2208      	movs	r2, #8
 8006ea4:	305c      	adds	r0, #92	; 0x5c
 8006ea6:	f000 f91d 	bl	80070e4 <memset>
 8006eaa:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <std+0x38>)
 8006eac:	6263      	str	r3, [r4, #36]	; 0x24
 8006eae:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <std+0x3c>)
 8006eb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006eb2:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <std+0x40>)
 8006eb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006eb6:	4b05      	ldr	r3, [pc, #20]	; (8006ecc <std+0x44>)
 8006eb8:	6224      	str	r4, [r4, #32]
 8006eba:	6323      	str	r3, [r4, #48]	; 0x30
 8006ebc:	bd10      	pop	{r4, pc}
 8006ebe:	bf00      	nop
 8006ec0:	08007385 	.word	0x08007385
 8006ec4:	080073a7 	.word	0x080073a7
 8006ec8:	080073df 	.word	0x080073df
 8006ecc:	08007403 	.word	0x08007403

08006ed0 <_cleanup_r>:
 8006ed0:	4901      	ldr	r1, [pc, #4]	; (8006ed8 <_cleanup_r+0x8>)
 8006ed2:	f000 b8af 	b.w	8007034 <_fwalk_reent>
 8006ed6:	bf00      	nop
 8006ed8:	080076dd 	.word	0x080076dd

08006edc <__sfmoreglue>:
 8006edc:	b570      	push	{r4, r5, r6, lr}
 8006ede:	1e4a      	subs	r2, r1, #1
 8006ee0:	2568      	movs	r5, #104	; 0x68
 8006ee2:	4355      	muls	r5, r2
 8006ee4:	460e      	mov	r6, r1
 8006ee6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006eea:	f000 f953 	bl	8007194 <_malloc_r>
 8006eee:	4604      	mov	r4, r0
 8006ef0:	b140      	cbz	r0, 8006f04 <__sfmoreglue+0x28>
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	e9c0 1600 	strd	r1, r6, [r0]
 8006ef8:	300c      	adds	r0, #12
 8006efa:	60a0      	str	r0, [r4, #8]
 8006efc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f00:	f000 f8f0 	bl	80070e4 <memset>
 8006f04:	4620      	mov	r0, r4
 8006f06:	bd70      	pop	{r4, r5, r6, pc}

08006f08 <__sfp_lock_acquire>:
 8006f08:	4801      	ldr	r0, [pc, #4]	; (8006f10 <__sfp_lock_acquire+0x8>)
 8006f0a:	f000 b8d8 	b.w	80070be <__retarget_lock_acquire_recursive>
 8006f0e:	bf00      	nop
 8006f10:	20000d68 	.word	0x20000d68

08006f14 <__sfp_lock_release>:
 8006f14:	4801      	ldr	r0, [pc, #4]	; (8006f1c <__sfp_lock_release+0x8>)
 8006f16:	f000 b8d3 	b.w	80070c0 <__retarget_lock_release_recursive>
 8006f1a:	bf00      	nop
 8006f1c:	20000d68 	.word	0x20000d68

08006f20 <__sinit_lock_acquire>:
 8006f20:	4801      	ldr	r0, [pc, #4]	; (8006f28 <__sinit_lock_acquire+0x8>)
 8006f22:	f000 b8cc 	b.w	80070be <__retarget_lock_acquire_recursive>
 8006f26:	bf00      	nop
 8006f28:	20000d63 	.word	0x20000d63

08006f2c <__sinit_lock_release>:
 8006f2c:	4801      	ldr	r0, [pc, #4]	; (8006f34 <__sinit_lock_release+0x8>)
 8006f2e:	f000 b8c7 	b.w	80070c0 <__retarget_lock_release_recursive>
 8006f32:	bf00      	nop
 8006f34:	20000d63 	.word	0x20000d63

08006f38 <__sinit>:
 8006f38:	b510      	push	{r4, lr}
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	f7ff fff0 	bl	8006f20 <__sinit_lock_acquire>
 8006f40:	69a3      	ldr	r3, [r4, #24]
 8006f42:	b11b      	cbz	r3, 8006f4c <__sinit+0x14>
 8006f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f48:	f7ff bff0 	b.w	8006f2c <__sinit_lock_release>
 8006f4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f50:	6523      	str	r3, [r4, #80]	; 0x50
 8006f52:	4b13      	ldr	r3, [pc, #76]	; (8006fa0 <__sinit+0x68>)
 8006f54:	4a13      	ldr	r2, [pc, #76]	; (8006fa4 <__sinit+0x6c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f5a:	42a3      	cmp	r3, r4
 8006f5c:	bf04      	itt	eq
 8006f5e:	2301      	moveq	r3, #1
 8006f60:	61a3      	streq	r3, [r4, #24]
 8006f62:	4620      	mov	r0, r4
 8006f64:	f000 f820 	bl	8006fa8 <__sfp>
 8006f68:	6060      	str	r0, [r4, #4]
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f000 f81c 	bl	8006fa8 <__sfp>
 8006f70:	60a0      	str	r0, [r4, #8]
 8006f72:	4620      	mov	r0, r4
 8006f74:	f000 f818 	bl	8006fa8 <__sfp>
 8006f78:	2200      	movs	r2, #0
 8006f7a:	60e0      	str	r0, [r4, #12]
 8006f7c:	2104      	movs	r1, #4
 8006f7e:	6860      	ldr	r0, [r4, #4]
 8006f80:	f7ff ff82 	bl	8006e88 <std>
 8006f84:	68a0      	ldr	r0, [r4, #8]
 8006f86:	2201      	movs	r2, #1
 8006f88:	2109      	movs	r1, #9
 8006f8a:	f7ff ff7d 	bl	8006e88 <std>
 8006f8e:	68e0      	ldr	r0, [r4, #12]
 8006f90:	2202      	movs	r2, #2
 8006f92:	2112      	movs	r1, #18
 8006f94:	f7ff ff78 	bl	8006e88 <std>
 8006f98:	2301      	movs	r3, #1
 8006f9a:	61a3      	str	r3, [r4, #24]
 8006f9c:	e7d2      	b.n	8006f44 <__sinit+0xc>
 8006f9e:	bf00      	nop
 8006fa0:	08008190 	.word	0x08008190
 8006fa4:	08006ed1 	.word	0x08006ed1

08006fa8 <__sfp>:
 8006fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006faa:	4607      	mov	r7, r0
 8006fac:	f7ff ffac 	bl	8006f08 <__sfp_lock_acquire>
 8006fb0:	4b1e      	ldr	r3, [pc, #120]	; (800702c <__sfp+0x84>)
 8006fb2:	681e      	ldr	r6, [r3, #0]
 8006fb4:	69b3      	ldr	r3, [r6, #24]
 8006fb6:	b913      	cbnz	r3, 8006fbe <__sfp+0x16>
 8006fb8:	4630      	mov	r0, r6
 8006fba:	f7ff ffbd 	bl	8006f38 <__sinit>
 8006fbe:	3648      	adds	r6, #72	; 0x48
 8006fc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	d503      	bpl.n	8006fd0 <__sfp+0x28>
 8006fc8:	6833      	ldr	r3, [r6, #0]
 8006fca:	b30b      	cbz	r3, 8007010 <__sfp+0x68>
 8006fcc:	6836      	ldr	r6, [r6, #0]
 8006fce:	e7f7      	b.n	8006fc0 <__sfp+0x18>
 8006fd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006fd4:	b9d5      	cbnz	r5, 800700c <__sfp+0x64>
 8006fd6:	4b16      	ldr	r3, [pc, #88]	; (8007030 <__sfp+0x88>)
 8006fd8:	60e3      	str	r3, [r4, #12]
 8006fda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fde:	6665      	str	r5, [r4, #100]	; 0x64
 8006fe0:	f000 f86c 	bl	80070bc <__retarget_lock_init_recursive>
 8006fe4:	f7ff ff96 	bl	8006f14 <__sfp_lock_release>
 8006fe8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006fec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ff0:	6025      	str	r5, [r4, #0]
 8006ff2:	61a5      	str	r5, [r4, #24]
 8006ff4:	2208      	movs	r2, #8
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ffc:	f000 f872 	bl	80070e4 <memset>
 8007000:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007004:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007008:	4620      	mov	r0, r4
 800700a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800700c:	3468      	adds	r4, #104	; 0x68
 800700e:	e7d9      	b.n	8006fc4 <__sfp+0x1c>
 8007010:	2104      	movs	r1, #4
 8007012:	4638      	mov	r0, r7
 8007014:	f7ff ff62 	bl	8006edc <__sfmoreglue>
 8007018:	4604      	mov	r4, r0
 800701a:	6030      	str	r0, [r6, #0]
 800701c:	2800      	cmp	r0, #0
 800701e:	d1d5      	bne.n	8006fcc <__sfp+0x24>
 8007020:	f7ff ff78 	bl	8006f14 <__sfp_lock_release>
 8007024:	230c      	movs	r3, #12
 8007026:	603b      	str	r3, [r7, #0]
 8007028:	e7ee      	b.n	8007008 <__sfp+0x60>
 800702a:	bf00      	nop
 800702c:	08008190 	.word	0x08008190
 8007030:	ffff0001 	.word	0xffff0001

08007034 <_fwalk_reent>:
 8007034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007038:	4606      	mov	r6, r0
 800703a:	4688      	mov	r8, r1
 800703c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007040:	2700      	movs	r7, #0
 8007042:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007046:	f1b9 0901 	subs.w	r9, r9, #1
 800704a:	d505      	bpl.n	8007058 <_fwalk_reent+0x24>
 800704c:	6824      	ldr	r4, [r4, #0]
 800704e:	2c00      	cmp	r4, #0
 8007050:	d1f7      	bne.n	8007042 <_fwalk_reent+0xe>
 8007052:	4638      	mov	r0, r7
 8007054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007058:	89ab      	ldrh	r3, [r5, #12]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d907      	bls.n	800706e <_fwalk_reent+0x3a>
 800705e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007062:	3301      	adds	r3, #1
 8007064:	d003      	beq.n	800706e <_fwalk_reent+0x3a>
 8007066:	4629      	mov	r1, r5
 8007068:	4630      	mov	r0, r6
 800706a:	47c0      	blx	r8
 800706c:	4307      	orrs	r7, r0
 800706e:	3568      	adds	r5, #104	; 0x68
 8007070:	e7e9      	b.n	8007046 <_fwalk_reent+0x12>
	...

08007074 <__libc_init_array>:
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	4d0d      	ldr	r5, [pc, #52]	; (80070ac <__libc_init_array+0x38>)
 8007078:	4c0d      	ldr	r4, [pc, #52]	; (80070b0 <__libc_init_array+0x3c>)
 800707a:	1b64      	subs	r4, r4, r5
 800707c:	10a4      	asrs	r4, r4, #2
 800707e:	2600      	movs	r6, #0
 8007080:	42a6      	cmp	r6, r4
 8007082:	d109      	bne.n	8007098 <__libc_init_array+0x24>
 8007084:	4d0b      	ldr	r5, [pc, #44]	; (80070b4 <__libc_init_array+0x40>)
 8007086:	4c0c      	ldr	r4, [pc, #48]	; (80070b8 <__libc_init_array+0x44>)
 8007088:	f000 ff08 	bl	8007e9c <_init>
 800708c:	1b64      	subs	r4, r4, r5
 800708e:	10a4      	asrs	r4, r4, #2
 8007090:	2600      	movs	r6, #0
 8007092:	42a6      	cmp	r6, r4
 8007094:	d105      	bne.n	80070a2 <__libc_init_array+0x2e>
 8007096:	bd70      	pop	{r4, r5, r6, pc}
 8007098:	f855 3b04 	ldr.w	r3, [r5], #4
 800709c:	4798      	blx	r3
 800709e:	3601      	adds	r6, #1
 80070a0:	e7ee      	b.n	8007080 <__libc_init_array+0xc>
 80070a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a6:	4798      	blx	r3
 80070a8:	3601      	adds	r6, #1
 80070aa:	e7f2      	b.n	8007092 <__libc_init_array+0x1e>
 80070ac:	080081d0 	.word	0x080081d0
 80070b0:	080081d0 	.word	0x080081d0
 80070b4:	080081d0 	.word	0x080081d0
 80070b8:	080081d4 	.word	0x080081d4

080070bc <__retarget_lock_init_recursive>:
 80070bc:	4770      	bx	lr

080070be <__retarget_lock_acquire_recursive>:
 80070be:	4770      	bx	lr

080070c0 <__retarget_lock_release_recursive>:
 80070c0:	4770      	bx	lr
	...

080070c4 <malloc>:
 80070c4:	4b02      	ldr	r3, [pc, #8]	; (80070d0 <malloc+0xc>)
 80070c6:	4601      	mov	r1, r0
 80070c8:	6818      	ldr	r0, [r3, #0]
 80070ca:	f000 b863 	b.w	8007194 <_malloc_r>
 80070ce:	bf00      	nop
 80070d0:	200001f4 	.word	0x200001f4

080070d4 <free>:
 80070d4:	4b02      	ldr	r3, [pc, #8]	; (80070e0 <free+0xc>)
 80070d6:	4601      	mov	r1, r0
 80070d8:	6818      	ldr	r0, [r3, #0]
 80070da:	f000 b80b 	b.w	80070f4 <_free_r>
 80070de:	bf00      	nop
 80070e0:	200001f4 	.word	0x200001f4

080070e4 <memset>:
 80070e4:	4402      	add	r2, r0
 80070e6:	4603      	mov	r3, r0
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d100      	bne.n	80070ee <memset+0xa>
 80070ec:	4770      	bx	lr
 80070ee:	f803 1b01 	strb.w	r1, [r3], #1
 80070f2:	e7f9      	b.n	80070e8 <memset+0x4>

080070f4 <_free_r>:
 80070f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070f6:	2900      	cmp	r1, #0
 80070f8:	d048      	beq.n	800718c <_free_r+0x98>
 80070fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070fe:	9001      	str	r0, [sp, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	f1a1 0404 	sub.w	r4, r1, #4
 8007106:	bfb8      	it	lt
 8007108:	18e4      	addlt	r4, r4, r3
 800710a:	f000 fb99 	bl	8007840 <__malloc_lock>
 800710e:	4a20      	ldr	r2, [pc, #128]	; (8007190 <_free_r+0x9c>)
 8007110:	9801      	ldr	r0, [sp, #4]
 8007112:	6813      	ldr	r3, [r2, #0]
 8007114:	4615      	mov	r5, r2
 8007116:	b933      	cbnz	r3, 8007126 <_free_r+0x32>
 8007118:	6063      	str	r3, [r4, #4]
 800711a:	6014      	str	r4, [r2, #0]
 800711c:	b003      	add	sp, #12
 800711e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007122:	f000 bb93 	b.w	800784c <__malloc_unlock>
 8007126:	42a3      	cmp	r3, r4
 8007128:	d90b      	bls.n	8007142 <_free_r+0x4e>
 800712a:	6821      	ldr	r1, [r4, #0]
 800712c:	1862      	adds	r2, r4, r1
 800712e:	4293      	cmp	r3, r2
 8007130:	bf04      	itt	eq
 8007132:	681a      	ldreq	r2, [r3, #0]
 8007134:	685b      	ldreq	r3, [r3, #4]
 8007136:	6063      	str	r3, [r4, #4]
 8007138:	bf04      	itt	eq
 800713a:	1852      	addeq	r2, r2, r1
 800713c:	6022      	streq	r2, [r4, #0]
 800713e:	602c      	str	r4, [r5, #0]
 8007140:	e7ec      	b.n	800711c <_free_r+0x28>
 8007142:	461a      	mov	r2, r3
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	b10b      	cbz	r3, 800714c <_free_r+0x58>
 8007148:	42a3      	cmp	r3, r4
 800714a:	d9fa      	bls.n	8007142 <_free_r+0x4e>
 800714c:	6811      	ldr	r1, [r2, #0]
 800714e:	1855      	adds	r5, r2, r1
 8007150:	42a5      	cmp	r5, r4
 8007152:	d10b      	bne.n	800716c <_free_r+0x78>
 8007154:	6824      	ldr	r4, [r4, #0]
 8007156:	4421      	add	r1, r4
 8007158:	1854      	adds	r4, r2, r1
 800715a:	42a3      	cmp	r3, r4
 800715c:	6011      	str	r1, [r2, #0]
 800715e:	d1dd      	bne.n	800711c <_free_r+0x28>
 8007160:	681c      	ldr	r4, [r3, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	6053      	str	r3, [r2, #4]
 8007166:	4421      	add	r1, r4
 8007168:	6011      	str	r1, [r2, #0]
 800716a:	e7d7      	b.n	800711c <_free_r+0x28>
 800716c:	d902      	bls.n	8007174 <_free_r+0x80>
 800716e:	230c      	movs	r3, #12
 8007170:	6003      	str	r3, [r0, #0]
 8007172:	e7d3      	b.n	800711c <_free_r+0x28>
 8007174:	6825      	ldr	r5, [r4, #0]
 8007176:	1961      	adds	r1, r4, r5
 8007178:	428b      	cmp	r3, r1
 800717a:	bf04      	itt	eq
 800717c:	6819      	ldreq	r1, [r3, #0]
 800717e:	685b      	ldreq	r3, [r3, #4]
 8007180:	6063      	str	r3, [r4, #4]
 8007182:	bf04      	itt	eq
 8007184:	1949      	addeq	r1, r1, r5
 8007186:	6021      	streq	r1, [r4, #0]
 8007188:	6054      	str	r4, [r2, #4]
 800718a:	e7c7      	b.n	800711c <_free_r+0x28>
 800718c:	b003      	add	sp, #12
 800718e:	bd30      	pop	{r4, r5, pc}
 8007190:	20000998 	.word	0x20000998

08007194 <_malloc_r>:
 8007194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007196:	1ccd      	adds	r5, r1, #3
 8007198:	f025 0503 	bic.w	r5, r5, #3
 800719c:	3508      	adds	r5, #8
 800719e:	2d0c      	cmp	r5, #12
 80071a0:	bf38      	it	cc
 80071a2:	250c      	movcc	r5, #12
 80071a4:	2d00      	cmp	r5, #0
 80071a6:	4606      	mov	r6, r0
 80071a8:	db01      	blt.n	80071ae <_malloc_r+0x1a>
 80071aa:	42a9      	cmp	r1, r5
 80071ac:	d903      	bls.n	80071b6 <_malloc_r+0x22>
 80071ae:	230c      	movs	r3, #12
 80071b0:	6033      	str	r3, [r6, #0]
 80071b2:	2000      	movs	r0, #0
 80071b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071b6:	f000 fb43 	bl	8007840 <__malloc_lock>
 80071ba:	4921      	ldr	r1, [pc, #132]	; (8007240 <_malloc_r+0xac>)
 80071bc:	680a      	ldr	r2, [r1, #0]
 80071be:	4614      	mov	r4, r2
 80071c0:	b99c      	cbnz	r4, 80071ea <_malloc_r+0x56>
 80071c2:	4f20      	ldr	r7, [pc, #128]	; (8007244 <_malloc_r+0xb0>)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	b923      	cbnz	r3, 80071d2 <_malloc_r+0x3e>
 80071c8:	4621      	mov	r1, r4
 80071ca:	4630      	mov	r0, r6
 80071cc:	f000 f8ca 	bl	8007364 <_sbrk_r>
 80071d0:	6038      	str	r0, [r7, #0]
 80071d2:	4629      	mov	r1, r5
 80071d4:	4630      	mov	r0, r6
 80071d6:	f000 f8c5 	bl	8007364 <_sbrk_r>
 80071da:	1c43      	adds	r3, r0, #1
 80071dc:	d123      	bne.n	8007226 <_malloc_r+0x92>
 80071de:	230c      	movs	r3, #12
 80071e0:	6033      	str	r3, [r6, #0]
 80071e2:	4630      	mov	r0, r6
 80071e4:	f000 fb32 	bl	800784c <__malloc_unlock>
 80071e8:	e7e3      	b.n	80071b2 <_malloc_r+0x1e>
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	1b5b      	subs	r3, r3, r5
 80071ee:	d417      	bmi.n	8007220 <_malloc_r+0x8c>
 80071f0:	2b0b      	cmp	r3, #11
 80071f2:	d903      	bls.n	80071fc <_malloc_r+0x68>
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	441c      	add	r4, r3
 80071f8:	6025      	str	r5, [r4, #0]
 80071fa:	e004      	b.n	8007206 <_malloc_r+0x72>
 80071fc:	6863      	ldr	r3, [r4, #4]
 80071fe:	42a2      	cmp	r2, r4
 8007200:	bf0c      	ite	eq
 8007202:	600b      	streq	r3, [r1, #0]
 8007204:	6053      	strne	r3, [r2, #4]
 8007206:	4630      	mov	r0, r6
 8007208:	f000 fb20 	bl	800784c <__malloc_unlock>
 800720c:	f104 000b 	add.w	r0, r4, #11
 8007210:	1d23      	adds	r3, r4, #4
 8007212:	f020 0007 	bic.w	r0, r0, #7
 8007216:	1ac2      	subs	r2, r0, r3
 8007218:	d0cc      	beq.n	80071b4 <_malloc_r+0x20>
 800721a:	1a1b      	subs	r3, r3, r0
 800721c:	50a3      	str	r3, [r4, r2]
 800721e:	e7c9      	b.n	80071b4 <_malloc_r+0x20>
 8007220:	4622      	mov	r2, r4
 8007222:	6864      	ldr	r4, [r4, #4]
 8007224:	e7cc      	b.n	80071c0 <_malloc_r+0x2c>
 8007226:	1cc4      	adds	r4, r0, #3
 8007228:	f024 0403 	bic.w	r4, r4, #3
 800722c:	42a0      	cmp	r0, r4
 800722e:	d0e3      	beq.n	80071f8 <_malloc_r+0x64>
 8007230:	1a21      	subs	r1, r4, r0
 8007232:	4630      	mov	r0, r6
 8007234:	f000 f896 	bl	8007364 <_sbrk_r>
 8007238:	3001      	adds	r0, #1
 800723a:	d1dd      	bne.n	80071f8 <_malloc_r+0x64>
 800723c:	e7cf      	b.n	80071de <_malloc_r+0x4a>
 800723e:	bf00      	nop
 8007240:	20000998 	.word	0x20000998
 8007244:	2000099c 	.word	0x2000099c

08007248 <iprintf>:
 8007248:	b40f      	push	{r0, r1, r2, r3}
 800724a:	4b0a      	ldr	r3, [pc, #40]	; (8007274 <iprintf+0x2c>)
 800724c:	b513      	push	{r0, r1, r4, lr}
 800724e:	681c      	ldr	r4, [r3, #0]
 8007250:	b124      	cbz	r4, 800725c <iprintf+0x14>
 8007252:	69a3      	ldr	r3, [r4, #24]
 8007254:	b913      	cbnz	r3, 800725c <iprintf+0x14>
 8007256:	4620      	mov	r0, r4
 8007258:	f7ff fe6e 	bl	8006f38 <__sinit>
 800725c:	ab05      	add	r3, sp, #20
 800725e:	9a04      	ldr	r2, [sp, #16]
 8007260:	68a1      	ldr	r1, [r4, #8]
 8007262:	9301      	str	r3, [sp, #4]
 8007264:	4620      	mov	r0, r4
 8007266:	f000 fb21 	bl	80078ac <_vfiprintf_r>
 800726a:	b002      	add	sp, #8
 800726c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007270:	b004      	add	sp, #16
 8007272:	4770      	bx	lr
 8007274:	200001f4 	.word	0x200001f4

08007278 <_puts_r>:
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	460e      	mov	r6, r1
 800727c:	4605      	mov	r5, r0
 800727e:	b118      	cbz	r0, 8007288 <_puts_r+0x10>
 8007280:	6983      	ldr	r3, [r0, #24]
 8007282:	b90b      	cbnz	r3, 8007288 <_puts_r+0x10>
 8007284:	f7ff fe58 	bl	8006f38 <__sinit>
 8007288:	69ab      	ldr	r3, [r5, #24]
 800728a:	68ac      	ldr	r4, [r5, #8]
 800728c:	b913      	cbnz	r3, 8007294 <_puts_r+0x1c>
 800728e:	4628      	mov	r0, r5
 8007290:	f7ff fe52 	bl	8006f38 <__sinit>
 8007294:	4b2c      	ldr	r3, [pc, #176]	; (8007348 <_puts_r+0xd0>)
 8007296:	429c      	cmp	r4, r3
 8007298:	d120      	bne.n	80072dc <_puts_r+0x64>
 800729a:	686c      	ldr	r4, [r5, #4]
 800729c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800729e:	07db      	lsls	r3, r3, #31
 80072a0:	d405      	bmi.n	80072ae <_puts_r+0x36>
 80072a2:	89a3      	ldrh	r3, [r4, #12]
 80072a4:	0598      	lsls	r0, r3, #22
 80072a6:	d402      	bmi.n	80072ae <_puts_r+0x36>
 80072a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072aa:	f7ff ff08 	bl	80070be <__retarget_lock_acquire_recursive>
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	0719      	lsls	r1, r3, #28
 80072b2:	d51d      	bpl.n	80072f0 <_puts_r+0x78>
 80072b4:	6923      	ldr	r3, [r4, #16]
 80072b6:	b1db      	cbz	r3, 80072f0 <_puts_r+0x78>
 80072b8:	3e01      	subs	r6, #1
 80072ba:	68a3      	ldr	r3, [r4, #8]
 80072bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072c0:	3b01      	subs	r3, #1
 80072c2:	60a3      	str	r3, [r4, #8]
 80072c4:	bb39      	cbnz	r1, 8007316 <_puts_r+0x9e>
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	da38      	bge.n	800733c <_puts_r+0xc4>
 80072ca:	4622      	mov	r2, r4
 80072cc:	210a      	movs	r1, #10
 80072ce:	4628      	mov	r0, r5
 80072d0:	f000 f89c 	bl	800740c <__swbuf_r>
 80072d4:	3001      	adds	r0, #1
 80072d6:	d011      	beq.n	80072fc <_puts_r+0x84>
 80072d8:	250a      	movs	r5, #10
 80072da:	e011      	b.n	8007300 <_puts_r+0x88>
 80072dc:	4b1b      	ldr	r3, [pc, #108]	; (800734c <_puts_r+0xd4>)
 80072de:	429c      	cmp	r4, r3
 80072e0:	d101      	bne.n	80072e6 <_puts_r+0x6e>
 80072e2:	68ac      	ldr	r4, [r5, #8]
 80072e4:	e7da      	b.n	800729c <_puts_r+0x24>
 80072e6:	4b1a      	ldr	r3, [pc, #104]	; (8007350 <_puts_r+0xd8>)
 80072e8:	429c      	cmp	r4, r3
 80072ea:	bf08      	it	eq
 80072ec:	68ec      	ldreq	r4, [r5, #12]
 80072ee:	e7d5      	b.n	800729c <_puts_r+0x24>
 80072f0:	4621      	mov	r1, r4
 80072f2:	4628      	mov	r0, r5
 80072f4:	f000 f8ee 	bl	80074d4 <__swsetup_r>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	d0dd      	beq.n	80072b8 <_puts_r+0x40>
 80072fc:	f04f 35ff 	mov.w	r5, #4294967295
 8007300:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007302:	07da      	lsls	r2, r3, #31
 8007304:	d405      	bmi.n	8007312 <_puts_r+0x9a>
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	059b      	lsls	r3, r3, #22
 800730a:	d402      	bmi.n	8007312 <_puts_r+0x9a>
 800730c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800730e:	f7ff fed7 	bl	80070c0 <__retarget_lock_release_recursive>
 8007312:	4628      	mov	r0, r5
 8007314:	bd70      	pop	{r4, r5, r6, pc}
 8007316:	2b00      	cmp	r3, #0
 8007318:	da04      	bge.n	8007324 <_puts_r+0xac>
 800731a:	69a2      	ldr	r2, [r4, #24]
 800731c:	429a      	cmp	r2, r3
 800731e:	dc06      	bgt.n	800732e <_puts_r+0xb6>
 8007320:	290a      	cmp	r1, #10
 8007322:	d004      	beq.n	800732e <_puts_r+0xb6>
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	1c5a      	adds	r2, r3, #1
 8007328:	6022      	str	r2, [r4, #0]
 800732a:	7019      	strb	r1, [r3, #0]
 800732c:	e7c5      	b.n	80072ba <_puts_r+0x42>
 800732e:	4622      	mov	r2, r4
 8007330:	4628      	mov	r0, r5
 8007332:	f000 f86b 	bl	800740c <__swbuf_r>
 8007336:	3001      	adds	r0, #1
 8007338:	d1bf      	bne.n	80072ba <_puts_r+0x42>
 800733a:	e7df      	b.n	80072fc <_puts_r+0x84>
 800733c:	6823      	ldr	r3, [r4, #0]
 800733e:	250a      	movs	r5, #10
 8007340:	1c5a      	adds	r2, r3, #1
 8007342:	6022      	str	r2, [r4, #0]
 8007344:	701d      	strb	r5, [r3, #0]
 8007346:	e7db      	b.n	8007300 <_puts_r+0x88>
 8007348:	08008150 	.word	0x08008150
 800734c:	08008170 	.word	0x08008170
 8007350:	08008130 	.word	0x08008130

08007354 <puts>:
 8007354:	4b02      	ldr	r3, [pc, #8]	; (8007360 <puts+0xc>)
 8007356:	4601      	mov	r1, r0
 8007358:	6818      	ldr	r0, [r3, #0]
 800735a:	f7ff bf8d 	b.w	8007278 <_puts_r>
 800735e:	bf00      	nop
 8007360:	200001f4 	.word	0x200001f4

08007364 <_sbrk_r>:
 8007364:	b538      	push	{r3, r4, r5, lr}
 8007366:	4d06      	ldr	r5, [pc, #24]	; (8007380 <_sbrk_r+0x1c>)
 8007368:	2300      	movs	r3, #0
 800736a:	4604      	mov	r4, r0
 800736c:	4608      	mov	r0, r1
 800736e:	602b      	str	r3, [r5, #0]
 8007370:	f7fb f84c 	bl	800240c <_sbrk>
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	d102      	bne.n	800737e <_sbrk_r+0x1a>
 8007378:	682b      	ldr	r3, [r5, #0]
 800737a:	b103      	cbz	r3, 800737e <_sbrk_r+0x1a>
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	bd38      	pop	{r3, r4, r5, pc}
 8007380:	20000d6c 	.word	0x20000d6c

08007384 <__sread>:
 8007384:	b510      	push	{r4, lr}
 8007386:	460c      	mov	r4, r1
 8007388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800738c:	f000 fd52 	bl	8007e34 <_read_r>
 8007390:	2800      	cmp	r0, #0
 8007392:	bfab      	itete	ge
 8007394:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007396:	89a3      	ldrhlt	r3, [r4, #12]
 8007398:	181b      	addge	r3, r3, r0
 800739a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800739e:	bfac      	ite	ge
 80073a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80073a2:	81a3      	strhlt	r3, [r4, #12]
 80073a4:	bd10      	pop	{r4, pc}

080073a6 <__swrite>:
 80073a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073aa:	461f      	mov	r7, r3
 80073ac:	898b      	ldrh	r3, [r1, #12]
 80073ae:	05db      	lsls	r3, r3, #23
 80073b0:	4605      	mov	r5, r0
 80073b2:	460c      	mov	r4, r1
 80073b4:	4616      	mov	r6, r2
 80073b6:	d505      	bpl.n	80073c4 <__swrite+0x1e>
 80073b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073bc:	2302      	movs	r3, #2
 80073be:	2200      	movs	r2, #0
 80073c0:	f000 f9c8 	bl	8007754 <_lseek_r>
 80073c4:	89a3      	ldrh	r3, [r4, #12]
 80073c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073ce:	81a3      	strh	r3, [r4, #12]
 80073d0:	4632      	mov	r2, r6
 80073d2:	463b      	mov	r3, r7
 80073d4:	4628      	mov	r0, r5
 80073d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073da:	f000 b869 	b.w	80074b0 <_write_r>

080073de <__sseek>:
 80073de:	b510      	push	{r4, lr}
 80073e0:	460c      	mov	r4, r1
 80073e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e6:	f000 f9b5 	bl	8007754 <_lseek_r>
 80073ea:	1c43      	adds	r3, r0, #1
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	bf15      	itete	ne
 80073f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80073f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073fa:	81a3      	strheq	r3, [r4, #12]
 80073fc:	bf18      	it	ne
 80073fe:	81a3      	strhne	r3, [r4, #12]
 8007400:	bd10      	pop	{r4, pc}

08007402 <__sclose>:
 8007402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007406:	f000 b8d3 	b.w	80075b0 <_close_r>
	...

0800740c <__swbuf_r>:
 800740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740e:	460e      	mov	r6, r1
 8007410:	4614      	mov	r4, r2
 8007412:	4605      	mov	r5, r0
 8007414:	b118      	cbz	r0, 800741e <__swbuf_r+0x12>
 8007416:	6983      	ldr	r3, [r0, #24]
 8007418:	b90b      	cbnz	r3, 800741e <__swbuf_r+0x12>
 800741a:	f7ff fd8d 	bl	8006f38 <__sinit>
 800741e:	4b21      	ldr	r3, [pc, #132]	; (80074a4 <__swbuf_r+0x98>)
 8007420:	429c      	cmp	r4, r3
 8007422:	d12b      	bne.n	800747c <__swbuf_r+0x70>
 8007424:	686c      	ldr	r4, [r5, #4]
 8007426:	69a3      	ldr	r3, [r4, #24]
 8007428:	60a3      	str	r3, [r4, #8]
 800742a:	89a3      	ldrh	r3, [r4, #12]
 800742c:	071a      	lsls	r2, r3, #28
 800742e:	d52f      	bpl.n	8007490 <__swbuf_r+0x84>
 8007430:	6923      	ldr	r3, [r4, #16]
 8007432:	b36b      	cbz	r3, 8007490 <__swbuf_r+0x84>
 8007434:	6923      	ldr	r3, [r4, #16]
 8007436:	6820      	ldr	r0, [r4, #0]
 8007438:	1ac0      	subs	r0, r0, r3
 800743a:	6963      	ldr	r3, [r4, #20]
 800743c:	b2f6      	uxtb	r6, r6
 800743e:	4283      	cmp	r3, r0
 8007440:	4637      	mov	r7, r6
 8007442:	dc04      	bgt.n	800744e <__swbuf_r+0x42>
 8007444:	4621      	mov	r1, r4
 8007446:	4628      	mov	r0, r5
 8007448:	f000 f948 	bl	80076dc <_fflush_r>
 800744c:	bb30      	cbnz	r0, 800749c <__swbuf_r+0x90>
 800744e:	68a3      	ldr	r3, [r4, #8]
 8007450:	3b01      	subs	r3, #1
 8007452:	60a3      	str	r3, [r4, #8]
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	6022      	str	r2, [r4, #0]
 800745a:	701e      	strb	r6, [r3, #0]
 800745c:	6963      	ldr	r3, [r4, #20]
 800745e:	3001      	adds	r0, #1
 8007460:	4283      	cmp	r3, r0
 8007462:	d004      	beq.n	800746e <__swbuf_r+0x62>
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	07db      	lsls	r3, r3, #31
 8007468:	d506      	bpl.n	8007478 <__swbuf_r+0x6c>
 800746a:	2e0a      	cmp	r6, #10
 800746c:	d104      	bne.n	8007478 <__swbuf_r+0x6c>
 800746e:	4621      	mov	r1, r4
 8007470:	4628      	mov	r0, r5
 8007472:	f000 f933 	bl	80076dc <_fflush_r>
 8007476:	b988      	cbnz	r0, 800749c <__swbuf_r+0x90>
 8007478:	4638      	mov	r0, r7
 800747a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800747c:	4b0a      	ldr	r3, [pc, #40]	; (80074a8 <__swbuf_r+0x9c>)
 800747e:	429c      	cmp	r4, r3
 8007480:	d101      	bne.n	8007486 <__swbuf_r+0x7a>
 8007482:	68ac      	ldr	r4, [r5, #8]
 8007484:	e7cf      	b.n	8007426 <__swbuf_r+0x1a>
 8007486:	4b09      	ldr	r3, [pc, #36]	; (80074ac <__swbuf_r+0xa0>)
 8007488:	429c      	cmp	r4, r3
 800748a:	bf08      	it	eq
 800748c:	68ec      	ldreq	r4, [r5, #12]
 800748e:	e7ca      	b.n	8007426 <__swbuf_r+0x1a>
 8007490:	4621      	mov	r1, r4
 8007492:	4628      	mov	r0, r5
 8007494:	f000 f81e 	bl	80074d4 <__swsetup_r>
 8007498:	2800      	cmp	r0, #0
 800749a:	d0cb      	beq.n	8007434 <__swbuf_r+0x28>
 800749c:	f04f 37ff 	mov.w	r7, #4294967295
 80074a0:	e7ea      	b.n	8007478 <__swbuf_r+0x6c>
 80074a2:	bf00      	nop
 80074a4:	08008150 	.word	0x08008150
 80074a8:	08008170 	.word	0x08008170
 80074ac:	08008130 	.word	0x08008130

080074b0 <_write_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4d07      	ldr	r5, [pc, #28]	; (80074d0 <_write_r+0x20>)
 80074b4:	4604      	mov	r4, r0
 80074b6:	4608      	mov	r0, r1
 80074b8:	4611      	mov	r1, r2
 80074ba:	2200      	movs	r2, #0
 80074bc:	602a      	str	r2, [r5, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	f7f9 fc58 	bl	8000d74 <_write>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d102      	bne.n	80074ce <_write_r+0x1e>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	b103      	cbz	r3, 80074ce <_write_r+0x1e>
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	20000d6c 	.word	0x20000d6c

080074d4 <__swsetup_r>:
 80074d4:	4b32      	ldr	r3, [pc, #200]	; (80075a0 <__swsetup_r+0xcc>)
 80074d6:	b570      	push	{r4, r5, r6, lr}
 80074d8:	681d      	ldr	r5, [r3, #0]
 80074da:	4606      	mov	r6, r0
 80074dc:	460c      	mov	r4, r1
 80074de:	b125      	cbz	r5, 80074ea <__swsetup_r+0x16>
 80074e0:	69ab      	ldr	r3, [r5, #24]
 80074e2:	b913      	cbnz	r3, 80074ea <__swsetup_r+0x16>
 80074e4:	4628      	mov	r0, r5
 80074e6:	f7ff fd27 	bl	8006f38 <__sinit>
 80074ea:	4b2e      	ldr	r3, [pc, #184]	; (80075a4 <__swsetup_r+0xd0>)
 80074ec:	429c      	cmp	r4, r3
 80074ee:	d10f      	bne.n	8007510 <__swsetup_r+0x3c>
 80074f0:	686c      	ldr	r4, [r5, #4]
 80074f2:	89a3      	ldrh	r3, [r4, #12]
 80074f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074f8:	0719      	lsls	r1, r3, #28
 80074fa:	d42c      	bmi.n	8007556 <__swsetup_r+0x82>
 80074fc:	06dd      	lsls	r5, r3, #27
 80074fe:	d411      	bmi.n	8007524 <__swsetup_r+0x50>
 8007500:	2309      	movs	r3, #9
 8007502:	6033      	str	r3, [r6, #0]
 8007504:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007508:	81a3      	strh	r3, [r4, #12]
 800750a:	f04f 30ff 	mov.w	r0, #4294967295
 800750e:	e03e      	b.n	800758e <__swsetup_r+0xba>
 8007510:	4b25      	ldr	r3, [pc, #148]	; (80075a8 <__swsetup_r+0xd4>)
 8007512:	429c      	cmp	r4, r3
 8007514:	d101      	bne.n	800751a <__swsetup_r+0x46>
 8007516:	68ac      	ldr	r4, [r5, #8]
 8007518:	e7eb      	b.n	80074f2 <__swsetup_r+0x1e>
 800751a:	4b24      	ldr	r3, [pc, #144]	; (80075ac <__swsetup_r+0xd8>)
 800751c:	429c      	cmp	r4, r3
 800751e:	bf08      	it	eq
 8007520:	68ec      	ldreq	r4, [r5, #12]
 8007522:	e7e6      	b.n	80074f2 <__swsetup_r+0x1e>
 8007524:	0758      	lsls	r0, r3, #29
 8007526:	d512      	bpl.n	800754e <__swsetup_r+0x7a>
 8007528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800752a:	b141      	cbz	r1, 800753e <__swsetup_r+0x6a>
 800752c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007530:	4299      	cmp	r1, r3
 8007532:	d002      	beq.n	800753a <__swsetup_r+0x66>
 8007534:	4630      	mov	r0, r6
 8007536:	f7ff fddd 	bl	80070f4 <_free_r>
 800753a:	2300      	movs	r3, #0
 800753c:	6363      	str	r3, [r4, #52]	; 0x34
 800753e:	89a3      	ldrh	r3, [r4, #12]
 8007540:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007544:	81a3      	strh	r3, [r4, #12]
 8007546:	2300      	movs	r3, #0
 8007548:	6063      	str	r3, [r4, #4]
 800754a:	6923      	ldr	r3, [r4, #16]
 800754c:	6023      	str	r3, [r4, #0]
 800754e:	89a3      	ldrh	r3, [r4, #12]
 8007550:	f043 0308 	orr.w	r3, r3, #8
 8007554:	81a3      	strh	r3, [r4, #12]
 8007556:	6923      	ldr	r3, [r4, #16]
 8007558:	b94b      	cbnz	r3, 800756e <__swsetup_r+0x9a>
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007564:	d003      	beq.n	800756e <__swsetup_r+0x9a>
 8007566:	4621      	mov	r1, r4
 8007568:	4630      	mov	r0, r6
 800756a:	f000 f929 	bl	80077c0 <__smakebuf_r>
 800756e:	89a0      	ldrh	r0, [r4, #12]
 8007570:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007574:	f010 0301 	ands.w	r3, r0, #1
 8007578:	d00a      	beq.n	8007590 <__swsetup_r+0xbc>
 800757a:	2300      	movs	r3, #0
 800757c:	60a3      	str	r3, [r4, #8]
 800757e:	6963      	ldr	r3, [r4, #20]
 8007580:	425b      	negs	r3, r3
 8007582:	61a3      	str	r3, [r4, #24]
 8007584:	6923      	ldr	r3, [r4, #16]
 8007586:	b943      	cbnz	r3, 800759a <__swsetup_r+0xc6>
 8007588:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800758c:	d1ba      	bne.n	8007504 <__swsetup_r+0x30>
 800758e:	bd70      	pop	{r4, r5, r6, pc}
 8007590:	0781      	lsls	r1, r0, #30
 8007592:	bf58      	it	pl
 8007594:	6963      	ldrpl	r3, [r4, #20]
 8007596:	60a3      	str	r3, [r4, #8]
 8007598:	e7f4      	b.n	8007584 <__swsetup_r+0xb0>
 800759a:	2000      	movs	r0, #0
 800759c:	e7f7      	b.n	800758e <__swsetup_r+0xba>
 800759e:	bf00      	nop
 80075a0:	200001f4 	.word	0x200001f4
 80075a4:	08008150 	.word	0x08008150
 80075a8:	08008170 	.word	0x08008170
 80075ac:	08008130 	.word	0x08008130

080075b0 <_close_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	4d06      	ldr	r5, [pc, #24]	; (80075cc <_close_r+0x1c>)
 80075b4:	2300      	movs	r3, #0
 80075b6:	4604      	mov	r4, r0
 80075b8:	4608      	mov	r0, r1
 80075ba:	602b      	str	r3, [r5, #0]
 80075bc:	f7fa fef1 	bl	80023a2 <_close>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	d102      	bne.n	80075ca <_close_r+0x1a>
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	b103      	cbz	r3, 80075ca <_close_r+0x1a>
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
 80075cc:	20000d6c 	.word	0x20000d6c

080075d0 <__sflush_r>:
 80075d0:	898a      	ldrh	r2, [r1, #12]
 80075d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d6:	4605      	mov	r5, r0
 80075d8:	0710      	lsls	r0, r2, #28
 80075da:	460c      	mov	r4, r1
 80075dc:	d458      	bmi.n	8007690 <__sflush_r+0xc0>
 80075de:	684b      	ldr	r3, [r1, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	dc05      	bgt.n	80075f0 <__sflush_r+0x20>
 80075e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	dc02      	bgt.n	80075f0 <__sflush_r+0x20>
 80075ea:	2000      	movs	r0, #0
 80075ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075f2:	2e00      	cmp	r6, #0
 80075f4:	d0f9      	beq.n	80075ea <__sflush_r+0x1a>
 80075f6:	2300      	movs	r3, #0
 80075f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075fc:	682f      	ldr	r7, [r5, #0]
 80075fe:	602b      	str	r3, [r5, #0]
 8007600:	d032      	beq.n	8007668 <__sflush_r+0x98>
 8007602:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007604:	89a3      	ldrh	r3, [r4, #12]
 8007606:	075a      	lsls	r2, r3, #29
 8007608:	d505      	bpl.n	8007616 <__sflush_r+0x46>
 800760a:	6863      	ldr	r3, [r4, #4]
 800760c:	1ac0      	subs	r0, r0, r3
 800760e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007610:	b10b      	cbz	r3, 8007616 <__sflush_r+0x46>
 8007612:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007614:	1ac0      	subs	r0, r0, r3
 8007616:	2300      	movs	r3, #0
 8007618:	4602      	mov	r2, r0
 800761a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800761c:	6a21      	ldr	r1, [r4, #32]
 800761e:	4628      	mov	r0, r5
 8007620:	47b0      	blx	r6
 8007622:	1c43      	adds	r3, r0, #1
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	d106      	bne.n	8007636 <__sflush_r+0x66>
 8007628:	6829      	ldr	r1, [r5, #0]
 800762a:	291d      	cmp	r1, #29
 800762c:	d82c      	bhi.n	8007688 <__sflush_r+0xb8>
 800762e:	4a2a      	ldr	r2, [pc, #168]	; (80076d8 <__sflush_r+0x108>)
 8007630:	40ca      	lsrs	r2, r1
 8007632:	07d6      	lsls	r6, r2, #31
 8007634:	d528      	bpl.n	8007688 <__sflush_r+0xb8>
 8007636:	2200      	movs	r2, #0
 8007638:	6062      	str	r2, [r4, #4]
 800763a:	04d9      	lsls	r1, r3, #19
 800763c:	6922      	ldr	r2, [r4, #16]
 800763e:	6022      	str	r2, [r4, #0]
 8007640:	d504      	bpl.n	800764c <__sflush_r+0x7c>
 8007642:	1c42      	adds	r2, r0, #1
 8007644:	d101      	bne.n	800764a <__sflush_r+0x7a>
 8007646:	682b      	ldr	r3, [r5, #0]
 8007648:	b903      	cbnz	r3, 800764c <__sflush_r+0x7c>
 800764a:	6560      	str	r0, [r4, #84]	; 0x54
 800764c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800764e:	602f      	str	r7, [r5, #0]
 8007650:	2900      	cmp	r1, #0
 8007652:	d0ca      	beq.n	80075ea <__sflush_r+0x1a>
 8007654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007658:	4299      	cmp	r1, r3
 800765a:	d002      	beq.n	8007662 <__sflush_r+0x92>
 800765c:	4628      	mov	r0, r5
 800765e:	f7ff fd49 	bl	80070f4 <_free_r>
 8007662:	2000      	movs	r0, #0
 8007664:	6360      	str	r0, [r4, #52]	; 0x34
 8007666:	e7c1      	b.n	80075ec <__sflush_r+0x1c>
 8007668:	6a21      	ldr	r1, [r4, #32]
 800766a:	2301      	movs	r3, #1
 800766c:	4628      	mov	r0, r5
 800766e:	47b0      	blx	r6
 8007670:	1c41      	adds	r1, r0, #1
 8007672:	d1c7      	bne.n	8007604 <__sflush_r+0x34>
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0c4      	beq.n	8007604 <__sflush_r+0x34>
 800767a:	2b1d      	cmp	r3, #29
 800767c:	d001      	beq.n	8007682 <__sflush_r+0xb2>
 800767e:	2b16      	cmp	r3, #22
 8007680:	d101      	bne.n	8007686 <__sflush_r+0xb6>
 8007682:	602f      	str	r7, [r5, #0]
 8007684:	e7b1      	b.n	80075ea <__sflush_r+0x1a>
 8007686:	89a3      	ldrh	r3, [r4, #12]
 8007688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800768c:	81a3      	strh	r3, [r4, #12]
 800768e:	e7ad      	b.n	80075ec <__sflush_r+0x1c>
 8007690:	690f      	ldr	r7, [r1, #16]
 8007692:	2f00      	cmp	r7, #0
 8007694:	d0a9      	beq.n	80075ea <__sflush_r+0x1a>
 8007696:	0793      	lsls	r3, r2, #30
 8007698:	680e      	ldr	r6, [r1, #0]
 800769a:	bf08      	it	eq
 800769c:	694b      	ldreq	r3, [r1, #20]
 800769e:	600f      	str	r7, [r1, #0]
 80076a0:	bf18      	it	ne
 80076a2:	2300      	movne	r3, #0
 80076a4:	eba6 0807 	sub.w	r8, r6, r7
 80076a8:	608b      	str	r3, [r1, #8]
 80076aa:	f1b8 0f00 	cmp.w	r8, #0
 80076ae:	dd9c      	ble.n	80075ea <__sflush_r+0x1a>
 80076b0:	6a21      	ldr	r1, [r4, #32]
 80076b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076b4:	4643      	mov	r3, r8
 80076b6:	463a      	mov	r2, r7
 80076b8:	4628      	mov	r0, r5
 80076ba:	47b0      	blx	r6
 80076bc:	2800      	cmp	r0, #0
 80076be:	dc06      	bgt.n	80076ce <__sflush_r+0xfe>
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076c6:	81a3      	strh	r3, [r4, #12]
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295
 80076cc:	e78e      	b.n	80075ec <__sflush_r+0x1c>
 80076ce:	4407      	add	r7, r0
 80076d0:	eba8 0800 	sub.w	r8, r8, r0
 80076d4:	e7e9      	b.n	80076aa <__sflush_r+0xda>
 80076d6:	bf00      	nop
 80076d8:	20400001 	.word	0x20400001

080076dc <_fflush_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	690b      	ldr	r3, [r1, #16]
 80076e0:	4605      	mov	r5, r0
 80076e2:	460c      	mov	r4, r1
 80076e4:	b913      	cbnz	r3, 80076ec <_fflush_r+0x10>
 80076e6:	2500      	movs	r5, #0
 80076e8:	4628      	mov	r0, r5
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	b118      	cbz	r0, 80076f6 <_fflush_r+0x1a>
 80076ee:	6983      	ldr	r3, [r0, #24]
 80076f0:	b90b      	cbnz	r3, 80076f6 <_fflush_r+0x1a>
 80076f2:	f7ff fc21 	bl	8006f38 <__sinit>
 80076f6:	4b14      	ldr	r3, [pc, #80]	; (8007748 <_fflush_r+0x6c>)
 80076f8:	429c      	cmp	r4, r3
 80076fa:	d11b      	bne.n	8007734 <_fflush_r+0x58>
 80076fc:	686c      	ldr	r4, [r5, #4]
 80076fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d0ef      	beq.n	80076e6 <_fflush_r+0xa>
 8007706:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007708:	07d0      	lsls	r0, r2, #31
 800770a:	d404      	bmi.n	8007716 <_fflush_r+0x3a>
 800770c:	0599      	lsls	r1, r3, #22
 800770e:	d402      	bmi.n	8007716 <_fflush_r+0x3a>
 8007710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007712:	f7ff fcd4 	bl	80070be <__retarget_lock_acquire_recursive>
 8007716:	4628      	mov	r0, r5
 8007718:	4621      	mov	r1, r4
 800771a:	f7ff ff59 	bl	80075d0 <__sflush_r>
 800771e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007720:	07da      	lsls	r2, r3, #31
 8007722:	4605      	mov	r5, r0
 8007724:	d4e0      	bmi.n	80076e8 <_fflush_r+0xc>
 8007726:	89a3      	ldrh	r3, [r4, #12]
 8007728:	059b      	lsls	r3, r3, #22
 800772a:	d4dd      	bmi.n	80076e8 <_fflush_r+0xc>
 800772c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800772e:	f7ff fcc7 	bl	80070c0 <__retarget_lock_release_recursive>
 8007732:	e7d9      	b.n	80076e8 <_fflush_r+0xc>
 8007734:	4b05      	ldr	r3, [pc, #20]	; (800774c <_fflush_r+0x70>)
 8007736:	429c      	cmp	r4, r3
 8007738:	d101      	bne.n	800773e <_fflush_r+0x62>
 800773a:	68ac      	ldr	r4, [r5, #8]
 800773c:	e7df      	b.n	80076fe <_fflush_r+0x22>
 800773e:	4b04      	ldr	r3, [pc, #16]	; (8007750 <_fflush_r+0x74>)
 8007740:	429c      	cmp	r4, r3
 8007742:	bf08      	it	eq
 8007744:	68ec      	ldreq	r4, [r5, #12]
 8007746:	e7da      	b.n	80076fe <_fflush_r+0x22>
 8007748:	08008150 	.word	0x08008150
 800774c:	08008170 	.word	0x08008170
 8007750:	08008130 	.word	0x08008130

08007754 <_lseek_r>:
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	4d07      	ldr	r5, [pc, #28]	; (8007774 <_lseek_r+0x20>)
 8007758:	4604      	mov	r4, r0
 800775a:	4608      	mov	r0, r1
 800775c:	4611      	mov	r1, r2
 800775e:	2200      	movs	r2, #0
 8007760:	602a      	str	r2, [r5, #0]
 8007762:	461a      	mov	r2, r3
 8007764:	f7fa fe44 	bl	80023f0 <_lseek>
 8007768:	1c43      	adds	r3, r0, #1
 800776a:	d102      	bne.n	8007772 <_lseek_r+0x1e>
 800776c:	682b      	ldr	r3, [r5, #0]
 800776e:	b103      	cbz	r3, 8007772 <_lseek_r+0x1e>
 8007770:	6023      	str	r3, [r4, #0]
 8007772:	bd38      	pop	{r3, r4, r5, pc}
 8007774:	20000d6c 	.word	0x20000d6c

08007778 <__swhatbuf_r>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	460e      	mov	r6, r1
 800777c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007780:	2900      	cmp	r1, #0
 8007782:	b096      	sub	sp, #88	; 0x58
 8007784:	4614      	mov	r4, r2
 8007786:	461d      	mov	r5, r3
 8007788:	da07      	bge.n	800779a <__swhatbuf_r+0x22>
 800778a:	2300      	movs	r3, #0
 800778c:	602b      	str	r3, [r5, #0]
 800778e:	89b3      	ldrh	r3, [r6, #12]
 8007790:	061a      	lsls	r2, r3, #24
 8007792:	d410      	bmi.n	80077b6 <__swhatbuf_r+0x3e>
 8007794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007798:	e00e      	b.n	80077b8 <__swhatbuf_r+0x40>
 800779a:	466a      	mov	r2, sp
 800779c:	f000 fb5c 	bl	8007e58 <_fstat_r>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	dbf2      	blt.n	800778a <__swhatbuf_r+0x12>
 80077a4:	9a01      	ldr	r2, [sp, #4]
 80077a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077ae:	425a      	negs	r2, r3
 80077b0:	415a      	adcs	r2, r3
 80077b2:	602a      	str	r2, [r5, #0]
 80077b4:	e7ee      	b.n	8007794 <__swhatbuf_r+0x1c>
 80077b6:	2340      	movs	r3, #64	; 0x40
 80077b8:	2000      	movs	r0, #0
 80077ba:	6023      	str	r3, [r4, #0]
 80077bc:	b016      	add	sp, #88	; 0x58
 80077be:	bd70      	pop	{r4, r5, r6, pc}

080077c0 <__smakebuf_r>:
 80077c0:	898b      	ldrh	r3, [r1, #12]
 80077c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077c4:	079d      	lsls	r5, r3, #30
 80077c6:	4606      	mov	r6, r0
 80077c8:	460c      	mov	r4, r1
 80077ca:	d507      	bpl.n	80077dc <__smakebuf_r+0x1c>
 80077cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	6123      	str	r3, [r4, #16]
 80077d4:	2301      	movs	r3, #1
 80077d6:	6163      	str	r3, [r4, #20]
 80077d8:	b002      	add	sp, #8
 80077da:	bd70      	pop	{r4, r5, r6, pc}
 80077dc:	ab01      	add	r3, sp, #4
 80077de:	466a      	mov	r2, sp
 80077e0:	f7ff ffca 	bl	8007778 <__swhatbuf_r>
 80077e4:	9900      	ldr	r1, [sp, #0]
 80077e6:	4605      	mov	r5, r0
 80077e8:	4630      	mov	r0, r6
 80077ea:	f7ff fcd3 	bl	8007194 <_malloc_r>
 80077ee:	b948      	cbnz	r0, 8007804 <__smakebuf_r+0x44>
 80077f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077f4:	059a      	lsls	r2, r3, #22
 80077f6:	d4ef      	bmi.n	80077d8 <__smakebuf_r+0x18>
 80077f8:	f023 0303 	bic.w	r3, r3, #3
 80077fc:	f043 0302 	orr.w	r3, r3, #2
 8007800:	81a3      	strh	r3, [r4, #12]
 8007802:	e7e3      	b.n	80077cc <__smakebuf_r+0xc>
 8007804:	4b0d      	ldr	r3, [pc, #52]	; (800783c <__smakebuf_r+0x7c>)
 8007806:	62b3      	str	r3, [r6, #40]	; 0x28
 8007808:	89a3      	ldrh	r3, [r4, #12]
 800780a:	6020      	str	r0, [r4, #0]
 800780c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007810:	81a3      	strh	r3, [r4, #12]
 8007812:	9b00      	ldr	r3, [sp, #0]
 8007814:	6163      	str	r3, [r4, #20]
 8007816:	9b01      	ldr	r3, [sp, #4]
 8007818:	6120      	str	r0, [r4, #16]
 800781a:	b15b      	cbz	r3, 8007834 <__smakebuf_r+0x74>
 800781c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007820:	4630      	mov	r0, r6
 8007822:	f000 fb2b 	bl	8007e7c <_isatty_r>
 8007826:	b128      	cbz	r0, 8007834 <__smakebuf_r+0x74>
 8007828:	89a3      	ldrh	r3, [r4, #12]
 800782a:	f023 0303 	bic.w	r3, r3, #3
 800782e:	f043 0301 	orr.w	r3, r3, #1
 8007832:	81a3      	strh	r3, [r4, #12]
 8007834:	89a0      	ldrh	r0, [r4, #12]
 8007836:	4305      	orrs	r5, r0
 8007838:	81a5      	strh	r5, [r4, #12]
 800783a:	e7cd      	b.n	80077d8 <__smakebuf_r+0x18>
 800783c:	08006ed1 	.word	0x08006ed1

08007840 <__malloc_lock>:
 8007840:	4801      	ldr	r0, [pc, #4]	; (8007848 <__malloc_lock+0x8>)
 8007842:	f7ff bc3c 	b.w	80070be <__retarget_lock_acquire_recursive>
 8007846:	bf00      	nop
 8007848:	20000d64 	.word	0x20000d64

0800784c <__malloc_unlock>:
 800784c:	4801      	ldr	r0, [pc, #4]	; (8007854 <__malloc_unlock+0x8>)
 800784e:	f7ff bc37 	b.w	80070c0 <__retarget_lock_release_recursive>
 8007852:	bf00      	nop
 8007854:	20000d64 	.word	0x20000d64

08007858 <__sfputc_r>:
 8007858:	6893      	ldr	r3, [r2, #8]
 800785a:	3b01      	subs	r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	b410      	push	{r4}
 8007860:	6093      	str	r3, [r2, #8]
 8007862:	da08      	bge.n	8007876 <__sfputc_r+0x1e>
 8007864:	6994      	ldr	r4, [r2, #24]
 8007866:	42a3      	cmp	r3, r4
 8007868:	db01      	blt.n	800786e <__sfputc_r+0x16>
 800786a:	290a      	cmp	r1, #10
 800786c:	d103      	bne.n	8007876 <__sfputc_r+0x1e>
 800786e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007872:	f7ff bdcb 	b.w	800740c <__swbuf_r>
 8007876:	6813      	ldr	r3, [r2, #0]
 8007878:	1c58      	adds	r0, r3, #1
 800787a:	6010      	str	r0, [r2, #0]
 800787c:	7019      	strb	r1, [r3, #0]
 800787e:	4608      	mov	r0, r1
 8007880:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007884:	4770      	bx	lr

08007886 <__sfputs_r>:
 8007886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007888:	4606      	mov	r6, r0
 800788a:	460f      	mov	r7, r1
 800788c:	4614      	mov	r4, r2
 800788e:	18d5      	adds	r5, r2, r3
 8007890:	42ac      	cmp	r4, r5
 8007892:	d101      	bne.n	8007898 <__sfputs_r+0x12>
 8007894:	2000      	movs	r0, #0
 8007896:	e007      	b.n	80078a8 <__sfputs_r+0x22>
 8007898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800789c:	463a      	mov	r2, r7
 800789e:	4630      	mov	r0, r6
 80078a0:	f7ff ffda 	bl	8007858 <__sfputc_r>
 80078a4:	1c43      	adds	r3, r0, #1
 80078a6:	d1f3      	bne.n	8007890 <__sfputs_r+0xa>
 80078a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078ac <_vfiprintf_r>:
 80078ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b0:	460d      	mov	r5, r1
 80078b2:	b09d      	sub	sp, #116	; 0x74
 80078b4:	4614      	mov	r4, r2
 80078b6:	4698      	mov	r8, r3
 80078b8:	4606      	mov	r6, r0
 80078ba:	b118      	cbz	r0, 80078c4 <_vfiprintf_r+0x18>
 80078bc:	6983      	ldr	r3, [r0, #24]
 80078be:	b90b      	cbnz	r3, 80078c4 <_vfiprintf_r+0x18>
 80078c0:	f7ff fb3a 	bl	8006f38 <__sinit>
 80078c4:	4b89      	ldr	r3, [pc, #548]	; (8007aec <_vfiprintf_r+0x240>)
 80078c6:	429d      	cmp	r5, r3
 80078c8:	d11b      	bne.n	8007902 <_vfiprintf_r+0x56>
 80078ca:	6875      	ldr	r5, [r6, #4]
 80078cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078ce:	07d9      	lsls	r1, r3, #31
 80078d0:	d405      	bmi.n	80078de <_vfiprintf_r+0x32>
 80078d2:	89ab      	ldrh	r3, [r5, #12]
 80078d4:	059a      	lsls	r2, r3, #22
 80078d6:	d402      	bmi.n	80078de <_vfiprintf_r+0x32>
 80078d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078da:	f7ff fbf0 	bl	80070be <__retarget_lock_acquire_recursive>
 80078de:	89ab      	ldrh	r3, [r5, #12]
 80078e0:	071b      	lsls	r3, r3, #28
 80078e2:	d501      	bpl.n	80078e8 <_vfiprintf_r+0x3c>
 80078e4:	692b      	ldr	r3, [r5, #16]
 80078e6:	b9eb      	cbnz	r3, 8007924 <_vfiprintf_r+0x78>
 80078e8:	4629      	mov	r1, r5
 80078ea:	4630      	mov	r0, r6
 80078ec:	f7ff fdf2 	bl	80074d4 <__swsetup_r>
 80078f0:	b1c0      	cbz	r0, 8007924 <_vfiprintf_r+0x78>
 80078f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078f4:	07dc      	lsls	r4, r3, #31
 80078f6:	d50e      	bpl.n	8007916 <_vfiprintf_r+0x6a>
 80078f8:	f04f 30ff 	mov.w	r0, #4294967295
 80078fc:	b01d      	add	sp, #116	; 0x74
 80078fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007902:	4b7b      	ldr	r3, [pc, #492]	; (8007af0 <_vfiprintf_r+0x244>)
 8007904:	429d      	cmp	r5, r3
 8007906:	d101      	bne.n	800790c <_vfiprintf_r+0x60>
 8007908:	68b5      	ldr	r5, [r6, #8]
 800790a:	e7df      	b.n	80078cc <_vfiprintf_r+0x20>
 800790c:	4b79      	ldr	r3, [pc, #484]	; (8007af4 <_vfiprintf_r+0x248>)
 800790e:	429d      	cmp	r5, r3
 8007910:	bf08      	it	eq
 8007912:	68f5      	ldreq	r5, [r6, #12]
 8007914:	e7da      	b.n	80078cc <_vfiprintf_r+0x20>
 8007916:	89ab      	ldrh	r3, [r5, #12]
 8007918:	0598      	lsls	r0, r3, #22
 800791a:	d4ed      	bmi.n	80078f8 <_vfiprintf_r+0x4c>
 800791c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800791e:	f7ff fbcf 	bl	80070c0 <__retarget_lock_release_recursive>
 8007922:	e7e9      	b.n	80078f8 <_vfiprintf_r+0x4c>
 8007924:	2300      	movs	r3, #0
 8007926:	9309      	str	r3, [sp, #36]	; 0x24
 8007928:	2320      	movs	r3, #32
 800792a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800792e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007932:	2330      	movs	r3, #48	; 0x30
 8007934:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007af8 <_vfiprintf_r+0x24c>
 8007938:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800793c:	f04f 0901 	mov.w	r9, #1
 8007940:	4623      	mov	r3, r4
 8007942:	469a      	mov	sl, r3
 8007944:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007948:	b10a      	cbz	r2, 800794e <_vfiprintf_r+0xa2>
 800794a:	2a25      	cmp	r2, #37	; 0x25
 800794c:	d1f9      	bne.n	8007942 <_vfiprintf_r+0x96>
 800794e:	ebba 0b04 	subs.w	fp, sl, r4
 8007952:	d00b      	beq.n	800796c <_vfiprintf_r+0xc0>
 8007954:	465b      	mov	r3, fp
 8007956:	4622      	mov	r2, r4
 8007958:	4629      	mov	r1, r5
 800795a:	4630      	mov	r0, r6
 800795c:	f7ff ff93 	bl	8007886 <__sfputs_r>
 8007960:	3001      	adds	r0, #1
 8007962:	f000 80aa 	beq.w	8007aba <_vfiprintf_r+0x20e>
 8007966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007968:	445a      	add	r2, fp
 800796a:	9209      	str	r2, [sp, #36]	; 0x24
 800796c:	f89a 3000 	ldrb.w	r3, [sl]
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 80a2 	beq.w	8007aba <_vfiprintf_r+0x20e>
 8007976:	2300      	movs	r3, #0
 8007978:	f04f 32ff 	mov.w	r2, #4294967295
 800797c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007980:	f10a 0a01 	add.w	sl, sl, #1
 8007984:	9304      	str	r3, [sp, #16]
 8007986:	9307      	str	r3, [sp, #28]
 8007988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800798c:	931a      	str	r3, [sp, #104]	; 0x68
 800798e:	4654      	mov	r4, sl
 8007990:	2205      	movs	r2, #5
 8007992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007996:	4858      	ldr	r0, [pc, #352]	; (8007af8 <_vfiprintf_r+0x24c>)
 8007998:	f7f8 fc2a 	bl	80001f0 <memchr>
 800799c:	9a04      	ldr	r2, [sp, #16]
 800799e:	b9d8      	cbnz	r0, 80079d8 <_vfiprintf_r+0x12c>
 80079a0:	06d1      	lsls	r1, r2, #27
 80079a2:	bf44      	itt	mi
 80079a4:	2320      	movmi	r3, #32
 80079a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079aa:	0713      	lsls	r3, r2, #28
 80079ac:	bf44      	itt	mi
 80079ae:	232b      	movmi	r3, #43	; 0x2b
 80079b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079b4:	f89a 3000 	ldrb.w	r3, [sl]
 80079b8:	2b2a      	cmp	r3, #42	; 0x2a
 80079ba:	d015      	beq.n	80079e8 <_vfiprintf_r+0x13c>
 80079bc:	9a07      	ldr	r2, [sp, #28]
 80079be:	4654      	mov	r4, sl
 80079c0:	2000      	movs	r0, #0
 80079c2:	f04f 0c0a 	mov.w	ip, #10
 80079c6:	4621      	mov	r1, r4
 80079c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079cc:	3b30      	subs	r3, #48	; 0x30
 80079ce:	2b09      	cmp	r3, #9
 80079d0:	d94e      	bls.n	8007a70 <_vfiprintf_r+0x1c4>
 80079d2:	b1b0      	cbz	r0, 8007a02 <_vfiprintf_r+0x156>
 80079d4:	9207      	str	r2, [sp, #28]
 80079d6:	e014      	b.n	8007a02 <_vfiprintf_r+0x156>
 80079d8:	eba0 0308 	sub.w	r3, r0, r8
 80079dc:	fa09 f303 	lsl.w	r3, r9, r3
 80079e0:	4313      	orrs	r3, r2
 80079e2:	9304      	str	r3, [sp, #16]
 80079e4:	46a2      	mov	sl, r4
 80079e6:	e7d2      	b.n	800798e <_vfiprintf_r+0xe2>
 80079e8:	9b03      	ldr	r3, [sp, #12]
 80079ea:	1d19      	adds	r1, r3, #4
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	9103      	str	r1, [sp, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	bfbb      	ittet	lt
 80079f4:	425b      	neglt	r3, r3
 80079f6:	f042 0202 	orrlt.w	r2, r2, #2
 80079fa:	9307      	strge	r3, [sp, #28]
 80079fc:	9307      	strlt	r3, [sp, #28]
 80079fe:	bfb8      	it	lt
 8007a00:	9204      	strlt	r2, [sp, #16]
 8007a02:	7823      	ldrb	r3, [r4, #0]
 8007a04:	2b2e      	cmp	r3, #46	; 0x2e
 8007a06:	d10c      	bne.n	8007a22 <_vfiprintf_r+0x176>
 8007a08:	7863      	ldrb	r3, [r4, #1]
 8007a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a0c:	d135      	bne.n	8007a7a <_vfiprintf_r+0x1ce>
 8007a0e:	9b03      	ldr	r3, [sp, #12]
 8007a10:	1d1a      	adds	r2, r3, #4
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	9203      	str	r2, [sp, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	bfb8      	it	lt
 8007a1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a1e:	3402      	adds	r4, #2
 8007a20:	9305      	str	r3, [sp, #20]
 8007a22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b08 <_vfiprintf_r+0x25c>
 8007a26:	7821      	ldrb	r1, [r4, #0]
 8007a28:	2203      	movs	r2, #3
 8007a2a:	4650      	mov	r0, sl
 8007a2c:	f7f8 fbe0 	bl	80001f0 <memchr>
 8007a30:	b140      	cbz	r0, 8007a44 <_vfiprintf_r+0x198>
 8007a32:	2340      	movs	r3, #64	; 0x40
 8007a34:	eba0 000a 	sub.w	r0, r0, sl
 8007a38:	fa03 f000 	lsl.w	r0, r3, r0
 8007a3c:	9b04      	ldr	r3, [sp, #16]
 8007a3e:	4303      	orrs	r3, r0
 8007a40:	3401      	adds	r4, #1
 8007a42:	9304      	str	r3, [sp, #16]
 8007a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a48:	482c      	ldr	r0, [pc, #176]	; (8007afc <_vfiprintf_r+0x250>)
 8007a4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a4e:	2206      	movs	r2, #6
 8007a50:	f7f8 fbce 	bl	80001f0 <memchr>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d03f      	beq.n	8007ad8 <_vfiprintf_r+0x22c>
 8007a58:	4b29      	ldr	r3, [pc, #164]	; (8007b00 <_vfiprintf_r+0x254>)
 8007a5a:	bb1b      	cbnz	r3, 8007aa4 <_vfiprintf_r+0x1f8>
 8007a5c:	9b03      	ldr	r3, [sp, #12]
 8007a5e:	3307      	adds	r3, #7
 8007a60:	f023 0307 	bic.w	r3, r3, #7
 8007a64:	3308      	adds	r3, #8
 8007a66:	9303      	str	r3, [sp, #12]
 8007a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a6a:	443b      	add	r3, r7
 8007a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a6e:	e767      	b.n	8007940 <_vfiprintf_r+0x94>
 8007a70:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a74:	460c      	mov	r4, r1
 8007a76:	2001      	movs	r0, #1
 8007a78:	e7a5      	b.n	80079c6 <_vfiprintf_r+0x11a>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	3401      	adds	r4, #1
 8007a7e:	9305      	str	r3, [sp, #20]
 8007a80:	4619      	mov	r1, r3
 8007a82:	f04f 0c0a 	mov.w	ip, #10
 8007a86:	4620      	mov	r0, r4
 8007a88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a8c:	3a30      	subs	r2, #48	; 0x30
 8007a8e:	2a09      	cmp	r2, #9
 8007a90:	d903      	bls.n	8007a9a <_vfiprintf_r+0x1ee>
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d0c5      	beq.n	8007a22 <_vfiprintf_r+0x176>
 8007a96:	9105      	str	r1, [sp, #20]
 8007a98:	e7c3      	b.n	8007a22 <_vfiprintf_r+0x176>
 8007a9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e7f0      	b.n	8007a86 <_vfiprintf_r+0x1da>
 8007aa4:	ab03      	add	r3, sp, #12
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	462a      	mov	r2, r5
 8007aaa:	4b16      	ldr	r3, [pc, #88]	; (8007b04 <_vfiprintf_r+0x258>)
 8007aac:	a904      	add	r1, sp, #16
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f3af 8000 	nop.w
 8007ab4:	4607      	mov	r7, r0
 8007ab6:	1c78      	adds	r0, r7, #1
 8007ab8:	d1d6      	bne.n	8007a68 <_vfiprintf_r+0x1bc>
 8007aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007abc:	07d9      	lsls	r1, r3, #31
 8007abe:	d405      	bmi.n	8007acc <_vfiprintf_r+0x220>
 8007ac0:	89ab      	ldrh	r3, [r5, #12]
 8007ac2:	059a      	lsls	r2, r3, #22
 8007ac4:	d402      	bmi.n	8007acc <_vfiprintf_r+0x220>
 8007ac6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ac8:	f7ff fafa 	bl	80070c0 <__retarget_lock_release_recursive>
 8007acc:	89ab      	ldrh	r3, [r5, #12]
 8007ace:	065b      	lsls	r3, r3, #25
 8007ad0:	f53f af12 	bmi.w	80078f8 <_vfiprintf_r+0x4c>
 8007ad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ad6:	e711      	b.n	80078fc <_vfiprintf_r+0x50>
 8007ad8:	ab03      	add	r3, sp, #12
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	462a      	mov	r2, r5
 8007ade:	4b09      	ldr	r3, [pc, #36]	; (8007b04 <_vfiprintf_r+0x258>)
 8007ae0:	a904      	add	r1, sp, #16
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f000 f880 	bl	8007be8 <_printf_i>
 8007ae8:	e7e4      	b.n	8007ab4 <_vfiprintf_r+0x208>
 8007aea:	bf00      	nop
 8007aec:	08008150 	.word	0x08008150
 8007af0:	08008170 	.word	0x08008170
 8007af4:	08008130 	.word	0x08008130
 8007af8:	08008194 	.word	0x08008194
 8007afc:	0800819e 	.word	0x0800819e
 8007b00:	00000000 	.word	0x00000000
 8007b04:	08007887 	.word	0x08007887
 8007b08:	0800819a 	.word	0x0800819a

08007b0c <_printf_common>:
 8007b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b10:	4616      	mov	r6, r2
 8007b12:	4699      	mov	r9, r3
 8007b14:	688a      	ldr	r2, [r1, #8]
 8007b16:	690b      	ldr	r3, [r1, #16]
 8007b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	bfb8      	it	lt
 8007b20:	4613      	movlt	r3, r2
 8007b22:	6033      	str	r3, [r6, #0]
 8007b24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b28:	4607      	mov	r7, r0
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	b10a      	cbz	r2, 8007b32 <_printf_common+0x26>
 8007b2e:	3301      	adds	r3, #1
 8007b30:	6033      	str	r3, [r6, #0]
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	0699      	lsls	r1, r3, #26
 8007b36:	bf42      	ittt	mi
 8007b38:	6833      	ldrmi	r3, [r6, #0]
 8007b3a:	3302      	addmi	r3, #2
 8007b3c:	6033      	strmi	r3, [r6, #0]
 8007b3e:	6825      	ldr	r5, [r4, #0]
 8007b40:	f015 0506 	ands.w	r5, r5, #6
 8007b44:	d106      	bne.n	8007b54 <_printf_common+0x48>
 8007b46:	f104 0a19 	add.w	sl, r4, #25
 8007b4a:	68e3      	ldr	r3, [r4, #12]
 8007b4c:	6832      	ldr	r2, [r6, #0]
 8007b4e:	1a9b      	subs	r3, r3, r2
 8007b50:	42ab      	cmp	r3, r5
 8007b52:	dc26      	bgt.n	8007ba2 <_printf_common+0x96>
 8007b54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b58:	1e13      	subs	r3, r2, #0
 8007b5a:	6822      	ldr	r2, [r4, #0]
 8007b5c:	bf18      	it	ne
 8007b5e:	2301      	movne	r3, #1
 8007b60:	0692      	lsls	r2, r2, #26
 8007b62:	d42b      	bmi.n	8007bbc <_printf_common+0xb0>
 8007b64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b68:	4649      	mov	r1, r9
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	47c0      	blx	r8
 8007b6e:	3001      	adds	r0, #1
 8007b70:	d01e      	beq.n	8007bb0 <_printf_common+0xa4>
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	68e5      	ldr	r5, [r4, #12]
 8007b76:	6832      	ldr	r2, [r6, #0]
 8007b78:	f003 0306 	and.w	r3, r3, #6
 8007b7c:	2b04      	cmp	r3, #4
 8007b7e:	bf08      	it	eq
 8007b80:	1aad      	subeq	r5, r5, r2
 8007b82:	68a3      	ldr	r3, [r4, #8]
 8007b84:	6922      	ldr	r2, [r4, #16]
 8007b86:	bf0c      	ite	eq
 8007b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b8c:	2500      	movne	r5, #0
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	bfc4      	itt	gt
 8007b92:	1a9b      	subgt	r3, r3, r2
 8007b94:	18ed      	addgt	r5, r5, r3
 8007b96:	2600      	movs	r6, #0
 8007b98:	341a      	adds	r4, #26
 8007b9a:	42b5      	cmp	r5, r6
 8007b9c:	d11a      	bne.n	8007bd4 <_printf_common+0xc8>
 8007b9e:	2000      	movs	r0, #0
 8007ba0:	e008      	b.n	8007bb4 <_printf_common+0xa8>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	4652      	mov	r2, sl
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	4638      	mov	r0, r7
 8007baa:	47c0      	blx	r8
 8007bac:	3001      	adds	r0, #1
 8007bae:	d103      	bne.n	8007bb8 <_printf_common+0xac>
 8007bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb8:	3501      	adds	r5, #1
 8007bba:	e7c6      	b.n	8007b4a <_printf_common+0x3e>
 8007bbc:	18e1      	adds	r1, r4, r3
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	2030      	movs	r0, #48	; 0x30
 8007bc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bc6:	4422      	add	r2, r4
 8007bc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bd0:	3302      	adds	r3, #2
 8007bd2:	e7c7      	b.n	8007b64 <_printf_common+0x58>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	4622      	mov	r2, r4
 8007bd8:	4649      	mov	r1, r9
 8007bda:	4638      	mov	r0, r7
 8007bdc:	47c0      	blx	r8
 8007bde:	3001      	adds	r0, #1
 8007be0:	d0e6      	beq.n	8007bb0 <_printf_common+0xa4>
 8007be2:	3601      	adds	r6, #1
 8007be4:	e7d9      	b.n	8007b9a <_printf_common+0x8e>
	...

08007be8 <_printf_i>:
 8007be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bec:	460c      	mov	r4, r1
 8007bee:	4691      	mov	r9, r2
 8007bf0:	7e27      	ldrb	r7, [r4, #24]
 8007bf2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007bf4:	2f78      	cmp	r7, #120	; 0x78
 8007bf6:	4680      	mov	r8, r0
 8007bf8:	469a      	mov	sl, r3
 8007bfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bfe:	d807      	bhi.n	8007c10 <_printf_i+0x28>
 8007c00:	2f62      	cmp	r7, #98	; 0x62
 8007c02:	d80a      	bhi.n	8007c1a <_printf_i+0x32>
 8007c04:	2f00      	cmp	r7, #0
 8007c06:	f000 80d8 	beq.w	8007dba <_printf_i+0x1d2>
 8007c0a:	2f58      	cmp	r7, #88	; 0x58
 8007c0c:	f000 80a3 	beq.w	8007d56 <_printf_i+0x16e>
 8007c10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c18:	e03a      	b.n	8007c90 <_printf_i+0xa8>
 8007c1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c1e:	2b15      	cmp	r3, #21
 8007c20:	d8f6      	bhi.n	8007c10 <_printf_i+0x28>
 8007c22:	a001      	add	r0, pc, #4	; (adr r0, 8007c28 <_printf_i+0x40>)
 8007c24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007c28:	08007c81 	.word	0x08007c81
 8007c2c:	08007c95 	.word	0x08007c95
 8007c30:	08007c11 	.word	0x08007c11
 8007c34:	08007c11 	.word	0x08007c11
 8007c38:	08007c11 	.word	0x08007c11
 8007c3c:	08007c11 	.word	0x08007c11
 8007c40:	08007c95 	.word	0x08007c95
 8007c44:	08007c11 	.word	0x08007c11
 8007c48:	08007c11 	.word	0x08007c11
 8007c4c:	08007c11 	.word	0x08007c11
 8007c50:	08007c11 	.word	0x08007c11
 8007c54:	08007da1 	.word	0x08007da1
 8007c58:	08007cc5 	.word	0x08007cc5
 8007c5c:	08007d83 	.word	0x08007d83
 8007c60:	08007c11 	.word	0x08007c11
 8007c64:	08007c11 	.word	0x08007c11
 8007c68:	08007dc3 	.word	0x08007dc3
 8007c6c:	08007c11 	.word	0x08007c11
 8007c70:	08007cc5 	.word	0x08007cc5
 8007c74:	08007c11 	.word	0x08007c11
 8007c78:	08007c11 	.word	0x08007c11
 8007c7c:	08007d8b 	.word	0x08007d8b
 8007c80:	680b      	ldr	r3, [r1, #0]
 8007c82:	1d1a      	adds	r2, r3, #4
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	600a      	str	r2, [r1, #0]
 8007c88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c90:	2301      	movs	r3, #1
 8007c92:	e0a3      	b.n	8007ddc <_printf_i+0x1f4>
 8007c94:	6825      	ldr	r5, [r4, #0]
 8007c96:	6808      	ldr	r0, [r1, #0]
 8007c98:	062e      	lsls	r6, r5, #24
 8007c9a:	f100 0304 	add.w	r3, r0, #4
 8007c9e:	d50a      	bpl.n	8007cb6 <_printf_i+0xce>
 8007ca0:	6805      	ldr	r5, [r0, #0]
 8007ca2:	600b      	str	r3, [r1, #0]
 8007ca4:	2d00      	cmp	r5, #0
 8007ca6:	da03      	bge.n	8007cb0 <_printf_i+0xc8>
 8007ca8:	232d      	movs	r3, #45	; 0x2d
 8007caa:	426d      	negs	r5, r5
 8007cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cb0:	485e      	ldr	r0, [pc, #376]	; (8007e2c <_printf_i+0x244>)
 8007cb2:	230a      	movs	r3, #10
 8007cb4:	e019      	b.n	8007cea <_printf_i+0x102>
 8007cb6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007cba:	6805      	ldr	r5, [r0, #0]
 8007cbc:	600b      	str	r3, [r1, #0]
 8007cbe:	bf18      	it	ne
 8007cc0:	b22d      	sxthne	r5, r5
 8007cc2:	e7ef      	b.n	8007ca4 <_printf_i+0xbc>
 8007cc4:	680b      	ldr	r3, [r1, #0]
 8007cc6:	6825      	ldr	r5, [r4, #0]
 8007cc8:	1d18      	adds	r0, r3, #4
 8007cca:	6008      	str	r0, [r1, #0]
 8007ccc:	0628      	lsls	r0, r5, #24
 8007cce:	d501      	bpl.n	8007cd4 <_printf_i+0xec>
 8007cd0:	681d      	ldr	r5, [r3, #0]
 8007cd2:	e002      	b.n	8007cda <_printf_i+0xf2>
 8007cd4:	0669      	lsls	r1, r5, #25
 8007cd6:	d5fb      	bpl.n	8007cd0 <_printf_i+0xe8>
 8007cd8:	881d      	ldrh	r5, [r3, #0]
 8007cda:	4854      	ldr	r0, [pc, #336]	; (8007e2c <_printf_i+0x244>)
 8007cdc:	2f6f      	cmp	r7, #111	; 0x6f
 8007cde:	bf0c      	ite	eq
 8007ce0:	2308      	moveq	r3, #8
 8007ce2:	230a      	movne	r3, #10
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cea:	6866      	ldr	r6, [r4, #4]
 8007cec:	60a6      	str	r6, [r4, #8]
 8007cee:	2e00      	cmp	r6, #0
 8007cf0:	bfa2      	ittt	ge
 8007cf2:	6821      	ldrge	r1, [r4, #0]
 8007cf4:	f021 0104 	bicge.w	r1, r1, #4
 8007cf8:	6021      	strge	r1, [r4, #0]
 8007cfa:	b90d      	cbnz	r5, 8007d00 <_printf_i+0x118>
 8007cfc:	2e00      	cmp	r6, #0
 8007cfe:	d04d      	beq.n	8007d9c <_printf_i+0x1b4>
 8007d00:	4616      	mov	r6, r2
 8007d02:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d06:	fb03 5711 	mls	r7, r3, r1, r5
 8007d0a:	5dc7      	ldrb	r7, [r0, r7]
 8007d0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d10:	462f      	mov	r7, r5
 8007d12:	42bb      	cmp	r3, r7
 8007d14:	460d      	mov	r5, r1
 8007d16:	d9f4      	bls.n	8007d02 <_printf_i+0x11a>
 8007d18:	2b08      	cmp	r3, #8
 8007d1a:	d10b      	bne.n	8007d34 <_printf_i+0x14c>
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	07df      	lsls	r7, r3, #31
 8007d20:	d508      	bpl.n	8007d34 <_printf_i+0x14c>
 8007d22:	6923      	ldr	r3, [r4, #16]
 8007d24:	6861      	ldr	r1, [r4, #4]
 8007d26:	4299      	cmp	r1, r3
 8007d28:	bfde      	ittt	le
 8007d2a:	2330      	movle	r3, #48	; 0x30
 8007d2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d34:	1b92      	subs	r2, r2, r6
 8007d36:	6122      	str	r2, [r4, #16]
 8007d38:	f8cd a000 	str.w	sl, [sp]
 8007d3c:	464b      	mov	r3, r9
 8007d3e:	aa03      	add	r2, sp, #12
 8007d40:	4621      	mov	r1, r4
 8007d42:	4640      	mov	r0, r8
 8007d44:	f7ff fee2 	bl	8007b0c <_printf_common>
 8007d48:	3001      	adds	r0, #1
 8007d4a:	d14c      	bne.n	8007de6 <_printf_i+0x1fe>
 8007d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d50:	b004      	add	sp, #16
 8007d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d56:	4835      	ldr	r0, [pc, #212]	; (8007e2c <_printf_i+0x244>)
 8007d58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	680e      	ldr	r6, [r1, #0]
 8007d60:	061f      	lsls	r7, r3, #24
 8007d62:	f856 5b04 	ldr.w	r5, [r6], #4
 8007d66:	600e      	str	r6, [r1, #0]
 8007d68:	d514      	bpl.n	8007d94 <_printf_i+0x1ac>
 8007d6a:	07d9      	lsls	r1, r3, #31
 8007d6c:	bf44      	itt	mi
 8007d6e:	f043 0320 	orrmi.w	r3, r3, #32
 8007d72:	6023      	strmi	r3, [r4, #0]
 8007d74:	b91d      	cbnz	r5, 8007d7e <_printf_i+0x196>
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	f023 0320 	bic.w	r3, r3, #32
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	2310      	movs	r3, #16
 8007d80:	e7b0      	b.n	8007ce4 <_printf_i+0xfc>
 8007d82:	6823      	ldr	r3, [r4, #0]
 8007d84:	f043 0320 	orr.w	r3, r3, #32
 8007d88:	6023      	str	r3, [r4, #0]
 8007d8a:	2378      	movs	r3, #120	; 0x78
 8007d8c:	4828      	ldr	r0, [pc, #160]	; (8007e30 <_printf_i+0x248>)
 8007d8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d92:	e7e3      	b.n	8007d5c <_printf_i+0x174>
 8007d94:	065e      	lsls	r6, r3, #25
 8007d96:	bf48      	it	mi
 8007d98:	b2ad      	uxthmi	r5, r5
 8007d9a:	e7e6      	b.n	8007d6a <_printf_i+0x182>
 8007d9c:	4616      	mov	r6, r2
 8007d9e:	e7bb      	b.n	8007d18 <_printf_i+0x130>
 8007da0:	680b      	ldr	r3, [r1, #0]
 8007da2:	6826      	ldr	r6, [r4, #0]
 8007da4:	6960      	ldr	r0, [r4, #20]
 8007da6:	1d1d      	adds	r5, r3, #4
 8007da8:	600d      	str	r5, [r1, #0]
 8007daa:	0635      	lsls	r5, r6, #24
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	d501      	bpl.n	8007db4 <_printf_i+0x1cc>
 8007db0:	6018      	str	r0, [r3, #0]
 8007db2:	e002      	b.n	8007dba <_printf_i+0x1d2>
 8007db4:	0671      	lsls	r1, r6, #25
 8007db6:	d5fb      	bpl.n	8007db0 <_printf_i+0x1c8>
 8007db8:	8018      	strh	r0, [r3, #0]
 8007dba:	2300      	movs	r3, #0
 8007dbc:	6123      	str	r3, [r4, #16]
 8007dbe:	4616      	mov	r6, r2
 8007dc0:	e7ba      	b.n	8007d38 <_printf_i+0x150>
 8007dc2:	680b      	ldr	r3, [r1, #0]
 8007dc4:	1d1a      	adds	r2, r3, #4
 8007dc6:	600a      	str	r2, [r1, #0]
 8007dc8:	681e      	ldr	r6, [r3, #0]
 8007dca:	6862      	ldr	r2, [r4, #4]
 8007dcc:	2100      	movs	r1, #0
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f7f8 fa0e 	bl	80001f0 <memchr>
 8007dd4:	b108      	cbz	r0, 8007dda <_printf_i+0x1f2>
 8007dd6:	1b80      	subs	r0, r0, r6
 8007dd8:	6060      	str	r0, [r4, #4]
 8007dda:	6863      	ldr	r3, [r4, #4]
 8007ddc:	6123      	str	r3, [r4, #16]
 8007dde:	2300      	movs	r3, #0
 8007de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007de4:	e7a8      	b.n	8007d38 <_printf_i+0x150>
 8007de6:	6923      	ldr	r3, [r4, #16]
 8007de8:	4632      	mov	r2, r6
 8007dea:	4649      	mov	r1, r9
 8007dec:	4640      	mov	r0, r8
 8007dee:	47d0      	blx	sl
 8007df0:	3001      	adds	r0, #1
 8007df2:	d0ab      	beq.n	8007d4c <_printf_i+0x164>
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	079b      	lsls	r3, r3, #30
 8007df8:	d413      	bmi.n	8007e22 <_printf_i+0x23a>
 8007dfa:	68e0      	ldr	r0, [r4, #12]
 8007dfc:	9b03      	ldr	r3, [sp, #12]
 8007dfe:	4298      	cmp	r0, r3
 8007e00:	bfb8      	it	lt
 8007e02:	4618      	movlt	r0, r3
 8007e04:	e7a4      	b.n	8007d50 <_printf_i+0x168>
 8007e06:	2301      	movs	r3, #1
 8007e08:	4632      	mov	r2, r6
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	4640      	mov	r0, r8
 8007e0e:	47d0      	blx	sl
 8007e10:	3001      	adds	r0, #1
 8007e12:	d09b      	beq.n	8007d4c <_printf_i+0x164>
 8007e14:	3501      	adds	r5, #1
 8007e16:	68e3      	ldr	r3, [r4, #12]
 8007e18:	9903      	ldr	r1, [sp, #12]
 8007e1a:	1a5b      	subs	r3, r3, r1
 8007e1c:	42ab      	cmp	r3, r5
 8007e1e:	dcf2      	bgt.n	8007e06 <_printf_i+0x21e>
 8007e20:	e7eb      	b.n	8007dfa <_printf_i+0x212>
 8007e22:	2500      	movs	r5, #0
 8007e24:	f104 0619 	add.w	r6, r4, #25
 8007e28:	e7f5      	b.n	8007e16 <_printf_i+0x22e>
 8007e2a:	bf00      	nop
 8007e2c:	080081a5 	.word	0x080081a5
 8007e30:	080081b6 	.word	0x080081b6

08007e34 <_read_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4d07      	ldr	r5, [pc, #28]	; (8007e54 <_read_r+0x20>)
 8007e38:	4604      	mov	r4, r0
 8007e3a:	4608      	mov	r0, r1
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	2200      	movs	r2, #0
 8007e40:	602a      	str	r2, [r5, #0]
 8007e42:	461a      	mov	r2, r3
 8007e44:	f7fa fa90 	bl	8002368 <_read>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	d102      	bne.n	8007e52 <_read_r+0x1e>
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	b103      	cbz	r3, 8007e52 <_read_r+0x1e>
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	bd38      	pop	{r3, r4, r5, pc}
 8007e54:	20000d6c 	.word	0x20000d6c

08007e58 <_fstat_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4d07      	ldr	r5, [pc, #28]	; (8007e78 <_fstat_r+0x20>)
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	4604      	mov	r4, r0
 8007e60:	4608      	mov	r0, r1
 8007e62:	4611      	mov	r1, r2
 8007e64:	602b      	str	r3, [r5, #0]
 8007e66:	f7fa faa8 	bl	80023ba <_fstat>
 8007e6a:	1c43      	adds	r3, r0, #1
 8007e6c:	d102      	bne.n	8007e74 <_fstat_r+0x1c>
 8007e6e:	682b      	ldr	r3, [r5, #0]
 8007e70:	b103      	cbz	r3, 8007e74 <_fstat_r+0x1c>
 8007e72:	6023      	str	r3, [r4, #0]
 8007e74:	bd38      	pop	{r3, r4, r5, pc}
 8007e76:	bf00      	nop
 8007e78:	20000d6c 	.word	0x20000d6c

08007e7c <_isatty_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4d06      	ldr	r5, [pc, #24]	; (8007e98 <_isatty_r+0x1c>)
 8007e80:	2300      	movs	r3, #0
 8007e82:	4604      	mov	r4, r0
 8007e84:	4608      	mov	r0, r1
 8007e86:	602b      	str	r3, [r5, #0]
 8007e88:	f7fa faa7 	bl	80023da <_isatty>
 8007e8c:	1c43      	adds	r3, r0, #1
 8007e8e:	d102      	bne.n	8007e96 <_isatty_r+0x1a>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	b103      	cbz	r3, 8007e96 <_isatty_r+0x1a>
 8007e94:	6023      	str	r3, [r4, #0]
 8007e96:	bd38      	pop	{r3, r4, r5, pc}
 8007e98:	20000d6c 	.word	0x20000d6c

08007e9c <_init>:
 8007e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9e:	bf00      	nop
 8007ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ea2:	bc08      	pop	{r3}
 8007ea4:	469e      	mov	lr, r3
 8007ea6:	4770      	bx	lr

08007ea8 <_fini>:
 8007ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eaa:	bf00      	nop
 8007eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eae:	bc08      	pop	{r3}
 8007eb0:	469e      	mov	lr, r3
 8007eb2:	4770      	bx	lr
