
XEstation_InventoryManagement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009658  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  08009808  08009808  00019808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d7c  08009d7c  0002027c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d7c  08009d7c  00019d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d84  08009d84  0002027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d84  08009d84  00019d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d88  08009d88  00019d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  08009d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002027c  2**0
                  CONTENTS
 10 .bss          000046f4  2000027c  2000027c  0002027c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004970  20004970  0002027c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002437e  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000450b  00000000  00000000  0004462a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017e0  00000000  00000000  00048b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001670  00000000  00000000  0004a318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005c67  00000000  00000000  0004b988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d8f7  00000000  00000000  000515ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e868b  00000000  00000000  0006eee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00157571  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007484  00000000  00000000  001575c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000004e  00000000  00000000  0015ea48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000027c 	.word	0x2000027c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080097f0 	.word	0x080097f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000280 	.word	0x20000280
 80001ec:	080097f0 	.word	0x080097f0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295
 8000c86:	f000 b9b9 	b.w	8000ffc <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295
 8000d1c:	f000 b96e 	b.w	8000ffc <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	4604      	mov	r4, r0
 8000d40:	468c      	mov	ip, r1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8083 	bne.w	8000e4e <__udivmoddi4+0x116>
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	4617      	mov	r7, r2
 8000d4c:	d947      	bls.n	8000dde <__udivmoddi4+0xa6>
 8000d4e:	fab2 f282 	clz	r2, r2
 8000d52:	b142      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d54:	f1c2 0020 	rsb	r0, r2, #32
 8000d58:	fa24 f000 	lsr.w	r0, r4, r0
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	4097      	lsls	r7, r2
 8000d60:	ea40 0c01 	orr.w	ip, r0, r1
 8000d64:	4094      	lsls	r4, r2
 8000d66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d70:	fa1f fe87 	uxth.w	lr, r7
 8000d74:	fb08 c116 	mls	r1, r8, r6, ip
 8000d78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x60>
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 8119 	bcs.w	8000fc0 <__udivmoddi4+0x288>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 8116 	bls.w	8000fc0 <__udivmoddi4+0x288>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	443b      	add	r3, r7
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x8c>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db6:	f080 8105 	bcs.w	8000fc4 <__udivmoddi4+0x28c>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8102 	bls.w	8000fc4 <__udivmoddi4+0x28c>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa0>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	b902      	cbnz	r2, 8000de2 <__udivmoddi4+0xaa>
 8000de0:	deff      	udf	#255	; 0xff
 8000de2:	fab2 f282 	clz	r2, r2
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d150      	bne.n	8000e8c <__udivmoddi4+0x154>
 8000dea:	1bcb      	subs	r3, r1, r7
 8000dec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df0:	fa1f f887 	uxth.w	r8, r7
 8000df4:	2601      	movs	r6, #1
 8000df6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dfa:	0c21      	lsrs	r1, r4, #16
 8000dfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb08 f30c 	mul.w	r3, r8, ip
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0xe4>
 8000e0c:	1879      	adds	r1, r7, r1
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0xe2>
 8000e14:	428b      	cmp	r3, r1
 8000e16:	f200 80e9 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1ac9      	subs	r1, r1, r3
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x10c>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x10a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80d9 	bhi.w	8000ff4 <__udivmoddi4+0x2bc>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e7bf      	b.n	8000dce <__udivmoddi4+0x96>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d909      	bls.n	8000e66 <__udivmoddi4+0x12e>
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	f000 80b1 	beq.w	8000fba <__udivmoddi4+0x282>
 8000e58:	2600      	movs	r6, #0
 8000e5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5e:	4630      	mov	r0, r6
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	fab3 f683 	clz	r6, r3
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d14a      	bne.n	8000f04 <__udivmoddi4+0x1cc>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d302      	bcc.n	8000e78 <__udivmoddi4+0x140>
 8000e72:	4282      	cmp	r2, r0
 8000e74:	f200 80b8 	bhi.w	8000fe8 <__udivmoddi4+0x2b0>
 8000e78:	1a84      	subs	r4, r0, r2
 8000e7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	468c      	mov	ip, r1
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d0a8      	beq.n	8000dd8 <__udivmoddi4+0xa0>
 8000e86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e8a:	e7a5      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f603 	lsr.w	r6, r0, r3
 8000e94:	4097      	lsls	r7, r2
 8000e96:	fa01 f002 	lsl.w	r0, r1, r2
 8000e9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9e:	40d9      	lsrs	r1, r3
 8000ea0:	4330      	orrs	r0, r6
 8000ea2:	0c03      	lsrs	r3, r0, #16
 8000ea4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea8:	fa1f f887 	uxth.w	r8, r7
 8000eac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb4:	fb06 f108 	mul.w	r1, r6, r8
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x19c>
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec6:	f080 808d 	bcs.w	8000fe4 <__udivmoddi4+0x2ac>
 8000eca:	4299      	cmp	r1, r3
 8000ecc:	f240 808a 	bls.w	8000fe4 <__udivmoddi4+0x2ac>
 8000ed0:	3e02      	subs	r6, #2
 8000ed2:	443b      	add	r3, r7
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b281      	uxth	r1, r0
 8000ed8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000edc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ee0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee4:	fb00 f308 	mul.w	r3, r0, r8
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d907      	bls.n	8000efc <__udivmoddi4+0x1c4>
 8000eec:	1879      	adds	r1, r7, r1
 8000eee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ef2:	d273      	bcs.n	8000fdc <__udivmoddi4+0x2a4>
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d971      	bls.n	8000fdc <__udivmoddi4+0x2a4>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	4439      	add	r1, r7
 8000efc:	1acb      	subs	r3, r1, r3
 8000efe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f02:	e778      	b.n	8000df6 <__udivmoddi4+0xbe>
 8000f04:	f1c6 0c20 	rsb	ip, r6, #32
 8000f08:	fa03 f406 	lsl.w	r4, r3, r6
 8000f0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f10:	431c      	orrs	r4, r3
 8000f12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f16:	fa01 f306 	lsl.w	r3, r1, r6
 8000f1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f22:	431f      	orrs	r7, r3
 8000f24:	0c3b      	lsrs	r3, r7, #16
 8000f26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2a:	fa1f f884 	uxth.w	r8, r4
 8000f2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f36:	fb09 fa08 	mul.w	sl, r9, r8
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f40:	fa00 f306 	lsl.w	r3, r0, r6
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x220>
 8000f46:	1861      	adds	r1, r4, r1
 8000f48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f4c:	d248      	bcs.n	8000fe0 <__udivmoddi4+0x2a8>
 8000f4e:	458a      	cmp	sl, r1
 8000f50:	d946      	bls.n	8000fe0 <__udivmoddi4+0x2a8>
 8000f52:	f1a9 0902 	sub.w	r9, r9, #2
 8000f56:	4421      	add	r1, r4
 8000f58:	eba1 010a 	sub.w	r1, r1, sl
 8000f5c:	b2bf      	uxth	r7, r7
 8000f5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f6a:	fb00 f808 	mul.w	r8, r0, r8
 8000f6e:	45b8      	cmp	r8, r7
 8000f70:	d907      	bls.n	8000f82 <__udivmoddi4+0x24a>
 8000f72:	19e7      	adds	r7, r4, r7
 8000f74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f78:	d22e      	bcs.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d92c      	bls.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	4427      	add	r7, r4
 8000f82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f86:	eba7 0708 	sub.w	r7, r7, r8
 8000f8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8e:	454f      	cmp	r7, r9
 8000f90:	46c6      	mov	lr, r8
 8000f92:	4649      	mov	r1, r9
 8000f94:	d31a      	bcc.n	8000fcc <__udivmoddi4+0x294>
 8000f96:	d017      	beq.n	8000fc8 <__udivmoddi4+0x290>
 8000f98:	b15d      	cbz	r5, 8000fb2 <__udivmoddi4+0x27a>
 8000f9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000fa2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa6:	40f2      	lsrs	r2, r6
 8000fa8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fac:	40f7      	lsrs	r7, r6
 8000fae:	e9c5 2700 	strd	r2, r7, [r5]
 8000fb2:	2600      	movs	r6, #0
 8000fb4:	4631      	mov	r1, r6
 8000fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e70b      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0x60>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6fd      	b.n	8000dc4 <__udivmoddi4+0x8c>
 8000fc8:	4543      	cmp	r3, r8
 8000fca:	d2e5      	bcs.n	8000f98 <__udivmoddi4+0x260>
 8000fcc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fd0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7df      	b.n	8000f98 <__udivmoddi4+0x260>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e7d2      	b.n	8000f82 <__udivmoddi4+0x24a>
 8000fdc:	4660      	mov	r0, ip
 8000fde:	e78d      	b.n	8000efc <__udivmoddi4+0x1c4>
 8000fe0:	4681      	mov	r9, r0
 8000fe2:	e7b9      	b.n	8000f58 <__udivmoddi4+0x220>
 8000fe4:	4666      	mov	r6, ip
 8000fe6:	e775      	b.n	8000ed4 <__udivmoddi4+0x19c>
 8000fe8:	4630      	mov	r0, r6
 8000fea:	e74a      	b.n	8000e82 <__udivmoddi4+0x14a>
 8000fec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ff0:	4439      	add	r1, r7
 8000ff2:	e713      	b.n	8000e1c <__udivmoddi4+0xe4>
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	443c      	add	r4, r7
 8000ff8:	e724      	b.n	8000e44 <__udivmoddi4+0x10c>
 8000ffa:	bf00      	nop

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 10) == HAL_OK)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	b29a      	uxth	r2, r3
 8001010:	230a      	movs	r3, #10
 8001012:	68b9      	ldr	r1, [r7, #8]
 8001014:	4806      	ldr	r0, [pc, #24]	; (8001030 <_write+0x30>)
 8001016:	f003 fa60 	bl	80044da <HAL_UART_Transmit>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d101      	bne.n	8001024 <_write+0x24>
		return len;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	e001      	b.n	8001028 <_write+0x28>
	return -1;
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200043e4 	.word	0x200043e4

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f001 f8f2 	bl	8002220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 f860 	bl	8001100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001040:	f000 fb6c 	bl	800171c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001044:	f000 f8cc 	bl	80011e0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001048:	f000 f90a 	bl	8001260 <MX_I2C2_Init>
  MX_TIM1_Init();
 800104c:	f000 f948 	bl	80012e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001050:	f000 f9d2 	bl	80013f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001054:	f000 fa42 	bl	80014dc <MX_TIM3_Init>
  MX_UART5_Init();
 8001058:	f000 fab6 	bl	80015c8 <MX_UART5_Init>
  MX_USART3_UART_Init();
 800105c:	f000 fb0a 	bl	8001674 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001060:	f000 fb32 	bl	80016c8 <MX_USART6_UART_Init>
  MX_USART2_UART_Init();
 8001064:	f000 fadc 	bl	8001620 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	TFminiS_setting();
 8001068:	f005 fc50 	bl	800690c <TFminiS_setting>
//  initHx711();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800106c:	f004 fa62 	bl	8005534 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001070:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <main+0x90>)
 8001072:	2100      	movs	r1, #0
 8001074:	4814      	ldr	r0, [pc, #80]	; (80010c8 <main+0x94>)
 8001076:	f004 fa81 	bl	800557c <osThreadNew>
 800107a:	4603      	mov	r3, r0
 800107c:	4a13      	ldr	r2, [pc, #76]	; (80010cc <main+0x98>)
 800107e:	6013      	str	r3, [r2, #0]

  /* creation of Task_hx711_01 */
  Task_hx711_01Handle = osThreadNew(StartTask02, NULL, &Task_hx711_01_attributes);
 8001080:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <main+0x9c>)
 8001082:	2100      	movs	r1, #0
 8001084:	4813      	ldr	r0, [pc, #76]	; (80010d4 <main+0xa0>)
 8001086:	f004 fa79 	bl	800557c <osThreadNew>
 800108a:	4603      	mov	r3, r0
 800108c:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <main+0xa4>)
 800108e:	6013      	str	r3, [r2, #0]

  /* creation of Task_hx711_02 */
  Task_hx711_02Handle = osThreadNew(StartTask03, NULL, &Task_hx711_02_attributes);
 8001090:	4a12      	ldr	r2, [pc, #72]	; (80010dc <main+0xa8>)
 8001092:	2100      	movs	r1, #0
 8001094:	4812      	ldr	r0, [pc, #72]	; (80010e0 <main+0xac>)
 8001096:	f004 fa71 	bl	800557c <osThreadNew>
 800109a:	4603      	mov	r3, r0
 800109c:	4a11      	ldr	r2, [pc, #68]	; (80010e4 <main+0xb0>)
 800109e:	6013      	str	r3, [r2, #0]

  /* creation of Task_hx711_03 */
  Task_hx711_03Handle = osThreadNew(StartTask04, NULL, &Task_hx711_03_attributes);
 80010a0:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <main+0xb4>)
 80010a2:	2100      	movs	r1, #0
 80010a4:	4811      	ldr	r0, [pc, #68]	; (80010ec <main+0xb8>)
 80010a6:	f004 fa69 	bl	800557c <osThreadNew>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <main+0xbc>)
 80010ae:	6013      	str	r3, [r2, #0]

  /* creation of Task_hx711_04 */
  Task_hx711_04Handle = osThreadNew(StartTask05, NULL, &Task_hx711_04_attributes);
 80010b0:	4a10      	ldr	r2, [pc, #64]	; (80010f4 <main+0xc0>)
 80010b2:	2100      	movs	r1, #0
 80010b4:	4810      	ldr	r0, [pc, #64]	; (80010f8 <main+0xc4>)
 80010b6:	f004 fa61 	bl	800557c <osThreadNew>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <main+0xc8>)
 80010be:	6013      	str	r3, [r2, #0]
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <main+0x8c>
 80010c2:	bf00      	nop
 80010c4:	080098cc 	.word	0x080098cc
 80010c8:	08001989 	.word	0x08001989
 80010cc:	200043e0 	.word	0x200043e0
 80010d0:	080098f0 	.word	0x080098f0
 80010d4:	080019a1 	.word	0x080019a1
 80010d8:	20004580 	.word	0x20004580
 80010dc:	08009914 	.word	0x08009914
 80010e0:	080019b9 	.word	0x080019b9
 80010e4:	200045d0 	.word	0x200045d0
 80010e8:	08009938 	.word	0x08009938
 80010ec:	080019d1 	.word	0x080019d1
 80010f0:	20004428 	.word	0x20004428
 80010f4:	0800995c 	.word	0x0800995c
 80010f8:	080019e9 	.word	0x080019e9
 80010fc:	20004538 	.word	0x20004538

08001100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b094      	sub	sp, #80	; 0x50
 8001104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001106:	f107 0320 	add.w	r3, r7, #32
 800110a:	2230      	movs	r2, #48	; 0x30
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f005 ff90 	bl	8007034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <SystemClock_Config+0xd8>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	4a2a      	ldr	r2, [pc, #168]	; (80011d8 <SystemClock_Config+0xd8>)
 800112e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001132:	6413      	str	r3, [r2, #64]	; 0x40
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <SystemClock_Config+0xd8>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	4b25      	ldr	r3, [pc, #148]	; (80011dc <SystemClock_Config+0xdc>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a24      	ldr	r2, [pc, #144]	; (80011dc <SystemClock_Config+0xdc>)
 800114a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b22      	ldr	r3, [pc, #136]	; (80011dc <SystemClock_Config+0xdc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800115c:	2302      	movs	r3, #2
 800115e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001160:	2301      	movs	r3, #1
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001164:	2310      	movs	r3, #16
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001168:	2302      	movs	r3, #2
 800116a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800116c:	2300      	movs	r3, #0
 800116e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001170:	2308      	movs	r3, #8
 8001172:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001174:	23b4      	movs	r3, #180	; 0xb4
 8001176:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001178:	2302      	movs	r3, #2
 800117a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800117c:	2304      	movs	r3, #4
 800117e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001180:	f107 0320 	add.w	r3, r7, #32
 8001184:	4618      	mov	r0, r3
 8001186:	f001 fe13 	bl	8002db0 <HAL_RCC_OscConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001190:	f000 fc48 	bl	8001a24 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001194:	f001 fdbc 	bl	8002d10 <HAL_PWREx_EnableOverDrive>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800119e:	f000 fc41 	bl	8001a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a2:	230f      	movs	r3, #15
 80011a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a6:	2302      	movs	r3, #2
 80011a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	2105      	movs	r1, #5
 80011c0:	4618      	mov	r0, r3
 80011c2:	f002 f86d 	bl	80032a0 <HAL_RCC_ClockConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80011cc:	f000 fc2a 	bl	8001a24 <Error_Handler>
  }
}
 80011d0:	bf00      	nop
 80011d2:	3750      	adds	r7, #80	; 0x50
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40007000 	.word	0x40007000

080011e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_I2C1_Init+0x74>)
 80011e6:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <MX_I2C1_Init+0x78>)
 80011e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <MX_I2C1_Init+0x74>)
 80011ec:	4a1b      	ldr	r2, [pc, #108]	; (800125c <MX_I2C1_Init+0x7c>)
 80011ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_I2C1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <MX_I2C1_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_I2C1_Init+0x74>)
 80011fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001202:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_I2C1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_I2C1_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_I2C1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <MX_I2C1_Init+0x74>)
 800121e:	f001 fbb7 	bl	8002990 <HAL_I2C_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001228:	f000 fbfc 	bl	8001a24 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800122c:	2100      	movs	r1, #0
 800122e:	4809      	ldr	r0, [pc, #36]	; (8001254 <MX_I2C1_Init+0x74>)
 8001230:	f001 fcf2 	bl	8002c18 <HAL_I2CEx_ConfigAnalogFilter>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800123a:	f000 fbf3 	bl	8001a24 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800123e:	2100      	movs	r1, #0
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_I2C1_Init+0x74>)
 8001242:	f001 fd25 	bl	8002c90 <HAL_I2CEx_ConfigDigitalFilter>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800124c:	f000 fbea 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	2000442c 	.word	0x2000442c
 8001258:	40005400 	.word	0x40005400
 800125c:	000186a0 	.word	0x000186a0

08001260 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <MX_I2C2_Init+0x74>)
 8001266:	4a1c      	ldr	r2, [pc, #112]	; (80012d8 <MX_I2C2_Init+0x78>)
 8001268:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <MX_I2C2_Init+0x74>)
 800126c:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <MX_I2C2_Init+0x7c>)
 800126e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <MX_I2C2_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <MX_I2C2_Init+0x74>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <MX_I2C2_Init+0x74>)
 800127e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001282:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <MX_I2C2_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <MX_I2C2_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001290:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <MX_I2C2_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_I2C2_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800129c:	480d      	ldr	r0, [pc, #52]	; (80012d4 <MX_I2C2_Init+0x74>)
 800129e:	f001 fb77 	bl	8002990 <HAL_I2C_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012a8:	f000 fbbc 	bl	8001a24 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ac:	2100      	movs	r1, #0
 80012ae:	4809      	ldr	r0, [pc, #36]	; (80012d4 <MX_I2C2_Init+0x74>)
 80012b0:	f001 fcb2 	bl	8002c18 <HAL_I2CEx_ConfigAnalogFilter>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80012ba:	f000 fbb3 	bl	8001a24 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012be:	2100      	movs	r1, #0
 80012c0:	4804      	ldr	r0, [pc, #16]	; (80012d4 <MX_I2C2_Init+0x74>)
 80012c2:	f001 fce5 	bl	8002c90 <HAL_I2CEx_ConfigDigitalFilter>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80012cc:	f000 fbaa 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20004480 	.word	0x20004480
 80012d8:	40005800 	.word	0x40005800
 80012dc:	000186a0 	.word	0x000186a0

080012e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08c      	sub	sp, #48	; 0x30
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800130c:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <MX_TIM1_Init+0x110>)
 800130e:	4a39      	ldr	r2, [pc, #228]	; (80013f4 <MX_TIM1_Init+0x114>)
 8001310:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001312:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <MX_TIM1_Init+0x110>)
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b35      	ldr	r3, [pc, #212]	; (80013f0 <MX_TIM1_Init+0x110>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800131e:	4b34      	ldr	r3, [pc, #208]	; (80013f0 <MX_TIM1_Init+0x110>)
 8001320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001324:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001326:	4b32      	ldr	r3, [pc, #200]	; (80013f0 <MX_TIM1_Init+0x110>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800132c:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <MX_TIM1_Init+0x110>)
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001332:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <MX_TIM1_Init+0x110>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001338:	482d      	ldr	r0, [pc, #180]	; (80013f0 <MX_TIM1_Init+0x110>)
 800133a:	f002 f9b3 	bl	80036a4 <HAL_TIM_Base_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001344:	f000 fb6e 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001348:	4829      	ldr	r0, [pc, #164]	; (80013f0 <MX_TIM1_Init+0x110>)
 800134a:	f002 fa6b 	bl	8003824 <HAL_TIM_IC_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001354:	f000 fb66 	bl	8001a24 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	4822      	ldr	r0, [pc, #136]	; (80013f0 <MX_TIM1_Init+0x110>)
 8001368:	f002 fc59 	bl	8003c1e <HAL_TIM_SlaveConfigSynchro>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001372:	f000 fb57 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	481a      	ldr	r0, [pc, #104]	; (80013f0 <MX_TIM1_Init+0x110>)
 8001386:	f002 ffcb 	bl	8004320 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001390:	f000 fb48 	bl	8001a24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001398:	2301      	movs	r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	4619      	mov	r1, r3
 80013aa:	4811      	ldr	r0, [pc, #68]	; (80013f0 <MX_TIM1_Init+0x110>)
 80013ac:	f002 fb9b 	bl	8003ae6 <HAL_TIM_IC_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80013b6:	f000 fb35 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2204      	movs	r2, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <MX_TIM1_Init+0x110>)
 80013c2:	f002 fb90 	bl	8003ae6 <HAL_TIM_IC_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80013cc:	f000 fb2a 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2208      	movs	r2, #8
 80013d4:	4619      	mov	r1, r3
 80013d6:	4806      	ldr	r0, [pc, #24]	; (80013f0 <MX_TIM1_Init+0x110>)
 80013d8:	f002 fb85 	bl	8003ae6 <HAL_TIM_IC_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80013e2:	f000 fb1f 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	3730      	adds	r7, #48	; 0x30
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20004588 	.word	0x20004588
 80013f4:	40010000 	.word	0x40010000

080013f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	; 0x30
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001424:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <MX_TIM2_Init+0xe0>)
 8001426:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800142a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <MX_TIM2_Init+0xe0>)
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001432:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <MX_TIM2_Init+0xe0>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001438:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <MX_TIM2_Init+0xe0>)
 800143a:	f04f 32ff 	mov.w	r2, #4294967295
 800143e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <MX_TIM2_Init+0xe0>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001446:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <MX_TIM2_Init+0xe0>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800144c:	4822      	ldr	r0, [pc, #136]	; (80014d8 <MX_TIM2_Init+0xe0>)
 800144e:	f002 f929 	bl	80036a4 <HAL_TIM_Base_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001458:	f000 fae4 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800145c:	481e      	ldr	r0, [pc, #120]	; (80014d8 <MX_TIM2_Init+0xe0>)
 800145e:	f002 f9e1 	bl	8003824 <HAL_TIM_IC_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001468:	f000 fadc 	bl	8001a24 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4619      	mov	r1, r3
 800147a:	4817      	ldr	r0, [pc, #92]	; (80014d8 <MX_TIM2_Init+0xe0>)
 800147c:	f002 fbcf 	bl	8003c1e <HAL_TIM_SlaveConfigSynchro>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001486:	f000 facd 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	480f      	ldr	r0, [pc, #60]	; (80014d8 <MX_TIM2_Init+0xe0>)
 800149a:	f002 ff41 	bl	8004320 <HAL_TIMEx_MasterConfigSynchronization>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80014a4:	f000 fabe 	bl	8001a24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014ac:	2301      	movs	r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2204      	movs	r2, #4
 80014bc:	4619      	mov	r1, r3
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <MX_TIM2_Init+0xe0>)
 80014c0:	f002 fb11 	bl	8003ae6 <HAL_TIM_IC_ConfigChannel>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80014ca:	f000 faab 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	3730      	adds	r7, #48	; 0x30
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000466c 	.word	0x2000466c

080014dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	; 0x30
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001508:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <MX_TIM3_Init+0xe4>)
 800150a:	4a2e      	ldr	r2, [pc, #184]	; (80015c4 <MX_TIM3_Init+0xe8>)
 800150c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535-1;
 800150e:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <MX_TIM3_Init+0xe4>)
 8001510:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001514:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <MX_TIM3_Init+0xe4>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <MX_TIM3_Init+0xe4>)
 800151e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001522:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001524:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <MX_TIM3_Init+0xe4>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152a:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <MX_TIM3_Init+0xe4>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001530:	4823      	ldr	r0, [pc, #140]	; (80015c0 <MX_TIM3_Init+0xe4>)
 8001532:	f002 f8b7 	bl	80036a4 <HAL_TIM_Base_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800153c:	f000 fa72 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001540:	481f      	ldr	r0, [pc, #124]	; (80015c0 <MX_TIM3_Init+0xe4>)
 8001542:	f002 f96f 	bl	8003824 <HAL_TIM_IC_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800154c:	f000 fa6a 	bl	8001a24 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8001554:	2340      	movs	r3, #64	; 0x40
 8001556:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	4619      	mov	r1, r3
 8001562:	4817      	ldr	r0, [pc, #92]	; (80015c0 <MX_TIM3_Init+0xe4>)
 8001564:	f002 fb5b 	bl	8003c1e <HAL_TIM_SlaveConfigSynchro>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800156e:	f000 fa59 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	480f      	ldr	r0, [pc, #60]	; (80015c0 <MX_TIM3_Init+0xe4>)
 8001582:	f002 fecd 	bl	8004320 <HAL_TIMEx_MasterConfigSynchronization>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800158c:	f000 fa4a 	bl	8001a24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001594:	2301      	movs	r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2204      	movs	r2, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	4806      	ldr	r0, [pc, #24]	; (80015c0 <MX_TIM3_Init+0xe4>)
 80015a8:	f002 fa9d 	bl	8003ae6 <HAL_TIM_IC_ConfigChannel>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80015b2:	f000 fa37 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	3730      	adds	r7, #48	; 0x30
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200044f0 	.word	0x200044f0
 80015c4:	40000400 	.word	0x40000400

080015c8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_UART5_Init+0x4c>)
 80015ce:	4a12      	ldr	r2, [pc, #72]	; (8001618 <MX_UART5_Init+0x50>)
 80015d0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 3000000;
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <MX_UART5_Init+0x4c>)
 80015d4:	4a11      	ldr	r2, [pc, #68]	; (800161c <MX_UART5_Init+0x54>)
 80015d6:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_UART5_Init+0x4c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <MX_UART5_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <MX_UART5_Init+0x4c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <MX_UART5_Init+0x4c>)
 80015ec:	220c      	movs	r2, #12
 80015ee:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <MX_UART5_Init+0x4c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_8;
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <MX_UART5_Init+0x4c>)
 80015f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_UART5_Init+0x4c>)
 8001600:	f002 ff1e 	bl	8004440 <HAL_UART_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800160a:	f000 fa0b 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000453c 	.word	0x2000453c
 8001618:	40005000 	.word	0x40005000
 800161c:	002dc6c0 	.word	0x002dc6c0

08001620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_USART2_UART_Init+0x4c>)
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <MX_USART2_UART_Init+0x50>)
 8001628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <MX_USART2_UART_Init+0x4c>)
 800162c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_USART2_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_USART2_UART_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <MX_USART2_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_USART2_UART_Init+0x4c>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <MX_USART2_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_USART2_UART_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_USART2_UART_Init+0x4c>)
 8001658:	f002 fef2 	bl	8004440 <HAL_UART_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001662:	f000 f9df 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200046b4 	.word	0x200046b4
 8001670:	40004400 	.word	0x40004400

08001674 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <MX_USART3_UART_Init+0x50>)
 800167c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 8001680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001684:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 80016ac:	f002 fec8 	bl	8004440 <HAL_UART_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016b6:	f000 f9b5 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200043e4 	.word	0x200043e4
 80016c4:	40004800 	.word	0x40004800

080016c8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016ce:	4a12      	ldr	r2, [pc, #72]	; (8001718 <MX_USART6_UART_Init+0x50>)
 80016d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016fe:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001700:	4804      	ldr	r0, [pc, #16]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 8001702:	f002 fe9d 	bl	8004440 <HAL_UART_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 800170c:	f000 f98a 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20004624 	.word	0x20004624
 8001718:	40011400 	.word	0x40011400

0800171c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08c      	sub	sp, #48	; 0x30
 8001720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
 8001736:	4b8d      	ldr	r3, [pc, #564]	; (800196c <MX_GPIO_Init+0x250>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a8c      	ldr	r2, [pc, #560]	; (800196c <MX_GPIO_Init+0x250>)
 800173c:	f043 0310 	orr.w	r3, r3, #16
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b8a      	ldr	r3, [pc, #552]	; (800196c <MX_GPIO_Init+0x250>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	4b86      	ldr	r3, [pc, #536]	; (800196c <MX_GPIO_Init+0x250>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a85      	ldr	r2, [pc, #532]	; (800196c <MX_GPIO_Init+0x250>)
 8001758:	f043 0320 	orr.w	r3, r3, #32
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b83      	ldr	r3, [pc, #524]	; (800196c <MX_GPIO_Init+0x250>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0320 	and.w	r3, r3, #32
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	4b7f      	ldr	r3, [pc, #508]	; (800196c <MX_GPIO_Init+0x250>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a7e      	ldr	r2, [pc, #504]	; (800196c <MX_GPIO_Init+0x250>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b7c      	ldr	r3, [pc, #496]	; (800196c <MX_GPIO_Init+0x250>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b78      	ldr	r3, [pc, #480]	; (800196c <MX_GPIO_Init+0x250>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a77      	ldr	r2, [pc, #476]	; (800196c <MX_GPIO_Init+0x250>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b75      	ldr	r3, [pc, #468]	; (800196c <MX_GPIO_Init+0x250>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	4b71      	ldr	r3, [pc, #452]	; (800196c <MX_GPIO_Init+0x250>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a70      	ldr	r2, [pc, #448]	; (800196c <MX_GPIO_Init+0x250>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b6e      	ldr	r3, [pc, #440]	; (800196c <MX_GPIO_Init+0x250>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	4b6a      	ldr	r3, [pc, #424]	; (800196c <MX_GPIO_Init+0x250>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a69      	ldr	r2, [pc, #420]	; (800196c <MX_GPIO_Init+0x250>)
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b67      	ldr	r3, [pc, #412]	; (800196c <MX_GPIO_Init+0x250>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	4b63      	ldr	r3, [pc, #396]	; (800196c <MX_GPIO_Init+0x250>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a62      	ldr	r2, [pc, #392]	; (800196c <MX_GPIO_Init+0x250>)
 80017e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b60      	ldr	r3, [pc, #384]	; (800196c <MX_GPIO_Init+0x250>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EXPD01_sck_Pin|PD03_sck_Pin|PD05_sck_Pin|EXIC01_sck_Pin
 80017f6:	2200      	movs	r2, #0
 80017f8:	f24c 5105 	movw	r1, #50437	; 0xc505
 80017fc:	485c      	ldr	r0, [pc, #368]	; (8001970 <MX_GPIO_Init+0x254>)
 80017fe:	f001 f8ad 	bl	800295c <HAL_GPIO_WritePin>
                          |SYR01_sck_Pin|SYR02_sck_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD01_sck_GPIO_Port, PD01_sck_Pin, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	2104      	movs	r1, #4
 8001806:	485b      	ldr	r0, [pc, #364]	; (8001974 <MX_GPIO_Init+0x258>)
 8001808:	f001 f8a8 	bl	800295c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CP01_echo_GPIO_Port, CP01_echo_Pin, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	4859      	ldr	r0, [pc, #356]	; (8001978 <MX_GPIO_Init+0x25c>)
 8001812:	f001 f8a3 	bl	800295c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PD01_echo_Pin|JG01_echo_Pin|JG02_echo_Pin|LD01_echo_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800181c:	4857      	ldr	r0, [pc, #348]	; (800197c <MX_GPIO_Init+0x260>)
 800181e:	f001 f89d 	bl	800295c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD04_sck_Pin|CF01_echo_Pin, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8001828:	4855      	ldr	r0, [pc, #340]	; (8001980 <MX_GPIO_Init+0x264>)
 800182a:	f001 f897 	bl	800295c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD02_sck_GPIO_Port, PD02_sck_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2140      	movs	r1, #64	; 0x40
 8001832:	4854      	ldr	r0, [pc, #336]	; (8001984 <MX_GPIO_Init+0x268>)
 8001834:	f001 f892 	bl	800295c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EXPD01_sck_Pin PD03_sck_Pin PD05_sck_Pin EXIC01_sck_Pin
                           SYR01_sck_Pin SYR02_sck_Pin */
  GPIO_InitStruct.Pin = EXPD01_sck_Pin|PD03_sck_Pin|PD05_sck_Pin|EXIC01_sck_Pin
 8001838:	f24c 5305 	movw	r3, #50437	; 0xc505
 800183c:	61fb      	str	r3, [r7, #28]
                          |SYR01_sck_Pin|SYR02_sck_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	4619      	mov	r1, r3
 8001850:	4847      	ldr	r0, [pc, #284]	; (8001970 <MX_GPIO_Init+0x254>)
 8001852:	f000 febf 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD02_dout_Pin */
  GPIO_InitStruct.Pin = PD02_dout_Pin;
 8001856:	2310      	movs	r3, #16
 8001858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PD02_dout_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	4619      	mov	r1, r3
 8001868:	4844      	ldr	r0, [pc, #272]	; (800197c <MX_GPIO_Init+0x260>)
 800186a:	f000 feb3 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD01_sck_Pin */
  GPIO_InitStruct.Pin = PD01_sck_Pin;
 800186e:	2304      	movs	r3, #4
 8001870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PD01_sck_GPIO_Port, &GPIO_InitStruct);
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	4619      	mov	r1, r3
 8001884:	483b      	ldr	r0, [pc, #236]	; (8001974 <MX_GPIO_Init+0x258>)
 8001886:	f000 fea5 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SYR01_dout_Pin */
  GPIO_InitStruct.Pin = SYR01_dout_Pin;
 800188a:	2301      	movs	r3, #1
 800188c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SYR01_dout_GPIO_Port, &GPIO_InitStruct);
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	4619      	mov	r1, r3
 800189c:	4836      	ldr	r0, [pc, #216]	; (8001978 <MX_GPIO_Init+0x25c>)
 800189e:	f000 fe99 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CP01_echo_Pin */
  GPIO_InitStruct.Pin = CP01_echo_Pin;
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	2301      	movs	r3, #1
 80018a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CP01_echo_GPIO_Port, &GPIO_InitStruct);
 80018b2:	f107 031c 	add.w	r3, r7, #28
 80018b6:	4619      	mov	r1, r3
 80018b8:	482f      	ldr	r0, [pc, #188]	; (8001978 <MX_GPIO_Init+0x25c>)
 80018ba:	f000 fe8b 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYR02_dout_Pin PD01_dout_Pin PD03_dout_Pin */
  GPIO_InitStruct.Pin = SYR02_dout_Pin|PD01_dout_Pin|PD03_dout_Pin;
 80018be:	2307      	movs	r3, #7
 80018c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	4619      	mov	r1, r3
 80018d0:	482c      	ldr	r0, [pc, #176]	; (8001984 <MX_GPIO_Init+0x268>)
 80018d2:	f000 fe7f 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD01_echo_Pin JG01_echo_Pin JG02_echo_Pin LD01_echo_Pin */
  GPIO_InitStruct.Pin = PD01_echo_Pin|JG01_echo_Pin|JG02_echo_Pin|LD01_echo_Pin;
 80018d6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80018da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018dc:	2301      	movs	r3, #1
 80018de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	4619      	mov	r1, r3
 80018ee:	4823      	ldr	r0, [pc, #140]	; (800197c <MX_GPIO_Init+0x260>)
 80018f0:	f000 fe70 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD05_dout_Pin EXIC01_dout_Pin */
  GPIO_InitStruct.Pin = PD05_dout_Pin|EXIC01_dout_Pin;
 80018f4:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 80018f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001902:	f107 031c 	add.w	r3, r7, #28
 8001906:	4619      	mov	r1, r3
 8001908:	4819      	ldr	r0, [pc, #100]	; (8001970 <MX_GPIO_Init+0x254>)
 800190a:	f000 fe63 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXPD01_dout_Pin PD04_dout_Pin */
  GPIO_InitStruct.Pin = EXPD01_dout_Pin|PD04_dout_Pin;
 800190e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4619      	mov	r1, r3
 8001922:	4817      	ldr	r0, [pc, #92]	; (8001980 <MX_GPIO_Init+0x264>)
 8001924:	f000 fe56 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD04_sck_Pin CF01_echo_Pin */
  GPIO_InitStruct.Pin = PD04_sck_Pin|CF01_echo_Pin;
 8001928:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800192c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192e:	2301      	movs	r3, #1
 8001930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800193a:	f107 031c 	add.w	r3, r7, #28
 800193e:	4619      	mov	r1, r3
 8001940:	480f      	ldr	r0, [pc, #60]	; (8001980 <MX_GPIO_Init+0x264>)
 8001942:	f000 fe47 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD02_sck_Pin */
  GPIO_InitStruct.Pin = PD02_sck_Pin;
 8001946:	2340      	movs	r3, #64	; 0x40
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PD02_sck_GPIO_Port, &GPIO_InitStruct);
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	4619      	mov	r1, r3
 800195c:	4809      	ldr	r0, [pc, #36]	; (8001984 <MX_GPIO_Init+0x268>)
 800195e:	f000 fe39 	bl	80025d4 <HAL_GPIO_Init>

}
 8001962:	bf00      	nop
 8001964:	3730      	adds	r7, #48	; 0x30
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	40021000 	.word	0x40021000
 8001974:	40020800 	.word	0x40020800
 8001978:	40020000 	.word	0x40020000
 800197c:	40021400 	.word	0x40021400
 8001980:	40020c00 	.word	0x40020c00
 8001984:	40020400 	.word	0x40020400

08001988 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	 printf("test01\n");
	 HAL_Delay(1000);
 8001990:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001994:	f000 fc86 	bl	80022a4 <HAL_Delay>
	 //	  runHx711(0);
    osDelay(1);
 8001998:	2001      	movs	r0, #1
 800199a:	f003 fe81 	bl	80056a0 <osDelay>
	 HAL_Delay(1000);
 800199e:	e7f7      	b.n	8001990 <StartDefaultTask+0x8>

080019a0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
//	 printf("test02\n");
		 HAL_Delay(1005);
 80019a8:	f240 30ed 	movw	r0, #1005	; 0x3ed
 80019ac:	f000 fc7a 	bl	80022a4 <HAL_Delay>

//	  runHx711(1);

    osDelay(1);
 80019b0:	2001      	movs	r0, #1
 80019b2:	f003 fe75 	bl	80056a0 <osDelay>
		 HAL_Delay(1005);
 80019b6:	e7f7      	b.n	80019a8 <StartTask02+0x8>

080019b8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
//		 printf("test03\n");
			 HAL_Delay(1025);
 80019c0:	f240 4001 	movw	r0, #1025	; 0x401
 80019c4:	f000 fc6e 	bl	80022a4 <HAL_Delay>
    osDelay(1);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f003 fe69 	bl	80056a0 <osDelay>
			 HAL_Delay(1025);
 80019ce:	e7f7      	b.n	80019c0 <StartTask03+0x8>

080019d0 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  runHx711(2);
//		 printf("test04\n");
			 HAL_Delay(1055);
 80019d8:	f240 401f 	movw	r0, #1055	; 0x41f
 80019dc:	f000 fc62 	bl	80022a4 <HAL_Delay>
    osDelay(1);
 80019e0:	2001      	movs	r0, #1
 80019e2:	f003 fe5d 	bl	80056a0 <osDelay>
			 HAL_Delay(1055);
 80019e6:	e7f7      	b.n	80019d8 <StartTask04+0x8>

080019e8 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
//	  runHx711(3);
	  runHx711(0);
 80019f0:	2000      	movs	r0, #0
 80019f2:	f005 f801 	bl	80069f8 <runHx711>
    osDelay(1);
 80019f6:	2001      	movs	r0, #1
 80019f8:	f003 fe52 	bl	80056a0 <osDelay>
	  runHx711(0);
 80019fc:	e7f8      	b.n	80019f0 <StartTask05+0x8>
	...

08001a00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d101      	bne.n	8001a16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a12:	f000 fc27 	bl	8002264 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40001c00 	.word	0x40001c00

08001a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <Error_Handler+0x8>
	...

08001a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_MspInit+0x54>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	4a11      	ldr	r2, [pc, #68]	; (8001a84 <HAL_MspInit+0x54>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	; 0x44
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_MspInit+0x54>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_MspInit+0x54>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_MspInit+0x54>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_MspInit+0x54>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	210f      	movs	r1, #15
 8001a72:	f06f 0001 	mvn.w	r0, #1
 8001a76:	f000 fcf1 	bl	800245c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800

08001a88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08c      	sub	sp, #48	; 0x30
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a33      	ldr	r2, [pc, #204]	; (8001b74 <HAL_I2C_MspInit+0xec>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d12d      	bne.n	8001b06 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <HAL_I2C_MspInit+0xf0>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a31      	ldr	r2, [pc, #196]	; (8001b78 <HAL_I2C_MspInit+0xf0>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <HAL_I2C_MspInit+0xf0>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	61bb      	str	r3, [r7, #24]
 8001ac4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Cup_Bakery_SCL_Pin|Cup_Bakery_SDA_Pin;
 8001ac6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001acc:	2312      	movs	r3, #18
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad8:	2304      	movs	r3, #4
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4826      	ldr	r0, [pc, #152]	; (8001b7c <HAL_I2C_MspInit+0xf4>)
 8001ae4:	f000 fd76 	bl	80025d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <HAL_I2C_MspInit+0xf0>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	4a21      	ldr	r2, [pc, #132]	; (8001b78 <HAL_I2C_MspInit+0xf0>)
 8001af2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001af6:	6413      	str	r3, [r2, #64]	; 0x40
 8001af8:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <HAL_I2C_MspInit+0xf0>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b04:	e031      	b.n	8001b6a <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a1d      	ldr	r2, [pc, #116]	; (8001b80 <HAL_I2C_MspInit+0xf8>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d12c      	bne.n	8001b6a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_I2C_MspInit+0xf0>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <HAL_I2C_MspInit+0xf0>)
 8001b1a:	f043 0302 	orr.w	r3, r3, #2
 8001b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b20:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_I2C_MspInit+0xf0>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Lid_SCL_Pin|Lid_SDA_Pin;
 8001b2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b32:	2312      	movs	r3, #18
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	4619      	mov	r1, r3
 8001b48:	480c      	ldr	r0, [pc, #48]	; (8001b7c <HAL_I2C_MspInit+0xf4>)
 8001b4a:	f000 fd43 	bl	80025d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_I2C_MspInit+0xf0>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a08      	ldr	r2, [pc, #32]	; (8001b78 <HAL_I2C_MspInit+0xf0>)
 8001b58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_I2C_MspInit+0xf0>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
}
 8001b6a:	bf00      	nop
 8001b6c:	3730      	adds	r7, #48	; 0x30
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40005400 	.word	0x40005400
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40005800 	.word	0x40005800

08001b84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08e      	sub	sp, #56	; 0x38
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a4b      	ldr	r2, [pc, #300]	; (8001cd0 <HAL_TIM_Base_MspInit+0x14c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d12d      	bne.n	8001c02 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	623b      	str	r3, [r7, #32]
 8001baa:	4b4a      	ldr	r3, [pc, #296]	; (8001cd4 <HAL_TIM_Base_MspInit+0x150>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	4a49      	ldr	r2, [pc, #292]	; (8001cd4 <HAL_TIM_Base_MspInit+0x150>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <HAL_TIM_Base_MspInit+0x150>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	623b      	str	r3, [r7, #32]
 8001bc0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <HAL_TIM_Base_MspInit+0x150>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a42      	ldr	r2, [pc, #264]	; (8001cd4 <HAL_TIM_Base_MspInit+0x150>)
 8001bcc:	f043 0310 	orr.w	r3, r3, #16
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b40      	ldr	r3, [pc, #256]	; (8001cd4 <HAL_TIM_Base_MspInit+0x150>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = JG01_TIM_Pin|JG02_TIM_Pin|LD01_TIM_Pin;
 8001bde:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4837      	ldr	r0, [pc, #220]	; (8001cd8 <HAL_TIM_Base_MspInit+0x154>)
 8001bfc:	f000 fcea 	bl	80025d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c00:	e062      	b.n	8001cc8 <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM2)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c0a:	d12c      	bne.n	8001c66 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <HAL_TIM_Base_MspInit+0x150>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	4a2f      	ldr	r2, [pc, #188]	; (8001cd4 <HAL_TIM_Base_MspInit+0x150>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <HAL_TIM_Base_MspInit+0x150>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <HAL_TIM_Base_MspInit+0x150>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	4a28      	ldr	r2, [pc, #160]	; (8001cd4 <HAL_TIM_Base_MspInit+0x150>)
 8001c32:	f043 0302 	orr.w	r3, r3, #2
 8001c36:	6313      	str	r3, [r2, #48]	; 0x30
 8001c38:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <HAL_TIM_Base_MspInit+0x150>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PD01_TIM_Pin;
 8001c44:	2308      	movs	r3, #8
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c54:	2301      	movs	r3, #1
 8001c56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PD01_TIM_GPIO_Port, &GPIO_InitStruct);
 8001c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	481f      	ldr	r0, [pc, #124]	; (8001cdc <HAL_TIM_Base_MspInit+0x158>)
 8001c60:	f000 fcb8 	bl	80025d4 <HAL_GPIO_Init>
}
 8001c64:	e030      	b.n	8001cc8 <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM3)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ce0 <HAL_TIM_Base_MspInit+0x15c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d12b      	bne.n	8001cc8 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <HAL_TIM_Base_MspInit+0x150>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	4a16      	ldr	r2, [pc, #88]	; (8001cd4 <HAL_TIM_Base_MspInit+0x150>)
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_TIM_Base_MspInit+0x150>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <HAL_TIM_Base_MspInit+0x150>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c94:	4a0f      	ldr	r2, [pc, #60]	; (8001cd4 <HAL_TIM_Base_MspInit+0x150>)
 8001c96:	f043 0302 	orr.w	r3, r3, #2
 8001c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_TIM_Base_MspInit+0x150>)
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CF01_TIM_Pin|CP01_TIM_Pin;
 8001ca8:	2330      	movs	r3, #48	; 0x30
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4806      	ldr	r0, [pc, #24]	; (8001cdc <HAL_TIM_Base_MspInit+0x158>)
 8001cc4:	f000 fc86 	bl	80025d4 <HAL_GPIO_Init>
}
 8001cc8:	bf00      	nop
 8001cca:	3738      	adds	r7, #56	; 0x38
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40020400 	.word	0x40020400
 8001ce0:	40000400 	.word	0x40000400

08001ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b090      	sub	sp, #64	; 0x40
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a80      	ldr	r2, [pc, #512]	; (8001f04 <HAL_UART_MspInit+0x220>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d153      	bne.n	8001dae <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d0a:	4b7f      	ldr	r3, [pc, #508]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a7e      	ldr	r2, [pc, #504]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001d10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b7c      	ldr	r3, [pc, #496]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d20:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
 8001d26:	4b78      	ldr	r3, [pc, #480]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a77      	ldr	r2, [pc, #476]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b75      	ldr	r3, [pc, #468]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
 8001d42:	4b71      	ldr	r3, [pc, #452]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a70      	ldr	r2, [pc, #448]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001d48:	f043 0308 	orr.w	r3, r3, #8
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b6e      	ldr	r3, [pc, #440]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	623b      	str	r3, [r7, #32]
 8001d58:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d60:	2302      	movs	r3, #2
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d74:	4619      	mov	r1, r3
 8001d76:	4865      	ldr	r0, [pc, #404]	; (8001f0c <HAL_UART_MspInit+0x228>)
 8001d78:	f000 fc2c 	bl	80025d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d94:	4619      	mov	r1, r3
 8001d96:	485e      	ldr	r0, [pc, #376]	; (8001f10 <HAL_UART_MspInit+0x22c>)
 8001d98:	f000 fc1c 	bl	80025d4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 11, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	210b      	movs	r1, #11
 8001da0:	2035      	movs	r0, #53	; 0x35
 8001da2:	f000 fb5b 	bl	800245c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001da6:	2035      	movs	r0, #53	; 0x35
 8001da8:	f000 fb74 	bl	8002494 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001dac:	e0a6      	b.n	8001efc <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <HAL_UART_MspInit+0x230>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d134      	bne.n	8001e22 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	4b52      	ldr	r3, [pc, #328]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	4a51      	ldr	r2, [pc, #324]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc8:	4b4f      	ldr	r3, [pc, #316]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	4b4b      	ldr	r3, [pc, #300]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	4a4a      	ldr	r2, [pc, #296]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001dde:	f043 0308 	orr.w	r3, r3, #8
 8001de2:	6313      	str	r3, [r2, #48]	; 0x30
 8001de4:	4b48      	ldr	r3, [pc, #288]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	61bb      	str	r3, [r7, #24]
 8001dee:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001df0:	2360      	movs	r3, #96	; 0x60
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e00:	2307      	movs	r3, #7
 8001e02:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4841      	ldr	r0, [pc, #260]	; (8001f10 <HAL_UART_MspInit+0x22c>)
 8001e0c:	f000 fbe2 	bl	80025d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2105      	movs	r1, #5
 8001e14:	2026      	movs	r0, #38	; 0x26
 8001e16:	f000 fb21 	bl	800245c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e1a:	2026      	movs	r0, #38	; 0x26
 8001e1c:	f000 fb3a 	bl	8002494 <HAL_NVIC_EnableIRQ>
}
 8001e20:	e06c      	b.n	8001efc <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART3)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a3c      	ldr	r2, [pc, #240]	; (8001f18 <HAL_UART_MspInit+0x234>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d135      	bne.n	8001e98 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	4b35      	ldr	r3, [pc, #212]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	4a34      	ldr	r2, [pc, #208]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001e36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3c:	4b32      	ldr	r3, [pc, #200]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	4a2d      	ldr	r2, [pc, #180]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001e52:	f043 0308 	orr.w	r3, r3, #8
 8001e56:	6313      	str	r3, [r2, #48]	; 0x30
 8001e58:	4b2b      	ldr	r3, [pc, #172]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 8001e64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e76:	2307      	movs	r3, #7
 8001e78:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4823      	ldr	r0, [pc, #140]	; (8001f10 <HAL_UART_MspInit+0x22c>)
 8001e82:	f000 fba7 	bl	80025d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 10, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	210a      	movs	r1, #10
 8001e8a:	2027      	movs	r0, #39	; 0x27
 8001e8c:	f000 fae6 	bl	800245c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e90:	2027      	movs	r0, #39	; 0x27
 8001e92:	f000 faff 	bl	8002494 <HAL_NVIC_EnableIRQ>
}
 8001e96:	e031      	b.n	8001efc <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART6)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1f      	ldr	r2, [pc, #124]	; (8001f1c <HAL_UART_MspInit+0x238>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d12c      	bne.n	8001efc <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a17      	ldr	r2, [pc, #92]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001eac:	f043 0320 	orr.w	r3, r3, #32
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f003 0320 	and.w	r3, r3, #32
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <HAL_UART_MspInit+0x224>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Lidar2_RX_Pin|Lidar2_TX_Pin;
 8001eda:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001eec:	2308      	movs	r3, #8
 8001eee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	480a      	ldr	r0, [pc, #40]	; (8001f20 <HAL_UART_MspInit+0x23c>)
 8001ef8:	f000 fb6c 	bl	80025d4 <HAL_GPIO_Init>
}
 8001efc:	bf00      	nop
 8001efe:	3740      	adds	r7, #64	; 0x40
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40005000 	.word	0x40005000
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020800 	.word	0x40020800
 8001f10:	40020c00 	.word	0x40020c00
 8001f14:	40004400 	.word	0x40004400
 8001f18:	40004800 	.word	0x40004800
 8001f1c:	40011400 	.word	0x40011400
 8001f20:	40021800 	.word	0x40021800

08001f24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	; 0x30
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8001f34:	2200      	movs	r2, #0
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	202c      	movs	r0, #44	; 0x2c
 8001f3a:	f000 fa8f 	bl	800245c <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001f3e:	202c      	movs	r0, #44	; 0x2c
 8001f40:	f000 faa8 	bl	8002494 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	4b1f      	ldr	r3, [pc, #124]	; (8001fc8 <HAL_InitTick+0xa4>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	4a1e      	ldr	r2, [pc, #120]	; (8001fc8 <HAL_InitTick+0xa4>)
 8001f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f52:	6413      	str	r3, [r2, #64]	; 0x40
 8001f54:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <HAL_InitTick+0xa4>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f60:	f107 0210 	add.w	r2, r7, #16
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4611      	mov	r1, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f001 fb68 	bl	8003640 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f70:	f001 fb3e 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 8001f74:	4603      	mov	r3, r0
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <HAL_InitTick+0xa8>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0c9b      	lsrs	r3, r3, #18
 8001f84:	3b01      	subs	r3, #1
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_InitTick+0xac>)
 8001f8a:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <HAL_InitTick+0xb0>)
 8001f8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <HAL_InitTick+0xac>)
 8001f90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f94:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001f96:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <HAL_InitTick+0xac>)
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9a:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_InitTick+0xac>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_InitTick+0xac>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8001fa8:	4809      	ldr	r0, [pc, #36]	; (8001fd0 <HAL_InitTick+0xac>)
 8001faa:	f001 fb7b 	bl	80036a4 <HAL_TIM_Base_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d104      	bne.n	8001fbe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001fb4:	4806      	ldr	r0, [pc, #24]	; (8001fd0 <HAL_InitTick+0xac>)
 8001fb6:	f001 fbc5 	bl	8003744 <HAL_TIM_Base_Start_IT>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	e000      	b.n	8001fc0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3730      	adds	r7, #48	; 0x30
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	431bde83 	.word	0x431bde83
 8001fd0:	200046f8 	.word	0x200046f8
 8001fd4:	40001c00 	.word	0x40001c00

08001fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <NMI_Handler+0x4>

08001fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe2:	e7fe      	b.n	8001fe2 <HardFault_Handler+0x4>

08001fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe8:	e7fe      	b.n	8001fe8 <MemManage_Handler+0x4>

08001fea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fee:	e7fe      	b.n	8001fee <BusFault_Handler+0x4>

08001ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <UsageFault_Handler+0x4>

08001ff6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <USART2_IRQHandler+0x10>)
 800200a:	f002 fbcb 	bl	80047a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200046b4 	.word	0x200046b4

08002018 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <USART3_IRQHandler+0x10>)
 800201e:	f002 fbc1 	bl	80047a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200043e4 	.word	0x200043e4

0800202c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002032:	f001 fc50 	bl	80038d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200046f8 	.word	0x200046f8

08002040 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <UART5_IRQHandler+0x10>)
 8002046:	f002 fbad 	bl	80047a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000453c 	.word	0x2000453c

08002054 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
	return 1;
 8002058:	2301      	movs	r3, #1
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <_kill>:

int _kill(int pid, int sig)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800206e:	f004 fea7 	bl	8006dc0 <__errno>
 8002072:	4603      	mov	r3, r0
 8002074:	2216      	movs	r2, #22
 8002076:	601a      	str	r2, [r3, #0]
	return -1;
 8002078:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <_exit>:

void _exit (int status)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ffe7 	bl	8002064 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002096:	e7fe      	b.n	8002096 <_exit+0x12>

08002098 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	e00a      	b.n	80020c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020aa:	f3af 8000 	nop.w
 80020ae:	4601      	mov	r1, r0
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	60ba      	str	r2, [r7, #8]
 80020b6:	b2ca      	uxtb	r2, r1
 80020b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3301      	adds	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	dbf0      	blt.n	80020aa <_read+0x12>
	}

return len;
 80020c8:	687b      	ldr	r3, [r7, #4]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
	return -1;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020fa:	605a      	str	r2, [r3, #4]
	return 0;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <_isatty>:

int _isatty(int file)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
	return 1;
 8002112:	2301      	movs	r3, #1
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
	return 0;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002144:	4a14      	ldr	r2, [pc, #80]	; (8002198 <_sbrk+0x5c>)
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <_sbrk+0x60>)
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <_sbrk+0x64>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d102      	bne.n	800215e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <_sbrk+0x64>)
 800215a:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <_sbrk+0x68>)
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <_sbrk+0x64>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	429a      	cmp	r2, r3
 800216a:	d207      	bcs.n	800217c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800216c:	f004 fe28 	bl	8006dc0 <__errno>
 8002170:	4603      	mov	r3, r0
 8002172:	220c      	movs	r2, #12
 8002174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
 800217a:	e009      	b.n	8002190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <_sbrk+0x64>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <_sbrk+0x64>)
 800218c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800218e:	68fb      	ldr	r3, [r7, #12]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20030000 	.word	0x20030000
 800219c:	00000400 	.word	0x00000400
 80021a0:	20000298 	.word	0x20000298
 80021a4:	20004970 	.word	0x20004970

080021a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <SystemInit+0x20>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <SystemInit+0x20>)
 80021b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80021cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002204 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021d0:	480d      	ldr	r0, [pc, #52]	; (8002208 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021d2:	490e      	ldr	r1, [pc, #56]	; (800220c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021d4:	4a0e      	ldr	r2, [pc, #56]	; (8002210 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d8:	e002      	b.n	80021e0 <LoopCopyDataInit>

080021da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021de:	3304      	adds	r3, #4

080021e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e4:	d3f9      	bcc.n	80021da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e6:	4a0b      	ldr	r2, [pc, #44]	; (8002214 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021e8:	4c0b      	ldr	r4, [pc, #44]	; (8002218 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ec:	e001      	b.n	80021f2 <LoopFillZerobss>

080021ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f0:	3204      	adds	r2, #4

080021f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f4:	d3fb      	bcc.n	80021ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021f6:	f7ff ffd7 	bl	80021a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021fa:	f004 fedd 	bl	8006fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021fe:	f7fe ff19 	bl	8001034 <main>
  bx  lr    
 8002202:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002204:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800220c:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 8002210:	08009d8c 	.word	0x08009d8c
  ldr r2, =_sbss
 8002214:	2000027c 	.word	0x2000027c
  ldr r4, =_ebss
 8002218:	20004970 	.word	0x20004970

0800221c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800221c:	e7fe      	b.n	800221c <ADC_IRQHandler>
	...

08002220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002224:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <HAL_Init+0x40>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0d      	ldr	r2, [pc, #52]	; (8002260 <HAL_Init+0x40>)
 800222a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800222e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_Init+0x40>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <HAL_Init+0x40>)
 8002236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800223a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_Init+0x40>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a07      	ldr	r2, [pc, #28]	; (8002260 <HAL_Init+0x40>)
 8002242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002248:	2003      	movs	r0, #3
 800224a:	f000 f8fc 	bl	8002446 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800224e:	200f      	movs	r0, #15
 8002250:	f7ff fe68 	bl	8001f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002254:	f7ff fbec 	bl	8001a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40023c00 	.word	0x40023c00

08002264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_IncTick+0x20>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_IncTick+0x24>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4413      	add	r3, r2
 8002274:	4a04      	ldr	r2, [pc, #16]	; (8002288 <HAL_IncTick+0x24>)
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000008 	.word	0x20000008
 8002288:	20004740 	.word	0x20004740

0800228c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return uwTick;
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_GetTick+0x14>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20004740 	.word	0x20004740

080022a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ac:	f7ff ffee 	bl	800228c <HAL_GetTick>
 80022b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d005      	beq.n	80022ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022be:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <HAL_Delay+0x44>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4413      	add	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ca:	bf00      	nop
 80022cc:	f7ff ffde 	bl	800228c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d8f7      	bhi.n	80022cc <HAL_Delay+0x28>
  {
  }
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000008 	.word	0x20000008

080022ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002308:	4013      	ands	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231e:	4a04      	ldr	r2, [pc, #16]	; (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	60d3      	str	r3, [r2, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <__NVIC_GetPriorityGrouping+0x18>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	f003 0307 	and.w	r3, r3, #7
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	2b00      	cmp	r3, #0
 8002360:	db0b      	blt.n	800237a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	f003 021f 	and.w	r2, r3, #31
 8002368:	4907      	ldr	r1, [pc, #28]	; (8002388 <__NVIC_EnableIRQ+0x38>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	2001      	movs	r0, #1
 8002372:	fa00 f202 	lsl.w	r2, r0, r2
 8002376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000e100 	.word	0xe000e100

0800238c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	2b00      	cmp	r3, #0
 800239e:	db0a      	blt.n	80023b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	490c      	ldr	r1, [pc, #48]	; (80023d8 <__NVIC_SetPriority+0x4c>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	0112      	lsls	r2, r2, #4
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	440b      	add	r3, r1
 80023b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b4:	e00a      	b.n	80023cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4908      	ldr	r1, [pc, #32]	; (80023dc <__NVIC_SetPriority+0x50>)
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	3b04      	subs	r3, #4
 80023c4:	0112      	lsls	r2, r2, #4
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	440b      	add	r3, r1
 80023ca:	761a      	strb	r2, [r3, #24]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000e100 	.word	0xe000e100
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f1c3 0307 	rsb	r3, r3, #7
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	bf28      	it	cs
 80023fe:	2304      	movcs	r3, #4
 8002400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3304      	adds	r3, #4
 8002406:	2b06      	cmp	r3, #6
 8002408:	d902      	bls.n	8002410 <NVIC_EncodePriority+0x30>
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3b03      	subs	r3, #3
 800240e:	e000      	b.n	8002412 <NVIC_EncodePriority+0x32>
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	f04f 32ff 	mov.w	r2, #4294967295
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	401a      	ands	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002428:	f04f 31ff 	mov.w	r1, #4294967295
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	43d9      	mvns	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	4313      	orrs	r3, r2
         );
}
 800243a:	4618      	mov	r0, r3
 800243c:	3724      	adds	r7, #36	; 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ff4c 	bl	80022ec <__NVIC_SetPriorityGrouping>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800246e:	f7ff ff61 	bl	8002334 <__NVIC_GetPriorityGrouping>
 8002472:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	6978      	ldr	r0, [r7, #20]
 800247a:	f7ff ffb1 	bl	80023e0 <NVIC_EncodePriority>
 800247e:	4602      	mov	r2, r0
 8002480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002484:	4611      	mov	r1, r2
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ff80 	bl	800238c <__NVIC_SetPriority>
}
 800248c:	bf00      	nop
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ff54 	bl	8002350 <__NVIC_EnableIRQ>
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024be:	f7ff fee5 	bl	800228c <HAL_GetTick>
 80024c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d008      	beq.n	80024e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2280      	movs	r2, #128	; 0x80
 80024d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e052      	b.n	8002588 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0216 	bic.w	r2, r2, #22
 80024f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002500:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <HAL_DMA_Abort+0x62>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0208 	bic.w	r2, r2, #8
 8002520:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0201 	bic.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002532:	e013      	b.n	800255c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002534:	f7ff feaa 	bl	800228c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b05      	cmp	r3, #5
 8002540:	d90c      	bls.n	800255c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2220      	movs	r2, #32
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2203      	movs	r2, #3
 800254c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e015      	b.n	8002588 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1e4      	bne.n	8002534 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256e:	223f      	movs	r2, #63	; 0x3f
 8002570:	409a      	lsls	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d004      	beq.n	80025ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2280      	movs	r2, #128	; 0x80
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e00c      	b.n	80025c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2205      	movs	r2, #5
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0201 	bic.w	r2, r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	; 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	e177      	b.n	80028e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025f0:	2201      	movs	r2, #1
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	429a      	cmp	r2, r3
 800260a:	f040 8166 	bne.w	80028da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d005      	beq.n	8002626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002622:	2b02      	cmp	r3, #2
 8002624:	d130      	bne.n	8002688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	2203      	movs	r2, #3
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800265c:	2201      	movs	r2, #1
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 0201 	and.w	r2, r3, #1
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b03      	cmp	r3, #3
 8002692:	d017      	beq.n	80026c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d123      	bne.n	8002718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	08da      	lsrs	r2, r3, #3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3208      	adds	r2, #8
 80026d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	220f      	movs	r2, #15
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	08da      	lsrs	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3208      	adds	r2, #8
 8002712:	69b9      	ldr	r1, [r7, #24]
 8002714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	2203      	movs	r2, #3
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 0203 	and.w	r2, r3, #3
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80c0 	beq.w	80028da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	4b66      	ldr	r3, [pc, #408]	; (80028f8 <HAL_GPIO_Init+0x324>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a65      	ldr	r2, [pc, #404]	; (80028f8 <HAL_GPIO_Init+0x324>)
 8002764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
 800276a:	4b63      	ldr	r3, [pc, #396]	; (80028f8 <HAL_GPIO_Init+0x324>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002776:	4a61      	ldr	r2, [pc, #388]	; (80028fc <HAL_GPIO_Init+0x328>)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	089b      	lsrs	r3, r3, #2
 800277c:	3302      	adds	r3, #2
 800277e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	220f      	movs	r2, #15
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a58      	ldr	r2, [pc, #352]	; (8002900 <HAL_GPIO_Init+0x32c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d037      	beq.n	8002812 <HAL_GPIO_Init+0x23e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a57      	ldr	r2, [pc, #348]	; (8002904 <HAL_GPIO_Init+0x330>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d031      	beq.n	800280e <HAL_GPIO_Init+0x23a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a56      	ldr	r2, [pc, #344]	; (8002908 <HAL_GPIO_Init+0x334>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d02b      	beq.n	800280a <HAL_GPIO_Init+0x236>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a55      	ldr	r2, [pc, #340]	; (800290c <HAL_GPIO_Init+0x338>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d025      	beq.n	8002806 <HAL_GPIO_Init+0x232>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a54      	ldr	r2, [pc, #336]	; (8002910 <HAL_GPIO_Init+0x33c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d01f      	beq.n	8002802 <HAL_GPIO_Init+0x22e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a53      	ldr	r2, [pc, #332]	; (8002914 <HAL_GPIO_Init+0x340>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d019      	beq.n	80027fe <HAL_GPIO_Init+0x22a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a52      	ldr	r2, [pc, #328]	; (8002918 <HAL_GPIO_Init+0x344>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d013      	beq.n	80027fa <HAL_GPIO_Init+0x226>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a51      	ldr	r2, [pc, #324]	; (800291c <HAL_GPIO_Init+0x348>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00d      	beq.n	80027f6 <HAL_GPIO_Init+0x222>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a50      	ldr	r2, [pc, #320]	; (8002920 <HAL_GPIO_Init+0x34c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d007      	beq.n	80027f2 <HAL_GPIO_Init+0x21e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a4f      	ldr	r2, [pc, #316]	; (8002924 <HAL_GPIO_Init+0x350>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d101      	bne.n	80027ee <HAL_GPIO_Init+0x21a>
 80027ea:	2309      	movs	r3, #9
 80027ec:	e012      	b.n	8002814 <HAL_GPIO_Init+0x240>
 80027ee:	230a      	movs	r3, #10
 80027f0:	e010      	b.n	8002814 <HAL_GPIO_Init+0x240>
 80027f2:	2308      	movs	r3, #8
 80027f4:	e00e      	b.n	8002814 <HAL_GPIO_Init+0x240>
 80027f6:	2307      	movs	r3, #7
 80027f8:	e00c      	b.n	8002814 <HAL_GPIO_Init+0x240>
 80027fa:	2306      	movs	r3, #6
 80027fc:	e00a      	b.n	8002814 <HAL_GPIO_Init+0x240>
 80027fe:	2305      	movs	r3, #5
 8002800:	e008      	b.n	8002814 <HAL_GPIO_Init+0x240>
 8002802:	2304      	movs	r3, #4
 8002804:	e006      	b.n	8002814 <HAL_GPIO_Init+0x240>
 8002806:	2303      	movs	r3, #3
 8002808:	e004      	b.n	8002814 <HAL_GPIO_Init+0x240>
 800280a:	2302      	movs	r3, #2
 800280c:	e002      	b.n	8002814 <HAL_GPIO_Init+0x240>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_GPIO_Init+0x240>
 8002812:	2300      	movs	r3, #0
 8002814:	69fa      	ldr	r2, [r7, #28]
 8002816:	f002 0203 	and.w	r2, r2, #3
 800281a:	0092      	lsls	r2, r2, #2
 800281c:	4093      	lsls	r3, r2
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002824:	4935      	ldr	r1, [pc, #212]	; (80028fc <HAL_GPIO_Init+0x328>)
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	089b      	lsrs	r3, r3, #2
 800282a:	3302      	adds	r3, #2
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002832:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <HAL_GPIO_Init+0x354>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002856:	4a34      	ldr	r2, [pc, #208]	; (8002928 <HAL_GPIO_Init+0x354>)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800285c:	4b32      	ldr	r3, [pc, #200]	; (8002928 <HAL_GPIO_Init+0x354>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002880:	4a29      	ldr	r2, [pc, #164]	; (8002928 <HAL_GPIO_Init+0x354>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002886:	4b28      	ldr	r3, [pc, #160]	; (8002928 <HAL_GPIO_Init+0x354>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028aa:	4a1f      	ldr	r2, [pc, #124]	; (8002928 <HAL_GPIO_Init+0x354>)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b0:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <HAL_GPIO_Init+0x354>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028d4:	4a14      	ldr	r2, [pc, #80]	; (8002928 <HAL_GPIO_Init+0x354>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3301      	adds	r3, #1
 80028de:	61fb      	str	r3, [r7, #28]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	2b0f      	cmp	r3, #15
 80028e4:	f67f ae84 	bls.w	80025f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	3724      	adds	r7, #36	; 0x24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40013800 	.word	0x40013800
 8002900:	40020000 	.word	0x40020000
 8002904:	40020400 	.word	0x40020400
 8002908:	40020800 	.word	0x40020800
 800290c:	40020c00 	.word	0x40020c00
 8002910:	40021000 	.word	0x40021000
 8002914:	40021400 	.word	0x40021400
 8002918:	40021800 	.word	0x40021800
 800291c:	40021c00 	.word	0x40021c00
 8002920:	40022000 	.word	0x40022000
 8002924:	40022400 	.word	0x40022400
 8002928:	40013c00 	.word	0x40013c00

0800292c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	887b      	ldrh	r3, [r7, #2]
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
 8002948:	e001      	b.n	800294e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800294a:	2300      	movs	r3, #0
 800294c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800294e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	807b      	strh	r3, [r7, #2]
 8002968:	4613      	mov	r3, r2
 800296a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800296c:	787b      	ldrb	r3, [r7, #1]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002972:	887a      	ldrh	r2, [r7, #2]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002978:	e003      	b.n	8002982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800297a:	887b      	ldrh	r3, [r7, #2]
 800297c:	041a      	lsls	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	619a      	str	r2, [r3, #24]
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e12b      	b.n	8002bfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff f866 	bl	8001a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2224      	movs	r2, #36	; 0x24
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029f4:	f000 fdfc 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 80029f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4a81      	ldr	r2, [pc, #516]	; (8002c04 <HAL_I2C_Init+0x274>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d807      	bhi.n	8002a14 <HAL_I2C_Init+0x84>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4a80      	ldr	r2, [pc, #512]	; (8002c08 <HAL_I2C_Init+0x278>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	bf94      	ite	ls
 8002a0c:	2301      	movls	r3, #1
 8002a0e:	2300      	movhi	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	e006      	b.n	8002a22 <HAL_I2C_Init+0x92>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4a7d      	ldr	r2, [pc, #500]	; (8002c0c <HAL_I2C_Init+0x27c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	bf94      	ite	ls
 8002a1c:	2301      	movls	r3, #1
 8002a1e:	2300      	movhi	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e0e7      	b.n	8002bfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4a78      	ldr	r2, [pc, #480]	; (8002c10 <HAL_I2C_Init+0x280>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0c9b      	lsrs	r3, r3, #18
 8002a34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a6a      	ldr	r2, [pc, #424]	; (8002c04 <HAL_I2C_Init+0x274>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d802      	bhi.n	8002a64 <HAL_I2C_Init+0xd4>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	3301      	adds	r3, #1
 8002a62:	e009      	b.n	8002a78 <HAL_I2C_Init+0xe8>
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	4a69      	ldr	r2, [pc, #420]	; (8002c14 <HAL_I2C_Init+0x284>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	099b      	lsrs	r3, r3, #6
 8002a76:	3301      	adds	r3, #1
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	495c      	ldr	r1, [pc, #368]	; (8002c04 <HAL_I2C_Init+0x274>)
 8002a94:	428b      	cmp	r3, r1
 8002a96:	d819      	bhi.n	8002acc <HAL_I2C_Init+0x13c>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1e59      	subs	r1, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aa6:	1c59      	adds	r1, r3, #1
 8002aa8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002aac:	400b      	ands	r3, r1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_I2C_Init+0x138>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1e59      	subs	r1, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac6:	e051      	b.n	8002b6c <HAL_I2C_Init+0x1dc>
 8002ac8:	2304      	movs	r3, #4
 8002aca:	e04f      	b.n	8002b6c <HAL_I2C_Init+0x1dc>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d111      	bne.n	8002af8 <HAL_I2C_Init+0x168>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1e58      	subs	r0, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	440b      	add	r3, r1
 8002ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	e012      	b.n	8002b1e <HAL_I2C_Init+0x18e>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1e58      	subs	r0, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6859      	ldr	r1, [r3, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	0099      	lsls	r1, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf0c      	ite	eq
 8002b18:	2301      	moveq	r3, #1
 8002b1a:	2300      	movne	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_I2C_Init+0x196>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e022      	b.n	8002b6c <HAL_I2C_Init+0x1dc>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10e      	bne.n	8002b4c <HAL_I2C_Init+0x1bc>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1e58      	subs	r0, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6859      	ldr	r1, [r3, #4]
 8002b36:	460b      	mov	r3, r1
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	440b      	add	r3, r1
 8002b3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b40:	3301      	adds	r3, #1
 8002b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b4a:	e00f      	b.n	8002b6c <HAL_I2C_Init+0x1dc>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1e58      	subs	r0, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	0099      	lsls	r1, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b62:	3301      	adds	r3, #1
 8002b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	6809      	ldr	r1, [r1, #0]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6911      	ldr	r1, [r2, #16]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68d2      	ldr	r2, [r2, #12]
 8002ba6:	4311      	orrs	r1, r2
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	430b      	orrs	r3, r1
 8002bae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	000186a0 	.word	0x000186a0
 8002c08:	001e847f 	.word	0x001e847f
 8002c0c:	003d08ff 	.word	0x003d08ff
 8002c10:	431bde83 	.word	0x431bde83
 8002c14:	10624dd3 	.word	0x10624dd3

08002c18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b20      	cmp	r3, #32
 8002c2c:	d129      	bne.n	8002c82 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2224      	movs	r2, #36	; 0x24
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0201 	bic.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0210 	bic.w	r2, r2, #16
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0201 	orr.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e000      	b.n	8002c84 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002c82:	2302      	movs	r3, #2
  }
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b20      	cmp	r3, #32
 8002ca8:	d12a      	bne.n	8002d00 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2224      	movs	r2, #36	; 0x24
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0201 	bic.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002cca:	89fb      	ldrh	r3, [r7, #14]
 8002ccc:	f023 030f 	bic.w	r3, r3, #15
 8002cd0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	89fb      	ldrh	r3, [r7, #14]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	89fa      	ldrh	r2, [r7, #14]
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e000      	b.n	8002d02 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002d00:	2302      	movs	r3, #2
  }
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	4b20      	ldr	r3, [pc, #128]	; (8002da0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	4a1f      	ldr	r2, [pc, #124]	; (8002da0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d28:	6413      	str	r3, [r2, #64]	; 0x40
 8002d2a:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d36:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d3c:	f7ff faa6 	bl	800228c <HAL_GetTick>
 8002d40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d42:	e009      	b.n	8002d58 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d44:	f7ff faa2 	bl	800228c <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d52:	d901      	bls.n	8002d58 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e01f      	b.n	8002d98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d58:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d64:	d1ee      	bne.n	8002d44 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d66:	4b11      	ldr	r3, [pc, #68]	; (8002dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d68:	2201      	movs	r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d6c:	f7ff fa8e 	bl	800228c <HAL_GetTick>
 8002d70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d72:	e009      	b.n	8002d88 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d74:	f7ff fa8a 	bl	800228c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d82:	d901      	bls.n	8002d88 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e007      	b.n	8002d98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d88:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d94:	d1ee      	bne.n	8002d74 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40023800 	.word	0x40023800
 8002da4:	420e0040 	.word	0x420e0040
 8002da8:	40007000 	.word	0x40007000
 8002dac:	420e0044 	.word	0x420e0044

08002db0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e264      	b.n	800328c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d075      	beq.n	8002eba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dce:	4ba3      	ldr	r3, [pc, #652]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d00c      	beq.n	8002df4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dda:	4ba0      	ldr	r3, [pc, #640]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d112      	bne.n	8002e0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de6:	4b9d      	ldr	r3, [pc, #628]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df2:	d10b      	bne.n	8002e0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df4:	4b99      	ldr	r3, [pc, #612]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d05b      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x108>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d157      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e23f      	b.n	800328c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e14:	d106      	bne.n	8002e24 <HAL_RCC_OscConfig+0x74>
 8002e16:	4b91      	ldr	r3, [pc, #580]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a90      	ldr	r2, [pc, #576]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	e01d      	b.n	8002e60 <HAL_RCC_OscConfig+0xb0>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x98>
 8002e2e:	4b8b      	ldr	r3, [pc, #556]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a8a      	ldr	r2, [pc, #552]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	4b88      	ldr	r3, [pc, #544]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a87      	ldr	r2, [pc, #540]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	e00b      	b.n	8002e60 <HAL_RCC_OscConfig+0xb0>
 8002e48:	4b84      	ldr	r3, [pc, #528]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a83      	ldr	r2, [pc, #524]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	4b81      	ldr	r3, [pc, #516]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a80      	ldr	r2, [pc, #512]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d013      	beq.n	8002e90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7ff fa10 	bl	800228c <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e70:	f7ff fa0c 	bl	800228c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b64      	cmp	r3, #100	; 0x64
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e204      	b.n	800328c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	4b76      	ldr	r3, [pc, #472]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0xc0>
 8002e8e:	e014      	b.n	8002eba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7ff f9fc 	bl	800228c <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e98:	f7ff f9f8 	bl	800228c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	; 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e1f0      	b.n	800328c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eaa:	4b6c      	ldr	r3, [pc, #432]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0xe8>
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d063      	beq.n	8002f8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ec6:	4b65      	ldr	r3, [pc, #404]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ed2:	4b62      	ldr	r3, [pc, #392]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d11c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ede:	4b5f      	ldr	r3, [pc, #380]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d116      	bne.n	8002f18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eea:	4b5c      	ldr	r3, [pc, #368]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d005      	beq.n	8002f02 <HAL_RCC_OscConfig+0x152>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d001      	beq.n	8002f02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e1c4      	b.n	800328c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f02:	4b56      	ldr	r3, [pc, #344]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4952      	ldr	r1, [pc, #328]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f16:	e03a      	b.n	8002f8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d020      	beq.n	8002f62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f20:	4b4f      	ldr	r3, [pc, #316]	; (8003060 <HAL_RCC_OscConfig+0x2b0>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f26:	f7ff f9b1 	bl	800228c <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2e:	f7ff f9ad 	bl	800228c <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e1a5      	b.n	800328c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f40:	4b46      	ldr	r3, [pc, #280]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4c:	4b43      	ldr	r3, [pc, #268]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4940      	ldr	r1, [pc, #256]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	600b      	str	r3, [r1, #0]
 8002f60:	e015      	b.n	8002f8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f62:	4b3f      	ldr	r3, [pc, #252]	; (8003060 <HAL_RCC_OscConfig+0x2b0>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7ff f990 	bl	800228c <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f70:	f7ff f98c 	bl	800228c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e184      	b.n	800328c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f82:	4b36      	ldr	r3, [pc, #216]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d030      	beq.n	8002ffc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d016      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fa2:	4b30      	ldr	r3, [pc, #192]	; (8003064 <HAL_RCC_OscConfig+0x2b4>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa8:	f7ff f970 	bl	800228c <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb0:	f7ff f96c 	bl	800228c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e164      	b.n	800328c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc2:	4b26      	ldr	r3, [pc, #152]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x200>
 8002fce:	e015      	b.n	8002ffc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fd0:	4b24      	ldr	r3, [pc, #144]	; (8003064 <HAL_RCC_OscConfig+0x2b4>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd6:	f7ff f959 	bl	800228c <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fde:	f7ff f955 	bl	800228c <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e14d      	b.n	800328c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff0:	4b1a      	ldr	r3, [pc, #104]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8002ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f0      	bne.n	8002fde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80a0 	beq.w	800314a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800300a:	2300      	movs	r3, #0
 800300c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300e:	4b13      	ldr	r3, [pc, #76]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10f      	bne.n	800303a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	4b0f      	ldr	r3, [pc, #60]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	4a0e      	ldr	r2, [pc, #56]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 8003024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003028:	6413      	str	r3, [r2, #64]	; 0x40
 800302a:	4b0c      	ldr	r3, [pc, #48]	; (800305c <HAL_RCC_OscConfig+0x2ac>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003036:	2301      	movs	r3, #1
 8003038:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <HAL_RCC_OscConfig+0x2b8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003042:	2b00      	cmp	r3, #0
 8003044:	d121      	bne.n	800308a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <HAL_RCC_OscConfig+0x2b8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a07      	ldr	r2, [pc, #28]	; (8003068 <HAL_RCC_OscConfig+0x2b8>)
 800304c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003052:	f7ff f91b 	bl	800228c <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003058:	e011      	b.n	800307e <HAL_RCC_OscConfig+0x2ce>
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800
 8003060:	42470000 	.word	0x42470000
 8003064:	42470e80 	.word	0x42470e80
 8003068:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800306c:	f7ff f90e 	bl	800228c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e106      	b.n	800328c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307e:	4b85      	ldr	r3, [pc, #532]	; (8003294 <HAL_RCC_OscConfig+0x4e4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d106      	bne.n	80030a0 <HAL_RCC_OscConfig+0x2f0>
 8003092:	4b81      	ldr	r3, [pc, #516]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003096:	4a80      	ldr	r2, [pc, #512]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	6713      	str	r3, [r2, #112]	; 0x70
 800309e:	e01c      	b.n	80030da <HAL_RCC_OscConfig+0x32a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	2b05      	cmp	r3, #5
 80030a6:	d10c      	bne.n	80030c2 <HAL_RCC_OscConfig+0x312>
 80030a8:	4b7b      	ldr	r3, [pc, #492]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 80030aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ac:	4a7a      	ldr	r2, [pc, #488]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 80030ae:	f043 0304 	orr.w	r3, r3, #4
 80030b2:	6713      	str	r3, [r2, #112]	; 0x70
 80030b4:	4b78      	ldr	r3, [pc, #480]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 80030b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b8:	4a77      	ldr	r2, [pc, #476]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	6713      	str	r3, [r2, #112]	; 0x70
 80030c0:	e00b      	b.n	80030da <HAL_RCC_OscConfig+0x32a>
 80030c2:	4b75      	ldr	r3, [pc, #468]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c6:	4a74      	ldr	r2, [pc, #464]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 80030c8:	f023 0301 	bic.w	r3, r3, #1
 80030cc:	6713      	str	r3, [r2, #112]	; 0x70
 80030ce:	4b72      	ldr	r3, [pc, #456]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	4a71      	ldr	r2, [pc, #452]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 80030d4:	f023 0304 	bic.w	r3, r3, #4
 80030d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d015      	beq.n	800310e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e2:	f7ff f8d3 	bl	800228c <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e8:	e00a      	b.n	8003100 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ea:	f7ff f8cf 	bl	800228c <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e0c5      	b.n	800328c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003100:	4b65      	ldr	r3, [pc, #404]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0ee      	beq.n	80030ea <HAL_RCC_OscConfig+0x33a>
 800310c:	e014      	b.n	8003138 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310e:	f7ff f8bd 	bl	800228c <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003114:	e00a      	b.n	800312c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003116:	f7ff f8b9 	bl	800228c <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f241 3288 	movw	r2, #5000	; 0x1388
 8003124:	4293      	cmp	r3, r2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e0af      	b.n	800328c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800312c:	4b5a      	ldr	r3, [pc, #360]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1ee      	bne.n	8003116 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003138:	7dfb      	ldrb	r3, [r7, #23]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d105      	bne.n	800314a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800313e:	4b56      	ldr	r3, [pc, #344]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	4a55      	ldr	r2, [pc, #340]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 8003144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003148:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 809b 	beq.w	800328a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003154:	4b50      	ldr	r3, [pc, #320]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 030c 	and.w	r3, r3, #12
 800315c:	2b08      	cmp	r3, #8
 800315e:	d05c      	beq.n	800321a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	2b02      	cmp	r3, #2
 8003166:	d141      	bne.n	80031ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003168:	4b4c      	ldr	r3, [pc, #304]	; (800329c <HAL_RCC_OscConfig+0x4ec>)
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316e:	f7ff f88d 	bl	800228c <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003176:	f7ff f889 	bl	800228c <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e081      	b.n	800328c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003188:	4b43      	ldr	r3, [pc, #268]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f0      	bne.n	8003176 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69da      	ldr	r2, [r3, #28]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	019b      	lsls	r3, r3, #6
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	085b      	lsrs	r3, r3, #1
 80031ac:	3b01      	subs	r3, #1
 80031ae:	041b      	lsls	r3, r3, #16
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	061b      	lsls	r3, r3, #24
 80031b8:	4937      	ldr	r1, [pc, #220]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031be:	4b37      	ldr	r3, [pc, #220]	; (800329c <HAL_RCC_OscConfig+0x4ec>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c4:	f7ff f862 	bl	800228c <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031cc:	f7ff f85e 	bl	800228c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e056      	b.n	800328c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031de:	4b2e      	ldr	r3, [pc, #184]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0x41c>
 80031ea:	e04e      	b.n	800328a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ec:	4b2b      	ldr	r3, [pc, #172]	; (800329c <HAL_RCC_OscConfig+0x4ec>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f2:	f7ff f84b 	bl	800228c <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031fa:	f7ff f847 	bl	800228c <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e03f      	b.n	800328c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320c:	4b22      	ldr	r3, [pc, #136]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f0      	bne.n	80031fa <HAL_RCC_OscConfig+0x44a>
 8003218:	e037      	b.n	800328a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e032      	b.n	800328c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003226:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <HAL_RCC_OscConfig+0x4e8>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d028      	beq.n	8003286 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d121      	bne.n	8003286 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324c:	429a      	cmp	r2, r3
 800324e:	d11a      	bne.n	8003286 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003256:	4013      	ands	r3, r2
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800325c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800325e:	4293      	cmp	r3, r2
 8003260:	d111      	bne.n	8003286 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	085b      	lsrs	r3, r3, #1
 800326e:	3b01      	subs	r3, #1
 8003270:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003272:	429a      	cmp	r2, r3
 8003274:	d107      	bne.n	8003286 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003282:	429a      	cmp	r2, r3
 8003284:	d001      	beq.n	800328a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40007000 	.word	0x40007000
 8003298:	40023800 	.word	0x40023800
 800329c:	42470060 	.word	0x42470060

080032a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0cc      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032b4:	4b68      	ldr	r3, [pc, #416]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d90c      	bls.n	80032dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b65      	ldr	r3, [pc, #404]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b63      	ldr	r3, [pc, #396]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0b8      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d020      	beq.n	800332a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032f4:	4b59      	ldr	r3, [pc, #356]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	4a58      	ldr	r2, [pc, #352]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800330c:	4b53      	ldr	r3, [pc, #332]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4a52      	ldr	r2, [pc, #328]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003316:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003318:	4b50      	ldr	r3, [pc, #320]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	494d      	ldr	r1, [pc, #308]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	4313      	orrs	r3, r2
 8003328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d044      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d107      	bne.n	800334e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	4b47      	ldr	r3, [pc, #284]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d119      	bne.n	800337e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e07f      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d003      	beq.n	800335e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800335a:	2b03      	cmp	r3, #3
 800335c:	d107      	bne.n	800336e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335e:	4b3f      	ldr	r3, [pc, #252]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e06f      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336e:	4b3b      	ldr	r3, [pc, #236]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e067      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800337e:	4b37      	ldr	r3, [pc, #220]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f023 0203 	bic.w	r2, r3, #3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4934      	ldr	r1, [pc, #208]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 800338c:	4313      	orrs	r3, r2
 800338e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003390:	f7fe ff7c 	bl	800228c <HAL_GetTick>
 8003394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003396:	e00a      	b.n	80033ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003398:	f7fe ff78 	bl	800228c <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e04f      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ae:	4b2b      	ldr	r3, [pc, #172]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 020c 	and.w	r2, r3, #12
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	429a      	cmp	r2, r3
 80033be:	d1eb      	bne.n	8003398 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033c0:	4b25      	ldr	r3, [pc, #148]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d20c      	bcs.n	80033e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b22      	ldr	r3, [pc, #136]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d6:	4b20      	ldr	r3, [pc, #128]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e032      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f4:	4b19      	ldr	r3, [pc, #100]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4916      	ldr	r1, [pc, #88]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d009      	beq.n	8003426 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003412:	4b12      	ldr	r3, [pc, #72]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	490e      	ldr	r1, [pc, #56]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	4313      	orrs	r3, r2
 8003424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003426:	f000 f821 	bl	800346c <HAL_RCC_GetSysClockFreq>
 800342a:	4602      	mov	r2, r0
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	091b      	lsrs	r3, r3, #4
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	490a      	ldr	r1, [pc, #40]	; (8003460 <HAL_RCC_ClockConfig+0x1c0>)
 8003438:	5ccb      	ldrb	r3, [r1, r3]
 800343a:	fa22 f303 	lsr.w	r3, r2, r3
 800343e:	4a09      	ldr	r2, [pc, #36]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe fd6c 	bl	8001f24 <HAL_InitTick>

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40023c00 	.word	0x40023c00
 800345c:	40023800 	.word	0x40023800
 8003460:	08009980 	.word	0x08009980
 8003464:	20000000 	.word	0x20000000
 8003468:	20000004 	.word	0x20000004

0800346c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800346c:	b5b0      	push	{r4, r5, r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003472:	2100      	movs	r1, #0
 8003474:	6079      	str	r1, [r7, #4]
 8003476:	2100      	movs	r1, #0
 8003478:	60f9      	str	r1, [r7, #12]
 800347a:	2100      	movs	r1, #0
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800347e:	2100      	movs	r1, #0
 8003480:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003482:	4952      	ldr	r1, [pc, #328]	; (80035cc <HAL_RCC_GetSysClockFreq+0x160>)
 8003484:	6889      	ldr	r1, [r1, #8]
 8003486:	f001 010c 	and.w	r1, r1, #12
 800348a:	2908      	cmp	r1, #8
 800348c:	d00d      	beq.n	80034aa <HAL_RCC_GetSysClockFreq+0x3e>
 800348e:	2908      	cmp	r1, #8
 8003490:	f200 8094 	bhi.w	80035bc <HAL_RCC_GetSysClockFreq+0x150>
 8003494:	2900      	cmp	r1, #0
 8003496:	d002      	beq.n	800349e <HAL_RCC_GetSysClockFreq+0x32>
 8003498:	2904      	cmp	r1, #4
 800349a:	d003      	beq.n	80034a4 <HAL_RCC_GetSysClockFreq+0x38>
 800349c:	e08e      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800349e:	4b4c      	ldr	r3, [pc, #304]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80034a0:	60bb      	str	r3, [r7, #8]
       break;
 80034a2:	e08e      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034a4:	4b4b      	ldr	r3, [pc, #300]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80034a6:	60bb      	str	r3, [r7, #8]
      break;
 80034a8:	e08b      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034aa:	4948      	ldr	r1, [pc, #288]	; (80035cc <HAL_RCC_GetSysClockFreq+0x160>)
 80034ac:	6849      	ldr	r1, [r1, #4]
 80034ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80034b2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034b4:	4945      	ldr	r1, [pc, #276]	; (80035cc <HAL_RCC_GetSysClockFreq+0x160>)
 80034b6:	6849      	ldr	r1, [r1, #4]
 80034b8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80034bc:	2900      	cmp	r1, #0
 80034be:	d024      	beq.n	800350a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c0:	4942      	ldr	r1, [pc, #264]	; (80035cc <HAL_RCC_GetSysClockFreq+0x160>)
 80034c2:	6849      	ldr	r1, [r1, #4]
 80034c4:	0989      	lsrs	r1, r1, #6
 80034c6:	4608      	mov	r0, r1
 80034c8:	f04f 0100 	mov.w	r1, #0
 80034cc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80034d0:	f04f 0500 	mov.w	r5, #0
 80034d4:	ea00 0204 	and.w	r2, r0, r4
 80034d8:	ea01 0305 	and.w	r3, r1, r5
 80034dc:	493d      	ldr	r1, [pc, #244]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80034de:	fb01 f003 	mul.w	r0, r1, r3
 80034e2:	2100      	movs	r1, #0
 80034e4:	fb01 f102 	mul.w	r1, r1, r2
 80034e8:	1844      	adds	r4, r0, r1
 80034ea:	493a      	ldr	r1, [pc, #232]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80034ec:	fba2 0101 	umull	r0, r1, r2, r1
 80034f0:	1863      	adds	r3, r4, r1
 80034f2:	4619      	mov	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	461a      	mov	r2, r3
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	f7fd fc04 	bl	8000d08 <__aeabi_uldivmod>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4613      	mov	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	e04a      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350a:	4b30      	ldr	r3, [pc, #192]	; (80035cc <HAL_RCC_GetSysClockFreq+0x160>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	099b      	lsrs	r3, r3, #6
 8003510:	461a      	mov	r2, r3
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	f240 10ff 	movw	r0, #511	; 0x1ff
 800351a:	f04f 0100 	mov.w	r1, #0
 800351e:	ea02 0400 	and.w	r4, r2, r0
 8003522:	ea03 0501 	and.w	r5, r3, r1
 8003526:	4620      	mov	r0, r4
 8003528:	4629      	mov	r1, r5
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	014b      	lsls	r3, r1, #5
 8003534:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003538:	0142      	lsls	r2, r0, #5
 800353a:	4610      	mov	r0, r2
 800353c:	4619      	mov	r1, r3
 800353e:	1b00      	subs	r0, r0, r4
 8003540:	eb61 0105 	sbc.w	r1, r1, r5
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	018b      	lsls	r3, r1, #6
 800354e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003552:	0182      	lsls	r2, r0, #6
 8003554:	1a12      	subs	r2, r2, r0
 8003556:	eb63 0301 	sbc.w	r3, r3, r1
 800355a:	f04f 0000 	mov.w	r0, #0
 800355e:	f04f 0100 	mov.w	r1, #0
 8003562:	00d9      	lsls	r1, r3, #3
 8003564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003568:	00d0      	lsls	r0, r2, #3
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	1912      	adds	r2, r2, r4
 8003570:	eb45 0303 	adc.w	r3, r5, r3
 8003574:	f04f 0000 	mov.w	r0, #0
 8003578:	f04f 0100 	mov.w	r1, #0
 800357c:	0299      	lsls	r1, r3, #10
 800357e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003582:	0290      	lsls	r0, r2, #10
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	461a      	mov	r2, r3
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	f7fd fbb8 	bl	8000d08 <__aeabi_uldivmod>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4613      	mov	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035a0:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <HAL_RCC_GetSysClockFreq+0x160>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	0c1b      	lsrs	r3, r3, #16
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	3301      	adds	r3, #1
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b8:	60bb      	str	r3, [r7, #8]
      break;
 80035ba:	e002      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035bc:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80035be:	60bb      	str	r3, [r7, #8]
      break;
 80035c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035c2:	68bb      	ldr	r3, [r7, #8]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bdb0      	pop	{r4, r5, r7, pc}
 80035cc:	40023800 	.word	0x40023800
 80035d0:	00f42400 	.word	0x00f42400
 80035d4:	017d7840 	.word	0x017d7840

080035d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <HAL_RCC_GetHCLKFreq+0x14>)
 80035de:	681b      	ldr	r3, [r3, #0]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000000 	.word	0x20000000

080035f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035f4:	f7ff fff0 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	0a9b      	lsrs	r3, r3, #10
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	4903      	ldr	r1, [pc, #12]	; (8003614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800360c:	4618      	mov	r0, r3
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40023800 	.word	0x40023800
 8003614:	08009990 	.word	0x08009990

08003618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800361c:	f7ff ffdc 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 8003620:	4602      	mov	r2, r0
 8003622:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	0b5b      	lsrs	r3, r3, #13
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	4903      	ldr	r1, [pc, #12]	; (800363c <HAL_RCC_GetPCLK2Freq+0x24>)
 800362e:	5ccb      	ldrb	r3, [r1, r3]
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40023800 	.word	0x40023800
 800363c:	08009990 	.word	0x08009990

08003640 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	220f      	movs	r2, #15
 800364e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003650:	4b12      	ldr	r3, [pc, #72]	; (800369c <HAL_RCC_GetClockConfig+0x5c>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 0203 	and.w	r2, r3, #3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800365c:	4b0f      	ldr	r3, [pc, #60]	; (800369c <HAL_RCC_GetClockConfig+0x5c>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <HAL_RCC_GetClockConfig+0x5c>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <HAL_RCC_GetClockConfig+0x5c>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	08db      	lsrs	r3, r3, #3
 800367a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003682:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <HAL_RCC_GetClockConfig+0x60>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 020f 	and.w	r2, r3, #15
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	601a      	str	r2, [r3, #0]
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800
 80036a0:	40023c00 	.word	0x40023c00

080036a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e041      	b.n	800373a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fe fa5a 	bl	8001b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3304      	adds	r3, #4
 80036e0:	4619      	mov	r1, r3
 80036e2:	4610      	mov	r0, r2
 80036e4:	f000 fb40 	bl	8003d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b01      	cmp	r3, #1
 8003756:	d001      	beq.n	800375c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e04e      	b.n	80037fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a23      	ldr	r2, [pc, #140]	; (8003808 <HAL_TIM_Base_Start_IT+0xc4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d022      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003786:	d01d      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1f      	ldr	r2, [pc, #124]	; (800380c <HAL_TIM_Base_Start_IT+0xc8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d018      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1e      	ldr	r2, [pc, #120]	; (8003810 <HAL_TIM_Base_Start_IT+0xcc>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d013      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1c      	ldr	r2, [pc, #112]	; (8003814 <HAL_TIM_Base_Start_IT+0xd0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00e      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <HAL_TIM_Base_Start_IT+0xd4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d009      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a19      	ldr	r2, [pc, #100]	; (800381c <HAL_TIM_Base_Start_IT+0xd8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a18      	ldr	r2, [pc, #96]	; (8003820 <HAL_TIM_Base_Start_IT+0xdc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d111      	bne.n	80037e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b06      	cmp	r3, #6
 80037d4:	d010      	beq.n	80037f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0201 	orr.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e6:	e007      	b.n	80037f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40010000 	.word	0x40010000
 800380c:	40000400 	.word	0x40000400
 8003810:	40000800 	.word	0x40000800
 8003814:	40000c00 	.word	0x40000c00
 8003818:	40010400 	.word	0x40010400
 800381c:	40014000 	.word	0x40014000
 8003820:	40001800 	.word	0x40001800

08003824 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e041      	b.n	80038ba <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f839 	bl	80038c2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3304      	adds	r3, #4
 8003860:	4619      	mov	r1, r3
 8003862:	4610      	mov	r0, r2
 8003864:	f000 fa80 	bl	8003d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d122      	bne.n	8003932 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d11b      	bne.n	8003932 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f06f 0202 	mvn.w	r2, #2
 8003902:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f002 ff29 	bl	8006770 <HAL_TIM_IC_CaptureCallback>
 800391e:	e005      	b.n	800392c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fa03 	bl	8003d2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fa0a 	bl	8003d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b04      	cmp	r3, #4
 800393e:	d122      	bne.n	8003986 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b04      	cmp	r3, #4
 800394c:	d11b      	bne.n	8003986 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f06f 0204 	mvn.w	r2, #4
 8003956:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f002 feff 	bl	8006770 <HAL_TIM_IC_CaptureCallback>
 8003972:	e005      	b.n	8003980 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f9d9 	bl	8003d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f9e0 	bl	8003d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b08      	cmp	r3, #8
 8003992:	d122      	bne.n	80039da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d11b      	bne.n	80039da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f06f 0208 	mvn.w	r2, #8
 80039aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2204      	movs	r2, #4
 80039b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f002 fed5 	bl	8006770 <HAL_TIM_IC_CaptureCallback>
 80039c6:	e005      	b.n	80039d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f9af 	bl	8003d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f9b6 	bl	8003d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d122      	bne.n	8003a2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b10      	cmp	r3, #16
 80039f4:	d11b      	bne.n	8003a2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f06f 0210 	mvn.w	r2, #16
 80039fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2208      	movs	r2, #8
 8003a04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f002 feab 	bl	8006770 <HAL_TIM_IC_CaptureCallback>
 8003a1a:	e005      	b.n	8003a28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f985 	bl	8003d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f98c 	bl	8003d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d10e      	bne.n	8003a5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d107      	bne.n	8003a5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f06f 0201 	mvn.w	r2, #1
 8003a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7fd ffd3 	bl	8001a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a64:	2b80      	cmp	r3, #128	; 0x80
 8003a66:	d10e      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a72:	2b80      	cmp	r3, #128	; 0x80
 8003a74:	d107      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fcd3 	bl	800442c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	2b40      	cmp	r3, #64	; 0x40
 8003a92:	d10e      	bne.n	8003ab2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b40      	cmp	r3, #64	; 0x40
 8003aa0:	d107      	bne.n	8003ab2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f951 	bl	8003d54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d10e      	bne.n	8003ade <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d107      	bne.n	8003ade <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f06f 0220 	mvn.w	r2, #32
 8003ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fc9d 	bl	8004418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b086      	sub	sp, #24
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e088      	b.n	8003c16 <HAL_TIM_IC_ConfigChannel+0x130>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d11b      	bne.n	8003b4a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	6819      	ldr	r1, [r3, #0]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f000 fa53 	bl	8003fcc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699a      	ldr	r2, [r3, #24]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 020c 	bic.w	r2, r2, #12
 8003b34:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6999      	ldr	r1, [r3, #24]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	619a      	str	r2, [r3, #24]
 8003b48:	e060      	b.n	8003c0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d11c      	bne.n	8003b8a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	6819      	ldr	r1, [r3, #0]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f000 fad7 	bl	8004112 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b72:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6999      	ldr	r1, [r3, #24]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	021a      	lsls	r2, r3, #8
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	619a      	str	r2, [r3, #24]
 8003b88:	e040      	b.n	8003c0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d11b      	bne.n	8003bc8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	6819      	ldr	r1, [r3, #0]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f000 fb24 	bl	80041ec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	69da      	ldr	r2, [r3, #28]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 020c 	bic.w	r2, r2, #12
 8003bb2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	69d9      	ldr	r1, [r3, #28]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	61da      	str	r2, [r3, #28]
 8003bc6:	e021      	b.n	8003c0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b0c      	cmp	r3, #12
 8003bcc:	d11c      	bne.n	8003c08 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	6819      	ldr	r1, [r3, #0]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f000 fb41 	bl	8004264 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003bf0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69d9      	ldr	r1, [r3, #28]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	021a      	lsls	r2, r3, #8
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	61da      	str	r2, [r3, #28]
 8003c06:	e001      	b.n	8003c0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e031      	b.n	8003c9a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2202      	movs	r2, #2
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003c46:	6839      	ldr	r1, [r7, #0]
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f92d 	bl	8003ea8 <TIM_SlaveTimer_SetConfig>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d009      	beq.n	8003c68 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e018      	b.n	8003c9a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c76:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c86:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b0c      	cmp	r3, #12
 8003cb6:	d831      	bhi.n	8003d1c <HAL_TIM_ReadCapturedValue+0x78>
 8003cb8:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08003cf5 	.word	0x08003cf5
 8003cc4:	08003d1d 	.word	0x08003d1d
 8003cc8:	08003d1d 	.word	0x08003d1d
 8003ccc:	08003d1d 	.word	0x08003d1d
 8003cd0:	08003cff 	.word	0x08003cff
 8003cd4:	08003d1d 	.word	0x08003d1d
 8003cd8:	08003d1d 	.word	0x08003d1d
 8003cdc:	08003d1d 	.word	0x08003d1d
 8003ce0:	08003d09 	.word	0x08003d09
 8003ce4:	08003d1d 	.word	0x08003d1d
 8003ce8:	08003d1d 	.word	0x08003d1d
 8003cec:	08003d1d 	.word	0x08003d1d
 8003cf0:	08003d13 	.word	0x08003d13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfa:	60fb      	str	r3, [r7, #12]

      break;
 8003cfc:	e00f      	b.n	8003d1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	60fb      	str	r3, [r7, #12]

      break;
 8003d06:	e00a      	b.n	8003d1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0e:	60fb      	str	r3, [r7, #12]

      break;
 8003d10:	e005      	b.n	8003d1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	60fb      	str	r3, [r7, #12]

      break;
 8003d1a:	e000      	b.n	8003d1e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003d1c:	bf00      	nop
  }

  return tmpreg;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a40      	ldr	r2, [pc, #256]	; (8003e7c <TIM_Base_SetConfig+0x114>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d013      	beq.n	8003da8 <TIM_Base_SetConfig+0x40>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d86:	d00f      	beq.n	8003da8 <TIM_Base_SetConfig+0x40>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a3d      	ldr	r2, [pc, #244]	; (8003e80 <TIM_Base_SetConfig+0x118>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00b      	beq.n	8003da8 <TIM_Base_SetConfig+0x40>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a3c      	ldr	r2, [pc, #240]	; (8003e84 <TIM_Base_SetConfig+0x11c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d007      	beq.n	8003da8 <TIM_Base_SetConfig+0x40>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a3b      	ldr	r2, [pc, #236]	; (8003e88 <TIM_Base_SetConfig+0x120>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d003      	beq.n	8003da8 <TIM_Base_SetConfig+0x40>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a3a      	ldr	r2, [pc, #232]	; (8003e8c <TIM_Base_SetConfig+0x124>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d108      	bne.n	8003dba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a2f      	ldr	r2, [pc, #188]	; (8003e7c <TIM_Base_SetConfig+0x114>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d02b      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc8:	d027      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a2c      	ldr	r2, [pc, #176]	; (8003e80 <TIM_Base_SetConfig+0x118>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d023      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a2b      	ldr	r2, [pc, #172]	; (8003e84 <TIM_Base_SetConfig+0x11c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d01f      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a2a      	ldr	r2, [pc, #168]	; (8003e88 <TIM_Base_SetConfig+0x120>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01b      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a29      	ldr	r2, [pc, #164]	; (8003e8c <TIM_Base_SetConfig+0x124>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d017      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a28      	ldr	r2, [pc, #160]	; (8003e90 <TIM_Base_SetConfig+0x128>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a27      	ldr	r2, [pc, #156]	; (8003e94 <TIM_Base_SetConfig+0x12c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00f      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a26      	ldr	r2, [pc, #152]	; (8003e98 <TIM_Base_SetConfig+0x130>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00b      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a25      	ldr	r2, [pc, #148]	; (8003e9c <TIM_Base_SetConfig+0x134>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d007      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a24      	ldr	r2, [pc, #144]	; (8003ea0 <TIM_Base_SetConfig+0x138>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d003      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a23      	ldr	r2, [pc, #140]	; (8003ea4 <TIM_Base_SetConfig+0x13c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d108      	bne.n	8003e2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <TIM_Base_SetConfig+0x114>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d003      	beq.n	8003e60 <TIM_Base_SetConfig+0xf8>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <TIM_Base_SetConfig+0x124>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d103      	bne.n	8003e68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	615a      	str	r2, [r3, #20]
}
 8003e6e:	bf00      	nop
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40010000 	.word	0x40010000
 8003e80:	40000400 	.word	0x40000400
 8003e84:	40000800 	.word	0x40000800
 8003e88:	40000c00 	.word	0x40000c00
 8003e8c:	40010400 	.word	0x40010400
 8003e90:	40014000 	.word	0x40014000
 8003e94:	40014400 	.word	0x40014400
 8003e98:	40014800 	.word	0x40014800
 8003e9c:	40001800 	.word	0x40001800
 8003ea0:	40001c00 	.word	0x40001c00
 8003ea4:	40002000 	.word	0x40002000

08003ea8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f023 0307 	bic.w	r3, r3, #7
 8003ed6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b70      	cmp	r3, #112	; 0x70
 8003ef0:	d01a      	beq.n	8003f28 <TIM_SlaveTimer_SetConfig+0x80>
 8003ef2:	2b70      	cmp	r3, #112	; 0x70
 8003ef4:	d860      	bhi.n	8003fb8 <TIM_SlaveTimer_SetConfig+0x110>
 8003ef6:	2b60      	cmp	r3, #96	; 0x60
 8003ef8:	d054      	beq.n	8003fa4 <TIM_SlaveTimer_SetConfig+0xfc>
 8003efa:	2b60      	cmp	r3, #96	; 0x60
 8003efc:	d85c      	bhi.n	8003fb8 <TIM_SlaveTimer_SetConfig+0x110>
 8003efe:	2b50      	cmp	r3, #80	; 0x50
 8003f00:	d046      	beq.n	8003f90 <TIM_SlaveTimer_SetConfig+0xe8>
 8003f02:	2b50      	cmp	r3, #80	; 0x50
 8003f04:	d858      	bhi.n	8003fb8 <TIM_SlaveTimer_SetConfig+0x110>
 8003f06:	2b40      	cmp	r3, #64	; 0x40
 8003f08:	d019      	beq.n	8003f3e <TIM_SlaveTimer_SetConfig+0x96>
 8003f0a:	2b40      	cmp	r3, #64	; 0x40
 8003f0c:	d854      	bhi.n	8003fb8 <TIM_SlaveTimer_SetConfig+0x110>
 8003f0e:	2b30      	cmp	r3, #48	; 0x30
 8003f10:	d055      	beq.n	8003fbe <TIM_SlaveTimer_SetConfig+0x116>
 8003f12:	2b30      	cmp	r3, #48	; 0x30
 8003f14:	d850      	bhi.n	8003fb8 <TIM_SlaveTimer_SetConfig+0x110>
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d051      	beq.n	8003fbe <TIM_SlaveTimer_SetConfig+0x116>
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	d84c      	bhi.n	8003fb8 <TIM_SlaveTimer_SetConfig+0x110>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d04d      	beq.n	8003fbe <TIM_SlaveTimer_SetConfig+0x116>
 8003f22:	2b10      	cmp	r3, #16
 8003f24:	d04b      	beq.n	8003fbe <TIM_SlaveTimer_SetConfig+0x116>
 8003f26:	e047      	b.n	8003fb8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	68d9      	ldr	r1, [r3, #12]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f000 f9d1 	bl	80042de <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003f3c:	e040      	b.n	8003fc0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b05      	cmp	r3, #5
 8003f44:	d101      	bne.n	8003f4a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e03b      	b.n	8003fc2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6a1a      	ldr	r2, [r3, #32]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0201 	bic.w	r2, r2, #1
 8003f60:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f70:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	621a      	str	r2, [r3, #32]
      break;
 8003f8e:	e017      	b.n	8003fc0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	6899      	ldr	r1, [r3, #8]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f000 f889 	bl	80040b4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003fa2:	e00d      	b.n	8003fc0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6818      	ldr	r0, [r3, #0]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	6899      	ldr	r1, [r3, #8]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f000 f8eb 	bl	800418c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003fb6:	e003      	b.n	8003fc0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	75fb      	strb	r3, [r7, #23]
      break;
 8003fbc:	e000      	b.n	8003fc0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003fbe:	bf00      	nop
  }

  return status;
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f023 0201 	bic.w	r2, r3, #1
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4a28      	ldr	r2, [pc, #160]	; (8004098 <TIM_TI1_SetConfig+0xcc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01b      	beq.n	8004032 <TIM_TI1_SetConfig+0x66>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004000:	d017      	beq.n	8004032 <TIM_TI1_SetConfig+0x66>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4a25      	ldr	r2, [pc, #148]	; (800409c <TIM_TI1_SetConfig+0xd0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <TIM_TI1_SetConfig+0x66>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a24      	ldr	r2, [pc, #144]	; (80040a0 <TIM_TI1_SetConfig+0xd4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00f      	beq.n	8004032 <TIM_TI1_SetConfig+0x66>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4a23      	ldr	r2, [pc, #140]	; (80040a4 <TIM_TI1_SetConfig+0xd8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00b      	beq.n	8004032 <TIM_TI1_SetConfig+0x66>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4a22      	ldr	r2, [pc, #136]	; (80040a8 <TIM_TI1_SetConfig+0xdc>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d007      	beq.n	8004032 <TIM_TI1_SetConfig+0x66>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4a21      	ldr	r2, [pc, #132]	; (80040ac <TIM_TI1_SetConfig+0xe0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d003      	beq.n	8004032 <TIM_TI1_SetConfig+0x66>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4a20      	ldr	r2, [pc, #128]	; (80040b0 <TIM_TI1_SetConfig+0xe4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d101      	bne.n	8004036 <TIM_TI1_SetConfig+0x6a>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <TIM_TI1_SetConfig+0x6c>
 8004036:	2300      	movs	r3, #0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f023 0303 	bic.w	r3, r3, #3
 8004042:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	e003      	b.n	8004056 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f043 0301 	orr.w	r3, r3, #1
 8004054:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800405c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	b2db      	uxtb	r3, r3
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f023 030a 	bic.w	r3, r3, #10
 8004070:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f003 030a 	and.w	r3, r3, #10
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	621a      	str	r2, [r3, #32]
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40010000 	.word	0x40010000
 800409c:	40000400 	.word	0x40000400
 80040a0:	40000800 	.word	0x40000800
 80040a4:	40000c00 	.word	0x40000c00
 80040a8:	40010400 	.word	0x40010400
 80040ac:	40014000 	.word	0x40014000
 80040b0:	40001800 	.word	0x40001800

080040b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f023 0201 	bic.w	r2, r3, #1
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f023 030a 	bic.w	r3, r3, #10
 80040f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004112:	b480      	push	{r7}
 8004114:	b087      	sub	sp, #28
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
 800411e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f023 0210 	bic.w	r2, r3, #16
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800413e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004150:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	031b      	lsls	r3, r3, #12
 8004156:	b29b      	uxth	r3, r3
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004164:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	621a      	str	r2, [r3, #32]
}
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	f023 0210 	bic.w	r2, r3, #16
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	031b      	lsls	r3, r3, #12
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	621a      	str	r2, [r3, #32]
}
 80041e0:	bf00      	nop
 80041e2:	371c      	adds	r7, #28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f023 0303 	bic.w	r3, r3, #3
 8004218:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004228:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	b2db      	uxtb	r3, r3
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800423c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	021b      	lsls	r3, r3, #8
 8004242:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	621a      	str	r2, [r3, #32]
}
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004290:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	021b      	lsls	r3, r3, #8
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	031b      	lsls	r3, r3, #12
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80042b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	031b      	lsls	r3, r3, #12
 80042bc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042de:	b480      	push	{r7}
 80042e0:	b087      	sub	sp, #28
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
 80042ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	021a      	lsls	r2, r3, #8
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	431a      	orrs	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	4313      	orrs	r3, r2
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	609a      	str	r2, [r3, #8]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004334:	2302      	movs	r3, #2
 8004336:	e05a      	b.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a21      	ldr	r2, [pc, #132]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d022      	beq.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004384:	d01d      	beq.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1d      	ldr	r2, [pc, #116]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d018      	beq.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1b      	ldr	r2, [pc, #108]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d013      	beq.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1a      	ldr	r2, [pc, #104]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00e      	beq.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a18      	ldr	r2, [pc, #96]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d009      	beq.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a17      	ldr	r2, [pc, #92]	; (8004410 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d004      	beq.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a15      	ldr	r2, [pc, #84]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d10c      	bne.n	80043dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40010000 	.word	0x40010000
 8004400:	40000400 	.word	0x40000400
 8004404:	40000800 	.word	0x40000800
 8004408:	40000c00 	.word	0x40000c00
 800440c:	40010400 	.word	0x40010400
 8004410:	40014000 	.word	0x40014000
 8004414:	40001800 	.word	0x40001800

08004418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e03f      	b.n	80044d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fd fc3c 	bl	8001ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2224      	movs	r2, #36	; 0x24
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fe7d 	bl	8005184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695a      	ldr	r2, [r3, #20]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b08a      	sub	sp, #40	; 0x28
 80044de:	af02      	add	r7, sp, #8
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	603b      	str	r3, [r7, #0]
 80044e6:	4613      	mov	r3, r2
 80044e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d17c      	bne.n	80045f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_UART_Transmit+0x2c>
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e075      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_UART_Transmit+0x3e>
 8004514:	2302      	movs	r3, #2
 8004516:	e06e      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2221      	movs	r2, #33	; 0x21
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800452e:	f7fd fead 	bl	800228c <HAL_GetTick>
 8004532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	88fa      	ldrh	r2, [r7, #6]
 8004538:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	88fa      	ldrh	r2, [r7, #6]
 800453e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004548:	d108      	bne.n	800455c <HAL_UART_Transmit+0x82>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	e003      	b.n	8004564 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004560:	2300      	movs	r3, #0
 8004562:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800456c:	e02a      	b.n	80045c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2200      	movs	r2, #0
 8004576:	2180      	movs	r1, #128	; 0x80
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fbc1 	bl	8004d00 <UART_WaitOnFlagUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e036      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10b      	bne.n	80045a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800459c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	3302      	adds	r3, #2
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	e007      	b.n	80045b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	781a      	ldrb	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	3301      	adds	r3, #1
 80045b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1cf      	bne.n	800456e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2200      	movs	r2, #0
 80045d6:	2140      	movs	r1, #64	; 0x40
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 fb91 	bl	8004d00 <UART_WaitOnFlagUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e006      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e000      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
  }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3720      	adds	r7, #32
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b08a      	sub	sp, #40	; 0x28
 8004602:	af02      	add	r7, sp, #8
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	603b      	str	r3, [r7, #0]
 800460a:	4613      	mov	r3, r2
 800460c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b20      	cmp	r3, #32
 800461c:	f040 808c 	bne.w	8004738 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_UART_Receive+0x2e>
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e084      	b.n	800473a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_UART_Receive+0x40>
 800463a:	2302      	movs	r3, #2
 800463c:	e07d      	b.n	800473a <HAL_UART_Receive+0x13c>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2222      	movs	r2, #34	; 0x22
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800465a:	f7fd fe17 	bl	800228c <HAL_GetTick>
 800465e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	88fa      	ldrh	r2, [r7, #6]
 8004664:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	88fa      	ldrh	r2, [r7, #6]
 800466a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004674:	d108      	bne.n	8004688 <HAL_UART_Receive+0x8a>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d104      	bne.n	8004688 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	61bb      	str	r3, [r7, #24]
 8004686:	e003      	b.n	8004690 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800468c:	2300      	movs	r3, #0
 800468e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004698:	e043      	b.n	8004722 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2200      	movs	r2, #0
 80046a2:	2120      	movs	r1, #32
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fb2b 	bl	8004d00 <UART_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e042      	b.n	800473a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10c      	bne.n	80046d4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	3302      	adds	r3, #2
 80046d0:	61bb      	str	r3, [r7, #24]
 80046d2:	e01f      	b.n	8004714 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046dc:	d007      	beq.n	80046ee <HAL_UART_Receive+0xf0>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10a      	bne.n	80046fc <HAL_UART_Receive+0xfe>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	e008      	b.n	800470e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004708:	b2da      	uxtb	r2, r3
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	3301      	adds	r3, #1
 8004712:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1b6      	bne.n	800469a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	4613      	mov	r3, r2
 800474e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b20      	cmp	r3, #32
 800475a:	d11d      	bne.n	8004798 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_UART_Receive_IT+0x26>
 8004762:	88fb      	ldrh	r3, [r7, #6]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e016      	b.n	800479a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_UART_Receive_IT+0x38>
 8004776:	2302      	movs	r3, #2
 8004778:	e00f      	b.n	800479a <HAL_UART_Receive_IT+0x58>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004788:	88fb      	ldrh	r3, [r7, #6]
 800478a:	461a      	mov	r2, r3
 800478c:	68b9      	ldr	r1, [r7, #8]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 fb24 	bl	8004ddc <UART_Start_Receive_IT>
 8004794:	4603      	mov	r3, r0
 8004796:	e000      	b.n	800479a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004798:	2302      	movs	r3, #2
  }
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b0ba      	sub	sp, #232	; 0xe8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80047e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10f      	bne.n	800480a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d009      	beq.n	800480a <HAL_UART_IRQHandler+0x66>
 80047f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fc03 	bl	800500e <UART_Receive_IT>
      return;
 8004808:	e256      	b.n	8004cb8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800480a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 80de 	beq.w	80049d0 <HAL_UART_IRQHandler+0x22c>
 8004814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d106      	bne.n	800482e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004824:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80d1 	beq.w	80049d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800482e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <HAL_UART_IRQHandler+0xae>
 800483a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800483e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f043 0201 	orr.w	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00b      	beq.n	8004876 <HAL_UART_IRQHandler+0xd2>
 800485e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d005      	beq.n	8004876 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f043 0202 	orr.w	r2, r3, #2
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <HAL_UART_IRQHandler+0xf6>
 8004882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f043 0204 	orr.w	r2, r3, #4
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800489a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d011      	beq.n	80048ca <HAL_UART_IRQHandler+0x126>
 80048a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d105      	bne.n	80048be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f043 0208 	orr.w	r2, r3, #8
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 81ed 	beq.w	8004cae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_UART_IRQHandler+0x14e>
 80048e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fb8e 	bl	800500e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fc:	2b40      	cmp	r3, #64	; 0x40
 80048fe:	bf0c      	ite	eq
 8004900:	2301      	moveq	r3, #1
 8004902:	2300      	movne	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d103      	bne.n	800491e <HAL_UART_IRQHandler+0x17a>
 8004916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800491a:	2b00      	cmp	r3, #0
 800491c:	d04f      	beq.n	80049be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fa96 	bl	8004e50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492e:	2b40      	cmp	r3, #64	; 0x40
 8004930:	d141      	bne.n	80049b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3314      	adds	r3, #20
 8004938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800494c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3314      	adds	r3, #20
 800495a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800495e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800496a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1d9      	bne.n	8004932 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	2b00      	cmp	r3, #0
 8004984:	d013      	beq.n	80049ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	4a7d      	ldr	r2, [pc, #500]	; (8004b80 <HAL_UART_IRQHandler+0x3dc>)
 800498c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	4618      	mov	r0, r3
 8004994:	f7fd fdfc 	bl	8002590 <HAL_DMA_Abort_IT>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d016      	beq.n	80049cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049a8:	4610      	mov	r0, r2
 80049aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ac:	e00e      	b.n	80049cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f990 	bl	8004cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b4:	e00a      	b.n	80049cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f98c 	bl	8004cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049bc:	e006      	b.n	80049cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f988 	bl	8004cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80049ca:	e170      	b.n	8004cae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049cc:	bf00      	nop
    return;
 80049ce:	e16e      	b.n	8004cae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	f040 814a 	bne.w	8004c6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049de:	f003 0310 	and.w	r3, r3, #16
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 8143 	beq.w	8004c6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ec:	f003 0310 	and.w	r3, r3, #16
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 813c 	beq.w	8004c6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049f6:	2300      	movs	r3, #0
 80049f8:	60bb      	str	r3, [r7, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a16:	2b40      	cmp	r3, #64	; 0x40
 8004a18:	f040 80b4 	bne.w	8004b84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 8140 	beq.w	8004cb2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	f080 8139 	bcs.w	8004cb2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a52:	f000 8088 	beq.w	8004b66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	330c      	adds	r3, #12
 8004a5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1d9      	bne.n	8004a56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3314      	adds	r3, #20
 8004aa8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ab2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ab4:	f023 0301 	bic.w	r3, r3, #1
 8004ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3314      	adds	r3, #20
 8004ac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ac6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004aca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ace:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e1      	bne.n	8004aa2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3314      	adds	r3, #20
 8004ae4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ae8:	e853 3f00 	ldrex	r3, [r3]
 8004aec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3314      	adds	r3, #20
 8004afe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e3      	bne.n	8004ade <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	330c      	adds	r3, #12
 8004b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b2e:	e853 3f00 	ldrex	r3, [r3]
 8004b32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b36:	f023 0310 	bic.w	r3, r3, #16
 8004b3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	330c      	adds	r3, #12
 8004b44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b48:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b50:	e841 2300 	strex	r3, r2, [r1]
 8004b54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e3      	bne.n	8004b24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fd fca5 	bl	80024b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	4619      	mov	r1, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f8b6 	bl	8004ce8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b7c:	e099      	b.n	8004cb2 <HAL_UART_IRQHandler+0x50e>
 8004b7e:	bf00      	nop
 8004b80:	08004f17 	.word	0x08004f17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 808b 	beq.w	8004cb6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004ba0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 8086 	beq.w	8004cb6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	330c      	adds	r3, #12
 8004bb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb4:	e853 3f00 	ldrex	r3, [r3]
 8004bb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	330c      	adds	r3, #12
 8004bca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004bce:	647a      	str	r2, [r7, #68]	; 0x44
 8004bd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bd6:	e841 2300 	strex	r3, r2, [r1]
 8004bda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1e3      	bne.n	8004baa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3314      	adds	r3, #20
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	e853 3f00 	ldrex	r3, [r3]
 8004bf0:	623b      	str	r3, [r7, #32]
   return(result);
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	f023 0301 	bic.w	r3, r3, #1
 8004bf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3314      	adds	r3, #20
 8004c02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c06:	633a      	str	r2, [r7, #48]	; 0x30
 8004c08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e3      	bne.n	8004be2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	330c      	adds	r3, #12
 8004c2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	e853 3f00 	ldrex	r3, [r3]
 8004c36:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0310 	bic.w	r3, r3, #16
 8004c3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	330c      	adds	r3, #12
 8004c48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c4c:	61fa      	str	r2, [r7, #28]
 8004c4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c50:	69b9      	ldr	r1, [r7, #24]
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	617b      	str	r3, [r7, #20]
   return(result);
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e3      	bne.n	8004c28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c64:	4619      	mov	r1, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f83e 	bl	8004ce8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c6c:	e023      	b.n	8004cb6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d009      	beq.n	8004c8e <HAL_UART_IRQHandler+0x4ea>
 8004c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f959 	bl	8004f3e <UART_Transmit_IT>
    return;
 8004c8c:	e014      	b.n	8004cb8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00e      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x514>
 8004c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d008      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f999 	bl	8004fde <UART_EndTransmit_IT>
    return;
 8004cac:	e004      	b.n	8004cb8 <HAL_UART_IRQHandler+0x514>
    return;
 8004cae:	bf00      	nop
 8004cb0:	e002      	b.n	8004cb8 <HAL_UART_IRQHandler+0x514>
      return;
 8004cb2:	bf00      	nop
 8004cb4:	e000      	b.n	8004cb8 <HAL_UART_IRQHandler+0x514>
      return;
 8004cb6:	bf00      	nop
  }
}
 8004cb8:	37e8      	adds	r7, #232	; 0xe8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop

08004cc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b090      	sub	sp, #64	; 0x40
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	603b      	str	r3, [r7, #0]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d10:	e050      	b.n	8004db4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d18:	d04c      	beq.n	8004db4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d20:	f7fd fab4 	bl	800228c <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d241      	bcs.n	8004db4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	330c      	adds	r3, #12
 8004d36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	330c      	adds	r3, #12
 8004d4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d50:	637a      	str	r2, [r7, #52]	; 0x34
 8004d52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e5      	bne.n	8004d30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3314      	adds	r3, #20
 8004d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	613b      	str	r3, [r7, #16]
   return(result);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f023 0301 	bic.w	r3, r3, #1
 8004d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3314      	adds	r3, #20
 8004d82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d84:	623a      	str	r2, [r7, #32]
 8004d86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	69f9      	ldr	r1, [r7, #28]
 8004d8a:	6a3a      	ldr	r2, [r7, #32]
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e5      	bne.n	8004d64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e00f      	b.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	bf0c      	ite	eq
 8004dc4:	2301      	moveq	r3, #1
 8004dc6:	2300      	movne	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	79fb      	ldrb	r3, [r7, #7]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d09f      	beq.n	8004d12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3740      	adds	r7, #64	; 0x40
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	4613      	mov	r3, r2
 8004de8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	88fa      	ldrh	r2, [r7, #6]
 8004df4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	88fa      	ldrh	r2, [r7, #6]
 8004dfa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2222      	movs	r2, #34	; 0x22
 8004e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e20:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695a      	ldr	r2, [r3, #20]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0201 	orr.w	r2, r2, #1
 8004e30:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f042 0220 	orr.w	r2, r2, #32
 8004e40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b095      	sub	sp, #84	; 0x54
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	330c      	adds	r3, #12
 8004e5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	330c      	adds	r3, #12
 8004e76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e78:	643a      	str	r2, [r7, #64]	; 0x40
 8004e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e80:	e841 2300 	strex	r3, r2, [r1]
 8004e84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e5      	bne.n	8004e58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3314      	adds	r3, #20
 8004e92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f023 0301 	bic.w	r3, r3, #1
 8004ea2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3314      	adds	r3, #20
 8004eaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004eae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e5      	bne.n	8004e8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d119      	bne.n	8004efc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	330c      	adds	r3, #12
 8004ece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f023 0310 	bic.w	r3, r3, #16
 8004ede:	647b      	str	r3, [r7, #68]	; 0x44
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ee8:	61ba      	str	r2, [r7, #24]
 8004eea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	6979      	ldr	r1, [r7, #20]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e5      	bne.n	8004ec8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f0a:	bf00      	nop
 8004f0c:	3754      	adds	r7, #84	; 0x54
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b084      	sub	sp, #16
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff fecf 	bl	8004cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f36:	bf00      	nop
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b21      	cmp	r3, #33	; 0x21
 8004f50:	d13e      	bne.n	8004fd0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f5a:	d114      	bne.n	8004f86 <UART_Transmit_IT+0x48>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d110      	bne.n	8004f86 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	1c9a      	adds	r2, r3, #2
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	621a      	str	r2, [r3, #32]
 8004f84:	e008      	b.n	8004f98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	1c59      	adds	r1, r3, #1
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6211      	str	r1, [r2, #32]
 8004f90:	781a      	ldrb	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10f      	bne.n	8004fcc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e000      	b.n	8004fd2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fd0:	2302      	movs	r3, #2
  }
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff fe5e 	bl	8004cc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b08c      	sub	sp, #48	; 0x30
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b22      	cmp	r3, #34	; 0x22
 8005020:	f040 80ab 	bne.w	800517a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502c:	d117      	bne.n	800505e <UART_Receive_IT+0x50>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d113      	bne.n	800505e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005036:	2300      	movs	r3, #0
 8005038:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	b29b      	uxth	r3, r3
 8005048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504c:	b29a      	uxth	r2, r3
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005056:	1c9a      	adds	r2, r3, #2
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	629a      	str	r2, [r3, #40]	; 0x28
 800505c:	e026      	b.n	80050ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005062:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005064:	2300      	movs	r3, #0
 8005066:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005070:	d007      	beq.n	8005082 <UART_Receive_IT+0x74>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10a      	bne.n	8005090 <UART_Receive_IT+0x82>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	e008      	b.n	80050a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	b2db      	uxtb	r3, r3
 8005098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800509c:	b2da      	uxtb	r2, r3
 800509e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	4619      	mov	r1, r3
 80050ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d15a      	bne.n	8005176 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0220 	bic.w	r2, r2, #32
 80050ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695a      	ldr	r2, [r3, #20]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0201 	bic.w	r2, r2, #1
 80050ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d135      	bne.n	800516c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	330c      	adds	r3, #12
 800510c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	e853 3f00 	ldrex	r3, [r3]
 8005114:	613b      	str	r3, [r7, #16]
   return(result);
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f023 0310 	bic.w	r3, r3, #16
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	330c      	adds	r3, #12
 8005124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005126:	623a      	str	r2, [r7, #32]
 8005128:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512a:	69f9      	ldr	r1, [r7, #28]
 800512c:	6a3a      	ldr	r2, [r7, #32]
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	61bb      	str	r3, [r7, #24]
   return(result);
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e5      	bne.n	8005106 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	2b10      	cmp	r3, #16
 8005146:	d10a      	bne.n	800515e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005148:	2300      	movs	r3, #0
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005162:	4619      	mov	r1, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff fdbf 	bl	8004ce8 <HAL_UARTEx_RxEventCallback>
 800516a:	e002      	b.n	8005172 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f001 fbad 	bl	80068cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	e002      	b.n	800517c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	e000      	b.n	800517c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800517a:	2302      	movs	r3, #2
  }
}
 800517c:	4618      	mov	r0, r3
 800517e:	3730      	adds	r7, #48	; 0x30
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005188:	b09f      	sub	sp, #124	; 0x7c
 800518a:	af00      	add	r7, sp, #0
 800518c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800518e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519a:	68d9      	ldr	r1, [r3, #12]
 800519c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	ea40 0301 	orr.w	r3, r0, r1
 80051a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	431a      	orrs	r2, r3
 80051b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80051be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051c8:	f021 010c 	bic.w	r1, r1, #12
 80051cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051d2:	430b      	orrs	r3, r1
 80051d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e2:	6999      	ldr	r1, [r3, #24]
 80051e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	ea40 0301 	orr.w	r3, r0, r1
 80051ec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4bc5      	ldr	r3, [pc, #788]	; (8005508 <UART_SetConfig+0x384>)
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d004      	beq.n	8005202 <UART_SetConfig+0x7e>
 80051f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	4bc3      	ldr	r3, [pc, #780]	; (800550c <UART_SetConfig+0x388>)
 80051fe:	429a      	cmp	r2, r3
 8005200:	d103      	bne.n	800520a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005202:	f7fe fa09 	bl	8003618 <HAL_RCC_GetPCLK2Freq>
 8005206:	6778      	str	r0, [r7, #116]	; 0x74
 8005208:	e002      	b.n	8005210 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800520a:	f7fe f9f1 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 800520e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005218:	f040 80b6 	bne.w	8005388 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800521c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800521e:	461c      	mov	r4, r3
 8005220:	f04f 0500 	mov.w	r5, #0
 8005224:	4622      	mov	r2, r4
 8005226:	462b      	mov	r3, r5
 8005228:	1891      	adds	r1, r2, r2
 800522a:	6439      	str	r1, [r7, #64]	; 0x40
 800522c:	415b      	adcs	r3, r3
 800522e:	647b      	str	r3, [r7, #68]	; 0x44
 8005230:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005234:	1912      	adds	r2, r2, r4
 8005236:	eb45 0303 	adc.w	r3, r5, r3
 800523a:	f04f 0000 	mov.w	r0, #0
 800523e:	f04f 0100 	mov.w	r1, #0
 8005242:	00d9      	lsls	r1, r3, #3
 8005244:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005248:	00d0      	lsls	r0, r2, #3
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	1911      	adds	r1, r2, r4
 8005250:	6639      	str	r1, [r7, #96]	; 0x60
 8005252:	416b      	adcs	r3, r5
 8005254:	667b      	str	r3, [r7, #100]	; 0x64
 8005256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	461a      	mov	r2, r3
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	1891      	adds	r1, r2, r2
 8005262:	63b9      	str	r1, [r7, #56]	; 0x38
 8005264:	415b      	adcs	r3, r3
 8005266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005268:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800526c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005270:	f7fb fd4a 	bl	8000d08 <__aeabi_uldivmod>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4ba5      	ldr	r3, [pc, #660]	; (8005510 <UART_SetConfig+0x38c>)
 800527a:	fba3 2302 	umull	r2, r3, r3, r2
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	011e      	lsls	r6, r3, #4
 8005282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005284:	461c      	mov	r4, r3
 8005286:	f04f 0500 	mov.w	r5, #0
 800528a:	4622      	mov	r2, r4
 800528c:	462b      	mov	r3, r5
 800528e:	1891      	adds	r1, r2, r2
 8005290:	6339      	str	r1, [r7, #48]	; 0x30
 8005292:	415b      	adcs	r3, r3
 8005294:	637b      	str	r3, [r7, #52]	; 0x34
 8005296:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800529a:	1912      	adds	r2, r2, r4
 800529c:	eb45 0303 	adc.w	r3, r5, r3
 80052a0:	f04f 0000 	mov.w	r0, #0
 80052a4:	f04f 0100 	mov.w	r1, #0
 80052a8:	00d9      	lsls	r1, r3, #3
 80052aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052ae:	00d0      	lsls	r0, r2, #3
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	1911      	adds	r1, r2, r4
 80052b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80052b8:	416b      	adcs	r3, r5
 80052ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	461a      	mov	r2, r3
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	1891      	adds	r1, r2, r2
 80052c8:	62b9      	str	r1, [r7, #40]	; 0x28
 80052ca:	415b      	adcs	r3, r3
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80052d6:	f7fb fd17 	bl	8000d08 <__aeabi_uldivmod>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	4b8c      	ldr	r3, [pc, #560]	; (8005510 <UART_SetConfig+0x38c>)
 80052e0:	fba3 1302 	umull	r1, r3, r3, r2
 80052e4:	095b      	lsrs	r3, r3, #5
 80052e6:	2164      	movs	r1, #100	; 0x64
 80052e8:	fb01 f303 	mul.w	r3, r1, r3
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	3332      	adds	r3, #50	; 0x32
 80052f2:	4a87      	ldr	r2, [pc, #540]	; (8005510 <UART_SetConfig+0x38c>)
 80052f4:	fba2 2303 	umull	r2, r3, r2, r3
 80052f8:	095b      	lsrs	r3, r3, #5
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005300:	441e      	add	r6, r3
 8005302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005304:	4618      	mov	r0, r3
 8005306:	f04f 0100 	mov.w	r1, #0
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	1894      	adds	r4, r2, r2
 8005310:	623c      	str	r4, [r7, #32]
 8005312:	415b      	adcs	r3, r3
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
 8005316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800531a:	1812      	adds	r2, r2, r0
 800531c:	eb41 0303 	adc.w	r3, r1, r3
 8005320:	f04f 0400 	mov.w	r4, #0
 8005324:	f04f 0500 	mov.w	r5, #0
 8005328:	00dd      	lsls	r5, r3, #3
 800532a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800532e:	00d4      	lsls	r4, r2, #3
 8005330:	4622      	mov	r2, r4
 8005332:	462b      	mov	r3, r5
 8005334:	1814      	adds	r4, r2, r0
 8005336:	653c      	str	r4, [r7, #80]	; 0x50
 8005338:	414b      	adcs	r3, r1
 800533a:	657b      	str	r3, [r7, #84]	; 0x54
 800533c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	461a      	mov	r2, r3
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	1891      	adds	r1, r2, r2
 8005348:	61b9      	str	r1, [r7, #24]
 800534a:	415b      	adcs	r3, r3
 800534c:	61fb      	str	r3, [r7, #28]
 800534e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005352:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005356:	f7fb fcd7 	bl	8000d08 <__aeabi_uldivmod>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	4b6c      	ldr	r3, [pc, #432]	; (8005510 <UART_SetConfig+0x38c>)
 8005360:	fba3 1302 	umull	r1, r3, r3, r2
 8005364:	095b      	lsrs	r3, r3, #5
 8005366:	2164      	movs	r1, #100	; 0x64
 8005368:	fb01 f303 	mul.w	r3, r1, r3
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	3332      	adds	r3, #50	; 0x32
 8005372:	4a67      	ldr	r2, [pc, #412]	; (8005510 <UART_SetConfig+0x38c>)
 8005374:	fba2 2303 	umull	r2, r3, r2, r3
 8005378:	095b      	lsrs	r3, r3, #5
 800537a:	f003 0207 	and.w	r2, r3, #7
 800537e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4432      	add	r2, r6
 8005384:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005386:	e0b9      	b.n	80054fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800538a:	461c      	mov	r4, r3
 800538c:	f04f 0500 	mov.w	r5, #0
 8005390:	4622      	mov	r2, r4
 8005392:	462b      	mov	r3, r5
 8005394:	1891      	adds	r1, r2, r2
 8005396:	6139      	str	r1, [r7, #16]
 8005398:	415b      	adcs	r3, r3
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053a0:	1912      	adds	r2, r2, r4
 80053a2:	eb45 0303 	adc.w	r3, r5, r3
 80053a6:	f04f 0000 	mov.w	r0, #0
 80053aa:	f04f 0100 	mov.w	r1, #0
 80053ae:	00d9      	lsls	r1, r3, #3
 80053b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053b4:	00d0      	lsls	r0, r2, #3
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	eb12 0804 	adds.w	r8, r2, r4
 80053be:	eb43 0905 	adc.w	r9, r3, r5
 80053c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f04f 0100 	mov.w	r1, #0
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	008b      	lsls	r3, r1, #2
 80053d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053da:	0082      	lsls	r2, r0, #2
 80053dc:	4640      	mov	r0, r8
 80053de:	4649      	mov	r1, r9
 80053e0:	f7fb fc92 	bl	8000d08 <__aeabi_uldivmod>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4b49      	ldr	r3, [pc, #292]	; (8005510 <UART_SetConfig+0x38c>)
 80053ea:	fba3 2302 	umull	r2, r3, r3, r2
 80053ee:	095b      	lsrs	r3, r3, #5
 80053f0:	011e      	lsls	r6, r3, #4
 80053f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053f4:	4618      	mov	r0, r3
 80053f6:	f04f 0100 	mov.w	r1, #0
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	1894      	adds	r4, r2, r2
 8005400:	60bc      	str	r4, [r7, #8]
 8005402:	415b      	adcs	r3, r3
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800540a:	1812      	adds	r2, r2, r0
 800540c:	eb41 0303 	adc.w	r3, r1, r3
 8005410:	f04f 0400 	mov.w	r4, #0
 8005414:	f04f 0500 	mov.w	r5, #0
 8005418:	00dd      	lsls	r5, r3, #3
 800541a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800541e:	00d4      	lsls	r4, r2, #3
 8005420:	4622      	mov	r2, r4
 8005422:	462b      	mov	r3, r5
 8005424:	1814      	adds	r4, r2, r0
 8005426:	64bc      	str	r4, [r7, #72]	; 0x48
 8005428:	414b      	adcs	r3, r1
 800542a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800542c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	4618      	mov	r0, r3
 8005432:	f04f 0100 	mov.w	r1, #0
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	008b      	lsls	r3, r1, #2
 8005440:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005444:	0082      	lsls	r2, r0, #2
 8005446:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800544a:	f7fb fc5d 	bl	8000d08 <__aeabi_uldivmod>
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	4b2f      	ldr	r3, [pc, #188]	; (8005510 <UART_SetConfig+0x38c>)
 8005454:	fba3 1302 	umull	r1, r3, r3, r2
 8005458:	095b      	lsrs	r3, r3, #5
 800545a:	2164      	movs	r1, #100	; 0x64
 800545c:	fb01 f303 	mul.w	r3, r1, r3
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	3332      	adds	r3, #50	; 0x32
 8005466:	4a2a      	ldr	r2, [pc, #168]	; (8005510 <UART_SetConfig+0x38c>)
 8005468:	fba2 2303 	umull	r2, r3, r2, r3
 800546c:	095b      	lsrs	r3, r3, #5
 800546e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005472:	441e      	add	r6, r3
 8005474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005476:	4618      	mov	r0, r3
 8005478:	f04f 0100 	mov.w	r1, #0
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	1894      	adds	r4, r2, r2
 8005482:	603c      	str	r4, [r7, #0]
 8005484:	415b      	adcs	r3, r3
 8005486:	607b      	str	r3, [r7, #4]
 8005488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800548c:	1812      	adds	r2, r2, r0
 800548e:	eb41 0303 	adc.w	r3, r1, r3
 8005492:	f04f 0400 	mov.w	r4, #0
 8005496:	f04f 0500 	mov.w	r5, #0
 800549a:	00dd      	lsls	r5, r3, #3
 800549c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054a0:	00d4      	lsls	r4, r2, #3
 80054a2:	4622      	mov	r2, r4
 80054a4:	462b      	mov	r3, r5
 80054a6:	eb12 0a00 	adds.w	sl, r2, r0
 80054aa:	eb43 0b01 	adc.w	fp, r3, r1
 80054ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f04f 0100 	mov.w	r1, #0
 80054b8:	f04f 0200 	mov.w	r2, #0
 80054bc:	f04f 0300 	mov.w	r3, #0
 80054c0:	008b      	lsls	r3, r1, #2
 80054c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054c6:	0082      	lsls	r2, r0, #2
 80054c8:	4650      	mov	r0, sl
 80054ca:	4659      	mov	r1, fp
 80054cc:	f7fb fc1c 	bl	8000d08 <__aeabi_uldivmod>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4b0e      	ldr	r3, [pc, #56]	; (8005510 <UART_SetConfig+0x38c>)
 80054d6:	fba3 1302 	umull	r1, r3, r3, r2
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	2164      	movs	r1, #100	; 0x64
 80054de:	fb01 f303 	mul.w	r3, r1, r3
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	3332      	adds	r3, #50	; 0x32
 80054e8:	4a09      	ldr	r2, [pc, #36]	; (8005510 <UART_SetConfig+0x38c>)
 80054ea:	fba2 2303 	umull	r2, r3, r2, r3
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	f003 020f 	and.w	r2, r3, #15
 80054f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4432      	add	r2, r6
 80054fa:	609a      	str	r2, [r3, #8]
}
 80054fc:	bf00      	nop
 80054fe:	377c      	adds	r7, #124	; 0x7c
 8005500:	46bd      	mov	sp, r7
 8005502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005506:	bf00      	nop
 8005508:	40011000 	.word	0x40011000
 800550c:	40011400 	.word	0x40011400
 8005510:	51eb851f 	.word	0x51eb851f

08005514 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <SysTick_Handler+0x1c>)
 800551a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800551c:	f000 fda6 	bl	800606c <xTaskGetSchedulerState>
 8005520:	4603      	mov	r3, r0
 8005522:	2b01      	cmp	r3, #1
 8005524:	d001      	beq.n	800552a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005526:	f000 ff17 	bl	8006358 <xPortSysTickHandler>
  }
}
 800552a:	bf00      	nop
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	e000e010 	.word	0xe000e010

08005534 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800553a:	f3ef 8305 	mrs	r3, IPSR
 800553e:	603b      	str	r3, [r7, #0]
  return(result);
 8005540:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005546:	f06f 0305 	mvn.w	r3, #5
 800554a:	607b      	str	r3, [r7, #4]
 800554c:	e00c      	b.n	8005568 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800554e:	4b0a      	ldr	r3, [pc, #40]	; (8005578 <osKernelInitialize+0x44>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d105      	bne.n	8005562 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005556:	4b08      	ldr	r3, [pc, #32]	; (8005578 <osKernelInitialize+0x44>)
 8005558:	2201      	movs	r2, #1
 800555a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800555c:	2300      	movs	r3, #0
 800555e:	607b      	str	r3, [r7, #4]
 8005560:	e002      	b.n	8005568 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005562:	f04f 33ff 	mov.w	r3, #4294967295
 8005566:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005568:	687b      	ldr	r3, [r7, #4]
}
 800556a:	4618      	mov	r0, r3
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	2000029c 	.word	0x2000029c

0800557c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800557c:	b580      	push	{r7, lr}
 800557e:	b08e      	sub	sp, #56	; 0x38
 8005580:	af04      	add	r7, sp, #16
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005588:	2300      	movs	r3, #0
 800558a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800558c:	f3ef 8305 	mrs	r3, IPSR
 8005590:	617b      	str	r3, [r7, #20]
  return(result);
 8005592:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005594:	2b00      	cmp	r3, #0
 8005596:	d17e      	bne.n	8005696 <osThreadNew+0x11a>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d07b      	beq.n	8005696 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800559e:	2380      	movs	r3, #128	; 0x80
 80055a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80055a2:	2318      	movs	r3, #24
 80055a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80055aa:	f04f 33ff 	mov.w	r3, #4294967295
 80055ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d045      	beq.n	8005642 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <osThreadNew+0x48>
        name = attr->name;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d008      	beq.n	80055ea <osThreadNew+0x6e>
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	2b38      	cmp	r3, #56	; 0x38
 80055dc:	d805      	bhi.n	80055ea <osThreadNew+0x6e>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <osThreadNew+0x72>
        return (NULL);
 80055ea:	2300      	movs	r3, #0
 80055ec:	e054      	b.n	8005698 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	089b      	lsrs	r3, r3, #2
 80055fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00e      	beq.n	8005624 <osThreadNew+0xa8>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	2bbb      	cmp	r3, #187	; 0xbb
 800560c:	d90a      	bls.n	8005624 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005612:	2b00      	cmp	r3, #0
 8005614:	d006      	beq.n	8005624 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <osThreadNew+0xa8>
        mem = 1;
 800561e:	2301      	movs	r3, #1
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	e010      	b.n	8005646 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10c      	bne.n	8005646 <osThreadNew+0xca>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d108      	bne.n	8005646 <osThreadNew+0xca>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d104      	bne.n	8005646 <osThreadNew+0xca>
          mem = 0;
 800563c:	2300      	movs	r3, #0
 800563e:	61bb      	str	r3, [r7, #24]
 8005640:	e001      	b.n	8005646 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005642:	2300      	movs	r3, #0
 8005644:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d110      	bne.n	800566e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005654:	9202      	str	r2, [sp, #8]
 8005656:	9301      	str	r3, [sp, #4]
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	6a3a      	ldr	r2, [r7, #32]
 8005660:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 f8eb 	bl	800583e <xTaskCreateStatic>
 8005668:	4603      	mov	r3, r0
 800566a:	613b      	str	r3, [r7, #16]
 800566c:	e013      	b.n	8005696 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d110      	bne.n	8005696 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	b29a      	uxth	r2, r3
 8005678:	f107 0310 	add.w	r3, r7, #16
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f936 	bl	80058f8 <xTaskCreate>
 800568c:	4603      	mov	r3, r0
 800568e:	2b01      	cmp	r3, #1
 8005690:	d001      	beq.n	8005696 <osThreadNew+0x11a>
            hTask = NULL;
 8005692:	2300      	movs	r3, #0
 8005694:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005696:	693b      	ldr	r3, [r7, #16]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3728      	adds	r7, #40	; 0x28
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056a8:	f3ef 8305 	mrs	r3, IPSR
 80056ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80056ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <osDelay+0x1c>
    stat = osErrorISR;
 80056b4:	f06f 0305 	mvn.w	r3, #5
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	e007      	b.n	80056cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fa72 	bl	8005bb0 <vTaskDelay>
    }
  }

  return (stat);
 80056cc:	68fb      	ldr	r3, [r7, #12]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f103 0208 	add.w	r2, r3, #8
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f04f 32ff 	mov.w	r2, #4294967295
 80056ee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f103 0208 	add.w	r2, r3, #8
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f103 0208 	add.w	r2, r3, #8
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	601a      	str	r2, [r3, #0]
}
 800576c:	bf00      	nop
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578e:	d103      	bne.n	8005798 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	e00c      	b.n	80057b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3308      	adds	r3, #8
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	e002      	b.n	80057a6 <vListInsert+0x2e>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d2f6      	bcs.n	80057a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	601a      	str	r2, [r3, #0]
}
 80057de:	bf00      	nop
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057ea:	b480      	push	{r7}
 80057ec:	b085      	sub	sp, #20
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6892      	ldr	r2, [r2, #8]
 8005800:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6852      	ldr	r2, [r2, #4]
 800580a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	429a      	cmp	r2, r3
 8005814:	d103      	bne.n	800581e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	1e5a      	subs	r2, r3, #1
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800583e:	b580      	push	{r7, lr}
 8005840:	b08e      	sub	sp, #56	; 0x38
 8005842:	af04      	add	r7, sp, #16
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	607a      	str	r2, [r7, #4]
 800584a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800584c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10a      	bne.n	8005868 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005864:	bf00      	nop
 8005866:	e7fe      	b.n	8005866 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10a      	bne.n	8005884 <xTaskCreateStatic+0x46>
	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	61fb      	str	r3, [r7, #28]
}
 8005880:	bf00      	nop
 8005882:	e7fe      	b.n	8005882 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005884:	23bc      	movs	r3, #188	; 0xbc
 8005886:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	2bbc      	cmp	r3, #188	; 0xbc
 800588c:	d00a      	beq.n	80058a4 <xTaskCreateStatic+0x66>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	61bb      	str	r3, [r7, #24]
}
 80058a0:	bf00      	nop
 80058a2:	e7fe      	b.n	80058a2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01e      	beq.n	80058ea <xTaskCreateStatic+0xac>
 80058ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d01b      	beq.n	80058ea <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058c4:	2300      	movs	r3, #0
 80058c6:	9303      	str	r3, [sp, #12]
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	9302      	str	r3, [sp, #8]
 80058cc:	f107 0314 	add.w	r3, r7, #20
 80058d0:	9301      	str	r3, [sp, #4]
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	68b9      	ldr	r1, [r7, #8]
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 f851 	bl	8005984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058e4:	f000 f8f4 	bl	8005ad0 <prvAddNewTaskToReadyList>
 80058e8:	e001      	b.n	80058ee <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058ee:	697b      	ldr	r3, [r7, #20]
	}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3728      	adds	r7, #40	; 0x28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08c      	sub	sp, #48	; 0x30
 80058fc:	af04      	add	r7, sp, #16
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005908:	88fb      	ldrh	r3, [r7, #6]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fd45 	bl	800639c <pvPortMalloc>
 8005912:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00e      	beq.n	8005938 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800591a:	20bc      	movs	r0, #188	; 0xbc
 800591c:	f000 fd3e 	bl	800639c <pvPortMalloc>
 8005920:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	631a      	str	r2, [r3, #48]	; 0x30
 800592e:	e005      	b.n	800593c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005930:	6978      	ldr	r0, [r7, #20]
 8005932:	f000 fdff 	bl	8006534 <vPortFree>
 8005936:	e001      	b.n	800593c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005938:	2300      	movs	r3, #0
 800593a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d017      	beq.n	8005972 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800594a:	88fa      	ldrh	r2, [r7, #6]
 800594c:	2300      	movs	r3, #0
 800594e:	9303      	str	r3, [sp, #12]
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	9302      	str	r3, [sp, #8]
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	9301      	str	r3, [sp, #4]
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f80f 	bl	8005984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005966:	69f8      	ldr	r0, [r7, #28]
 8005968:	f000 f8b2 	bl	8005ad0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800596c:	2301      	movs	r3, #1
 800596e:	61bb      	str	r3, [r7, #24]
 8005970:	e002      	b.n	8005978 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005972:	f04f 33ff 	mov.w	r3, #4294967295
 8005976:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005978:	69bb      	ldr	r3, [r7, #24]
	}
 800597a:	4618      	mov	r0, r3
 800597c:	3720      	adds	r7, #32
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b088      	sub	sp, #32
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
 8005990:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	461a      	mov	r2, r3
 800599c:	21a5      	movs	r1, #165	; 0xa5
 800599e:	f001 fb49 	bl	8007034 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059ac:	3b01      	subs	r3, #1
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	f023 0307 	bic.w	r3, r3, #7
 80059ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <prvInitialiseNewTask+0x58>
	__asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	617b      	str	r3, [r7, #20]
}
 80059d8:	bf00      	nop
 80059da:	e7fe      	b.n	80059da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d01f      	beq.n	8005a22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059e2:	2300      	movs	r3, #0
 80059e4:	61fb      	str	r3, [r7, #28]
 80059e6:	e012      	b.n	8005a0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	4413      	add	r3, r2
 80059ee:	7819      	ldrb	r1, [r3, #0]
 80059f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	4413      	add	r3, r2
 80059f6:	3334      	adds	r3, #52	; 0x34
 80059f8:	460a      	mov	r2, r1
 80059fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	4413      	add	r3, r2
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d006      	beq.n	8005a16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	61fb      	str	r3, [r7, #28]
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	2b0f      	cmp	r3, #15
 8005a12:	d9e9      	bls.n	80059e8 <prvInitialiseNewTask+0x64>
 8005a14:	e000      	b.n	8005a18 <prvInitialiseNewTask+0x94>
			{
				break;
 8005a16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a20:	e003      	b.n	8005a2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	2b37      	cmp	r3, #55	; 0x37
 8005a2e:	d901      	bls.n	8005a34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a30:	2337      	movs	r3, #55	; 0x37
 8005a32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	2200      	movs	r2, #0
 8005a44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	3304      	adds	r3, #4
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff fe63 	bl	8005716 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	3318      	adds	r3, #24
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff fe5e 	bl	8005716 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a82:	3354      	adds	r3, #84	; 0x54
 8005a84:	2260      	movs	r2, #96	; 0x60
 8005a86:	2100      	movs	r1, #0
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f001 fad3 	bl	8007034 <memset>
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	4a0c      	ldr	r2, [pc, #48]	; (8005ac4 <prvInitialiseNewTask+0x140>)
 8005a92:	659a      	str	r2, [r3, #88]	; 0x58
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	4a0c      	ldr	r2, [pc, #48]	; (8005ac8 <prvInitialiseNewTask+0x144>)
 8005a98:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	4a0b      	ldr	r2, [pc, #44]	; (8005acc <prvInitialiseNewTask+0x148>)
 8005a9e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	68f9      	ldr	r1, [r7, #12]
 8005aa4:	69b8      	ldr	r0, [r7, #24]
 8005aa6:	f000 fb53 	bl	8006150 <pxPortInitialiseStack>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005abc:	bf00      	nop
 8005abe:	3720      	adds	r7, #32
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	080099b8 	.word	0x080099b8
 8005ac8:	080099d8 	.word	0x080099d8
 8005acc:	08009998 	.word	0x08009998

08005ad0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ad8:	f000 fbae 	bl	8006238 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005adc:	4b2d      	ldr	r3, [pc, #180]	; (8005b94 <prvAddNewTaskToReadyList+0xc4>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	4a2c      	ldr	r2, [pc, #176]	; (8005b94 <prvAddNewTaskToReadyList+0xc4>)
 8005ae4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ae6:	4b2c      	ldr	r3, [pc, #176]	; (8005b98 <prvAddNewTaskToReadyList+0xc8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d109      	bne.n	8005b02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005aee:	4a2a      	ldr	r2, [pc, #168]	; (8005b98 <prvAddNewTaskToReadyList+0xc8>)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005af4:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <prvAddNewTaskToReadyList+0xc4>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d110      	bne.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005afc:	f000 fa56 	bl	8005fac <prvInitialiseTaskLists>
 8005b00:	e00d      	b.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b02:	4b26      	ldr	r3, [pc, #152]	; (8005b9c <prvAddNewTaskToReadyList+0xcc>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b0a:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <prvAddNewTaskToReadyList+0xc8>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d802      	bhi.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b18:	4a1f      	ldr	r2, [pc, #124]	; (8005b98 <prvAddNewTaskToReadyList+0xc8>)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b1e:	4b20      	ldr	r3, [pc, #128]	; (8005ba0 <prvAddNewTaskToReadyList+0xd0>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3301      	adds	r3, #1
 8005b24:	4a1e      	ldr	r2, [pc, #120]	; (8005ba0 <prvAddNewTaskToReadyList+0xd0>)
 8005b26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b28:	4b1d      	ldr	r3, [pc, #116]	; (8005ba0 <prvAddNewTaskToReadyList+0xd0>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b34:	4b1b      	ldr	r3, [pc, #108]	; (8005ba4 <prvAddNewTaskToReadyList+0xd4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d903      	bls.n	8005b44 <prvAddNewTaskToReadyList+0x74>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4a18      	ldr	r2, [pc, #96]	; (8005ba4 <prvAddNewTaskToReadyList+0xd4>)
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4a15      	ldr	r2, [pc, #84]	; (8005ba8 <prvAddNewTaskToReadyList+0xd8>)
 8005b52:	441a      	add	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f7ff fde8 	bl	8005730 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b60:	f000 fb9a 	bl	8006298 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b64:	4b0d      	ldr	r3, [pc, #52]	; (8005b9c <prvAddNewTaskToReadyList+0xcc>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00e      	beq.n	8005b8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <prvAddNewTaskToReadyList+0xc8>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d207      	bcs.n	8005b8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b7a:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <prvAddNewTaskToReadyList+0xdc>)
 8005b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b8a:	bf00      	nop
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	20000770 	.word	0x20000770
 8005b98:	200002a0 	.word	0x200002a0
 8005b9c:	2000077c 	.word	0x2000077c
 8005ba0:	2000078c 	.word	0x2000078c
 8005ba4:	20000778 	.word	0x20000778
 8005ba8:	200002a4 	.word	0x200002a4
 8005bac:	e000ed04 	.word	0xe000ed04

08005bb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d017      	beq.n	8005bf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bc2:	4b13      	ldr	r3, [pc, #76]	; (8005c10 <vTaskDelay+0x60>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <vTaskDelay+0x30>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	60bb      	str	r3, [r7, #8]
}
 8005bdc:	bf00      	nop
 8005bde:	e7fe      	b.n	8005bde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005be0:	f000 f81a 	bl	8005c18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005be4:	2100      	movs	r1, #0
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fa5e 	bl	80060a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bec:	f000 f822 	bl	8005c34 <xTaskResumeAll>
 8005bf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d107      	bne.n	8005c08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005bf8:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <vTaskDelay+0x64>)
 8005bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c08:	bf00      	nop
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20000794 	.word	0x20000794
 8005c14:	e000ed04 	.word	0xe000ed04

08005c18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c1c:	4b04      	ldr	r3, [pc, #16]	; (8005c30 <vTaskSuspendAll+0x18>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3301      	adds	r3, #1
 8005c22:	4a03      	ldr	r2, [pc, #12]	; (8005c30 <vTaskSuspendAll+0x18>)
 8005c24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c26:	bf00      	nop
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	20000794 	.word	0x20000794

08005c34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c42:	4b42      	ldr	r3, [pc, #264]	; (8005d4c <xTaskResumeAll+0x118>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10a      	bne.n	8005c60 <xTaskResumeAll+0x2c>
	__asm volatile
 8005c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4e:	f383 8811 	msr	BASEPRI, r3
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	603b      	str	r3, [r7, #0]
}
 8005c5c:	bf00      	nop
 8005c5e:	e7fe      	b.n	8005c5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c60:	f000 faea 	bl	8006238 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c64:	4b39      	ldr	r3, [pc, #228]	; (8005d4c <xTaskResumeAll+0x118>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	4a38      	ldr	r2, [pc, #224]	; (8005d4c <xTaskResumeAll+0x118>)
 8005c6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c6e:	4b37      	ldr	r3, [pc, #220]	; (8005d4c <xTaskResumeAll+0x118>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d162      	bne.n	8005d3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c76:	4b36      	ldr	r3, [pc, #216]	; (8005d50 <xTaskResumeAll+0x11c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d05e      	beq.n	8005d3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c7e:	e02f      	b.n	8005ce0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c80:	4b34      	ldr	r3, [pc, #208]	; (8005d54 <xTaskResumeAll+0x120>)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	3318      	adds	r3, #24
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7ff fdac 	bl	80057ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3304      	adds	r3, #4
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff fda7 	bl	80057ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca0:	4b2d      	ldr	r3, [pc, #180]	; (8005d58 <xTaskResumeAll+0x124>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d903      	bls.n	8005cb0 <xTaskResumeAll+0x7c>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	4a2a      	ldr	r2, [pc, #168]	; (8005d58 <xTaskResumeAll+0x124>)
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4a27      	ldr	r2, [pc, #156]	; (8005d5c <xTaskResumeAll+0x128>)
 8005cbe:	441a      	add	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	4610      	mov	r0, r2
 8005cc8:	f7ff fd32 	bl	8005730 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd0:	4b23      	ldr	r3, [pc, #140]	; (8005d60 <xTaskResumeAll+0x12c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d302      	bcc.n	8005ce0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005cda:	4b22      	ldr	r3, [pc, #136]	; (8005d64 <xTaskResumeAll+0x130>)
 8005cdc:	2201      	movs	r2, #1
 8005cde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ce0:	4b1c      	ldr	r3, [pc, #112]	; (8005d54 <xTaskResumeAll+0x120>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1cb      	bne.n	8005c80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cee:	f000 f99d 	bl	800602c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005cf2:	4b1d      	ldr	r3, [pc, #116]	; (8005d68 <xTaskResumeAll+0x134>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d010      	beq.n	8005d20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cfe:	f000 f837 	bl	8005d70 <xTaskIncrementTick>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d002      	beq.n	8005d0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005d08:	4b16      	ldr	r3, [pc, #88]	; (8005d64 <xTaskResumeAll+0x130>)
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1f1      	bne.n	8005cfe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005d1a:	4b13      	ldr	r3, [pc, #76]	; (8005d68 <xTaskResumeAll+0x134>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d20:	4b10      	ldr	r3, [pc, #64]	; (8005d64 <xTaskResumeAll+0x130>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d009      	beq.n	8005d3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d2c:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <xTaskResumeAll+0x138>)
 8005d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d3c:	f000 faac 	bl	8006298 <vPortExitCritical>

	return xAlreadyYielded;
 8005d40:	68bb      	ldr	r3, [r7, #8]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20000794 	.word	0x20000794
 8005d50:	20000770 	.word	0x20000770
 8005d54:	20000734 	.word	0x20000734
 8005d58:	20000778 	.word	0x20000778
 8005d5c:	200002a4 	.word	0x200002a4
 8005d60:	200002a0 	.word	0x200002a0
 8005d64:	20000784 	.word	0x20000784
 8005d68:	20000780 	.word	0x20000780
 8005d6c:	e000ed04 	.word	0xe000ed04

08005d70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d76:	2300      	movs	r3, #0
 8005d78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d7a:	4b4f      	ldr	r3, [pc, #316]	; (8005eb8 <xTaskIncrementTick+0x148>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f040 808f 	bne.w	8005ea2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d84:	4b4d      	ldr	r3, [pc, #308]	; (8005ebc <xTaskIncrementTick+0x14c>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d8c:	4a4b      	ldr	r2, [pc, #300]	; (8005ebc <xTaskIncrementTick+0x14c>)
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d120      	bne.n	8005dda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d98:	4b49      	ldr	r3, [pc, #292]	; (8005ec0 <xTaskIncrementTick+0x150>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <xTaskIncrementTick+0x48>
	__asm volatile
 8005da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	603b      	str	r3, [r7, #0]
}
 8005db4:	bf00      	nop
 8005db6:	e7fe      	b.n	8005db6 <xTaskIncrementTick+0x46>
 8005db8:	4b41      	ldr	r3, [pc, #260]	; (8005ec0 <xTaskIncrementTick+0x150>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	4b41      	ldr	r3, [pc, #260]	; (8005ec4 <xTaskIncrementTick+0x154>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a3f      	ldr	r2, [pc, #252]	; (8005ec0 <xTaskIncrementTick+0x150>)
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	4a3f      	ldr	r2, [pc, #252]	; (8005ec4 <xTaskIncrementTick+0x154>)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	4b3e      	ldr	r3, [pc, #248]	; (8005ec8 <xTaskIncrementTick+0x158>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	4a3d      	ldr	r2, [pc, #244]	; (8005ec8 <xTaskIncrementTick+0x158>)
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	f000 f929 	bl	800602c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005dda:	4b3c      	ldr	r3, [pc, #240]	; (8005ecc <xTaskIncrementTick+0x15c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d349      	bcc.n	8005e78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005de4:	4b36      	ldr	r3, [pc, #216]	; (8005ec0 <xTaskIncrementTick+0x150>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d104      	bne.n	8005df8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dee:	4b37      	ldr	r3, [pc, #220]	; (8005ecc <xTaskIncrementTick+0x15c>)
 8005df0:	f04f 32ff 	mov.w	r2, #4294967295
 8005df4:	601a      	str	r2, [r3, #0]
					break;
 8005df6:	e03f      	b.n	8005e78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df8:	4b31      	ldr	r3, [pc, #196]	; (8005ec0 <xTaskIncrementTick+0x150>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d203      	bcs.n	8005e18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e10:	4a2e      	ldr	r2, [pc, #184]	; (8005ecc <xTaskIncrementTick+0x15c>)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e16:	e02f      	b.n	8005e78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff fce4 	bl	80057ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d004      	beq.n	8005e34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	3318      	adds	r3, #24
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff fcdb 	bl	80057ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e38:	4b25      	ldr	r3, [pc, #148]	; (8005ed0 <xTaskIncrementTick+0x160>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d903      	bls.n	8005e48 <xTaskIncrementTick+0xd8>
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	4a22      	ldr	r2, [pc, #136]	; (8005ed0 <xTaskIncrementTick+0x160>)
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4a1f      	ldr	r2, [pc, #124]	; (8005ed4 <xTaskIncrementTick+0x164>)
 8005e56:	441a      	add	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4610      	mov	r0, r2
 8005e60:	f7ff fc66 	bl	8005730 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <xTaskIncrementTick+0x168>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d3b8      	bcc.n	8005de4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e72:	2301      	movs	r3, #1
 8005e74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e76:	e7b5      	b.n	8005de4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e78:	4b17      	ldr	r3, [pc, #92]	; (8005ed8 <xTaskIncrementTick+0x168>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7e:	4915      	ldr	r1, [pc, #84]	; (8005ed4 <xTaskIncrementTick+0x164>)
 8005e80:	4613      	mov	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	440b      	add	r3, r1
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d901      	bls.n	8005e94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005e90:	2301      	movs	r3, #1
 8005e92:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e94:	4b11      	ldr	r3, [pc, #68]	; (8005edc <xTaskIncrementTick+0x16c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	e004      	b.n	8005eac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ea2:	4b0f      	ldr	r3, [pc, #60]	; (8005ee0 <xTaskIncrementTick+0x170>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	4a0d      	ldr	r2, [pc, #52]	; (8005ee0 <xTaskIncrementTick+0x170>)
 8005eaa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005eac:	697b      	ldr	r3, [r7, #20]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000794 	.word	0x20000794
 8005ebc:	20000774 	.word	0x20000774
 8005ec0:	2000072c 	.word	0x2000072c
 8005ec4:	20000730 	.word	0x20000730
 8005ec8:	20000788 	.word	0x20000788
 8005ecc:	20000790 	.word	0x20000790
 8005ed0:	20000778 	.word	0x20000778
 8005ed4:	200002a4 	.word	0x200002a4
 8005ed8:	200002a0 	.word	0x200002a0
 8005edc:	20000784 	.word	0x20000784
 8005ee0:	20000780 	.word	0x20000780

08005ee4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005eea:	4b2a      	ldr	r3, [pc, #168]	; (8005f94 <vTaskSwitchContext+0xb0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ef2:	4b29      	ldr	r3, [pc, #164]	; (8005f98 <vTaskSwitchContext+0xb4>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ef8:	e046      	b.n	8005f88 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005efa:	4b27      	ldr	r3, [pc, #156]	; (8005f98 <vTaskSwitchContext+0xb4>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f00:	4b26      	ldr	r3, [pc, #152]	; (8005f9c <vTaskSwitchContext+0xb8>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	e010      	b.n	8005f2a <vTaskSwitchContext+0x46>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10a      	bne.n	8005f24 <vTaskSwitchContext+0x40>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	607b      	str	r3, [r7, #4]
}
 8005f20:	bf00      	nop
 8005f22:	e7fe      	b.n	8005f22 <vTaskSwitchContext+0x3e>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	491d      	ldr	r1, [pc, #116]	; (8005fa0 <vTaskSwitchContext+0xbc>)
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0e4      	beq.n	8005f08 <vTaskSwitchContext+0x24>
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4613      	mov	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4a15      	ldr	r2, [pc, #84]	; (8005fa0 <vTaskSwitchContext+0xbc>)
 8005f4a:	4413      	add	r3, r2
 8005f4c:	60bb      	str	r3, [r7, #8]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	605a      	str	r2, [r3, #4]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	3308      	adds	r3, #8
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d104      	bne.n	8005f6e <vTaskSwitchContext+0x8a>
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	605a      	str	r2, [r3, #4]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	4a0b      	ldr	r2, [pc, #44]	; (8005fa4 <vTaskSwitchContext+0xc0>)
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	4a08      	ldr	r2, [pc, #32]	; (8005f9c <vTaskSwitchContext+0xb8>)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f7e:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <vTaskSwitchContext+0xc0>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3354      	adds	r3, #84	; 0x54
 8005f84:	4a08      	ldr	r2, [pc, #32]	; (8005fa8 <vTaskSwitchContext+0xc4>)
 8005f86:	6013      	str	r3, [r2, #0]
}
 8005f88:	bf00      	nop
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	20000794 	.word	0x20000794
 8005f98:	20000784 	.word	0x20000784
 8005f9c:	20000778 	.word	0x20000778
 8005fa0:	200002a4 	.word	0x200002a4
 8005fa4:	200002a0 	.word	0x200002a0
 8005fa8:	200000ac 	.word	0x200000ac

08005fac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	607b      	str	r3, [r7, #4]
 8005fb6:	e00c      	b.n	8005fd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4a12      	ldr	r2, [pc, #72]	; (800600c <prvInitialiseTaskLists+0x60>)
 8005fc4:	4413      	add	r3, r2
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff fb85 	bl	80056d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	607b      	str	r3, [r7, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b37      	cmp	r3, #55	; 0x37
 8005fd6:	d9ef      	bls.n	8005fb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fd8:	480d      	ldr	r0, [pc, #52]	; (8006010 <prvInitialiseTaskLists+0x64>)
 8005fda:	f7ff fb7c 	bl	80056d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fde:	480d      	ldr	r0, [pc, #52]	; (8006014 <prvInitialiseTaskLists+0x68>)
 8005fe0:	f7ff fb79 	bl	80056d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fe4:	480c      	ldr	r0, [pc, #48]	; (8006018 <prvInitialiseTaskLists+0x6c>)
 8005fe6:	f7ff fb76 	bl	80056d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fea:	480c      	ldr	r0, [pc, #48]	; (800601c <prvInitialiseTaskLists+0x70>)
 8005fec:	f7ff fb73 	bl	80056d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ff0:	480b      	ldr	r0, [pc, #44]	; (8006020 <prvInitialiseTaskLists+0x74>)
 8005ff2:	f7ff fb70 	bl	80056d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ff6:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <prvInitialiseTaskLists+0x78>)
 8005ff8:	4a05      	ldr	r2, [pc, #20]	; (8006010 <prvInitialiseTaskLists+0x64>)
 8005ffa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ffc:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <prvInitialiseTaskLists+0x7c>)
 8005ffe:	4a05      	ldr	r2, [pc, #20]	; (8006014 <prvInitialiseTaskLists+0x68>)
 8006000:	601a      	str	r2, [r3, #0]
}
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	200002a4 	.word	0x200002a4
 8006010:	20000704 	.word	0x20000704
 8006014:	20000718 	.word	0x20000718
 8006018:	20000734 	.word	0x20000734
 800601c:	20000748 	.word	0x20000748
 8006020:	2000075c 	.word	0x2000075c
 8006024:	2000072c 	.word	0x2000072c
 8006028:	20000730 	.word	0x20000730

0800602c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006032:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <prvResetNextTaskUnblockTime+0x38>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d104      	bne.n	8006046 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800603c:	4b0a      	ldr	r3, [pc, #40]	; (8006068 <prvResetNextTaskUnblockTime+0x3c>)
 800603e:	f04f 32ff 	mov.w	r2, #4294967295
 8006042:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006044:	e008      	b.n	8006058 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006046:	4b07      	ldr	r3, [pc, #28]	; (8006064 <prvResetNextTaskUnblockTime+0x38>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	4a04      	ldr	r2, [pc, #16]	; (8006068 <prvResetNextTaskUnblockTime+0x3c>)
 8006056:	6013      	str	r3, [r2, #0]
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	2000072c 	.word	0x2000072c
 8006068:	20000790 	.word	0x20000790

0800606c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006072:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <xTaskGetSchedulerState+0x34>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d102      	bne.n	8006080 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800607a:	2301      	movs	r3, #1
 800607c:	607b      	str	r3, [r7, #4]
 800607e:	e008      	b.n	8006092 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006080:	4b08      	ldr	r3, [pc, #32]	; (80060a4 <xTaskGetSchedulerState+0x38>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d102      	bne.n	800608e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006088:	2302      	movs	r3, #2
 800608a:	607b      	str	r3, [r7, #4]
 800608c:	e001      	b.n	8006092 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800608e:	2300      	movs	r3, #0
 8006090:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006092:	687b      	ldr	r3, [r7, #4]
	}
 8006094:	4618      	mov	r0, r3
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	2000077c 	.word	0x2000077c
 80060a4:	20000794 	.word	0x20000794

080060a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060b2:	4b21      	ldr	r3, [pc, #132]	; (8006138 <prvAddCurrentTaskToDelayedList+0x90>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060b8:	4b20      	ldr	r3, [pc, #128]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3304      	adds	r3, #4
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff fb93 	bl	80057ea <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ca:	d10a      	bne.n	80060e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d007      	beq.n	80060e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060d2:	4b1a      	ldr	r3, [pc, #104]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3304      	adds	r3, #4
 80060d8:	4619      	mov	r1, r3
 80060da:	4819      	ldr	r0, [pc, #100]	; (8006140 <prvAddCurrentTaskToDelayedList+0x98>)
 80060dc:	f7ff fb28 	bl	8005730 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060e0:	e026      	b.n	8006130 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4413      	add	r3, r2
 80060e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060ea:	4b14      	ldr	r3, [pc, #80]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d209      	bcs.n	800610e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060fa:	4b12      	ldr	r3, [pc, #72]	; (8006144 <prvAddCurrentTaskToDelayedList+0x9c>)
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4b0f      	ldr	r3, [pc, #60]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3304      	adds	r3, #4
 8006104:	4619      	mov	r1, r3
 8006106:	4610      	mov	r0, r2
 8006108:	f7ff fb36 	bl	8005778 <vListInsert>
}
 800610c:	e010      	b.n	8006130 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800610e:	4b0e      	ldr	r3, [pc, #56]	; (8006148 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	4b0a      	ldr	r3, [pc, #40]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3304      	adds	r3, #4
 8006118:	4619      	mov	r1, r3
 800611a:	4610      	mov	r0, r2
 800611c:	f7ff fb2c 	bl	8005778 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006120:	4b0a      	ldr	r3, [pc, #40]	; (800614c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	429a      	cmp	r2, r3
 8006128:	d202      	bcs.n	8006130 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800612a:	4a08      	ldr	r2, [pc, #32]	; (800614c <prvAddCurrentTaskToDelayedList+0xa4>)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	6013      	str	r3, [r2, #0]
}
 8006130:	bf00      	nop
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	20000774 	.word	0x20000774
 800613c:	200002a0 	.word	0x200002a0
 8006140:	2000075c 	.word	0x2000075c
 8006144:	20000730 	.word	0x20000730
 8006148:	2000072c 	.word	0x2000072c
 800614c:	20000790 	.word	0x20000790

08006150 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3b04      	subs	r3, #4
 8006160:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	3b04      	subs	r3, #4
 800616e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f023 0201 	bic.w	r2, r3, #1
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3b04      	subs	r3, #4
 800617e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006180:	4a0c      	ldr	r2, [pc, #48]	; (80061b4 <pxPortInitialiseStack+0x64>)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3b14      	subs	r3, #20
 800618a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3b04      	subs	r3, #4
 8006196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f06f 0202 	mvn.w	r2, #2
 800619e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3b20      	subs	r3, #32
 80061a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061a6:	68fb      	ldr	r3, [r7, #12]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	080061b9 	.word	0x080061b9

080061b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061c2:	4b12      	ldr	r3, [pc, #72]	; (800620c <prvTaskExitError+0x54>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ca:	d00a      	beq.n	80061e2 <prvTaskExitError+0x2a>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	60fb      	str	r3, [r7, #12]
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <prvTaskExitError+0x28>
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	60bb      	str	r3, [r7, #8]
}
 80061f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061f6:	bf00      	nop
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d0fc      	beq.n	80061f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061fe:	bf00      	nop
 8006200:	bf00      	nop
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	2000000c 	.word	0x2000000c

08006210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006210:	4b07      	ldr	r3, [pc, #28]	; (8006230 <pxCurrentTCBConst2>)
 8006212:	6819      	ldr	r1, [r3, #0]
 8006214:	6808      	ldr	r0, [r1, #0]
 8006216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621a:	f380 8809 	msr	PSP, r0
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f04f 0000 	mov.w	r0, #0
 8006226:	f380 8811 	msr	BASEPRI, r0
 800622a:	4770      	bx	lr
 800622c:	f3af 8000 	nop.w

08006230 <pxCurrentTCBConst2>:
 8006230:	200002a0 	.word	0x200002a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop

08006238 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	607b      	str	r3, [r7, #4]
}
 8006250:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006252:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <vPortEnterCritical+0x58>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3301      	adds	r3, #1
 8006258:	4a0d      	ldr	r2, [pc, #52]	; (8006290 <vPortEnterCritical+0x58>)
 800625a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800625c:	4b0c      	ldr	r3, [pc, #48]	; (8006290 <vPortEnterCritical+0x58>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d10f      	bne.n	8006284 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006264:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <vPortEnterCritical+0x5c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00a      	beq.n	8006284 <vPortEnterCritical+0x4c>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	603b      	str	r3, [r7, #0]
}
 8006280:	bf00      	nop
 8006282:	e7fe      	b.n	8006282 <vPortEnterCritical+0x4a>
	}
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	2000000c 	.word	0x2000000c
 8006294:	e000ed04 	.word	0xe000ed04

08006298 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800629e:	4b12      	ldr	r3, [pc, #72]	; (80062e8 <vPortExitCritical+0x50>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10a      	bne.n	80062bc <vPortExitCritical+0x24>
	__asm volatile
 80062a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	607b      	str	r3, [r7, #4]
}
 80062b8:	bf00      	nop
 80062ba:	e7fe      	b.n	80062ba <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80062bc:	4b0a      	ldr	r3, [pc, #40]	; (80062e8 <vPortExitCritical+0x50>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3b01      	subs	r3, #1
 80062c2:	4a09      	ldr	r2, [pc, #36]	; (80062e8 <vPortExitCritical+0x50>)
 80062c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062c6:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <vPortExitCritical+0x50>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d105      	bne.n	80062da <vPortExitCritical+0x42>
 80062ce:	2300      	movs	r3, #0
 80062d0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80062d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	2000000c 	.word	0x2000000c
 80062ec:	00000000 	.word	0x00000000

080062f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062f0:	f3ef 8009 	mrs	r0, PSP
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	4b15      	ldr	r3, [pc, #84]	; (8006350 <pxCurrentTCBConst>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	f01e 0f10 	tst.w	lr, #16
 8006300:	bf08      	it	eq
 8006302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630a:	6010      	str	r0, [r2, #0]
 800630c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006310:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006314:	f380 8811 	msr	BASEPRI, r0
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f7ff fde0 	bl	8005ee4 <vTaskSwitchContext>
 8006324:	f04f 0000 	mov.w	r0, #0
 8006328:	f380 8811 	msr	BASEPRI, r0
 800632c:	bc09      	pop	{r0, r3}
 800632e:	6819      	ldr	r1, [r3, #0]
 8006330:	6808      	ldr	r0, [r1, #0]
 8006332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006336:	f01e 0f10 	tst.w	lr, #16
 800633a:	bf08      	it	eq
 800633c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006340:	f380 8809 	msr	PSP, r0
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	f3af 8000 	nop.w

08006350 <pxCurrentTCBConst>:
 8006350:	200002a0 	.word	0x200002a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop

08006358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	607b      	str	r3, [r7, #4]
}
 8006370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006372:	f7ff fcfd 	bl	8005d70 <xTaskIncrementTick>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800637c:	4b06      	ldr	r3, [pc, #24]	; (8006398 <xPortSysTickHandler+0x40>)
 800637e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	2300      	movs	r3, #0
 8006386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	f383 8811 	msr	BASEPRI, r3
}
 800638e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006390:	bf00      	nop
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08a      	sub	sp, #40	; 0x28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063a4:	2300      	movs	r3, #0
 80063a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063a8:	f7ff fc36 	bl	8005c18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063ac:	4b5b      	ldr	r3, [pc, #364]	; (800651c <pvPortMalloc+0x180>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063b4:	f000 f920 	bl	80065f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063b8:	4b59      	ldr	r3, [pc, #356]	; (8006520 <pvPortMalloc+0x184>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4013      	ands	r3, r2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f040 8093 	bne.w	80064ec <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01d      	beq.n	8006408 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80063cc:	2208      	movs	r2, #8
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4413      	add	r3, r2
 80063d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d014      	beq.n	8006408 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f023 0307 	bic.w	r3, r3, #7
 80063e4:	3308      	adds	r3, #8
 80063e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f003 0307 	and.w	r3, r3, #7
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <pvPortMalloc+0x6c>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	617b      	str	r3, [r7, #20]
}
 8006404:	bf00      	nop
 8006406:	e7fe      	b.n	8006406 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d06e      	beq.n	80064ec <pvPortMalloc+0x150>
 800640e:	4b45      	ldr	r3, [pc, #276]	; (8006524 <pvPortMalloc+0x188>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	429a      	cmp	r2, r3
 8006416:	d869      	bhi.n	80064ec <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006418:	4b43      	ldr	r3, [pc, #268]	; (8006528 <pvPortMalloc+0x18c>)
 800641a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800641c:	4b42      	ldr	r3, [pc, #264]	; (8006528 <pvPortMalloc+0x18c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006422:	e004      	b.n	800642e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	429a      	cmp	r2, r3
 8006436:	d903      	bls.n	8006440 <pvPortMalloc+0xa4>
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1f1      	bne.n	8006424 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006440:	4b36      	ldr	r3, [pc, #216]	; (800651c <pvPortMalloc+0x180>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006446:	429a      	cmp	r2, r3
 8006448:	d050      	beq.n	80064ec <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2208      	movs	r2, #8
 8006450:	4413      	add	r3, r2
 8006452:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	1ad2      	subs	r2, r2, r3
 8006464:	2308      	movs	r3, #8
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	429a      	cmp	r2, r3
 800646a:	d91f      	bls.n	80064ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800646c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4413      	add	r3, r2
 8006472:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	f003 0307 	and.w	r3, r3, #7
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <pvPortMalloc+0xf8>
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	613b      	str	r3, [r7, #16]
}
 8006490:	bf00      	nop
 8006492:	e7fe      	b.n	8006492 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	1ad2      	subs	r2, r2, r3
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064a6:	69b8      	ldr	r0, [r7, #24]
 80064a8:	f000 f908 	bl	80066bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064ac:	4b1d      	ldr	r3, [pc, #116]	; (8006524 <pvPortMalloc+0x188>)
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	4a1b      	ldr	r2, [pc, #108]	; (8006524 <pvPortMalloc+0x188>)
 80064b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064ba:	4b1a      	ldr	r3, [pc, #104]	; (8006524 <pvPortMalloc+0x188>)
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	4b1b      	ldr	r3, [pc, #108]	; (800652c <pvPortMalloc+0x190>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d203      	bcs.n	80064ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064c6:	4b17      	ldr	r3, [pc, #92]	; (8006524 <pvPortMalloc+0x188>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a18      	ldr	r2, [pc, #96]	; (800652c <pvPortMalloc+0x190>)
 80064cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	4b13      	ldr	r3, [pc, #76]	; (8006520 <pvPortMalloc+0x184>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	431a      	orrs	r2, r3
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	2200      	movs	r2, #0
 80064e0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80064e2:	4b13      	ldr	r3, [pc, #76]	; (8006530 <pvPortMalloc+0x194>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3301      	adds	r3, #1
 80064e8:	4a11      	ldr	r2, [pc, #68]	; (8006530 <pvPortMalloc+0x194>)
 80064ea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064ec:	f7ff fba2 	bl	8005c34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00a      	beq.n	8006510 <pvPortMalloc+0x174>
	__asm volatile
 80064fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	60fb      	str	r3, [r7, #12]
}
 800650c:	bf00      	nop
 800650e:	e7fe      	b.n	800650e <pvPortMalloc+0x172>
	return pvReturn;
 8006510:	69fb      	ldr	r3, [r7, #28]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3728      	adds	r7, #40	; 0x28
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	200043a0 	.word	0x200043a0
 8006520:	200043b4 	.word	0x200043b4
 8006524:	200043a4 	.word	0x200043a4
 8006528:	20004398 	.word	0x20004398
 800652c:	200043a8 	.word	0x200043a8
 8006530:	200043ac 	.word	0x200043ac

08006534 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d04d      	beq.n	80065e2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006546:	2308      	movs	r3, #8
 8006548:	425b      	negs	r3, r3
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	4413      	add	r3, r2
 800654e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	4b24      	ldr	r3, [pc, #144]	; (80065ec <vPortFree+0xb8>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4013      	ands	r3, r2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10a      	bne.n	8006578 <vPortFree+0x44>
	__asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	60fb      	str	r3, [r7, #12]
}
 8006574:	bf00      	nop
 8006576:	e7fe      	b.n	8006576 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <vPortFree+0x62>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	60bb      	str	r3, [r7, #8]
}
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	4b14      	ldr	r3, [pc, #80]	; (80065ec <vPortFree+0xb8>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4013      	ands	r3, r2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d01e      	beq.n	80065e2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d11a      	bne.n	80065e2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	4b0e      	ldr	r3, [pc, #56]	; (80065ec <vPortFree+0xb8>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	43db      	mvns	r3, r3
 80065b6:	401a      	ands	r2, r3
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065bc:	f7ff fb2c 	bl	8005c18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	4b0a      	ldr	r3, [pc, #40]	; (80065f0 <vPortFree+0xbc>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4413      	add	r3, r2
 80065ca:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <vPortFree+0xbc>)
 80065cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065ce:	6938      	ldr	r0, [r7, #16]
 80065d0:	f000 f874 	bl	80066bc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80065d4:	4b07      	ldr	r3, [pc, #28]	; (80065f4 <vPortFree+0xc0>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3301      	adds	r3, #1
 80065da:	4a06      	ldr	r2, [pc, #24]	; (80065f4 <vPortFree+0xc0>)
 80065dc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80065de:	f7ff fb29 	bl	8005c34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065e2:	bf00      	nop
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	200043b4 	.word	0x200043b4
 80065f0:	200043a4 	.word	0x200043a4
 80065f4:	200043b0 	.word	0x200043b0

080065f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065fe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006602:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006604:	4b27      	ldr	r3, [pc, #156]	; (80066a4 <prvHeapInit+0xac>)
 8006606:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f003 0307 	and.w	r3, r3, #7
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00c      	beq.n	800662c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3307      	adds	r3, #7
 8006616:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0307 	bic.w	r3, r3, #7
 800661e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	4a1f      	ldr	r2, [pc, #124]	; (80066a4 <prvHeapInit+0xac>)
 8006628:	4413      	add	r3, r2
 800662a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006630:	4a1d      	ldr	r2, [pc, #116]	; (80066a8 <prvHeapInit+0xb0>)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006636:	4b1c      	ldr	r3, [pc, #112]	; (80066a8 <prvHeapInit+0xb0>)
 8006638:	2200      	movs	r2, #0
 800663a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	4413      	add	r3, r2
 8006642:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006644:	2208      	movs	r2, #8
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	1a9b      	subs	r3, r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0307 	bic.w	r3, r3, #7
 8006652:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4a15      	ldr	r2, [pc, #84]	; (80066ac <prvHeapInit+0xb4>)
 8006658:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800665a:	4b14      	ldr	r3, [pc, #80]	; (80066ac <prvHeapInit+0xb4>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2200      	movs	r2, #0
 8006660:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006662:	4b12      	ldr	r3, [pc, #72]	; (80066ac <prvHeapInit+0xb4>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	1ad2      	subs	r2, r2, r3
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006678:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <prvHeapInit+0xb4>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	4a0a      	ldr	r2, [pc, #40]	; (80066b0 <prvHeapInit+0xb8>)
 8006686:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	4a09      	ldr	r2, [pc, #36]	; (80066b4 <prvHeapInit+0xbc>)
 800668e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006690:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <prvHeapInit+0xc0>)
 8006692:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006696:	601a      	str	r2, [r3, #0]
}
 8006698:	bf00      	nop
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	20000798 	.word	0x20000798
 80066a8:	20004398 	.word	0x20004398
 80066ac:	200043a0 	.word	0x200043a0
 80066b0:	200043a8 	.word	0x200043a8
 80066b4:	200043a4 	.word	0x200043a4
 80066b8:	200043b4 	.word	0x200043b4

080066bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066c4:	4b28      	ldr	r3, [pc, #160]	; (8006768 <prvInsertBlockIntoFreeList+0xac>)
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	e002      	b.n	80066d0 <prvInsertBlockIntoFreeList+0x14>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d8f7      	bhi.n	80066ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	4413      	add	r3, r2
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d108      	bne.n	80066fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	441a      	add	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	441a      	add	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d118      	bne.n	8006744 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	4b15      	ldr	r3, [pc, #84]	; (800676c <prvInsertBlockIntoFreeList+0xb0>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d00d      	beq.n	800673a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	441a      	add	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	601a      	str	r2, [r3, #0]
 8006738:	e008      	b.n	800674c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800673a:	4b0c      	ldr	r3, [pc, #48]	; (800676c <prvInsertBlockIntoFreeList+0xb0>)
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	601a      	str	r2, [r3, #0]
 8006742:	e003      	b.n	800674c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	429a      	cmp	r2, r3
 8006752:	d002      	beq.n	800675a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800675a:	bf00      	nop
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	20004398 	.word	0x20004398
 800676c:	200043a0 	.word	0x200043a0

08006770 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	while (__HAL_TIM_GET_COUNTER (&htim3) < time);	 //
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
	if(htim->Instance ==TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a4c      	ldr	r2, [pc, #304]	; (80068b0 <HAL_TIM_IC_CaptureCallback+0x140>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d105      	bne.n	800678e <HAL_TIM_IC_CaptureCallback+0x1e>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	7f1b      	ldrb	r3, [r3, #28]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d101      	bne.n	800678e <HAL_TIM_IC_CaptureCallback+0x1e>
		int a = 1;
 800678a:	2301      	movs	r3, #1
 800678c:	60fb      	str	r3, [r7, #12]
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 |
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	7f1b      	ldrb	r3, [r3, #28]
 8006792:	2b01      	cmp	r3, #1
 8006794:	bf0c      	ite	eq
 8006796:	2301      	moveq	r3, #1
 8006798:	2300      	movne	r3, #0
 800679a:	b2da      	uxtb	r2, r3
		htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 |
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	7f1b      	ldrb	r3, [r3, #28]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 |
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	bf0c      	ite	eq
 80067a4:	2301      	moveq	r3, #1
 80067a6:	2300      	movne	r3, #0
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	4313      	orrs	r3, r2
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	461a      	mov	r2, r3
		htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	7f1b      	ldrb	r3, [r3, #28]
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	bf0c      	ite	eq
 80067b8:	2301      	moveq	r3, #1
 80067ba:	2300      	movne	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
		htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 |
 80067be:	4313      	orrs	r3, r2
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 |
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d06a      	beq.n	800689a <HAL_TIM_IC_CaptureCallback+0x12a>
	{
		if (capturedOne==0) // check if first value is captured
 80067c4:	4b3b      	ldr	r3, [pc, #236]	; (80068b4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d11a      	bne.n	8006802 <HAL_TIM_IC_CaptureCallback+0x92>
		{
			firstValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);    //read the value
 80067cc:	2104      	movs	r1, #4
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7fd fa68 	bl	8003ca4 <HAL_TIM_ReadCapturedValue>
 80067d4:	4603      	mov	r3, r0
 80067d6:	4a38      	ldr	r2, [pc, #224]	; (80068b8 <HAL_TIM_IC_CaptureCallback+0x148>)
 80067d8:	6013      	str	r3, [r2, #0]
			capturedOne = 1;  									// change the value of the variable
 80067da:	4b36      	ldr	r3, [pc, #216]	; (80068b4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80067dc:	2201      	movs	r2, #1
 80067de:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);  		//if the value is captured change the polarity to falling edge
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6a1a      	ldr	r2, [r3, #32]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067ee:	621a      	str	r2, [r3, #32]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6a1a      	ldr	r2, [r3, #32]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0220 	orr.w	r2, r2, #32
 80067fe:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);  //change the polarity back to rising edge
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);											//disable the TIM1 interrupt
		}
	}
}
 8006800:	e04b      	b.n	800689a <HAL_TIM_IC_CaptureCallback+0x12a>
		else if (capturedOne==1)   // if the first value is captured
 8006802:	4b2c      	ldr	r3, [pc, #176]	; (80068b4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d147      	bne.n	800689a <HAL_TIM_IC_CaptureCallback+0x12a>
			secondValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 800680a:	2104      	movs	r1, #4
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7fd fa49 	bl	8003ca4 <HAL_TIM_ReadCapturedValue>
 8006812:	4603      	mov	r3, r0
 8006814:	4a29      	ldr	r2, [pc, #164]	; (80068bc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8006816:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  							// reset the counter
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2200      	movs	r2, #0
 800681e:	625a      	str	r2, [r3, #36]	; 0x24
			sub = secondValue-firstValue;				//subtraction of the two values
 8006820:	4b26      	ldr	r3, [pc, #152]	; (80068bc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	4b24      	ldr	r3, [pc, #144]	; (80068b8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	4a25      	ldr	r2, [pc, #148]	; (80068c0 <HAL_TIM_IC_CaptureCallback+0x150>)
 800682c:	6013      	str	r3, [r2, #0]
			distance = sub * .034/2;			//time in us * speed of sound in air in cm / 2 (the sound needs to go back to the sensor)
 800682e:	4b24      	ldr	r3, [pc, #144]	; (80068c0 <HAL_TIM_IC_CaptureCallback+0x150>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4618      	mov	r0, r3
 8006834:	f7f9 fe76 	bl	8000524 <__aeabi_ui2d>
 8006838:	a31b      	add	r3, pc, #108	; (adr r3, 80068a8 <HAL_TIM_IC_CaptureCallback+0x138>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f7f9 feeb 	bl	8000618 <__aeabi_dmul>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4610      	mov	r0, r2
 8006848:	4619      	mov	r1, r3
 800684a:	f04f 0200 	mov.w	r2, #0
 800684e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006852:	f7fa f80b 	bl	800086c <__aeabi_ddiv>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4610      	mov	r0, r2
 800685c:	4619      	mov	r1, r3
 800685e:	f7fa f9b3 	bl	8000bc8 <__aeabi_d2f>
 8006862:	4603      	mov	r3, r0
 8006864:	4a17      	ldr	r2, [pc, #92]	; (80068c4 <HAL_TIM_IC_CaptureCallback+0x154>)
 8006866:	6013      	str	r3, [r2, #0]
			capturedOne = 0; 					// set the capture value to 0
 8006868:	4b12      	ldr	r3, [pc, #72]	; (80068b4 <HAL_TIM_IC_CaptureCallback+0x144>)
 800686a:	2200      	movs	r2, #0
 800686c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);  //change the polarity back to rising edge
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6a1a      	ldr	r2, [r3, #32]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800687c:	621a      	str	r2, [r3, #32]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6a12      	ldr	r2, [r2, #32]
 8006888:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);											//disable the TIM1 interrupt
 800688a:	4b0f      	ldr	r3, [pc, #60]	; (80068c8 <HAL_TIM_IC_CaptureCallback+0x158>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	4b0d      	ldr	r3, [pc, #52]	; (80068c8 <HAL_TIM_IC_CaptureCallback+0x158>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0204 	bic.w	r2, r2, #4
 8006898:	60da      	str	r2, [r3, #12]
}
 800689a:	bf00      	nop
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	f3af 8000 	nop.w
 80068a8:	b020c49c 	.word	0xb020c49c
 80068ac:	3fa16872 	.word	0x3fa16872
 80068b0:	40000400 	.word	0x40000400
 80068b4:	200043c4 	.word	0x200043c4
 80068b8:	200043b8 	.word	0x200043b8
 80068bc:	200043bc 	.word	0x200043bc
 80068c0:	200043c0 	.word	0x200043c0
 80068c4:	200043c8 	.word	0x200043c8
 80068c8:	200044f0 	.word	0x200044f0

080068cc <HAL_UART_RxCpltCallback>:
		HAL_UART_Transmit(&huart5, (uint8_t *)data_arr, sizeof(data_arr), 100);
		HAL_Delay(1500);
	}
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART5)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a08      	ldr	r2, [pc, #32]	; (80068fc <HAL_UART_RxCpltCallback+0x30>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d10a      	bne.n	80068f4 <HAL_UART_RxCpltCallback+0x28>
	{
		HAL_UART_Transmit(&huart3, pc_res_packet, sizeof(pc_res_packet), 100);
 80068de:	2364      	movs	r3, #100	; 0x64
 80068e0:	2205      	movs	r2, #5
 80068e2:	4907      	ldr	r1, [pc, #28]	; (8006900 <HAL_UART_RxCpltCallback+0x34>)
 80068e4:	4807      	ldr	r0, [pc, #28]	; (8006904 <HAL_UART_RxCpltCallback+0x38>)
 80068e6:	f7fd fdf8 	bl	80044da <HAL_UART_Transmit>

	    HAL_UART_Receive_IT(&huart5, pc_res_packet, sizeof(pc_res_packet));
 80068ea:	2205      	movs	r2, #5
 80068ec:	4904      	ldr	r1, [pc, #16]	; (8006900 <HAL_UART_RxCpltCallback+0x34>)
 80068ee:	4806      	ldr	r0, [pc, #24]	; (8006908 <HAL_UART_RxCpltCallback+0x3c>)
 80068f0:	f7fd ff27 	bl	8004742 <HAL_UART_Receive_IT>


	}
}
 80068f4:	bf00      	nop
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	40005000 	.word	0x40005000
 8006900:	200043cc 	.word	0x200043cc
 8006904:	200043e4 	.word	0x200043e4
 8006908:	2000453c 	.word	0x2000453c

0800690c <TFminiS_setting>:
	//!!!!
	return (uint8_t)TFminiS_info[ID][_STOCK_NUM];
}

void TFminiS_setting(void)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	af00      	add	r7, sp, #0
	TFminiS_uart_setting(SET_OUTPUT_MM);
 8006910:	2005      	movs	r0, #5
 8006912:	f000 f803 	bl	800691c <TFminiS_uart_setting>
//	uint8_t sensor_id = 0x01;
//	TFminiS_I2C(sensor_id, SET_12C_ADDR);
//
//	sensor_id = LD01;
//	getDistance(sensor_id);
}
 8006916:	bf00      	nop
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <TFminiS_uart_setting>:

void TFminiS_uart_setting(uint8_t cmd)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	4603      	mov	r3, r0
 8006924:	71fb      	strb	r3, [r7, #7]
	 // UART
	if (cmd == SET_I2C || cmd == SET_12C_ADDR){
 8006926:	79fb      	ldrb	r3, [r7, #7]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d002      	beq.n	8006932 <TFminiS_uart_setting+0x16>
 800692c:	79fb      	ldrb	r3, [r7, #7]
 800692e:	2b08      	cmp	r3, #8
 8006930:	d124      	bne.n	800697c <TFminiS_uart_setting+0x60>
		for(int i=0; i<sizeof(TFminiS_req_packet_list[cmd]); i++){
 8006932:	2300      	movs	r3, #0
 8006934:	617b      	str	r3, [r7, #20]
 8006936:	e01e      	b.n	8006976 <TFminiS_uart_setting+0x5a>
			TFminiS_req_packet_list[cmd][sizeof(TFminiS_req_packet_list[cmd])-1] += TFminiS_req_packet_list[cmd][i];
 8006938:	79fa      	ldrb	r2, [r7, #7]
 800693a:	492c      	ldr	r1, [pc, #176]	; (80069ec <TFminiS_uart_setting+0xd0>)
 800693c:	4613      	mov	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	440b      	add	r3, r1
 8006944:	3304      	adds	r3, #4
 8006946:	7819      	ldrb	r1, [r3, #0]
 8006948:	79fa      	ldrb	r2, [r7, #7]
 800694a:	4828      	ldr	r0, [pc, #160]	; (80069ec <TFminiS_uart_setting+0xd0>)
 800694c:	4613      	mov	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	18c2      	adds	r2, r0, r3
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	4413      	add	r3, r2
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	79fa      	ldrb	r2, [r7, #7]
 800695c:	440b      	add	r3, r1
 800695e:	b2d8      	uxtb	r0, r3
 8006960:	4922      	ldr	r1, [pc, #136]	; (80069ec <TFminiS_uart_setting+0xd0>)
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	440b      	add	r3, r1
 800696a:	3304      	adds	r3, #4
 800696c:	4602      	mov	r2, r0
 800696e:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<sizeof(TFminiS_req_packet_list[cmd]); i++){
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	3301      	adds	r3, #1
 8006974:	617b      	str	r3, [r7, #20]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b04      	cmp	r3, #4
 800697a:	d9dd      	bls.n	8006938 <TFminiS_uart_setting+0x1c>
		}
	}
	HAL_UART_Transmit(&huart3, (uint8_t *)TFminiS_req_packet_list[cmd], sizeof(TFminiS_req_packet_list[cmd]), 100);
 800697c:	79fa      	ldrb	r2, [r7, #7]
 800697e:	4613      	mov	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	4a19      	ldr	r2, [pc, #100]	; (80069ec <TFminiS_uart_setting+0xd0>)
 8006986:	1899      	adds	r1, r3, r2
 8006988:	2364      	movs	r3, #100	; 0x64
 800698a:	2205      	movs	r2, #5
 800698c:	4818      	ldr	r0, [pc, #96]	; (80069f0 <TFminiS_uart_setting+0xd4>)
 800698e:	f7fd fda4 	bl	80044da <HAL_UART_Transmit>

	// request packet
	HAL_UART_Transmit(&huart2, (uint8_t *)TFminiS_req_packet_list[cmd], sizeof(TFminiS_req_packet_list[cmd]), 100);
 8006992:	79fa      	ldrb	r2, [r7, #7]
 8006994:	4613      	mov	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	4a14      	ldr	r2, [pc, #80]	; (80069ec <TFminiS_uart_setting+0xd0>)
 800699c:	1899      	adds	r1, r3, r2
 800699e:	2364      	movs	r3, #100	; 0x64
 80069a0:	2205      	movs	r2, #5
 80069a2:	4814      	ldr	r0, [pc, #80]	; (80069f4 <TFminiS_uart_setting+0xd8>)
 80069a4:	f7fd fd99 	bl	80044da <HAL_UART_Transmit>

	for(int i=0; i<20; i++){
 80069a8:	2300      	movs	r3, #0
 80069aa:	613b      	str	r3, [r7, #16]
 80069ac:	e012      	b.n	80069d4 <TFminiS_uart_setting+0xb8>
		uint8_t buf = 0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Receive(&huart2, &buf, sizeof(buf), 10);
 80069b2:	f107 010f 	add.w	r1, r7, #15
 80069b6:	230a      	movs	r3, #10
 80069b8:	2201      	movs	r2, #1
 80069ba:	480e      	ldr	r0, [pc, #56]	; (80069f4 <TFminiS_uart_setting+0xd8>)
 80069bc:	f7fd fe1f 	bl	80045fe <HAL_UART_Receive>
		HAL_UART_Transmit(&huart3, &buf, sizeof(buf), 100);
 80069c0:	f107 010f 	add.w	r1, r7, #15
 80069c4:	2364      	movs	r3, #100	; 0x64
 80069c6:	2201      	movs	r2, #1
 80069c8:	4809      	ldr	r0, [pc, #36]	; (80069f0 <TFminiS_uart_setting+0xd4>)
 80069ca:	f7fd fd86 	bl	80044da <HAL_UART_Transmit>
	for(int i=0; i<20; i++){
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	3301      	adds	r3, #1
 80069d2:	613b      	str	r3, [r7, #16]
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	2b13      	cmp	r3, #19
 80069d8:	dde9      	ble.n	80069ae <TFminiS_uart_setting+0x92>
	}

	HAL_Delay(500);
 80069da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069de:	f7fb fc61 	bl	80022a4 <HAL_Delay>
}
 80069e2:	bf00      	nop
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	20000010 	.word	0x20000010
 80069f0:	200043e4 	.word	0x200043e4
 80069f4:	200046b4 	.word	0x200046b4

080069f8 <runHx711>:
	}
	printf("hx711 initialization finished!\n");
}

void runHx711(uint8_t i)
{
 80069f8:	b590      	push	{r4, r7, lr}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af02      	add	r7, sp, #8
 80069fe:	4603      	mov	r3, r0
 8006a00:	71fb      	strb	r3, [r7, #7]
	hx711_weight_arr[i][CHANNEL_A] = (int)(hx711_weight(&hx711_arr[i][CHANNEL_A], 10));
 8006a02:	79fa      	ldrb	r2, [r7, #7]
 8006a04:	4613      	mov	r3, r2
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	4413      	add	r3, r2
 8006a0a:	011b      	lsls	r3, r3, #4
 8006a0c:	4a51      	ldr	r2, [pc, #324]	; (8006b54 <runHx711+0x15c>)
 8006a0e:	4413      	add	r3, r2
 8006a10:	210a      	movs	r1, #10
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 f985 	bl	8006d22 <hx711_weight>
 8006a18:	eef0 7a40 	vmov.f32	s15, s0
 8006a1c:	79fa      	ldrb	r2, [r7, #7]
 8006a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a22:	ee17 0a90 	vmov	r0, s15
 8006a26:	494c      	ldr	r1, [pc, #304]	; (8006b58 <runHx711+0x160>)
 8006a28:	4613      	mov	r3, r2
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	4413      	add	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	440b      	add	r3, r1
 8006a32:	6018      	str	r0, [r3, #0]
	hx711_weight_arr[i][CHANNEL_B] = (int)(hx711_weight(&hx711_arr[i][CHANNEL_B], 10));
 8006a34:	79fa      	ldrb	r2, [r7, #7]
 8006a36:	4613      	mov	r3, r2
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	4413      	add	r3, r2
 8006a3c:	011b      	lsls	r3, r3, #4
 8006a3e:	3318      	adds	r3, #24
 8006a40:	4a44      	ldr	r2, [pc, #272]	; (8006b54 <runHx711+0x15c>)
 8006a42:	4413      	add	r3, r2
 8006a44:	210a      	movs	r1, #10
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 f96b 	bl	8006d22 <hx711_weight>
 8006a4c:	eef0 7a40 	vmov.f32	s15, s0
 8006a50:	79fa      	ldrb	r2, [r7, #7]
 8006a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a56:	ee17 0a90 	vmov	r0, s15
 8006a5a:	493f      	ldr	r1, [pc, #252]	; (8006b58 <runHx711+0x160>)
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	440b      	add	r3, r1
 8006a66:	3304      	adds	r3, #4
 8006a68:	6018      	str	r0, [r3, #0]

	if(hx711_cali_factor[i][CHANNEL_B] != 0){
 8006a6a:	79fa      	ldrb	r2, [r7, #7]
 8006a6c:	493b      	ldr	r1, [pc, #236]	; (8006b5c <runHx711+0x164>)
 8006a6e:	4613      	mov	r3, r2
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	4413      	add	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	440b      	add	r3, r1
 8006a78:	3304      	adds	r3, #4
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d044      	beq.n	8006b0a <runHx711+0x112>
		hx711_weight_arr[i][SUM] = hx711_weight_arr[i][CHANNEL_A]+hx711_weight_arr[i][CHANNEL_B]+hx711_cali_factor[i][ZERO_VAL];
 8006a80:	79fa      	ldrb	r2, [r7, #7]
 8006a82:	4935      	ldr	r1, [pc, #212]	; (8006b58 <runHx711+0x160>)
 8006a84:	4613      	mov	r3, r2
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	4413      	add	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	440b      	add	r3, r1
 8006a8e:	6819      	ldr	r1, [r3, #0]
 8006a90:	79fa      	ldrb	r2, [r7, #7]
 8006a92:	4831      	ldr	r0, [pc, #196]	; (8006b58 <runHx711+0x160>)
 8006a94:	4613      	mov	r3, r2
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	4413      	add	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4403      	add	r3, r0
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4419      	add	r1, r3
 8006aa4:	79fa      	ldrb	r2, [r7, #7]
 8006aa6:	482d      	ldr	r0, [pc, #180]	; (8006b5c <runHx711+0x164>)
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	4413      	add	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4403      	add	r3, r0
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	79fa      	ldrb	r2, [r7, #7]
 8006ab8:	4419      	add	r1, r3
 8006aba:	4827      	ldr	r0, [pc, #156]	; (8006b58 <runHx711+0x160>)
 8006abc:	4613      	mov	r3, r2
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4403      	add	r3, r0
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	6019      	str	r1, [r3, #0]
		printf("[%d th] A:%d g, B:%d g ====> %d g\n\n", i, hx711_weight_arr[i][CHANNEL_A], hx711_weight_arr[i][CHANNEL_B], hx711_weight_arr[i]);
 8006aca:	79f9      	ldrb	r1, [r7, #7]
 8006acc:	79fa      	ldrb	r2, [r7, #7]
 8006ace:	4822      	ldr	r0, [pc, #136]	; (8006b58 <runHx711+0x160>)
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	005b      	lsls	r3, r3, #1
 8006ad4:	4413      	add	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4403      	add	r3, r0
 8006ada:	6818      	ldr	r0, [r3, #0]
 8006adc:	79fa      	ldrb	r2, [r7, #7]
 8006ade:	4c1e      	ldr	r4, [pc, #120]	; (8006b58 <runHx711+0x160>)
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	4413      	add	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4423      	add	r3, r4
 8006aea:	3304      	adds	r3, #4
 8006aec:	681c      	ldr	r4, [r3, #0]
 8006aee:	79fa      	ldrb	r2, [r7, #7]
 8006af0:	4613      	mov	r3, r2
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	4413      	add	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4a17      	ldr	r2, [pc, #92]	; (8006b58 <runHx711+0x160>)
 8006afa:	4413      	add	r3, r2
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	4623      	mov	r3, r4
 8006b00:	4602      	mov	r2, r0
 8006b02:	4817      	ldr	r0, [pc, #92]	; (8006b60 <runHx711+0x168>)
 8006b04:	f000 ffb2 	bl	8007a6c <iprintf>
 8006b08:	e01d      	b.n	8006b46 <runHx711+0x14e>
	}
	else{
		hx711_weight_arr[i][SUM] = hx711_weight_arr[i][CHANNEL_A];
 8006b0a:	79f9      	ldrb	r1, [r7, #7]
 8006b0c:	79fa      	ldrb	r2, [r7, #7]
 8006b0e:	4812      	ldr	r0, [pc, #72]	; (8006b58 <runHx711+0x160>)
 8006b10:	460b      	mov	r3, r1
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	440b      	add	r3, r1
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4403      	add	r3, r0
 8006b1a:	6819      	ldr	r1, [r3, #0]
 8006b1c:	480e      	ldr	r0, [pc, #56]	; (8006b58 <runHx711+0x160>)
 8006b1e:	4613      	mov	r3, r2
 8006b20:	005b      	lsls	r3, r3, #1
 8006b22:	4413      	add	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4403      	add	r3, r0
 8006b28:	3308      	adds	r3, #8
 8006b2a:	6019      	str	r1, [r3, #0]
		printf("[%d th] A:%d g\n", i, hx711_weight_arr[i][CHANNEL_A]);
 8006b2c:	79f9      	ldrb	r1, [r7, #7]
 8006b2e:	79fa      	ldrb	r2, [r7, #7]
 8006b30:	4809      	ldr	r0, [pc, #36]	; (8006b58 <runHx711+0x160>)
 8006b32:	4613      	mov	r3, r2
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	4413      	add	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4403      	add	r3, r0
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	4808      	ldr	r0, [pc, #32]	; (8006b64 <runHx711+0x16c>)
 8006b42:	f000 ff93 	bl	8007a6c <iprintf>
	}
	HAL_Delay(100);
 8006b46:	2064      	movs	r0, #100	; 0x64
 8006b48:	f7fb fbac 	bl	80022a4 <HAL_Delay>
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd90      	pop	{r4, r7, pc}
 8006b54:	200047b0 	.word	0x200047b0
 8006b58:	20004744 	.word	0x20004744
 8006b5c:	20000040 	.word	0x20000040
 8006b60:	08009898 	.word	0x08009898
 8006b64:	080098bc 	.word	0x080098bc

08006b68 <hx711_delay_us>:
#define hx711_delay(x)    HAL_Delay(x)
#endif

//#############################################################################################
void hx711_delay_us(void)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
  uint32_t delay = _HX711_DELAY_US_LOOP;
 8006b6e:	2304      	movs	r3, #4
 8006b70:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 8006b72:	e002      	b.n	8006b7a <hx711_delay_us+0x12>
  {
    delay--;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1f9      	bne.n	8006b74 <hx711_delay_us+0xc>
//    __nop(); __nop(); __nop(); __nop();
  }
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8006b96:	e002      	b.n	8006b9e <hx711_lock+0x10>
    hx711_delay(1);
 8006b98:	2001      	movs	r0, #1
 8006b9a:	f7fb fb83 	bl	80022a4 <HAL_Delay>
  while (hx711->lock)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	7d1b      	ldrb	r3, [r3, #20]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1f8      	bne.n	8006b98 <hx711_lock+0xa>
  hx711->lock = 1;      
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	751a      	strb	r2, [r3, #20]
}
 8006bac:	bf00      	nop
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	751a      	strb	r2, [r3, #20]
}
 8006bc2:	bf00      	nop
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <hx711_value>:
  hx711_value(hx711);
  hx711_unlock(hx711); 
}
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b086      	sub	sp, #24
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8006bda:	f7fb fb57 	bl	800228c <HAL_GetTick>
 8006bde:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8006be0:	e00b      	b.n	8006bfa <hx711_value+0x2c>
  {
    hx711_delay(1);
 8006be2:	2001      	movs	r0, #1
 8006be4:	f7fb fb5e 	bl	80022a4 <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 8006be8:	f7fb fb50 	bl	800228c <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b96      	cmp	r3, #150	; 0x96
 8006bf4:	d901      	bls.n	8006bfa <hx711_value+0x2c>
      return 0;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	e08f      	b.n	8006d1a <hx711_value+0x14c>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	895b      	ldrh	r3, [r3, #10]
 8006c02:	4619      	mov	r1, r3
 8006c04:	4610      	mov	r0, r2
 8006c06:	f7fb fe91 	bl	800292c <HAL_GPIO_ReadPin>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d0e8      	beq.n	8006be2 <hx711_value+0x14>
  }
  switch(hx711->channel){
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	7d5b      	ldrb	r3, [r3, #21]
 8006c14:	2b41      	cmp	r3, #65	; 0x41
 8006c16:	d034      	beq.n	8006c82 <hx711_value+0xb4>
 8006c18:	2b42      	cmp	r3, #66	; 0x42
 8006c1a:	d133      	bne.n	8006c84 <hx711_value+0xb6>
//	  hx711_delay_us();
//	  if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
//		data ++;
//

	  for(int8_t i=0; i<2 ; i++)
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	74fb      	strb	r3, [r7, #19]
 8006c20:	e02a      	b.n	8006c78 <hx711_value+0xaa>
	  {
	    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6818      	ldr	r0, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	891b      	ldrh	r3, [r3, #8]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	f7fb fe95 	bl	800295c <HAL_GPIO_WritePin>
	    hx711_delay_us();
 8006c32:	f7ff ff99 	bl	8006b68 <hx711_delay_us>
	    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	891b      	ldrh	r3, [r3, #8]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	4619      	mov	r1, r3
 8006c42:	f7fb fe8b 	bl	800295c <HAL_GPIO_WritePin>
	    hx711_delay_us();
 8006c46:	f7ff ff8f 	bl	8006b68 <hx711_delay_us>
	    data = data << 1;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	617b      	str	r3, [r7, #20]
	    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	895b      	ldrh	r3, [r3, #10]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	f7fb fe66 	bl	800292c <HAL_GPIO_ReadPin>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d102      	bne.n	8006c6c <hx711_value+0x9e>
	      data ++;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	617b      	str	r3, [r7, #20]
	  for(int8_t i=0; i<2 ; i++)
 8006c6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	3301      	adds	r3, #1
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	74fb      	strb	r3, [r7, #19]
 8006c78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	ddd0      	ble.n	8006c22 <hx711_value+0x54>
	  }
	  break;
 8006c80:	e000      	b.n	8006c84 <hx711_value+0xb6>
	  break;
 8006c82:	bf00      	nop
  }
  for(int8_t i=0; i<24 ; i++)
 8006c84:	2300      	movs	r3, #0
 8006c86:	74bb      	strb	r3, [r7, #18]
 8006c88:	e02a      	b.n	8006ce0 <hx711_value+0x112>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6818      	ldr	r0, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	891b      	ldrh	r3, [r3, #8]
 8006c92:	2201      	movs	r2, #1
 8006c94:	4619      	mov	r1, r3
 8006c96:	f7fb fe61 	bl	800295c <HAL_GPIO_WritePin>
    hx711_delay_us();
 8006c9a:	f7ff ff65 	bl	8006b68 <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6818      	ldr	r0, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	891b      	ldrh	r3, [r3, #8]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	4619      	mov	r1, r3
 8006caa:	f7fb fe57 	bl	800295c <HAL_GPIO_WritePin>
    hx711_delay_us();
 8006cae:	f7ff ff5b 	bl	8006b68 <hx711_delay_us>
    data = data << 1;    
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	895b      	ldrh	r3, [r3, #10]
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	f7fb fe32 	bl	800292c <HAL_GPIO_ReadPin>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d102      	bne.n	8006cd4 <hx711_value+0x106>
      data ++;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 8006cd4:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	3301      	adds	r3, #1
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	74bb      	strb	r3, [r7, #18]
 8006ce0:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8006ce4:	2b17      	cmp	r3, #23
 8006ce6:	ddd0      	ble.n	8006c8a <hx711_value+0xbc>
  }
  data = data ^ 0x800000; 
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8006cee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6818      	ldr	r0, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	891b      	ldrh	r3, [r3, #8]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	f7fb fe2e 	bl	800295c <HAL_GPIO_WritePin>
  hx711_delay_us();
 8006d00:	f7ff ff32 	bl	8006b68 <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6818      	ldr	r0, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	891b      	ldrh	r3, [r3, #8]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	4619      	mov	r1, r3
 8006d10:	f7fb fe24 	bl	800295c <HAL_GPIO_WritePin>
  hx711_delay_us();
 8006d14:	f7ff ff28 	bl	8006b68 <hx711_delay_us>
  return data;    
 8006d18:	697b      	ldr	r3, [r7, #20]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <hx711_weight>:
  hx711->coef = (load_raw - noload_raw) / scale;  
  hx711_unlock(hx711);
}
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 8006d22:	b5b0      	push	{r4, r5, r7, lr}
 8006d24:	b088      	sub	sp, #32
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7ff ff2d 	bl	8006b8e <hx711_lock>
  int64_t  ave = 0;
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	f04f 0300 	mov.w	r3, #0
 8006d3c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 8006d40:	2300      	movs	r3, #0
 8006d42:	82fb      	strh	r3, [r7, #22]
 8006d44:	e013      	b.n	8006d6e <hx711_weight+0x4c>
  {
    ave += hx711_value(hx711);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7ff ff41 	bl	8006bce <hx711_value>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	461a      	mov	r2, r3
 8006d50:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006d54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006d58:	1884      	adds	r4, r0, r2
 8006d5a:	eb41 0503 	adc.w	r5, r1, r3
 8006d5e:	e9c7 4506 	strd	r4, r5, [r7, #24]
    hx711_delay(5);
 8006d62:	2005      	movs	r0, #5
 8006d64:	f7fb fa9e 	bl	80022a4 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8006d68:	8afb      	ldrh	r3, [r7, #22]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	82fb      	strh	r3, [r7, #22]
 8006d6e:	8afa      	ldrh	r2, [r7, #22]
 8006d70:	887b      	ldrh	r3, [r7, #2]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d3e7      	bcc.n	8006d46 <hx711_weight+0x24>
  }
  int32_t data = (int32_t)(ave / sample);
 8006d76:	887a      	ldrh	r2, [r7, #2]
 8006d78:	f04f 0300 	mov.w	r3, #0
 8006d7c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006d80:	f7f9 ff72 	bl	8000c68 <__aeabi_ldivmod>
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	4613      	mov	r3, r2
 8006d8a:	613b      	str	r3, [r7, #16]
  float answer =  (data - hx711->offset) / hx711->coef;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	ee07 3a90 	vmov	s15, r3
 8006d98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	ed93 7a04 	vldr	s14, [r3, #16]
 8006da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da6:	edc7 7a03 	vstr	s15, [r7, #12]
  hx711_unlock(hx711);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff ff02 	bl	8006bb4 <hx711_unlock>
  return answer;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	ee07 3a90 	vmov	s15, r3
}
 8006db6:	eeb0 0a67 	vmov.f32	s0, s15
 8006dba:	3720      	adds	r7, #32
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bdb0      	pop	{r4, r5, r7, pc}

08006dc0 <__errno>:
 8006dc0:	4b01      	ldr	r3, [pc, #4]	; (8006dc8 <__errno+0x8>)
 8006dc2:	6818      	ldr	r0, [r3, #0]
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	200000ac 	.word	0x200000ac

08006dcc <std>:
 8006dcc:	2300      	movs	r3, #0
 8006dce:	b510      	push	{r4, lr}
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	e9c0 3300 	strd	r3, r3, [r0]
 8006dd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dda:	6083      	str	r3, [r0, #8]
 8006ddc:	8181      	strh	r1, [r0, #12]
 8006dde:	6643      	str	r3, [r0, #100]	; 0x64
 8006de0:	81c2      	strh	r2, [r0, #14]
 8006de2:	6183      	str	r3, [r0, #24]
 8006de4:	4619      	mov	r1, r3
 8006de6:	2208      	movs	r2, #8
 8006de8:	305c      	adds	r0, #92	; 0x5c
 8006dea:	f000 f923 	bl	8007034 <memset>
 8006dee:	4b05      	ldr	r3, [pc, #20]	; (8006e04 <std+0x38>)
 8006df0:	6263      	str	r3, [r4, #36]	; 0x24
 8006df2:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <std+0x3c>)
 8006df4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006df6:	4b05      	ldr	r3, [pc, #20]	; (8006e0c <std+0x40>)
 8006df8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006dfa:	4b05      	ldr	r3, [pc, #20]	; (8006e10 <std+0x44>)
 8006dfc:	6224      	str	r4, [r4, #32]
 8006dfe:	6323      	str	r3, [r4, #48]	; 0x30
 8006e00:	bd10      	pop	{r4, pc}
 8006e02:	bf00      	nop
 8006e04:	08007abd 	.word	0x08007abd
 8006e08:	08007adf 	.word	0x08007adf
 8006e0c:	08007b17 	.word	0x08007b17
 8006e10:	08007b3b 	.word	0x08007b3b

08006e14 <_cleanup_r>:
 8006e14:	4901      	ldr	r1, [pc, #4]	; (8006e1c <_cleanup_r+0x8>)
 8006e16:	f000 b8af 	b.w	8006f78 <_fwalk_reent>
 8006e1a:	bf00      	nop
 8006e1c:	08008b05 	.word	0x08008b05

08006e20 <__sfmoreglue>:
 8006e20:	b570      	push	{r4, r5, r6, lr}
 8006e22:	1e4a      	subs	r2, r1, #1
 8006e24:	2568      	movs	r5, #104	; 0x68
 8006e26:	4355      	muls	r5, r2
 8006e28:	460e      	mov	r6, r1
 8006e2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e2e:	f000 f959 	bl	80070e4 <_malloc_r>
 8006e32:	4604      	mov	r4, r0
 8006e34:	b140      	cbz	r0, 8006e48 <__sfmoreglue+0x28>
 8006e36:	2100      	movs	r1, #0
 8006e38:	e9c0 1600 	strd	r1, r6, [r0]
 8006e3c:	300c      	adds	r0, #12
 8006e3e:	60a0      	str	r0, [r4, #8]
 8006e40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e44:	f000 f8f6 	bl	8007034 <memset>
 8006e48:	4620      	mov	r0, r4
 8006e4a:	bd70      	pop	{r4, r5, r6, pc}

08006e4c <__sfp_lock_acquire>:
 8006e4c:	4801      	ldr	r0, [pc, #4]	; (8006e54 <__sfp_lock_acquire+0x8>)
 8006e4e:	f000 b8d8 	b.w	8007002 <__retarget_lock_acquire_recursive>
 8006e52:	bf00      	nop
 8006e54:	20004968 	.word	0x20004968

08006e58 <__sfp_lock_release>:
 8006e58:	4801      	ldr	r0, [pc, #4]	; (8006e60 <__sfp_lock_release+0x8>)
 8006e5a:	f000 b8d3 	b.w	8007004 <__retarget_lock_release_recursive>
 8006e5e:	bf00      	nop
 8006e60:	20004968 	.word	0x20004968

08006e64 <__sinit_lock_acquire>:
 8006e64:	4801      	ldr	r0, [pc, #4]	; (8006e6c <__sinit_lock_acquire+0x8>)
 8006e66:	f000 b8cc 	b.w	8007002 <__retarget_lock_acquire_recursive>
 8006e6a:	bf00      	nop
 8006e6c:	20004963 	.word	0x20004963

08006e70 <__sinit_lock_release>:
 8006e70:	4801      	ldr	r0, [pc, #4]	; (8006e78 <__sinit_lock_release+0x8>)
 8006e72:	f000 b8c7 	b.w	8007004 <__retarget_lock_release_recursive>
 8006e76:	bf00      	nop
 8006e78:	20004963 	.word	0x20004963

08006e7c <__sinit>:
 8006e7c:	b510      	push	{r4, lr}
 8006e7e:	4604      	mov	r4, r0
 8006e80:	f7ff fff0 	bl	8006e64 <__sinit_lock_acquire>
 8006e84:	69a3      	ldr	r3, [r4, #24]
 8006e86:	b11b      	cbz	r3, 8006e90 <__sinit+0x14>
 8006e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e8c:	f7ff bff0 	b.w	8006e70 <__sinit_lock_release>
 8006e90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e94:	6523      	str	r3, [r4, #80]	; 0x50
 8006e96:	4b13      	ldr	r3, [pc, #76]	; (8006ee4 <__sinit+0x68>)
 8006e98:	4a13      	ldr	r2, [pc, #76]	; (8006ee8 <__sinit+0x6c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e9e:	42a3      	cmp	r3, r4
 8006ea0:	bf04      	itt	eq
 8006ea2:	2301      	moveq	r3, #1
 8006ea4:	61a3      	streq	r3, [r4, #24]
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f000 f820 	bl	8006eec <__sfp>
 8006eac:	6060      	str	r0, [r4, #4]
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f000 f81c 	bl	8006eec <__sfp>
 8006eb4:	60a0      	str	r0, [r4, #8]
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f000 f818 	bl	8006eec <__sfp>
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	60e0      	str	r0, [r4, #12]
 8006ec0:	2104      	movs	r1, #4
 8006ec2:	6860      	ldr	r0, [r4, #4]
 8006ec4:	f7ff ff82 	bl	8006dcc <std>
 8006ec8:	68a0      	ldr	r0, [r4, #8]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	2109      	movs	r1, #9
 8006ece:	f7ff ff7d 	bl	8006dcc <std>
 8006ed2:	68e0      	ldr	r0, [r4, #12]
 8006ed4:	2202      	movs	r2, #2
 8006ed6:	2112      	movs	r1, #18
 8006ed8:	f7ff ff78 	bl	8006dcc <std>
 8006edc:	2301      	movs	r3, #1
 8006ede:	61a3      	str	r3, [r4, #24]
 8006ee0:	e7d2      	b.n	8006e88 <__sinit+0xc>
 8006ee2:	bf00      	nop
 8006ee4:	080099f8 	.word	0x080099f8
 8006ee8:	08006e15 	.word	0x08006e15

08006eec <__sfp>:
 8006eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eee:	4607      	mov	r7, r0
 8006ef0:	f7ff ffac 	bl	8006e4c <__sfp_lock_acquire>
 8006ef4:	4b1e      	ldr	r3, [pc, #120]	; (8006f70 <__sfp+0x84>)
 8006ef6:	681e      	ldr	r6, [r3, #0]
 8006ef8:	69b3      	ldr	r3, [r6, #24]
 8006efa:	b913      	cbnz	r3, 8006f02 <__sfp+0x16>
 8006efc:	4630      	mov	r0, r6
 8006efe:	f7ff ffbd 	bl	8006e7c <__sinit>
 8006f02:	3648      	adds	r6, #72	; 0x48
 8006f04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	d503      	bpl.n	8006f14 <__sfp+0x28>
 8006f0c:	6833      	ldr	r3, [r6, #0]
 8006f0e:	b30b      	cbz	r3, 8006f54 <__sfp+0x68>
 8006f10:	6836      	ldr	r6, [r6, #0]
 8006f12:	e7f7      	b.n	8006f04 <__sfp+0x18>
 8006f14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f18:	b9d5      	cbnz	r5, 8006f50 <__sfp+0x64>
 8006f1a:	4b16      	ldr	r3, [pc, #88]	; (8006f74 <__sfp+0x88>)
 8006f1c:	60e3      	str	r3, [r4, #12]
 8006f1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f22:	6665      	str	r5, [r4, #100]	; 0x64
 8006f24:	f000 f86c 	bl	8007000 <__retarget_lock_init_recursive>
 8006f28:	f7ff ff96 	bl	8006e58 <__sfp_lock_release>
 8006f2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f34:	6025      	str	r5, [r4, #0]
 8006f36:	61a5      	str	r5, [r4, #24]
 8006f38:	2208      	movs	r2, #8
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f40:	f000 f878 	bl	8007034 <memset>
 8006f44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f50:	3468      	adds	r4, #104	; 0x68
 8006f52:	e7d9      	b.n	8006f08 <__sfp+0x1c>
 8006f54:	2104      	movs	r1, #4
 8006f56:	4638      	mov	r0, r7
 8006f58:	f7ff ff62 	bl	8006e20 <__sfmoreglue>
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	6030      	str	r0, [r6, #0]
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d1d5      	bne.n	8006f10 <__sfp+0x24>
 8006f64:	f7ff ff78 	bl	8006e58 <__sfp_lock_release>
 8006f68:	230c      	movs	r3, #12
 8006f6a:	603b      	str	r3, [r7, #0]
 8006f6c:	e7ee      	b.n	8006f4c <__sfp+0x60>
 8006f6e:	bf00      	nop
 8006f70:	080099f8 	.word	0x080099f8
 8006f74:	ffff0001 	.word	0xffff0001

08006f78 <_fwalk_reent>:
 8006f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f7c:	4606      	mov	r6, r0
 8006f7e:	4688      	mov	r8, r1
 8006f80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f84:	2700      	movs	r7, #0
 8006f86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f8a:	f1b9 0901 	subs.w	r9, r9, #1
 8006f8e:	d505      	bpl.n	8006f9c <_fwalk_reent+0x24>
 8006f90:	6824      	ldr	r4, [r4, #0]
 8006f92:	2c00      	cmp	r4, #0
 8006f94:	d1f7      	bne.n	8006f86 <_fwalk_reent+0xe>
 8006f96:	4638      	mov	r0, r7
 8006f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f9c:	89ab      	ldrh	r3, [r5, #12]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d907      	bls.n	8006fb2 <_fwalk_reent+0x3a>
 8006fa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	d003      	beq.n	8006fb2 <_fwalk_reent+0x3a>
 8006faa:	4629      	mov	r1, r5
 8006fac:	4630      	mov	r0, r6
 8006fae:	47c0      	blx	r8
 8006fb0:	4307      	orrs	r7, r0
 8006fb2:	3568      	adds	r5, #104	; 0x68
 8006fb4:	e7e9      	b.n	8006f8a <_fwalk_reent+0x12>
	...

08006fb8 <__libc_init_array>:
 8006fb8:	b570      	push	{r4, r5, r6, lr}
 8006fba:	4d0d      	ldr	r5, [pc, #52]	; (8006ff0 <__libc_init_array+0x38>)
 8006fbc:	4c0d      	ldr	r4, [pc, #52]	; (8006ff4 <__libc_init_array+0x3c>)
 8006fbe:	1b64      	subs	r4, r4, r5
 8006fc0:	10a4      	asrs	r4, r4, #2
 8006fc2:	2600      	movs	r6, #0
 8006fc4:	42a6      	cmp	r6, r4
 8006fc6:	d109      	bne.n	8006fdc <__libc_init_array+0x24>
 8006fc8:	4d0b      	ldr	r5, [pc, #44]	; (8006ff8 <__libc_init_array+0x40>)
 8006fca:	4c0c      	ldr	r4, [pc, #48]	; (8006ffc <__libc_init_array+0x44>)
 8006fcc:	f002 fc10 	bl	80097f0 <_init>
 8006fd0:	1b64      	subs	r4, r4, r5
 8006fd2:	10a4      	asrs	r4, r4, #2
 8006fd4:	2600      	movs	r6, #0
 8006fd6:	42a6      	cmp	r6, r4
 8006fd8:	d105      	bne.n	8006fe6 <__libc_init_array+0x2e>
 8006fda:	bd70      	pop	{r4, r5, r6, pc}
 8006fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fe0:	4798      	blx	r3
 8006fe2:	3601      	adds	r6, #1
 8006fe4:	e7ee      	b.n	8006fc4 <__libc_init_array+0xc>
 8006fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fea:	4798      	blx	r3
 8006fec:	3601      	adds	r6, #1
 8006fee:	e7f2      	b.n	8006fd6 <__libc_init_array+0x1e>
 8006ff0:	08009d84 	.word	0x08009d84
 8006ff4:	08009d84 	.word	0x08009d84
 8006ff8:	08009d84 	.word	0x08009d84
 8006ffc:	08009d88 	.word	0x08009d88

08007000 <__retarget_lock_init_recursive>:
 8007000:	4770      	bx	lr

08007002 <__retarget_lock_acquire_recursive>:
 8007002:	4770      	bx	lr

08007004 <__retarget_lock_release_recursive>:
 8007004:	4770      	bx	lr
	...

08007008 <malloc>:
 8007008:	4b02      	ldr	r3, [pc, #8]	; (8007014 <malloc+0xc>)
 800700a:	4601      	mov	r1, r0
 800700c:	6818      	ldr	r0, [r3, #0]
 800700e:	f000 b869 	b.w	80070e4 <_malloc_r>
 8007012:	bf00      	nop
 8007014:	200000ac 	.word	0x200000ac

08007018 <memcpy>:
 8007018:	440a      	add	r2, r1
 800701a:	4291      	cmp	r1, r2
 800701c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007020:	d100      	bne.n	8007024 <memcpy+0xc>
 8007022:	4770      	bx	lr
 8007024:	b510      	push	{r4, lr}
 8007026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800702a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800702e:	4291      	cmp	r1, r2
 8007030:	d1f9      	bne.n	8007026 <memcpy+0xe>
 8007032:	bd10      	pop	{r4, pc}

08007034 <memset>:
 8007034:	4402      	add	r2, r0
 8007036:	4603      	mov	r3, r0
 8007038:	4293      	cmp	r3, r2
 800703a:	d100      	bne.n	800703e <memset+0xa>
 800703c:	4770      	bx	lr
 800703e:	f803 1b01 	strb.w	r1, [r3], #1
 8007042:	e7f9      	b.n	8007038 <memset+0x4>

08007044 <_free_r>:
 8007044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007046:	2900      	cmp	r1, #0
 8007048:	d048      	beq.n	80070dc <_free_r+0x98>
 800704a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800704e:	9001      	str	r0, [sp, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	f1a1 0404 	sub.w	r4, r1, #4
 8007056:	bfb8      	it	lt
 8007058:	18e4      	addlt	r4, r4, r3
 800705a:	f001 fe09 	bl	8008c70 <__malloc_lock>
 800705e:	4a20      	ldr	r2, [pc, #128]	; (80070e0 <_free_r+0x9c>)
 8007060:	9801      	ldr	r0, [sp, #4]
 8007062:	6813      	ldr	r3, [r2, #0]
 8007064:	4615      	mov	r5, r2
 8007066:	b933      	cbnz	r3, 8007076 <_free_r+0x32>
 8007068:	6063      	str	r3, [r4, #4]
 800706a:	6014      	str	r4, [r2, #0]
 800706c:	b003      	add	sp, #12
 800706e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007072:	f001 be03 	b.w	8008c7c <__malloc_unlock>
 8007076:	42a3      	cmp	r3, r4
 8007078:	d90b      	bls.n	8007092 <_free_r+0x4e>
 800707a:	6821      	ldr	r1, [r4, #0]
 800707c:	1862      	adds	r2, r4, r1
 800707e:	4293      	cmp	r3, r2
 8007080:	bf04      	itt	eq
 8007082:	681a      	ldreq	r2, [r3, #0]
 8007084:	685b      	ldreq	r3, [r3, #4]
 8007086:	6063      	str	r3, [r4, #4]
 8007088:	bf04      	itt	eq
 800708a:	1852      	addeq	r2, r2, r1
 800708c:	6022      	streq	r2, [r4, #0]
 800708e:	602c      	str	r4, [r5, #0]
 8007090:	e7ec      	b.n	800706c <_free_r+0x28>
 8007092:	461a      	mov	r2, r3
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	b10b      	cbz	r3, 800709c <_free_r+0x58>
 8007098:	42a3      	cmp	r3, r4
 800709a:	d9fa      	bls.n	8007092 <_free_r+0x4e>
 800709c:	6811      	ldr	r1, [r2, #0]
 800709e:	1855      	adds	r5, r2, r1
 80070a0:	42a5      	cmp	r5, r4
 80070a2:	d10b      	bne.n	80070bc <_free_r+0x78>
 80070a4:	6824      	ldr	r4, [r4, #0]
 80070a6:	4421      	add	r1, r4
 80070a8:	1854      	adds	r4, r2, r1
 80070aa:	42a3      	cmp	r3, r4
 80070ac:	6011      	str	r1, [r2, #0]
 80070ae:	d1dd      	bne.n	800706c <_free_r+0x28>
 80070b0:	681c      	ldr	r4, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	6053      	str	r3, [r2, #4]
 80070b6:	4421      	add	r1, r4
 80070b8:	6011      	str	r1, [r2, #0]
 80070ba:	e7d7      	b.n	800706c <_free_r+0x28>
 80070bc:	d902      	bls.n	80070c4 <_free_r+0x80>
 80070be:	230c      	movs	r3, #12
 80070c0:	6003      	str	r3, [r0, #0]
 80070c2:	e7d3      	b.n	800706c <_free_r+0x28>
 80070c4:	6825      	ldr	r5, [r4, #0]
 80070c6:	1961      	adds	r1, r4, r5
 80070c8:	428b      	cmp	r3, r1
 80070ca:	bf04      	itt	eq
 80070cc:	6819      	ldreq	r1, [r3, #0]
 80070ce:	685b      	ldreq	r3, [r3, #4]
 80070d0:	6063      	str	r3, [r4, #4]
 80070d2:	bf04      	itt	eq
 80070d4:	1949      	addeq	r1, r1, r5
 80070d6:	6021      	streq	r1, [r4, #0]
 80070d8:	6054      	str	r4, [r2, #4]
 80070da:	e7c7      	b.n	800706c <_free_r+0x28>
 80070dc:	b003      	add	sp, #12
 80070de:	bd30      	pop	{r4, r5, pc}
 80070e0:	200043d4 	.word	0x200043d4

080070e4 <_malloc_r>:
 80070e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e6:	1ccd      	adds	r5, r1, #3
 80070e8:	f025 0503 	bic.w	r5, r5, #3
 80070ec:	3508      	adds	r5, #8
 80070ee:	2d0c      	cmp	r5, #12
 80070f0:	bf38      	it	cc
 80070f2:	250c      	movcc	r5, #12
 80070f4:	2d00      	cmp	r5, #0
 80070f6:	4606      	mov	r6, r0
 80070f8:	db01      	blt.n	80070fe <_malloc_r+0x1a>
 80070fa:	42a9      	cmp	r1, r5
 80070fc:	d903      	bls.n	8007106 <_malloc_r+0x22>
 80070fe:	230c      	movs	r3, #12
 8007100:	6033      	str	r3, [r6, #0]
 8007102:	2000      	movs	r0, #0
 8007104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007106:	f001 fdb3 	bl	8008c70 <__malloc_lock>
 800710a:	4921      	ldr	r1, [pc, #132]	; (8007190 <_malloc_r+0xac>)
 800710c:	680a      	ldr	r2, [r1, #0]
 800710e:	4614      	mov	r4, r2
 8007110:	b99c      	cbnz	r4, 800713a <_malloc_r+0x56>
 8007112:	4f20      	ldr	r7, [pc, #128]	; (8007194 <_malloc_r+0xb0>)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	b923      	cbnz	r3, 8007122 <_malloc_r+0x3e>
 8007118:	4621      	mov	r1, r4
 800711a:	4630      	mov	r0, r6
 800711c:	f000 fcbe 	bl	8007a9c <_sbrk_r>
 8007120:	6038      	str	r0, [r7, #0]
 8007122:	4629      	mov	r1, r5
 8007124:	4630      	mov	r0, r6
 8007126:	f000 fcb9 	bl	8007a9c <_sbrk_r>
 800712a:	1c43      	adds	r3, r0, #1
 800712c:	d123      	bne.n	8007176 <_malloc_r+0x92>
 800712e:	230c      	movs	r3, #12
 8007130:	6033      	str	r3, [r6, #0]
 8007132:	4630      	mov	r0, r6
 8007134:	f001 fda2 	bl	8008c7c <__malloc_unlock>
 8007138:	e7e3      	b.n	8007102 <_malloc_r+0x1e>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	1b5b      	subs	r3, r3, r5
 800713e:	d417      	bmi.n	8007170 <_malloc_r+0x8c>
 8007140:	2b0b      	cmp	r3, #11
 8007142:	d903      	bls.n	800714c <_malloc_r+0x68>
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	441c      	add	r4, r3
 8007148:	6025      	str	r5, [r4, #0]
 800714a:	e004      	b.n	8007156 <_malloc_r+0x72>
 800714c:	6863      	ldr	r3, [r4, #4]
 800714e:	42a2      	cmp	r2, r4
 8007150:	bf0c      	ite	eq
 8007152:	600b      	streq	r3, [r1, #0]
 8007154:	6053      	strne	r3, [r2, #4]
 8007156:	4630      	mov	r0, r6
 8007158:	f001 fd90 	bl	8008c7c <__malloc_unlock>
 800715c:	f104 000b 	add.w	r0, r4, #11
 8007160:	1d23      	adds	r3, r4, #4
 8007162:	f020 0007 	bic.w	r0, r0, #7
 8007166:	1ac2      	subs	r2, r0, r3
 8007168:	d0cc      	beq.n	8007104 <_malloc_r+0x20>
 800716a:	1a1b      	subs	r3, r3, r0
 800716c:	50a3      	str	r3, [r4, r2]
 800716e:	e7c9      	b.n	8007104 <_malloc_r+0x20>
 8007170:	4622      	mov	r2, r4
 8007172:	6864      	ldr	r4, [r4, #4]
 8007174:	e7cc      	b.n	8007110 <_malloc_r+0x2c>
 8007176:	1cc4      	adds	r4, r0, #3
 8007178:	f024 0403 	bic.w	r4, r4, #3
 800717c:	42a0      	cmp	r0, r4
 800717e:	d0e3      	beq.n	8007148 <_malloc_r+0x64>
 8007180:	1a21      	subs	r1, r4, r0
 8007182:	4630      	mov	r0, r6
 8007184:	f000 fc8a 	bl	8007a9c <_sbrk_r>
 8007188:	3001      	adds	r0, #1
 800718a:	d1dd      	bne.n	8007148 <_malloc_r+0x64>
 800718c:	e7cf      	b.n	800712e <_malloc_r+0x4a>
 800718e:	bf00      	nop
 8007190:	200043d4 	.word	0x200043d4
 8007194:	200043d8 	.word	0x200043d8

08007198 <__cvt>:
 8007198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800719c:	ec55 4b10 	vmov	r4, r5, d0
 80071a0:	2d00      	cmp	r5, #0
 80071a2:	460e      	mov	r6, r1
 80071a4:	4619      	mov	r1, r3
 80071a6:	462b      	mov	r3, r5
 80071a8:	bfbb      	ittet	lt
 80071aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80071ae:	461d      	movlt	r5, r3
 80071b0:	2300      	movge	r3, #0
 80071b2:	232d      	movlt	r3, #45	; 0x2d
 80071b4:	700b      	strb	r3, [r1, #0]
 80071b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80071bc:	4691      	mov	r9, r2
 80071be:	f023 0820 	bic.w	r8, r3, #32
 80071c2:	bfbc      	itt	lt
 80071c4:	4622      	movlt	r2, r4
 80071c6:	4614      	movlt	r4, r2
 80071c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071cc:	d005      	beq.n	80071da <__cvt+0x42>
 80071ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80071d2:	d100      	bne.n	80071d6 <__cvt+0x3e>
 80071d4:	3601      	adds	r6, #1
 80071d6:	2102      	movs	r1, #2
 80071d8:	e000      	b.n	80071dc <__cvt+0x44>
 80071da:	2103      	movs	r1, #3
 80071dc:	ab03      	add	r3, sp, #12
 80071de:	9301      	str	r3, [sp, #4]
 80071e0:	ab02      	add	r3, sp, #8
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	ec45 4b10 	vmov	d0, r4, r5
 80071e8:	4653      	mov	r3, sl
 80071ea:	4632      	mov	r2, r6
 80071ec:	f000 fe18 	bl	8007e20 <_dtoa_r>
 80071f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80071f4:	4607      	mov	r7, r0
 80071f6:	d102      	bne.n	80071fe <__cvt+0x66>
 80071f8:	f019 0f01 	tst.w	r9, #1
 80071fc:	d022      	beq.n	8007244 <__cvt+0xac>
 80071fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007202:	eb07 0906 	add.w	r9, r7, r6
 8007206:	d110      	bne.n	800722a <__cvt+0x92>
 8007208:	783b      	ldrb	r3, [r7, #0]
 800720a:	2b30      	cmp	r3, #48	; 0x30
 800720c:	d10a      	bne.n	8007224 <__cvt+0x8c>
 800720e:	2200      	movs	r2, #0
 8007210:	2300      	movs	r3, #0
 8007212:	4620      	mov	r0, r4
 8007214:	4629      	mov	r1, r5
 8007216:	f7f9 fc67 	bl	8000ae8 <__aeabi_dcmpeq>
 800721a:	b918      	cbnz	r0, 8007224 <__cvt+0x8c>
 800721c:	f1c6 0601 	rsb	r6, r6, #1
 8007220:	f8ca 6000 	str.w	r6, [sl]
 8007224:	f8da 3000 	ldr.w	r3, [sl]
 8007228:	4499      	add	r9, r3
 800722a:	2200      	movs	r2, #0
 800722c:	2300      	movs	r3, #0
 800722e:	4620      	mov	r0, r4
 8007230:	4629      	mov	r1, r5
 8007232:	f7f9 fc59 	bl	8000ae8 <__aeabi_dcmpeq>
 8007236:	b108      	cbz	r0, 800723c <__cvt+0xa4>
 8007238:	f8cd 900c 	str.w	r9, [sp, #12]
 800723c:	2230      	movs	r2, #48	; 0x30
 800723e:	9b03      	ldr	r3, [sp, #12]
 8007240:	454b      	cmp	r3, r9
 8007242:	d307      	bcc.n	8007254 <__cvt+0xbc>
 8007244:	9b03      	ldr	r3, [sp, #12]
 8007246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007248:	1bdb      	subs	r3, r3, r7
 800724a:	4638      	mov	r0, r7
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	b004      	add	sp, #16
 8007250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007254:	1c59      	adds	r1, r3, #1
 8007256:	9103      	str	r1, [sp, #12]
 8007258:	701a      	strb	r2, [r3, #0]
 800725a:	e7f0      	b.n	800723e <__cvt+0xa6>

0800725c <__exponent>:
 800725c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800725e:	4603      	mov	r3, r0
 8007260:	2900      	cmp	r1, #0
 8007262:	bfb8      	it	lt
 8007264:	4249      	neglt	r1, r1
 8007266:	f803 2b02 	strb.w	r2, [r3], #2
 800726a:	bfb4      	ite	lt
 800726c:	222d      	movlt	r2, #45	; 0x2d
 800726e:	222b      	movge	r2, #43	; 0x2b
 8007270:	2909      	cmp	r1, #9
 8007272:	7042      	strb	r2, [r0, #1]
 8007274:	dd2a      	ble.n	80072cc <__exponent+0x70>
 8007276:	f10d 0407 	add.w	r4, sp, #7
 800727a:	46a4      	mov	ip, r4
 800727c:	270a      	movs	r7, #10
 800727e:	46a6      	mov	lr, r4
 8007280:	460a      	mov	r2, r1
 8007282:	fb91 f6f7 	sdiv	r6, r1, r7
 8007286:	fb07 1516 	mls	r5, r7, r6, r1
 800728a:	3530      	adds	r5, #48	; 0x30
 800728c:	2a63      	cmp	r2, #99	; 0x63
 800728e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007292:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007296:	4631      	mov	r1, r6
 8007298:	dcf1      	bgt.n	800727e <__exponent+0x22>
 800729a:	3130      	adds	r1, #48	; 0x30
 800729c:	f1ae 0502 	sub.w	r5, lr, #2
 80072a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80072a4:	1c44      	adds	r4, r0, #1
 80072a6:	4629      	mov	r1, r5
 80072a8:	4561      	cmp	r1, ip
 80072aa:	d30a      	bcc.n	80072c2 <__exponent+0x66>
 80072ac:	f10d 0209 	add.w	r2, sp, #9
 80072b0:	eba2 020e 	sub.w	r2, r2, lr
 80072b4:	4565      	cmp	r5, ip
 80072b6:	bf88      	it	hi
 80072b8:	2200      	movhi	r2, #0
 80072ba:	4413      	add	r3, r2
 80072bc:	1a18      	subs	r0, r3, r0
 80072be:	b003      	add	sp, #12
 80072c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80072ca:	e7ed      	b.n	80072a8 <__exponent+0x4c>
 80072cc:	2330      	movs	r3, #48	; 0x30
 80072ce:	3130      	adds	r1, #48	; 0x30
 80072d0:	7083      	strb	r3, [r0, #2]
 80072d2:	70c1      	strb	r1, [r0, #3]
 80072d4:	1d03      	adds	r3, r0, #4
 80072d6:	e7f1      	b.n	80072bc <__exponent+0x60>

080072d8 <_printf_float>:
 80072d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	ed2d 8b02 	vpush	{d8}
 80072e0:	b08d      	sub	sp, #52	; 0x34
 80072e2:	460c      	mov	r4, r1
 80072e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80072e8:	4616      	mov	r6, r2
 80072ea:	461f      	mov	r7, r3
 80072ec:	4605      	mov	r5, r0
 80072ee:	f001 fc45 	bl	8008b7c <_localeconv_r>
 80072f2:	f8d0 a000 	ldr.w	sl, [r0]
 80072f6:	4650      	mov	r0, sl
 80072f8:	f7f8 ff7a 	bl	80001f0 <strlen>
 80072fc:	2300      	movs	r3, #0
 80072fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	9305      	str	r3, [sp, #20]
 8007304:	f8d8 3000 	ldr.w	r3, [r8]
 8007308:	f894 b018 	ldrb.w	fp, [r4, #24]
 800730c:	3307      	adds	r3, #7
 800730e:	f023 0307 	bic.w	r3, r3, #7
 8007312:	f103 0208 	add.w	r2, r3, #8
 8007316:	f8c8 2000 	str.w	r2, [r8]
 800731a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007322:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007326:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800732a:	9307      	str	r3, [sp, #28]
 800732c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007330:	ee08 0a10 	vmov	s16, r0
 8007334:	4b9f      	ldr	r3, [pc, #636]	; (80075b4 <_printf_float+0x2dc>)
 8007336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800733a:	f04f 32ff 	mov.w	r2, #4294967295
 800733e:	f7f9 fc05 	bl	8000b4c <__aeabi_dcmpun>
 8007342:	bb88      	cbnz	r0, 80073a8 <_printf_float+0xd0>
 8007344:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007348:	4b9a      	ldr	r3, [pc, #616]	; (80075b4 <_printf_float+0x2dc>)
 800734a:	f04f 32ff 	mov.w	r2, #4294967295
 800734e:	f7f9 fbdf 	bl	8000b10 <__aeabi_dcmple>
 8007352:	bb48      	cbnz	r0, 80073a8 <_printf_float+0xd0>
 8007354:	2200      	movs	r2, #0
 8007356:	2300      	movs	r3, #0
 8007358:	4640      	mov	r0, r8
 800735a:	4649      	mov	r1, r9
 800735c:	f7f9 fbce 	bl	8000afc <__aeabi_dcmplt>
 8007360:	b110      	cbz	r0, 8007368 <_printf_float+0x90>
 8007362:	232d      	movs	r3, #45	; 0x2d
 8007364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007368:	4b93      	ldr	r3, [pc, #588]	; (80075b8 <_printf_float+0x2e0>)
 800736a:	4894      	ldr	r0, [pc, #592]	; (80075bc <_printf_float+0x2e4>)
 800736c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007370:	bf94      	ite	ls
 8007372:	4698      	movls	r8, r3
 8007374:	4680      	movhi	r8, r0
 8007376:	2303      	movs	r3, #3
 8007378:	6123      	str	r3, [r4, #16]
 800737a:	9b05      	ldr	r3, [sp, #20]
 800737c:	f023 0204 	bic.w	r2, r3, #4
 8007380:	6022      	str	r2, [r4, #0]
 8007382:	f04f 0900 	mov.w	r9, #0
 8007386:	9700      	str	r7, [sp, #0]
 8007388:	4633      	mov	r3, r6
 800738a:	aa0b      	add	r2, sp, #44	; 0x2c
 800738c:	4621      	mov	r1, r4
 800738e:	4628      	mov	r0, r5
 8007390:	f000 f9d8 	bl	8007744 <_printf_common>
 8007394:	3001      	adds	r0, #1
 8007396:	f040 8090 	bne.w	80074ba <_printf_float+0x1e2>
 800739a:	f04f 30ff 	mov.w	r0, #4294967295
 800739e:	b00d      	add	sp, #52	; 0x34
 80073a0:	ecbd 8b02 	vpop	{d8}
 80073a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a8:	4642      	mov	r2, r8
 80073aa:	464b      	mov	r3, r9
 80073ac:	4640      	mov	r0, r8
 80073ae:	4649      	mov	r1, r9
 80073b0:	f7f9 fbcc 	bl	8000b4c <__aeabi_dcmpun>
 80073b4:	b140      	cbz	r0, 80073c8 <_printf_float+0xf0>
 80073b6:	464b      	mov	r3, r9
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	bfbc      	itt	lt
 80073bc:	232d      	movlt	r3, #45	; 0x2d
 80073be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80073c2:	487f      	ldr	r0, [pc, #508]	; (80075c0 <_printf_float+0x2e8>)
 80073c4:	4b7f      	ldr	r3, [pc, #508]	; (80075c4 <_printf_float+0x2ec>)
 80073c6:	e7d1      	b.n	800736c <_printf_float+0x94>
 80073c8:	6863      	ldr	r3, [r4, #4]
 80073ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80073ce:	9206      	str	r2, [sp, #24]
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	d13f      	bne.n	8007454 <_printf_float+0x17c>
 80073d4:	2306      	movs	r3, #6
 80073d6:	6063      	str	r3, [r4, #4]
 80073d8:	9b05      	ldr	r3, [sp, #20]
 80073da:	6861      	ldr	r1, [r4, #4]
 80073dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80073e0:	2300      	movs	r3, #0
 80073e2:	9303      	str	r3, [sp, #12]
 80073e4:	ab0a      	add	r3, sp, #40	; 0x28
 80073e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80073ea:	ab09      	add	r3, sp, #36	; 0x24
 80073ec:	ec49 8b10 	vmov	d0, r8, r9
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	6022      	str	r2, [r4, #0]
 80073f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80073f8:	4628      	mov	r0, r5
 80073fa:	f7ff fecd 	bl	8007198 <__cvt>
 80073fe:	9b06      	ldr	r3, [sp, #24]
 8007400:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007402:	2b47      	cmp	r3, #71	; 0x47
 8007404:	4680      	mov	r8, r0
 8007406:	d108      	bne.n	800741a <_printf_float+0x142>
 8007408:	1cc8      	adds	r0, r1, #3
 800740a:	db02      	blt.n	8007412 <_printf_float+0x13a>
 800740c:	6863      	ldr	r3, [r4, #4]
 800740e:	4299      	cmp	r1, r3
 8007410:	dd41      	ble.n	8007496 <_printf_float+0x1be>
 8007412:	f1ab 0b02 	sub.w	fp, fp, #2
 8007416:	fa5f fb8b 	uxtb.w	fp, fp
 800741a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800741e:	d820      	bhi.n	8007462 <_printf_float+0x18a>
 8007420:	3901      	subs	r1, #1
 8007422:	465a      	mov	r2, fp
 8007424:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007428:	9109      	str	r1, [sp, #36]	; 0x24
 800742a:	f7ff ff17 	bl	800725c <__exponent>
 800742e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007430:	1813      	adds	r3, r2, r0
 8007432:	2a01      	cmp	r2, #1
 8007434:	4681      	mov	r9, r0
 8007436:	6123      	str	r3, [r4, #16]
 8007438:	dc02      	bgt.n	8007440 <_printf_float+0x168>
 800743a:	6822      	ldr	r2, [r4, #0]
 800743c:	07d2      	lsls	r2, r2, #31
 800743e:	d501      	bpl.n	8007444 <_printf_float+0x16c>
 8007440:	3301      	adds	r3, #1
 8007442:	6123      	str	r3, [r4, #16]
 8007444:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007448:	2b00      	cmp	r3, #0
 800744a:	d09c      	beq.n	8007386 <_printf_float+0xae>
 800744c:	232d      	movs	r3, #45	; 0x2d
 800744e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007452:	e798      	b.n	8007386 <_printf_float+0xae>
 8007454:	9a06      	ldr	r2, [sp, #24]
 8007456:	2a47      	cmp	r2, #71	; 0x47
 8007458:	d1be      	bne.n	80073d8 <_printf_float+0x100>
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1bc      	bne.n	80073d8 <_printf_float+0x100>
 800745e:	2301      	movs	r3, #1
 8007460:	e7b9      	b.n	80073d6 <_printf_float+0xfe>
 8007462:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007466:	d118      	bne.n	800749a <_printf_float+0x1c2>
 8007468:	2900      	cmp	r1, #0
 800746a:	6863      	ldr	r3, [r4, #4]
 800746c:	dd0b      	ble.n	8007486 <_printf_float+0x1ae>
 800746e:	6121      	str	r1, [r4, #16]
 8007470:	b913      	cbnz	r3, 8007478 <_printf_float+0x1a0>
 8007472:	6822      	ldr	r2, [r4, #0]
 8007474:	07d0      	lsls	r0, r2, #31
 8007476:	d502      	bpl.n	800747e <_printf_float+0x1a6>
 8007478:	3301      	adds	r3, #1
 800747a:	440b      	add	r3, r1
 800747c:	6123      	str	r3, [r4, #16]
 800747e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007480:	f04f 0900 	mov.w	r9, #0
 8007484:	e7de      	b.n	8007444 <_printf_float+0x16c>
 8007486:	b913      	cbnz	r3, 800748e <_printf_float+0x1b6>
 8007488:	6822      	ldr	r2, [r4, #0]
 800748a:	07d2      	lsls	r2, r2, #31
 800748c:	d501      	bpl.n	8007492 <_printf_float+0x1ba>
 800748e:	3302      	adds	r3, #2
 8007490:	e7f4      	b.n	800747c <_printf_float+0x1a4>
 8007492:	2301      	movs	r3, #1
 8007494:	e7f2      	b.n	800747c <_printf_float+0x1a4>
 8007496:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800749a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800749c:	4299      	cmp	r1, r3
 800749e:	db05      	blt.n	80074ac <_printf_float+0x1d4>
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	6121      	str	r1, [r4, #16]
 80074a4:	07d8      	lsls	r0, r3, #31
 80074a6:	d5ea      	bpl.n	800747e <_printf_float+0x1a6>
 80074a8:	1c4b      	adds	r3, r1, #1
 80074aa:	e7e7      	b.n	800747c <_printf_float+0x1a4>
 80074ac:	2900      	cmp	r1, #0
 80074ae:	bfd4      	ite	le
 80074b0:	f1c1 0202 	rsble	r2, r1, #2
 80074b4:	2201      	movgt	r2, #1
 80074b6:	4413      	add	r3, r2
 80074b8:	e7e0      	b.n	800747c <_printf_float+0x1a4>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	055a      	lsls	r2, r3, #21
 80074be:	d407      	bmi.n	80074d0 <_printf_float+0x1f8>
 80074c0:	6923      	ldr	r3, [r4, #16]
 80074c2:	4642      	mov	r2, r8
 80074c4:	4631      	mov	r1, r6
 80074c6:	4628      	mov	r0, r5
 80074c8:	47b8      	blx	r7
 80074ca:	3001      	adds	r0, #1
 80074cc:	d12c      	bne.n	8007528 <_printf_float+0x250>
 80074ce:	e764      	b.n	800739a <_printf_float+0xc2>
 80074d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074d4:	f240 80e0 	bls.w	8007698 <_printf_float+0x3c0>
 80074d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074dc:	2200      	movs	r2, #0
 80074de:	2300      	movs	r3, #0
 80074e0:	f7f9 fb02 	bl	8000ae8 <__aeabi_dcmpeq>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d034      	beq.n	8007552 <_printf_float+0x27a>
 80074e8:	4a37      	ldr	r2, [pc, #220]	; (80075c8 <_printf_float+0x2f0>)
 80074ea:	2301      	movs	r3, #1
 80074ec:	4631      	mov	r1, r6
 80074ee:	4628      	mov	r0, r5
 80074f0:	47b8      	blx	r7
 80074f2:	3001      	adds	r0, #1
 80074f4:	f43f af51 	beq.w	800739a <_printf_float+0xc2>
 80074f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074fc:	429a      	cmp	r2, r3
 80074fe:	db02      	blt.n	8007506 <_printf_float+0x22e>
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	07d8      	lsls	r0, r3, #31
 8007504:	d510      	bpl.n	8007528 <_printf_float+0x250>
 8007506:	ee18 3a10 	vmov	r3, s16
 800750a:	4652      	mov	r2, sl
 800750c:	4631      	mov	r1, r6
 800750e:	4628      	mov	r0, r5
 8007510:	47b8      	blx	r7
 8007512:	3001      	adds	r0, #1
 8007514:	f43f af41 	beq.w	800739a <_printf_float+0xc2>
 8007518:	f04f 0800 	mov.w	r8, #0
 800751c:	f104 091a 	add.w	r9, r4, #26
 8007520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007522:	3b01      	subs	r3, #1
 8007524:	4543      	cmp	r3, r8
 8007526:	dc09      	bgt.n	800753c <_printf_float+0x264>
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	079b      	lsls	r3, r3, #30
 800752c:	f100 8105 	bmi.w	800773a <_printf_float+0x462>
 8007530:	68e0      	ldr	r0, [r4, #12]
 8007532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007534:	4298      	cmp	r0, r3
 8007536:	bfb8      	it	lt
 8007538:	4618      	movlt	r0, r3
 800753a:	e730      	b.n	800739e <_printf_float+0xc6>
 800753c:	2301      	movs	r3, #1
 800753e:	464a      	mov	r2, r9
 8007540:	4631      	mov	r1, r6
 8007542:	4628      	mov	r0, r5
 8007544:	47b8      	blx	r7
 8007546:	3001      	adds	r0, #1
 8007548:	f43f af27 	beq.w	800739a <_printf_float+0xc2>
 800754c:	f108 0801 	add.w	r8, r8, #1
 8007550:	e7e6      	b.n	8007520 <_printf_float+0x248>
 8007552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007554:	2b00      	cmp	r3, #0
 8007556:	dc39      	bgt.n	80075cc <_printf_float+0x2f4>
 8007558:	4a1b      	ldr	r2, [pc, #108]	; (80075c8 <_printf_float+0x2f0>)
 800755a:	2301      	movs	r3, #1
 800755c:	4631      	mov	r1, r6
 800755e:	4628      	mov	r0, r5
 8007560:	47b8      	blx	r7
 8007562:	3001      	adds	r0, #1
 8007564:	f43f af19 	beq.w	800739a <_printf_float+0xc2>
 8007568:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800756c:	4313      	orrs	r3, r2
 800756e:	d102      	bne.n	8007576 <_printf_float+0x29e>
 8007570:	6823      	ldr	r3, [r4, #0]
 8007572:	07d9      	lsls	r1, r3, #31
 8007574:	d5d8      	bpl.n	8007528 <_printf_float+0x250>
 8007576:	ee18 3a10 	vmov	r3, s16
 800757a:	4652      	mov	r2, sl
 800757c:	4631      	mov	r1, r6
 800757e:	4628      	mov	r0, r5
 8007580:	47b8      	blx	r7
 8007582:	3001      	adds	r0, #1
 8007584:	f43f af09 	beq.w	800739a <_printf_float+0xc2>
 8007588:	f04f 0900 	mov.w	r9, #0
 800758c:	f104 0a1a 	add.w	sl, r4, #26
 8007590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007592:	425b      	negs	r3, r3
 8007594:	454b      	cmp	r3, r9
 8007596:	dc01      	bgt.n	800759c <_printf_float+0x2c4>
 8007598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800759a:	e792      	b.n	80074c2 <_printf_float+0x1ea>
 800759c:	2301      	movs	r3, #1
 800759e:	4652      	mov	r2, sl
 80075a0:	4631      	mov	r1, r6
 80075a2:	4628      	mov	r0, r5
 80075a4:	47b8      	blx	r7
 80075a6:	3001      	adds	r0, #1
 80075a8:	f43f aef7 	beq.w	800739a <_printf_float+0xc2>
 80075ac:	f109 0901 	add.w	r9, r9, #1
 80075b0:	e7ee      	b.n	8007590 <_printf_float+0x2b8>
 80075b2:	bf00      	nop
 80075b4:	7fefffff 	.word	0x7fefffff
 80075b8:	080099fc 	.word	0x080099fc
 80075bc:	08009a00 	.word	0x08009a00
 80075c0:	08009a08 	.word	0x08009a08
 80075c4:	08009a04 	.word	0x08009a04
 80075c8:	08009a0c 	.word	0x08009a0c
 80075cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075d0:	429a      	cmp	r2, r3
 80075d2:	bfa8      	it	ge
 80075d4:	461a      	movge	r2, r3
 80075d6:	2a00      	cmp	r2, #0
 80075d8:	4691      	mov	r9, r2
 80075da:	dc37      	bgt.n	800764c <_printf_float+0x374>
 80075dc:	f04f 0b00 	mov.w	fp, #0
 80075e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075e4:	f104 021a 	add.w	r2, r4, #26
 80075e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075ea:	9305      	str	r3, [sp, #20]
 80075ec:	eba3 0309 	sub.w	r3, r3, r9
 80075f0:	455b      	cmp	r3, fp
 80075f2:	dc33      	bgt.n	800765c <_printf_float+0x384>
 80075f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075f8:	429a      	cmp	r2, r3
 80075fa:	db3b      	blt.n	8007674 <_printf_float+0x39c>
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	07da      	lsls	r2, r3, #31
 8007600:	d438      	bmi.n	8007674 <_printf_float+0x39c>
 8007602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007604:	9b05      	ldr	r3, [sp, #20]
 8007606:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	eba2 0901 	sub.w	r9, r2, r1
 800760e:	4599      	cmp	r9, r3
 8007610:	bfa8      	it	ge
 8007612:	4699      	movge	r9, r3
 8007614:	f1b9 0f00 	cmp.w	r9, #0
 8007618:	dc35      	bgt.n	8007686 <_printf_float+0x3ae>
 800761a:	f04f 0800 	mov.w	r8, #0
 800761e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007622:	f104 0a1a 	add.w	sl, r4, #26
 8007626:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800762a:	1a9b      	subs	r3, r3, r2
 800762c:	eba3 0309 	sub.w	r3, r3, r9
 8007630:	4543      	cmp	r3, r8
 8007632:	f77f af79 	ble.w	8007528 <_printf_float+0x250>
 8007636:	2301      	movs	r3, #1
 8007638:	4652      	mov	r2, sl
 800763a:	4631      	mov	r1, r6
 800763c:	4628      	mov	r0, r5
 800763e:	47b8      	blx	r7
 8007640:	3001      	adds	r0, #1
 8007642:	f43f aeaa 	beq.w	800739a <_printf_float+0xc2>
 8007646:	f108 0801 	add.w	r8, r8, #1
 800764a:	e7ec      	b.n	8007626 <_printf_float+0x34e>
 800764c:	4613      	mov	r3, r2
 800764e:	4631      	mov	r1, r6
 8007650:	4642      	mov	r2, r8
 8007652:	4628      	mov	r0, r5
 8007654:	47b8      	blx	r7
 8007656:	3001      	adds	r0, #1
 8007658:	d1c0      	bne.n	80075dc <_printf_float+0x304>
 800765a:	e69e      	b.n	800739a <_printf_float+0xc2>
 800765c:	2301      	movs	r3, #1
 800765e:	4631      	mov	r1, r6
 8007660:	4628      	mov	r0, r5
 8007662:	9205      	str	r2, [sp, #20]
 8007664:	47b8      	blx	r7
 8007666:	3001      	adds	r0, #1
 8007668:	f43f ae97 	beq.w	800739a <_printf_float+0xc2>
 800766c:	9a05      	ldr	r2, [sp, #20]
 800766e:	f10b 0b01 	add.w	fp, fp, #1
 8007672:	e7b9      	b.n	80075e8 <_printf_float+0x310>
 8007674:	ee18 3a10 	vmov	r3, s16
 8007678:	4652      	mov	r2, sl
 800767a:	4631      	mov	r1, r6
 800767c:	4628      	mov	r0, r5
 800767e:	47b8      	blx	r7
 8007680:	3001      	adds	r0, #1
 8007682:	d1be      	bne.n	8007602 <_printf_float+0x32a>
 8007684:	e689      	b.n	800739a <_printf_float+0xc2>
 8007686:	9a05      	ldr	r2, [sp, #20]
 8007688:	464b      	mov	r3, r9
 800768a:	4442      	add	r2, r8
 800768c:	4631      	mov	r1, r6
 800768e:	4628      	mov	r0, r5
 8007690:	47b8      	blx	r7
 8007692:	3001      	adds	r0, #1
 8007694:	d1c1      	bne.n	800761a <_printf_float+0x342>
 8007696:	e680      	b.n	800739a <_printf_float+0xc2>
 8007698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800769a:	2a01      	cmp	r2, #1
 800769c:	dc01      	bgt.n	80076a2 <_printf_float+0x3ca>
 800769e:	07db      	lsls	r3, r3, #31
 80076a0:	d538      	bpl.n	8007714 <_printf_float+0x43c>
 80076a2:	2301      	movs	r3, #1
 80076a4:	4642      	mov	r2, r8
 80076a6:	4631      	mov	r1, r6
 80076a8:	4628      	mov	r0, r5
 80076aa:	47b8      	blx	r7
 80076ac:	3001      	adds	r0, #1
 80076ae:	f43f ae74 	beq.w	800739a <_printf_float+0xc2>
 80076b2:	ee18 3a10 	vmov	r3, s16
 80076b6:	4652      	mov	r2, sl
 80076b8:	4631      	mov	r1, r6
 80076ba:	4628      	mov	r0, r5
 80076bc:	47b8      	blx	r7
 80076be:	3001      	adds	r0, #1
 80076c0:	f43f ae6b 	beq.w	800739a <_printf_float+0xc2>
 80076c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076c8:	2200      	movs	r2, #0
 80076ca:	2300      	movs	r3, #0
 80076cc:	f7f9 fa0c 	bl	8000ae8 <__aeabi_dcmpeq>
 80076d0:	b9d8      	cbnz	r0, 800770a <_printf_float+0x432>
 80076d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d4:	f108 0201 	add.w	r2, r8, #1
 80076d8:	3b01      	subs	r3, #1
 80076da:	4631      	mov	r1, r6
 80076dc:	4628      	mov	r0, r5
 80076de:	47b8      	blx	r7
 80076e0:	3001      	adds	r0, #1
 80076e2:	d10e      	bne.n	8007702 <_printf_float+0x42a>
 80076e4:	e659      	b.n	800739a <_printf_float+0xc2>
 80076e6:	2301      	movs	r3, #1
 80076e8:	4652      	mov	r2, sl
 80076ea:	4631      	mov	r1, r6
 80076ec:	4628      	mov	r0, r5
 80076ee:	47b8      	blx	r7
 80076f0:	3001      	adds	r0, #1
 80076f2:	f43f ae52 	beq.w	800739a <_printf_float+0xc2>
 80076f6:	f108 0801 	add.w	r8, r8, #1
 80076fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076fc:	3b01      	subs	r3, #1
 80076fe:	4543      	cmp	r3, r8
 8007700:	dcf1      	bgt.n	80076e6 <_printf_float+0x40e>
 8007702:	464b      	mov	r3, r9
 8007704:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007708:	e6dc      	b.n	80074c4 <_printf_float+0x1ec>
 800770a:	f04f 0800 	mov.w	r8, #0
 800770e:	f104 0a1a 	add.w	sl, r4, #26
 8007712:	e7f2      	b.n	80076fa <_printf_float+0x422>
 8007714:	2301      	movs	r3, #1
 8007716:	4642      	mov	r2, r8
 8007718:	e7df      	b.n	80076da <_printf_float+0x402>
 800771a:	2301      	movs	r3, #1
 800771c:	464a      	mov	r2, r9
 800771e:	4631      	mov	r1, r6
 8007720:	4628      	mov	r0, r5
 8007722:	47b8      	blx	r7
 8007724:	3001      	adds	r0, #1
 8007726:	f43f ae38 	beq.w	800739a <_printf_float+0xc2>
 800772a:	f108 0801 	add.w	r8, r8, #1
 800772e:	68e3      	ldr	r3, [r4, #12]
 8007730:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007732:	1a5b      	subs	r3, r3, r1
 8007734:	4543      	cmp	r3, r8
 8007736:	dcf0      	bgt.n	800771a <_printf_float+0x442>
 8007738:	e6fa      	b.n	8007530 <_printf_float+0x258>
 800773a:	f04f 0800 	mov.w	r8, #0
 800773e:	f104 0919 	add.w	r9, r4, #25
 8007742:	e7f4      	b.n	800772e <_printf_float+0x456>

08007744 <_printf_common>:
 8007744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007748:	4616      	mov	r6, r2
 800774a:	4699      	mov	r9, r3
 800774c:	688a      	ldr	r2, [r1, #8]
 800774e:	690b      	ldr	r3, [r1, #16]
 8007750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007754:	4293      	cmp	r3, r2
 8007756:	bfb8      	it	lt
 8007758:	4613      	movlt	r3, r2
 800775a:	6033      	str	r3, [r6, #0]
 800775c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007760:	4607      	mov	r7, r0
 8007762:	460c      	mov	r4, r1
 8007764:	b10a      	cbz	r2, 800776a <_printf_common+0x26>
 8007766:	3301      	adds	r3, #1
 8007768:	6033      	str	r3, [r6, #0]
 800776a:	6823      	ldr	r3, [r4, #0]
 800776c:	0699      	lsls	r1, r3, #26
 800776e:	bf42      	ittt	mi
 8007770:	6833      	ldrmi	r3, [r6, #0]
 8007772:	3302      	addmi	r3, #2
 8007774:	6033      	strmi	r3, [r6, #0]
 8007776:	6825      	ldr	r5, [r4, #0]
 8007778:	f015 0506 	ands.w	r5, r5, #6
 800777c:	d106      	bne.n	800778c <_printf_common+0x48>
 800777e:	f104 0a19 	add.w	sl, r4, #25
 8007782:	68e3      	ldr	r3, [r4, #12]
 8007784:	6832      	ldr	r2, [r6, #0]
 8007786:	1a9b      	subs	r3, r3, r2
 8007788:	42ab      	cmp	r3, r5
 800778a:	dc26      	bgt.n	80077da <_printf_common+0x96>
 800778c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007790:	1e13      	subs	r3, r2, #0
 8007792:	6822      	ldr	r2, [r4, #0]
 8007794:	bf18      	it	ne
 8007796:	2301      	movne	r3, #1
 8007798:	0692      	lsls	r2, r2, #26
 800779a:	d42b      	bmi.n	80077f4 <_printf_common+0xb0>
 800779c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077a0:	4649      	mov	r1, r9
 80077a2:	4638      	mov	r0, r7
 80077a4:	47c0      	blx	r8
 80077a6:	3001      	adds	r0, #1
 80077a8:	d01e      	beq.n	80077e8 <_printf_common+0xa4>
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	68e5      	ldr	r5, [r4, #12]
 80077ae:	6832      	ldr	r2, [r6, #0]
 80077b0:	f003 0306 	and.w	r3, r3, #6
 80077b4:	2b04      	cmp	r3, #4
 80077b6:	bf08      	it	eq
 80077b8:	1aad      	subeq	r5, r5, r2
 80077ba:	68a3      	ldr	r3, [r4, #8]
 80077bc:	6922      	ldr	r2, [r4, #16]
 80077be:	bf0c      	ite	eq
 80077c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077c4:	2500      	movne	r5, #0
 80077c6:	4293      	cmp	r3, r2
 80077c8:	bfc4      	itt	gt
 80077ca:	1a9b      	subgt	r3, r3, r2
 80077cc:	18ed      	addgt	r5, r5, r3
 80077ce:	2600      	movs	r6, #0
 80077d0:	341a      	adds	r4, #26
 80077d2:	42b5      	cmp	r5, r6
 80077d4:	d11a      	bne.n	800780c <_printf_common+0xc8>
 80077d6:	2000      	movs	r0, #0
 80077d8:	e008      	b.n	80077ec <_printf_common+0xa8>
 80077da:	2301      	movs	r3, #1
 80077dc:	4652      	mov	r2, sl
 80077de:	4649      	mov	r1, r9
 80077e0:	4638      	mov	r0, r7
 80077e2:	47c0      	blx	r8
 80077e4:	3001      	adds	r0, #1
 80077e6:	d103      	bne.n	80077f0 <_printf_common+0xac>
 80077e8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f0:	3501      	adds	r5, #1
 80077f2:	e7c6      	b.n	8007782 <_printf_common+0x3e>
 80077f4:	18e1      	adds	r1, r4, r3
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	2030      	movs	r0, #48	; 0x30
 80077fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077fe:	4422      	add	r2, r4
 8007800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007808:	3302      	adds	r3, #2
 800780a:	e7c7      	b.n	800779c <_printf_common+0x58>
 800780c:	2301      	movs	r3, #1
 800780e:	4622      	mov	r2, r4
 8007810:	4649      	mov	r1, r9
 8007812:	4638      	mov	r0, r7
 8007814:	47c0      	blx	r8
 8007816:	3001      	adds	r0, #1
 8007818:	d0e6      	beq.n	80077e8 <_printf_common+0xa4>
 800781a:	3601      	adds	r6, #1
 800781c:	e7d9      	b.n	80077d2 <_printf_common+0x8e>
	...

08007820 <_printf_i>:
 8007820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007824:	460c      	mov	r4, r1
 8007826:	4691      	mov	r9, r2
 8007828:	7e27      	ldrb	r7, [r4, #24]
 800782a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800782c:	2f78      	cmp	r7, #120	; 0x78
 800782e:	4680      	mov	r8, r0
 8007830:	469a      	mov	sl, r3
 8007832:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007836:	d807      	bhi.n	8007848 <_printf_i+0x28>
 8007838:	2f62      	cmp	r7, #98	; 0x62
 800783a:	d80a      	bhi.n	8007852 <_printf_i+0x32>
 800783c:	2f00      	cmp	r7, #0
 800783e:	f000 80d8 	beq.w	80079f2 <_printf_i+0x1d2>
 8007842:	2f58      	cmp	r7, #88	; 0x58
 8007844:	f000 80a3 	beq.w	800798e <_printf_i+0x16e>
 8007848:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800784c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007850:	e03a      	b.n	80078c8 <_printf_i+0xa8>
 8007852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007856:	2b15      	cmp	r3, #21
 8007858:	d8f6      	bhi.n	8007848 <_printf_i+0x28>
 800785a:	a001      	add	r0, pc, #4	; (adr r0, 8007860 <_printf_i+0x40>)
 800785c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007860:	080078b9 	.word	0x080078b9
 8007864:	080078cd 	.word	0x080078cd
 8007868:	08007849 	.word	0x08007849
 800786c:	08007849 	.word	0x08007849
 8007870:	08007849 	.word	0x08007849
 8007874:	08007849 	.word	0x08007849
 8007878:	080078cd 	.word	0x080078cd
 800787c:	08007849 	.word	0x08007849
 8007880:	08007849 	.word	0x08007849
 8007884:	08007849 	.word	0x08007849
 8007888:	08007849 	.word	0x08007849
 800788c:	080079d9 	.word	0x080079d9
 8007890:	080078fd 	.word	0x080078fd
 8007894:	080079bb 	.word	0x080079bb
 8007898:	08007849 	.word	0x08007849
 800789c:	08007849 	.word	0x08007849
 80078a0:	080079fb 	.word	0x080079fb
 80078a4:	08007849 	.word	0x08007849
 80078a8:	080078fd 	.word	0x080078fd
 80078ac:	08007849 	.word	0x08007849
 80078b0:	08007849 	.word	0x08007849
 80078b4:	080079c3 	.word	0x080079c3
 80078b8:	680b      	ldr	r3, [r1, #0]
 80078ba:	1d1a      	adds	r2, r3, #4
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	600a      	str	r2, [r1, #0]
 80078c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80078c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078c8:	2301      	movs	r3, #1
 80078ca:	e0a3      	b.n	8007a14 <_printf_i+0x1f4>
 80078cc:	6825      	ldr	r5, [r4, #0]
 80078ce:	6808      	ldr	r0, [r1, #0]
 80078d0:	062e      	lsls	r6, r5, #24
 80078d2:	f100 0304 	add.w	r3, r0, #4
 80078d6:	d50a      	bpl.n	80078ee <_printf_i+0xce>
 80078d8:	6805      	ldr	r5, [r0, #0]
 80078da:	600b      	str	r3, [r1, #0]
 80078dc:	2d00      	cmp	r5, #0
 80078de:	da03      	bge.n	80078e8 <_printf_i+0xc8>
 80078e0:	232d      	movs	r3, #45	; 0x2d
 80078e2:	426d      	negs	r5, r5
 80078e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078e8:	485e      	ldr	r0, [pc, #376]	; (8007a64 <_printf_i+0x244>)
 80078ea:	230a      	movs	r3, #10
 80078ec:	e019      	b.n	8007922 <_printf_i+0x102>
 80078ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80078f2:	6805      	ldr	r5, [r0, #0]
 80078f4:	600b      	str	r3, [r1, #0]
 80078f6:	bf18      	it	ne
 80078f8:	b22d      	sxthne	r5, r5
 80078fa:	e7ef      	b.n	80078dc <_printf_i+0xbc>
 80078fc:	680b      	ldr	r3, [r1, #0]
 80078fe:	6825      	ldr	r5, [r4, #0]
 8007900:	1d18      	adds	r0, r3, #4
 8007902:	6008      	str	r0, [r1, #0]
 8007904:	0628      	lsls	r0, r5, #24
 8007906:	d501      	bpl.n	800790c <_printf_i+0xec>
 8007908:	681d      	ldr	r5, [r3, #0]
 800790a:	e002      	b.n	8007912 <_printf_i+0xf2>
 800790c:	0669      	lsls	r1, r5, #25
 800790e:	d5fb      	bpl.n	8007908 <_printf_i+0xe8>
 8007910:	881d      	ldrh	r5, [r3, #0]
 8007912:	4854      	ldr	r0, [pc, #336]	; (8007a64 <_printf_i+0x244>)
 8007914:	2f6f      	cmp	r7, #111	; 0x6f
 8007916:	bf0c      	ite	eq
 8007918:	2308      	moveq	r3, #8
 800791a:	230a      	movne	r3, #10
 800791c:	2100      	movs	r1, #0
 800791e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007922:	6866      	ldr	r6, [r4, #4]
 8007924:	60a6      	str	r6, [r4, #8]
 8007926:	2e00      	cmp	r6, #0
 8007928:	bfa2      	ittt	ge
 800792a:	6821      	ldrge	r1, [r4, #0]
 800792c:	f021 0104 	bicge.w	r1, r1, #4
 8007930:	6021      	strge	r1, [r4, #0]
 8007932:	b90d      	cbnz	r5, 8007938 <_printf_i+0x118>
 8007934:	2e00      	cmp	r6, #0
 8007936:	d04d      	beq.n	80079d4 <_printf_i+0x1b4>
 8007938:	4616      	mov	r6, r2
 800793a:	fbb5 f1f3 	udiv	r1, r5, r3
 800793e:	fb03 5711 	mls	r7, r3, r1, r5
 8007942:	5dc7      	ldrb	r7, [r0, r7]
 8007944:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007948:	462f      	mov	r7, r5
 800794a:	42bb      	cmp	r3, r7
 800794c:	460d      	mov	r5, r1
 800794e:	d9f4      	bls.n	800793a <_printf_i+0x11a>
 8007950:	2b08      	cmp	r3, #8
 8007952:	d10b      	bne.n	800796c <_printf_i+0x14c>
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	07df      	lsls	r7, r3, #31
 8007958:	d508      	bpl.n	800796c <_printf_i+0x14c>
 800795a:	6923      	ldr	r3, [r4, #16]
 800795c:	6861      	ldr	r1, [r4, #4]
 800795e:	4299      	cmp	r1, r3
 8007960:	bfde      	ittt	le
 8007962:	2330      	movle	r3, #48	; 0x30
 8007964:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007968:	f106 36ff 	addle.w	r6, r6, #4294967295
 800796c:	1b92      	subs	r2, r2, r6
 800796e:	6122      	str	r2, [r4, #16]
 8007970:	f8cd a000 	str.w	sl, [sp]
 8007974:	464b      	mov	r3, r9
 8007976:	aa03      	add	r2, sp, #12
 8007978:	4621      	mov	r1, r4
 800797a:	4640      	mov	r0, r8
 800797c:	f7ff fee2 	bl	8007744 <_printf_common>
 8007980:	3001      	adds	r0, #1
 8007982:	d14c      	bne.n	8007a1e <_printf_i+0x1fe>
 8007984:	f04f 30ff 	mov.w	r0, #4294967295
 8007988:	b004      	add	sp, #16
 800798a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798e:	4835      	ldr	r0, [pc, #212]	; (8007a64 <_printf_i+0x244>)
 8007990:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	680e      	ldr	r6, [r1, #0]
 8007998:	061f      	lsls	r7, r3, #24
 800799a:	f856 5b04 	ldr.w	r5, [r6], #4
 800799e:	600e      	str	r6, [r1, #0]
 80079a0:	d514      	bpl.n	80079cc <_printf_i+0x1ac>
 80079a2:	07d9      	lsls	r1, r3, #31
 80079a4:	bf44      	itt	mi
 80079a6:	f043 0320 	orrmi.w	r3, r3, #32
 80079aa:	6023      	strmi	r3, [r4, #0]
 80079ac:	b91d      	cbnz	r5, 80079b6 <_printf_i+0x196>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	f023 0320 	bic.w	r3, r3, #32
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	2310      	movs	r3, #16
 80079b8:	e7b0      	b.n	800791c <_printf_i+0xfc>
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	f043 0320 	orr.w	r3, r3, #32
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	2378      	movs	r3, #120	; 0x78
 80079c4:	4828      	ldr	r0, [pc, #160]	; (8007a68 <_printf_i+0x248>)
 80079c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079ca:	e7e3      	b.n	8007994 <_printf_i+0x174>
 80079cc:	065e      	lsls	r6, r3, #25
 80079ce:	bf48      	it	mi
 80079d0:	b2ad      	uxthmi	r5, r5
 80079d2:	e7e6      	b.n	80079a2 <_printf_i+0x182>
 80079d4:	4616      	mov	r6, r2
 80079d6:	e7bb      	b.n	8007950 <_printf_i+0x130>
 80079d8:	680b      	ldr	r3, [r1, #0]
 80079da:	6826      	ldr	r6, [r4, #0]
 80079dc:	6960      	ldr	r0, [r4, #20]
 80079de:	1d1d      	adds	r5, r3, #4
 80079e0:	600d      	str	r5, [r1, #0]
 80079e2:	0635      	lsls	r5, r6, #24
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	d501      	bpl.n	80079ec <_printf_i+0x1cc>
 80079e8:	6018      	str	r0, [r3, #0]
 80079ea:	e002      	b.n	80079f2 <_printf_i+0x1d2>
 80079ec:	0671      	lsls	r1, r6, #25
 80079ee:	d5fb      	bpl.n	80079e8 <_printf_i+0x1c8>
 80079f0:	8018      	strh	r0, [r3, #0]
 80079f2:	2300      	movs	r3, #0
 80079f4:	6123      	str	r3, [r4, #16]
 80079f6:	4616      	mov	r6, r2
 80079f8:	e7ba      	b.n	8007970 <_printf_i+0x150>
 80079fa:	680b      	ldr	r3, [r1, #0]
 80079fc:	1d1a      	adds	r2, r3, #4
 80079fe:	600a      	str	r2, [r1, #0]
 8007a00:	681e      	ldr	r6, [r3, #0]
 8007a02:	6862      	ldr	r2, [r4, #4]
 8007a04:	2100      	movs	r1, #0
 8007a06:	4630      	mov	r0, r6
 8007a08:	f7f8 fbfa 	bl	8000200 <memchr>
 8007a0c:	b108      	cbz	r0, 8007a12 <_printf_i+0x1f2>
 8007a0e:	1b80      	subs	r0, r0, r6
 8007a10:	6060      	str	r0, [r4, #4]
 8007a12:	6863      	ldr	r3, [r4, #4]
 8007a14:	6123      	str	r3, [r4, #16]
 8007a16:	2300      	movs	r3, #0
 8007a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a1c:	e7a8      	b.n	8007970 <_printf_i+0x150>
 8007a1e:	6923      	ldr	r3, [r4, #16]
 8007a20:	4632      	mov	r2, r6
 8007a22:	4649      	mov	r1, r9
 8007a24:	4640      	mov	r0, r8
 8007a26:	47d0      	blx	sl
 8007a28:	3001      	adds	r0, #1
 8007a2a:	d0ab      	beq.n	8007984 <_printf_i+0x164>
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	079b      	lsls	r3, r3, #30
 8007a30:	d413      	bmi.n	8007a5a <_printf_i+0x23a>
 8007a32:	68e0      	ldr	r0, [r4, #12]
 8007a34:	9b03      	ldr	r3, [sp, #12]
 8007a36:	4298      	cmp	r0, r3
 8007a38:	bfb8      	it	lt
 8007a3a:	4618      	movlt	r0, r3
 8007a3c:	e7a4      	b.n	8007988 <_printf_i+0x168>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	4632      	mov	r2, r6
 8007a42:	4649      	mov	r1, r9
 8007a44:	4640      	mov	r0, r8
 8007a46:	47d0      	blx	sl
 8007a48:	3001      	adds	r0, #1
 8007a4a:	d09b      	beq.n	8007984 <_printf_i+0x164>
 8007a4c:	3501      	adds	r5, #1
 8007a4e:	68e3      	ldr	r3, [r4, #12]
 8007a50:	9903      	ldr	r1, [sp, #12]
 8007a52:	1a5b      	subs	r3, r3, r1
 8007a54:	42ab      	cmp	r3, r5
 8007a56:	dcf2      	bgt.n	8007a3e <_printf_i+0x21e>
 8007a58:	e7eb      	b.n	8007a32 <_printf_i+0x212>
 8007a5a:	2500      	movs	r5, #0
 8007a5c:	f104 0619 	add.w	r6, r4, #25
 8007a60:	e7f5      	b.n	8007a4e <_printf_i+0x22e>
 8007a62:	bf00      	nop
 8007a64:	08009a0e 	.word	0x08009a0e
 8007a68:	08009a1f 	.word	0x08009a1f

08007a6c <iprintf>:
 8007a6c:	b40f      	push	{r0, r1, r2, r3}
 8007a6e:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <iprintf+0x2c>)
 8007a70:	b513      	push	{r0, r1, r4, lr}
 8007a72:	681c      	ldr	r4, [r3, #0]
 8007a74:	b124      	cbz	r4, 8007a80 <iprintf+0x14>
 8007a76:	69a3      	ldr	r3, [r4, #24]
 8007a78:	b913      	cbnz	r3, 8007a80 <iprintf+0x14>
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f7ff f9fe 	bl	8006e7c <__sinit>
 8007a80:	ab05      	add	r3, sp, #20
 8007a82:	9a04      	ldr	r2, [sp, #16]
 8007a84:	68a1      	ldr	r1, [r4, #8]
 8007a86:	9301      	str	r3, [sp, #4]
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f001 fcb3 	bl	80093f4 <_vfiprintf_r>
 8007a8e:	b002      	add	sp, #8
 8007a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a94:	b004      	add	sp, #16
 8007a96:	4770      	bx	lr
 8007a98:	200000ac 	.word	0x200000ac

08007a9c <_sbrk_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4d06      	ldr	r5, [pc, #24]	; (8007ab8 <_sbrk_r+0x1c>)
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	4608      	mov	r0, r1
 8007aa6:	602b      	str	r3, [r5, #0]
 8007aa8:	f7fa fb48 	bl	800213c <_sbrk>
 8007aac:	1c43      	adds	r3, r0, #1
 8007aae:	d102      	bne.n	8007ab6 <_sbrk_r+0x1a>
 8007ab0:	682b      	ldr	r3, [r5, #0]
 8007ab2:	b103      	cbz	r3, 8007ab6 <_sbrk_r+0x1a>
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	bd38      	pop	{r3, r4, r5, pc}
 8007ab8:	2000496c 	.word	0x2000496c

08007abc <__sread>:
 8007abc:	b510      	push	{r4, lr}
 8007abe:	460c      	mov	r4, r1
 8007ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac4:	f001 fdc6 	bl	8009654 <_read_r>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	bfab      	itete	ge
 8007acc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ace:	89a3      	ldrhlt	r3, [r4, #12]
 8007ad0:	181b      	addge	r3, r3, r0
 8007ad2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ad6:	bfac      	ite	ge
 8007ad8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ada:	81a3      	strhlt	r3, [r4, #12]
 8007adc:	bd10      	pop	{r4, pc}

08007ade <__swrite>:
 8007ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae2:	461f      	mov	r7, r3
 8007ae4:	898b      	ldrh	r3, [r1, #12]
 8007ae6:	05db      	lsls	r3, r3, #23
 8007ae8:	4605      	mov	r5, r0
 8007aea:	460c      	mov	r4, r1
 8007aec:	4616      	mov	r6, r2
 8007aee:	d505      	bpl.n	8007afc <__swrite+0x1e>
 8007af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af4:	2302      	movs	r3, #2
 8007af6:	2200      	movs	r2, #0
 8007af8:	f001 f844 	bl	8008b84 <_lseek_r>
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b06:	81a3      	strh	r3, [r4, #12]
 8007b08:	4632      	mov	r2, r6
 8007b0a:	463b      	mov	r3, r7
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b12:	f000 b869 	b.w	8007be8 <_write_r>

08007b16 <__sseek>:
 8007b16:	b510      	push	{r4, lr}
 8007b18:	460c      	mov	r4, r1
 8007b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b1e:	f001 f831 	bl	8008b84 <_lseek_r>
 8007b22:	1c43      	adds	r3, r0, #1
 8007b24:	89a3      	ldrh	r3, [r4, #12]
 8007b26:	bf15      	itete	ne
 8007b28:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b32:	81a3      	strheq	r3, [r4, #12]
 8007b34:	bf18      	it	ne
 8007b36:	81a3      	strhne	r3, [r4, #12]
 8007b38:	bd10      	pop	{r4, pc}

08007b3a <__sclose>:
 8007b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b3e:	f000 b8d3 	b.w	8007ce8 <_close_r>
	...

08007b44 <__swbuf_r>:
 8007b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b46:	460e      	mov	r6, r1
 8007b48:	4614      	mov	r4, r2
 8007b4a:	4605      	mov	r5, r0
 8007b4c:	b118      	cbz	r0, 8007b56 <__swbuf_r+0x12>
 8007b4e:	6983      	ldr	r3, [r0, #24]
 8007b50:	b90b      	cbnz	r3, 8007b56 <__swbuf_r+0x12>
 8007b52:	f7ff f993 	bl	8006e7c <__sinit>
 8007b56:	4b21      	ldr	r3, [pc, #132]	; (8007bdc <__swbuf_r+0x98>)
 8007b58:	429c      	cmp	r4, r3
 8007b5a:	d12b      	bne.n	8007bb4 <__swbuf_r+0x70>
 8007b5c:	686c      	ldr	r4, [r5, #4]
 8007b5e:	69a3      	ldr	r3, [r4, #24]
 8007b60:	60a3      	str	r3, [r4, #8]
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	071a      	lsls	r2, r3, #28
 8007b66:	d52f      	bpl.n	8007bc8 <__swbuf_r+0x84>
 8007b68:	6923      	ldr	r3, [r4, #16]
 8007b6a:	b36b      	cbz	r3, 8007bc8 <__swbuf_r+0x84>
 8007b6c:	6923      	ldr	r3, [r4, #16]
 8007b6e:	6820      	ldr	r0, [r4, #0]
 8007b70:	1ac0      	subs	r0, r0, r3
 8007b72:	6963      	ldr	r3, [r4, #20]
 8007b74:	b2f6      	uxtb	r6, r6
 8007b76:	4283      	cmp	r3, r0
 8007b78:	4637      	mov	r7, r6
 8007b7a:	dc04      	bgt.n	8007b86 <__swbuf_r+0x42>
 8007b7c:	4621      	mov	r1, r4
 8007b7e:	4628      	mov	r0, r5
 8007b80:	f000 ffc0 	bl	8008b04 <_fflush_r>
 8007b84:	bb30      	cbnz	r0, 8007bd4 <__swbuf_r+0x90>
 8007b86:	68a3      	ldr	r3, [r4, #8]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	60a3      	str	r3, [r4, #8]
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	6022      	str	r2, [r4, #0]
 8007b92:	701e      	strb	r6, [r3, #0]
 8007b94:	6963      	ldr	r3, [r4, #20]
 8007b96:	3001      	adds	r0, #1
 8007b98:	4283      	cmp	r3, r0
 8007b9a:	d004      	beq.n	8007ba6 <__swbuf_r+0x62>
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	07db      	lsls	r3, r3, #31
 8007ba0:	d506      	bpl.n	8007bb0 <__swbuf_r+0x6c>
 8007ba2:	2e0a      	cmp	r6, #10
 8007ba4:	d104      	bne.n	8007bb0 <__swbuf_r+0x6c>
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f000 ffab 	bl	8008b04 <_fflush_r>
 8007bae:	b988      	cbnz	r0, 8007bd4 <__swbuf_r+0x90>
 8007bb0:	4638      	mov	r0, r7
 8007bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bb4:	4b0a      	ldr	r3, [pc, #40]	; (8007be0 <__swbuf_r+0x9c>)
 8007bb6:	429c      	cmp	r4, r3
 8007bb8:	d101      	bne.n	8007bbe <__swbuf_r+0x7a>
 8007bba:	68ac      	ldr	r4, [r5, #8]
 8007bbc:	e7cf      	b.n	8007b5e <__swbuf_r+0x1a>
 8007bbe:	4b09      	ldr	r3, [pc, #36]	; (8007be4 <__swbuf_r+0xa0>)
 8007bc0:	429c      	cmp	r4, r3
 8007bc2:	bf08      	it	eq
 8007bc4:	68ec      	ldreq	r4, [r5, #12]
 8007bc6:	e7ca      	b.n	8007b5e <__swbuf_r+0x1a>
 8007bc8:	4621      	mov	r1, r4
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f000 f81e 	bl	8007c0c <__swsetup_r>
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d0cb      	beq.n	8007b6c <__swbuf_r+0x28>
 8007bd4:	f04f 37ff 	mov.w	r7, #4294967295
 8007bd8:	e7ea      	b.n	8007bb0 <__swbuf_r+0x6c>
 8007bda:	bf00      	nop
 8007bdc:	080099b8 	.word	0x080099b8
 8007be0:	080099d8 	.word	0x080099d8
 8007be4:	08009998 	.word	0x08009998

08007be8 <_write_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	4d07      	ldr	r5, [pc, #28]	; (8007c08 <_write_r+0x20>)
 8007bec:	4604      	mov	r4, r0
 8007bee:	4608      	mov	r0, r1
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	602a      	str	r2, [r5, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	f7f9 fa02 	bl	8001000 <_write>
 8007bfc:	1c43      	adds	r3, r0, #1
 8007bfe:	d102      	bne.n	8007c06 <_write_r+0x1e>
 8007c00:	682b      	ldr	r3, [r5, #0]
 8007c02:	b103      	cbz	r3, 8007c06 <_write_r+0x1e>
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	bd38      	pop	{r3, r4, r5, pc}
 8007c08:	2000496c 	.word	0x2000496c

08007c0c <__swsetup_r>:
 8007c0c:	4b32      	ldr	r3, [pc, #200]	; (8007cd8 <__swsetup_r+0xcc>)
 8007c0e:	b570      	push	{r4, r5, r6, lr}
 8007c10:	681d      	ldr	r5, [r3, #0]
 8007c12:	4606      	mov	r6, r0
 8007c14:	460c      	mov	r4, r1
 8007c16:	b125      	cbz	r5, 8007c22 <__swsetup_r+0x16>
 8007c18:	69ab      	ldr	r3, [r5, #24]
 8007c1a:	b913      	cbnz	r3, 8007c22 <__swsetup_r+0x16>
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f7ff f92d 	bl	8006e7c <__sinit>
 8007c22:	4b2e      	ldr	r3, [pc, #184]	; (8007cdc <__swsetup_r+0xd0>)
 8007c24:	429c      	cmp	r4, r3
 8007c26:	d10f      	bne.n	8007c48 <__swsetup_r+0x3c>
 8007c28:	686c      	ldr	r4, [r5, #4]
 8007c2a:	89a3      	ldrh	r3, [r4, #12]
 8007c2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c30:	0719      	lsls	r1, r3, #28
 8007c32:	d42c      	bmi.n	8007c8e <__swsetup_r+0x82>
 8007c34:	06dd      	lsls	r5, r3, #27
 8007c36:	d411      	bmi.n	8007c5c <__swsetup_r+0x50>
 8007c38:	2309      	movs	r3, #9
 8007c3a:	6033      	str	r3, [r6, #0]
 8007c3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c40:	81a3      	strh	r3, [r4, #12]
 8007c42:	f04f 30ff 	mov.w	r0, #4294967295
 8007c46:	e03e      	b.n	8007cc6 <__swsetup_r+0xba>
 8007c48:	4b25      	ldr	r3, [pc, #148]	; (8007ce0 <__swsetup_r+0xd4>)
 8007c4a:	429c      	cmp	r4, r3
 8007c4c:	d101      	bne.n	8007c52 <__swsetup_r+0x46>
 8007c4e:	68ac      	ldr	r4, [r5, #8]
 8007c50:	e7eb      	b.n	8007c2a <__swsetup_r+0x1e>
 8007c52:	4b24      	ldr	r3, [pc, #144]	; (8007ce4 <__swsetup_r+0xd8>)
 8007c54:	429c      	cmp	r4, r3
 8007c56:	bf08      	it	eq
 8007c58:	68ec      	ldreq	r4, [r5, #12]
 8007c5a:	e7e6      	b.n	8007c2a <__swsetup_r+0x1e>
 8007c5c:	0758      	lsls	r0, r3, #29
 8007c5e:	d512      	bpl.n	8007c86 <__swsetup_r+0x7a>
 8007c60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c62:	b141      	cbz	r1, 8007c76 <__swsetup_r+0x6a>
 8007c64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c68:	4299      	cmp	r1, r3
 8007c6a:	d002      	beq.n	8007c72 <__swsetup_r+0x66>
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f7ff f9e9 	bl	8007044 <_free_r>
 8007c72:	2300      	movs	r3, #0
 8007c74:	6363      	str	r3, [r4, #52]	; 0x34
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c7c:	81a3      	strh	r3, [r4, #12]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	6063      	str	r3, [r4, #4]
 8007c82:	6923      	ldr	r3, [r4, #16]
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	f043 0308 	orr.w	r3, r3, #8
 8007c8c:	81a3      	strh	r3, [r4, #12]
 8007c8e:	6923      	ldr	r3, [r4, #16]
 8007c90:	b94b      	cbnz	r3, 8007ca6 <__swsetup_r+0x9a>
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c9c:	d003      	beq.n	8007ca6 <__swsetup_r+0x9a>
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	f000 ffa5 	bl	8008bf0 <__smakebuf_r>
 8007ca6:	89a0      	ldrh	r0, [r4, #12]
 8007ca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cac:	f010 0301 	ands.w	r3, r0, #1
 8007cb0:	d00a      	beq.n	8007cc8 <__swsetup_r+0xbc>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60a3      	str	r3, [r4, #8]
 8007cb6:	6963      	ldr	r3, [r4, #20]
 8007cb8:	425b      	negs	r3, r3
 8007cba:	61a3      	str	r3, [r4, #24]
 8007cbc:	6923      	ldr	r3, [r4, #16]
 8007cbe:	b943      	cbnz	r3, 8007cd2 <__swsetup_r+0xc6>
 8007cc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cc4:	d1ba      	bne.n	8007c3c <__swsetup_r+0x30>
 8007cc6:	bd70      	pop	{r4, r5, r6, pc}
 8007cc8:	0781      	lsls	r1, r0, #30
 8007cca:	bf58      	it	pl
 8007ccc:	6963      	ldrpl	r3, [r4, #20]
 8007cce:	60a3      	str	r3, [r4, #8]
 8007cd0:	e7f4      	b.n	8007cbc <__swsetup_r+0xb0>
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	e7f7      	b.n	8007cc6 <__swsetup_r+0xba>
 8007cd6:	bf00      	nop
 8007cd8:	200000ac 	.word	0x200000ac
 8007cdc:	080099b8 	.word	0x080099b8
 8007ce0:	080099d8 	.word	0x080099d8
 8007ce4:	08009998 	.word	0x08009998

08007ce8 <_close_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	4d06      	ldr	r5, [pc, #24]	; (8007d04 <_close_r+0x1c>)
 8007cec:	2300      	movs	r3, #0
 8007cee:	4604      	mov	r4, r0
 8007cf0:	4608      	mov	r0, r1
 8007cf2:	602b      	str	r3, [r5, #0]
 8007cf4:	f7fa f9ed 	bl	80020d2 <_close>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d102      	bne.n	8007d02 <_close_r+0x1a>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	b103      	cbz	r3, 8007d02 <_close_r+0x1a>
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	2000496c 	.word	0x2000496c

08007d08 <quorem>:
 8007d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	6903      	ldr	r3, [r0, #16]
 8007d0e:	690c      	ldr	r4, [r1, #16]
 8007d10:	42a3      	cmp	r3, r4
 8007d12:	4607      	mov	r7, r0
 8007d14:	f2c0 8081 	blt.w	8007e1a <quorem+0x112>
 8007d18:	3c01      	subs	r4, #1
 8007d1a:	f101 0814 	add.w	r8, r1, #20
 8007d1e:	f100 0514 	add.w	r5, r0, #20
 8007d22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d26:	9301      	str	r3, [sp, #4]
 8007d28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d30:	3301      	adds	r3, #1
 8007d32:	429a      	cmp	r2, r3
 8007d34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d40:	d331      	bcc.n	8007da6 <quorem+0x9e>
 8007d42:	f04f 0e00 	mov.w	lr, #0
 8007d46:	4640      	mov	r0, r8
 8007d48:	46ac      	mov	ip, r5
 8007d4a:	46f2      	mov	sl, lr
 8007d4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d50:	b293      	uxth	r3, r2
 8007d52:	fb06 e303 	mla	r3, r6, r3, lr
 8007d56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	ebaa 0303 	sub.w	r3, sl, r3
 8007d60:	0c12      	lsrs	r2, r2, #16
 8007d62:	f8dc a000 	ldr.w	sl, [ip]
 8007d66:	fb06 e202 	mla	r2, r6, r2, lr
 8007d6a:	fa13 f38a 	uxtah	r3, r3, sl
 8007d6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d72:	fa1f fa82 	uxth.w	sl, r2
 8007d76:	f8dc 2000 	ldr.w	r2, [ip]
 8007d7a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007d7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d88:	4581      	cmp	r9, r0
 8007d8a:	f84c 3b04 	str.w	r3, [ip], #4
 8007d8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d92:	d2db      	bcs.n	8007d4c <quorem+0x44>
 8007d94:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d98:	b92b      	cbnz	r3, 8007da6 <quorem+0x9e>
 8007d9a:	9b01      	ldr	r3, [sp, #4]
 8007d9c:	3b04      	subs	r3, #4
 8007d9e:	429d      	cmp	r5, r3
 8007da0:	461a      	mov	r2, r3
 8007da2:	d32e      	bcc.n	8007e02 <quorem+0xfa>
 8007da4:	613c      	str	r4, [r7, #16]
 8007da6:	4638      	mov	r0, r7
 8007da8:	f001 f9ec 	bl	8009184 <__mcmp>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	db24      	blt.n	8007dfa <quorem+0xf2>
 8007db0:	3601      	adds	r6, #1
 8007db2:	4628      	mov	r0, r5
 8007db4:	f04f 0c00 	mov.w	ip, #0
 8007db8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007dbc:	f8d0 e000 	ldr.w	lr, [r0]
 8007dc0:	b293      	uxth	r3, r2
 8007dc2:	ebac 0303 	sub.w	r3, ip, r3
 8007dc6:	0c12      	lsrs	r2, r2, #16
 8007dc8:	fa13 f38e 	uxtah	r3, r3, lr
 8007dcc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007dd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dda:	45c1      	cmp	r9, r8
 8007ddc:	f840 3b04 	str.w	r3, [r0], #4
 8007de0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007de4:	d2e8      	bcs.n	8007db8 <quorem+0xb0>
 8007de6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dee:	b922      	cbnz	r2, 8007dfa <quorem+0xf2>
 8007df0:	3b04      	subs	r3, #4
 8007df2:	429d      	cmp	r5, r3
 8007df4:	461a      	mov	r2, r3
 8007df6:	d30a      	bcc.n	8007e0e <quorem+0x106>
 8007df8:	613c      	str	r4, [r7, #16]
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	b003      	add	sp, #12
 8007dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e02:	6812      	ldr	r2, [r2, #0]
 8007e04:	3b04      	subs	r3, #4
 8007e06:	2a00      	cmp	r2, #0
 8007e08:	d1cc      	bne.n	8007da4 <quorem+0x9c>
 8007e0a:	3c01      	subs	r4, #1
 8007e0c:	e7c7      	b.n	8007d9e <quorem+0x96>
 8007e0e:	6812      	ldr	r2, [r2, #0]
 8007e10:	3b04      	subs	r3, #4
 8007e12:	2a00      	cmp	r2, #0
 8007e14:	d1f0      	bne.n	8007df8 <quorem+0xf0>
 8007e16:	3c01      	subs	r4, #1
 8007e18:	e7eb      	b.n	8007df2 <quorem+0xea>
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	e7ee      	b.n	8007dfc <quorem+0xf4>
	...

08007e20 <_dtoa_r>:
 8007e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	ed2d 8b02 	vpush	{d8}
 8007e28:	ec57 6b10 	vmov	r6, r7, d0
 8007e2c:	b095      	sub	sp, #84	; 0x54
 8007e2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e34:	9105      	str	r1, [sp, #20]
 8007e36:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e40:	b975      	cbnz	r5, 8007e60 <_dtoa_r+0x40>
 8007e42:	2010      	movs	r0, #16
 8007e44:	f7ff f8e0 	bl	8007008 <malloc>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	6260      	str	r0, [r4, #36]	; 0x24
 8007e4c:	b920      	cbnz	r0, 8007e58 <_dtoa_r+0x38>
 8007e4e:	4bb2      	ldr	r3, [pc, #712]	; (8008118 <_dtoa_r+0x2f8>)
 8007e50:	21ea      	movs	r1, #234	; 0xea
 8007e52:	48b2      	ldr	r0, [pc, #712]	; (800811c <_dtoa_r+0x2fc>)
 8007e54:	f001 fc10 	bl	8009678 <__assert_func>
 8007e58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e5c:	6005      	str	r5, [r0, #0]
 8007e5e:	60c5      	str	r5, [r0, #12]
 8007e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e62:	6819      	ldr	r1, [r3, #0]
 8007e64:	b151      	cbz	r1, 8007e7c <_dtoa_r+0x5c>
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	604a      	str	r2, [r1, #4]
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	4093      	lsls	r3, r2
 8007e6e:	608b      	str	r3, [r1, #8]
 8007e70:	4620      	mov	r0, r4
 8007e72:	f000 ff49 	bl	8008d08 <_Bfree>
 8007e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	1e3b      	subs	r3, r7, #0
 8007e7e:	bfb9      	ittee	lt
 8007e80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e84:	9303      	strlt	r3, [sp, #12]
 8007e86:	2300      	movge	r3, #0
 8007e88:	f8c8 3000 	strge.w	r3, [r8]
 8007e8c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007e90:	4ba3      	ldr	r3, [pc, #652]	; (8008120 <_dtoa_r+0x300>)
 8007e92:	bfbc      	itt	lt
 8007e94:	2201      	movlt	r2, #1
 8007e96:	f8c8 2000 	strlt.w	r2, [r8]
 8007e9a:	ea33 0309 	bics.w	r3, r3, r9
 8007e9e:	d11b      	bne.n	8007ed8 <_dtoa_r+0xb8>
 8007ea0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ea2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007eac:	4333      	orrs	r3, r6
 8007eae:	f000 857a 	beq.w	80089a6 <_dtoa_r+0xb86>
 8007eb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007eb4:	b963      	cbnz	r3, 8007ed0 <_dtoa_r+0xb0>
 8007eb6:	4b9b      	ldr	r3, [pc, #620]	; (8008124 <_dtoa_r+0x304>)
 8007eb8:	e024      	b.n	8007f04 <_dtoa_r+0xe4>
 8007eba:	4b9b      	ldr	r3, [pc, #620]	; (8008128 <_dtoa_r+0x308>)
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	3308      	adds	r3, #8
 8007ec0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ec2:	6013      	str	r3, [r2, #0]
 8007ec4:	9800      	ldr	r0, [sp, #0]
 8007ec6:	b015      	add	sp, #84	; 0x54
 8007ec8:	ecbd 8b02 	vpop	{d8}
 8007ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed0:	4b94      	ldr	r3, [pc, #592]	; (8008124 <_dtoa_r+0x304>)
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	3303      	adds	r3, #3
 8007ed6:	e7f3      	b.n	8007ec0 <_dtoa_r+0xa0>
 8007ed8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007edc:	2200      	movs	r2, #0
 8007ede:	ec51 0b17 	vmov	r0, r1, d7
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007ee8:	f7f8 fdfe 	bl	8000ae8 <__aeabi_dcmpeq>
 8007eec:	4680      	mov	r8, r0
 8007eee:	b158      	cbz	r0, 8007f08 <_dtoa_r+0xe8>
 8007ef0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	6013      	str	r3, [r2, #0]
 8007ef6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 8551 	beq.w	80089a0 <_dtoa_r+0xb80>
 8007efe:	488b      	ldr	r0, [pc, #556]	; (800812c <_dtoa_r+0x30c>)
 8007f00:	6018      	str	r0, [r3, #0]
 8007f02:	1e43      	subs	r3, r0, #1
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	e7dd      	b.n	8007ec4 <_dtoa_r+0xa4>
 8007f08:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007f0c:	aa12      	add	r2, sp, #72	; 0x48
 8007f0e:	a913      	add	r1, sp, #76	; 0x4c
 8007f10:	4620      	mov	r0, r4
 8007f12:	f001 f9db 	bl	80092cc <__d2b>
 8007f16:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f1a:	4683      	mov	fp, r0
 8007f1c:	2d00      	cmp	r5, #0
 8007f1e:	d07c      	beq.n	800801a <_dtoa_r+0x1fa>
 8007f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f22:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007f26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f2a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007f2e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007f32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007f36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f3a:	4b7d      	ldr	r3, [pc, #500]	; (8008130 <_dtoa_r+0x310>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	4630      	mov	r0, r6
 8007f40:	4639      	mov	r1, r7
 8007f42:	f7f8 f9b1 	bl	80002a8 <__aeabi_dsub>
 8007f46:	a36e      	add	r3, pc, #440	; (adr r3, 8008100 <_dtoa_r+0x2e0>)
 8007f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4c:	f7f8 fb64 	bl	8000618 <__aeabi_dmul>
 8007f50:	a36d      	add	r3, pc, #436	; (adr r3, 8008108 <_dtoa_r+0x2e8>)
 8007f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f56:	f7f8 f9a9 	bl	80002ac <__adddf3>
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	460f      	mov	r7, r1
 8007f60:	f7f8 faf0 	bl	8000544 <__aeabi_i2d>
 8007f64:	a36a      	add	r3, pc, #424	; (adr r3, 8008110 <_dtoa_r+0x2f0>)
 8007f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6a:	f7f8 fb55 	bl	8000618 <__aeabi_dmul>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	4630      	mov	r0, r6
 8007f74:	4639      	mov	r1, r7
 8007f76:	f7f8 f999 	bl	80002ac <__adddf3>
 8007f7a:	4606      	mov	r6, r0
 8007f7c:	460f      	mov	r7, r1
 8007f7e:	f7f8 fdfb 	bl	8000b78 <__aeabi_d2iz>
 8007f82:	2200      	movs	r2, #0
 8007f84:	4682      	mov	sl, r0
 8007f86:	2300      	movs	r3, #0
 8007f88:	4630      	mov	r0, r6
 8007f8a:	4639      	mov	r1, r7
 8007f8c:	f7f8 fdb6 	bl	8000afc <__aeabi_dcmplt>
 8007f90:	b148      	cbz	r0, 8007fa6 <_dtoa_r+0x186>
 8007f92:	4650      	mov	r0, sl
 8007f94:	f7f8 fad6 	bl	8000544 <__aeabi_i2d>
 8007f98:	4632      	mov	r2, r6
 8007f9a:	463b      	mov	r3, r7
 8007f9c:	f7f8 fda4 	bl	8000ae8 <__aeabi_dcmpeq>
 8007fa0:	b908      	cbnz	r0, 8007fa6 <_dtoa_r+0x186>
 8007fa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fa6:	f1ba 0f16 	cmp.w	sl, #22
 8007faa:	d854      	bhi.n	8008056 <_dtoa_r+0x236>
 8007fac:	4b61      	ldr	r3, [pc, #388]	; (8008134 <_dtoa_r+0x314>)
 8007fae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007fba:	f7f8 fd9f 	bl	8000afc <__aeabi_dcmplt>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d04b      	beq.n	800805a <_dtoa_r+0x23a>
 8007fc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	930e      	str	r3, [sp, #56]	; 0x38
 8007fca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fcc:	1b5d      	subs	r5, r3, r5
 8007fce:	1e6b      	subs	r3, r5, #1
 8007fd0:	9304      	str	r3, [sp, #16]
 8007fd2:	bf43      	ittte	mi
 8007fd4:	2300      	movmi	r3, #0
 8007fd6:	f1c5 0801 	rsbmi	r8, r5, #1
 8007fda:	9304      	strmi	r3, [sp, #16]
 8007fdc:	f04f 0800 	movpl.w	r8, #0
 8007fe0:	f1ba 0f00 	cmp.w	sl, #0
 8007fe4:	db3b      	blt.n	800805e <_dtoa_r+0x23e>
 8007fe6:	9b04      	ldr	r3, [sp, #16]
 8007fe8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007fec:	4453      	add	r3, sl
 8007fee:	9304      	str	r3, [sp, #16]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	9306      	str	r3, [sp, #24]
 8007ff4:	9b05      	ldr	r3, [sp, #20]
 8007ff6:	2b09      	cmp	r3, #9
 8007ff8:	d869      	bhi.n	80080ce <_dtoa_r+0x2ae>
 8007ffa:	2b05      	cmp	r3, #5
 8007ffc:	bfc4      	itt	gt
 8007ffe:	3b04      	subgt	r3, #4
 8008000:	9305      	strgt	r3, [sp, #20]
 8008002:	9b05      	ldr	r3, [sp, #20]
 8008004:	f1a3 0302 	sub.w	r3, r3, #2
 8008008:	bfcc      	ite	gt
 800800a:	2500      	movgt	r5, #0
 800800c:	2501      	movle	r5, #1
 800800e:	2b03      	cmp	r3, #3
 8008010:	d869      	bhi.n	80080e6 <_dtoa_r+0x2c6>
 8008012:	e8df f003 	tbb	[pc, r3]
 8008016:	4e2c      	.short	0x4e2c
 8008018:	5a4c      	.short	0x5a4c
 800801a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800801e:	441d      	add	r5, r3
 8008020:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008024:	2b20      	cmp	r3, #32
 8008026:	bfc1      	itttt	gt
 8008028:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800802c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008030:	fa09 f303 	lslgt.w	r3, r9, r3
 8008034:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008038:	bfda      	itte	le
 800803a:	f1c3 0320 	rsble	r3, r3, #32
 800803e:	fa06 f003 	lslle.w	r0, r6, r3
 8008042:	4318      	orrgt	r0, r3
 8008044:	f7f8 fa6e 	bl	8000524 <__aeabi_ui2d>
 8008048:	2301      	movs	r3, #1
 800804a:	4606      	mov	r6, r0
 800804c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008050:	3d01      	subs	r5, #1
 8008052:	9310      	str	r3, [sp, #64]	; 0x40
 8008054:	e771      	b.n	8007f3a <_dtoa_r+0x11a>
 8008056:	2301      	movs	r3, #1
 8008058:	e7b6      	b.n	8007fc8 <_dtoa_r+0x1a8>
 800805a:	900e      	str	r0, [sp, #56]	; 0x38
 800805c:	e7b5      	b.n	8007fca <_dtoa_r+0x1aa>
 800805e:	f1ca 0300 	rsb	r3, sl, #0
 8008062:	9306      	str	r3, [sp, #24]
 8008064:	2300      	movs	r3, #0
 8008066:	eba8 080a 	sub.w	r8, r8, sl
 800806a:	930d      	str	r3, [sp, #52]	; 0x34
 800806c:	e7c2      	b.n	8007ff4 <_dtoa_r+0x1d4>
 800806e:	2300      	movs	r3, #0
 8008070:	9308      	str	r3, [sp, #32]
 8008072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008074:	2b00      	cmp	r3, #0
 8008076:	dc39      	bgt.n	80080ec <_dtoa_r+0x2cc>
 8008078:	f04f 0901 	mov.w	r9, #1
 800807c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008080:	464b      	mov	r3, r9
 8008082:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008086:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008088:	2200      	movs	r2, #0
 800808a:	6042      	str	r2, [r0, #4]
 800808c:	2204      	movs	r2, #4
 800808e:	f102 0614 	add.w	r6, r2, #20
 8008092:	429e      	cmp	r6, r3
 8008094:	6841      	ldr	r1, [r0, #4]
 8008096:	d92f      	bls.n	80080f8 <_dtoa_r+0x2d8>
 8008098:	4620      	mov	r0, r4
 800809a:	f000 fdf5 	bl	8008c88 <_Balloc>
 800809e:	9000      	str	r0, [sp, #0]
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d14b      	bne.n	800813c <_dtoa_r+0x31c>
 80080a4:	4b24      	ldr	r3, [pc, #144]	; (8008138 <_dtoa_r+0x318>)
 80080a6:	4602      	mov	r2, r0
 80080a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80080ac:	e6d1      	b.n	8007e52 <_dtoa_r+0x32>
 80080ae:	2301      	movs	r3, #1
 80080b0:	e7de      	b.n	8008070 <_dtoa_r+0x250>
 80080b2:	2300      	movs	r3, #0
 80080b4:	9308      	str	r3, [sp, #32]
 80080b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b8:	eb0a 0903 	add.w	r9, sl, r3
 80080bc:	f109 0301 	add.w	r3, r9, #1
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	9301      	str	r3, [sp, #4]
 80080c4:	bfb8      	it	lt
 80080c6:	2301      	movlt	r3, #1
 80080c8:	e7dd      	b.n	8008086 <_dtoa_r+0x266>
 80080ca:	2301      	movs	r3, #1
 80080cc:	e7f2      	b.n	80080b4 <_dtoa_r+0x294>
 80080ce:	2501      	movs	r5, #1
 80080d0:	2300      	movs	r3, #0
 80080d2:	9305      	str	r3, [sp, #20]
 80080d4:	9508      	str	r5, [sp, #32]
 80080d6:	f04f 39ff 	mov.w	r9, #4294967295
 80080da:	2200      	movs	r2, #0
 80080dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80080e0:	2312      	movs	r3, #18
 80080e2:	9209      	str	r2, [sp, #36]	; 0x24
 80080e4:	e7cf      	b.n	8008086 <_dtoa_r+0x266>
 80080e6:	2301      	movs	r3, #1
 80080e8:	9308      	str	r3, [sp, #32]
 80080ea:	e7f4      	b.n	80080d6 <_dtoa_r+0x2b6>
 80080ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80080f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80080f4:	464b      	mov	r3, r9
 80080f6:	e7c6      	b.n	8008086 <_dtoa_r+0x266>
 80080f8:	3101      	adds	r1, #1
 80080fa:	6041      	str	r1, [r0, #4]
 80080fc:	0052      	lsls	r2, r2, #1
 80080fe:	e7c6      	b.n	800808e <_dtoa_r+0x26e>
 8008100:	636f4361 	.word	0x636f4361
 8008104:	3fd287a7 	.word	0x3fd287a7
 8008108:	8b60c8b3 	.word	0x8b60c8b3
 800810c:	3fc68a28 	.word	0x3fc68a28
 8008110:	509f79fb 	.word	0x509f79fb
 8008114:	3fd34413 	.word	0x3fd34413
 8008118:	08009a3d 	.word	0x08009a3d
 800811c:	08009a54 	.word	0x08009a54
 8008120:	7ff00000 	.word	0x7ff00000
 8008124:	08009a39 	.word	0x08009a39
 8008128:	08009a30 	.word	0x08009a30
 800812c:	08009a0d 	.word	0x08009a0d
 8008130:	3ff80000 	.word	0x3ff80000
 8008134:	08009b50 	.word	0x08009b50
 8008138:	08009ab3 	.word	0x08009ab3
 800813c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800813e:	9a00      	ldr	r2, [sp, #0]
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	9b01      	ldr	r3, [sp, #4]
 8008144:	2b0e      	cmp	r3, #14
 8008146:	f200 80ad 	bhi.w	80082a4 <_dtoa_r+0x484>
 800814a:	2d00      	cmp	r5, #0
 800814c:	f000 80aa 	beq.w	80082a4 <_dtoa_r+0x484>
 8008150:	f1ba 0f00 	cmp.w	sl, #0
 8008154:	dd36      	ble.n	80081c4 <_dtoa_r+0x3a4>
 8008156:	4ac3      	ldr	r2, [pc, #780]	; (8008464 <_dtoa_r+0x644>)
 8008158:	f00a 030f 	and.w	r3, sl, #15
 800815c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008160:	ed93 7b00 	vldr	d7, [r3]
 8008164:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008168:	ea4f 172a 	mov.w	r7, sl, asr #4
 800816c:	eeb0 8a47 	vmov.f32	s16, s14
 8008170:	eef0 8a67 	vmov.f32	s17, s15
 8008174:	d016      	beq.n	80081a4 <_dtoa_r+0x384>
 8008176:	4bbc      	ldr	r3, [pc, #752]	; (8008468 <_dtoa_r+0x648>)
 8008178:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800817c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008180:	f7f8 fb74 	bl	800086c <__aeabi_ddiv>
 8008184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008188:	f007 070f 	and.w	r7, r7, #15
 800818c:	2503      	movs	r5, #3
 800818e:	4eb6      	ldr	r6, [pc, #728]	; (8008468 <_dtoa_r+0x648>)
 8008190:	b957      	cbnz	r7, 80081a8 <_dtoa_r+0x388>
 8008192:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008196:	ec53 2b18 	vmov	r2, r3, d8
 800819a:	f7f8 fb67 	bl	800086c <__aeabi_ddiv>
 800819e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081a2:	e029      	b.n	80081f8 <_dtoa_r+0x3d8>
 80081a4:	2502      	movs	r5, #2
 80081a6:	e7f2      	b.n	800818e <_dtoa_r+0x36e>
 80081a8:	07f9      	lsls	r1, r7, #31
 80081aa:	d508      	bpl.n	80081be <_dtoa_r+0x39e>
 80081ac:	ec51 0b18 	vmov	r0, r1, d8
 80081b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081b4:	f7f8 fa30 	bl	8000618 <__aeabi_dmul>
 80081b8:	ec41 0b18 	vmov	d8, r0, r1
 80081bc:	3501      	adds	r5, #1
 80081be:	107f      	asrs	r7, r7, #1
 80081c0:	3608      	adds	r6, #8
 80081c2:	e7e5      	b.n	8008190 <_dtoa_r+0x370>
 80081c4:	f000 80a6 	beq.w	8008314 <_dtoa_r+0x4f4>
 80081c8:	f1ca 0600 	rsb	r6, sl, #0
 80081cc:	4ba5      	ldr	r3, [pc, #660]	; (8008464 <_dtoa_r+0x644>)
 80081ce:	4fa6      	ldr	r7, [pc, #664]	; (8008468 <_dtoa_r+0x648>)
 80081d0:	f006 020f 	and.w	r2, r6, #15
 80081d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80081e0:	f7f8 fa1a 	bl	8000618 <__aeabi_dmul>
 80081e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081e8:	1136      	asrs	r6, r6, #4
 80081ea:	2300      	movs	r3, #0
 80081ec:	2502      	movs	r5, #2
 80081ee:	2e00      	cmp	r6, #0
 80081f0:	f040 8085 	bne.w	80082fe <_dtoa_r+0x4de>
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1d2      	bne.n	800819e <_dtoa_r+0x37e>
 80081f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 808c 	beq.w	8008318 <_dtoa_r+0x4f8>
 8008200:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008204:	4b99      	ldr	r3, [pc, #612]	; (800846c <_dtoa_r+0x64c>)
 8008206:	2200      	movs	r2, #0
 8008208:	4630      	mov	r0, r6
 800820a:	4639      	mov	r1, r7
 800820c:	f7f8 fc76 	bl	8000afc <__aeabi_dcmplt>
 8008210:	2800      	cmp	r0, #0
 8008212:	f000 8081 	beq.w	8008318 <_dtoa_r+0x4f8>
 8008216:	9b01      	ldr	r3, [sp, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d07d      	beq.n	8008318 <_dtoa_r+0x4f8>
 800821c:	f1b9 0f00 	cmp.w	r9, #0
 8008220:	dd3c      	ble.n	800829c <_dtoa_r+0x47c>
 8008222:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008226:	9307      	str	r3, [sp, #28]
 8008228:	2200      	movs	r2, #0
 800822a:	4b91      	ldr	r3, [pc, #580]	; (8008470 <_dtoa_r+0x650>)
 800822c:	4630      	mov	r0, r6
 800822e:	4639      	mov	r1, r7
 8008230:	f7f8 f9f2 	bl	8000618 <__aeabi_dmul>
 8008234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008238:	3501      	adds	r5, #1
 800823a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800823e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008242:	4628      	mov	r0, r5
 8008244:	f7f8 f97e 	bl	8000544 <__aeabi_i2d>
 8008248:	4632      	mov	r2, r6
 800824a:	463b      	mov	r3, r7
 800824c:	f7f8 f9e4 	bl	8000618 <__aeabi_dmul>
 8008250:	4b88      	ldr	r3, [pc, #544]	; (8008474 <_dtoa_r+0x654>)
 8008252:	2200      	movs	r2, #0
 8008254:	f7f8 f82a 	bl	80002ac <__adddf3>
 8008258:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800825c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008260:	9303      	str	r3, [sp, #12]
 8008262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008264:	2b00      	cmp	r3, #0
 8008266:	d15c      	bne.n	8008322 <_dtoa_r+0x502>
 8008268:	4b83      	ldr	r3, [pc, #524]	; (8008478 <_dtoa_r+0x658>)
 800826a:	2200      	movs	r2, #0
 800826c:	4630      	mov	r0, r6
 800826e:	4639      	mov	r1, r7
 8008270:	f7f8 f81a 	bl	80002a8 <__aeabi_dsub>
 8008274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008278:	4606      	mov	r6, r0
 800827a:	460f      	mov	r7, r1
 800827c:	f7f8 fc5c 	bl	8000b38 <__aeabi_dcmpgt>
 8008280:	2800      	cmp	r0, #0
 8008282:	f040 8296 	bne.w	80087b2 <_dtoa_r+0x992>
 8008286:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800828a:	4630      	mov	r0, r6
 800828c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008290:	4639      	mov	r1, r7
 8008292:	f7f8 fc33 	bl	8000afc <__aeabi_dcmplt>
 8008296:	2800      	cmp	r0, #0
 8008298:	f040 8288 	bne.w	80087ac <_dtoa_r+0x98c>
 800829c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80082a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f2c0 8158 	blt.w	800855c <_dtoa_r+0x73c>
 80082ac:	f1ba 0f0e 	cmp.w	sl, #14
 80082b0:	f300 8154 	bgt.w	800855c <_dtoa_r+0x73c>
 80082b4:	4b6b      	ldr	r3, [pc, #428]	; (8008464 <_dtoa_r+0x644>)
 80082b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80082ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f280 80e3 	bge.w	800848c <_dtoa_r+0x66c>
 80082c6:	9b01      	ldr	r3, [sp, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f300 80df 	bgt.w	800848c <_dtoa_r+0x66c>
 80082ce:	f040 826d 	bne.w	80087ac <_dtoa_r+0x98c>
 80082d2:	4b69      	ldr	r3, [pc, #420]	; (8008478 <_dtoa_r+0x658>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	4640      	mov	r0, r8
 80082d8:	4649      	mov	r1, r9
 80082da:	f7f8 f99d 	bl	8000618 <__aeabi_dmul>
 80082de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082e2:	f7f8 fc1f 	bl	8000b24 <__aeabi_dcmpge>
 80082e6:	9e01      	ldr	r6, [sp, #4]
 80082e8:	4637      	mov	r7, r6
 80082ea:	2800      	cmp	r0, #0
 80082ec:	f040 8243 	bne.w	8008776 <_dtoa_r+0x956>
 80082f0:	9d00      	ldr	r5, [sp, #0]
 80082f2:	2331      	movs	r3, #49	; 0x31
 80082f4:	f805 3b01 	strb.w	r3, [r5], #1
 80082f8:	f10a 0a01 	add.w	sl, sl, #1
 80082fc:	e23f      	b.n	800877e <_dtoa_r+0x95e>
 80082fe:	07f2      	lsls	r2, r6, #31
 8008300:	d505      	bpl.n	800830e <_dtoa_r+0x4ee>
 8008302:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008306:	f7f8 f987 	bl	8000618 <__aeabi_dmul>
 800830a:	3501      	adds	r5, #1
 800830c:	2301      	movs	r3, #1
 800830e:	1076      	asrs	r6, r6, #1
 8008310:	3708      	adds	r7, #8
 8008312:	e76c      	b.n	80081ee <_dtoa_r+0x3ce>
 8008314:	2502      	movs	r5, #2
 8008316:	e76f      	b.n	80081f8 <_dtoa_r+0x3d8>
 8008318:	9b01      	ldr	r3, [sp, #4]
 800831a:	f8cd a01c 	str.w	sl, [sp, #28]
 800831e:	930c      	str	r3, [sp, #48]	; 0x30
 8008320:	e78d      	b.n	800823e <_dtoa_r+0x41e>
 8008322:	9900      	ldr	r1, [sp, #0]
 8008324:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008326:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008328:	4b4e      	ldr	r3, [pc, #312]	; (8008464 <_dtoa_r+0x644>)
 800832a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800832e:	4401      	add	r1, r0
 8008330:	9102      	str	r1, [sp, #8]
 8008332:	9908      	ldr	r1, [sp, #32]
 8008334:	eeb0 8a47 	vmov.f32	s16, s14
 8008338:	eef0 8a67 	vmov.f32	s17, s15
 800833c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008340:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008344:	2900      	cmp	r1, #0
 8008346:	d045      	beq.n	80083d4 <_dtoa_r+0x5b4>
 8008348:	494c      	ldr	r1, [pc, #304]	; (800847c <_dtoa_r+0x65c>)
 800834a:	2000      	movs	r0, #0
 800834c:	f7f8 fa8e 	bl	800086c <__aeabi_ddiv>
 8008350:	ec53 2b18 	vmov	r2, r3, d8
 8008354:	f7f7 ffa8 	bl	80002a8 <__aeabi_dsub>
 8008358:	9d00      	ldr	r5, [sp, #0]
 800835a:	ec41 0b18 	vmov	d8, r0, r1
 800835e:	4639      	mov	r1, r7
 8008360:	4630      	mov	r0, r6
 8008362:	f7f8 fc09 	bl	8000b78 <__aeabi_d2iz>
 8008366:	900c      	str	r0, [sp, #48]	; 0x30
 8008368:	f7f8 f8ec 	bl	8000544 <__aeabi_i2d>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4630      	mov	r0, r6
 8008372:	4639      	mov	r1, r7
 8008374:	f7f7 ff98 	bl	80002a8 <__aeabi_dsub>
 8008378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800837a:	3330      	adds	r3, #48	; 0x30
 800837c:	f805 3b01 	strb.w	r3, [r5], #1
 8008380:	ec53 2b18 	vmov	r2, r3, d8
 8008384:	4606      	mov	r6, r0
 8008386:	460f      	mov	r7, r1
 8008388:	f7f8 fbb8 	bl	8000afc <__aeabi_dcmplt>
 800838c:	2800      	cmp	r0, #0
 800838e:	d165      	bne.n	800845c <_dtoa_r+0x63c>
 8008390:	4632      	mov	r2, r6
 8008392:	463b      	mov	r3, r7
 8008394:	4935      	ldr	r1, [pc, #212]	; (800846c <_dtoa_r+0x64c>)
 8008396:	2000      	movs	r0, #0
 8008398:	f7f7 ff86 	bl	80002a8 <__aeabi_dsub>
 800839c:	ec53 2b18 	vmov	r2, r3, d8
 80083a0:	f7f8 fbac 	bl	8000afc <__aeabi_dcmplt>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	f040 80b9 	bne.w	800851c <_dtoa_r+0x6fc>
 80083aa:	9b02      	ldr	r3, [sp, #8]
 80083ac:	429d      	cmp	r5, r3
 80083ae:	f43f af75 	beq.w	800829c <_dtoa_r+0x47c>
 80083b2:	4b2f      	ldr	r3, [pc, #188]	; (8008470 <_dtoa_r+0x650>)
 80083b4:	ec51 0b18 	vmov	r0, r1, d8
 80083b8:	2200      	movs	r2, #0
 80083ba:	f7f8 f92d 	bl	8000618 <__aeabi_dmul>
 80083be:	4b2c      	ldr	r3, [pc, #176]	; (8008470 <_dtoa_r+0x650>)
 80083c0:	ec41 0b18 	vmov	d8, r0, r1
 80083c4:	2200      	movs	r2, #0
 80083c6:	4630      	mov	r0, r6
 80083c8:	4639      	mov	r1, r7
 80083ca:	f7f8 f925 	bl	8000618 <__aeabi_dmul>
 80083ce:	4606      	mov	r6, r0
 80083d0:	460f      	mov	r7, r1
 80083d2:	e7c4      	b.n	800835e <_dtoa_r+0x53e>
 80083d4:	ec51 0b17 	vmov	r0, r1, d7
 80083d8:	f7f8 f91e 	bl	8000618 <__aeabi_dmul>
 80083dc:	9b02      	ldr	r3, [sp, #8]
 80083de:	9d00      	ldr	r5, [sp, #0]
 80083e0:	930c      	str	r3, [sp, #48]	; 0x30
 80083e2:	ec41 0b18 	vmov	d8, r0, r1
 80083e6:	4639      	mov	r1, r7
 80083e8:	4630      	mov	r0, r6
 80083ea:	f7f8 fbc5 	bl	8000b78 <__aeabi_d2iz>
 80083ee:	9011      	str	r0, [sp, #68]	; 0x44
 80083f0:	f7f8 f8a8 	bl	8000544 <__aeabi_i2d>
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	4630      	mov	r0, r6
 80083fa:	4639      	mov	r1, r7
 80083fc:	f7f7 ff54 	bl	80002a8 <__aeabi_dsub>
 8008400:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008402:	3330      	adds	r3, #48	; 0x30
 8008404:	f805 3b01 	strb.w	r3, [r5], #1
 8008408:	9b02      	ldr	r3, [sp, #8]
 800840a:	429d      	cmp	r5, r3
 800840c:	4606      	mov	r6, r0
 800840e:	460f      	mov	r7, r1
 8008410:	f04f 0200 	mov.w	r2, #0
 8008414:	d134      	bne.n	8008480 <_dtoa_r+0x660>
 8008416:	4b19      	ldr	r3, [pc, #100]	; (800847c <_dtoa_r+0x65c>)
 8008418:	ec51 0b18 	vmov	r0, r1, d8
 800841c:	f7f7 ff46 	bl	80002ac <__adddf3>
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	4630      	mov	r0, r6
 8008426:	4639      	mov	r1, r7
 8008428:	f7f8 fb86 	bl	8000b38 <__aeabi_dcmpgt>
 800842c:	2800      	cmp	r0, #0
 800842e:	d175      	bne.n	800851c <_dtoa_r+0x6fc>
 8008430:	ec53 2b18 	vmov	r2, r3, d8
 8008434:	4911      	ldr	r1, [pc, #68]	; (800847c <_dtoa_r+0x65c>)
 8008436:	2000      	movs	r0, #0
 8008438:	f7f7 ff36 	bl	80002a8 <__aeabi_dsub>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	4630      	mov	r0, r6
 8008442:	4639      	mov	r1, r7
 8008444:	f7f8 fb5a 	bl	8000afc <__aeabi_dcmplt>
 8008448:	2800      	cmp	r0, #0
 800844a:	f43f af27 	beq.w	800829c <_dtoa_r+0x47c>
 800844e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008450:	1e6b      	subs	r3, r5, #1
 8008452:	930c      	str	r3, [sp, #48]	; 0x30
 8008454:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008458:	2b30      	cmp	r3, #48	; 0x30
 800845a:	d0f8      	beq.n	800844e <_dtoa_r+0x62e>
 800845c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008460:	e04a      	b.n	80084f8 <_dtoa_r+0x6d8>
 8008462:	bf00      	nop
 8008464:	08009b50 	.word	0x08009b50
 8008468:	08009b28 	.word	0x08009b28
 800846c:	3ff00000 	.word	0x3ff00000
 8008470:	40240000 	.word	0x40240000
 8008474:	401c0000 	.word	0x401c0000
 8008478:	40140000 	.word	0x40140000
 800847c:	3fe00000 	.word	0x3fe00000
 8008480:	4baf      	ldr	r3, [pc, #700]	; (8008740 <_dtoa_r+0x920>)
 8008482:	f7f8 f8c9 	bl	8000618 <__aeabi_dmul>
 8008486:	4606      	mov	r6, r0
 8008488:	460f      	mov	r7, r1
 800848a:	e7ac      	b.n	80083e6 <_dtoa_r+0x5c6>
 800848c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008490:	9d00      	ldr	r5, [sp, #0]
 8008492:	4642      	mov	r2, r8
 8008494:	464b      	mov	r3, r9
 8008496:	4630      	mov	r0, r6
 8008498:	4639      	mov	r1, r7
 800849a:	f7f8 f9e7 	bl	800086c <__aeabi_ddiv>
 800849e:	f7f8 fb6b 	bl	8000b78 <__aeabi_d2iz>
 80084a2:	9002      	str	r0, [sp, #8]
 80084a4:	f7f8 f84e 	bl	8000544 <__aeabi_i2d>
 80084a8:	4642      	mov	r2, r8
 80084aa:	464b      	mov	r3, r9
 80084ac:	f7f8 f8b4 	bl	8000618 <__aeabi_dmul>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	4630      	mov	r0, r6
 80084b6:	4639      	mov	r1, r7
 80084b8:	f7f7 fef6 	bl	80002a8 <__aeabi_dsub>
 80084bc:	9e02      	ldr	r6, [sp, #8]
 80084be:	9f01      	ldr	r7, [sp, #4]
 80084c0:	3630      	adds	r6, #48	; 0x30
 80084c2:	f805 6b01 	strb.w	r6, [r5], #1
 80084c6:	9e00      	ldr	r6, [sp, #0]
 80084c8:	1bae      	subs	r6, r5, r6
 80084ca:	42b7      	cmp	r7, r6
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	d137      	bne.n	8008542 <_dtoa_r+0x722>
 80084d2:	f7f7 feeb 	bl	80002ac <__adddf3>
 80084d6:	4642      	mov	r2, r8
 80084d8:	464b      	mov	r3, r9
 80084da:	4606      	mov	r6, r0
 80084dc:	460f      	mov	r7, r1
 80084de:	f7f8 fb2b 	bl	8000b38 <__aeabi_dcmpgt>
 80084e2:	b9c8      	cbnz	r0, 8008518 <_dtoa_r+0x6f8>
 80084e4:	4642      	mov	r2, r8
 80084e6:	464b      	mov	r3, r9
 80084e8:	4630      	mov	r0, r6
 80084ea:	4639      	mov	r1, r7
 80084ec:	f7f8 fafc 	bl	8000ae8 <__aeabi_dcmpeq>
 80084f0:	b110      	cbz	r0, 80084f8 <_dtoa_r+0x6d8>
 80084f2:	9b02      	ldr	r3, [sp, #8]
 80084f4:	07d9      	lsls	r1, r3, #31
 80084f6:	d40f      	bmi.n	8008518 <_dtoa_r+0x6f8>
 80084f8:	4620      	mov	r0, r4
 80084fa:	4659      	mov	r1, fp
 80084fc:	f000 fc04 	bl	8008d08 <_Bfree>
 8008500:	2300      	movs	r3, #0
 8008502:	702b      	strb	r3, [r5, #0]
 8008504:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008506:	f10a 0001 	add.w	r0, sl, #1
 800850a:	6018      	str	r0, [r3, #0]
 800850c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800850e:	2b00      	cmp	r3, #0
 8008510:	f43f acd8 	beq.w	8007ec4 <_dtoa_r+0xa4>
 8008514:	601d      	str	r5, [r3, #0]
 8008516:	e4d5      	b.n	8007ec4 <_dtoa_r+0xa4>
 8008518:	f8cd a01c 	str.w	sl, [sp, #28]
 800851c:	462b      	mov	r3, r5
 800851e:	461d      	mov	r5, r3
 8008520:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008524:	2a39      	cmp	r2, #57	; 0x39
 8008526:	d108      	bne.n	800853a <_dtoa_r+0x71a>
 8008528:	9a00      	ldr	r2, [sp, #0]
 800852a:	429a      	cmp	r2, r3
 800852c:	d1f7      	bne.n	800851e <_dtoa_r+0x6fe>
 800852e:	9a07      	ldr	r2, [sp, #28]
 8008530:	9900      	ldr	r1, [sp, #0]
 8008532:	3201      	adds	r2, #1
 8008534:	9207      	str	r2, [sp, #28]
 8008536:	2230      	movs	r2, #48	; 0x30
 8008538:	700a      	strb	r2, [r1, #0]
 800853a:	781a      	ldrb	r2, [r3, #0]
 800853c:	3201      	adds	r2, #1
 800853e:	701a      	strb	r2, [r3, #0]
 8008540:	e78c      	b.n	800845c <_dtoa_r+0x63c>
 8008542:	4b7f      	ldr	r3, [pc, #508]	; (8008740 <_dtoa_r+0x920>)
 8008544:	2200      	movs	r2, #0
 8008546:	f7f8 f867 	bl	8000618 <__aeabi_dmul>
 800854a:	2200      	movs	r2, #0
 800854c:	2300      	movs	r3, #0
 800854e:	4606      	mov	r6, r0
 8008550:	460f      	mov	r7, r1
 8008552:	f7f8 fac9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008556:	2800      	cmp	r0, #0
 8008558:	d09b      	beq.n	8008492 <_dtoa_r+0x672>
 800855a:	e7cd      	b.n	80084f8 <_dtoa_r+0x6d8>
 800855c:	9a08      	ldr	r2, [sp, #32]
 800855e:	2a00      	cmp	r2, #0
 8008560:	f000 80c4 	beq.w	80086ec <_dtoa_r+0x8cc>
 8008564:	9a05      	ldr	r2, [sp, #20]
 8008566:	2a01      	cmp	r2, #1
 8008568:	f300 80a8 	bgt.w	80086bc <_dtoa_r+0x89c>
 800856c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800856e:	2a00      	cmp	r2, #0
 8008570:	f000 80a0 	beq.w	80086b4 <_dtoa_r+0x894>
 8008574:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008578:	9e06      	ldr	r6, [sp, #24]
 800857a:	4645      	mov	r5, r8
 800857c:	9a04      	ldr	r2, [sp, #16]
 800857e:	2101      	movs	r1, #1
 8008580:	441a      	add	r2, r3
 8008582:	4620      	mov	r0, r4
 8008584:	4498      	add	r8, r3
 8008586:	9204      	str	r2, [sp, #16]
 8008588:	f000 fc7a 	bl	8008e80 <__i2b>
 800858c:	4607      	mov	r7, r0
 800858e:	2d00      	cmp	r5, #0
 8008590:	dd0b      	ble.n	80085aa <_dtoa_r+0x78a>
 8008592:	9b04      	ldr	r3, [sp, #16]
 8008594:	2b00      	cmp	r3, #0
 8008596:	dd08      	ble.n	80085aa <_dtoa_r+0x78a>
 8008598:	42ab      	cmp	r3, r5
 800859a:	9a04      	ldr	r2, [sp, #16]
 800859c:	bfa8      	it	ge
 800859e:	462b      	movge	r3, r5
 80085a0:	eba8 0803 	sub.w	r8, r8, r3
 80085a4:	1aed      	subs	r5, r5, r3
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	9304      	str	r3, [sp, #16]
 80085aa:	9b06      	ldr	r3, [sp, #24]
 80085ac:	b1fb      	cbz	r3, 80085ee <_dtoa_r+0x7ce>
 80085ae:	9b08      	ldr	r3, [sp, #32]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 809f 	beq.w	80086f4 <_dtoa_r+0x8d4>
 80085b6:	2e00      	cmp	r6, #0
 80085b8:	dd11      	ble.n	80085de <_dtoa_r+0x7be>
 80085ba:	4639      	mov	r1, r7
 80085bc:	4632      	mov	r2, r6
 80085be:	4620      	mov	r0, r4
 80085c0:	f000 fd1a 	bl	8008ff8 <__pow5mult>
 80085c4:	465a      	mov	r2, fp
 80085c6:	4601      	mov	r1, r0
 80085c8:	4607      	mov	r7, r0
 80085ca:	4620      	mov	r0, r4
 80085cc:	f000 fc6e 	bl	8008eac <__multiply>
 80085d0:	4659      	mov	r1, fp
 80085d2:	9007      	str	r0, [sp, #28]
 80085d4:	4620      	mov	r0, r4
 80085d6:	f000 fb97 	bl	8008d08 <_Bfree>
 80085da:	9b07      	ldr	r3, [sp, #28]
 80085dc:	469b      	mov	fp, r3
 80085de:	9b06      	ldr	r3, [sp, #24]
 80085e0:	1b9a      	subs	r2, r3, r6
 80085e2:	d004      	beq.n	80085ee <_dtoa_r+0x7ce>
 80085e4:	4659      	mov	r1, fp
 80085e6:	4620      	mov	r0, r4
 80085e8:	f000 fd06 	bl	8008ff8 <__pow5mult>
 80085ec:	4683      	mov	fp, r0
 80085ee:	2101      	movs	r1, #1
 80085f0:	4620      	mov	r0, r4
 80085f2:	f000 fc45 	bl	8008e80 <__i2b>
 80085f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	4606      	mov	r6, r0
 80085fc:	dd7c      	ble.n	80086f8 <_dtoa_r+0x8d8>
 80085fe:	461a      	mov	r2, r3
 8008600:	4601      	mov	r1, r0
 8008602:	4620      	mov	r0, r4
 8008604:	f000 fcf8 	bl	8008ff8 <__pow5mult>
 8008608:	9b05      	ldr	r3, [sp, #20]
 800860a:	2b01      	cmp	r3, #1
 800860c:	4606      	mov	r6, r0
 800860e:	dd76      	ble.n	80086fe <_dtoa_r+0x8de>
 8008610:	2300      	movs	r3, #0
 8008612:	9306      	str	r3, [sp, #24]
 8008614:	6933      	ldr	r3, [r6, #16]
 8008616:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800861a:	6918      	ldr	r0, [r3, #16]
 800861c:	f000 fbe0 	bl	8008de0 <__hi0bits>
 8008620:	f1c0 0020 	rsb	r0, r0, #32
 8008624:	9b04      	ldr	r3, [sp, #16]
 8008626:	4418      	add	r0, r3
 8008628:	f010 001f 	ands.w	r0, r0, #31
 800862c:	f000 8086 	beq.w	800873c <_dtoa_r+0x91c>
 8008630:	f1c0 0320 	rsb	r3, r0, #32
 8008634:	2b04      	cmp	r3, #4
 8008636:	dd7f      	ble.n	8008738 <_dtoa_r+0x918>
 8008638:	f1c0 001c 	rsb	r0, r0, #28
 800863c:	9b04      	ldr	r3, [sp, #16]
 800863e:	4403      	add	r3, r0
 8008640:	4480      	add	r8, r0
 8008642:	4405      	add	r5, r0
 8008644:	9304      	str	r3, [sp, #16]
 8008646:	f1b8 0f00 	cmp.w	r8, #0
 800864a:	dd05      	ble.n	8008658 <_dtoa_r+0x838>
 800864c:	4659      	mov	r1, fp
 800864e:	4642      	mov	r2, r8
 8008650:	4620      	mov	r0, r4
 8008652:	f000 fd2b 	bl	80090ac <__lshift>
 8008656:	4683      	mov	fp, r0
 8008658:	9b04      	ldr	r3, [sp, #16]
 800865a:	2b00      	cmp	r3, #0
 800865c:	dd05      	ble.n	800866a <_dtoa_r+0x84a>
 800865e:	4631      	mov	r1, r6
 8008660:	461a      	mov	r2, r3
 8008662:	4620      	mov	r0, r4
 8008664:	f000 fd22 	bl	80090ac <__lshift>
 8008668:	4606      	mov	r6, r0
 800866a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800866c:	2b00      	cmp	r3, #0
 800866e:	d069      	beq.n	8008744 <_dtoa_r+0x924>
 8008670:	4631      	mov	r1, r6
 8008672:	4658      	mov	r0, fp
 8008674:	f000 fd86 	bl	8009184 <__mcmp>
 8008678:	2800      	cmp	r0, #0
 800867a:	da63      	bge.n	8008744 <_dtoa_r+0x924>
 800867c:	2300      	movs	r3, #0
 800867e:	4659      	mov	r1, fp
 8008680:	220a      	movs	r2, #10
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fb62 	bl	8008d4c <__multadd>
 8008688:	9b08      	ldr	r3, [sp, #32]
 800868a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800868e:	4683      	mov	fp, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 818f 	beq.w	80089b4 <_dtoa_r+0xb94>
 8008696:	4639      	mov	r1, r7
 8008698:	2300      	movs	r3, #0
 800869a:	220a      	movs	r2, #10
 800869c:	4620      	mov	r0, r4
 800869e:	f000 fb55 	bl	8008d4c <__multadd>
 80086a2:	f1b9 0f00 	cmp.w	r9, #0
 80086a6:	4607      	mov	r7, r0
 80086a8:	f300 808e 	bgt.w	80087c8 <_dtoa_r+0x9a8>
 80086ac:	9b05      	ldr	r3, [sp, #20]
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	dc50      	bgt.n	8008754 <_dtoa_r+0x934>
 80086b2:	e089      	b.n	80087c8 <_dtoa_r+0x9a8>
 80086b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086ba:	e75d      	b.n	8008578 <_dtoa_r+0x758>
 80086bc:	9b01      	ldr	r3, [sp, #4]
 80086be:	1e5e      	subs	r6, r3, #1
 80086c0:	9b06      	ldr	r3, [sp, #24]
 80086c2:	42b3      	cmp	r3, r6
 80086c4:	bfbf      	itttt	lt
 80086c6:	9b06      	ldrlt	r3, [sp, #24]
 80086c8:	9606      	strlt	r6, [sp, #24]
 80086ca:	1af2      	sublt	r2, r6, r3
 80086cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80086ce:	bfb6      	itet	lt
 80086d0:	189b      	addlt	r3, r3, r2
 80086d2:	1b9e      	subge	r6, r3, r6
 80086d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80086d6:	9b01      	ldr	r3, [sp, #4]
 80086d8:	bfb8      	it	lt
 80086da:	2600      	movlt	r6, #0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	bfb5      	itete	lt
 80086e0:	eba8 0503 	sublt.w	r5, r8, r3
 80086e4:	9b01      	ldrge	r3, [sp, #4]
 80086e6:	2300      	movlt	r3, #0
 80086e8:	4645      	movge	r5, r8
 80086ea:	e747      	b.n	800857c <_dtoa_r+0x75c>
 80086ec:	9e06      	ldr	r6, [sp, #24]
 80086ee:	9f08      	ldr	r7, [sp, #32]
 80086f0:	4645      	mov	r5, r8
 80086f2:	e74c      	b.n	800858e <_dtoa_r+0x76e>
 80086f4:	9a06      	ldr	r2, [sp, #24]
 80086f6:	e775      	b.n	80085e4 <_dtoa_r+0x7c4>
 80086f8:	9b05      	ldr	r3, [sp, #20]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	dc18      	bgt.n	8008730 <_dtoa_r+0x910>
 80086fe:	9b02      	ldr	r3, [sp, #8]
 8008700:	b9b3      	cbnz	r3, 8008730 <_dtoa_r+0x910>
 8008702:	9b03      	ldr	r3, [sp, #12]
 8008704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008708:	b9a3      	cbnz	r3, 8008734 <_dtoa_r+0x914>
 800870a:	9b03      	ldr	r3, [sp, #12]
 800870c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008710:	0d1b      	lsrs	r3, r3, #20
 8008712:	051b      	lsls	r3, r3, #20
 8008714:	b12b      	cbz	r3, 8008722 <_dtoa_r+0x902>
 8008716:	9b04      	ldr	r3, [sp, #16]
 8008718:	3301      	adds	r3, #1
 800871a:	9304      	str	r3, [sp, #16]
 800871c:	f108 0801 	add.w	r8, r8, #1
 8008720:	2301      	movs	r3, #1
 8008722:	9306      	str	r3, [sp, #24]
 8008724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008726:	2b00      	cmp	r3, #0
 8008728:	f47f af74 	bne.w	8008614 <_dtoa_r+0x7f4>
 800872c:	2001      	movs	r0, #1
 800872e:	e779      	b.n	8008624 <_dtoa_r+0x804>
 8008730:	2300      	movs	r3, #0
 8008732:	e7f6      	b.n	8008722 <_dtoa_r+0x902>
 8008734:	9b02      	ldr	r3, [sp, #8]
 8008736:	e7f4      	b.n	8008722 <_dtoa_r+0x902>
 8008738:	d085      	beq.n	8008646 <_dtoa_r+0x826>
 800873a:	4618      	mov	r0, r3
 800873c:	301c      	adds	r0, #28
 800873e:	e77d      	b.n	800863c <_dtoa_r+0x81c>
 8008740:	40240000 	.word	0x40240000
 8008744:	9b01      	ldr	r3, [sp, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	dc38      	bgt.n	80087bc <_dtoa_r+0x99c>
 800874a:	9b05      	ldr	r3, [sp, #20]
 800874c:	2b02      	cmp	r3, #2
 800874e:	dd35      	ble.n	80087bc <_dtoa_r+0x99c>
 8008750:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008754:	f1b9 0f00 	cmp.w	r9, #0
 8008758:	d10d      	bne.n	8008776 <_dtoa_r+0x956>
 800875a:	4631      	mov	r1, r6
 800875c:	464b      	mov	r3, r9
 800875e:	2205      	movs	r2, #5
 8008760:	4620      	mov	r0, r4
 8008762:	f000 faf3 	bl	8008d4c <__multadd>
 8008766:	4601      	mov	r1, r0
 8008768:	4606      	mov	r6, r0
 800876a:	4658      	mov	r0, fp
 800876c:	f000 fd0a 	bl	8009184 <__mcmp>
 8008770:	2800      	cmp	r0, #0
 8008772:	f73f adbd 	bgt.w	80082f0 <_dtoa_r+0x4d0>
 8008776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008778:	9d00      	ldr	r5, [sp, #0]
 800877a:	ea6f 0a03 	mvn.w	sl, r3
 800877e:	f04f 0800 	mov.w	r8, #0
 8008782:	4631      	mov	r1, r6
 8008784:	4620      	mov	r0, r4
 8008786:	f000 fabf 	bl	8008d08 <_Bfree>
 800878a:	2f00      	cmp	r7, #0
 800878c:	f43f aeb4 	beq.w	80084f8 <_dtoa_r+0x6d8>
 8008790:	f1b8 0f00 	cmp.w	r8, #0
 8008794:	d005      	beq.n	80087a2 <_dtoa_r+0x982>
 8008796:	45b8      	cmp	r8, r7
 8008798:	d003      	beq.n	80087a2 <_dtoa_r+0x982>
 800879a:	4641      	mov	r1, r8
 800879c:	4620      	mov	r0, r4
 800879e:	f000 fab3 	bl	8008d08 <_Bfree>
 80087a2:	4639      	mov	r1, r7
 80087a4:	4620      	mov	r0, r4
 80087a6:	f000 faaf 	bl	8008d08 <_Bfree>
 80087aa:	e6a5      	b.n	80084f8 <_dtoa_r+0x6d8>
 80087ac:	2600      	movs	r6, #0
 80087ae:	4637      	mov	r7, r6
 80087b0:	e7e1      	b.n	8008776 <_dtoa_r+0x956>
 80087b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80087b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80087b8:	4637      	mov	r7, r6
 80087ba:	e599      	b.n	80082f0 <_dtoa_r+0x4d0>
 80087bc:	9b08      	ldr	r3, [sp, #32]
 80087be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f000 80fd 	beq.w	80089c2 <_dtoa_r+0xba2>
 80087c8:	2d00      	cmp	r5, #0
 80087ca:	dd05      	ble.n	80087d8 <_dtoa_r+0x9b8>
 80087cc:	4639      	mov	r1, r7
 80087ce:	462a      	mov	r2, r5
 80087d0:	4620      	mov	r0, r4
 80087d2:	f000 fc6b 	bl	80090ac <__lshift>
 80087d6:	4607      	mov	r7, r0
 80087d8:	9b06      	ldr	r3, [sp, #24]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d05c      	beq.n	8008898 <_dtoa_r+0xa78>
 80087de:	6879      	ldr	r1, [r7, #4]
 80087e0:	4620      	mov	r0, r4
 80087e2:	f000 fa51 	bl	8008c88 <_Balloc>
 80087e6:	4605      	mov	r5, r0
 80087e8:	b928      	cbnz	r0, 80087f6 <_dtoa_r+0x9d6>
 80087ea:	4b80      	ldr	r3, [pc, #512]	; (80089ec <_dtoa_r+0xbcc>)
 80087ec:	4602      	mov	r2, r0
 80087ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80087f2:	f7ff bb2e 	b.w	8007e52 <_dtoa_r+0x32>
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	3202      	adds	r2, #2
 80087fa:	0092      	lsls	r2, r2, #2
 80087fc:	f107 010c 	add.w	r1, r7, #12
 8008800:	300c      	adds	r0, #12
 8008802:	f7fe fc09 	bl	8007018 <memcpy>
 8008806:	2201      	movs	r2, #1
 8008808:	4629      	mov	r1, r5
 800880a:	4620      	mov	r0, r4
 800880c:	f000 fc4e 	bl	80090ac <__lshift>
 8008810:	9b00      	ldr	r3, [sp, #0]
 8008812:	3301      	adds	r3, #1
 8008814:	9301      	str	r3, [sp, #4]
 8008816:	9b00      	ldr	r3, [sp, #0]
 8008818:	444b      	add	r3, r9
 800881a:	9307      	str	r3, [sp, #28]
 800881c:	9b02      	ldr	r3, [sp, #8]
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	46b8      	mov	r8, r7
 8008824:	9306      	str	r3, [sp, #24]
 8008826:	4607      	mov	r7, r0
 8008828:	9b01      	ldr	r3, [sp, #4]
 800882a:	4631      	mov	r1, r6
 800882c:	3b01      	subs	r3, #1
 800882e:	4658      	mov	r0, fp
 8008830:	9302      	str	r3, [sp, #8]
 8008832:	f7ff fa69 	bl	8007d08 <quorem>
 8008836:	4603      	mov	r3, r0
 8008838:	3330      	adds	r3, #48	; 0x30
 800883a:	9004      	str	r0, [sp, #16]
 800883c:	4641      	mov	r1, r8
 800883e:	4658      	mov	r0, fp
 8008840:	9308      	str	r3, [sp, #32]
 8008842:	f000 fc9f 	bl	8009184 <__mcmp>
 8008846:	463a      	mov	r2, r7
 8008848:	4681      	mov	r9, r0
 800884a:	4631      	mov	r1, r6
 800884c:	4620      	mov	r0, r4
 800884e:	f000 fcb5 	bl	80091bc <__mdiff>
 8008852:	68c2      	ldr	r2, [r0, #12]
 8008854:	9b08      	ldr	r3, [sp, #32]
 8008856:	4605      	mov	r5, r0
 8008858:	bb02      	cbnz	r2, 800889c <_dtoa_r+0xa7c>
 800885a:	4601      	mov	r1, r0
 800885c:	4658      	mov	r0, fp
 800885e:	f000 fc91 	bl	8009184 <__mcmp>
 8008862:	9b08      	ldr	r3, [sp, #32]
 8008864:	4602      	mov	r2, r0
 8008866:	4629      	mov	r1, r5
 8008868:	4620      	mov	r0, r4
 800886a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800886e:	f000 fa4b 	bl	8008d08 <_Bfree>
 8008872:	9b05      	ldr	r3, [sp, #20]
 8008874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008876:	9d01      	ldr	r5, [sp, #4]
 8008878:	ea43 0102 	orr.w	r1, r3, r2
 800887c:	9b06      	ldr	r3, [sp, #24]
 800887e:	430b      	orrs	r3, r1
 8008880:	9b08      	ldr	r3, [sp, #32]
 8008882:	d10d      	bne.n	80088a0 <_dtoa_r+0xa80>
 8008884:	2b39      	cmp	r3, #57	; 0x39
 8008886:	d029      	beq.n	80088dc <_dtoa_r+0xabc>
 8008888:	f1b9 0f00 	cmp.w	r9, #0
 800888c:	dd01      	ble.n	8008892 <_dtoa_r+0xa72>
 800888e:	9b04      	ldr	r3, [sp, #16]
 8008890:	3331      	adds	r3, #49	; 0x31
 8008892:	9a02      	ldr	r2, [sp, #8]
 8008894:	7013      	strb	r3, [r2, #0]
 8008896:	e774      	b.n	8008782 <_dtoa_r+0x962>
 8008898:	4638      	mov	r0, r7
 800889a:	e7b9      	b.n	8008810 <_dtoa_r+0x9f0>
 800889c:	2201      	movs	r2, #1
 800889e:	e7e2      	b.n	8008866 <_dtoa_r+0xa46>
 80088a0:	f1b9 0f00 	cmp.w	r9, #0
 80088a4:	db06      	blt.n	80088b4 <_dtoa_r+0xa94>
 80088a6:	9905      	ldr	r1, [sp, #20]
 80088a8:	ea41 0909 	orr.w	r9, r1, r9
 80088ac:	9906      	ldr	r1, [sp, #24]
 80088ae:	ea59 0101 	orrs.w	r1, r9, r1
 80088b2:	d120      	bne.n	80088f6 <_dtoa_r+0xad6>
 80088b4:	2a00      	cmp	r2, #0
 80088b6:	ddec      	ble.n	8008892 <_dtoa_r+0xa72>
 80088b8:	4659      	mov	r1, fp
 80088ba:	2201      	movs	r2, #1
 80088bc:	4620      	mov	r0, r4
 80088be:	9301      	str	r3, [sp, #4]
 80088c0:	f000 fbf4 	bl	80090ac <__lshift>
 80088c4:	4631      	mov	r1, r6
 80088c6:	4683      	mov	fp, r0
 80088c8:	f000 fc5c 	bl	8009184 <__mcmp>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	9b01      	ldr	r3, [sp, #4]
 80088d0:	dc02      	bgt.n	80088d8 <_dtoa_r+0xab8>
 80088d2:	d1de      	bne.n	8008892 <_dtoa_r+0xa72>
 80088d4:	07da      	lsls	r2, r3, #31
 80088d6:	d5dc      	bpl.n	8008892 <_dtoa_r+0xa72>
 80088d8:	2b39      	cmp	r3, #57	; 0x39
 80088da:	d1d8      	bne.n	800888e <_dtoa_r+0xa6e>
 80088dc:	9a02      	ldr	r2, [sp, #8]
 80088de:	2339      	movs	r3, #57	; 0x39
 80088e0:	7013      	strb	r3, [r2, #0]
 80088e2:	462b      	mov	r3, r5
 80088e4:	461d      	mov	r5, r3
 80088e6:	3b01      	subs	r3, #1
 80088e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80088ec:	2a39      	cmp	r2, #57	; 0x39
 80088ee:	d050      	beq.n	8008992 <_dtoa_r+0xb72>
 80088f0:	3201      	adds	r2, #1
 80088f2:	701a      	strb	r2, [r3, #0]
 80088f4:	e745      	b.n	8008782 <_dtoa_r+0x962>
 80088f6:	2a00      	cmp	r2, #0
 80088f8:	dd03      	ble.n	8008902 <_dtoa_r+0xae2>
 80088fa:	2b39      	cmp	r3, #57	; 0x39
 80088fc:	d0ee      	beq.n	80088dc <_dtoa_r+0xabc>
 80088fe:	3301      	adds	r3, #1
 8008900:	e7c7      	b.n	8008892 <_dtoa_r+0xa72>
 8008902:	9a01      	ldr	r2, [sp, #4]
 8008904:	9907      	ldr	r1, [sp, #28]
 8008906:	f802 3c01 	strb.w	r3, [r2, #-1]
 800890a:	428a      	cmp	r2, r1
 800890c:	d02a      	beq.n	8008964 <_dtoa_r+0xb44>
 800890e:	4659      	mov	r1, fp
 8008910:	2300      	movs	r3, #0
 8008912:	220a      	movs	r2, #10
 8008914:	4620      	mov	r0, r4
 8008916:	f000 fa19 	bl	8008d4c <__multadd>
 800891a:	45b8      	cmp	r8, r7
 800891c:	4683      	mov	fp, r0
 800891e:	f04f 0300 	mov.w	r3, #0
 8008922:	f04f 020a 	mov.w	r2, #10
 8008926:	4641      	mov	r1, r8
 8008928:	4620      	mov	r0, r4
 800892a:	d107      	bne.n	800893c <_dtoa_r+0xb1c>
 800892c:	f000 fa0e 	bl	8008d4c <__multadd>
 8008930:	4680      	mov	r8, r0
 8008932:	4607      	mov	r7, r0
 8008934:	9b01      	ldr	r3, [sp, #4]
 8008936:	3301      	adds	r3, #1
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	e775      	b.n	8008828 <_dtoa_r+0xa08>
 800893c:	f000 fa06 	bl	8008d4c <__multadd>
 8008940:	4639      	mov	r1, r7
 8008942:	4680      	mov	r8, r0
 8008944:	2300      	movs	r3, #0
 8008946:	220a      	movs	r2, #10
 8008948:	4620      	mov	r0, r4
 800894a:	f000 f9ff 	bl	8008d4c <__multadd>
 800894e:	4607      	mov	r7, r0
 8008950:	e7f0      	b.n	8008934 <_dtoa_r+0xb14>
 8008952:	f1b9 0f00 	cmp.w	r9, #0
 8008956:	9a00      	ldr	r2, [sp, #0]
 8008958:	bfcc      	ite	gt
 800895a:	464d      	movgt	r5, r9
 800895c:	2501      	movle	r5, #1
 800895e:	4415      	add	r5, r2
 8008960:	f04f 0800 	mov.w	r8, #0
 8008964:	4659      	mov	r1, fp
 8008966:	2201      	movs	r2, #1
 8008968:	4620      	mov	r0, r4
 800896a:	9301      	str	r3, [sp, #4]
 800896c:	f000 fb9e 	bl	80090ac <__lshift>
 8008970:	4631      	mov	r1, r6
 8008972:	4683      	mov	fp, r0
 8008974:	f000 fc06 	bl	8009184 <__mcmp>
 8008978:	2800      	cmp	r0, #0
 800897a:	dcb2      	bgt.n	80088e2 <_dtoa_r+0xac2>
 800897c:	d102      	bne.n	8008984 <_dtoa_r+0xb64>
 800897e:	9b01      	ldr	r3, [sp, #4]
 8008980:	07db      	lsls	r3, r3, #31
 8008982:	d4ae      	bmi.n	80088e2 <_dtoa_r+0xac2>
 8008984:	462b      	mov	r3, r5
 8008986:	461d      	mov	r5, r3
 8008988:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800898c:	2a30      	cmp	r2, #48	; 0x30
 800898e:	d0fa      	beq.n	8008986 <_dtoa_r+0xb66>
 8008990:	e6f7      	b.n	8008782 <_dtoa_r+0x962>
 8008992:	9a00      	ldr	r2, [sp, #0]
 8008994:	429a      	cmp	r2, r3
 8008996:	d1a5      	bne.n	80088e4 <_dtoa_r+0xac4>
 8008998:	f10a 0a01 	add.w	sl, sl, #1
 800899c:	2331      	movs	r3, #49	; 0x31
 800899e:	e779      	b.n	8008894 <_dtoa_r+0xa74>
 80089a0:	4b13      	ldr	r3, [pc, #76]	; (80089f0 <_dtoa_r+0xbd0>)
 80089a2:	f7ff baaf 	b.w	8007f04 <_dtoa_r+0xe4>
 80089a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f47f aa86 	bne.w	8007eba <_dtoa_r+0x9a>
 80089ae:	4b11      	ldr	r3, [pc, #68]	; (80089f4 <_dtoa_r+0xbd4>)
 80089b0:	f7ff baa8 	b.w	8007f04 <_dtoa_r+0xe4>
 80089b4:	f1b9 0f00 	cmp.w	r9, #0
 80089b8:	dc03      	bgt.n	80089c2 <_dtoa_r+0xba2>
 80089ba:	9b05      	ldr	r3, [sp, #20]
 80089bc:	2b02      	cmp	r3, #2
 80089be:	f73f aec9 	bgt.w	8008754 <_dtoa_r+0x934>
 80089c2:	9d00      	ldr	r5, [sp, #0]
 80089c4:	4631      	mov	r1, r6
 80089c6:	4658      	mov	r0, fp
 80089c8:	f7ff f99e 	bl	8007d08 <quorem>
 80089cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80089d0:	f805 3b01 	strb.w	r3, [r5], #1
 80089d4:	9a00      	ldr	r2, [sp, #0]
 80089d6:	1aaa      	subs	r2, r5, r2
 80089d8:	4591      	cmp	r9, r2
 80089da:	ddba      	ble.n	8008952 <_dtoa_r+0xb32>
 80089dc:	4659      	mov	r1, fp
 80089de:	2300      	movs	r3, #0
 80089e0:	220a      	movs	r2, #10
 80089e2:	4620      	mov	r0, r4
 80089e4:	f000 f9b2 	bl	8008d4c <__multadd>
 80089e8:	4683      	mov	fp, r0
 80089ea:	e7eb      	b.n	80089c4 <_dtoa_r+0xba4>
 80089ec:	08009ab3 	.word	0x08009ab3
 80089f0:	08009a0c 	.word	0x08009a0c
 80089f4:	08009a30 	.word	0x08009a30

080089f8 <__sflush_r>:
 80089f8:	898a      	ldrh	r2, [r1, #12]
 80089fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089fe:	4605      	mov	r5, r0
 8008a00:	0710      	lsls	r0, r2, #28
 8008a02:	460c      	mov	r4, r1
 8008a04:	d458      	bmi.n	8008ab8 <__sflush_r+0xc0>
 8008a06:	684b      	ldr	r3, [r1, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	dc05      	bgt.n	8008a18 <__sflush_r+0x20>
 8008a0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	dc02      	bgt.n	8008a18 <__sflush_r+0x20>
 8008a12:	2000      	movs	r0, #0
 8008a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a1a:	2e00      	cmp	r6, #0
 8008a1c:	d0f9      	beq.n	8008a12 <__sflush_r+0x1a>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a24:	682f      	ldr	r7, [r5, #0]
 8008a26:	602b      	str	r3, [r5, #0]
 8008a28:	d032      	beq.n	8008a90 <__sflush_r+0x98>
 8008a2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	075a      	lsls	r2, r3, #29
 8008a30:	d505      	bpl.n	8008a3e <__sflush_r+0x46>
 8008a32:	6863      	ldr	r3, [r4, #4]
 8008a34:	1ac0      	subs	r0, r0, r3
 8008a36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a38:	b10b      	cbz	r3, 8008a3e <__sflush_r+0x46>
 8008a3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a3c:	1ac0      	subs	r0, r0, r3
 8008a3e:	2300      	movs	r3, #0
 8008a40:	4602      	mov	r2, r0
 8008a42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a44:	6a21      	ldr	r1, [r4, #32]
 8008a46:	4628      	mov	r0, r5
 8008a48:	47b0      	blx	r6
 8008a4a:	1c43      	adds	r3, r0, #1
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	d106      	bne.n	8008a5e <__sflush_r+0x66>
 8008a50:	6829      	ldr	r1, [r5, #0]
 8008a52:	291d      	cmp	r1, #29
 8008a54:	d82c      	bhi.n	8008ab0 <__sflush_r+0xb8>
 8008a56:	4a2a      	ldr	r2, [pc, #168]	; (8008b00 <__sflush_r+0x108>)
 8008a58:	40ca      	lsrs	r2, r1
 8008a5a:	07d6      	lsls	r6, r2, #31
 8008a5c:	d528      	bpl.n	8008ab0 <__sflush_r+0xb8>
 8008a5e:	2200      	movs	r2, #0
 8008a60:	6062      	str	r2, [r4, #4]
 8008a62:	04d9      	lsls	r1, r3, #19
 8008a64:	6922      	ldr	r2, [r4, #16]
 8008a66:	6022      	str	r2, [r4, #0]
 8008a68:	d504      	bpl.n	8008a74 <__sflush_r+0x7c>
 8008a6a:	1c42      	adds	r2, r0, #1
 8008a6c:	d101      	bne.n	8008a72 <__sflush_r+0x7a>
 8008a6e:	682b      	ldr	r3, [r5, #0]
 8008a70:	b903      	cbnz	r3, 8008a74 <__sflush_r+0x7c>
 8008a72:	6560      	str	r0, [r4, #84]	; 0x54
 8008a74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a76:	602f      	str	r7, [r5, #0]
 8008a78:	2900      	cmp	r1, #0
 8008a7a:	d0ca      	beq.n	8008a12 <__sflush_r+0x1a>
 8008a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a80:	4299      	cmp	r1, r3
 8008a82:	d002      	beq.n	8008a8a <__sflush_r+0x92>
 8008a84:	4628      	mov	r0, r5
 8008a86:	f7fe fadd 	bl	8007044 <_free_r>
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	6360      	str	r0, [r4, #52]	; 0x34
 8008a8e:	e7c1      	b.n	8008a14 <__sflush_r+0x1c>
 8008a90:	6a21      	ldr	r1, [r4, #32]
 8008a92:	2301      	movs	r3, #1
 8008a94:	4628      	mov	r0, r5
 8008a96:	47b0      	blx	r6
 8008a98:	1c41      	adds	r1, r0, #1
 8008a9a:	d1c7      	bne.n	8008a2c <__sflush_r+0x34>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d0c4      	beq.n	8008a2c <__sflush_r+0x34>
 8008aa2:	2b1d      	cmp	r3, #29
 8008aa4:	d001      	beq.n	8008aaa <__sflush_r+0xb2>
 8008aa6:	2b16      	cmp	r3, #22
 8008aa8:	d101      	bne.n	8008aae <__sflush_r+0xb6>
 8008aaa:	602f      	str	r7, [r5, #0]
 8008aac:	e7b1      	b.n	8008a12 <__sflush_r+0x1a>
 8008aae:	89a3      	ldrh	r3, [r4, #12]
 8008ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ab4:	81a3      	strh	r3, [r4, #12]
 8008ab6:	e7ad      	b.n	8008a14 <__sflush_r+0x1c>
 8008ab8:	690f      	ldr	r7, [r1, #16]
 8008aba:	2f00      	cmp	r7, #0
 8008abc:	d0a9      	beq.n	8008a12 <__sflush_r+0x1a>
 8008abe:	0793      	lsls	r3, r2, #30
 8008ac0:	680e      	ldr	r6, [r1, #0]
 8008ac2:	bf08      	it	eq
 8008ac4:	694b      	ldreq	r3, [r1, #20]
 8008ac6:	600f      	str	r7, [r1, #0]
 8008ac8:	bf18      	it	ne
 8008aca:	2300      	movne	r3, #0
 8008acc:	eba6 0807 	sub.w	r8, r6, r7
 8008ad0:	608b      	str	r3, [r1, #8]
 8008ad2:	f1b8 0f00 	cmp.w	r8, #0
 8008ad6:	dd9c      	ble.n	8008a12 <__sflush_r+0x1a>
 8008ad8:	6a21      	ldr	r1, [r4, #32]
 8008ada:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008adc:	4643      	mov	r3, r8
 8008ade:	463a      	mov	r2, r7
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	47b0      	blx	r6
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	dc06      	bgt.n	8008af6 <__sflush_r+0xfe>
 8008ae8:	89a3      	ldrh	r3, [r4, #12]
 8008aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aee:	81a3      	strh	r3, [r4, #12]
 8008af0:	f04f 30ff 	mov.w	r0, #4294967295
 8008af4:	e78e      	b.n	8008a14 <__sflush_r+0x1c>
 8008af6:	4407      	add	r7, r0
 8008af8:	eba8 0800 	sub.w	r8, r8, r0
 8008afc:	e7e9      	b.n	8008ad2 <__sflush_r+0xda>
 8008afe:	bf00      	nop
 8008b00:	20400001 	.word	0x20400001

08008b04 <_fflush_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	690b      	ldr	r3, [r1, #16]
 8008b08:	4605      	mov	r5, r0
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	b913      	cbnz	r3, 8008b14 <_fflush_r+0x10>
 8008b0e:	2500      	movs	r5, #0
 8008b10:	4628      	mov	r0, r5
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
 8008b14:	b118      	cbz	r0, 8008b1e <_fflush_r+0x1a>
 8008b16:	6983      	ldr	r3, [r0, #24]
 8008b18:	b90b      	cbnz	r3, 8008b1e <_fflush_r+0x1a>
 8008b1a:	f7fe f9af 	bl	8006e7c <__sinit>
 8008b1e:	4b14      	ldr	r3, [pc, #80]	; (8008b70 <_fflush_r+0x6c>)
 8008b20:	429c      	cmp	r4, r3
 8008b22:	d11b      	bne.n	8008b5c <_fflush_r+0x58>
 8008b24:	686c      	ldr	r4, [r5, #4]
 8008b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d0ef      	beq.n	8008b0e <_fflush_r+0xa>
 8008b2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b30:	07d0      	lsls	r0, r2, #31
 8008b32:	d404      	bmi.n	8008b3e <_fflush_r+0x3a>
 8008b34:	0599      	lsls	r1, r3, #22
 8008b36:	d402      	bmi.n	8008b3e <_fflush_r+0x3a>
 8008b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b3a:	f7fe fa62 	bl	8007002 <__retarget_lock_acquire_recursive>
 8008b3e:	4628      	mov	r0, r5
 8008b40:	4621      	mov	r1, r4
 8008b42:	f7ff ff59 	bl	80089f8 <__sflush_r>
 8008b46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b48:	07da      	lsls	r2, r3, #31
 8008b4a:	4605      	mov	r5, r0
 8008b4c:	d4e0      	bmi.n	8008b10 <_fflush_r+0xc>
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	059b      	lsls	r3, r3, #22
 8008b52:	d4dd      	bmi.n	8008b10 <_fflush_r+0xc>
 8008b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b56:	f7fe fa55 	bl	8007004 <__retarget_lock_release_recursive>
 8008b5a:	e7d9      	b.n	8008b10 <_fflush_r+0xc>
 8008b5c:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <_fflush_r+0x70>)
 8008b5e:	429c      	cmp	r4, r3
 8008b60:	d101      	bne.n	8008b66 <_fflush_r+0x62>
 8008b62:	68ac      	ldr	r4, [r5, #8]
 8008b64:	e7df      	b.n	8008b26 <_fflush_r+0x22>
 8008b66:	4b04      	ldr	r3, [pc, #16]	; (8008b78 <_fflush_r+0x74>)
 8008b68:	429c      	cmp	r4, r3
 8008b6a:	bf08      	it	eq
 8008b6c:	68ec      	ldreq	r4, [r5, #12]
 8008b6e:	e7da      	b.n	8008b26 <_fflush_r+0x22>
 8008b70:	080099b8 	.word	0x080099b8
 8008b74:	080099d8 	.word	0x080099d8
 8008b78:	08009998 	.word	0x08009998

08008b7c <_localeconv_r>:
 8008b7c:	4800      	ldr	r0, [pc, #0]	; (8008b80 <_localeconv_r+0x4>)
 8008b7e:	4770      	bx	lr
 8008b80:	20000200 	.word	0x20000200

08008b84 <_lseek_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4d07      	ldr	r5, [pc, #28]	; (8008ba4 <_lseek_r+0x20>)
 8008b88:	4604      	mov	r4, r0
 8008b8a:	4608      	mov	r0, r1
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	2200      	movs	r2, #0
 8008b90:	602a      	str	r2, [r5, #0]
 8008b92:	461a      	mov	r2, r3
 8008b94:	f7f9 fac4 	bl	8002120 <_lseek>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d102      	bne.n	8008ba2 <_lseek_r+0x1e>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	b103      	cbz	r3, 8008ba2 <_lseek_r+0x1e>
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	2000496c 	.word	0x2000496c

08008ba8 <__swhatbuf_r>:
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	460e      	mov	r6, r1
 8008bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb0:	2900      	cmp	r1, #0
 8008bb2:	b096      	sub	sp, #88	; 0x58
 8008bb4:	4614      	mov	r4, r2
 8008bb6:	461d      	mov	r5, r3
 8008bb8:	da07      	bge.n	8008bca <__swhatbuf_r+0x22>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	602b      	str	r3, [r5, #0]
 8008bbe:	89b3      	ldrh	r3, [r6, #12]
 8008bc0:	061a      	lsls	r2, r3, #24
 8008bc2:	d410      	bmi.n	8008be6 <__swhatbuf_r+0x3e>
 8008bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bc8:	e00e      	b.n	8008be8 <__swhatbuf_r+0x40>
 8008bca:	466a      	mov	r2, sp
 8008bcc:	f000 fd84 	bl	80096d8 <_fstat_r>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	dbf2      	blt.n	8008bba <__swhatbuf_r+0x12>
 8008bd4:	9a01      	ldr	r2, [sp, #4]
 8008bd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008bda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008bde:	425a      	negs	r2, r3
 8008be0:	415a      	adcs	r2, r3
 8008be2:	602a      	str	r2, [r5, #0]
 8008be4:	e7ee      	b.n	8008bc4 <__swhatbuf_r+0x1c>
 8008be6:	2340      	movs	r3, #64	; 0x40
 8008be8:	2000      	movs	r0, #0
 8008bea:	6023      	str	r3, [r4, #0]
 8008bec:	b016      	add	sp, #88	; 0x58
 8008bee:	bd70      	pop	{r4, r5, r6, pc}

08008bf0 <__smakebuf_r>:
 8008bf0:	898b      	ldrh	r3, [r1, #12]
 8008bf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bf4:	079d      	lsls	r5, r3, #30
 8008bf6:	4606      	mov	r6, r0
 8008bf8:	460c      	mov	r4, r1
 8008bfa:	d507      	bpl.n	8008c0c <__smakebuf_r+0x1c>
 8008bfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	6123      	str	r3, [r4, #16]
 8008c04:	2301      	movs	r3, #1
 8008c06:	6163      	str	r3, [r4, #20]
 8008c08:	b002      	add	sp, #8
 8008c0a:	bd70      	pop	{r4, r5, r6, pc}
 8008c0c:	ab01      	add	r3, sp, #4
 8008c0e:	466a      	mov	r2, sp
 8008c10:	f7ff ffca 	bl	8008ba8 <__swhatbuf_r>
 8008c14:	9900      	ldr	r1, [sp, #0]
 8008c16:	4605      	mov	r5, r0
 8008c18:	4630      	mov	r0, r6
 8008c1a:	f7fe fa63 	bl	80070e4 <_malloc_r>
 8008c1e:	b948      	cbnz	r0, 8008c34 <__smakebuf_r+0x44>
 8008c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c24:	059a      	lsls	r2, r3, #22
 8008c26:	d4ef      	bmi.n	8008c08 <__smakebuf_r+0x18>
 8008c28:	f023 0303 	bic.w	r3, r3, #3
 8008c2c:	f043 0302 	orr.w	r3, r3, #2
 8008c30:	81a3      	strh	r3, [r4, #12]
 8008c32:	e7e3      	b.n	8008bfc <__smakebuf_r+0xc>
 8008c34:	4b0d      	ldr	r3, [pc, #52]	; (8008c6c <__smakebuf_r+0x7c>)
 8008c36:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	6020      	str	r0, [r4, #0]
 8008c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c40:	81a3      	strh	r3, [r4, #12]
 8008c42:	9b00      	ldr	r3, [sp, #0]
 8008c44:	6163      	str	r3, [r4, #20]
 8008c46:	9b01      	ldr	r3, [sp, #4]
 8008c48:	6120      	str	r0, [r4, #16]
 8008c4a:	b15b      	cbz	r3, 8008c64 <__smakebuf_r+0x74>
 8008c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c50:	4630      	mov	r0, r6
 8008c52:	f000 fd53 	bl	80096fc <_isatty_r>
 8008c56:	b128      	cbz	r0, 8008c64 <__smakebuf_r+0x74>
 8008c58:	89a3      	ldrh	r3, [r4, #12]
 8008c5a:	f023 0303 	bic.w	r3, r3, #3
 8008c5e:	f043 0301 	orr.w	r3, r3, #1
 8008c62:	81a3      	strh	r3, [r4, #12]
 8008c64:	89a0      	ldrh	r0, [r4, #12]
 8008c66:	4305      	orrs	r5, r0
 8008c68:	81a5      	strh	r5, [r4, #12]
 8008c6a:	e7cd      	b.n	8008c08 <__smakebuf_r+0x18>
 8008c6c:	08006e15 	.word	0x08006e15

08008c70 <__malloc_lock>:
 8008c70:	4801      	ldr	r0, [pc, #4]	; (8008c78 <__malloc_lock+0x8>)
 8008c72:	f7fe b9c6 	b.w	8007002 <__retarget_lock_acquire_recursive>
 8008c76:	bf00      	nop
 8008c78:	20004964 	.word	0x20004964

08008c7c <__malloc_unlock>:
 8008c7c:	4801      	ldr	r0, [pc, #4]	; (8008c84 <__malloc_unlock+0x8>)
 8008c7e:	f7fe b9c1 	b.w	8007004 <__retarget_lock_release_recursive>
 8008c82:	bf00      	nop
 8008c84:	20004964 	.word	0x20004964

08008c88 <_Balloc>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	460d      	mov	r5, r1
 8008c90:	b976      	cbnz	r6, 8008cb0 <_Balloc+0x28>
 8008c92:	2010      	movs	r0, #16
 8008c94:	f7fe f9b8 	bl	8007008 <malloc>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	6260      	str	r0, [r4, #36]	; 0x24
 8008c9c:	b920      	cbnz	r0, 8008ca8 <_Balloc+0x20>
 8008c9e:	4b18      	ldr	r3, [pc, #96]	; (8008d00 <_Balloc+0x78>)
 8008ca0:	4818      	ldr	r0, [pc, #96]	; (8008d04 <_Balloc+0x7c>)
 8008ca2:	2166      	movs	r1, #102	; 0x66
 8008ca4:	f000 fce8 	bl	8009678 <__assert_func>
 8008ca8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cac:	6006      	str	r6, [r0, #0]
 8008cae:	60c6      	str	r6, [r0, #12]
 8008cb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008cb2:	68f3      	ldr	r3, [r6, #12]
 8008cb4:	b183      	cbz	r3, 8008cd8 <_Balloc+0x50>
 8008cb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008cbe:	b9b8      	cbnz	r0, 8008cf0 <_Balloc+0x68>
 8008cc0:	2101      	movs	r1, #1
 8008cc2:	fa01 f605 	lsl.w	r6, r1, r5
 8008cc6:	1d72      	adds	r2, r6, #5
 8008cc8:	0092      	lsls	r2, r2, #2
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f000 fb5a 	bl	8009384 <_calloc_r>
 8008cd0:	b160      	cbz	r0, 8008cec <_Balloc+0x64>
 8008cd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cd6:	e00e      	b.n	8008cf6 <_Balloc+0x6e>
 8008cd8:	2221      	movs	r2, #33	; 0x21
 8008cda:	2104      	movs	r1, #4
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f000 fb51 	bl	8009384 <_calloc_r>
 8008ce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ce4:	60f0      	str	r0, [r6, #12]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1e4      	bne.n	8008cb6 <_Balloc+0x2e>
 8008cec:	2000      	movs	r0, #0
 8008cee:	bd70      	pop	{r4, r5, r6, pc}
 8008cf0:	6802      	ldr	r2, [r0, #0]
 8008cf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cfc:	e7f7      	b.n	8008cee <_Balloc+0x66>
 8008cfe:	bf00      	nop
 8008d00:	08009a3d 	.word	0x08009a3d
 8008d04:	08009ac4 	.word	0x08009ac4

08008d08 <_Bfree>:
 8008d08:	b570      	push	{r4, r5, r6, lr}
 8008d0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	460c      	mov	r4, r1
 8008d10:	b976      	cbnz	r6, 8008d30 <_Bfree+0x28>
 8008d12:	2010      	movs	r0, #16
 8008d14:	f7fe f978 	bl	8007008 <malloc>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	6268      	str	r0, [r5, #36]	; 0x24
 8008d1c:	b920      	cbnz	r0, 8008d28 <_Bfree+0x20>
 8008d1e:	4b09      	ldr	r3, [pc, #36]	; (8008d44 <_Bfree+0x3c>)
 8008d20:	4809      	ldr	r0, [pc, #36]	; (8008d48 <_Bfree+0x40>)
 8008d22:	218a      	movs	r1, #138	; 0x8a
 8008d24:	f000 fca8 	bl	8009678 <__assert_func>
 8008d28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d2c:	6006      	str	r6, [r0, #0]
 8008d2e:	60c6      	str	r6, [r0, #12]
 8008d30:	b13c      	cbz	r4, 8008d42 <_Bfree+0x3a>
 8008d32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d34:	6862      	ldr	r2, [r4, #4]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d3c:	6021      	str	r1, [r4, #0]
 8008d3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d42:	bd70      	pop	{r4, r5, r6, pc}
 8008d44:	08009a3d 	.word	0x08009a3d
 8008d48:	08009ac4 	.word	0x08009ac4

08008d4c <__multadd>:
 8008d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d50:	690e      	ldr	r6, [r1, #16]
 8008d52:	4607      	mov	r7, r0
 8008d54:	4698      	mov	r8, r3
 8008d56:	460c      	mov	r4, r1
 8008d58:	f101 0014 	add.w	r0, r1, #20
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	6805      	ldr	r5, [r0, #0]
 8008d60:	b2a9      	uxth	r1, r5
 8008d62:	fb02 8101 	mla	r1, r2, r1, r8
 8008d66:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008d6a:	0c2d      	lsrs	r5, r5, #16
 8008d6c:	fb02 c505 	mla	r5, r2, r5, ip
 8008d70:	b289      	uxth	r1, r1
 8008d72:	3301      	adds	r3, #1
 8008d74:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008d78:	429e      	cmp	r6, r3
 8008d7a:	f840 1b04 	str.w	r1, [r0], #4
 8008d7e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008d82:	dcec      	bgt.n	8008d5e <__multadd+0x12>
 8008d84:	f1b8 0f00 	cmp.w	r8, #0
 8008d88:	d022      	beq.n	8008dd0 <__multadd+0x84>
 8008d8a:	68a3      	ldr	r3, [r4, #8]
 8008d8c:	42b3      	cmp	r3, r6
 8008d8e:	dc19      	bgt.n	8008dc4 <__multadd+0x78>
 8008d90:	6861      	ldr	r1, [r4, #4]
 8008d92:	4638      	mov	r0, r7
 8008d94:	3101      	adds	r1, #1
 8008d96:	f7ff ff77 	bl	8008c88 <_Balloc>
 8008d9a:	4605      	mov	r5, r0
 8008d9c:	b928      	cbnz	r0, 8008daa <__multadd+0x5e>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	4b0d      	ldr	r3, [pc, #52]	; (8008dd8 <__multadd+0x8c>)
 8008da2:	480e      	ldr	r0, [pc, #56]	; (8008ddc <__multadd+0x90>)
 8008da4:	21b5      	movs	r1, #181	; 0xb5
 8008da6:	f000 fc67 	bl	8009678 <__assert_func>
 8008daa:	6922      	ldr	r2, [r4, #16]
 8008dac:	3202      	adds	r2, #2
 8008dae:	f104 010c 	add.w	r1, r4, #12
 8008db2:	0092      	lsls	r2, r2, #2
 8008db4:	300c      	adds	r0, #12
 8008db6:	f7fe f92f 	bl	8007018 <memcpy>
 8008dba:	4621      	mov	r1, r4
 8008dbc:	4638      	mov	r0, r7
 8008dbe:	f7ff ffa3 	bl	8008d08 <_Bfree>
 8008dc2:	462c      	mov	r4, r5
 8008dc4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008dc8:	3601      	adds	r6, #1
 8008dca:	f8c3 8014 	str.w	r8, [r3, #20]
 8008dce:	6126      	str	r6, [r4, #16]
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dd6:	bf00      	nop
 8008dd8:	08009ab3 	.word	0x08009ab3
 8008ddc:	08009ac4 	.word	0x08009ac4

08008de0 <__hi0bits>:
 8008de0:	0c03      	lsrs	r3, r0, #16
 8008de2:	041b      	lsls	r3, r3, #16
 8008de4:	b9d3      	cbnz	r3, 8008e1c <__hi0bits+0x3c>
 8008de6:	0400      	lsls	r0, r0, #16
 8008de8:	2310      	movs	r3, #16
 8008dea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008dee:	bf04      	itt	eq
 8008df0:	0200      	lsleq	r0, r0, #8
 8008df2:	3308      	addeq	r3, #8
 8008df4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008df8:	bf04      	itt	eq
 8008dfa:	0100      	lsleq	r0, r0, #4
 8008dfc:	3304      	addeq	r3, #4
 8008dfe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e02:	bf04      	itt	eq
 8008e04:	0080      	lsleq	r0, r0, #2
 8008e06:	3302      	addeq	r3, #2
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	db05      	blt.n	8008e18 <__hi0bits+0x38>
 8008e0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e10:	f103 0301 	add.w	r3, r3, #1
 8008e14:	bf08      	it	eq
 8008e16:	2320      	moveq	r3, #32
 8008e18:	4618      	mov	r0, r3
 8008e1a:	4770      	bx	lr
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	e7e4      	b.n	8008dea <__hi0bits+0xa>

08008e20 <__lo0bits>:
 8008e20:	6803      	ldr	r3, [r0, #0]
 8008e22:	f013 0207 	ands.w	r2, r3, #7
 8008e26:	4601      	mov	r1, r0
 8008e28:	d00b      	beq.n	8008e42 <__lo0bits+0x22>
 8008e2a:	07da      	lsls	r2, r3, #31
 8008e2c:	d424      	bmi.n	8008e78 <__lo0bits+0x58>
 8008e2e:	0798      	lsls	r0, r3, #30
 8008e30:	bf49      	itett	mi
 8008e32:	085b      	lsrmi	r3, r3, #1
 8008e34:	089b      	lsrpl	r3, r3, #2
 8008e36:	2001      	movmi	r0, #1
 8008e38:	600b      	strmi	r3, [r1, #0]
 8008e3a:	bf5c      	itt	pl
 8008e3c:	600b      	strpl	r3, [r1, #0]
 8008e3e:	2002      	movpl	r0, #2
 8008e40:	4770      	bx	lr
 8008e42:	b298      	uxth	r0, r3
 8008e44:	b9b0      	cbnz	r0, 8008e74 <__lo0bits+0x54>
 8008e46:	0c1b      	lsrs	r3, r3, #16
 8008e48:	2010      	movs	r0, #16
 8008e4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008e4e:	bf04      	itt	eq
 8008e50:	0a1b      	lsreq	r3, r3, #8
 8008e52:	3008      	addeq	r0, #8
 8008e54:	071a      	lsls	r2, r3, #28
 8008e56:	bf04      	itt	eq
 8008e58:	091b      	lsreq	r3, r3, #4
 8008e5a:	3004      	addeq	r0, #4
 8008e5c:	079a      	lsls	r2, r3, #30
 8008e5e:	bf04      	itt	eq
 8008e60:	089b      	lsreq	r3, r3, #2
 8008e62:	3002      	addeq	r0, #2
 8008e64:	07da      	lsls	r2, r3, #31
 8008e66:	d403      	bmi.n	8008e70 <__lo0bits+0x50>
 8008e68:	085b      	lsrs	r3, r3, #1
 8008e6a:	f100 0001 	add.w	r0, r0, #1
 8008e6e:	d005      	beq.n	8008e7c <__lo0bits+0x5c>
 8008e70:	600b      	str	r3, [r1, #0]
 8008e72:	4770      	bx	lr
 8008e74:	4610      	mov	r0, r2
 8008e76:	e7e8      	b.n	8008e4a <__lo0bits+0x2a>
 8008e78:	2000      	movs	r0, #0
 8008e7a:	4770      	bx	lr
 8008e7c:	2020      	movs	r0, #32
 8008e7e:	4770      	bx	lr

08008e80 <__i2b>:
 8008e80:	b510      	push	{r4, lr}
 8008e82:	460c      	mov	r4, r1
 8008e84:	2101      	movs	r1, #1
 8008e86:	f7ff feff 	bl	8008c88 <_Balloc>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	b928      	cbnz	r0, 8008e9a <__i2b+0x1a>
 8008e8e:	4b05      	ldr	r3, [pc, #20]	; (8008ea4 <__i2b+0x24>)
 8008e90:	4805      	ldr	r0, [pc, #20]	; (8008ea8 <__i2b+0x28>)
 8008e92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e96:	f000 fbef 	bl	8009678 <__assert_func>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	6144      	str	r4, [r0, #20]
 8008e9e:	6103      	str	r3, [r0, #16]
 8008ea0:	bd10      	pop	{r4, pc}
 8008ea2:	bf00      	nop
 8008ea4:	08009ab3 	.word	0x08009ab3
 8008ea8:	08009ac4 	.word	0x08009ac4

08008eac <__multiply>:
 8008eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb0:	4614      	mov	r4, r2
 8008eb2:	690a      	ldr	r2, [r1, #16]
 8008eb4:	6923      	ldr	r3, [r4, #16]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	bfb8      	it	lt
 8008eba:	460b      	movlt	r3, r1
 8008ebc:	460d      	mov	r5, r1
 8008ebe:	bfbc      	itt	lt
 8008ec0:	4625      	movlt	r5, r4
 8008ec2:	461c      	movlt	r4, r3
 8008ec4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008ec8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008ecc:	68ab      	ldr	r3, [r5, #8]
 8008ece:	6869      	ldr	r1, [r5, #4]
 8008ed0:	eb0a 0709 	add.w	r7, sl, r9
 8008ed4:	42bb      	cmp	r3, r7
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	bfb8      	it	lt
 8008eda:	3101      	addlt	r1, #1
 8008edc:	f7ff fed4 	bl	8008c88 <_Balloc>
 8008ee0:	b930      	cbnz	r0, 8008ef0 <__multiply+0x44>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	4b42      	ldr	r3, [pc, #264]	; (8008ff0 <__multiply+0x144>)
 8008ee6:	4843      	ldr	r0, [pc, #268]	; (8008ff4 <__multiply+0x148>)
 8008ee8:	f240 115d 	movw	r1, #349	; 0x15d
 8008eec:	f000 fbc4 	bl	8009678 <__assert_func>
 8008ef0:	f100 0614 	add.w	r6, r0, #20
 8008ef4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008ef8:	4633      	mov	r3, r6
 8008efa:	2200      	movs	r2, #0
 8008efc:	4543      	cmp	r3, r8
 8008efe:	d31e      	bcc.n	8008f3e <__multiply+0x92>
 8008f00:	f105 0c14 	add.w	ip, r5, #20
 8008f04:	f104 0314 	add.w	r3, r4, #20
 8008f08:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008f0c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008f10:	9202      	str	r2, [sp, #8]
 8008f12:	ebac 0205 	sub.w	r2, ip, r5
 8008f16:	3a15      	subs	r2, #21
 8008f18:	f022 0203 	bic.w	r2, r2, #3
 8008f1c:	3204      	adds	r2, #4
 8008f1e:	f105 0115 	add.w	r1, r5, #21
 8008f22:	458c      	cmp	ip, r1
 8008f24:	bf38      	it	cc
 8008f26:	2204      	movcc	r2, #4
 8008f28:	9201      	str	r2, [sp, #4]
 8008f2a:	9a02      	ldr	r2, [sp, #8]
 8008f2c:	9303      	str	r3, [sp, #12]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d808      	bhi.n	8008f44 <__multiply+0x98>
 8008f32:	2f00      	cmp	r7, #0
 8008f34:	dc55      	bgt.n	8008fe2 <__multiply+0x136>
 8008f36:	6107      	str	r7, [r0, #16]
 8008f38:	b005      	add	sp, #20
 8008f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f3e:	f843 2b04 	str.w	r2, [r3], #4
 8008f42:	e7db      	b.n	8008efc <__multiply+0x50>
 8008f44:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f48:	f1ba 0f00 	cmp.w	sl, #0
 8008f4c:	d020      	beq.n	8008f90 <__multiply+0xe4>
 8008f4e:	f105 0e14 	add.w	lr, r5, #20
 8008f52:	46b1      	mov	r9, r6
 8008f54:	2200      	movs	r2, #0
 8008f56:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008f5a:	f8d9 b000 	ldr.w	fp, [r9]
 8008f5e:	b2a1      	uxth	r1, r4
 8008f60:	fa1f fb8b 	uxth.w	fp, fp
 8008f64:	fb0a b101 	mla	r1, sl, r1, fp
 8008f68:	4411      	add	r1, r2
 8008f6a:	f8d9 2000 	ldr.w	r2, [r9]
 8008f6e:	0c24      	lsrs	r4, r4, #16
 8008f70:	0c12      	lsrs	r2, r2, #16
 8008f72:	fb0a 2404 	mla	r4, sl, r4, r2
 8008f76:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008f7a:	b289      	uxth	r1, r1
 8008f7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008f80:	45f4      	cmp	ip, lr
 8008f82:	f849 1b04 	str.w	r1, [r9], #4
 8008f86:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008f8a:	d8e4      	bhi.n	8008f56 <__multiply+0xaa>
 8008f8c:	9901      	ldr	r1, [sp, #4]
 8008f8e:	5072      	str	r2, [r6, r1]
 8008f90:	9a03      	ldr	r2, [sp, #12]
 8008f92:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f96:	3304      	adds	r3, #4
 8008f98:	f1b9 0f00 	cmp.w	r9, #0
 8008f9c:	d01f      	beq.n	8008fde <__multiply+0x132>
 8008f9e:	6834      	ldr	r4, [r6, #0]
 8008fa0:	f105 0114 	add.w	r1, r5, #20
 8008fa4:	46b6      	mov	lr, r6
 8008fa6:	f04f 0a00 	mov.w	sl, #0
 8008faa:	880a      	ldrh	r2, [r1, #0]
 8008fac:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008fb0:	fb09 b202 	mla	r2, r9, r2, fp
 8008fb4:	4492      	add	sl, r2
 8008fb6:	b2a4      	uxth	r4, r4
 8008fb8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008fbc:	f84e 4b04 	str.w	r4, [lr], #4
 8008fc0:	f851 4b04 	ldr.w	r4, [r1], #4
 8008fc4:	f8be 2000 	ldrh.w	r2, [lr]
 8008fc8:	0c24      	lsrs	r4, r4, #16
 8008fca:	fb09 2404 	mla	r4, r9, r4, r2
 8008fce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008fd2:	458c      	cmp	ip, r1
 8008fd4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008fd8:	d8e7      	bhi.n	8008faa <__multiply+0xfe>
 8008fda:	9a01      	ldr	r2, [sp, #4]
 8008fdc:	50b4      	str	r4, [r6, r2]
 8008fde:	3604      	adds	r6, #4
 8008fe0:	e7a3      	b.n	8008f2a <__multiply+0x7e>
 8008fe2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1a5      	bne.n	8008f36 <__multiply+0x8a>
 8008fea:	3f01      	subs	r7, #1
 8008fec:	e7a1      	b.n	8008f32 <__multiply+0x86>
 8008fee:	bf00      	nop
 8008ff0:	08009ab3 	.word	0x08009ab3
 8008ff4:	08009ac4 	.word	0x08009ac4

08008ff8 <__pow5mult>:
 8008ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ffc:	4615      	mov	r5, r2
 8008ffe:	f012 0203 	ands.w	r2, r2, #3
 8009002:	4606      	mov	r6, r0
 8009004:	460f      	mov	r7, r1
 8009006:	d007      	beq.n	8009018 <__pow5mult+0x20>
 8009008:	4c25      	ldr	r4, [pc, #148]	; (80090a0 <__pow5mult+0xa8>)
 800900a:	3a01      	subs	r2, #1
 800900c:	2300      	movs	r3, #0
 800900e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009012:	f7ff fe9b 	bl	8008d4c <__multadd>
 8009016:	4607      	mov	r7, r0
 8009018:	10ad      	asrs	r5, r5, #2
 800901a:	d03d      	beq.n	8009098 <__pow5mult+0xa0>
 800901c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800901e:	b97c      	cbnz	r4, 8009040 <__pow5mult+0x48>
 8009020:	2010      	movs	r0, #16
 8009022:	f7fd fff1 	bl	8007008 <malloc>
 8009026:	4602      	mov	r2, r0
 8009028:	6270      	str	r0, [r6, #36]	; 0x24
 800902a:	b928      	cbnz	r0, 8009038 <__pow5mult+0x40>
 800902c:	4b1d      	ldr	r3, [pc, #116]	; (80090a4 <__pow5mult+0xac>)
 800902e:	481e      	ldr	r0, [pc, #120]	; (80090a8 <__pow5mult+0xb0>)
 8009030:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009034:	f000 fb20 	bl	8009678 <__assert_func>
 8009038:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800903c:	6004      	str	r4, [r0, #0]
 800903e:	60c4      	str	r4, [r0, #12]
 8009040:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009044:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009048:	b94c      	cbnz	r4, 800905e <__pow5mult+0x66>
 800904a:	f240 2171 	movw	r1, #625	; 0x271
 800904e:	4630      	mov	r0, r6
 8009050:	f7ff ff16 	bl	8008e80 <__i2b>
 8009054:	2300      	movs	r3, #0
 8009056:	f8c8 0008 	str.w	r0, [r8, #8]
 800905a:	4604      	mov	r4, r0
 800905c:	6003      	str	r3, [r0, #0]
 800905e:	f04f 0900 	mov.w	r9, #0
 8009062:	07eb      	lsls	r3, r5, #31
 8009064:	d50a      	bpl.n	800907c <__pow5mult+0x84>
 8009066:	4639      	mov	r1, r7
 8009068:	4622      	mov	r2, r4
 800906a:	4630      	mov	r0, r6
 800906c:	f7ff ff1e 	bl	8008eac <__multiply>
 8009070:	4639      	mov	r1, r7
 8009072:	4680      	mov	r8, r0
 8009074:	4630      	mov	r0, r6
 8009076:	f7ff fe47 	bl	8008d08 <_Bfree>
 800907a:	4647      	mov	r7, r8
 800907c:	106d      	asrs	r5, r5, #1
 800907e:	d00b      	beq.n	8009098 <__pow5mult+0xa0>
 8009080:	6820      	ldr	r0, [r4, #0]
 8009082:	b938      	cbnz	r0, 8009094 <__pow5mult+0x9c>
 8009084:	4622      	mov	r2, r4
 8009086:	4621      	mov	r1, r4
 8009088:	4630      	mov	r0, r6
 800908a:	f7ff ff0f 	bl	8008eac <__multiply>
 800908e:	6020      	str	r0, [r4, #0]
 8009090:	f8c0 9000 	str.w	r9, [r0]
 8009094:	4604      	mov	r4, r0
 8009096:	e7e4      	b.n	8009062 <__pow5mult+0x6a>
 8009098:	4638      	mov	r0, r7
 800909a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800909e:	bf00      	nop
 80090a0:	08009c18 	.word	0x08009c18
 80090a4:	08009a3d 	.word	0x08009a3d
 80090a8:	08009ac4 	.word	0x08009ac4

080090ac <__lshift>:
 80090ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b0:	460c      	mov	r4, r1
 80090b2:	6849      	ldr	r1, [r1, #4]
 80090b4:	6923      	ldr	r3, [r4, #16]
 80090b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090ba:	68a3      	ldr	r3, [r4, #8]
 80090bc:	4607      	mov	r7, r0
 80090be:	4691      	mov	r9, r2
 80090c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090c4:	f108 0601 	add.w	r6, r8, #1
 80090c8:	42b3      	cmp	r3, r6
 80090ca:	db0b      	blt.n	80090e4 <__lshift+0x38>
 80090cc:	4638      	mov	r0, r7
 80090ce:	f7ff fddb 	bl	8008c88 <_Balloc>
 80090d2:	4605      	mov	r5, r0
 80090d4:	b948      	cbnz	r0, 80090ea <__lshift+0x3e>
 80090d6:	4602      	mov	r2, r0
 80090d8:	4b28      	ldr	r3, [pc, #160]	; (800917c <__lshift+0xd0>)
 80090da:	4829      	ldr	r0, [pc, #164]	; (8009180 <__lshift+0xd4>)
 80090dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80090e0:	f000 faca 	bl	8009678 <__assert_func>
 80090e4:	3101      	adds	r1, #1
 80090e6:	005b      	lsls	r3, r3, #1
 80090e8:	e7ee      	b.n	80090c8 <__lshift+0x1c>
 80090ea:	2300      	movs	r3, #0
 80090ec:	f100 0114 	add.w	r1, r0, #20
 80090f0:	f100 0210 	add.w	r2, r0, #16
 80090f4:	4618      	mov	r0, r3
 80090f6:	4553      	cmp	r3, sl
 80090f8:	db33      	blt.n	8009162 <__lshift+0xb6>
 80090fa:	6920      	ldr	r0, [r4, #16]
 80090fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009100:	f104 0314 	add.w	r3, r4, #20
 8009104:	f019 091f 	ands.w	r9, r9, #31
 8009108:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800910c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009110:	d02b      	beq.n	800916a <__lshift+0xbe>
 8009112:	f1c9 0e20 	rsb	lr, r9, #32
 8009116:	468a      	mov	sl, r1
 8009118:	2200      	movs	r2, #0
 800911a:	6818      	ldr	r0, [r3, #0]
 800911c:	fa00 f009 	lsl.w	r0, r0, r9
 8009120:	4302      	orrs	r2, r0
 8009122:	f84a 2b04 	str.w	r2, [sl], #4
 8009126:	f853 2b04 	ldr.w	r2, [r3], #4
 800912a:	459c      	cmp	ip, r3
 800912c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009130:	d8f3      	bhi.n	800911a <__lshift+0x6e>
 8009132:	ebac 0304 	sub.w	r3, ip, r4
 8009136:	3b15      	subs	r3, #21
 8009138:	f023 0303 	bic.w	r3, r3, #3
 800913c:	3304      	adds	r3, #4
 800913e:	f104 0015 	add.w	r0, r4, #21
 8009142:	4584      	cmp	ip, r0
 8009144:	bf38      	it	cc
 8009146:	2304      	movcc	r3, #4
 8009148:	50ca      	str	r2, [r1, r3]
 800914a:	b10a      	cbz	r2, 8009150 <__lshift+0xa4>
 800914c:	f108 0602 	add.w	r6, r8, #2
 8009150:	3e01      	subs	r6, #1
 8009152:	4638      	mov	r0, r7
 8009154:	612e      	str	r6, [r5, #16]
 8009156:	4621      	mov	r1, r4
 8009158:	f7ff fdd6 	bl	8008d08 <_Bfree>
 800915c:	4628      	mov	r0, r5
 800915e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009162:	f842 0f04 	str.w	r0, [r2, #4]!
 8009166:	3301      	adds	r3, #1
 8009168:	e7c5      	b.n	80090f6 <__lshift+0x4a>
 800916a:	3904      	subs	r1, #4
 800916c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009170:	f841 2f04 	str.w	r2, [r1, #4]!
 8009174:	459c      	cmp	ip, r3
 8009176:	d8f9      	bhi.n	800916c <__lshift+0xc0>
 8009178:	e7ea      	b.n	8009150 <__lshift+0xa4>
 800917a:	bf00      	nop
 800917c:	08009ab3 	.word	0x08009ab3
 8009180:	08009ac4 	.word	0x08009ac4

08009184 <__mcmp>:
 8009184:	b530      	push	{r4, r5, lr}
 8009186:	6902      	ldr	r2, [r0, #16]
 8009188:	690c      	ldr	r4, [r1, #16]
 800918a:	1b12      	subs	r2, r2, r4
 800918c:	d10e      	bne.n	80091ac <__mcmp+0x28>
 800918e:	f100 0314 	add.w	r3, r0, #20
 8009192:	3114      	adds	r1, #20
 8009194:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009198:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800919c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80091a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80091a4:	42a5      	cmp	r5, r4
 80091a6:	d003      	beq.n	80091b0 <__mcmp+0x2c>
 80091a8:	d305      	bcc.n	80091b6 <__mcmp+0x32>
 80091aa:	2201      	movs	r2, #1
 80091ac:	4610      	mov	r0, r2
 80091ae:	bd30      	pop	{r4, r5, pc}
 80091b0:	4283      	cmp	r3, r0
 80091b2:	d3f3      	bcc.n	800919c <__mcmp+0x18>
 80091b4:	e7fa      	b.n	80091ac <__mcmp+0x28>
 80091b6:	f04f 32ff 	mov.w	r2, #4294967295
 80091ba:	e7f7      	b.n	80091ac <__mcmp+0x28>

080091bc <__mdiff>:
 80091bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c0:	460c      	mov	r4, r1
 80091c2:	4606      	mov	r6, r0
 80091c4:	4611      	mov	r1, r2
 80091c6:	4620      	mov	r0, r4
 80091c8:	4617      	mov	r7, r2
 80091ca:	f7ff ffdb 	bl	8009184 <__mcmp>
 80091ce:	1e05      	subs	r5, r0, #0
 80091d0:	d110      	bne.n	80091f4 <__mdiff+0x38>
 80091d2:	4629      	mov	r1, r5
 80091d4:	4630      	mov	r0, r6
 80091d6:	f7ff fd57 	bl	8008c88 <_Balloc>
 80091da:	b930      	cbnz	r0, 80091ea <__mdiff+0x2e>
 80091dc:	4b39      	ldr	r3, [pc, #228]	; (80092c4 <__mdiff+0x108>)
 80091de:	4602      	mov	r2, r0
 80091e0:	f240 2132 	movw	r1, #562	; 0x232
 80091e4:	4838      	ldr	r0, [pc, #224]	; (80092c8 <__mdiff+0x10c>)
 80091e6:	f000 fa47 	bl	8009678 <__assert_func>
 80091ea:	2301      	movs	r3, #1
 80091ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f4:	bfa4      	itt	ge
 80091f6:	463b      	movge	r3, r7
 80091f8:	4627      	movge	r7, r4
 80091fa:	4630      	mov	r0, r6
 80091fc:	6879      	ldr	r1, [r7, #4]
 80091fe:	bfa6      	itte	ge
 8009200:	461c      	movge	r4, r3
 8009202:	2500      	movge	r5, #0
 8009204:	2501      	movlt	r5, #1
 8009206:	f7ff fd3f 	bl	8008c88 <_Balloc>
 800920a:	b920      	cbnz	r0, 8009216 <__mdiff+0x5a>
 800920c:	4b2d      	ldr	r3, [pc, #180]	; (80092c4 <__mdiff+0x108>)
 800920e:	4602      	mov	r2, r0
 8009210:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009214:	e7e6      	b.n	80091e4 <__mdiff+0x28>
 8009216:	693e      	ldr	r6, [r7, #16]
 8009218:	60c5      	str	r5, [r0, #12]
 800921a:	6925      	ldr	r5, [r4, #16]
 800921c:	f107 0114 	add.w	r1, r7, #20
 8009220:	f104 0914 	add.w	r9, r4, #20
 8009224:	f100 0e14 	add.w	lr, r0, #20
 8009228:	f107 0210 	add.w	r2, r7, #16
 800922c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009230:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009234:	46f2      	mov	sl, lr
 8009236:	2700      	movs	r7, #0
 8009238:	f859 3b04 	ldr.w	r3, [r9], #4
 800923c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009240:	fa1f f883 	uxth.w	r8, r3
 8009244:	fa17 f78b 	uxtah	r7, r7, fp
 8009248:	0c1b      	lsrs	r3, r3, #16
 800924a:	eba7 0808 	sub.w	r8, r7, r8
 800924e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009252:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009256:	fa1f f888 	uxth.w	r8, r8
 800925a:	141f      	asrs	r7, r3, #16
 800925c:	454d      	cmp	r5, r9
 800925e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009262:	f84a 3b04 	str.w	r3, [sl], #4
 8009266:	d8e7      	bhi.n	8009238 <__mdiff+0x7c>
 8009268:	1b2b      	subs	r3, r5, r4
 800926a:	3b15      	subs	r3, #21
 800926c:	f023 0303 	bic.w	r3, r3, #3
 8009270:	3304      	adds	r3, #4
 8009272:	3415      	adds	r4, #21
 8009274:	42a5      	cmp	r5, r4
 8009276:	bf38      	it	cc
 8009278:	2304      	movcc	r3, #4
 800927a:	4419      	add	r1, r3
 800927c:	4473      	add	r3, lr
 800927e:	469e      	mov	lr, r3
 8009280:	460d      	mov	r5, r1
 8009282:	4565      	cmp	r5, ip
 8009284:	d30e      	bcc.n	80092a4 <__mdiff+0xe8>
 8009286:	f10c 0203 	add.w	r2, ip, #3
 800928a:	1a52      	subs	r2, r2, r1
 800928c:	f022 0203 	bic.w	r2, r2, #3
 8009290:	3903      	subs	r1, #3
 8009292:	458c      	cmp	ip, r1
 8009294:	bf38      	it	cc
 8009296:	2200      	movcc	r2, #0
 8009298:	441a      	add	r2, r3
 800929a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800929e:	b17b      	cbz	r3, 80092c0 <__mdiff+0x104>
 80092a0:	6106      	str	r6, [r0, #16]
 80092a2:	e7a5      	b.n	80091f0 <__mdiff+0x34>
 80092a4:	f855 8b04 	ldr.w	r8, [r5], #4
 80092a8:	fa17 f488 	uxtah	r4, r7, r8
 80092ac:	1422      	asrs	r2, r4, #16
 80092ae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80092b2:	b2a4      	uxth	r4, r4
 80092b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80092b8:	f84e 4b04 	str.w	r4, [lr], #4
 80092bc:	1417      	asrs	r7, r2, #16
 80092be:	e7e0      	b.n	8009282 <__mdiff+0xc6>
 80092c0:	3e01      	subs	r6, #1
 80092c2:	e7ea      	b.n	800929a <__mdiff+0xde>
 80092c4:	08009ab3 	.word	0x08009ab3
 80092c8:	08009ac4 	.word	0x08009ac4

080092cc <__d2b>:
 80092cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092d0:	4689      	mov	r9, r1
 80092d2:	2101      	movs	r1, #1
 80092d4:	ec57 6b10 	vmov	r6, r7, d0
 80092d8:	4690      	mov	r8, r2
 80092da:	f7ff fcd5 	bl	8008c88 <_Balloc>
 80092de:	4604      	mov	r4, r0
 80092e0:	b930      	cbnz	r0, 80092f0 <__d2b+0x24>
 80092e2:	4602      	mov	r2, r0
 80092e4:	4b25      	ldr	r3, [pc, #148]	; (800937c <__d2b+0xb0>)
 80092e6:	4826      	ldr	r0, [pc, #152]	; (8009380 <__d2b+0xb4>)
 80092e8:	f240 310a 	movw	r1, #778	; 0x30a
 80092ec:	f000 f9c4 	bl	8009678 <__assert_func>
 80092f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80092f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092f8:	bb35      	cbnz	r5, 8009348 <__d2b+0x7c>
 80092fa:	2e00      	cmp	r6, #0
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	d028      	beq.n	8009352 <__d2b+0x86>
 8009300:	4668      	mov	r0, sp
 8009302:	9600      	str	r6, [sp, #0]
 8009304:	f7ff fd8c 	bl	8008e20 <__lo0bits>
 8009308:	9900      	ldr	r1, [sp, #0]
 800930a:	b300      	cbz	r0, 800934e <__d2b+0x82>
 800930c:	9a01      	ldr	r2, [sp, #4]
 800930e:	f1c0 0320 	rsb	r3, r0, #32
 8009312:	fa02 f303 	lsl.w	r3, r2, r3
 8009316:	430b      	orrs	r3, r1
 8009318:	40c2      	lsrs	r2, r0
 800931a:	6163      	str	r3, [r4, #20]
 800931c:	9201      	str	r2, [sp, #4]
 800931e:	9b01      	ldr	r3, [sp, #4]
 8009320:	61a3      	str	r3, [r4, #24]
 8009322:	2b00      	cmp	r3, #0
 8009324:	bf14      	ite	ne
 8009326:	2202      	movne	r2, #2
 8009328:	2201      	moveq	r2, #1
 800932a:	6122      	str	r2, [r4, #16]
 800932c:	b1d5      	cbz	r5, 8009364 <__d2b+0x98>
 800932e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009332:	4405      	add	r5, r0
 8009334:	f8c9 5000 	str.w	r5, [r9]
 8009338:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800933c:	f8c8 0000 	str.w	r0, [r8]
 8009340:	4620      	mov	r0, r4
 8009342:	b003      	add	sp, #12
 8009344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009348:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800934c:	e7d5      	b.n	80092fa <__d2b+0x2e>
 800934e:	6161      	str	r1, [r4, #20]
 8009350:	e7e5      	b.n	800931e <__d2b+0x52>
 8009352:	a801      	add	r0, sp, #4
 8009354:	f7ff fd64 	bl	8008e20 <__lo0bits>
 8009358:	9b01      	ldr	r3, [sp, #4]
 800935a:	6163      	str	r3, [r4, #20]
 800935c:	2201      	movs	r2, #1
 800935e:	6122      	str	r2, [r4, #16]
 8009360:	3020      	adds	r0, #32
 8009362:	e7e3      	b.n	800932c <__d2b+0x60>
 8009364:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009368:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800936c:	f8c9 0000 	str.w	r0, [r9]
 8009370:	6918      	ldr	r0, [r3, #16]
 8009372:	f7ff fd35 	bl	8008de0 <__hi0bits>
 8009376:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800937a:	e7df      	b.n	800933c <__d2b+0x70>
 800937c:	08009ab3 	.word	0x08009ab3
 8009380:	08009ac4 	.word	0x08009ac4

08009384 <_calloc_r>:
 8009384:	b513      	push	{r0, r1, r4, lr}
 8009386:	434a      	muls	r2, r1
 8009388:	4611      	mov	r1, r2
 800938a:	9201      	str	r2, [sp, #4]
 800938c:	f7fd feaa 	bl	80070e4 <_malloc_r>
 8009390:	4604      	mov	r4, r0
 8009392:	b118      	cbz	r0, 800939c <_calloc_r+0x18>
 8009394:	9a01      	ldr	r2, [sp, #4]
 8009396:	2100      	movs	r1, #0
 8009398:	f7fd fe4c 	bl	8007034 <memset>
 800939c:	4620      	mov	r0, r4
 800939e:	b002      	add	sp, #8
 80093a0:	bd10      	pop	{r4, pc}

080093a2 <__sfputc_r>:
 80093a2:	6893      	ldr	r3, [r2, #8]
 80093a4:	3b01      	subs	r3, #1
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	b410      	push	{r4}
 80093aa:	6093      	str	r3, [r2, #8]
 80093ac:	da08      	bge.n	80093c0 <__sfputc_r+0x1e>
 80093ae:	6994      	ldr	r4, [r2, #24]
 80093b0:	42a3      	cmp	r3, r4
 80093b2:	db01      	blt.n	80093b8 <__sfputc_r+0x16>
 80093b4:	290a      	cmp	r1, #10
 80093b6:	d103      	bne.n	80093c0 <__sfputc_r+0x1e>
 80093b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093bc:	f7fe bbc2 	b.w	8007b44 <__swbuf_r>
 80093c0:	6813      	ldr	r3, [r2, #0]
 80093c2:	1c58      	adds	r0, r3, #1
 80093c4:	6010      	str	r0, [r2, #0]
 80093c6:	7019      	strb	r1, [r3, #0]
 80093c8:	4608      	mov	r0, r1
 80093ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <__sfputs_r>:
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	4606      	mov	r6, r0
 80093d4:	460f      	mov	r7, r1
 80093d6:	4614      	mov	r4, r2
 80093d8:	18d5      	adds	r5, r2, r3
 80093da:	42ac      	cmp	r4, r5
 80093dc:	d101      	bne.n	80093e2 <__sfputs_r+0x12>
 80093de:	2000      	movs	r0, #0
 80093e0:	e007      	b.n	80093f2 <__sfputs_r+0x22>
 80093e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093e6:	463a      	mov	r2, r7
 80093e8:	4630      	mov	r0, r6
 80093ea:	f7ff ffda 	bl	80093a2 <__sfputc_r>
 80093ee:	1c43      	adds	r3, r0, #1
 80093f0:	d1f3      	bne.n	80093da <__sfputs_r+0xa>
 80093f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080093f4 <_vfiprintf_r>:
 80093f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f8:	460d      	mov	r5, r1
 80093fa:	b09d      	sub	sp, #116	; 0x74
 80093fc:	4614      	mov	r4, r2
 80093fe:	4698      	mov	r8, r3
 8009400:	4606      	mov	r6, r0
 8009402:	b118      	cbz	r0, 800940c <_vfiprintf_r+0x18>
 8009404:	6983      	ldr	r3, [r0, #24]
 8009406:	b90b      	cbnz	r3, 800940c <_vfiprintf_r+0x18>
 8009408:	f7fd fd38 	bl	8006e7c <__sinit>
 800940c:	4b89      	ldr	r3, [pc, #548]	; (8009634 <_vfiprintf_r+0x240>)
 800940e:	429d      	cmp	r5, r3
 8009410:	d11b      	bne.n	800944a <_vfiprintf_r+0x56>
 8009412:	6875      	ldr	r5, [r6, #4]
 8009414:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009416:	07d9      	lsls	r1, r3, #31
 8009418:	d405      	bmi.n	8009426 <_vfiprintf_r+0x32>
 800941a:	89ab      	ldrh	r3, [r5, #12]
 800941c:	059a      	lsls	r2, r3, #22
 800941e:	d402      	bmi.n	8009426 <_vfiprintf_r+0x32>
 8009420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009422:	f7fd fdee 	bl	8007002 <__retarget_lock_acquire_recursive>
 8009426:	89ab      	ldrh	r3, [r5, #12]
 8009428:	071b      	lsls	r3, r3, #28
 800942a:	d501      	bpl.n	8009430 <_vfiprintf_r+0x3c>
 800942c:	692b      	ldr	r3, [r5, #16]
 800942e:	b9eb      	cbnz	r3, 800946c <_vfiprintf_r+0x78>
 8009430:	4629      	mov	r1, r5
 8009432:	4630      	mov	r0, r6
 8009434:	f7fe fbea 	bl	8007c0c <__swsetup_r>
 8009438:	b1c0      	cbz	r0, 800946c <_vfiprintf_r+0x78>
 800943a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800943c:	07dc      	lsls	r4, r3, #31
 800943e:	d50e      	bpl.n	800945e <_vfiprintf_r+0x6a>
 8009440:	f04f 30ff 	mov.w	r0, #4294967295
 8009444:	b01d      	add	sp, #116	; 0x74
 8009446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944a:	4b7b      	ldr	r3, [pc, #492]	; (8009638 <_vfiprintf_r+0x244>)
 800944c:	429d      	cmp	r5, r3
 800944e:	d101      	bne.n	8009454 <_vfiprintf_r+0x60>
 8009450:	68b5      	ldr	r5, [r6, #8]
 8009452:	e7df      	b.n	8009414 <_vfiprintf_r+0x20>
 8009454:	4b79      	ldr	r3, [pc, #484]	; (800963c <_vfiprintf_r+0x248>)
 8009456:	429d      	cmp	r5, r3
 8009458:	bf08      	it	eq
 800945a:	68f5      	ldreq	r5, [r6, #12]
 800945c:	e7da      	b.n	8009414 <_vfiprintf_r+0x20>
 800945e:	89ab      	ldrh	r3, [r5, #12]
 8009460:	0598      	lsls	r0, r3, #22
 8009462:	d4ed      	bmi.n	8009440 <_vfiprintf_r+0x4c>
 8009464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009466:	f7fd fdcd 	bl	8007004 <__retarget_lock_release_recursive>
 800946a:	e7e9      	b.n	8009440 <_vfiprintf_r+0x4c>
 800946c:	2300      	movs	r3, #0
 800946e:	9309      	str	r3, [sp, #36]	; 0x24
 8009470:	2320      	movs	r3, #32
 8009472:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009476:	f8cd 800c 	str.w	r8, [sp, #12]
 800947a:	2330      	movs	r3, #48	; 0x30
 800947c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009640 <_vfiprintf_r+0x24c>
 8009480:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009484:	f04f 0901 	mov.w	r9, #1
 8009488:	4623      	mov	r3, r4
 800948a:	469a      	mov	sl, r3
 800948c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009490:	b10a      	cbz	r2, 8009496 <_vfiprintf_r+0xa2>
 8009492:	2a25      	cmp	r2, #37	; 0x25
 8009494:	d1f9      	bne.n	800948a <_vfiprintf_r+0x96>
 8009496:	ebba 0b04 	subs.w	fp, sl, r4
 800949a:	d00b      	beq.n	80094b4 <_vfiprintf_r+0xc0>
 800949c:	465b      	mov	r3, fp
 800949e:	4622      	mov	r2, r4
 80094a0:	4629      	mov	r1, r5
 80094a2:	4630      	mov	r0, r6
 80094a4:	f7ff ff94 	bl	80093d0 <__sfputs_r>
 80094a8:	3001      	adds	r0, #1
 80094aa:	f000 80aa 	beq.w	8009602 <_vfiprintf_r+0x20e>
 80094ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094b0:	445a      	add	r2, fp
 80094b2:	9209      	str	r2, [sp, #36]	; 0x24
 80094b4:	f89a 3000 	ldrb.w	r3, [sl]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 80a2 	beq.w	8009602 <_vfiprintf_r+0x20e>
 80094be:	2300      	movs	r3, #0
 80094c0:	f04f 32ff 	mov.w	r2, #4294967295
 80094c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094c8:	f10a 0a01 	add.w	sl, sl, #1
 80094cc:	9304      	str	r3, [sp, #16]
 80094ce:	9307      	str	r3, [sp, #28]
 80094d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094d4:	931a      	str	r3, [sp, #104]	; 0x68
 80094d6:	4654      	mov	r4, sl
 80094d8:	2205      	movs	r2, #5
 80094da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094de:	4858      	ldr	r0, [pc, #352]	; (8009640 <_vfiprintf_r+0x24c>)
 80094e0:	f7f6 fe8e 	bl	8000200 <memchr>
 80094e4:	9a04      	ldr	r2, [sp, #16]
 80094e6:	b9d8      	cbnz	r0, 8009520 <_vfiprintf_r+0x12c>
 80094e8:	06d1      	lsls	r1, r2, #27
 80094ea:	bf44      	itt	mi
 80094ec:	2320      	movmi	r3, #32
 80094ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094f2:	0713      	lsls	r3, r2, #28
 80094f4:	bf44      	itt	mi
 80094f6:	232b      	movmi	r3, #43	; 0x2b
 80094f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009500:	2b2a      	cmp	r3, #42	; 0x2a
 8009502:	d015      	beq.n	8009530 <_vfiprintf_r+0x13c>
 8009504:	9a07      	ldr	r2, [sp, #28]
 8009506:	4654      	mov	r4, sl
 8009508:	2000      	movs	r0, #0
 800950a:	f04f 0c0a 	mov.w	ip, #10
 800950e:	4621      	mov	r1, r4
 8009510:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009514:	3b30      	subs	r3, #48	; 0x30
 8009516:	2b09      	cmp	r3, #9
 8009518:	d94e      	bls.n	80095b8 <_vfiprintf_r+0x1c4>
 800951a:	b1b0      	cbz	r0, 800954a <_vfiprintf_r+0x156>
 800951c:	9207      	str	r2, [sp, #28]
 800951e:	e014      	b.n	800954a <_vfiprintf_r+0x156>
 8009520:	eba0 0308 	sub.w	r3, r0, r8
 8009524:	fa09 f303 	lsl.w	r3, r9, r3
 8009528:	4313      	orrs	r3, r2
 800952a:	9304      	str	r3, [sp, #16]
 800952c:	46a2      	mov	sl, r4
 800952e:	e7d2      	b.n	80094d6 <_vfiprintf_r+0xe2>
 8009530:	9b03      	ldr	r3, [sp, #12]
 8009532:	1d19      	adds	r1, r3, #4
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	9103      	str	r1, [sp, #12]
 8009538:	2b00      	cmp	r3, #0
 800953a:	bfbb      	ittet	lt
 800953c:	425b      	neglt	r3, r3
 800953e:	f042 0202 	orrlt.w	r2, r2, #2
 8009542:	9307      	strge	r3, [sp, #28]
 8009544:	9307      	strlt	r3, [sp, #28]
 8009546:	bfb8      	it	lt
 8009548:	9204      	strlt	r2, [sp, #16]
 800954a:	7823      	ldrb	r3, [r4, #0]
 800954c:	2b2e      	cmp	r3, #46	; 0x2e
 800954e:	d10c      	bne.n	800956a <_vfiprintf_r+0x176>
 8009550:	7863      	ldrb	r3, [r4, #1]
 8009552:	2b2a      	cmp	r3, #42	; 0x2a
 8009554:	d135      	bne.n	80095c2 <_vfiprintf_r+0x1ce>
 8009556:	9b03      	ldr	r3, [sp, #12]
 8009558:	1d1a      	adds	r2, r3, #4
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	9203      	str	r2, [sp, #12]
 800955e:	2b00      	cmp	r3, #0
 8009560:	bfb8      	it	lt
 8009562:	f04f 33ff 	movlt.w	r3, #4294967295
 8009566:	3402      	adds	r4, #2
 8009568:	9305      	str	r3, [sp, #20]
 800956a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009650 <_vfiprintf_r+0x25c>
 800956e:	7821      	ldrb	r1, [r4, #0]
 8009570:	2203      	movs	r2, #3
 8009572:	4650      	mov	r0, sl
 8009574:	f7f6 fe44 	bl	8000200 <memchr>
 8009578:	b140      	cbz	r0, 800958c <_vfiprintf_r+0x198>
 800957a:	2340      	movs	r3, #64	; 0x40
 800957c:	eba0 000a 	sub.w	r0, r0, sl
 8009580:	fa03 f000 	lsl.w	r0, r3, r0
 8009584:	9b04      	ldr	r3, [sp, #16]
 8009586:	4303      	orrs	r3, r0
 8009588:	3401      	adds	r4, #1
 800958a:	9304      	str	r3, [sp, #16]
 800958c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009590:	482c      	ldr	r0, [pc, #176]	; (8009644 <_vfiprintf_r+0x250>)
 8009592:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009596:	2206      	movs	r2, #6
 8009598:	f7f6 fe32 	bl	8000200 <memchr>
 800959c:	2800      	cmp	r0, #0
 800959e:	d03f      	beq.n	8009620 <_vfiprintf_r+0x22c>
 80095a0:	4b29      	ldr	r3, [pc, #164]	; (8009648 <_vfiprintf_r+0x254>)
 80095a2:	bb1b      	cbnz	r3, 80095ec <_vfiprintf_r+0x1f8>
 80095a4:	9b03      	ldr	r3, [sp, #12]
 80095a6:	3307      	adds	r3, #7
 80095a8:	f023 0307 	bic.w	r3, r3, #7
 80095ac:	3308      	adds	r3, #8
 80095ae:	9303      	str	r3, [sp, #12]
 80095b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b2:	443b      	add	r3, r7
 80095b4:	9309      	str	r3, [sp, #36]	; 0x24
 80095b6:	e767      	b.n	8009488 <_vfiprintf_r+0x94>
 80095b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80095bc:	460c      	mov	r4, r1
 80095be:	2001      	movs	r0, #1
 80095c0:	e7a5      	b.n	800950e <_vfiprintf_r+0x11a>
 80095c2:	2300      	movs	r3, #0
 80095c4:	3401      	adds	r4, #1
 80095c6:	9305      	str	r3, [sp, #20]
 80095c8:	4619      	mov	r1, r3
 80095ca:	f04f 0c0a 	mov.w	ip, #10
 80095ce:	4620      	mov	r0, r4
 80095d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095d4:	3a30      	subs	r2, #48	; 0x30
 80095d6:	2a09      	cmp	r2, #9
 80095d8:	d903      	bls.n	80095e2 <_vfiprintf_r+0x1ee>
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d0c5      	beq.n	800956a <_vfiprintf_r+0x176>
 80095de:	9105      	str	r1, [sp, #20]
 80095e0:	e7c3      	b.n	800956a <_vfiprintf_r+0x176>
 80095e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80095e6:	4604      	mov	r4, r0
 80095e8:	2301      	movs	r3, #1
 80095ea:	e7f0      	b.n	80095ce <_vfiprintf_r+0x1da>
 80095ec:	ab03      	add	r3, sp, #12
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	462a      	mov	r2, r5
 80095f2:	4b16      	ldr	r3, [pc, #88]	; (800964c <_vfiprintf_r+0x258>)
 80095f4:	a904      	add	r1, sp, #16
 80095f6:	4630      	mov	r0, r6
 80095f8:	f7fd fe6e 	bl	80072d8 <_printf_float>
 80095fc:	4607      	mov	r7, r0
 80095fe:	1c78      	adds	r0, r7, #1
 8009600:	d1d6      	bne.n	80095b0 <_vfiprintf_r+0x1bc>
 8009602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009604:	07d9      	lsls	r1, r3, #31
 8009606:	d405      	bmi.n	8009614 <_vfiprintf_r+0x220>
 8009608:	89ab      	ldrh	r3, [r5, #12]
 800960a:	059a      	lsls	r2, r3, #22
 800960c:	d402      	bmi.n	8009614 <_vfiprintf_r+0x220>
 800960e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009610:	f7fd fcf8 	bl	8007004 <__retarget_lock_release_recursive>
 8009614:	89ab      	ldrh	r3, [r5, #12]
 8009616:	065b      	lsls	r3, r3, #25
 8009618:	f53f af12 	bmi.w	8009440 <_vfiprintf_r+0x4c>
 800961c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800961e:	e711      	b.n	8009444 <_vfiprintf_r+0x50>
 8009620:	ab03      	add	r3, sp, #12
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	462a      	mov	r2, r5
 8009626:	4b09      	ldr	r3, [pc, #36]	; (800964c <_vfiprintf_r+0x258>)
 8009628:	a904      	add	r1, sp, #16
 800962a:	4630      	mov	r0, r6
 800962c:	f7fe f8f8 	bl	8007820 <_printf_i>
 8009630:	e7e4      	b.n	80095fc <_vfiprintf_r+0x208>
 8009632:	bf00      	nop
 8009634:	080099b8 	.word	0x080099b8
 8009638:	080099d8 	.word	0x080099d8
 800963c:	08009998 	.word	0x08009998
 8009640:	08009c24 	.word	0x08009c24
 8009644:	08009c2e 	.word	0x08009c2e
 8009648:	080072d9 	.word	0x080072d9
 800964c:	080093d1 	.word	0x080093d1
 8009650:	08009c2a 	.word	0x08009c2a

08009654 <_read_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	4d07      	ldr	r5, [pc, #28]	; (8009674 <_read_r+0x20>)
 8009658:	4604      	mov	r4, r0
 800965a:	4608      	mov	r0, r1
 800965c:	4611      	mov	r1, r2
 800965e:	2200      	movs	r2, #0
 8009660:	602a      	str	r2, [r5, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	f7f8 fd18 	bl	8002098 <_read>
 8009668:	1c43      	adds	r3, r0, #1
 800966a:	d102      	bne.n	8009672 <_read_r+0x1e>
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	b103      	cbz	r3, 8009672 <_read_r+0x1e>
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	bd38      	pop	{r3, r4, r5, pc}
 8009674:	2000496c 	.word	0x2000496c

08009678 <__assert_func>:
 8009678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800967a:	4614      	mov	r4, r2
 800967c:	461a      	mov	r2, r3
 800967e:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <__assert_func+0x2c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4605      	mov	r5, r0
 8009684:	68d8      	ldr	r0, [r3, #12]
 8009686:	b14c      	cbz	r4, 800969c <__assert_func+0x24>
 8009688:	4b07      	ldr	r3, [pc, #28]	; (80096a8 <__assert_func+0x30>)
 800968a:	9100      	str	r1, [sp, #0]
 800968c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009690:	4906      	ldr	r1, [pc, #24]	; (80096ac <__assert_func+0x34>)
 8009692:	462b      	mov	r3, r5
 8009694:	f000 f80e 	bl	80096b4 <fiprintf>
 8009698:	f000 f85f 	bl	800975a <abort>
 800969c:	4b04      	ldr	r3, [pc, #16]	; (80096b0 <__assert_func+0x38>)
 800969e:	461c      	mov	r4, r3
 80096a0:	e7f3      	b.n	800968a <__assert_func+0x12>
 80096a2:	bf00      	nop
 80096a4:	200000ac 	.word	0x200000ac
 80096a8:	08009c35 	.word	0x08009c35
 80096ac:	08009c42 	.word	0x08009c42
 80096b0:	08009c70 	.word	0x08009c70

080096b4 <fiprintf>:
 80096b4:	b40e      	push	{r1, r2, r3}
 80096b6:	b503      	push	{r0, r1, lr}
 80096b8:	4601      	mov	r1, r0
 80096ba:	ab03      	add	r3, sp, #12
 80096bc:	4805      	ldr	r0, [pc, #20]	; (80096d4 <fiprintf+0x20>)
 80096be:	f853 2b04 	ldr.w	r2, [r3], #4
 80096c2:	6800      	ldr	r0, [r0, #0]
 80096c4:	9301      	str	r3, [sp, #4]
 80096c6:	f7ff fe95 	bl	80093f4 <_vfiprintf_r>
 80096ca:	b002      	add	sp, #8
 80096cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80096d0:	b003      	add	sp, #12
 80096d2:	4770      	bx	lr
 80096d4:	200000ac 	.word	0x200000ac

080096d8 <_fstat_r>:
 80096d8:	b538      	push	{r3, r4, r5, lr}
 80096da:	4d07      	ldr	r5, [pc, #28]	; (80096f8 <_fstat_r+0x20>)
 80096dc:	2300      	movs	r3, #0
 80096de:	4604      	mov	r4, r0
 80096e0:	4608      	mov	r0, r1
 80096e2:	4611      	mov	r1, r2
 80096e4:	602b      	str	r3, [r5, #0]
 80096e6:	f7f8 fd00 	bl	80020ea <_fstat>
 80096ea:	1c43      	adds	r3, r0, #1
 80096ec:	d102      	bne.n	80096f4 <_fstat_r+0x1c>
 80096ee:	682b      	ldr	r3, [r5, #0]
 80096f0:	b103      	cbz	r3, 80096f4 <_fstat_r+0x1c>
 80096f2:	6023      	str	r3, [r4, #0]
 80096f4:	bd38      	pop	{r3, r4, r5, pc}
 80096f6:	bf00      	nop
 80096f8:	2000496c 	.word	0x2000496c

080096fc <_isatty_r>:
 80096fc:	b538      	push	{r3, r4, r5, lr}
 80096fe:	4d06      	ldr	r5, [pc, #24]	; (8009718 <_isatty_r+0x1c>)
 8009700:	2300      	movs	r3, #0
 8009702:	4604      	mov	r4, r0
 8009704:	4608      	mov	r0, r1
 8009706:	602b      	str	r3, [r5, #0]
 8009708:	f7f8 fcff 	bl	800210a <_isatty>
 800970c:	1c43      	adds	r3, r0, #1
 800970e:	d102      	bne.n	8009716 <_isatty_r+0x1a>
 8009710:	682b      	ldr	r3, [r5, #0]
 8009712:	b103      	cbz	r3, 8009716 <_isatty_r+0x1a>
 8009714:	6023      	str	r3, [r4, #0]
 8009716:	bd38      	pop	{r3, r4, r5, pc}
 8009718:	2000496c 	.word	0x2000496c

0800971c <__ascii_mbtowc>:
 800971c:	b082      	sub	sp, #8
 800971e:	b901      	cbnz	r1, 8009722 <__ascii_mbtowc+0x6>
 8009720:	a901      	add	r1, sp, #4
 8009722:	b142      	cbz	r2, 8009736 <__ascii_mbtowc+0x1a>
 8009724:	b14b      	cbz	r3, 800973a <__ascii_mbtowc+0x1e>
 8009726:	7813      	ldrb	r3, [r2, #0]
 8009728:	600b      	str	r3, [r1, #0]
 800972a:	7812      	ldrb	r2, [r2, #0]
 800972c:	1e10      	subs	r0, r2, #0
 800972e:	bf18      	it	ne
 8009730:	2001      	movne	r0, #1
 8009732:	b002      	add	sp, #8
 8009734:	4770      	bx	lr
 8009736:	4610      	mov	r0, r2
 8009738:	e7fb      	b.n	8009732 <__ascii_mbtowc+0x16>
 800973a:	f06f 0001 	mvn.w	r0, #1
 800973e:	e7f8      	b.n	8009732 <__ascii_mbtowc+0x16>

08009740 <__ascii_wctomb>:
 8009740:	b149      	cbz	r1, 8009756 <__ascii_wctomb+0x16>
 8009742:	2aff      	cmp	r2, #255	; 0xff
 8009744:	bf85      	ittet	hi
 8009746:	238a      	movhi	r3, #138	; 0x8a
 8009748:	6003      	strhi	r3, [r0, #0]
 800974a:	700a      	strbls	r2, [r1, #0]
 800974c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009750:	bf98      	it	ls
 8009752:	2001      	movls	r0, #1
 8009754:	4770      	bx	lr
 8009756:	4608      	mov	r0, r1
 8009758:	4770      	bx	lr

0800975a <abort>:
 800975a:	b508      	push	{r3, lr}
 800975c:	2006      	movs	r0, #6
 800975e:	f000 f82b 	bl	80097b8 <raise>
 8009762:	2001      	movs	r0, #1
 8009764:	f7f8 fc8e 	bl	8002084 <_exit>

08009768 <_raise_r>:
 8009768:	291f      	cmp	r1, #31
 800976a:	b538      	push	{r3, r4, r5, lr}
 800976c:	4604      	mov	r4, r0
 800976e:	460d      	mov	r5, r1
 8009770:	d904      	bls.n	800977c <_raise_r+0x14>
 8009772:	2316      	movs	r3, #22
 8009774:	6003      	str	r3, [r0, #0]
 8009776:	f04f 30ff 	mov.w	r0, #4294967295
 800977a:	bd38      	pop	{r3, r4, r5, pc}
 800977c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800977e:	b112      	cbz	r2, 8009786 <_raise_r+0x1e>
 8009780:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009784:	b94b      	cbnz	r3, 800979a <_raise_r+0x32>
 8009786:	4620      	mov	r0, r4
 8009788:	f000 f830 	bl	80097ec <_getpid_r>
 800978c:	462a      	mov	r2, r5
 800978e:	4601      	mov	r1, r0
 8009790:	4620      	mov	r0, r4
 8009792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009796:	f000 b817 	b.w	80097c8 <_kill_r>
 800979a:	2b01      	cmp	r3, #1
 800979c:	d00a      	beq.n	80097b4 <_raise_r+0x4c>
 800979e:	1c59      	adds	r1, r3, #1
 80097a0:	d103      	bne.n	80097aa <_raise_r+0x42>
 80097a2:	2316      	movs	r3, #22
 80097a4:	6003      	str	r3, [r0, #0]
 80097a6:	2001      	movs	r0, #1
 80097a8:	e7e7      	b.n	800977a <_raise_r+0x12>
 80097aa:	2400      	movs	r4, #0
 80097ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097b0:	4628      	mov	r0, r5
 80097b2:	4798      	blx	r3
 80097b4:	2000      	movs	r0, #0
 80097b6:	e7e0      	b.n	800977a <_raise_r+0x12>

080097b8 <raise>:
 80097b8:	4b02      	ldr	r3, [pc, #8]	; (80097c4 <raise+0xc>)
 80097ba:	4601      	mov	r1, r0
 80097bc:	6818      	ldr	r0, [r3, #0]
 80097be:	f7ff bfd3 	b.w	8009768 <_raise_r>
 80097c2:	bf00      	nop
 80097c4:	200000ac 	.word	0x200000ac

080097c8 <_kill_r>:
 80097c8:	b538      	push	{r3, r4, r5, lr}
 80097ca:	4d07      	ldr	r5, [pc, #28]	; (80097e8 <_kill_r+0x20>)
 80097cc:	2300      	movs	r3, #0
 80097ce:	4604      	mov	r4, r0
 80097d0:	4608      	mov	r0, r1
 80097d2:	4611      	mov	r1, r2
 80097d4:	602b      	str	r3, [r5, #0]
 80097d6:	f7f8 fc45 	bl	8002064 <_kill>
 80097da:	1c43      	adds	r3, r0, #1
 80097dc:	d102      	bne.n	80097e4 <_kill_r+0x1c>
 80097de:	682b      	ldr	r3, [r5, #0]
 80097e0:	b103      	cbz	r3, 80097e4 <_kill_r+0x1c>
 80097e2:	6023      	str	r3, [r4, #0]
 80097e4:	bd38      	pop	{r3, r4, r5, pc}
 80097e6:	bf00      	nop
 80097e8:	2000496c 	.word	0x2000496c

080097ec <_getpid_r>:
 80097ec:	f7f8 bc32 	b.w	8002054 <_getpid>

080097f0 <_init>:
 80097f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f2:	bf00      	nop
 80097f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097f6:	bc08      	pop	{r3}
 80097f8:	469e      	mov	lr, r3
 80097fa:	4770      	bx	lr

080097fc <_fini>:
 80097fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fe:	bf00      	nop
 8009800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009802:	bc08      	pop	{r3}
 8009804:	469e      	mov	lr, r3
 8009806:	4770      	bx	lr
