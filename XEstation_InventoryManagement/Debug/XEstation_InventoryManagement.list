
XEstation_InventoryManagement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009670  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  08009820  08009820  00019820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d84  08009d84  000202b8  2**0
                  CONTENTS
  4 .ARM          00000008  08009d84  08009d84  00019d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d8c  08009d8c  000202b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d8c  08009d8c  00019d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d90  08009d90  00019d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  08009d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202b8  2**0
                  CONTENTS
 10 .bss          0000468c  200002b8  200002b8  000202b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004944  20004944  000202b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022d38  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004257  00000000  00000000  00043020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001778  00000000  00000000  00047278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001618  00000000  00000000  000489f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000057c7  00000000  00000000  0004a008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cc0e  00000000  00000000  0004f7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8500  00000000  00000000  0006c3dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001548dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007344  00000000  00000000  00154930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000004e  00000000  00000000  0015bc74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002b8 	.word	0x200002b8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009808 	.word	0x08009808

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002bc 	.word	0x200002bc
 80001ec:	08009808 	.word	0x08009808

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295
 8000c86:	f000 b9b9 	b.w	8000ffc <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295
 8000d1c:	f000 b96e 	b.w	8000ffc <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	4604      	mov	r4, r0
 8000d40:	468c      	mov	ip, r1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8083 	bne.w	8000e4e <__udivmoddi4+0x116>
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	4617      	mov	r7, r2
 8000d4c:	d947      	bls.n	8000dde <__udivmoddi4+0xa6>
 8000d4e:	fab2 f282 	clz	r2, r2
 8000d52:	b142      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d54:	f1c2 0020 	rsb	r0, r2, #32
 8000d58:	fa24 f000 	lsr.w	r0, r4, r0
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	4097      	lsls	r7, r2
 8000d60:	ea40 0c01 	orr.w	ip, r0, r1
 8000d64:	4094      	lsls	r4, r2
 8000d66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d70:	fa1f fe87 	uxth.w	lr, r7
 8000d74:	fb08 c116 	mls	r1, r8, r6, ip
 8000d78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x60>
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 8119 	bcs.w	8000fc0 <__udivmoddi4+0x288>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 8116 	bls.w	8000fc0 <__udivmoddi4+0x288>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	443b      	add	r3, r7
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x8c>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db6:	f080 8105 	bcs.w	8000fc4 <__udivmoddi4+0x28c>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8102 	bls.w	8000fc4 <__udivmoddi4+0x28c>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa0>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	b902      	cbnz	r2, 8000de2 <__udivmoddi4+0xaa>
 8000de0:	deff      	udf	#255	; 0xff
 8000de2:	fab2 f282 	clz	r2, r2
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d150      	bne.n	8000e8c <__udivmoddi4+0x154>
 8000dea:	1bcb      	subs	r3, r1, r7
 8000dec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df0:	fa1f f887 	uxth.w	r8, r7
 8000df4:	2601      	movs	r6, #1
 8000df6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dfa:	0c21      	lsrs	r1, r4, #16
 8000dfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb08 f30c 	mul.w	r3, r8, ip
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0xe4>
 8000e0c:	1879      	adds	r1, r7, r1
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0xe2>
 8000e14:	428b      	cmp	r3, r1
 8000e16:	f200 80e9 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1ac9      	subs	r1, r1, r3
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x10c>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x10a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80d9 	bhi.w	8000ff4 <__udivmoddi4+0x2bc>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e7bf      	b.n	8000dce <__udivmoddi4+0x96>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d909      	bls.n	8000e66 <__udivmoddi4+0x12e>
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	f000 80b1 	beq.w	8000fba <__udivmoddi4+0x282>
 8000e58:	2600      	movs	r6, #0
 8000e5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5e:	4630      	mov	r0, r6
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	fab3 f683 	clz	r6, r3
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d14a      	bne.n	8000f04 <__udivmoddi4+0x1cc>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d302      	bcc.n	8000e78 <__udivmoddi4+0x140>
 8000e72:	4282      	cmp	r2, r0
 8000e74:	f200 80b8 	bhi.w	8000fe8 <__udivmoddi4+0x2b0>
 8000e78:	1a84      	subs	r4, r0, r2
 8000e7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	468c      	mov	ip, r1
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d0a8      	beq.n	8000dd8 <__udivmoddi4+0xa0>
 8000e86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e8a:	e7a5      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f603 	lsr.w	r6, r0, r3
 8000e94:	4097      	lsls	r7, r2
 8000e96:	fa01 f002 	lsl.w	r0, r1, r2
 8000e9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9e:	40d9      	lsrs	r1, r3
 8000ea0:	4330      	orrs	r0, r6
 8000ea2:	0c03      	lsrs	r3, r0, #16
 8000ea4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea8:	fa1f f887 	uxth.w	r8, r7
 8000eac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb4:	fb06 f108 	mul.w	r1, r6, r8
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x19c>
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec6:	f080 808d 	bcs.w	8000fe4 <__udivmoddi4+0x2ac>
 8000eca:	4299      	cmp	r1, r3
 8000ecc:	f240 808a 	bls.w	8000fe4 <__udivmoddi4+0x2ac>
 8000ed0:	3e02      	subs	r6, #2
 8000ed2:	443b      	add	r3, r7
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b281      	uxth	r1, r0
 8000ed8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000edc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ee0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee4:	fb00 f308 	mul.w	r3, r0, r8
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d907      	bls.n	8000efc <__udivmoddi4+0x1c4>
 8000eec:	1879      	adds	r1, r7, r1
 8000eee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ef2:	d273      	bcs.n	8000fdc <__udivmoddi4+0x2a4>
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d971      	bls.n	8000fdc <__udivmoddi4+0x2a4>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	4439      	add	r1, r7
 8000efc:	1acb      	subs	r3, r1, r3
 8000efe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f02:	e778      	b.n	8000df6 <__udivmoddi4+0xbe>
 8000f04:	f1c6 0c20 	rsb	ip, r6, #32
 8000f08:	fa03 f406 	lsl.w	r4, r3, r6
 8000f0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f10:	431c      	orrs	r4, r3
 8000f12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f16:	fa01 f306 	lsl.w	r3, r1, r6
 8000f1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f22:	431f      	orrs	r7, r3
 8000f24:	0c3b      	lsrs	r3, r7, #16
 8000f26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2a:	fa1f f884 	uxth.w	r8, r4
 8000f2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f36:	fb09 fa08 	mul.w	sl, r9, r8
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f40:	fa00 f306 	lsl.w	r3, r0, r6
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x220>
 8000f46:	1861      	adds	r1, r4, r1
 8000f48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f4c:	d248      	bcs.n	8000fe0 <__udivmoddi4+0x2a8>
 8000f4e:	458a      	cmp	sl, r1
 8000f50:	d946      	bls.n	8000fe0 <__udivmoddi4+0x2a8>
 8000f52:	f1a9 0902 	sub.w	r9, r9, #2
 8000f56:	4421      	add	r1, r4
 8000f58:	eba1 010a 	sub.w	r1, r1, sl
 8000f5c:	b2bf      	uxth	r7, r7
 8000f5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f6a:	fb00 f808 	mul.w	r8, r0, r8
 8000f6e:	45b8      	cmp	r8, r7
 8000f70:	d907      	bls.n	8000f82 <__udivmoddi4+0x24a>
 8000f72:	19e7      	adds	r7, r4, r7
 8000f74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f78:	d22e      	bcs.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d92c      	bls.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	4427      	add	r7, r4
 8000f82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f86:	eba7 0708 	sub.w	r7, r7, r8
 8000f8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8e:	454f      	cmp	r7, r9
 8000f90:	46c6      	mov	lr, r8
 8000f92:	4649      	mov	r1, r9
 8000f94:	d31a      	bcc.n	8000fcc <__udivmoddi4+0x294>
 8000f96:	d017      	beq.n	8000fc8 <__udivmoddi4+0x290>
 8000f98:	b15d      	cbz	r5, 8000fb2 <__udivmoddi4+0x27a>
 8000f9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000fa2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa6:	40f2      	lsrs	r2, r6
 8000fa8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fac:	40f7      	lsrs	r7, r6
 8000fae:	e9c5 2700 	strd	r2, r7, [r5]
 8000fb2:	2600      	movs	r6, #0
 8000fb4:	4631      	mov	r1, r6
 8000fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e70b      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0x60>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6fd      	b.n	8000dc4 <__udivmoddi4+0x8c>
 8000fc8:	4543      	cmp	r3, r8
 8000fca:	d2e5      	bcs.n	8000f98 <__udivmoddi4+0x260>
 8000fcc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fd0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7df      	b.n	8000f98 <__udivmoddi4+0x260>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e7d2      	b.n	8000f82 <__udivmoddi4+0x24a>
 8000fdc:	4660      	mov	r0, ip
 8000fde:	e78d      	b.n	8000efc <__udivmoddi4+0x1c4>
 8000fe0:	4681      	mov	r9, r0
 8000fe2:	e7b9      	b.n	8000f58 <__udivmoddi4+0x220>
 8000fe4:	4666      	mov	r6, ip
 8000fe6:	e775      	b.n	8000ed4 <__udivmoddi4+0x19c>
 8000fe8:	4630      	mov	r0, r6
 8000fea:	e74a      	b.n	8000e82 <__udivmoddi4+0x14a>
 8000fec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ff0:	4439      	add	r1, r7
 8000ff2:	e713      	b.n	8000e1c <__udivmoddi4+0xe4>
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	443c      	add	r4, r7
 8000ff8:	e724      	b.n	8000e44 <__udivmoddi4+0x10c>
 8000ffa:	bf00      	nop

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 10) == HAL_OK)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	b29a      	uxth	r2, r3
 8001010:	230a      	movs	r3, #10
 8001012:	68b9      	ldr	r1, [r7, #8]
 8001014:	4806      	ldr	r0, [pc, #24]	; (8001030 <_write+0x30>)
 8001016:	f003 f9f6 	bl	8004406 <HAL_UART_Transmit>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d101      	bne.n	8001024 <_write+0x24>
		return len;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	e001      	b.n	8001028 <_write+0x28>
	return -1;
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20004420 	.word	0x20004420

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f001 f888 	bl	800214c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 f866 	bl	800110c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001040:	f000 fb48 	bl	80016d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001044:	f000 f8d2 	bl	80011ec <MX_I2C1_Init>
  MX_I2C2_Init();
 8001048:	f000 f910 	bl	800126c <MX_I2C2_Init>
  MX_TIM1_Init();
 800104c:	f000 f94e 	bl	80012ec <MX_TIM1_Init>
  MX_TIM2_Init();
 8001050:	f000 f9d8 	bl	8001404 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001054:	f000 fa48 	bl	80014e8 <MX_TIM3_Init>
  MX_UART5_Init();
 8001058:	f000 fabc 	bl	80015d4 <MX_UART5_Init>
  MX_USART3_UART_Init();
 800105c:	f000 fae6 	bl	800162c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001060:	f000 fb0e 	bl	8001680 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

//  init_Lidar();
//  Lidar3dTest();
  printf("start hx711 !!\n");
 8001064:	4819      	ldr	r0, [pc, #100]	; (80010cc <main+0x98>)
 8001066:	f006 fd1d 	bl	8007aa4 <puts>
  initHx711();
 800106a:	f005 fb47 	bl	80066fc <initHx711>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800106e:	f004 f955 	bl	800531c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001072:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <main+0x9c>)
 8001074:	2100      	movs	r1, #0
 8001076:	4817      	ldr	r0, [pc, #92]	; (80010d4 <main+0xa0>)
 8001078:	f004 f974 	bl	8005364 <osThreadNew>
 800107c:	4603      	mov	r3, r0
 800107e:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <main+0xa4>)
 8001080:	6013      	str	r3, [r2, #0]

  /* creation of Task_hx711_01 */
  Task_hx711_01Handle = osThreadNew(StartTask02, NULL, &Task_hx711_01_attributes);
 8001082:	4a16      	ldr	r2, [pc, #88]	; (80010dc <main+0xa8>)
 8001084:	2100      	movs	r1, #0
 8001086:	4816      	ldr	r0, [pc, #88]	; (80010e0 <main+0xac>)
 8001088:	f004 f96c 	bl	8005364 <osThreadNew>
 800108c:	4603      	mov	r3, r0
 800108e:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <main+0xb0>)
 8001090:	6013      	str	r3, [r2, #0]

  /* creation of Task_hx711_02 */
  Task_hx711_02Handle = osThreadNew(StartTask03, NULL, &Task_hx711_02_attributes);
 8001092:	4a15      	ldr	r2, [pc, #84]	; (80010e8 <main+0xb4>)
 8001094:	2100      	movs	r1, #0
 8001096:	4815      	ldr	r0, [pc, #84]	; (80010ec <main+0xb8>)
 8001098:	f004 f964 	bl	8005364 <osThreadNew>
 800109c:	4603      	mov	r3, r0
 800109e:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <main+0xbc>)
 80010a0:	6013      	str	r3, [r2, #0]

  /* creation of Task_hx711_03 */
  Task_hx711_03Handle = osThreadNew(StartTask04, NULL, &Task_hx711_03_attributes);
 80010a2:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <main+0xc0>)
 80010a4:	2100      	movs	r1, #0
 80010a6:	4814      	ldr	r0, [pc, #80]	; (80010f8 <main+0xc4>)
 80010a8:	f004 f95c 	bl	8005364 <osThreadNew>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a13      	ldr	r2, [pc, #76]	; (80010fc <main+0xc8>)
 80010b0:	6013      	str	r3, [r2, #0]

  /* creation of Task_hx711_04 */
  Task_hx711_04Handle = osThreadNew(StartTask05, NULL, &Task_hx711_04_attributes);
 80010b2:	4a13      	ldr	r2, [pc, #76]	; (8001100 <main+0xcc>)
 80010b4:	2100      	movs	r1, #0
 80010b6:	4813      	ldr	r0, [pc, #76]	; (8001104 <main+0xd0>)
 80010b8:	f004 f954 	bl	8005364 <osThreadNew>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <main+0xd4>)
 80010c0:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  pcTest();
	  runHx711(6);
 80010c2:	2006      	movs	r0, #6
 80010c4:	f005 fbd6 	bl	8006874 <runHx711>
  {
 80010c8:	e7fb      	b.n	80010c2 <main+0x8e>
 80010ca:	bf00      	nop
 80010cc:	0800986c 	.word	0x0800986c
 80010d0:	080098d8 	.word	0x080098d8
 80010d4:	08001941 	.word	0x08001941
 80010d8:	2000441c 	.word	0x2000441c
 80010dc:	080098fc 	.word	0x080098fc
 80010e0:	08001959 	.word	0x08001959
 80010e4:	200045bc 	.word	0x200045bc
 80010e8:	08009920 	.word	0x08009920
 80010ec:	08001971 	.word	0x08001971
 80010f0:	2000460c 	.word	0x2000460c
 80010f4:	08009944 	.word	0x08009944
 80010f8:	08001989 	.word	0x08001989
 80010fc:	20004464 	.word	0x20004464
 8001100:	08009968 	.word	0x08009968
 8001104:	080019a1 	.word	0x080019a1
 8001108:	20004574 	.word	0x20004574

0800110c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b094      	sub	sp, #80	; 0x50
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0320 	add.w	r3, r7, #32
 8001116:	2230      	movs	r2, #48	; 0x30
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f005 ff20 	bl	8006f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <SystemClock_Config+0xd8>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	4a2a      	ldr	r2, [pc, #168]	; (80011e4 <SystemClock_Config+0xd8>)
 800113a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113e:	6413      	str	r3, [r2, #64]	; 0x40
 8001140:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <SystemClock_Config+0xd8>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <SystemClock_Config+0xdc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a24      	ldr	r2, [pc, #144]	; (80011e8 <SystemClock_Config+0xdc>)
 8001156:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <SystemClock_Config+0xdc>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001168:	2302      	movs	r3, #2
 800116a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116c:	2301      	movs	r3, #1
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001170:	2310      	movs	r3, #16
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001174:	2302      	movs	r3, #2
 8001176:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001178:	2300      	movs	r3, #0
 800117a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800117c:	2308      	movs	r3, #8
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001180:	23b4      	movs	r3, #180	; 0xb4
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001184:	2302      	movs	r3, #2
 8001186:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001188:	2304      	movs	r3, #4
 800118a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118c:	f107 0320 	add.w	r3, r7, #32
 8001190:	4618      	mov	r0, r3
 8001192:	f001 fda3 	bl	8002cdc <HAL_RCC_OscConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800119c:	f000 fc1e 	bl	80019dc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011a0:	f001 fd4c 	bl	8002c3c <HAL_PWREx_EnableOverDrive>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80011aa:	f000 fc17 	bl	80019dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ae:	230f      	movs	r3, #15
 80011b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b2:	2302      	movs	r3, #2
 80011b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2105      	movs	r1, #5
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 fffd 	bl	80031cc <HAL_RCC_ClockConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80011d8:	f000 fc00 	bl	80019dc <Error_Handler>
  }
}
 80011dc:	bf00      	nop
 80011de:	3750      	adds	r7, #80	; 0x50
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40007000 	.word	0x40007000

080011ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <MX_I2C1_Init+0x74>)
 80011f2:	4a1c      	ldr	r2, [pc, #112]	; (8001264 <MX_I2C1_Init+0x78>)
 80011f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <MX_I2C1_Init+0x74>)
 80011f8:	4a1b      	ldr	r2, [pc, #108]	; (8001268 <MX_I2C1_Init+0x7c>)
 80011fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011fc:	4b18      	ldr	r3, [pc, #96]	; (8001260 <MX_I2C1_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <MX_I2C1_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <MX_I2C1_Init+0x74>)
 800120a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800120e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_I2C1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <MX_I2C1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_I2C1_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001228:	480d      	ldr	r0, [pc, #52]	; (8001260 <MX_I2C1_Init+0x74>)
 800122a:	f001 fb47 	bl	80028bc <HAL_I2C_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001234:	f000 fbd2 	bl	80019dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001238:	2100      	movs	r1, #0
 800123a:	4809      	ldr	r0, [pc, #36]	; (8001260 <MX_I2C1_Init+0x74>)
 800123c:	f001 fc82 	bl	8002b44 <HAL_I2CEx_ConfigAnalogFilter>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001246:	f000 fbc9 	bl	80019dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800124a:	2100      	movs	r1, #0
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_I2C1_Init+0x74>)
 800124e:	f001 fcb5 	bl	8002bbc <HAL_I2CEx_ConfigDigitalFilter>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001258:	f000 fbc0 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20004468 	.word	0x20004468
 8001264:	40005400 	.word	0x40005400
 8001268:	000186a0 	.word	0x000186a0

0800126c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001270:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <MX_I2C2_Init+0x74>)
 8001272:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <MX_I2C2_Init+0x78>)
 8001274:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MX_I2C2_Init+0x74>)
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <MX_I2C2_Init+0x7c>)
 800127a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <MX_I2C2_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_I2C2_Init+0x74>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <MX_I2C2_Init+0x74>)
 800128a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800128e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <MX_I2C2_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_I2C2_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <MX_I2C2_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_I2C2_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <MX_I2C2_Init+0x74>)
 80012aa:	f001 fb07 	bl	80028bc <HAL_I2C_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012b4:	f000 fb92 	bl	80019dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b8:	2100      	movs	r1, #0
 80012ba:	4809      	ldr	r0, [pc, #36]	; (80012e0 <MX_I2C2_Init+0x74>)
 80012bc:	f001 fc42 	bl	8002b44 <HAL_I2CEx_ConfigAnalogFilter>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80012c6:	f000 fb89 	bl	80019dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012ca:	2100      	movs	r1, #0
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_I2C2_Init+0x74>)
 80012ce:	f001 fc75 	bl	8002bbc <HAL_I2CEx_ConfigDigitalFilter>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80012d8:	f000 fb80 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200044bc 	.word	0x200044bc
 80012e4:	40005800 	.word	0x40005800
 80012e8:	000186a0 	.word	0x000186a0

080012ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	; 0x30
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001318:	4b38      	ldr	r3, [pc, #224]	; (80013fc <MX_TIM1_Init+0x110>)
 800131a:	4a39      	ldr	r2, [pc, #228]	; (8001400 <MX_TIM1_Init+0x114>)
 800131c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800131e:	4b37      	ldr	r3, [pc, #220]	; (80013fc <MX_TIM1_Init+0x110>)
 8001320:	2200      	movs	r2, #0
 8001322:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b35      	ldr	r3, [pc, #212]	; (80013fc <MX_TIM1_Init+0x110>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800132a:	4b34      	ldr	r3, [pc, #208]	; (80013fc <MX_TIM1_Init+0x110>)
 800132c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001330:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001332:	4b32      	ldr	r3, [pc, #200]	; (80013fc <MX_TIM1_Init+0x110>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001338:	4b30      	ldr	r3, [pc, #192]	; (80013fc <MX_TIM1_Init+0x110>)
 800133a:	2200      	movs	r2, #0
 800133c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133e:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <MX_TIM1_Init+0x110>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001344:	482d      	ldr	r0, [pc, #180]	; (80013fc <MX_TIM1_Init+0x110>)
 8001346:	f002 f943 	bl	80035d0 <HAL_TIM_Base_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001350:	f000 fb44 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001354:	4829      	ldr	r0, [pc, #164]	; (80013fc <MX_TIM1_Init+0x110>)
 8001356:	f002 f9fb 	bl	8003750 <HAL_TIM_IC_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001360:	f000 fb3c 	bl	80019dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4822      	ldr	r0, [pc, #136]	; (80013fc <MX_TIM1_Init+0x110>)
 8001374:	f002 fbe9 	bl	8003b4a <HAL_TIM_SlaveConfigSynchro>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800137e:	f000 fb2d 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	481a      	ldr	r0, [pc, #104]	; (80013fc <MX_TIM1_Init+0x110>)
 8001392:	f002 ff5b 	bl	800424c <HAL_TIMEx_MasterConfigSynchronization>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 800139c:	f000 fb1e 	bl	80019dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013a4:	2301      	movs	r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2200      	movs	r2, #0
 80013b4:	4619      	mov	r1, r3
 80013b6:	4811      	ldr	r0, [pc, #68]	; (80013fc <MX_TIM1_Init+0x110>)
 80013b8:	f002 fb2b 	bl	8003a12 <HAL_TIM_IC_ConfigChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80013c2:	f000 fb0b 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2204      	movs	r2, #4
 80013ca:	4619      	mov	r1, r3
 80013cc:	480b      	ldr	r0, [pc, #44]	; (80013fc <MX_TIM1_Init+0x110>)
 80013ce:	f002 fb20 	bl	8003a12 <HAL_TIM_IC_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80013d8:	f000 fb00 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2208      	movs	r2, #8
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <MX_TIM1_Init+0x110>)
 80013e4:	f002 fb15 	bl	8003a12 <HAL_TIM_IC_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80013ee:	f000 faf5 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	3730      	adds	r7, #48	; 0x30
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200045c4 	.word	0x200045c4
 8001400:	40010000 	.word	0x40010000

08001404 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	; 0x30
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001430:	4b2c      	ldr	r3, [pc, #176]	; (80014e4 <MX_TIM2_Init+0xe0>)
 8001432:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001436:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001438:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <MX_TIM2_Init+0xe0>)
 800143a:	2200      	movs	r2, #0
 800143c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143e:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <MX_TIM2_Init+0xe0>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001444:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <MX_TIM2_Init+0xe0>)
 8001446:	f04f 32ff 	mov.w	r2, #4294967295
 800144a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144c:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <MX_TIM2_Init+0xe0>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001452:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <MX_TIM2_Init+0xe0>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001458:	4822      	ldr	r0, [pc, #136]	; (80014e4 <MX_TIM2_Init+0xe0>)
 800145a:	f002 f8b9 	bl	80035d0 <HAL_TIM_Base_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001464:	f000 faba 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001468:	481e      	ldr	r0, [pc, #120]	; (80014e4 <MX_TIM2_Init+0xe0>)
 800146a:	f002 f971 	bl	8003750 <HAL_TIM_IC_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001474:	f000 fab2 	bl	80019dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	4817      	ldr	r0, [pc, #92]	; (80014e4 <MX_TIM2_Init+0xe0>)
 8001488:	f002 fb5f 	bl	8003b4a <HAL_TIM_SlaveConfigSynchro>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001492:	f000 faa3 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	480f      	ldr	r0, [pc, #60]	; (80014e4 <MX_TIM2_Init+0xe0>)
 80014a6:	f002 fed1 	bl	800424c <HAL_TIMEx_MasterConfigSynchronization>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80014b0:	f000 fa94 	bl	80019dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014b4:	2300      	movs	r3, #0
 80014b6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014b8:	2301      	movs	r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2204      	movs	r2, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <MX_TIM2_Init+0xe0>)
 80014cc:	f002 faa1 	bl	8003a12 <HAL_TIM_IC_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80014d6:	f000 fa81 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	3730      	adds	r7, #48	; 0x30
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200046a8 	.word	0x200046a8

080014e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	; 0x30
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001514:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <MX_TIM3_Init+0xe4>)
 8001516:	4a2e      	ldr	r2, [pc, #184]	; (80015d0 <MX_TIM3_Init+0xe8>)
 8001518:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535-1;
 800151a:	4b2c      	ldr	r3, [pc, #176]	; (80015cc <MX_TIM3_Init+0xe4>)
 800151c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001520:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001522:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <MX_TIM3_Init+0xe4>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001528:	4b28      	ldr	r3, [pc, #160]	; (80015cc <MX_TIM3_Init+0xe4>)
 800152a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800152e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001530:	4b26      	ldr	r3, [pc, #152]	; (80015cc <MX_TIM3_Init+0xe4>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001536:	4b25      	ldr	r3, [pc, #148]	; (80015cc <MX_TIM3_Init+0xe4>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800153c:	4823      	ldr	r0, [pc, #140]	; (80015cc <MX_TIM3_Init+0xe4>)
 800153e:	f002 f847 	bl	80035d0 <HAL_TIM_Base_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001548:	f000 fa48 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800154c:	481f      	ldr	r0, [pc, #124]	; (80015cc <MX_TIM3_Init+0xe4>)
 800154e:	f002 f8ff 	bl	8003750 <HAL_TIM_IC_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001558:	f000 fa40 	bl	80019dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8001560:	2340      	movs	r3, #64	; 0x40
 8001562:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	4817      	ldr	r0, [pc, #92]	; (80015cc <MX_TIM3_Init+0xe4>)
 8001570:	f002 faeb 	bl	8003b4a <HAL_TIM_SlaveConfigSynchro>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800157a:	f000 fa2f 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	480f      	ldr	r0, [pc, #60]	; (80015cc <MX_TIM3_Init+0xe4>)
 800158e:	f002 fe5d 	bl	800424c <HAL_TIMEx_MasterConfigSynchronization>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001598:	f000 fa20 	bl	80019dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015a0:	2301      	movs	r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2204      	movs	r2, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <MX_TIM3_Init+0xe4>)
 80015b4:	f002 fa2d 	bl	8003a12 <HAL_TIM_IC_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80015be:	f000 fa0d 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	3730      	adds	r7, #48	; 0x30
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000452c 	.word	0x2000452c
 80015d0:	40000400 	.word	0x40000400

080015d4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_UART5_Init+0x4c>)
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <MX_UART5_Init+0x50>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 3000000;
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <MX_UART5_Init+0x4c>)
 80015e0:	4a11      	ldr	r2, [pc, #68]	; (8001628 <MX_UART5_Init+0x54>)
 80015e2:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_UART5_Init+0x4c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <MX_UART5_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <MX_UART5_Init+0x4c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <MX_UART5_Init+0x4c>)
 80015f8:	220c      	movs	r2, #12
 80015fa:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <MX_UART5_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_8;
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <MX_UART5_Init+0x4c>)
 8001604:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_UART5_Init+0x4c>)
 800160c:	f002 feae 	bl	800436c <HAL_UART_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001616:	f000 f9e1 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20004578 	.word	0x20004578
 8001624:	40005000 	.word	0x40005000
 8001628:	002dc6c0 	.word	0x002dc6c0

0800162c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_USART3_UART_Init+0x4c>)
 8001632:	4a12      	ldr	r2, [pc, #72]	; (800167c <MX_USART3_UART_Init+0x50>)
 8001634:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <MX_USART3_UART_Init+0x4c>)
 8001638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800163c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MX_USART3_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_USART3_UART_Init+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <MX_USART3_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_USART3_UART_Init+0x4c>)
 8001652:	220c      	movs	r2, #12
 8001654:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <MX_USART3_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <MX_USART3_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_USART3_UART_Init+0x4c>)
 8001664:	f002 fe82 	bl	800436c <HAL_UART_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800166e:	f000 f9b5 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20004420 	.word	0x20004420
 800167c:	40004800 	.word	0x40004800

08001680 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <MX_USART6_UART_Init+0x4c>)
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <MX_USART6_UART_Init+0x50>)
 8001688:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <MX_USART6_UART_Init+0x4c>)
 800168c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001690:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <MX_USART6_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_USART6_UART_Init+0x4c>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <MX_USART6_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_USART6_UART_Init+0x4c>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <MX_USART6_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_USART6_UART_Init+0x4c>)
 80016b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016b6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <MX_USART6_UART_Init+0x4c>)
 80016ba:	f002 fe57 	bl	800436c <HAL_UART_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 80016c4:	f000 f98a 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20004660 	.word	0x20004660
 80016d0:	40011400 	.word	0x40011400

080016d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08c      	sub	sp, #48	; 0x30
 80016d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	4b8d      	ldr	r3, [pc, #564]	; (8001924 <MX_GPIO_Init+0x250>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a8c      	ldr	r2, [pc, #560]	; (8001924 <MX_GPIO_Init+0x250>)
 80016f4:	f043 0310 	orr.w	r3, r3, #16
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b8a      	ldr	r3, [pc, #552]	; (8001924 <MX_GPIO_Init+0x250>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	61bb      	str	r3, [r7, #24]
 8001704:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	4b86      	ldr	r3, [pc, #536]	; (8001924 <MX_GPIO_Init+0x250>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a85      	ldr	r2, [pc, #532]	; (8001924 <MX_GPIO_Init+0x250>)
 8001710:	f043 0320 	orr.w	r3, r3, #32
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b83      	ldr	r3, [pc, #524]	; (8001924 <MX_GPIO_Init+0x250>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0320 	and.w	r3, r3, #32
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b7f      	ldr	r3, [pc, #508]	; (8001924 <MX_GPIO_Init+0x250>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a7e      	ldr	r2, [pc, #504]	; (8001924 <MX_GPIO_Init+0x250>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b7c      	ldr	r3, [pc, #496]	; (8001924 <MX_GPIO_Init+0x250>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b78      	ldr	r3, [pc, #480]	; (8001924 <MX_GPIO_Init+0x250>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a77      	ldr	r2, [pc, #476]	; (8001924 <MX_GPIO_Init+0x250>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b75      	ldr	r3, [pc, #468]	; (8001924 <MX_GPIO_Init+0x250>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b71      	ldr	r3, [pc, #452]	; (8001924 <MX_GPIO_Init+0x250>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a70      	ldr	r2, [pc, #448]	; (8001924 <MX_GPIO_Init+0x250>)
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b6e      	ldr	r3, [pc, #440]	; (8001924 <MX_GPIO_Init+0x250>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	4b6a      	ldr	r3, [pc, #424]	; (8001924 <MX_GPIO_Init+0x250>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a69      	ldr	r2, [pc, #420]	; (8001924 <MX_GPIO_Init+0x250>)
 8001780:	f043 0308 	orr.w	r3, r3, #8
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b67      	ldr	r3, [pc, #412]	; (8001924 <MX_GPIO_Init+0x250>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	4b63      	ldr	r3, [pc, #396]	; (8001924 <MX_GPIO_Init+0x250>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a62      	ldr	r2, [pc, #392]	; (8001924 <MX_GPIO_Init+0x250>)
 800179c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b60      	ldr	r3, [pc, #384]	; (8001924 <MX_GPIO_Init+0x250>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EXPD01_sck_Pin|PD03_sck_Pin|PD05_sck_Pin|EXIC01_sck_Pin
 80017ae:	2200      	movs	r2, #0
 80017b0:	f24c 5105 	movw	r1, #50437	; 0xc505
 80017b4:	485c      	ldr	r0, [pc, #368]	; (8001928 <MX_GPIO_Init+0x254>)
 80017b6:	f001 f867 	bl	8002888 <HAL_GPIO_WritePin>
                          |SYR01_sck_Pin|SYR02_sck_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD01_sck_GPIO_Port, PD01_sck_Pin, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2104      	movs	r1, #4
 80017be:	485b      	ldr	r0, [pc, #364]	; (800192c <MX_GPIO_Init+0x258>)
 80017c0:	f001 f862 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CP01_echo_GPIO_Port, CP01_echo_Pin, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	4859      	ldr	r0, [pc, #356]	; (8001930 <MX_GPIO_Init+0x25c>)
 80017ca:	f001 f85d 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PD01_echo_Pin|JG01_echo_Pin|JG02_echo_Pin|LD01_echo_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80017d4:	4857      	ldr	r0, [pc, #348]	; (8001934 <MX_GPIO_Init+0x260>)
 80017d6:	f001 f857 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD04_sck_Pin|CF01_echo_Pin, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80017e0:	4855      	ldr	r0, [pc, #340]	; (8001938 <MX_GPIO_Init+0x264>)
 80017e2:	f001 f851 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD02_sck_GPIO_Port, PD02_sck_Pin, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2140      	movs	r1, #64	; 0x40
 80017ea:	4854      	ldr	r0, [pc, #336]	; (800193c <MX_GPIO_Init+0x268>)
 80017ec:	f001 f84c 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EXPD01_sck_Pin PD03_sck_Pin PD05_sck_Pin EXIC01_sck_Pin
                           SYR01_sck_Pin SYR02_sck_Pin */
  GPIO_InitStruct.Pin = EXPD01_sck_Pin|PD03_sck_Pin|PD05_sck_Pin|EXIC01_sck_Pin
 80017f0:	f24c 5305 	movw	r3, #50437	; 0xc505
 80017f4:	61fb      	str	r3, [r7, #28]
                          |SYR01_sck_Pin|SYR02_sck_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001802:	f107 031c 	add.w	r3, r7, #28
 8001806:	4619      	mov	r1, r3
 8001808:	4847      	ldr	r0, [pc, #284]	; (8001928 <MX_GPIO_Init+0x254>)
 800180a:	f000 fe79 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD02_dout_Pin */
  GPIO_InitStruct.Pin = PD02_dout_Pin;
 800180e:	2310      	movs	r3, #16
 8001810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PD02_dout_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 031c 	add.w	r3, r7, #28
 800181e:	4619      	mov	r1, r3
 8001820:	4844      	ldr	r0, [pc, #272]	; (8001934 <MX_GPIO_Init+0x260>)
 8001822:	f000 fe6d 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD01_sck_Pin */
  GPIO_InitStruct.Pin = PD01_sck_Pin;
 8001826:	2304      	movs	r3, #4
 8001828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PD01_sck_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	4619      	mov	r1, r3
 800183c:	483b      	ldr	r0, [pc, #236]	; (800192c <MX_GPIO_Init+0x258>)
 800183e:	f000 fe5f 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pin : SYR01_dout_Pin */
  GPIO_InitStruct.Pin = SYR01_dout_Pin;
 8001842:	2301      	movs	r3, #1
 8001844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SYR01_dout_GPIO_Port, &GPIO_InitStruct);
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	4619      	mov	r1, r3
 8001854:	4836      	ldr	r0, [pc, #216]	; (8001930 <MX_GPIO_Init+0x25c>)
 8001856:	f000 fe53 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pin : CP01_echo_Pin */
  GPIO_InitStruct.Pin = CP01_echo_Pin;
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	2301      	movs	r3, #1
 8001860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CP01_echo_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	4619      	mov	r1, r3
 8001870:	482f      	ldr	r0, [pc, #188]	; (8001930 <MX_GPIO_Init+0x25c>)
 8001872:	f000 fe45 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYR02_dout_Pin PD01_dout_Pin PD03_dout_Pin */
  GPIO_InitStruct.Pin = SYR02_dout_Pin|PD01_dout_Pin|PD03_dout_Pin;
 8001876:	2307      	movs	r3, #7
 8001878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	4619      	mov	r1, r3
 8001888:	482c      	ldr	r0, [pc, #176]	; (800193c <MX_GPIO_Init+0x268>)
 800188a:	f000 fe39 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD01_echo_Pin JG01_echo_Pin JG02_echo_Pin LD01_echo_Pin */
  GPIO_InitStruct.Pin = PD01_echo_Pin|JG01_echo_Pin|JG02_echo_Pin|LD01_echo_Pin;
 800188e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001894:	2301      	movs	r3, #1
 8001896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	4619      	mov	r1, r3
 80018a6:	4823      	ldr	r0, [pc, #140]	; (8001934 <MX_GPIO_Init+0x260>)
 80018a8:	f000 fe2a 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD05_dout_Pin EXIC01_dout_Pin */
  GPIO_InitStruct.Pin = PD05_dout_Pin|EXIC01_dout_Pin;
 80018ac:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 80018b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	4619      	mov	r1, r3
 80018c0:	4819      	ldr	r0, [pc, #100]	; (8001928 <MX_GPIO_Init+0x254>)
 80018c2:	f000 fe1d 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXPD01_dout_Pin PD04_dout_Pin */
  GPIO_InitStruct.Pin = EXPD01_dout_Pin|PD04_dout_Pin;
 80018c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80018ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	4619      	mov	r1, r3
 80018da:	4817      	ldr	r0, [pc, #92]	; (8001938 <MX_GPIO_Init+0x264>)
 80018dc:	f000 fe10 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD04_sck_Pin CF01_echo_Pin */
  GPIO_InitStruct.Pin = PD04_sck_Pin|CF01_echo_Pin;
 80018e0:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80018e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4619      	mov	r1, r3
 80018f8:	480f      	ldr	r0, [pc, #60]	; (8001938 <MX_GPIO_Init+0x264>)
 80018fa:	f000 fe01 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD02_sck_Pin */
  GPIO_InitStruct.Pin = PD02_sck_Pin;
 80018fe:	2340      	movs	r3, #64	; 0x40
 8001900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PD02_sck_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	4809      	ldr	r0, [pc, #36]	; (800193c <MX_GPIO_Init+0x268>)
 8001916:	f000 fdf3 	bl	8002500 <HAL_GPIO_Init>

}
 800191a:	bf00      	nop
 800191c:	3730      	adds	r7, #48	; 0x30
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	40021000 	.word	0x40021000
 800192c:	40020800 	.word	0x40020800
 8001930:	40020000 	.word	0x40020000
 8001934:	40021400 	.word	0x40021400
 8001938:	40020c00 	.word	0x40020c00
 800193c:	40020400 	.word	0x40020400

08001940 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	 printf("test01\n");
	 HAL_Delay(1000);
 8001948:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800194c:	f000 fc40 	bl	80021d0 <HAL_Delay>
	 //	  runHx711(0);
    osDelay(1);
 8001950:	2001      	movs	r0, #1
 8001952:	f003 fd99 	bl	8005488 <osDelay>
	 HAL_Delay(1000);
 8001956:	e7f7      	b.n	8001948 <StartDefaultTask+0x8>

08001958 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
//	 printf("test02\n");
		 HAL_Delay(1005);
 8001960:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8001964:	f000 fc34 	bl	80021d0 <HAL_Delay>

//	  runHx711(1);

    osDelay(1);
 8001968:	2001      	movs	r0, #1
 800196a:	f003 fd8d 	bl	8005488 <osDelay>
		 HAL_Delay(1005);
 800196e:	e7f7      	b.n	8001960 <StartTask02+0x8>

08001970 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
//		 printf("test03\n");
			 HAL_Delay(1025);
 8001978:	f240 4001 	movw	r0, #1025	; 0x401
 800197c:	f000 fc28 	bl	80021d0 <HAL_Delay>
    osDelay(1);
 8001980:	2001      	movs	r0, #1
 8001982:	f003 fd81 	bl	8005488 <osDelay>
			 HAL_Delay(1025);
 8001986:	e7f7      	b.n	8001978 <StartTask03+0x8>

08001988 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  runHx711(2);
//		 printf("test04\n");
			 HAL_Delay(1055);
 8001990:	f240 401f 	movw	r0, #1055	; 0x41f
 8001994:	f000 fc1c 	bl	80021d0 <HAL_Delay>
    osDelay(1);
 8001998:	2001      	movs	r0, #1
 800199a:	f003 fd75 	bl	8005488 <osDelay>
			 HAL_Delay(1055);
 800199e:	e7f7      	b.n	8001990 <StartTask04+0x8>

080019a0 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
//	  runHx711(3);
	  runHx711(0);
 80019a8:	2000      	movs	r0, #0
 80019aa:	f004 ff63 	bl	8006874 <runHx711>
    osDelay(1);
 80019ae:	2001      	movs	r0, #1
 80019b0:	f003 fd6a 	bl	8005488 <osDelay>
  {
 80019b4:	e7f8      	b.n	80019a8 <StartTask05+0x8>
	...

080019b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d101      	bne.n	80019ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ca:	f000 fbe1 	bl	8002190 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40001c00 	.word	0x40001c00

080019dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
}
 80019e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <Error_Handler+0x8>
	...

080019e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_MspInit+0x54>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4a11      	ldr	r2, [pc, #68]	; (8001a3c <HAL_MspInit+0x54>)
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_MspInit+0x54>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_MspInit+0x54>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_MspInit+0x54>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_MspInit+0x54>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	210f      	movs	r1, #15
 8001a2a:	f06f 0001 	mvn.w	r0, #1
 8001a2e:	f000 fcab 	bl	8002388 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800

08001a40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	; 0x30
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a33      	ldr	r2, [pc, #204]	; (8001b2c <HAL_I2C_MspInit+0xec>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d12d      	bne.n	8001abe <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
 8001a66:	4b32      	ldr	r3, [pc, #200]	; (8001b30 <HAL_I2C_MspInit+0xf0>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a31      	ldr	r2, [pc, #196]	; (8001b30 <HAL_I2C_MspInit+0xf0>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b2f      	ldr	r3, [pc, #188]	; (8001b30 <HAL_I2C_MspInit+0xf0>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	61bb      	str	r3, [r7, #24]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Cup_Bakery_SCL_Pin|Cup_Bakery_SDA_Pin;
 8001a7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a84:	2312      	movs	r3, #18
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a90:	2304      	movs	r3, #4
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4826      	ldr	r0, [pc, #152]	; (8001b34 <HAL_I2C_MspInit+0xf4>)
 8001a9c:	f000 fd30 	bl	8002500 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <HAL_I2C_MspInit+0xf0>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	4a21      	ldr	r2, [pc, #132]	; (8001b30 <HAL_I2C_MspInit+0xf0>)
 8001aaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aae:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <HAL_I2C_MspInit+0xf0>)
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001abc:	e031      	b.n	8001b22 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a1d      	ldr	r2, [pc, #116]	; (8001b38 <HAL_I2C_MspInit+0xf8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d12c      	bne.n	8001b22 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_I2C_MspInit+0xf0>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <HAL_I2C_MspInit+0xf0>)
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_I2C_MspInit+0xf0>)
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Lid_SCL_Pin|Lid_SDA_Pin;
 8001ae4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aea:	2312      	movs	r3, #18
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001af6:	2304      	movs	r3, #4
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afa:	f107 031c 	add.w	r3, r7, #28
 8001afe:	4619      	mov	r1, r3
 8001b00:	480c      	ldr	r0, [pc, #48]	; (8001b34 <HAL_I2C_MspInit+0xf4>)
 8001b02:	f000 fcfd 	bl	8002500 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_I2C_MspInit+0xf0>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <HAL_I2C_MspInit+0xf0>)
 8001b10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_I2C_MspInit+0xf0>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
}
 8001b22:	bf00      	nop
 8001b24:	3730      	adds	r7, #48	; 0x30
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40005400 	.word	0x40005400
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40005800 	.word	0x40005800

08001b3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08e      	sub	sp, #56	; 0x38
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a4b      	ldr	r2, [pc, #300]	; (8001c88 <HAL_TIM_Base_MspInit+0x14c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d12d      	bne.n	8001bba <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
 8001b62:	4b4a      	ldr	r3, [pc, #296]	; (8001c8c <HAL_TIM_Base_MspInit+0x150>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a49      	ldr	r2, [pc, #292]	; (8001c8c <HAL_TIM_Base_MspInit+0x150>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6e:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_TIM_Base_MspInit+0x150>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	623b      	str	r3, [r7, #32]
 8001b78:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_TIM_Base_MspInit+0x150>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a42      	ldr	r2, [pc, #264]	; (8001c8c <HAL_TIM_Base_MspInit+0x150>)
 8001b84:	f043 0310 	orr.w	r3, r3, #16
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b40      	ldr	r3, [pc, #256]	; (8001c8c <HAL_TIM_Base_MspInit+0x150>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	61fb      	str	r3, [r7, #28]
 8001b94:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = JG01_TIM_Pin|JG02_TIM_Pin|LD01_TIM_Pin;
 8001b96:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4837      	ldr	r0, [pc, #220]	; (8001c90 <HAL_TIM_Base_MspInit+0x154>)
 8001bb4:	f000 fca4 	bl	8002500 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bb8:	e062      	b.n	8001c80 <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc2:	d12c      	bne.n	8001c1e <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
 8001bc8:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <HAL_TIM_Base_MspInit+0x150>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	4a2f      	ldr	r2, [pc, #188]	; (8001c8c <HAL_TIM_Base_MspInit+0x150>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_TIM_Base_MspInit+0x150>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <HAL_TIM_Base_MspInit+0x150>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	4a28      	ldr	r2, [pc, #160]	; (8001c8c <HAL_TIM_Base_MspInit+0x150>)
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf0:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <HAL_TIM_Base_MspInit+0x150>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PD01_TIM_Pin;
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PD01_TIM_GPIO_Port, &GPIO_InitStruct);
 8001c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c14:	4619      	mov	r1, r3
 8001c16:	481f      	ldr	r0, [pc, #124]	; (8001c94 <HAL_TIM_Base_MspInit+0x158>)
 8001c18:	f000 fc72 	bl	8002500 <HAL_GPIO_Init>
}
 8001c1c:	e030      	b.n	8001c80 <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM3)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a1d      	ldr	r2, [pc, #116]	; (8001c98 <HAL_TIM_Base_MspInit+0x15c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d12b      	bne.n	8001c80 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <HAL_TIM_Base_MspInit+0x150>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	4a16      	ldr	r2, [pc, #88]	; (8001c8c <HAL_TIM_Base_MspInit+0x150>)
 8001c32:	f043 0302 	orr.w	r3, r3, #2
 8001c36:	6413      	str	r3, [r2, #64]	; 0x40
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <HAL_TIM_Base_MspInit+0x150>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_TIM_Base_MspInit+0x150>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	4a0f      	ldr	r2, [pc, #60]	; (8001c8c <HAL_TIM_Base_MspInit+0x150>)
 8001c4e:	f043 0302 	orr.w	r3, r3, #2
 8001c52:	6313      	str	r3, [r2, #48]	; 0x30
 8001c54:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_TIM_Base_MspInit+0x150>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CF01_TIM_Pin|CP01_TIM_Pin;
 8001c60:	2330      	movs	r3, #48	; 0x30
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c70:	2302      	movs	r3, #2
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4806      	ldr	r0, [pc, #24]	; (8001c94 <HAL_TIM_Base_MspInit+0x158>)
 8001c7c:	f000 fc40 	bl	8002500 <HAL_GPIO_Init>
}
 8001c80:	bf00      	nop
 8001c82:	3738      	adds	r7, #56	; 0x38
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40010000 	.word	0x40010000
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40020400 	.word	0x40020400
 8001c98:	40000400 	.word	0x40000400

08001c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08e      	sub	sp, #56	; 0x38
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a63      	ldr	r2, [pc, #396]	; (8001e48 <HAL_UART_MspInit+0x1ac>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d153      	bne.n	8001d66 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	623b      	str	r3, [r7, #32]
 8001cc2:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	4a61      	ldr	r2, [pc, #388]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001cc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cce:	4b5f      	ldr	r3, [pc, #380]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd6:	623b      	str	r3, [r7, #32]
 8001cd8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	4b5b      	ldr	r3, [pc, #364]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a5a      	ldr	r2, [pc, #360]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b58      	ldr	r3, [pc, #352]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
 8001cfa:	4b54      	ldr	r3, [pc, #336]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a53      	ldr	r2, [pc, #332]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001d00:	f043 0308 	orr.w	r3, r3, #8
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b51      	ldr	r3, [pc, #324]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	61bb      	str	r3, [r7, #24]
 8001d10:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d20:	2303      	movs	r3, #3
 8001d22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001d24:	2308      	movs	r3, #8
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4848      	ldr	r0, [pc, #288]	; (8001e50 <HAL_UART_MspInit+0x1b4>)
 8001d30:	f000 fbe6 	bl	8002500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d34:	2304      	movs	r3, #4
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001d44:	2308      	movs	r3, #8
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4841      	ldr	r0, [pc, #260]	; (8001e54 <HAL_UART_MspInit+0x1b8>)
 8001d50:	f000 fbd6 	bl	8002500 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 11, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	210b      	movs	r1, #11
 8001d58:	2035      	movs	r0, #53	; 0x35
 8001d5a:	f000 fb15 	bl	8002388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001d5e:	2035      	movs	r0, #53	; 0x35
 8001d60:	f000 fb2e 	bl	80023c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d64:	e06c      	b.n	8001e40 <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART3)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a3b      	ldr	r2, [pc, #236]	; (8001e58 <HAL_UART_MspInit+0x1bc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d135      	bne.n	8001ddc <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	4b35      	ldr	r3, [pc, #212]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	4a34      	ldr	r2, [pc, #208]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001d7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d80:	4b32      	ldr	r3, [pc, #200]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	4a2d      	ldr	r2, [pc, #180]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001d96:	f043 0308 	orr.w	r3, r3, #8
 8001d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9c:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 8001da8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db6:	2303      	movs	r3, #3
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dba:	2307      	movs	r3, #7
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4823      	ldr	r0, [pc, #140]	; (8001e54 <HAL_UART_MspInit+0x1b8>)
 8001dc6:	f000 fb9b 	bl	8002500 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 10, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	210a      	movs	r1, #10
 8001dce:	2027      	movs	r0, #39	; 0x27
 8001dd0:	f000 fada 	bl	8002388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001dd4:	2027      	movs	r0, #39	; 0x27
 8001dd6:	f000 faf3 	bl	80023c0 <HAL_NVIC_EnableIRQ>
}
 8001dda:	e031      	b.n	8001e40 <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART6)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1e      	ldr	r2, [pc, #120]	; (8001e5c <HAL_UART_MspInit+0x1c0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d12c      	bne.n	8001e40 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001df0:	f043 0320 	orr.w	r3, r3, #32
 8001df4:	6453      	str	r3, [r2, #68]	; 0x44
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_UART_MspInit+0x1b0>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Lidar2_RX_Pin|Lidar2_TX_Pin;
 8001e1e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e30:	2308      	movs	r3, #8
 8001e32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4809      	ldr	r0, [pc, #36]	; (8001e60 <HAL_UART_MspInit+0x1c4>)
 8001e3c:	f000 fb60 	bl	8002500 <HAL_GPIO_Init>
}
 8001e40:	bf00      	nop
 8001e42:	3738      	adds	r7, #56	; 0x38
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40005000 	.word	0x40005000
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020800 	.word	0x40020800
 8001e54:	40020c00 	.word	0x40020c00
 8001e58:	40004800 	.word	0x40004800
 8001e5c:	40011400 	.word	0x40011400
 8001e60:	40021800 	.word	0x40021800

08001e64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08c      	sub	sp, #48	; 0x30
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8001e74:	2200      	movs	r2, #0
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	202c      	movs	r0, #44	; 0x2c
 8001e7a:	f000 fa85 	bl	8002388 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001e7e:	202c      	movs	r0, #44	; 0x2c
 8001e80:	f000 fa9e 	bl	80023c0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <HAL_InitTick+0xa4>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	4a1e      	ldr	r2, [pc, #120]	; (8001f08 <HAL_InitTick+0xa4>)
 8001e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e92:	6413      	str	r3, [r2, #64]	; 0x40
 8001e94:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <HAL_InitTick+0xa4>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ea0:	f107 0210 	add.w	r2, r7, #16
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f001 fb5e 	bl	800356c <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001eb0:	f001 fb34 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebc:	4a13      	ldr	r2, [pc, #76]	; (8001f0c <HAL_InitTick+0xa8>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	0c9b      	lsrs	r3, r3, #18
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_InitTick+0xac>)
 8001eca:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <HAL_InitTick+0xb0>)
 8001ecc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_InitTick+0xac>)
 8001ed0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ed4:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <HAL_InitTick+0xac>)
 8001ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eda:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_InitTick+0xac>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_InitTick+0xac>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8001ee8:	4809      	ldr	r0, [pc, #36]	; (8001f10 <HAL_InitTick+0xac>)
 8001eea:	f001 fb71 	bl	80035d0 <HAL_TIM_Base_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d104      	bne.n	8001efe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001ef4:	4806      	ldr	r0, [pc, #24]	; (8001f10 <HAL_InitTick+0xac>)
 8001ef6:	f001 fbbb 	bl	8003670 <HAL_TIM_Base_Start_IT>
 8001efa:	4603      	mov	r3, r0
 8001efc:	e000      	b.n	8001f00 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3730      	adds	r7, #48	; 0x30
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	431bde83 	.word	0x431bde83
 8001f10:	200046f0 	.word	0x200046f0
 8001f14:	40001c00 	.word	0x40001c00

08001f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <NMI_Handler+0x4>

08001f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f22:	e7fe      	b.n	8001f22 <HardFault_Handler+0x4>

08001f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <MemManage_Handler+0x4>

08001f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <BusFault_Handler+0x4>

08001f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <UsageFault_Handler+0x4>

08001f36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <USART3_IRQHandler+0x10>)
 8001f4a:	f002 fb1f 	bl	800458c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20004420 	.word	0x20004420

08001f58 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001f5e:	f001 fc50 	bl	8003802 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200046f0 	.word	0x200046f0

08001f6c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <UART5_IRQHandler+0x10>)
 8001f72:	f002 fb0b 	bl	800458c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20004578 	.word	0x20004578

08001f80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
	return 1;
 8001f84:	2301      	movs	r3, #1
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <_kill>:

int _kill(int pid, int sig)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f9a:	f004 fea7 	bl	8006cec <__errno>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2216      	movs	r2, #22
 8001fa2:	601a      	str	r2, [r3, #0]
	return -1;
 8001fa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_exit>:

void _exit (int status)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ffe7 	bl	8001f90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fc2:	e7fe      	b.n	8001fc2 <_exit+0x12>

08001fc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	e00a      	b.n	8001fec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fd6:	f3af 8000 	nop.w
 8001fda:	4601      	mov	r1, r0
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	60ba      	str	r2, [r7, #8]
 8001fe2:	b2ca      	uxtb	r2, r1
 8001fe4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	dbf0      	blt.n	8001fd6 <_read+0x12>
	}

return len;
 8001ff4:	687b      	ldr	r3, [r7, #4]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
	return -1;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002026:	605a      	str	r2, [r3, #4]
	return 0;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <_isatty>:

int _isatty(int file)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
	return 1;
 800203e:	2301      	movs	r3, #1
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
	return 0;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002070:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <_sbrk+0x5c>)
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <_sbrk+0x60>)
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800207c:	4b13      	ldr	r3, [pc, #76]	; (80020cc <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d102      	bne.n	800208a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <_sbrk+0x64>)
 8002086:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <_sbrk+0x68>)
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <_sbrk+0x64>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	429a      	cmp	r2, r3
 8002096:	d207      	bcs.n	80020a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002098:	f004 fe28 	bl	8006cec <__errno>
 800209c:	4603      	mov	r3, r0
 800209e:	220c      	movs	r2, #12
 80020a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
 80020a6:	e009      	b.n	80020bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <_sbrk+0x64>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	4a05      	ldr	r2, [pc, #20]	; (80020cc <_sbrk+0x64>)
 80020b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ba:	68fb      	ldr	r3, [r7, #12]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20030000 	.word	0x20030000
 80020c8:	00000400 	.word	0x00000400
 80020cc:	200002d4 	.word	0x200002d4
 80020d0:	20004948 	.word	0x20004948

080020d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <SystemInit+0x20>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	4a05      	ldr	r2, [pc, #20]	; (80020f4 <SystemInit+0x20>)
 80020e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80020f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002130 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020fc:	480d      	ldr	r0, [pc, #52]	; (8002134 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020fe:	490e      	ldr	r1, [pc, #56]	; (8002138 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002100:	4a0e      	ldr	r2, [pc, #56]	; (800213c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002104:	e002      	b.n	800210c <LoopCopyDataInit>

08002106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210a:	3304      	adds	r3, #4

0800210c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800210c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002110:	d3f9      	bcc.n	8002106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002112:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002114:	4c0b      	ldr	r4, [pc, #44]	; (8002144 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002118:	e001      	b.n	800211e <LoopFillZerobss>

0800211a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800211c:	3204      	adds	r2, #4

0800211e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002120:	d3fb      	bcc.n	800211a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002122:	f7ff ffd7 	bl	80020d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002126:	f004 fedd 	bl	8006ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800212a:	f7fe ff83 	bl	8001034 <main>
  bx  lr    
 800212e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002130:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002138:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 800213c:	08009d94 	.word	0x08009d94
  ldr r2, =_sbss
 8002140:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8002144:	20004944 	.word	0x20004944

08002148 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002148:	e7fe      	b.n	8002148 <ADC_IRQHandler>
	...

0800214c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002150:	4b0e      	ldr	r3, [pc, #56]	; (800218c <HAL_Init+0x40>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0d      	ldr	r2, [pc, #52]	; (800218c <HAL_Init+0x40>)
 8002156:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800215a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_Init+0x40>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0a      	ldr	r2, [pc, #40]	; (800218c <HAL_Init+0x40>)
 8002162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002166:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_Init+0x40>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a07      	ldr	r2, [pc, #28]	; (800218c <HAL_Init+0x40>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002172:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002174:	2003      	movs	r0, #3
 8002176:	f000 f8fc 	bl	8002372 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800217a:	200f      	movs	r0, #15
 800217c:	f7ff fe72 	bl	8001e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002180:	f7ff fc32 	bl	80019e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023c00 	.word	0x40023c00

08002190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_IncTick+0x20>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_IncTick+0x24>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <HAL_IncTick+0x24>)
 80021a2:	6013      	str	r3, [r2, #0]
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000008 	.word	0x20000008
 80021b4:	20004738 	.word	0x20004738

080021b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return uwTick;
 80021bc:	4b03      	ldr	r3, [pc, #12]	; (80021cc <HAL_GetTick+0x14>)
 80021be:	681b      	ldr	r3, [r3, #0]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	20004738 	.word	0x20004738

080021d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d8:	f7ff ffee 	bl	80021b8 <HAL_GetTick>
 80021dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d005      	beq.n	80021f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_Delay+0x44>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021f6:	bf00      	nop
 80021f8:	f7ff ffde 	bl	80021b8 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	429a      	cmp	r2, r3
 8002206:	d8f7      	bhi.n	80021f8 <HAL_Delay+0x28>
  {
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000008 	.word	0x20000008

08002218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <__NVIC_SetPriorityGrouping+0x44>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002234:	4013      	ands	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800224a:	4a04      	ldr	r2, [pc, #16]	; (800225c <__NVIC_SetPriorityGrouping+0x44>)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	60d3      	str	r3, [r2, #12]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <__NVIC_GetPriorityGrouping+0x18>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	f003 0307 	and.w	r3, r3, #7
}
 800226e:	4618      	mov	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	2b00      	cmp	r3, #0
 800228c:	db0b      	blt.n	80022a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	4907      	ldr	r1, [pc, #28]	; (80022b4 <__NVIC_EnableIRQ+0x38>)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	2001      	movs	r0, #1
 800229e:	fa00 f202 	lsl.w	r2, r0, r2
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000e100 	.word	0xe000e100

080022b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	6039      	str	r1, [r7, #0]
 80022c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	db0a      	blt.n	80022e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	490c      	ldr	r1, [pc, #48]	; (8002304 <__NVIC_SetPriority+0x4c>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	0112      	lsls	r2, r2, #4
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	440b      	add	r3, r1
 80022dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e0:	e00a      	b.n	80022f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4908      	ldr	r1, [pc, #32]	; (8002308 <__NVIC_SetPriority+0x50>)
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	3b04      	subs	r3, #4
 80022f0:	0112      	lsls	r2, r2, #4
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	440b      	add	r3, r1
 80022f6:	761a      	strb	r2, [r3, #24]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000e100 	.word	0xe000e100
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800230c:	b480      	push	{r7}
 800230e:	b089      	sub	sp, #36	; 0x24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f1c3 0307 	rsb	r3, r3, #7
 8002326:	2b04      	cmp	r3, #4
 8002328:	bf28      	it	cs
 800232a:	2304      	movcs	r3, #4
 800232c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3304      	adds	r3, #4
 8002332:	2b06      	cmp	r3, #6
 8002334:	d902      	bls.n	800233c <NVIC_EncodePriority+0x30>
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3b03      	subs	r3, #3
 800233a:	e000      	b.n	800233e <NVIC_EncodePriority+0x32>
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	f04f 32ff 	mov.w	r2, #4294967295
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43da      	mvns	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	401a      	ands	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002354:	f04f 31ff 	mov.w	r1, #4294967295
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	43d9      	mvns	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	4313      	orrs	r3, r2
         );
}
 8002366:	4618      	mov	r0, r3
 8002368:	3724      	adds	r7, #36	; 0x24
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ff4c 	bl	8002218 <__NVIC_SetPriorityGrouping>
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800239a:	f7ff ff61 	bl	8002260 <__NVIC_GetPriorityGrouping>
 800239e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	68b9      	ldr	r1, [r7, #8]
 80023a4:	6978      	ldr	r0, [r7, #20]
 80023a6:	f7ff ffb1 	bl	800230c <NVIC_EncodePriority>
 80023aa:	4602      	mov	r2, r0
 80023ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ff80 	bl	80022b8 <__NVIC_SetPriority>
}
 80023b8:	bf00      	nop
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ff54 	bl	800227c <__NVIC_EnableIRQ>
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023ea:	f7ff fee5 	bl	80021b8 <HAL_GetTick>
 80023ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d008      	beq.n	800240e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2280      	movs	r2, #128	; 0x80
 8002400:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e052      	b.n	80024b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0216 	bic.w	r2, r2, #22
 800241c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800242c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <HAL_DMA_Abort+0x62>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243a:	2b00      	cmp	r3, #0
 800243c:	d007      	beq.n	800244e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0208 	bic.w	r2, r2, #8
 800244c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0201 	bic.w	r2, r2, #1
 800245c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800245e:	e013      	b.n	8002488 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002460:	f7ff feaa 	bl	80021b8 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b05      	cmp	r3, #5
 800246c:	d90c      	bls.n	8002488 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2203      	movs	r2, #3
 8002478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e015      	b.n	80024b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1e4      	bne.n	8002460 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249a:	223f      	movs	r2, #63	; 0x3f
 800249c:	409a      	lsls	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d004      	beq.n	80024da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2280      	movs	r2, #128	; 0x80
 80024d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e00c      	b.n	80024f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2205      	movs	r2, #5
 80024de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0201 	bic.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	; 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	e177      	b.n	800280c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800251c:	2201      	movs	r2, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	429a      	cmp	r2, r3
 8002536:	f040 8166 	bne.w	8002806 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b01      	cmp	r3, #1
 8002544:	d005      	beq.n	8002552 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254e:	2b02      	cmp	r3, #2
 8002550:	d130      	bne.n	80025b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	2203      	movs	r2, #3
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002588:	2201      	movs	r2, #1
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 0201 	and.w	r2, r3, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d017      	beq.n	80025f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2203      	movs	r2, #3
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d123      	bne.n	8002644 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	08da      	lsrs	r2, r3, #3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3208      	adds	r2, #8
 8002604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	220f      	movs	r2, #15
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	08da      	lsrs	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3208      	adds	r2, #8
 800263e:	69b9      	ldr	r1, [r7, #24]
 8002640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0203 	and.w	r2, r3, #3
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80c0 	beq.w	8002806 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b66      	ldr	r3, [pc, #408]	; (8002824 <HAL_GPIO_Init+0x324>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	4a65      	ldr	r2, [pc, #404]	; (8002824 <HAL_GPIO_Init+0x324>)
 8002690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002694:	6453      	str	r3, [r2, #68]	; 0x44
 8002696:	4b63      	ldr	r3, [pc, #396]	; (8002824 <HAL_GPIO_Init+0x324>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026a2:	4a61      	ldr	r2, [pc, #388]	; (8002828 <HAL_GPIO_Init+0x328>)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	089b      	lsrs	r3, r3, #2
 80026a8:	3302      	adds	r3, #2
 80026aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	220f      	movs	r2, #15
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a58      	ldr	r2, [pc, #352]	; (800282c <HAL_GPIO_Init+0x32c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d037      	beq.n	800273e <HAL_GPIO_Init+0x23e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a57      	ldr	r2, [pc, #348]	; (8002830 <HAL_GPIO_Init+0x330>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d031      	beq.n	800273a <HAL_GPIO_Init+0x23a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a56      	ldr	r2, [pc, #344]	; (8002834 <HAL_GPIO_Init+0x334>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d02b      	beq.n	8002736 <HAL_GPIO_Init+0x236>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a55      	ldr	r2, [pc, #340]	; (8002838 <HAL_GPIO_Init+0x338>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d025      	beq.n	8002732 <HAL_GPIO_Init+0x232>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a54      	ldr	r2, [pc, #336]	; (800283c <HAL_GPIO_Init+0x33c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01f      	beq.n	800272e <HAL_GPIO_Init+0x22e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a53      	ldr	r2, [pc, #332]	; (8002840 <HAL_GPIO_Init+0x340>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d019      	beq.n	800272a <HAL_GPIO_Init+0x22a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a52      	ldr	r2, [pc, #328]	; (8002844 <HAL_GPIO_Init+0x344>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_GPIO_Init+0x226>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a51      	ldr	r2, [pc, #324]	; (8002848 <HAL_GPIO_Init+0x348>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00d      	beq.n	8002722 <HAL_GPIO_Init+0x222>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a50      	ldr	r2, [pc, #320]	; (800284c <HAL_GPIO_Init+0x34c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d007      	beq.n	800271e <HAL_GPIO_Init+0x21e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4f      	ldr	r2, [pc, #316]	; (8002850 <HAL_GPIO_Init+0x350>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_GPIO_Init+0x21a>
 8002716:	2309      	movs	r3, #9
 8002718:	e012      	b.n	8002740 <HAL_GPIO_Init+0x240>
 800271a:	230a      	movs	r3, #10
 800271c:	e010      	b.n	8002740 <HAL_GPIO_Init+0x240>
 800271e:	2308      	movs	r3, #8
 8002720:	e00e      	b.n	8002740 <HAL_GPIO_Init+0x240>
 8002722:	2307      	movs	r3, #7
 8002724:	e00c      	b.n	8002740 <HAL_GPIO_Init+0x240>
 8002726:	2306      	movs	r3, #6
 8002728:	e00a      	b.n	8002740 <HAL_GPIO_Init+0x240>
 800272a:	2305      	movs	r3, #5
 800272c:	e008      	b.n	8002740 <HAL_GPIO_Init+0x240>
 800272e:	2304      	movs	r3, #4
 8002730:	e006      	b.n	8002740 <HAL_GPIO_Init+0x240>
 8002732:	2303      	movs	r3, #3
 8002734:	e004      	b.n	8002740 <HAL_GPIO_Init+0x240>
 8002736:	2302      	movs	r3, #2
 8002738:	e002      	b.n	8002740 <HAL_GPIO_Init+0x240>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_GPIO_Init+0x240>
 800273e:	2300      	movs	r3, #0
 8002740:	69fa      	ldr	r2, [r7, #28]
 8002742:	f002 0203 	and.w	r2, r2, #3
 8002746:	0092      	lsls	r2, r2, #2
 8002748:	4093      	lsls	r3, r2
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002750:	4935      	ldr	r1, [pc, #212]	; (8002828 <HAL_GPIO_Init+0x328>)
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	089b      	lsrs	r3, r3, #2
 8002756:	3302      	adds	r3, #2
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <HAL_GPIO_Init+0x354>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	43db      	mvns	r3, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002782:	4a34      	ldr	r2, [pc, #208]	; (8002854 <HAL_GPIO_Init+0x354>)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002788:	4b32      	ldr	r3, [pc, #200]	; (8002854 <HAL_GPIO_Init+0x354>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ac:	4a29      	ldr	r2, [pc, #164]	; (8002854 <HAL_GPIO_Init+0x354>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027b2:	4b28      	ldr	r3, [pc, #160]	; (8002854 <HAL_GPIO_Init+0x354>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027d6:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <HAL_GPIO_Init+0x354>)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027dc:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <HAL_GPIO_Init+0x354>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002800:	4a14      	ldr	r2, [pc, #80]	; (8002854 <HAL_GPIO_Init+0x354>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3301      	adds	r3, #1
 800280a:	61fb      	str	r3, [r7, #28]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b0f      	cmp	r3, #15
 8002810:	f67f ae84 	bls.w	800251c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	3724      	adds	r7, #36	; 0x24
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	40013800 	.word	0x40013800
 800282c:	40020000 	.word	0x40020000
 8002830:	40020400 	.word	0x40020400
 8002834:	40020800 	.word	0x40020800
 8002838:	40020c00 	.word	0x40020c00
 800283c:	40021000 	.word	0x40021000
 8002840:	40021400 	.word	0x40021400
 8002844:	40021800 	.word	0x40021800
 8002848:	40021c00 	.word	0x40021c00
 800284c:	40022000 	.word	0x40022000
 8002850:	40022400 	.word	0x40022400
 8002854:	40013c00 	.word	0x40013c00

08002858 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	887b      	ldrh	r3, [r7, #2]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002870:	2301      	movs	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
 8002874:	e001      	b.n	800287a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002876:	2300      	movs	r3, #0
 8002878:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800287a:	7bfb      	ldrb	r3, [r7, #15]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	807b      	strh	r3, [r7, #2]
 8002894:	4613      	mov	r3, r2
 8002896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002898:	787b      	ldrb	r3, [r7, #1]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800289e:	887a      	ldrh	r2, [r7, #2]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028a4:	e003      	b.n	80028ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028a6:	887b      	ldrh	r3, [r7, #2]
 80028a8:	041a      	lsls	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	619a      	str	r2, [r3, #24]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e12b      	b.n	8002b26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff f8ac 	bl	8001a40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2224      	movs	r2, #36	; 0x24
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0201 	bic.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800290e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800291e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002920:	f000 fdfc 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 8002924:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4a81      	ldr	r2, [pc, #516]	; (8002b30 <HAL_I2C_Init+0x274>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d807      	bhi.n	8002940 <HAL_I2C_Init+0x84>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4a80      	ldr	r2, [pc, #512]	; (8002b34 <HAL_I2C_Init+0x278>)
 8002934:	4293      	cmp	r3, r2
 8002936:	bf94      	ite	ls
 8002938:	2301      	movls	r3, #1
 800293a:	2300      	movhi	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	e006      	b.n	800294e <HAL_I2C_Init+0x92>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4a7d      	ldr	r2, [pc, #500]	; (8002b38 <HAL_I2C_Init+0x27c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	bf94      	ite	ls
 8002948:	2301      	movls	r3, #1
 800294a:	2300      	movhi	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e0e7      	b.n	8002b26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4a78      	ldr	r2, [pc, #480]	; (8002b3c <HAL_I2C_Init+0x280>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	0c9b      	lsrs	r3, r3, #18
 8002960:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4a6a      	ldr	r2, [pc, #424]	; (8002b30 <HAL_I2C_Init+0x274>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d802      	bhi.n	8002990 <HAL_I2C_Init+0xd4>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	3301      	adds	r3, #1
 800298e:	e009      	b.n	80029a4 <HAL_I2C_Init+0xe8>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002996:	fb02 f303 	mul.w	r3, r2, r3
 800299a:	4a69      	ldr	r2, [pc, #420]	; (8002b40 <HAL_I2C_Init+0x284>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	099b      	lsrs	r3, r3, #6
 80029a2:	3301      	adds	r3, #1
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	430b      	orrs	r3, r1
 80029aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	495c      	ldr	r1, [pc, #368]	; (8002b30 <HAL_I2C_Init+0x274>)
 80029c0:	428b      	cmp	r3, r1
 80029c2:	d819      	bhi.n	80029f8 <HAL_I2C_Init+0x13c>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1e59      	subs	r1, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80029d2:	1c59      	adds	r1, r3, #1
 80029d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029d8:	400b      	ands	r3, r1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_I2C_Init+0x138>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1e59      	subs	r1, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ec:	3301      	adds	r3, #1
 80029ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f2:	e051      	b.n	8002a98 <HAL_I2C_Init+0x1dc>
 80029f4:	2304      	movs	r3, #4
 80029f6:	e04f      	b.n	8002a98 <HAL_I2C_Init+0x1dc>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d111      	bne.n	8002a24 <HAL_I2C_Init+0x168>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1e58      	subs	r0, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	440b      	add	r3, r1
 8002a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a12:	3301      	adds	r3, #1
 8002a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf0c      	ite	eq
 8002a1c:	2301      	moveq	r3, #1
 8002a1e:	2300      	movne	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	e012      	b.n	8002a4a <HAL_I2C_Init+0x18e>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	1e58      	subs	r0, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6859      	ldr	r1, [r3, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	0099      	lsls	r1, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf0c      	ite	eq
 8002a44:	2301      	moveq	r3, #1
 8002a46:	2300      	movne	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_I2C_Init+0x196>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e022      	b.n	8002a98 <HAL_I2C_Init+0x1dc>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10e      	bne.n	8002a78 <HAL_I2C_Init+0x1bc>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1e58      	subs	r0, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6859      	ldr	r1, [r3, #4]
 8002a62:	460b      	mov	r3, r1
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	440b      	add	r3, r1
 8002a68:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a76:	e00f      	b.n	8002a98 <HAL_I2C_Init+0x1dc>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1e58      	subs	r0, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	0099      	lsls	r1, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	6809      	ldr	r1, [r1, #0]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ac6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6911      	ldr	r1, [r2, #16]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68d2      	ldr	r2, [r2, #12]
 8002ad2:	4311      	orrs	r1, r2
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	000186a0 	.word	0x000186a0
 8002b34:	001e847f 	.word	0x001e847f
 8002b38:	003d08ff 	.word	0x003d08ff
 8002b3c:	431bde83 	.word	0x431bde83
 8002b40:	10624dd3 	.word	0x10624dd3

08002b44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d129      	bne.n	8002bae <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2224      	movs	r2, #36	; 0x24
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0210 	bic.w	r2, r2, #16
 8002b80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0201 	orr.w	r2, r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	e000      	b.n	8002bb0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002bae:	2302      	movs	r3, #2
  }
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d12a      	bne.n	8002c2c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2224      	movs	r2, #36	; 0x24
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0201 	bic.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002bf6:	89fb      	ldrh	r3, [r7, #14]
 8002bf8:	f023 030f 	bic.w	r3, r3, #15
 8002bfc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	89fb      	ldrh	r3, [r7, #14]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	89fa      	ldrh	r2, [r7, #14]
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e000      	b.n	8002c2e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002c2c:	2302      	movs	r3, #2
  }
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <HAL_PWREx_EnableOverDrive+0x90>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	4a1f      	ldr	r2, [pc, #124]	; (8002ccc <HAL_PWREx_EnableOverDrive+0x90>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c54:	6413      	str	r3, [r2, #64]	; 0x40
 8002c56:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <HAL_PWREx_EnableOverDrive+0x90>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c62:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c68:	f7ff faa6 	bl	80021b8 <HAL_GetTick>
 8002c6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c6e:	e009      	b.n	8002c84 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c70:	f7ff faa2 	bl	80021b8 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c7e:	d901      	bls.n	8002c84 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e01f      	b.n	8002cc4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c84:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c90:	d1ee      	bne.n	8002c70 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c92:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c98:	f7ff fa8e 	bl	80021b8 <HAL_GetTick>
 8002c9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c9e:	e009      	b.n	8002cb4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ca0:	f7ff fa8a 	bl	80021b8 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cae:	d901      	bls.n	8002cb4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e007      	b.n	8002cc4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cb4:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cc0:	d1ee      	bne.n	8002ca0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	420e0040 	.word	0x420e0040
 8002cd4:	40007000 	.word	0x40007000
 8002cd8:	420e0044 	.word	0x420e0044

08002cdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e264      	b.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d075      	beq.n	8002de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cfa:	4ba3      	ldr	r3, [pc, #652]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d00c      	beq.n	8002d20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d06:	4ba0      	ldr	r3, [pc, #640]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d112      	bne.n	8002d38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d12:	4b9d      	ldr	r3, [pc, #628]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d1e:	d10b      	bne.n	8002d38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	4b99      	ldr	r3, [pc, #612]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d05b      	beq.n	8002de4 <HAL_RCC_OscConfig+0x108>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d157      	bne.n	8002de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e23f      	b.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d40:	d106      	bne.n	8002d50 <HAL_RCC_OscConfig+0x74>
 8002d42:	4b91      	ldr	r3, [pc, #580]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a90      	ldr	r2, [pc, #576]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	e01d      	b.n	8002d8c <HAL_RCC_OscConfig+0xb0>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d58:	d10c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x98>
 8002d5a:	4b8b      	ldr	r3, [pc, #556]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a8a      	ldr	r2, [pc, #552]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	4b88      	ldr	r3, [pc, #544]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a87      	ldr	r2, [pc, #540]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	e00b      	b.n	8002d8c <HAL_RCC_OscConfig+0xb0>
 8002d74:	4b84      	ldr	r3, [pc, #528]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a83      	ldr	r2, [pc, #524]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	4b81      	ldr	r3, [pc, #516]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a80      	ldr	r2, [pc, #512]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d013      	beq.n	8002dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d94:	f7ff fa10 	bl	80021b8 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d9c:	f7ff fa0c 	bl	80021b8 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	; 0x64
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e204      	b.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	4b76      	ldr	r3, [pc, #472]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0xc0>
 8002dba:	e014      	b.n	8002de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7ff f9fc 	bl	80021b8 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7ff f9f8 	bl	80021b8 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e1f0      	b.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd6:	4b6c      	ldr	r3, [pc, #432]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0xe8>
 8002de2:	e000      	b.n	8002de6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d063      	beq.n	8002eba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002df2:	4b65      	ldr	r3, [pc, #404]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dfe:	4b62      	ldr	r3, [pc, #392]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d11c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0a:	4b5f      	ldr	r3, [pc, #380]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d116      	bne.n	8002e44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e16:	4b5c      	ldr	r3, [pc, #368]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <HAL_RCC_OscConfig+0x152>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d001      	beq.n	8002e2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e1c4      	b.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2e:	4b56      	ldr	r3, [pc, #344]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4952      	ldr	r1, [pc, #328]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e42:	e03a      	b.n	8002eba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e4c:	4b4f      	ldr	r3, [pc, #316]	; (8002f8c <HAL_RCC_OscConfig+0x2b0>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e52:	f7ff f9b1 	bl	80021b8 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e5a:	f7ff f9ad 	bl	80021b8 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e1a5      	b.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6c:	4b46      	ldr	r3, [pc, #280]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e78:	4b43      	ldr	r3, [pc, #268]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4940      	ldr	r1, [pc, #256]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	600b      	str	r3, [r1, #0]
 8002e8c:	e015      	b.n	8002eba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e8e:	4b3f      	ldr	r3, [pc, #252]	; (8002f8c <HAL_RCC_OscConfig+0x2b0>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7ff f990 	bl	80021b8 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e9c:	f7ff f98c 	bl	80021b8 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e184      	b.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eae:	4b36      	ldr	r3, [pc, #216]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d030      	beq.n	8002f28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d016      	beq.n	8002efc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ece:	4b30      	ldr	r3, [pc, #192]	; (8002f90 <HAL_RCC_OscConfig+0x2b4>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed4:	f7ff f970 	bl	80021b8 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002edc:	f7ff f96c 	bl	80021b8 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e164      	b.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eee:	4b26      	ldr	r3, [pc, #152]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x200>
 8002efa:	e015      	b.n	8002f28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002efc:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <HAL_RCC_OscConfig+0x2b4>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f02:	f7ff f959 	bl	80021b8 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f0a:	f7ff f955 	bl	80021b8 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e14d      	b.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1c:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f0      	bne.n	8002f0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80a0 	beq.w	8003076 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f3a:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10f      	bne.n	8002f66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	4a0e      	ldr	r2, [pc, #56]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f54:	6413      	str	r3, [r2, #64]	; 0x40
 8002f56:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <HAL_RCC_OscConfig+0x2ac>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f62:	2301      	movs	r3, #1
 8002f64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f66:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_RCC_OscConfig+0x2b8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d121      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f72:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <HAL_RCC_OscConfig+0x2b8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a07      	ldr	r2, [pc, #28]	; (8002f94 <HAL_RCC_OscConfig+0x2b8>)
 8002f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7e:	f7ff f91b 	bl	80021b8 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f84:	e011      	b.n	8002faa <HAL_RCC_OscConfig+0x2ce>
 8002f86:	bf00      	nop
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	42470000 	.word	0x42470000
 8002f90:	42470e80 	.word	0x42470e80
 8002f94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f98:	f7ff f90e 	bl	80021b8 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e106      	b.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002faa:	4b85      	ldr	r3, [pc, #532]	; (80031c0 <HAL_RCC_OscConfig+0x4e4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d106      	bne.n	8002fcc <HAL_RCC_OscConfig+0x2f0>
 8002fbe:	4b81      	ldr	r3, [pc, #516]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc2:	4a80      	ldr	r2, [pc, #512]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fca:	e01c      	b.n	8003006 <HAL_RCC_OscConfig+0x32a>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b05      	cmp	r3, #5
 8002fd2:	d10c      	bne.n	8002fee <HAL_RCC_OscConfig+0x312>
 8002fd4:	4b7b      	ldr	r3, [pc, #492]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd8:	4a7a      	ldr	r2, [pc, #488]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 8002fda:	f043 0304 	orr.w	r3, r3, #4
 8002fde:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe0:	4b78      	ldr	r3, [pc, #480]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe4:	4a77      	ldr	r2, [pc, #476]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	6713      	str	r3, [r2, #112]	; 0x70
 8002fec:	e00b      	b.n	8003006 <HAL_RCC_OscConfig+0x32a>
 8002fee:	4b75      	ldr	r3, [pc, #468]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	4a74      	ldr	r2, [pc, #464]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 8002ff4:	f023 0301 	bic.w	r3, r3, #1
 8002ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffa:	4b72      	ldr	r3, [pc, #456]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	4a71      	ldr	r2, [pc, #452]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 8003000:	f023 0304 	bic.w	r3, r3, #4
 8003004:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d015      	beq.n	800303a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300e:	f7ff f8d3 	bl	80021b8 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003014:	e00a      	b.n	800302c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7ff f8cf 	bl	80021b8 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	; 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e0c5      	b.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302c:	4b65      	ldr	r3, [pc, #404]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0ee      	beq.n	8003016 <HAL_RCC_OscConfig+0x33a>
 8003038:	e014      	b.n	8003064 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303a:	f7ff f8bd 	bl	80021b8 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003040:	e00a      	b.n	8003058 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003042:	f7ff f8b9 	bl	80021b8 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003050:	4293      	cmp	r3, r2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e0af      	b.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003058:	4b5a      	ldr	r3, [pc, #360]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 800305a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1ee      	bne.n	8003042 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003064:	7dfb      	ldrb	r3, [r7, #23]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d105      	bne.n	8003076 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800306a:	4b56      	ldr	r3, [pc, #344]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	4a55      	ldr	r2, [pc, #340]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 8003070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003074:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 809b 	beq.w	80031b6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003080:	4b50      	ldr	r3, [pc, #320]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b08      	cmp	r3, #8
 800308a:	d05c      	beq.n	8003146 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	2b02      	cmp	r3, #2
 8003092:	d141      	bne.n	8003118 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003094:	4b4c      	ldr	r3, [pc, #304]	; (80031c8 <HAL_RCC_OscConfig+0x4ec>)
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309a:	f7ff f88d 	bl	80021b8 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a2:	f7ff f889 	bl	80021b8 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e081      	b.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b4:	4b43      	ldr	r3, [pc, #268]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1f0      	bne.n	80030a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69da      	ldr	r2, [r3, #28]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	019b      	lsls	r3, r3, #6
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	085b      	lsrs	r3, r3, #1
 80030d8:	3b01      	subs	r3, #1
 80030da:	041b      	lsls	r3, r3, #16
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	061b      	lsls	r3, r3, #24
 80030e4:	4937      	ldr	r1, [pc, #220]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ea:	4b37      	ldr	r3, [pc, #220]	; (80031c8 <HAL_RCC_OscConfig+0x4ec>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7ff f862 	bl	80021b8 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f8:	f7ff f85e 	bl	80021b8 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e056      	b.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310a:	4b2e      	ldr	r3, [pc, #184]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0x41c>
 8003116:	e04e      	b.n	80031b6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003118:	4b2b      	ldr	r3, [pc, #172]	; (80031c8 <HAL_RCC_OscConfig+0x4ec>)
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7ff f84b 	bl	80021b8 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003126:	f7ff f847 	bl	80021b8 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e03f      	b.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003138:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1f0      	bne.n	8003126 <HAL_RCC_OscConfig+0x44a>
 8003144:	e037      	b.n	80031b6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e032      	b.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003152:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <HAL_RCC_OscConfig+0x4e8>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d028      	beq.n	80031b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d121      	bne.n	80031b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d11a      	bne.n	80031b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003182:	4013      	ands	r3, r2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003188:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800318a:	4293      	cmp	r3, r2
 800318c:	d111      	bne.n	80031b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	3b01      	subs	r3, #1
 800319c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d001      	beq.n	80031b6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40007000 	.word	0x40007000
 80031c4:	40023800 	.word	0x40023800
 80031c8:	42470060 	.word	0x42470060

080031cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0cc      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e0:	4b68      	ldr	r3, [pc, #416]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d90c      	bls.n	8003208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b65      	ldr	r3, [pc, #404]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b63      	ldr	r3, [pc, #396]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0b8      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003220:	4b59      	ldr	r3, [pc, #356]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4a58      	ldr	r2, [pc, #352]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800322a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003238:	4b53      	ldr	r3, [pc, #332]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	4a52      	ldr	r2, [pc, #328]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003244:	4b50      	ldr	r3, [pc, #320]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	494d      	ldr	r1, [pc, #308]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d044      	beq.n	80032ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	4b47      	ldr	r3, [pc, #284]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d119      	bne.n	80032aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e07f      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d003      	beq.n	800328a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003286:	2b03      	cmp	r3, #3
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328a:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e06f      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329a:	4b3b      	ldr	r3, [pc, #236]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e067      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032aa:	4b37      	ldr	r3, [pc, #220]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f023 0203 	bic.w	r2, r3, #3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4934      	ldr	r1, [pc, #208]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032bc:	f7fe ff7c 	bl	80021b8 <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	e00a      	b.n	80032da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c4:	f7fe ff78 	bl	80021b8 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e04f      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	4b2b      	ldr	r3, [pc, #172]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 020c 	and.w	r2, r3, #12
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d1eb      	bne.n	80032c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ec:	4b25      	ldr	r3, [pc, #148]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d20c      	bcs.n	8003314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b22      	ldr	r3, [pc, #136]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b20      	ldr	r3, [pc, #128]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e032      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003320:	4b19      	ldr	r3, [pc, #100]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4916      	ldr	r1, [pc, #88]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	490e      	ldr	r1, [pc, #56]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003352:	f000 f821 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8003356:	4602      	mov	r2, r0
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	490a      	ldr	r1, [pc, #40]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 8003364:	5ccb      	ldrb	r3, [r1, r3]
 8003366:	fa22 f303 	lsr.w	r3, r2, r3
 800336a:	4a09      	ldr	r2, [pc, #36]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe fd76 	bl	8001e64 <HAL_InitTick>

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40023c00 	.word	0x40023c00
 8003388:	40023800 	.word	0x40023800
 800338c:	0800998c 	.word	0x0800998c
 8003390:	20000000 	.word	0x20000000
 8003394:	20000004 	.word	0x20000004

08003398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003398:	b5b0      	push	{r4, r5, r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800339e:	2100      	movs	r1, #0
 80033a0:	6079      	str	r1, [r7, #4]
 80033a2:	2100      	movs	r1, #0
 80033a4:	60f9      	str	r1, [r7, #12]
 80033a6:	2100      	movs	r1, #0
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80033aa:	2100      	movs	r1, #0
 80033ac:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ae:	4952      	ldr	r1, [pc, #328]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033b0:	6889      	ldr	r1, [r1, #8]
 80033b2:	f001 010c 	and.w	r1, r1, #12
 80033b6:	2908      	cmp	r1, #8
 80033b8:	d00d      	beq.n	80033d6 <HAL_RCC_GetSysClockFreq+0x3e>
 80033ba:	2908      	cmp	r1, #8
 80033bc:	f200 8094 	bhi.w	80034e8 <HAL_RCC_GetSysClockFreq+0x150>
 80033c0:	2900      	cmp	r1, #0
 80033c2:	d002      	beq.n	80033ca <HAL_RCC_GetSysClockFreq+0x32>
 80033c4:	2904      	cmp	r1, #4
 80033c6:	d003      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x38>
 80033c8:	e08e      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033ca:	4b4c      	ldr	r3, [pc, #304]	; (80034fc <HAL_RCC_GetSysClockFreq+0x164>)
 80033cc:	60bb      	str	r3, [r7, #8]
       break;
 80033ce:	e08e      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033d0:	4b4b      	ldr	r3, [pc, #300]	; (8003500 <HAL_RCC_GetSysClockFreq+0x168>)
 80033d2:	60bb      	str	r3, [r7, #8]
      break;
 80033d4:	e08b      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033d6:	4948      	ldr	r1, [pc, #288]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033d8:	6849      	ldr	r1, [r1, #4]
 80033da:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80033de:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033e0:	4945      	ldr	r1, [pc, #276]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033e2:	6849      	ldr	r1, [r1, #4]
 80033e4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80033e8:	2900      	cmp	r1, #0
 80033ea:	d024      	beq.n	8003436 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ec:	4942      	ldr	r1, [pc, #264]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033ee:	6849      	ldr	r1, [r1, #4]
 80033f0:	0989      	lsrs	r1, r1, #6
 80033f2:	4608      	mov	r0, r1
 80033f4:	f04f 0100 	mov.w	r1, #0
 80033f8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80033fc:	f04f 0500 	mov.w	r5, #0
 8003400:	ea00 0204 	and.w	r2, r0, r4
 8003404:	ea01 0305 	and.w	r3, r1, r5
 8003408:	493d      	ldr	r1, [pc, #244]	; (8003500 <HAL_RCC_GetSysClockFreq+0x168>)
 800340a:	fb01 f003 	mul.w	r0, r1, r3
 800340e:	2100      	movs	r1, #0
 8003410:	fb01 f102 	mul.w	r1, r1, r2
 8003414:	1844      	adds	r4, r0, r1
 8003416:	493a      	ldr	r1, [pc, #232]	; (8003500 <HAL_RCC_GetSysClockFreq+0x168>)
 8003418:	fba2 0101 	umull	r0, r1, r2, r1
 800341c:	1863      	adds	r3, r4, r1
 800341e:	4619      	mov	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	461a      	mov	r2, r3
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	f7fd fc6e 	bl	8000d08 <__aeabi_uldivmod>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4613      	mov	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	e04a      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003436:	4b30      	ldr	r3, [pc, #192]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	099b      	lsrs	r3, r3, #6
 800343c:	461a      	mov	r2, r3
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003446:	f04f 0100 	mov.w	r1, #0
 800344a:	ea02 0400 	and.w	r4, r2, r0
 800344e:	ea03 0501 	and.w	r5, r3, r1
 8003452:	4620      	mov	r0, r4
 8003454:	4629      	mov	r1, r5
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	014b      	lsls	r3, r1, #5
 8003460:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003464:	0142      	lsls	r2, r0, #5
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	1b00      	subs	r0, r0, r4
 800346c:	eb61 0105 	sbc.w	r1, r1, r5
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	018b      	lsls	r3, r1, #6
 800347a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800347e:	0182      	lsls	r2, r0, #6
 8003480:	1a12      	subs	r2, r2, r0
 8003482:	eb63 0301 	sbc.w	r3, r3, r1
 8003486:	f04f 0000 	mov.w	r0, #0
 800348a:	f04f 0100 	mov.w	r1, #0
 800348e:	00d9      	lsls	r1, r3, #3
 8003490:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003494:	00d0      	lsls	r0, r2, #3
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	1912      	adds	r2, r2, r4
 800349c:	eb45 0303 	adc.w	r3, r5, r3
 80034a0:	f04f 0000 	mov.w	r0, #0
 80034a4:	f04f 0100 	mov.w	r1, #0
 80034a8:	0299      	lsls	r1, r3, #10
 80034aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034ae:	0290      	lsls	r0, r2, #10
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4610      	mov	r0, r2
 80034b6:	4619      	mov	r1, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	461a      	mov	r2, r3
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	f7fd fc22 	bl	8000d08 <__aeabi_uldivmod>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4613      	mov	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034cc:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	0c1b      	lsrs	r3, r3, #16
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	3301      	adds	r3, #1
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e4:	60bb      	str	r3, [r7, #8]
      break;
 80034e6:	e002      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034e8:	4b04      	ldr	r3, [pc, #16]	; (80034fc <HAL_RCC_GetSysClockFreq+0x164>)
 80034ea:	60bb      	str	r3, [r7, #8]
      break;
 80034ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ee:	68bb      	ldr	r3, [r7, #8]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bdb0      	pop	{r4, r5, r7, pc}
 80034f8:	40023800 	.word	0x40023800
 80034fc:	00f42400 	.word	0x00f42400
 8003500:	017d7840 	.word	0x017d7840

08003504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <HAL_RCC_GetHCLKFreq+0x14>)
 800350a:	681b      	ldr	r3, [r3, #0]
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000000 	.word	0x20000000

0800351c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003520:	f7ff fff0 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	0a9b      	lsrs	r3, r3, #10
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4903      	ldr	r1, [pc, #12]	; (8003540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	0800999c 	.word	0x0800999c

08003544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003548:	f7ff ffdc 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	0b5b      	lsrs	r3, r3, #13
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4903      	ldr	r1, [pc, #12]	; (8003568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40023800 	.word	0x40023800
 8003568:	0800999c 	.word	0x0800999c

0800356c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	220f      	movs	r2, #15
 800357a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800357c:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <HAL_RCC_GetClockConfig+0x5c>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0203 	and.w	r2, r3, #3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003588:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <HAL_RCC_GetClockConfig+0x5c>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003594:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80035a0:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <HAL_RCC_GetClockConfig+0x5c>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	08db      	lsrs	r3, r3, #3
 80035a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035ae:	4b07      	ldr	r3, [pc, #28]	; (80035cc <HAL_RCC_GetClockConfig+0x60>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 020f 	and.w	r2, r3, #15
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	601a      	str	r2, [r3, #0]
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40023c00 	.word	0x40023c00

080035d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e041      	b.n	8003666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fe faa0 	bl	8001b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3304      	adds	r3, #4
 800360c:	4619      	mov	r1, r3
 800360e:	4610      	mov	r0, r2
 8003610:	f000 fb40 	bl	8003c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b01      	cmp	r3, #1
 8003682:	d001      	beq.n	8003688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e04e      	b.n	8003726 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a23      	ldr	r2, [pc, #140]	; (8003734 <HAL_TIM_Base_Start_IT+0xc4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d022      	beq.n	80036f0 <HAL_TIM_Base_Start_IT+0x80>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b2:	d01d      	beq.n	80036f0 <HAL_TIM_Base_Start_IT+0x80>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a1f      	ldr	r2, [pc, #124]	; (8003738 <HAL_TIM_Base_Start_IT+0xc8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d018      	beq.n	80036f0 <HAL_TIM_Base_Start_IT+0x80>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1e      	ldr	r2, [pc, #120]	; (800373c <HAL_TIM_Base_Start_IT+0xcc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d013      	beq.n	80036f0 <HAL_TIM_Base_Start_IT+0x80>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1c      	ldr	r2, [pc, #112]	; (8003740 <HAL_TIM_Base_Start_IT+0xd0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00e      	beq.n	80036f0 <HAL_TIM_Base_Start_IT+0x80>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1b      	ldr	r2, [pc, #108]	; (8003744 <HAL_TIM_Base_Start_IT+0xd4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d009      	beq.n	80036f0 <HAL_TIM_Base_Start_IT+0x80>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a19      	ldr	r2, [pc, #100]	; (8003748 <HAL_TIM_Base_Start_IT+0xd8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d004      	beq.n	80036f0 <HAL_TIM_Base_Start_IT+0x80>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a18      	ldr	r2, [pc, #96]	; (800374c <HAL_TIM_Base_Start_IT+0xdc>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d111      	bne.n	8003714 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b06      	cmp	r3, #6
 8003700:	d010      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0201 	orr.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003712:	e007      	b.n	8003724 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40010000 	.word	0x40010000
 8003738:	40000400 	.word	0x40000400
 800373c:	40000800 	.word	0x40000800
 8003740:	40000c00 	.word	0x40000c00
 8003744:	40010400 	.word	0x40010400
 8003748:	40014000 	.word	0x40014000
 800374c:	40001800 	.word	0x40001800

08003750 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e041      	b.n	80037e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f839 	bl	80037ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3304      	adds	r3, #4
 800378c:	4619      	mov	r1, r3
 800378e:	4610      	mov	r0, r2
 8003790:	f000 fa80 	bl	8003c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b02      	cmp	r3, #2
 8003816:	d122      	bne.n	800385e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b02      	cmp	r3, #2
 8003824:	d11b      	bne.n	800385e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f06f 0202 	mvn.w	r2, #2
 800382e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f002 fe8b 	bl	8006560 <HAL_TIM_IC_CaptureCallback>
 800384a:	e005      	b.n	8003858 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fa03 	bl	8003c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fa0a 	bl	8003c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b04      	cmp	r3, #4
 800386a:	d122      	bne.n	80038b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b04      	cmp	r3, #4
 8003878:	d11b      	bne.n	80038b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f06f 0204 	mvn.w	r2, #4
 8003882:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f002 fe61 	bl	8006560 <HAL_TIM_IC_CaptureCallback>
 800389e:	e005      	b.n	80038ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f9d9 	bl	8003c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f9e0 	bl	8003c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d122      	bne.n	8003906 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d11b      	bne.n	8003906 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f06f 0208 	mvn.w	r2, #8
 80038d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2204      	movs	r2, #4
 80038dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f002 fe37 	bl	8006560 <HAL_TIM_IC_CaptureCallback>
 80038f2:	e005      	b.n	8003900 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f9af 	bl	8003c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f9b6 	bl	8003c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b10      	cmp	r3, #16
 8003912:	d122      	bne.n	800395a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b10      	cmp	r3, #16
 8003920:	d11b      	bne.n	800395a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f06f 0210 	mvn.w	r2, #16
 800392a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2208      	movs	r2, #8
 8003930:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f002 fe0d 	bl	8006560 <HAL_TIM_IC_CaptureCallback>
 8003946:	e005      	b.n	8003954 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f985 	bl	8003c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f98c 	bl	8003c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b01      	cmp	r3, #1
 8003966:	d10e      	bne.n	8003986 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b01      	cmp	r3, #1
 8003974:	d107      	bne.n	8003986 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f06f 0201 	mvn.w	r2, #1
 800397e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7fe f819 	bl	80019b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003990:	2b80      	cmp	r3, #128	; 0x80
 8003992:	d10e      	bne.n	80039b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399e:	2b80      	cmp	r3, #128	; 0x80
 80039a0:	d107      	bne.n	80039b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fcd3 	bl	8004358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	2b40      	cmp	r3, #64	; 0x40
 80039be:	d10e      	bne.n	80039de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ca:	2b40      	cmp	r3, #64	; 0x40
 80039cc:	d107      	bne.n	80039de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f951 	bl	8003c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d10e      	bne.n	8003a0a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d107      	bne.n	8003a0a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f06f 0220 	mvn.w	r2, #32
 8003a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fc9d 	bl	8004344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b086      	sub	sp, #24
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e088      	b.n	8003b42 <HAL_TIM_IC_ConfigChannel+0x130>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d11b      	bne.n	8003a76 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	6819      	ldr	r1, [r3, #0]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f000 fa53 	bl	8003ef8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699a      	ldr	r2, [r3, #24]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 020c 	bic.w	r2, r2, #12
 8003a60:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6999      	ldr	r1, [r3, #24]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	619a      	str	r2, [r3, #24]
 8003a74:	e060      	b.n	8003b38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d11c      	bne.n	8003ab6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	6819      	ldr	r1, [r3, #0]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f000 fad7 	bl	800403e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a9e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6999      	ldr	r1, [r3, #24]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	021a      	lsls	r2, r3, #8
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	619a      	str	r2, [r3, #24]
 8003ab4:	e040      	b.n	8003b38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d11b      	bne.n	8003af4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	6819      	ldr	r1, [r3, #0]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f000 fb24 	bl	8004118 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	69da      	ldr	r2, [r3, #28]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 020c 	bic.w	r2, r2, #12
 8003ade:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69d9      	ldr	r1, [r3, #28]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	61da      	str	r2, [r3, #28]
 8003af2:	e021      	b.n	8003b38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b0c      	cmp	r3, #12
 8003af8:	d11c      	bne.n	8003b34 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	6819      	ldr	r1, [r3, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f000 fb41 	bl	8004190 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b1c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69d9      	ldr	r1, [r3, #28]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	021a      	lsls	r2, r3, #8
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	61da      	str	r2, [r3, #28]
 8003b32:	e001      	b.n	8003b38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e031      	b.n	8003bc6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003b72:	6839      	ldr	r1, [r7, #0]
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f92d 	bl	8003dd4 <TIM_SlaveTimer_SetConfig>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d009      	beq.n	8003b94 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e018      	b.n	8003bc6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ba2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bb2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b0c      	cmp	r3, #12
 8003be2:	d831      	bhi.n	8003c48 <HAL_TIM_ReadCapturedValue+0x78>
 8003be4:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <HAL_TIM_ReadCapturedValue+0x1c>)
 8003be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bea:	bf00      	nop
 8003bec:	08003c21 	.word	0x08003c21
 8003bf0:	08003c49 	.word	0x08003c49
 8003bf4:	08003c49 	.word	0x08003c49
 8003bf8:	08003c49 	.word	0x08003c49
 8003bfc:	08003c2b 	.word	0x08003c2b
 8003c00:	08003c49 	.word	0x08003c49
 8003c04:	08003c49 	.word	0x08003c49
 8003c08:	08003c49 	.word	0x08003c49
 8003c0c:	08003c35 	.word	0x08003c35
 8003c10:	08003c49 	.word	0x08003c49
 8003c14:	08003c49 	.word	0x08003c49
 8003c18:	08003c49 	.word	0x08003c49
 8003c1c:	08003c3f 	.word	0x08003c3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c26:	60fb      	str	r3, [r7, #12]

      break;
 8003c28:	e00f      	b.n	8003c4a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c30:	60fb      	str	r3, [r7, #12]

      break;
 8003c32:	e00a      	b.n	8003c4a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3a:	60fb      	str	r3, [r7, #12]

      break;
 8003c3c:	e005      	b.n	8003c4a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	60fb      	str	r3, [r7, #12]

      break;
 8003c46:	e000      	b.n	8003c4a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003c48:	bf00      	nop
  }

  return tmpreg;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a40      	ldr	r2, [pc, #256]	; (8003da8 <TIM_Base_SetConfig+0x114>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d013      	beq.n	8003cd4 <TIM_Base_SetConfig+0x40>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb2:	d00f      	beq.n	8003cd4 <TIM_Base_SetConfig+0x40>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a3d      	ldr	r2, [pc, #244]	; (8003dac <TIM_Base_SetConfig+0x118>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00b      	beq.n	8003cd4 <TIM_Base_SetConfig+0x40>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a3c      	ldr	r2, [pc, #240]	; (8003db0 <TIM_Base_SetConfig+0x11c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d007      	beq.n	8003cd4 <TIM_Base_SetConfig+0x40>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a3b      	ldr	r2, [pc, #236]	; (8003db4 <TIM_Base_SetConfig+0x120>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d003      	beq.n	8003cd4 <TIM_Base_SetConfig+0x40>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a3a      	ldr	r2, [pc, #232]	; (8003db8 <TIM_Base_SetConfig+0x124>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d108      	bne.n	8003ce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a2f      	ldr	r2, [pc, #188]	; (8003da8 <TIM_Base_SetConfig+0x114>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d02b      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf4:	d027      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a2c      	ldr	r2, [pc, #176]	; (8003dac <TIM_Base_SetConfig+0x118>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d023      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a2b      	ldr	r2, [pc, #172]	; (8003db0 <TIM_Base_SetConfig+0x11c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01f      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a2a      	ldr	r2, [pc, #168]	; (8003db4 <TIM_Base_SetConfig+0x120>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d01b      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a29      	ldr	r2, [pc, #164]	; (8003db8 <TIM_Base_SetConfig+0x124>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d017      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a28      	ldr	r2, [pc, #160]	; (8003dbc <TIM_Base_SetConfig+0x128>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a27      	ldr	r2, [pc, #156]	; (8003dc0 <TIM_Base_SetConfig+0x12c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00f      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a26      	ldr	r2, [pc, #152]	; (8003dc4 <TIM_Base_SetConfig+0x130>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00b      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a25      	ldr	r2, [pc, #148]	; (8003dc8 <TIM_Base_SetConfig+0x134>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d007      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a24      	ldr	r2, [pc, #144]	; (8003dcc <TIM_Base_SetConfig+0x138>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d003      	beq.n	8003d46 <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a23      	ldr	r2, [pc, #140]	; (8003dd0 <TIM_Base_SetConfig+0x13c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d108      	bne.n	8003d58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a0a      	ldr	r2, [pc, #40]	; (8003da8 <TIM_Base_SetConfig+0x114>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_Base_SetConfig+0xf8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a0c      	ldr	r2, [pc, #48]	; (8003db8 <TIM_Base_SetConfig+0x124>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d103      	bne.n	8003d94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	615a      	str	r2, [r3, #20]
}
 8003d9a:	bf00      	nop
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40010000 	.word	0x40010000
 8003dac:	40000400 	.word	0x40000400
 8003db0:	40000800 	.word	0x40000800
 8003db4:	40000c00 	.word	0x40000c00
 8003db8:	40010400 	.word	0x40010400
 8003dbc:	40014000 	.word	0x40014000
 8003dc0:	40014400 	.word	0x40014400
 8003dc4:	40014800 	.word	0x40014800
 8003dc8:	40001800 	.word	0x40001800
 8003dcc:	40001c00 	.word	0x40001c00
 8003dd0:	40002000 	.word	0x40002000

08003dd4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f023 0307 	bic.w	r3, r3, #7
 8003e02:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b70      	cmp	r3, #112	; 0x70
 8003e1c:	d01a      	beq.n	8003e54 <TIM_SlaveTimer_SetConfig+0x80>
 8003e1e:	2b70      	cmp	r3, #112	; 0x70
 8003e20:	d860      	bhi.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x110>
 8003e22:	2b60      	cmp	r3, #96	; 0x60
 8003e24:	d054      	beq.n	8003ed0 <TIM_SlaveTimer_SetConfig+0xfc>
 8003e26:	2b60      	cmp	r3, #96	; 0x60
 8003e28:	d85c      	bhi.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x110>
 8003e2a:	2b50      	cmp	r3, #80	; 0x50
 8003e2c:	d046      	beq.n	8003ebc <TIM_SlaveTimer_SetConfig+0xe8>
 8003e2e:	2b50      	cmp	r3, #80	; 0x50
 8003e30:	d858      	bhi.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x110>
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d019      	beq.n	8003e6a <TIM_SlaveTimer_SetConfig+0x96>
 8003e36:	2b40      	cmp	r3, #64	; 0x40
 8003e38:	d854      	bhi.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x110>
 8003e3a:	2b30      	cmp	r3, #48	; 0x30
 8003e3c:	d055      	beq.n	8003eea <TIM_SlaveTimer_SetConfig+0x116>
 8003e3e:	2b30      	cmp	r3, #48	; 0x30
 8003e40:	d850      	bhi.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x110>
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d051      	beq.n	8003eea <TIM_SlaveTimer_SetConfig+0x116>
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	d84c      	bhi.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x110>
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d04d      	beq.n	8003eea <TIM_SlaveTimer_SetConfig+0x116>
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d04b      	beq.n	8003eea <TIM_SlaveTimer_SetConfig+0x116>
 8003e52:	e047      	b.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6818      	ldr	r0, [r3, #0]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	68d9      	ldr	r1, [r3, #12]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	f000 f9d1 	bl	800420a <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003e68:	e040      	b.n	8003eec <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b05      	cmp	r3, #5
 8003e70:	d101      	bne.n	8003e76 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e03b      	b.n	8003eee <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6a1a      	ldr	r2, [r3, #32]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0201 	bic.w	r2, r2, #1
 8003e8c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e9c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	621a      	str	r2, [r3, #32]
      break;
 8003eba:	e017      	b.n	8003eec <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	6899      	ldr	r1, [r3, #8]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	f000 f889 	bl	8003fe0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003ece:	e00d      	b.n	8003eec <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	6899      	ldr	r1, [r3, #8]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	461a      	mov	r2, r3
 8003ede:	f000 f8eb 	bl	80040b8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003ee2:	e003      	b.n	8003eec <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee8:	e000      	b.n	8003eec <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003eea:	bf00      	nop
  }

  return status;
 8003eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	f023 0201 	bic.w	r2, r3, #1
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4a28      	ldr	r2, [pc, #160]	; (8003fc4 <TIM_TI1_SetConfig+0xcc>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d01b      	beq.n	8003f5e <TIM_TI1_SetConfig+0x66>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2c:	d017      	beq.n	8003f5e <TIM_TI1_SetConfig+0x66>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4a25      	ldr	r2, [pc, #148]	; (8003fc8 <TIM_TI1_SetConfig+0xd0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <TIM_TI1_SetConfig+0x66>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4a24      	ldr	r2, [pc, #144]	; (8003fcc <TIM_TI1_SetConfig+0xd4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00f      	beq.n	8003f5e <TIM_TI1_SetConfig+0x66>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4a23      	ldr	r2, [pc, #140]	; (8003fd0 <TIM_TI1_SetConfig+0xd8>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00b      	beq.n	8003f5e <TIM_TI1_SetConfig+0x66>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4a22      	ldr	r2, [pc, #136]	; (8003fd4 <TIM_TI1_SetConfig+0xdc>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d007      	beq.n	8003f5e <TIM_TI1_SetConfig+0x66>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4a21      	ldr	r2, [pc, #132]	; (8003fd8 <TIM_TI1_SetConfig+0xe0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d003      	beq.n	8003f5e <TIM_TI1_SetConfig+0x66>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4a20      	ldr	r2, [pc, #128]	; (8003fdc <TIM_TI1_SetConfig+0xe4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d101      	bne.n	8003f62 <TIM_TI1_SetConfig+0x6a>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <TIM_TI1_SetConfig+0x6c>
 8003f62:	2300      	movs	r3, #0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f023 0303 	bic.w	r3, r3, #3
 8003f6e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	e003      	b.n	8003f82 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f023 030a 	bic.w	r3, r3, #10
 8003f9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f003 030a 	and.w	r3, r3, #10
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	621a      	str	r2, [r3, #32]
}
 8003fb6:	bf00      	nop
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40010000 	.word	0x40010000
 8003fc8:	40000400 	.word	0x40000400
 8003fcc:	40000800 	.word	0x40000800
 8003fd0:	40000c00 	.word	0x40000c00
 8003fd4:	40010400 	.word	0x40010400
 8003fd8:	40014000 	.word	0x40014000
 8003fdc:	40001800 	.word	0x40001800

08003fe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f023 0201 	bic.w	r2, r3, #1
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800400a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f023 030a 	bic.w	r3, r3, #10
 800401c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	621a      	str	r2, [r3, #32]
}
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800403e:	b480      	push	{r7}
 8004040:	b087      	sub	sp, #28
 8004042:	af00      	add	r7, sp, #0
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
 800404a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	f023 0210 	bic.w	r2, r3, #16
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800407c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	031b      	lsls	r3, r3, #12
 8004082:	b29b      	uxth	r3, r3
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004090:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	621a      	str	r2, [r3, #32]
}
 80040ac:	bf00      	nop
 80040ae:	371c      	adds	r7, #28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f023 0210 	bic.w	r2, r3, #16
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	031b      	lsls	r3, r3, #12
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	621a      	str	r2, [r3, #32]
}
 800410c:	bf00      	nop
 800410e:	371c      	adds	r7, #28
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f023 0303 	bic.w	r3, r3, #3
 8004144:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004154:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	b2db      	uxtb	r3, r3
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004168:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	021b      	lsls	r3, r3, #8
 800416e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	621a      	str	r2, [r3, #32]
}
 8004184:	bf00      	nop
 8004186:	371c      	adds	r7, #28
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	021b      	lsls	r3, r3, #8
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041ce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	031b      	lsls	r3, r3, #12
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80041e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	031b      	lsls	r3, r3, #12
 80041e8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	621a      	str	r2, [r3, #32]
}
 80041fe:	bf00      	nop
 8004200:	371c      	adds	r7, #28
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800420a:	b480      	push	{r7}
 800420c:	b087      	sub	sp, #28
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
 8004216:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004224:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	021a      	lsls	r2, r3, #8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	431a      	orrs	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	4313      	orrs	r3, r2
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	609a      	str	r2, [r3, #8]
}
 800423e:	bf00      	nop
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
	...

0800424c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004260:	2302      	movs	r3, #2
 8004262:	e05a      	b.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a21      	ldr	r2, [pc, #132]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d022      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b0:	d01d      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1d      	ldr	r2, [pc, #116]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d018      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1b      	ldr	r2, [pc, #108]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d013      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1a      	ldr	r2, [pc, #104]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00e      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a18      	ldr	r2, [pc, #96]	; (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d009      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a17      	ldr	r2, [pc, #92]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d004      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a15      	ldr	r2, [pc, #84]	; (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d10c      	bne.n	8004308 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40010000 	.word	0x40010000
 800432c:	40000400 	.word	0x40000400
 8004330:	40000800 	.word	0x40000800
 8004334:	40000c00 	.word	0x40000c00
 8004338:	40010400 	.word	0x40010400
 800433c:	40014000 	.word	0x40014000
 8004340:	40001800 	.word	0x40001800

08004344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e03f      	b.n	80043fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fd fc82 	bl	8001c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2224      	movs	r2, #36	; 0x24
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fddb 	bl	8004f6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b08a      	sub	sp, #40	; 0x28
 800440a:	af02      	add	r7, sp, #8
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	603b      	str	r3, [r7, #0]
 8004412:	4613      	mov	r3, r2
 8004414:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b20      	cmp	r3, #32
 8004424:	d17c      	bne.n	8004520 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_UART_Transmit+0x2c>
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e075      	b.n	8004522 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_UART_Transmit+0x3e>
 8004440:	2302      	movs	r3, #2
 8004442:	e06e      	b.n	8004522 <HAL_UART_Transmit+0x11c>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2221      	movs	r2, #33	; 0x21
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800445a:	f7fd fead 	bl	80021b8 <HAL_GetTick>
 800445e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	88fa      	ldrh	r2, [r7, #6]
 8004464:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	88fa      	ldrh	r2, [r7, #6]
 800446a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004474:	d108      	bne.n	8004488 <HAL_UART_Transmit+0x82>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d104      	bne.n	8004488 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	e003      	b.n	8004490 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800448c:	2300      	movs	r3, #0
 800448e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004498:	e02a      	b.n	80044f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2200      	movs	r2, #0
 80044a2:	2180      	movs	r1, #128	; 0x80
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fb1f 	bl	8004ae8 <UART_WaitOnFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e036      	b.n	8004522 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10b      	bne.n	80044d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	3302      	adds	r3, #2
 80044ce:	61bb      	str	r3, [r7, #24]
 80044d0:	e007      	b.n	80044e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	781a      	ldrb	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	3301      	adds	r3, #1
 80044e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1cf      	bne.n	800449a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2200      	movs	r2, #0
 8004502:	2140      	movs	r1, #64	; 0x40
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 faef 	bl	8004ae8 <UART_WaitOnFlagUntilTimeout>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e006      	b.n	8004522 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	e000      	b.n	8004522 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004520:	2302      	movs	r3, #2
  }
}
 8004522:	4618      	mov	r0, r3
 8004524:	3720      	adds	r7, #32
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	4613      	mov	r3, r2
 8004536:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b20      	cmp	r3, #32
 8004542:	d11d      	bne.n	8004580 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_UART_Receive_IT+0x26>
 800454a:	88fb      	ldrh	r3, [r7, #6]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e016      	b.n	8004582 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <HAL_UART_Receive_IT+0x38>
 800455e:	2302      	movs	r3, #2
 8004560:	e00f      	b.n	8004582 <HAL_UART_Receive_IT+0x58>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004570:	88fb      	ldrh	r3, [r7, #6]
 8004572:	461a      	mov	r2, r3
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 fb24 	bl	8004bc4 <UART_Start_Receive_IT>
 800457c:	4603      	mov	r3, r0
 800457e:	e000      	b.n	8004582 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004580:	2302      	movs	r3, #2
  }
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b0ba      	sub	sp, #232	; 0xe8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10f      	bne.n	80045f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d6:	f003 0320 	and.w	r3, r3, #32
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <HAL_UART_IRQHandler+0x66>
 80045de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fc03 	bl	8004df6 <UART_Receive_IT>
      return;
 80045f0:	e256      	b.n	8004aa0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 80de 	beq.w	80047b8 <HAL_UART_IRQHandler+0x22c>
 80045fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d106      	bne.n	8004616 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800460c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80d1 	beq.w	80047b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00b      	beq.n	800463a <HAL_UART_IRQHandler+0xae>
 8004622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d005      	beq.n	800463a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f043 0201 	orr.w	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800463a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00b      	beq.n	800465e <HAL_UART_IRQHandler+0xd2>
 8004646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	f043 0202 	orr.w	r2, r3, #2
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800465e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <HAL_UART_IRQHandler+0xf6>
 800466a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f043 0204 	orr.w	r2, r3, #4
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d011      	beq.n	80046b2 <HAL_UART_IRQHandler+0x126>
 800468e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b00      	cmp	r3, #0
 8004698:	d105      	bne.n	80046a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800469a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f043 0208 	orr.w	r2, r3, #8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 81ed 	beq.w	8004a96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_UART_IRQHandler+0x14e>
 80046c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 fb8e 	bl	8004df6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e4:	2b40      	cmp	r3, #64	; 0x40
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d103      	bne.n	8004706 <HAL_UART_IRQHandler+0x17a>
 80046fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004702:	2b00      	cmp	r3, #0
 8004704:	d04f      	beq.n	80047a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fa96 	bl	8004c38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004716:	2b40      	cmp	r3, #64	; 0x40
 8004718:	d141      	bne.n	800479e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3314      	adds	r3, #20
 8004720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004730:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3314      	adds	r3, #20
 8004742:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004746:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800474a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004752:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800475e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1d9      	bne.n	800471a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	2b00      	cmp	r3, #0
 800476c:	d013      	beq.n	8004796 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	4a7d      	ldr	r2, [pc, #500]	; (8004968 <HAL_UART_IRQHandler+0x3dc>)
 8004774:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	4618      	mov	r0, r3
 800477c:	f7fd fe9e 	bl	80024bc <HAL_DMA_Abort_IT>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d016      	beq.n	80047b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004790:	4610      	mov	r0, r2
 8004792:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004794:	e00e      	b.n	80047b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f990 	bl	8004abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800479c:	e00a      	b.n	80047b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f98c 	bl	8004abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a4:	e006      	b.n	80047b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f988 	bl	8004abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80047b2:	e170      	b.n	8004a96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	bf00      	nop
    return;
 80047b6:	e16e      	b.n	8004a96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047bc:	2b01      	cmp	r3, #1
 80047be:	f040 814a 	bne.w	8004a56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8143 	beq.w	8004a56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 813c 	beq.w	8004a56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047de:	2300      	movs	r3, #0
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fe:	2b40      	cmp	r3, #64	; 0x40
 8004800:	f040 80b4 	bne.w	800496c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004810:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8140 	beq.w	8004a9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800481e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004822:	429a      	cmp	r2, r3
 8004824:	f080 8139 	bcs.w	8004a9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800482e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800483a:	f000 8088 	beq.w	800494e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	330c      	adds	r3, #12
 8004844:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004854:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800485c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800486a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800486e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004876:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800487a:	e841 2300 	strex	r3, r2, [r1]
 800487e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004882:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1d9      	bne.n	800483e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3314      	adds	r3, #20
 8004890:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800489a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800489c:	f023 0301 	bic.w	r3, r3, #1
 80048a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3314      	adds	r3, #20
 80048aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e1      	bne.n	800488a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3314      	adds	r3, #20
 80048cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3314      	adds	r3, #20
 80048e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e3      	bne.n	80048c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004916:	e853 3f00 	ldrex	r3, [r3]
 800491a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800491c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800491e:	f023 0310 	bic.w	r3, r3, #16
 8004922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	330c      	adds	r3, #12
 800492c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004930:	65ba      	str	r2, [r7, #88]	; 0x58
 8004932:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004936:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800493e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e3      	bne.n	800490c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	4618      	mov	r0, r3
 800494a:	f7fd fd47 	bl	80023dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004956:	b29b      	uxth	r3, r3
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	b29b      	uxth	r3, r3
 800495c:	4619      	mov	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f8b6 	bl	8004ad0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004964:	e099      	b.n	8004a9a <HAL_UART_IRQHandler+0x50e>
 8004966:	bf00      	nop
 8004968:	08004cff 	.word	0x08004cff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004974:	b29b      	uxth	r3, r3
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 808b 	beq.w	8004a9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004988:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8086 	beq.w	8004a9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	330c      	adds	r3, #12
 8004998:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	330c      	adds	r3, #12
 80049b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049b6:	647a      	str	r2, [r7, #68]	; 0x44
 80049b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e3      	bne.n	8004992 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3314      	adds	r3, #20
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	e853 3f00 	ldrex	r3, [r3]
 80049d8:	623b      	str	r3, [r7, #32]
   return(result);
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3314      	adds	r3, #20
 80049ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049ee:	633a      	str	r2, [r7, #48]	; 0x30
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e3      	bne.n	80049ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0310 	bic.w	r3, r3, #16
 8004a26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	330c      	adds	r3, #12
 8004a30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a34:	61fa      	str	r2, [r7, #28]
 8004a36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	69b9      	ldr	r1, [r7, #24]
 8004a3a:	69fa      	ldr	r2, [r7, #28]
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	617b      	str	r3, [r7, #20]
   return(result);
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e3      	bne.n	8004a10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f83e 	bl	8004ad0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a54:	e023      	b.n	8004a9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d009      	beq.n	8004a76 <HAL_UART_IRQHandler+0x4ea>
 8004a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f959 	bl	8004d26 <UART_Transmit_IT>
    return;
 8004a74:	e014      	b.n	8004aa0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00e      	beq.n	8004aa0 <HAL_UART_IRQHandler+0x514>
 8004a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d008      	beq.n	8004aa0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f999 	bl	8004dc6 <UART_EndTransmit_IT>
    return;
 8004a94:	e004      	b.n	8004aa0 <HAL_UART_IRQHandler+0x514>
    return;
 8004a96:	bf00      	nop
 8004a98:	e002      	b.n	8004aa0 <HAL_UART_IRQHandler+0x514>
      return;
 8004a9a:	bf00      	nop
 8004a9c:	e000      	b.n	8004aa0 <HAL_UART_IRQHandler+0x514>
      return;
 8004a9e:	bf00      	nop
  }
}
 8004aa0:	37e8      	adds	r7, #232	; 0xe8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop

08004aa8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b090      	sub	sp, #64	; 0x40
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	4613      	mov	r3, r2
 8004af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af8:	e050      	b.n	8004b9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b00:	d04c      	beq.n	8004b9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d007      	beq.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b08:	f7fd fb56 	bl	80021b8 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d241      	bcs.n	8004b9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	330c      	adds	r3, #12
 8004b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	330c      	adds	r3, #12
 8004b36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b38:	637a      	str	r2, [r7, #52]	; 0x34
 8004b3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e5      	bne.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3314      	adds	r3, #20
 8004b52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f023 0301 	bic.w	r3, r3, #1
 8004b62:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3314      	adds	r3, #20
 8004b6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b6c:	623a      	str	r2, [r7, #32]
 8004b6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	69f9      	ldr	r1, [r7, #28]
 8004b72:	6a3a      	ldr	r2, [r7, #32]
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e5      	bne.n	8004b4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e00f      	b.n	8004bbc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	bf0c      	ite	eq
 8004bac:	2301      	moveq	r3, #1
 8004bae:	2300      	movne	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	79fb      	ldrb	r3, [r7, #7]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d09f      	beq.n	8004afa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3740      	adds	r7, #64	; 0x40
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	88fa      	ldrh	r2, [r7, #6]
 8004bdc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	88fa      	ldrh	r2, [r7, #6]
 8004be2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2222      	movs	r2, #34	; 0x22
 8004bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c08:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695a      	ldr	r2, [r3, #20]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0201 	orr.w	r2, r2, #1
 8004c18:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0220 	orr.w	r2, r2, #32
 8004c28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b095      	sub	sp, #84	; 0x54
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4a:	e853 3f00 	ldrex	r3, [r3]
 8004c4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	330c      	adds	r3, #12
 8004c5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c60:	643a      	str	r2, [r7, #64]	; 0x40
 8004c62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c68:	e841 2300 	strex	r3, r2, [r1]
 8004c6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e5      	bne.n	8004c40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3314      	adds	r3, #20
 8004c7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	e853 3f00 	ldrex	r3, [r3]
 8004c82:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3314      	adds	r3, #20
 8004c92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c9c:	e841 2300 	strex	r3, r2, [r1]
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e5      	bne.n	8004c74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d119      	bne.n	8004ce4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	330c      	adds	r3, #12
 8004cb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f023 0310 	bic.w	r3, r3, #16
 8004cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	330c      	adds	r3, #12
 8004cce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cd0:	61ba      	str	r2, [r7, #24]
 8004cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	6979      	ldr	r1, [r7, #20]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e5      	bne.n	8004cb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cf2:	bf00      	nop
 8004cf4:	3754      	adds	r7, #84	; 0x54
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f7ff fecf 	bl	8004abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d1e:	bf00      	nop
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b085      	sub	sp, #20
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b21      	cmp	r3, #33	; 0x21
 8004d38:	d13e      	bne.n	8004db8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d42:	d114      	bne.n	8004d6e <UART_Transmit_IT+0x48>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d110      	bne.n	8004d6e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	1c9a      	adds	r2, r3, #2
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	621a      	str	r2, [r3, #32]
 8004d6c:	e008      	b.n	8004d80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	1c59      	adds	r1, r3, #1
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6211      	str	r1, [r2, #32]
 8004d78:	781a      	ldrb	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10f      	bne.n	8004db4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004da2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	e000      	b.n	8004dba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004db8:	2302      	movs	r3, #2
  }
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ddc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7ff fe5e 	bl	8004aa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b08c      	sub	sp, #48	; 0x30
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b22      	cmp	r3, #34	; 0x22
 8004e08:	f040 80ab 	bne.w	8004f62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e14:	d117      	bne.n	8004e46 <UART_Receive_IT+0x50>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d113      	bne.n	8004e46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	1c9a      	adds	r2, r3, #2
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	629a      	str	r2, [r3, #40]	; 0x28
 8004e44:	e026      	b.n	8004e94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e58:	d007      	beq.n	8004e6a <UART_Receive_IT+0x74>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10a      	bne.n	8004e78 <UART_Receive_IT+0x82>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e74:	701a      	strb	r2, [r3, #0]
 8004e76:	e008      	b.n	8004e8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d15a      	bne.n	8004f5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0220 	bic.w	r2, r2, #32
 8004eb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ec6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695a      	ldr	r2, [r3, #20]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0201 	bic.w	r2, r2, #1
 8004ed6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d135      	bne.n	8004f54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	330c      	adds	r3, #12
 8004ef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	e853 3f00 	ldrex	r3, [r3]
 8004efc:	613b      	str	r3, [r7, #16]
   return(result);
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f023 0310 	bic.w	r3, r3, #16
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	330c      	adds	r3, #12
 8004f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0e:	623a      	str	r2, [r7, #32]
 8004f10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f12:	69f9      	ldr	r1, [r7, #28]
 8004f14:	6a3a      	ldr	r2, [r7, #32]
 8004f16:	e841 2300 	strex	r3, r2, [r1]
 8004f1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1e5      	bne.n	8004eee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0310 	and.w	r3, r3, #16
 8004f2c:	2b10      	cmp	r3, #16
 8004f2e:	d10a      	bne.n	8004f46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff fdbf 	bl	8004ad0 <HAL_UARTEx_RxEventCallback>
 8004f52:	e002      	b.n	8004f5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f001 fbb1 	bl	80066bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e002      	b.n	8004f64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e000      	b.n	8004f64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004f62:	2302      	movs	r3, #2
  }
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3730      	adds	r7, #48	; 0x30
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f70:	b09f      	sub	sp, #124	; 0x7c
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f82:	68d9      	ldr	r1, [r3, #12]
 8004f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	ea40 0301 	orr.w	r3, r0, r1
 8004f8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fb0:	f021 010c 	bic.w	r1, r1, #12
 8004fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fca:	6999      	ldr	r1, [r3, #24]
 8004fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	ea40 0301 	orr.w	r3, r0, r1
 8004fd4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	4bc5      	ldr	r3, [pc, #788]	; (80052f0 <UART_SetConfig+0x384>)
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d004      	beq.n	8004fea <UART_SetConfig+0x7e>
 8004fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4bc3      	ldr	r3, [pc, #780]	; (80052f4 <UART_SetConfig+0x388>)
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d103      	bne.n	8004ff2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fea:	f7fe faab 	bl	8003544 <HAL_RCC_GetPCLK2Freq>
 8004fee:	6778      	str	r0, [r7, #116]	; 0x74
 8004ff0:	e002      	b.n	8004ff8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ff2:	f7fe fa93 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 8004ff6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005000:	f040 80b6 	bne.w	8005170 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005006:	461c      	mov	r4, r3
 8005008:	f04f 0500 	mov.w	r5, #0
 800500c:	4622      	mov	r2, r4
 800500e:	462b      	mov	r3, r5
 8005010:	1891      	adds	r1, r2, r2
 8005012:	6439      	str	r1, [r7, #64]	; 0x40
 8005014:	415b      	adcs	r3, r3
 8005016:	647b      	str	r3, [r7, #68]	; 0x44
 8005018:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800501c:	1912      	adds	r2, r2, r4
 800501e:	eb45 0303 	adc.w	r3, r5, r3
 8005022:	f04f 0000 	mov.w	r0, #0
 8005026:	f04f 0100 	mov.w	r1, #0
 800502a:	00d9      	lsls	r1, r3, #3
 800502c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005030:	00d0      	lsls	r0, r2, #3
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	1911      	adds	r1, r2, r4
 8005038:	6639      	str	r1, [r7, #96]	; 0x60
 800503a:	416b      	adcs	r3, r5
 800503c:	667b      	str	r3, [r7, #100]	; 0x64
 800503e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	461a      	mov	r2, r3
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	1891      	adds	r1, r2, r2
 800504a:	63b9      	str	r1, [r7, #56]	; 0x38
 800504c:	415b      	adcs	r3, r3
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005050:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005054:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005058:	f7fb fe56 	bl	8000d08 <__aeabi_uldivmod>
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	4ba5      	ldr	r3, [pc, #660]	; (80052f8 <UART_SetConfig+0x38c>)
 8005062:	fba3 2302 	umull	r2, r3, r3, r2
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	011e      	lsls	r6, r3, #4
 800506a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800506c:	461c      	mov	r4, r3
 800506e:	f04f 0500 	mov.w	r5, #0
 8005072:	4622      	mov	r2, r4
 8005074:	462b      	mov	r3, r5
 8005076:	1891      	adds	r1, r2, r2
 8005078:	6339      	str	r1, [r7, #48]	; 0x30
 800507a:	415b      	adcs	r3, r3
 800507c:	637b      	str	r3, [r7, #52]	; 0x34
 800507e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005082:	1912      	adds	r2, r2, r4
 8005084:	eb45 0303 	adc.w	r3, r5, r3
 8005088:	f04f 0000 	mov.w	r0, #0
 800508c:	f04f 0100 	mov.w	r1, #0
 8005090:	00d9      	lsls	r1, r3, #3
 8005092:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005096:	00d0      	lsls	r0, r2, #3
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	1911      	adds	r1, r2, r4
 800509e:	65b9      	str	r1, [r7, #88]	; 0x58
 80050a0:	416b      	adcs	r3, r5
 80050a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	461a      	mov	r2, r3
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	1891      	adds	r1, r2, r2
 80050b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80050b2:	415b      	adcs	r3, r3
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050ba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80050be:	f7fb fe23 	bl	8000d08 <__aeabi_uldivmod>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	4b8c      	ldr	r3, [pc, #560]	; (80052f8 <UART_SetConfig+0x38c>)
 80050c8:	fba3 1302 	umull	r1, r3, r3, r2
 80050cc:	095b      	lsrs	r3, r3, #5
 80050ce:	2164      	movs	r1, #100	; 0x64
 80050d0:	fb01 f303 	mul.w	r3, r1, r3
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	3332      	adds	r3, #50	; 0x32
 80050da:	4a87      	ldr	r2, [pc, #540]	; (80052f8 <UART_SetConfig+0x38c>)
 80050dc:	fba2 2303 	umull	r2, r3, r2, r3
 80050e0:	095b      	lsrs	r3, r3, #5
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050e8:	441e      	add	r6, r3
 80050ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050ec:	4618      	mov	r0, r3
 80050ee:	f04f 0100 	mov.w	r1, #0
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	1894      	adds	r4, r2, r2
 80050f8:	623c      	str	r4, [r7, #32]
 80050fa:	415b      	adcs	r3, r3
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
 80050fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005102:	1812      	adds	r2, r2, r0
 8005104:	eb41 0303 	adc.w	r3, r1, r3
 8005108:	f04f 0400 	mov.w	r4, #0
 800510c:	f04f 0500 	mov.w	r5, #0
 8005110:	00dd      	lsls	r5, r3, #3
 8005112:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005116:	00d4      	lsls	r4, r2, #3
 8005118:	4622      	mov	r2, r4
 800511a:	462b      	mov	r3, r5
 800511c:	1814      	adds	r4, r2, r0
 800511e:	653c      	str	r4, [r7, #80]	; 0x50
 8005120:	414b      	adcs	r3, r1
 8005122:	657b      	str	r3, [r7, #84]	; 0x54
 8005124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	461a      	mov	r2, r3
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	1891      	adds	r1, r2, r2
 8005130:	61b9      	str	r1, [r7, #24]
 8005132:	415b      	adcs	r3, r3
 8005134:	61fb      	str	r3, [r7, #28]
 8005136:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800513a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800513e:	f7fb fde3 	bl	8000d08 <__aeabi_uldivmod>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4b6c      	ldr	r3, [pc, #432]	; (80052f8 <UART_SetConfig+0x38c>)
 8005148:	fba3 1302 	umull	r1, r3, r3, r2
 800514c:	095b      	lsrs	r3, r3, #5
 800514e:	2164      	movs	r1, #100	; 0x64
 8005150:	fb01 f303 	mul.w	r3, r1, r3
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	3332      	adds	r3, #50	; 0x32
 800515a:	4a67      	ldr	r2, [pc, #412]	; (80052f8 <UART_SetConfig+0x38c>)
 800515c:	fba2 2303 	umull	r2, r3, r2, r3
 8005160:	095b      	lsrs	r3, r3, #5
 8005162:	f003 0207 	and.w	r2, r3, #7
 8005166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4432      	add	r2, r6
 800516c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800516e:	e0b9      	b.n	80052e4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005172:	461c      	mov	r4, r3
 8005174:	f04f 0500 	mov.w	r5, #0
 8005178:	4622      	mov	r2, r4
 800517a:	462b      	mov	r3, r5
 800517c:	1891      	adds	r1, r2, r2
 800517e:	6139      	str	r1, [r7, #16]
 8005180:	415b      	adcs	r3, r3
 8005182:	617b      	str	r3, [r7, #20]
 8005184:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005188:	1912      	adds	r2, r2, r4
 800518a:	eb45 0303 	adc.w	r3, r5, r3
 800518e:	f04f 0000 	mov.w	r0, #0
 8005192:	f04f 0100 	mov.w	r1, #0
 8005196:	00d9      	lsls	r1, r3, #3
 8005198:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800519c:	00d0      	lsls	r0, r2, #3
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	eb12 0804 	adds.w	r8, r2, r4
 80051a6:	eb43 0905 	adc.w	r9, r3, r5
 80051aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f04f 0100 	mov.w	r1, #0
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	008b      	lsls	r3, r1, #2
 80051be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051c2:	0082      	lsls	r2, r0, #2
 80051c4:	4640      	mov	r0, r8
 80051c6:	4649      	mov	r1, r9
 80051c8:	f7fb fd9e 	bl	8000d08 <__aeabi_uldivmod>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4b49      	ldr	r3, [pc, #292]	; (80052f8 <UART_SetConfig+0x38c>)
 80051d2:	fba3 2302 	umull	r2, r3, r3, r2
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	011e      	lsls	r6, r3, #4
 80051da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051dc:	4618      	mov	r0, r3
 80051de:	f04f 0100 	mov.w	r1, #0
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	1894      	adds	r4, r2, r2
 80051e8:	60bc      	str	r4, [r7, #8]
 80051ea:	415b      	adcs	r3, r3
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051f2:	1812      	adds	r2, r2, r0
 80051f4:	eb41 0303 	adc.w	r3, r1, r3
 80051f8:	f04f 0400 	mov.w	r4, #0
 80051fc:	f04f 0500 	mov.w	r5, #0
 8005200:	00dd      	lsls	r5, r3, #3
 8005202:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005206:	00d4      	lsls	r4, r2, #3
 8005208:	4622      	mov	r2, r4
 800520a:	462b      	mov	r3, r5
 800520c:	1814      	adds	r4, r2, r0
 800520e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005210:	414b      	adcs	r3, r1
 8005212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	4618      	mov	r0, r3
 800521a:	f04f 0100 	mov.w	r1, #0
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	008b      	lsls	r3, r1, #2
 8005228:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800522c:	0082      	lsls	r2, r0, #2
 800522e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005232:	f7fb fd69 	bl	8000d08 <__aeabi_uldivmod>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4b2f      	ldr	r3, [pc, #188]	; (80052f8 <UART_SetConfig+0x38c>)
 800523c:	fba3 1302 	umull	r1, r3, r3, r2
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	2164      	movs	r1, #100	; 0x64
 8005244:	fb01 f303 	mul.w	r3, r1, r3
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	3332      	adds	r3, #50	; 0x32
 800524e:	4a2a      	ldr	r2, [pc, #168]	; (80052f8 <UART_SetConfig+0x38c>)
 8005250:	fba2 2303 	umull	r2, r3, r2, r3
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800525a:	441e      	add	r6, r3
 800525c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800525e:	4618      	mov	r0, r3
 8005260:	f04f 0100 	mov.w	r1, #0
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	1894      	adds	r4, r2, r2
 800526a:	603c      	str	r4, [r7, #0]
 800526c:	415b      	adcs	r3, r3
 800526e:	607b      	str	r3, [r7, #4]
 8005270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005274:	1812      	adds	r2, r2, r0
 8005276:	eb41 0303 	adc.w	r3, r1, r3
 800527a:	f04f 0400 	mov.w	r4, #0
 800527e:	f04f 0500 	mov.w	r5, #0
 8005282:	00dd      	lsls	r5, r3, #3
 8005284:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005288:	00d4      	lsls	r4, r2, #3
 800528a:	4622      	mov	r2, r4
 800528c:	462b      	mov	r3, r5
 800528e:	eb12 0a00 	adds.w	sl, r2, r0
 8005292:	eb43 0b01 	adc.w	fp, r3, r1
 8005296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	4618      	mov	r0, r3
 800529c:	f04f 0100 	mov.w	r1, #0
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	008b      	lsls	r3, r1, #2
 80052aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052ae:	0082      	lsls	r2, r0, #2
 80052b0:	4650      	mov	r0, sl
 80052b2:	4659      	mov	r1, fp
 80052b4:	f7fb fd28 	bl	8000d08 <__aeabi_uldivmod>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4b0e      	ldr	r3, [pc, #56]	; (80052f8 <UART_SetConfig+0x38c>)
 80052be:	fba3 1302 	umull	r1, r3, r3, r2
 80052c2:	095b      	lsrs	r3, r3, #5
 80052c4:	2164      	movs	r1, #100	; 0x64
 80052c6:	fb01 f303 	mul.w	r3, r1, r3
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	3332      	adds	r3, #50	; 0x32
 80052d0:	4a09      	ldr	r2, [pc, #36]	; (80052f8 <UART_SetConfig+0x38c>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	095b      	lsrs	r3, r3, #5
 80052d8:	f003 020f 	and.w	r2, r3, #15
 80052dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4432      	add	r2, r6
 80052e2:	609a      	str	r2, [r3, #8]
}
 80052e4:	bf00      	nop
 80052e6:	377c      	adds	r7, #124	; 0x7c
 80052e8:	46bd      	mov	sp, r7
 80052ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ee:	bf00      	nop
 80052f0:	40011000 	.word	0x40011000
 80052f4:	40011400 	.word	0x40011400
 80052f8:	51eb851f 	.word	0x51eb851f

080052fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <SysTick_Handler+0x1c>)
 8005302:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005304:	f000 fda6 	bl	8005e54 <xTaskGetSchedulerState>
 8005308:	4603      	mov	r3, r0
 800530a:	2b01      	cmp	r3, #1
 800530c:	d001      	beq.n	8005312 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800530e:	f000 ff1b 	bl	8006148 <xPortSysTickHandler>
  }
}
 8005312:	bf00      	nop
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	e000e010 	.word	0xe000e010

0800531c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005322:	f3ef 8305 	mrs	r3, IPSR
 8005326:	603b      	str	r3, [r7, #0]
  return(result);
 8005328:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800532e:	f06f 0305 	mvn.w	r3, #5
 8005332:	607b      	str	r3, [r7, #4]
 8005334:	e00c      	b.n	8005350 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005336:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <osKernelInitialize+0x44>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d105      	bne.n	800534a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800533e:	4b08      	ldr	r3, [pc, #32]	; (8005360 <osKernelInitialize+0x44>)
 8005340:	2201      	movs	r2, #1
 8005342:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005344:	2300      	movs	r3, #0
 8005346:	607b      	str	r3, [r7, #4]
 8005348:	e002      	b.n	8005350 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800534a:	f04f 33ff 	mov.w	r3, #4294967295
 800534e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005350:	687b      	ldr	r3, [r7, #4]
}
 8005352:	4618      	mov	r0, r3
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	200002d8 	.word	0x200002d8

08005364 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005364:	b580      	push	{r7, lr}
 8005366:	b08e      	sub	sp, #56	; 0x38
 8005368:	af04      	add	r7, sp, #16
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005370:	2300      	movs	r3, #0
 8005372:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005374:	f3ef 8305 	mrs	r3, IPSR
 8005378:	617b      	str	r3, [r7, #20]
  return(result);
 800537a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800537c:	2b00      	cmp	r3, #0
 800537e:	d17e      	bne.n	800547e <osThreadNew+0x11a>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d07b      	beq.n	800547e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005386:	2380      	movs	r3, #128	; 0x80
 8005388:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800538a:	2318      	movs	r3, #24
 800538c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800538e:	2300      	movs	r3, #0
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005392:	f04f 33ff 	mov.w	r3, #4294967295
 8005396:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d045      	beq.n	800542a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <osThreadNew+0x48>
        name = attr->name;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <osThreadNew+0x6e>
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	2b38      	cmp	r3, #56	; 0x38
 80053c4:	d805      	bhi.n	80053d2 <osThreadNew+0x6e>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <osThreadNew+0x72>
        return (NULL);
 80053d2:	2300      	movs	r3, #0
 80053d4:	e054      	b.n	8005480 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	089b      	lsrs	r3, r3, #2
 80053e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00e      	beq.n	800540c <osThreadNew+0xa8>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	2bbb      	cmp	r3, #187	; 0xbb
 80053f4:	d90a      	bls.n	800540c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d006      	beq.n	800540c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <osThreadNew+0xa8>
        mem = 1;
 8005406:	2301      	movs	r3, #1
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	e010      	b.n	800542e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10c      	bne.n	800542e <osThreadNew+0xca>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d108      	bne.n	800542e <osThreadNew+0xca>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d104      	bne.n	800542e <osThreadNew+0xca>
          mem = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	61bb      	str	r3, [r7, #24]
 8005428:	e001      	b.n	800542e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800542a:	2300      	movs	r3, #0
 800542c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d110      	bne.n	8005456 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800543c:	9202      	str	r2, [sp, #8]
 800543e:	9301      	str	r3, [sp, #4]
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	6a3a      	ldr	r2, [r7, #32]
 8005448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 f8eb 	bl	8005626 <xTaskCreateStatic>
 8005450:	4603      	mov	r3, r0
 8005452:	613b      	str	r3, [r7, #16]
 8005454:	e013      	b.n	800547e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d110      	bne.n	800547e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	b29a      	uxth	r2, r3
 8005460:	f107 0310 	add.w	r3, r7, #16
 8005464:	9301      	str	r3, [sp, #4]
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 f936 	bl	80056e0 <xTaskCreate>
 8005474:	4603      	mov	r3, r0
 8005476:	2b01      	cmp	r3, #1
 8005478:	d001      	beq.n	800547e <osThreadNew+0x11a>
            hTask = NULL;
 800547a:	2300      	movs	r3, #0
 800547c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800547e:	693b      	ldr	r3, [r7, #16]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3728      	adds	r7, #40	; 0x28
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005490:	f3ef 8305 	mrs	r3, IPSR
 8005494:	60bb      	str	r3, [r7, #8]
  return(result);
 8005496:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <osDelay+0x1c>
    stat = osErrorISR;
 800549c:	f06f 0305 	mvn.w	r3, #5
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	e007      	b.n	80054b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fa72 	bl	8005998 <vTaskDelay>
    }
  }

  return (stat);
 80054b4:	68fb      	ldr	r3, [r7, #12]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f103 0208 	add.w	r2, r3, #8
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f04f 32ff 	mov.w	r2, #4294967295
 80054d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f103 0208 	add.w	r2, r3, #8
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f103 0208 	add.w	r2, r3, #8
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	601a      	str	r2, [r3, #0]
}
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005576:	d103      	bne.n	8005580 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	e00c      	b.n	800559a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3308      	adds	r3, #8
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	e002      	b.n	800558e <vListInsert+0x2e>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	429a      	cmp	r2, r3
 8005598:	d2f6      	bcs.n	8005588 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	601a      	str	r2, [r3, #0]
}
 80055c6:	bf00      	nop
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055d2:	b480      	push	{r7}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6892      	ldr	r2, [r2, #8]
 80055e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	6852      	ldr	r2, [r2, #4]
 80055f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d103      	bne.n	8005606 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689a      	ldr	r2, [r3, #8]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	1e5a      	subs	r2, r3, #1
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005626:	b580      	push	{r7, lr}
 8005628:	b08e      	sub	sp, #56	; 0x38
 800562a:	af04      	add	r7, sp, #16
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	607a      	str	r2, [r7, #4]
 8005632:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10a      	bne.n	8005650 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800564c:	bf00      	nop
 800564e:	e7fe      	b.n	800564e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10a      	bne.n	800566c <xTaskCreateStatic+0x46>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	61fb      	str	r3, [r7, #28]
}
 8005668:	bf00      	nop
 800566a:	e7fe      	b.n	800566a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800566c:	23bc      	movs	r3, #188	; 0xbc
 800566e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2bbc      	cmp	r3, #188	; 0xbc
 8005674:	d00a      	beq.n	800568c <xTaskCreateStatic+0x66>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	61bb      	str	r3, [r7, #24]
}
 8005688:	bf00      	nop
 800568a:	e7fe      	b.n	800568a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800568c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01e      	beq.n	80056d2 <xTaskCreateStatic+0xac>
 8005694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005696:	2b00      	cmp	r3, #0
 8005698:	d01b      	beq.n	80056d2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056ac:	2300      	movs	r3, #0
 80056ae:	9303      	str	r3, [sp, #12]
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	9302      	str	r3, [sp, #8]
 80056b4:	f107 0314 	add.w	r3, r7, #20
 80056b8:	9301      	str	r3, [sp, #4]
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	68b9      	ldr	r1, [r7, #8]
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f851 	bl	800576c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056cc:	f000 f8f4 	bl	80058b8 <prvAddNewTaskToReadyList>
 80056d0:	e001      	b.n	80056d6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056d6:	697b      	ldr	r3, [r7, #20]
	}
 80056d8:	4618      	mov	r0, r3
 80056da:	3728      	adds	r7, #40	; 0x28
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08c      	sub	sp, #48	; 0x30
 80056e4:	af04      	add	r7, sp, #16
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	4613      	mov	r3, r2
 80056ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80056f0:	88fb      	ldrh	r3, [r7, #6]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 fd49 	bl	800618c <pvPortMalloc>
 80056fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00e      	beq.n	8005720 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005702:	20bc      	movs	r0, #188	; 0xbc
 8005704:	f000 fd42 	bl	800618c <pvPortMalloc>
 8005708:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	631a      	str	r2, [r3, #48]	; 0x30
 8005716:	e005      	b.n	8005724 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005718:	6978      	ldr	r0, [r7, #20]
 800571a:	f000 fe03 	bl	8006324 <vPortFree>
 800571e:	e001      	b.n	8005724 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005720:	2300      	movs	r3, #0
 8005722:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d017      	beq.n	800575a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005732:	88fa      	ldrh	r2, [r7, #6]
 8005734:	2300      	movs	r3, #0
 8005736:	9303      	str	r3, [sp, #12]
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	9302      	str	r3, [sp, #8]
 800573c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	68b9      	ldr	r1, [r7, #8]
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f80f 	bl	800576c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800574e:	69f8      	ldr	r0, [r7, #28]
 8005750:	f000 f8b2 	bl	80058b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005754:	2301      	movs	r3, #1
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	e002      	b.n	8005760 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800575a:	f04f 33ff 	mov.w	r3, #4294967295
 800575e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005760:	69bb      	ldr	r3, [r7, #24]
	}
 8005762:	4618      	mov	r0, r3
 8005764:	3720      	adds	r7, #32
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800577a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	461a      	mov	r2, r3
 8005784:	21a5      	movs	r1, #165	; 0xa5
 8005786:	f001 fbeb 	bl	8006f60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005794:	3b01      	subs	r3, #1
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	f023 0307 	bic.w	r3, r3, #7
 80057a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	617b      	str	r3, [r7, #20]
}
 80057c0:	bf00      	nop
 80057c2:	e7fe      	b.n	80057c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d01f      	beq.n	800580a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057ca:	2300      	movs	r3, #0
 80057cc:	61fb      	str	r3, [r7, #28]
 80057ce:	e012      	b.n	80057f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	4413      	add	r3, r2
 80057d6:	7819      	ldrb	r1, [r3, #0]
 80057d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	4413      	add	r3, r2
 80057de:	3334      	adds	r3, #52	; 0x34
 80057e0:	460a      	mov	r2, r1
 80057e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	4413      	add	r3, r2
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d006      	beq.n	80057fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	3301      	adds	r3, #1
 80057f4:	61fb      	str	r3, [r7, #28]
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	2b0f      	cmp	r3, #15
 80057fa:	d9e9      	bls.n	80057d0 <prvInitialiseNewTask+0x64>
 80057fc:	e000      	b.n	8005800 <prvInitialiseNewTask+0x94>
			{
				break;
 80057fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005808:	e003      	b.n	8005812 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	2b37      	cmp	r3, #55	; 0x37
 8005816:	d901      	bls.n	800581c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005818:	2337      	movs	r3, #55	; 0x37
 800581a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800581c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005820:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005826:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	2200      	movs	r2, #0
 800582c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	3304      	adds	r3, #4
 8005832:	4618      	mov	r0, r3
 8005834:	f7ff fe63 	bl	80054fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	3318      	adds	r3, #24
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff fe5e 	bl	80054fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005846:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005856:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	2200      	movs	r2, #0
 800585c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	2200      	movs	r2, #0
 8005864:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	3354      	adds	r3, #84	; 0x54
 800586c:	2260      	movs	r2, #96	; 0x60
 800586e:	2100      	movs	r1, #0
 8005870:	4618      	mov	r0, r3
 8005872:	f001 fb75 	bl	8006f60 <memset>
 8005876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005878:	4a0c      	ldr	r2, [pc, #48]	; (80058ac <prvInitialiseNewTask+0x140>)
 800587a:	659a      	str	r2, [r3, #88]	; 0x58
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	4a0c      	ldr	r2, [pc, #48]	; (80058b0 <prvInitialiseNewTask+0x144>)
 8005880:	65da      	str	r2, [r3, #92]	; 0x5c
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	4a0b      	ldr	r2, [pc, #44]	; (80058b4 <prvInitialiseNewTask+0x148>)
 8005886:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	68f9      	ldr	r1, [r7, #12]
 800588c:	69b8      	ldr	r0, [r7, #24]
 800588e:	f000 fb53 	bl	8005f38 <pxPortInitialiseStack>
 8005892:	4602      	mov	r2, r0
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058a4:	bf00      	nop
 80058a6:	3720      	adds	r7, #32
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	080099c4 	.word	0x080099c4
 80058b0:	080099e4 	.word	0x080099e4
 80058b4:	080099a4 	.word	0x080099a4

080058b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058c0:	f000 fbb2 	bl	8006028 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058c4:	4b2d      	ldr	r3, [pc, #180]	; (800597c <prvAddNewTaskToReadyList+0xc4>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3301      	adds	r3, #1
 80058ca:	4a2c      	ldr	r2, [pc, #176]	; (800597c <prvAddNewTaskToReadyList+0xc4>)
 80058cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058ce:	4b2c      	ldr	r3, [pc, #176]	; (8005980 <prvAddNewTaskToReadyList+0xc8>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d109      	bne.n	80058ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058d6:	4a2a      	ldr	r2, [pc, #168]	; (8005980 <prvAddNewTaskToReadyList+0xc8>)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058dc:	4b27      	ldr	r3, [pc, #156]	; (800597c <prvAddNewTaskToReadyList+0xc4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d110      	bne.n	8005906 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058e4:	f000 fa56 	bl	8005d94 <prvInitialiseTaskLists>
 80058e8:	e00d      	b.n	8005906 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058ea:	4b26      	ldr	r3, [pc, #152]	; (8005984 <prvAddNewTaskToReadyList+0xcc>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d109      	bne.n	8005906 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058f2:	4b23      	ldr	r3, [pc, #140]	; (8005980 <prvAddNewTaskToReadyList+0xc8>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d802      	bhi.n	8005906 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005900:	4a1f      	ldr	r2, [pc, #124]	; (8005980 <prvAddNewTaskToReadyList+0xc8>)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005906:	4b20      	ldr	r3, [pc, #128]	; (8005988 <prvAddNewTaskToReadyList+0xd0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3301      	adds	r3, #1
 800590c:	4a1e      	ldr	r2, [pc, #120]	; (8005988 <prvAddNewTaskToReadyList+0xd0>)
 800590e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005910:	4b1d      	ldr	r3, [pc, #116]	; (8005988 <prvAddNewTaskToReadyList+0xd0>)
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591c:	4b1b      	ldr	r3, [pc, #108]	; (800598c <prvAddNewTaskToReadyList+0xd4>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d903      	bls.n	800592c <prvAddNewTaskToReadyList+0x74>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	4a18      	ldr	r2, [pc, #96]	; (800598c <prvAddNewTaskToReadyList+0xd4>)
 800592a:	6013      	str	r3, [r2, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4a15      	ldr	r2, [pc, #84]	; (8005990 <prvAddNewTaskToReadyList+0xd8>)
 800593a:	441a      	add	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3304      	adds	r3, #4
 8005940:	4619      	mov	r1, r3
 8005942:	4610      	mov	r0, r2
 8005944:	f7ff fde8 	bl	8005518 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005948:	f000 fb9e 	bl	8006088 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800594c:	4b0d      	ldr	r3, [pc, #52]	; (8005984 <prvAddNewTaskToReadyList+0xcc>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00e      	beq.n	8005972 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005954:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <prvAddNewTaskToReadyList+0xc8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595e:	429a      	cmp	r2, r3
 8005960:	d207      	bcs.n	8005972 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005962:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <prvAddNewTaskToReadyList+0xdc>)
 8005964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005972:	bf00      	nop
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	200007ac 	.word	0x200007ac
 8005980:	200002dc 	.word	0x200002dc
 8005984:	200007b8 	.word	0x200007b8
 8005988:	200007c8 	.word	0x200007c8
 800598c:	200007b4 	.word	0x200007b4
 8005990:	200002e0 	.word	0x200002e0
 8005994:	e000ed04 	.word	0xe000ed04

08005998 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d017      	beq.n	80059da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059aa:	4b13      	ldr	r3, [pc, #76]	; (80059f8 <vTaskDelay+0x60>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <vTaskDelay+0x30>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	60bb      	str	r3, [r7, #8]
}
 80059c4:	bf00      	nop
 80059c6:	e7fe      	b.n	80059c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059c8:	f000 f81a 	bl	8005a00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059cc:	2100      	movs	r1, #0
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fa5e 	bl	8005e90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059d4:	f000 f822 	bl	8005a1c <xTaskResumeAll>
 80059d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d107      	bne.n	80059f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80059e0:	4b06      	ldr	r3, [pc, #24]	; (80059fc <vTaskDelay+0x64>)
 80059e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059f0:	bf00      	nop
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	200007d0 	.word	0x200007d0
 80059fc:	e000ed04 	.word	0xe000ed04

08005a00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005a04:	4b04      	ldr	r3, [pc, #16]	; (8005a18 <vTaskSuspendAll+0x18>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	4a03      	ldr	r2, [pc, #12]	; (8005a18 <vTaskSuspendAll+0x18>)
 8005a0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005a0e:	bf00      	nop
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	200007d0 	.word	0x200007d0

08005a1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a2a:	4b42      	ldr	r3, [pc, #264]	; (8005b34 <xTaskResumeAll+0x118>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10a      	bne.n	8005a48 <xTaskResumeAll+0x2c>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	603b      	str	r3, [r7, #0]
}
 8005a44:	bf00      	nop
 8005a46:	e7fe      	b.n	8005a46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a48:	f000 faee 	bl	8006028 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a4c:	4b39      	ldr	r3, [pc, #228]	; (8005b34 <xTaskResumeAll+0x118>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	4a38      	ldr	r2, [pc, #224]	; (8005b34 <xTaskResumeAll+0x118>)
 8005a54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a56:	4b37      	ldr	r3, [pc, #220]	; (8005b34 <xTaskResumeAll+0x118>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d162      	bne.n	8005b24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a5e:	4b36      	ldr	r3, [pc, #216]	; (8005b38 <xTaskResumeAll+0x11c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d05e      	beq.n	8005b24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a66:	e02f      	b.n	8005ac8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a68:	4b34      	ldr	r3, [pc, #208]	; (8005b3c <xTaskResumeAll+0x120>)
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3318      	adds	r3, #24
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff fdac 	bl	80055d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff fda7 	bl	80055d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	4b2d      	ldr	r3, [pc, #180]	; (8005b40 <xTaskResumeAll+0x124>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d903      	bls.n	8005a98 <xTaskResumeAll+0x7c>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	4a2a      	ldr	r2, [pc, #168]	; (8005b40 <xTaskResumeAll+0x124>)
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4a27      	ldr	r2, [pc, #156]	; (8005b44 <xTaskResumeAll+0x128>)
 8005aa6:	441a      	add	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	4619      	mov	r1, r3
 8005aae:	4610      	mov	r0, r2
 8005ab0:	f7ff fd32 	bl	8005518 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab8:	4b23      	ldr	r3, [pc, #140]	; (8005b48 <xTaskResumeAll+0x12c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d302      	bcc.n	8005ac8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005ac2:	4b22      	ldr	r3, [pc, #136]	; (8005b4c <xTaskResumeAll+0x130>)
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ac8:	4b1c      	ldr	r3, [pc, #112]	; (8005b3c <xTaskResumeAll+0x120>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1cb      	bne.n	8005a68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ad6:	f000 f99d 	bl	8005e14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ada:	4b1d      	ldr	r3, [pc, #116]	; (8005b50 <xTaskResumeAll+0x134>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d010      	beq.n	8005b08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ae6:	f000 f837 	bl	8005b58 <xTaskIncrementTick>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005af0:	4b16      	ldr	r3, [pc, #88]	; (8005b4c <xTaskResumeAll+0x130>)
 8005af2:	2201      	movs	r2, #1
 8005af4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f1      	bne.n	8005ae6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005b02:	4b13      	ldr	r3, [pc, #76]	; (8005b50 <xTaskResumeAll+0x134>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b08:	4b10      	ldr	r3, [pc, #64]	; (8005b4c <xTaskResumeAll+0x130>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d009      	beq.n	8005b24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b10:	2301      	movs	r3, #1
 8005b12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b14:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <xTaskResumeAll+0x138>)
 8005b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b24:	f000 fab0 	bl	8006088 <vPortExitCritical>

	return xAlreadyYielded;
 8005b28:	68bb      	ldr	r3, [r7, #8]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	200007d0 	.word	0x200007d0
 8005b38:	200007ac 	.word	0x200007ac
 8005b3c:	20000770 	.word	0x20000770
 8005b40:	200007b4 	.word	0x200007b4
 8005b44:	200002e0 	.word	0x200002e0
 8005b48:	200002dc 	.word	0x200002dc
 8005b4c:	200007c0 	.word	0x200007c0
 8005b50:	200007bc 	.word	0x200007bc
 8005b54:	e000ed04 	.word	0xe000ed04

08005b58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b62:	4b4f      	ldr	r3, [pc, #316]	; (8005ca0 <xTaskIncrementTick+0x148>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f040 808f 	bne.w	8005c8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b6c:	4b4d      	ldr	r3, [pc, #308]	; (8005ca4 <xTaskIncrementTick+0x14c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3301      	adds	r3, #1
 8005b72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b74:	4a4b      	ldr	r2, [pc, #300]	; (8005ca4 <xTaskIncrementTick+0x14c>)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d120      	bne.n	8005bc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b80:	4b49      	ldr	r3, [pc, #292]	; (8005ca8 <xTaskIncrementTick+0x150>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	603b      	str	r3, [r7, #0]
}
 8005b9c:	bf00      	nop
 8005b9e:	e7fe      	b.n	8005b9e <xTaskIncrementTick+0x46>
 8005ba0:	4b41      	ldr	r3, [pc, #260]	; (8005ca8 <xTaskIncrementTick+0x150>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	4b41      	ldr	r3, [pc, #260]	; (8005cac <xTaskIncrementTick+0x154>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a3f      	ldr	r2, [pc, #252]	; (8005ca8 <xTaskIncrementTick+0x150>)
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	4a3f      	ldr	r2, [pc, #252]	; (8005cac <xTaskIncrementTick+0x154>)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	4b3e      	ldr	r3, [pc, #248]	; (8005cb0 <xTaskIncrementTick+0x158>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	4a3d      	ldr	r2, [pc, #244]	; (8005cb0 <xTaskIncrementTick+0x158>)
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	f000 f929 	bl	8005e14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005bc2:	4b3c      	ldr	r3, [pc, #240]	; (8005cb4 <xTaskIncrementTick+0x15c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d349      	bcc.n	8005c60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bcc:	4b36      	ldr	r3, [pc, #216]	; (8005ca8 <xTaskIncrementTick+0x150>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d104      	bne.n	8005be0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bd6:	4b37      	ldr	r3, [pc, #220]	; (8005cb4 <xTaskIncrementTick+0x15c>)
 8005bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bdc:	601a      	str	r2, [r3, #0]
					break;
 8005bde:	e03f      	b.n	8005c60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005be0:	4b31      	ldr	r3, [pc, #196]	; (8005ca8 <xTaskIncrementTick+0x150>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d203      	bcs.n	8005c00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005bf8:	4a2e      	ldr	r2, [pc, #184]	; (8005cb4 <xTaskIncrementTick+0x15c>)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005bfe:	e02f      	b.n	8005c60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	3304      	adds	r3, #4
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7ff fce4 	bl	80055d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d004      	beq.n	8005c1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	3318      	adds	r3, #24
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff fcdb 	bl	80055d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c20:	4b25      	ldr	r3, [pc, #148]	; (8005cb8 <xTaskIncrementTick+0x160>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d903      	bls.n	8005c30 <xTaskIncrementTick+0xd8>
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	4a22      	ldr	r2, [pc, #136]	; (8005cb8 <xTaskIncrementTick+0x160>)
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c34:	4613      	mov	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4a1f      	ldr	r2, [pc, #124]	; (8005cbc <xTaskIncrementTick+0x164>)
 8005c3e:	441a      	add	r2, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f7ff fc66 	bl	8005518 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c50:	4b1b      	ldr	r3, [pc, #108]	; (8005cc0 <xTaskIncrementTick+0x168>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d3b8      	bcc.n	8005bcc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c5e:	e7b5      	b.n	8005bcc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c60:	4b17      	ldr	r3, [pc, #92]	; (8005cc0 <xTaskIncrementTick+0x168>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c66:	4915      	ldr	r1, [pc, #84]	; (8005cbc <xTaskIncrementTick+0x164>)
 8005c68:	4613      	mov	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	440b      	add	r3, r1
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d901      	bls.n	8005c7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005c7c:	4b11      	ldr	r3, [pc, #68]	; (8005cc4 <xTaskIncrementTick+0x16c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d007      	beq.n	8005c94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005c84:	2301      	movs	r3, #1
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	e004      	b.n	8005c94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c8a:	4b0f      	ldr	r3, [pc, #60]	; (8005cc8 <xTaskIncrementTick+0x170>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	4a0d      	ldr	r2, [pc, #52]	; (8005cc8 <xTaskIncrementTick+0x170>)
 8005c92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c94:	697b      	ldr	r3, [r7, #20]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	200007d0 	.word	0x200007d0
 8005ca4:	200007b0 	.word	0x200007b0
 8005ca8:	20000768 	.word	0x20000768
 8005cac:	2000076c 	.word	0x2000076c
 8005cb0:	200007c4 	.word	0x200007c4
 8005cb4:	200007cc 	.word	0x200007cc
 8005cb8:	200007b4 	.word	0x200007b4
 8005cbc:	200002e0 	.word	0x200002e0
 8005cc0:	200002dc 	.word	0x200002dc
 8005cc4:	200007c0 	.word	0x200007c0
 8005cc8:	200007bc 	.word	0x200007bc

08005ccc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005cd2:	4b2a      	ldr	r3, [pc, #168]	; (8005d7c <vTaskSwitchContext+0xb0>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005cda:	4b29      	ldr	r3, [pc, #164]	; (8005d80 <vTaskSwitchContext+0xb4>)
 8005cdc:	2201      	movs	r2, #1
 8005cde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ce0:	e046      	b.n	8005d70 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005ce2:	4b27      	ldr	r3, [pc, #156]	; (8005d80 <vTaskSwitchContext+0xb4>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ce8:	4b26      	ldr	r3, [pc, #152]	; (8005d84 <vTaskSwitchContext+0xb8>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	e010      	b.n	8005d12 <vTaskSwitchContext+0x46>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10a      	bne.n	8005d0c <vTaskSwitchContext+0x40>
	__asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	607b      	str	r3, [r7, #4]
}
 8005d08:	bf00      	nop
 8005d0a:	e7fe      	b.n	8005d0a <vTaskSwitchContext+0x3e>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	491d      	ldr	r1, [pc, #116]	; (8005d88 <vTaskSwitchContext+0xbc>)
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	440b      	add	r3, r1
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0e4      	beq.n	8005cf0 <vTaskSwitchContext+0x24>
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4a15      	ldr	r2, [pc, #84]	; (8005d88 <vTaskSwitchContext+0xbc>)
 8005d32:	4413      	add	r3, r2
 8005d34:	60bb      	str	r3, [r7, #8]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	605a      	str	r2, [r3, #4]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	3308      	adds	r3, #8
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d104      	bne.n	8005d56 <vTaskSwitchContext+0x8a>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	605a      	str	r2, [r3, #4]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	4a0b      	ldr	r2, [pc, #44]	; (8005d8c <vTaskSwitchContext+0xc0>)
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	4a08      	ldr	r2, [pc, #32]	; (8005d84 <vTaskSwitchContext+0xb8>)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d66:	4b09      	ldr	r3, [pc, #36]	; (8005d8c <vTaskSwitchContext+0xc0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3354      	adds	r3, #84	; 0x54
 8005d6c:	4a08      	ldr	r2, [pc, #32]	; (8005d90 <vTaskSwitchContext+0xc4>)
 8005d6e:	6013      	str	r3, [r2, #0]
}
 8005d70:	bf00      	nop
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	200007d0 	.word	0x200007d0
 8005d80:	200007c0 	.word	0x200007c0
 8005d84:	200007b4 	.word	0x200007b4
 8005d88:	200002e0 	.word	0x200002e0
 8005d8c:	200002dc 	.word	0x200002dc
 8005d90:	200000e8 	.word	0x200000e8

08005d94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	607b      	str	r3, [r7, #4]
 8005d9e:	e00c      	b.n	8005dba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4a12      	ldr	r2, [pc, #72]	; (8005df4 <prvInitialiseTaskLists+0x60>)
 8005dac:	4413      	add	r3, r2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff fb85 	bl	80054be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3301      	adds	r3, #1
 8005db8:	607b      	str	r3, [r7, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b37      	cmp	r3, #55	; 0x37
 8005dbe:	d9ef      	bls.n	8005da0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005dc0:	480d      	ldr	r0, [pc, #52]	; (8005df8 <prvInitialiseTaskLists+0x64>)
 8005dc2:	f7ff fb7c 	bl	80054be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005dc6:	480d      	ldr	r0, [pc, #52]	; (8005dfc <prvInitialiseTaskLists+0x68>)
 8005dc8:	f7ff fb79 	bl	80054be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005dcc:	480c      	ldr	r0, [pc, #48]	; (8005e00 <prvInitialiseTaskLists+0x6c>)
 8005dce:	f7ff fb76 	bl	80054be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005dd2:	480c      	ldr	r0, [pc, #48]	; (8005e04 <prvInitialiseTaskLists+0x70>)
 8005dd4:	f7ff fb73 	bl	80054be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005dd8:	480b      	ldr	r0, [pc, #44]	; (8005e08 <prvInitialiseTaskLists+0x74>)
 8005dda:	f7ff fb70 	bl	80054be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dde:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <prvInitialiseTaskLists+0x78>)
 8005de0:	4a05      	ldr	r2, [pc, #20]	; (8005df8 <prvInitialiseTaskLists+0x64>)
 8005de2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005de4:	4b0a      	ldr	r3, [pc, #40]	; (8005e10 <prvInitialiseTaskLists+0x7c>)
 8005de6:	4a05      	ldr	r2, [pc, #20]	; (8005dfc <prvInitialiseTaskLists+0x68>)
 8005de8:	601a      	str	r2, [r3, #0]
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	200002e0 	.word	0x200002e0
 8005df8:	20000740 	.word	0x20000740
 8005dfc:	20000754 	.word	0x20000754
 8005e00:	20000770 	.word	0x20000770
 8005e04:	20000784 	.word	0x20000784
 8005e08:	20000798 	.word	0x20000798
 8005e0c:	20000768 	.word	0x20000768
 8005e10:	2000076c 	.word	0x2000076c

08005e14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e1a:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <prvResetNextTaskUnblockTime+0x38>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d104      	bne.n	8005e2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e24:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <prvResetNextTaskUnblockTime+0x3c>)
 8005e26:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e2c:	e008      	b.n	8005e40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2e:	4b07      	ldr	r3, [pc, #28]	; (8005e4c <prvResetNextTaskUnblockTime+0x38>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	4a04      	ldr	r2, [pc, #16]	; (8005e50 <prvResetNextTaskUnblockTime+0x3c>)
 8005e3e:	6013      	str	r3, [r2, #0]
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	20000768 	.word	0x20000768
 8005e50:	200007cc 	.word	0x200007cc

08005e54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e5a:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <xTaskGetSchedulerState+0x34>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d102      	bne.n	8005e68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e62:	2301      	movs	r3, #1
 8005e64:	607b      	str	r3, [r7, #4]
 8005e66:	e008      	b.n	8005e7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e68:	4b08      	ldr	r3, [pc, #32]	; (8005e8c <xTaskGetSchedulerState+0x38>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d102      	bne.n	8005e76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e70:	2302      	movs	r3, #2
 8005e72:	607b      	str	r3, [r7, #4]
 8005e74:	e001      	b.n	8005e7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e76:	2300      	movs	r3, #0
 8005e78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e7a:	687b      	ldr	r3, [r7, #4]
	}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	200007b8 	.word	0x200007b8
 8005e8c:	200007d0 	.word	0x200007d0

08005e90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e9a:	4b21      	ldr	r3, [pc, #132]	; (8005f20 <prvAddCurrentTaskToDelayedList+0x90>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ea0:	4b20      	ldr	r3, [pc, #128]	; (8005f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff fb93 	bl	80055d2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb2:	d10a      	bne.n	8005eca <prvAddCurrentTaskToDelayedList+0x3a>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d007      	beq.n	8005eca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eba:	4b1a      	ldr	r3, [pc, #104]	; (8005f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4819      	ldr	r0, [pc, #100]	; (8005f28 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ec4:	f7ff fb28 	bl	8005518 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ec8:	e026      	b.n	8005f18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4413      	add	r3, r2
 8005ed0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ed2:	4b14      	ldr	r3, [pc, #80]	; (8005f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d209      	bcs.n	8005ef6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ee2:	4b12      	ldr	r3, [pc, #72]	; (8005f2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	4b0f      	ldr	r3, [pc, #60]	; (8005f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4619      	mov	r1, r3
 8005eee:	4610      	mov	r0, r2
 8005ef0:	f7ff fb36 	bl	8005560 <vListInsert>
}
 8005ef4:	e010      	b.n	8005f18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef6:	4b0e      	ldr	r3, [pc, #56]	; (8005f30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3304      	adds	r3, #4
 8005f00:	4619      	mov	r1, r3
 8005f02:	4610      	mov	r0, r2
 8005f04:	f7ff fb2c 	bl	8005560 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f08:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d202      	bcs.n	8005f18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f12:	4a08      	ldr	r2, [pc, #32]	; (8005f34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	6013      	str	r3, [r2, #0]
}
 8005f18:	bf00      	nop
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	200007b0 	.word	0x200007b0
 8005f24:	200002dc 	.word	0x200002dc
 8005f28:	20000798 	.word	0x20000798
 8005f2c:	2000076c 	.word	0x2000076c
 8005f30:	20000768 	.word	0x20000768
 8005f34:	200007cc 	.word	0x200007cc

08005f38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3b04      	subs	r3, #4
 8005f48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3b04      	subs	r3, #4
 8005f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f023 0201 	bic.w	r2, r3, #1
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3b04      	subs	r3, #4
 8005f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f68:	4a0c      	ldr	r2, [pc, #48]	; (8005f9c <pxPortInitialiseStack+0x64>)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	3b14      	subs	r3, #20
 8005f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3b04      	subs	r3, #4
 8005f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f06f 0202 	mvn.w	r2, #2
 8005f86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3b20      	subs	r3, #32
 8005f8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	08005fa1 	.word	0x08005fa1

08005fa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005faa:	4b12      	ldr	r3, [pc, #72]	; (8005ff4 <prvTaskExitError+0x54>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb2:	d00a      	beq.n	8005fca <prvTaskExitError+0x2a>
	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	60fb      	str	r3, [r7, #12]
}
 8005fc6:	bf00      	nop
 8005fc8:	e7fe      	b.n	8005fc8 <prvTaskExitError+0x28>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	60bb      	str	r3, [r7, #8]
}
 8005fdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fde:	bf00      	nop
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0fc      	beq.n	8005fe0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fe6:	bf00      	nop
 8005fe8:	bf00      	nop
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	2000000c 	.word	0x2000000c
	...

08006000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006000:	4b07      	ldr	r3, [pc, #28]	; (8006020 <pxCurrentTCBConst2>)
 8006002:	6819      	ldr	r1, [r3, #0]
 8006004:	6808      	ldr	r0, [r1, #0]
 8006006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600a:	f380 8809 	msr	PSP, r0
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f04f 0000 	mov.w	r0, #0
 8006016:	f380 8811 	msr	BASEPRI, r0
 800601a:	4770      	bx	lr
 800601c:	f3af 8000 	nop.w

08006020 <pxCurrentTCBConst2>:
 8006020:	200002dc 	.word	0x200002dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop

08006028 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	607b      	str	r3, [r7, #4]
}
 8006040:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006042:	4b0f      	ldr	r3, [pc, #60]	; (8006080 <vPortEnterCritical+0x58>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3301      	adds	r3, #1
 8006048:	4a0d      	ldr	r2, [pc, #52]	; (8006080 <vPortEnterCritical+0x58>)
 800604a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800604c:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <vPortEnterCritical+0x58>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d10f      	bne.n	8006074 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006054:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <vPortEnterCritical+0x5c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <vPortEnterCritical+0x4c>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	603b      	str	r3, [r7, #0]
}
 8006070:	bf00      	nop
 8006072:	e7fe      	b.n	8006072 <vPortEnterCritical+0x4a>
	}
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	2000000c 	.word	0x2000000c
 8006084:	e000ed04 	.word	0xe000ed04

08006088 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800608e:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <vPortExitCritical+0x50>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10a      	bne.n	80060ac <vPortExitCritical+0x24>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	607b      	str	r3, [r7, #4]
}
 80060a8:	bf00      	nop
 80060aa:	e7fe      	b.n	80060aa <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80060ac:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <vPortExitCritical+0x50>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	4a09      	ldr	r2, [pc, #36]	; (80060d8 <vPortExitCritical+0x50>)
 80060b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80060b6:	4b08      	ldr	r3, [pc, #32]	; (80060d8 <vPortExitCritical+0x50>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d105      	bne.n	80060ca <vPortExitCritical+0x42>
 80060be:	2300      	movs	r3, #0
 80060c0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	2000000c 	.word	0x2000000c
 80060dc:	00000000 	.word	0x00000000

080060e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80060e0:	f3ef 8009 	mrs	r0, PSP
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	4b15      	ldr	r3, [pc, #84]	; (8006140 <pxCurrentTCBConst>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	f01e 0f10 	tst.w	lr, #16
 80060f0:	bf08      	it	eq
 80060f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80060f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fa:	6010      	str	r0, [r2, #0]
 80060fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006104:	f380 8811 	msr	BASEPRI, r0
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f7ff fddc 	bl	8005ccc <vTaskSwitchContext>
 8006114:	f04f 0000 	mov.w	r0, #0
 8006118:	f380 8811 	msr	BASEPRI, r0
 800611c:	bc09      	pop	{r0, r3}
 800611e:	6819      	ldr	r1, [r3, #0]
 8006120:	6808      	ldr	r0, [r1, #0]
 8006122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006126:	f01e 0f10 	tst.w	lr, #16
 800612a:	bf08      	it	eq
 800612c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006130:	f380 8809 	msr	PSP, r0
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	f3af 8000 	nop.w

08006140 <pxCurrentTCBConst>:
 8006140:	200002dc 	.word	0x200002dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006144:	bf00      	nop
 8006146:	bf00      	nop

08006148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	607b      	str	r3, [r7, #4]
}
 8006160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006162:	f7ff fcf9 	bl	8005b58 <xTaskIncrementTick>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800616c:	4b06      	ldr	r3, [pc, #24]	; (8006188 <xPortSysTickHandler+0x40>)
 800616e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	2300      	movs	r3, #0
 8006176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	f383 8811 	msr	BASEPRI, r3
}
 800617e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006180:	bf00      	nop
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	e000ed04 	.word	0xe000ed04

0800618c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08a      	sub	sp, #40	; 0x28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006194:	2300      	movs	r3, #0
 8006196:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006198:	f7ff fc32 	bl	8005a00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800619c:	4b5b      	ldr	r3, [pc, #364]	; (800630c <pvPortMalloc+0x180>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061a4:	f000 f920 	bl	80063e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061a8:	4b59      	ldr	r3, [pc, #356]	; (8006310 <pvPortMalloc+0x184>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4013      	ands	r3, r2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f040 8093 	bne.w	80062dc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01d      	beq.n	80061f8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80061bc:	2208      	movs	r2, #8
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4413      	add	r3, r2
 80061c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d014      	beq.n	80061f8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f023 0307 	bic.w	r3, r3, #7
 80061d4:	3308      	adds	r3, #8
 80061d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f003 0307 	and.w	r3, r3, #7
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <pvPortMalloc+0x6c>
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	617b      	str	r3, [r7, #20]
}
 80061f4:	bf00      	nop
 80061f6:	e7fe      	b.n	80061f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d06e      	beq.n	80062dc <pvPortMalloc+0x150>
 80061fe:	4b45      	ldr	r3, [pc, #276]	; (8006314 <pvPortMalloc+0x188>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	429a      	cmp	r2, r3
 8006206:	d869      	bhi.n	80062dc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006208:	4b43      	ldr	r3, [pc, #268]	; (8006318 <pvPortMalloc+0x18c>)
 800620a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800620c:	4b42      	ldr	r3, [pc, #264]	; (8006318 <pvPortMalloc+0x18c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006212:	e004      	b.n	800621e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	429a      	cmp	r2, r3
 8006226:	d903      	bls.n	8006230 <pvPortMalloc+0xa4>
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1f1      	bne.n	8006214 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006230:	4b36      	ldr	r3, [pc, #216]	; (800630c <pvPortMalloc+0x180>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006236:	429a      	cmp	r2, r3
 8006238:	d050      	beq.n	80062dc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2208      	movs	r2, #8
 8006240:	4413      	add	r3, r2
 8006242:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	1ad2      	subs	r2, r2, r3
 8006254:	2308      	movs	r3, #8
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	429a      	cmp	r2, r3
 800625a:	d91f      	bls.n	800629c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800625c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4413      	add	r3, r2
 8006262:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00a      	beq.n	8006284 <pvPortMalloc+0xf8>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	613b      	str	r3, [r7, #16]
}
 8006280:	bf00      	nop
 8006282:	e7fe      	b.n	8006282 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	1ad2      	subs	r2, r2, r3
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006296:	69b8      	ldr	r0, [r7, #24]
 8006298:	f000 f908 	bl	80064ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800629c:	4b1d      	ldr	r3, [pc, #116]	; (8006314 <pvPortMalloc+0x188>)
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	4a1b      	ldr	r2, [pc, #108]	; (8006314 <pvPortMalloc+0x188>)
 80062a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062aa:	4b1a      	ldr	r3, [pc, #104]	; (8006314 <pvPortMalloc+0x188>)
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	4b1b      	ldr	r3, [pc, #108]	; (800631c <pvPortMalloc+0x190>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d203      	bcs.n	80062be <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062b6:	4b17      	ldr	r3, [pc, #92]	; (8006314 <pvPortMalloc+0x188>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a18      	ldr	r2, [pc, #96]	; (800631c <pvPortMalloc+0x190>)
 80062bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	4b13      	ldr	r3, [pc, #76]	; (8006310 <pvPortMalloc+0x184>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	431a      	orrs	r2, r3
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062d2:	4b13      	ldr	r3, [pc, #76]	; (8006320 <pvPortMalloc+0x194>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3301      	adds	r3, #1
 80062d8:	4a11      	ldr	r2, [pc, #68]	; (8006320 <pvPortMalloc+0x194>)
 80062da:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062dc:	f7ff fb9e 	bl	8005a1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <pvPortMalloc+0x174>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	60fb      	str	r3, [r7, #12]
}
 80062fc:	bf00      	nop
 80062fe:	e7fe      	b.n	80062fe <pvPortMalloc+0x172>
	return pvReturn;
 8006300:	69fb      	ldr	r3, [r7, #28]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3728      	adds	r7, #40	; 0x28
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	200043dc 	.word	0x200043dc
 8006310:	200043f0 	.word	0x200043f0
 8006314:	200043e0 	.word	0x200043e0
 8006318:	200043d4 	.word	0x200043d4
 800631c:	200043e4 	.word	0x200043e4
 8006320:	200043e8 	.word	0x200043e8

08006324 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d04d      	beq.n	80063d2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006336:	2308      	movs	r3, #8
 8006338:	425b      	negs	r3, r3
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	4413      	add	r3, r2
 800633e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	4b24      	ldr	r3, [pc, #144]	; (80063dc <vPortFree+0xb8>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4013      	ands	r3, r2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <vPortFree+0x44>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	60fb      	str	r3, [r7, #12]
}
 8006364:	bf00      	nop
 8006366:	e7fe      	b.n	8006366 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00a      	beq.n	8006386 <vPortFree+0x62>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	60bb      	str	r3, [r7, #8]
}
 8006382:	bf00      	nop
 8006384:	e7fe      	b.n	8006384 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	4b14      	ldr	r3, [pc, #80]	; (80063dc <vPortFree+0xb8>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4013      	ands	r3, r2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01e      	beq.n	80063d2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d11a      	bne.n	80063d2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	4b0e      	ldr	r3, [pc, #56]	; (80063dc <vPortFree+0xb8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	43db      	mvns	r3, r3
 80063a6:	401a      	ands	r2, r3
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063ac:	f7ff fb28 	bl	8005a00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	4b0a      	ldr	r3, [pc, #40]	; (80063e0 <vPortFree+0xbc>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4413      	add	r3, r2
 80063ba:	4a09      	ldr	r2, [pc, #36]	; (80063e0 <vPortFree+0xbc>)
 80063bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063be:	6938      	ldr	r0, [r7, #16]
 80063c0:	f000 f874 	bl	80064ac <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063c4:	4b07      	ldr	r3, [pc, #28]	; (80063e4 <vPortFree+0xc0>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3301      	adds	r3, #1
 80063ca:	4a06      	ldr	r2, [pc, #24]	; (80063e4 <vPortFree+0xc0>)
 80063cc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063ce:	f7ff fb25 	bl	8005a1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063d2:	bf00      	nop
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	200043f0 	.word	0x200043f0
 80063e0:	200043e0 	.word	0x200043e0
 80063e4:	200043ec 	.word	0x200043ec

080063e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063ee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80063f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063f4:	4b27      	ldr	r3, [pc, #156]	; (8006494 <prvHeapInit+0xac>)
 80063f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f003 0307 	and.w	r3, r3, #7
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00c      	beq.n	800641c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3307      	adds	r3, #7
 8006406:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 0307 	bic.w	r3, r3, #7
 800640e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	4a1f      	ldr	r2, [pc, #124]	; (8006494 <prvHeapInit+0xac>)
 8006418:	4413      	add	r3, r2
 800641a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006420:	4a1d      	ldr	r2, [pc, #116]	; (8006498 <prvHeapInit+0xb0>)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006426:	4b1c      	ldr	r3, [pc, #112]	; (8006498 <prvHeapInit+0xb0>)
 8006428:	2200      	movs	r2, #0
 800642a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	4413      	add	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006434:	2208      	movs	r2, #8
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0307 	bic.w	r3, r3, #7
 8006442:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4a15      	ldr	r2, [pc, #84]	; (800649c <prvHeapInit+0xb4>)
 8006448:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800644a:	4b14      	ldr	r3, [pc, #80]	; (800649c <prvHeapInit+0xb4>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2200      	movs	r2, #0
 8006450:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006452:	4b12      	ldr	r3, [pc, #72]	; (800649c <prvHeapInit+0xb4>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	1ad2      	subs	r2, r2, r3
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006468:	4b0c      	ldr	r3, [pc, #48]	; (800649c <prvHeapInit+0xb4>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	4a0a      	ldr	r2, [pc, #40]	; (80064a0 <prvHeapInit+0xb8>)
 8006476:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	4a09      	ldr	r2, [pc, #36]	; (80064a4 <prvHeapInit+0xbc>)
 800647e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006480:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <prvHeapInit+0xc0>)
 8006482:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006486:	601a      	str	r2, [r3, #0]
}
 8006488:	bf00      	nop
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	200007d4 	.word	0x200007d4
 8006498:	200043d4 	.word	0x200043d4
 800649c:	200043dc 	.word	0x200043dc
 80064a0:	200043e4 	.word	0x200043e4
 80064a4:	200043e0 	.word	0x200043e0
 80064a8:	200043f0 	.word	0x200043f0

080064ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064b4:	4b28      	ldr	r3, [pc, #160]	; (8006558 <prvInsertBlockIntoFreeList+0xac>)
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	e002      	b.n	80064c0 <prvInsertBlockIntoFreeList+0x14>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d8f7      	bhi.n	80064ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	4413      	add	r3, r2
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d108      	bne.n	80064ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	441a      	add	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	441a      	add	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d118      	bne.n	8006534 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	4b15      	ldr	r3, [pc, #84]	; (800655c <prvInsertBlockIntoFreeList+0xb0>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	d00d      	beq.n	800652a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	441a      	add	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	e008      	b.n	800653c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800652a:	4b0c      	ldr	r3, [pc, #48]	; (800655c <prvInsertBlockIntoFreeList+0xb0>)
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	e003      	b.n	800653c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	429a      	cmp	r2, r3
 8006542:	d002      	beq.n	800654a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800654a:	bf00      	nop
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	200043d4 	.word	0x200043d4
 800655c:	200043dc 	.word	0x200043dc

08006560 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	while (__HAL_TIM_GET_COUNTER (&htim3) < time);	 //
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
	if(htim->Instance ==TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a4c      	ldr	r2, [pc, #304]	; (80066a0 <HAL_TIM_IC_CaptureCallback+0x140>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d105      	bne.n	800657e <HAL_TIM_IC_CaptureCallback+0x1e>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	7f1b      	ldrb	r3, [r3, #28]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <HAL_TIM_IC_CaptureCallback+0x1e>
		int a = 1;
 800657a:	2301      	movs	r3, #1
 800657c:	60fb      	str	r3, [r7, #12]
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 |
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	7f1b      	ldrb	r3, [r3, #28]
 8006582:	2b01      	cmp	r3, #1
 8006584:	bf0c      	ite	eq
 8006586:	2301      	moveq	r3, #1
 8006588:	2300      	movne	r3, #0
 800658a:	b2da      	uxtb	r2, r3
		htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 |
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	7f1b      	ldrb	r3, [r3, #28]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 |
 8006590:	2b02      	cmp	r3, #2
 8006592:	bf0c      	ite	eq
 8006594:	2301      	moveq	r3, #1
 8006596:	2300      	movne	r3, #0
 8006598:	b2db      	uxtb	r3, r3
 800659a:	4313      	orrs	r3, r2
 800659c:	b2db      	uxtb	r3, r3
 800659e:	461a      	mov	r2, r3
		htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	7f1b      	ldrb	r3, [r3, #28]
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	bf0c      	ite	eq
 80065a8:	2301      	moveq	r3, #1
 80065aa:	2300      	movne	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
		htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 |
 80065ae:	4313      	orrs	r3, r2
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 |
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d06a      	beq.n	800668a <HAL_TIM_IC_CaptureCallback+0x12a>
	{
		if (capturedOne==0) // check if first value is captured
 80065b4:	4b3b      	ldr	r3, [pc, #236]	; (80066a4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d11a      	bne.n	80065f2 <HAL_TIM_IC_CaptureCallback+0x92>
		{
			firstValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);    //read the value
 80065bc:	2104      	movs	r1, #4
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7fd fb06 	bl	8003bd0 <HAL_TIM_ReadCapturedValue>
 80065c4:	4603      	mov	r3, r0
 80065c6:	4a38      	ldr	r2, [pc, #224]	; (80066a8 <HAL_TIM_IC_CaptureCallback+0x148>)
 80065c8:	6013      	str	r3, [r2, #0]
			capturedOne = 1;  									// change the value of the variable
 80065ca:	4b36      	ldr	r3, [pc, #216]	; (80066a4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80065cc:	2201      	movs	r2, #1
 80065ce:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);  		//if the value is captured change the polarity to falling edge
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6a1a      	ldr	r2, [r3, #32]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065de:	621a      	str	r2, [r3, #32]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6a1a      	ldr	r2, [r3, #32]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0220 	orr.w	r2, r2, #32
 80065ee:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);  //change the polarity back to rising edge
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);											//disable the TIM1 interrupt
		}
	}
}
 80065f0:	e04b      	b.n	800668a <HAL_TIM_IC_CaptureCallback+0x12a>
		else if (capturedOne==1)   // if the first value is captured
 80065f2:	4b2c      	ldr	r3, [pc, #176]	; (80066a4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d147      	bne.n	800668a <HAL_TIM_IC_CaptureCallback+0x12a>
			secondValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 80065fa:	2104      	movs	r1, #4
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7fd fae7 	bl	8003bd0 <HAL_TIM_ReadCapturedValue>
 8006602:	4603      	mov	r3, r0
 8006604:	4a29      	ldr	r2, [pc, #164]	; (80066ac <HAL_TIM_IC_CaptureCallback+0x14c>)
 8006606:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  							// reset the counter
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2200      	movs	r2, #0
 800660e:	625a      	str	r2, [r3, #36]	; 0x24
			sub = secondValue-firstValue;				//subtraction of the two values
 8006610:	4b26      	ldr	r3, [pc, #152]	; (80066ac <HAL_TIM_IC_CaptureCallback+0x14c>)
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	4b24      	ldr	r3, [pc, #144]	; (80066a8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	4a25      	ldr	r2, [pc, #148]	; (80066b0 <HAL_TIM_IC_CaptureCallback+0x150>)
 800661c:	6013      	str	r3, [r2, #0]
			distance = sub * .034/2;			//time in us * speed of sound in air in cm / 2 (the sound needs to go back to the sensor)
 800661e:	4b24      	ldr	r3, [pc, #144]	; (80066b0 <HAL_TIM_IC_CaptureCallback+0x150>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4618      	mov	r0, r3
 8006624:	f7f9 ff7e 	bl	8000524 <__aeabi_ui2d>
 8006628:	a31b      	add	r3, pc, #108	; (adr r3, 8006698 <HAL_TIM_IC_CaptureCallback+0x138>)
 800662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662e:	f7f9 fff3 	bl	8000618 <__aeabi_dmul>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4610      	mov	r0, r2
 8006638:	4619      	mov	r1, r3
 800663a:	f04f 0200 	mov.w	r2, #0
 800663e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006642:	f7fa f913 	bl	800086c <__aeabi_ddiv>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4610      	mov	r0, r2
 800664c:	4619      	mov	r1, r3
 800664e:	f7fa fabb 	bl	8000bc8 <__aeabi_d2f>
 8006652:	4603      	mov	r3, r0
 8006654:	4a17      	ldr	r2, [pc, #92]	; (80066b4 <HAL_TIM_IC_CaptureCallback+0x154>)
 8006656:	6013      	str	r3, [r2, #0]
			capturedOne = 0; 					// set the capture value to 0
 8006658:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <HAL_TIM_IC_CaptureCallback+0x144>)
 800665a:	2200      	movs	r2, #0
 800665c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);  //change the polarity back to rising edge
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6a1a      	ldr	r2, [r3, #32]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800666c:	621a      	str	r2, [r3, #32]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6a12      	ldr	r2, [r2, #32]
 8006678:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);											//disable the TIM1 interrupt
 800667a:	4b0f      	ldr	r3, [pc, #60]	; (80066b8 <HAL_TIM_IC_CaptureCallback+0x158>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	4b0d      	ldr	r3, [pc, #52]	; (80066b8 <HAL_TIM_IC_CaptureCallback+0x158>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0204 	bic.w	r2, r2, #4
 8006688:	60da      	str	r2, [r3, #12]
}
 800668a:	bf00      	nop
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	f3af 8000 	nop.w
 8006698:	b020c49c 	.word	0xb020c49c
 800669c:	3fa16872 	.word	0x3fa16872
 80066a0:	40000400 	.word	0x40000400
 80066a4:	20004400 	.word	0x20004400
 80066a8:	200043f4 	.word	0x200043f4
 80066ac:	200043f8 	.word	0x200043f8
 80066b0:	200043fc 	.word	0x200043fc
 80066b4:	20004404 	.word	0x20004404
 80066b8:	2000452c 	.word	0x2000452c

080066bc <HAL_UART_RxCpltCallback>:
		HAL_UART_Transmit(&huart5, (uint8_t *)data_arr, sizeof(data_arr), 100);
		HAL_Delay(1500);
	}
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART5)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a08      	ldr	r2, [pc, #32]	; (80066ec <HAL_UART_RxCpltCallback+0x30>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d10a      	bne.n	80066e4 <HAL_UART_RxCpltCallback+0x28>
	{
		HAL_UART_Transmit(&huart3, pc_res_packet, sizeof(pc_res_packet), 100);
 80066ce:	2364      	movs	r3, #100	; 0x64
 80066d0:	2205      	movs	r2, #5
 80066d2:	4907      	ldr	r1, [pc, #28]	; (80066f0 <HAL_UART_RxCpltCallback+0x34>)
 80066d4:	4807      	ldr	r0, [pc, #28]	; (80066f4 <HAL_UART_RxCpltCallback+0x38>)
 80066d6:	f7fd fe96 	bl	8004406 <HAL_UART_Transmit>

	    HAL_UART_Receive_IT(&huart5, pc_res_packet, sizeof(pc_res_packet));
 80066da:	2205      	movs	r2, #5
 80066dc:	4904      	ldr	r1, [pc, #16]	; (80066f0 <HAL_UART_RxCpltCallback+0x34>)
 80066de:	4806      	ldr	r0, [pc, #24]	; (80066f8 <HAL_UART_RxCpltCallback+0x3c>)
 80066e0:	f7fd ff23 	bl	800452a <HAL_UART_Receive_IT>


	}
}
 80066e4:	bf00      	nop
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	40005000 	.word	0x40005000
 80066f0:	20004408 	.word	0x20004408
 80066f4:	20004420 	.word	0x20004420
 80066f8:	20004578 	.word	0x20004578

080066fc <initHx711>:

hx711_t hx711_arr[HX711_NUM][2];


void initHx711(void)
{
 80066fc:	b5b0      	push	{r4, r5, r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af02      	add	r7, sp, #8
	// init hx711
	// it takes time(5s)
	for(uint8_t i=0; i<HX711_NUM; i++){
 8006702:	2300      	movs	r3, #0
 8006704:	71fb      	strb	r3, [r7, #7]
 8006706:	e09b      	b.n	8006840 <initHx711+0x144>
		hx711_init(&hx711_arr[i][CHANNEL_A], HX711_GPIO_Port[i][SCK], HX711_Pin[i][SCK],  HX711_GPIO_Port[i][DOUT], HX711_Pin[i][DOUT], 'A');
 8006708:	79fa      	ldrb	r2, [r7, #7]
 800670a:	4613      	mov	r3, r2
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	4413      	add	r3, r2
 8006710:	011b      	lsls	r3, r3, #4
 8006712:	4a51      	ldr	r2, [pc, #324]	; (8006858 <initHx711+0x15c>)
 8006714:	1898      	adds	r0, r3, r2
 8006716:	79fb      	ldrb	r3, [r7, #7]
 8006718:	4a50      	ldr	r2, [pc, #320]	; (800685c <initHx711+0x160>)
 800671a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	4a4f      	ldr	r2, [pc, #316]	; (8006860 <initHx711+0x164>)
 8006722:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	4c4c      	ldr	r4, [pc, #304]	; (800685c <initHx711+0x160>)
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	4423      	add	r3, r4
 800672e:	685c      	ldr	r4, [r3, #4]
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	4d4b      	ldr	r5, [pc, #300]	; (8006860 <initHx711+0x164>)
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	442b      	add	r3, r5
 8006738:	885b      	ldrh	r3, [r3, #2]
 800673a:	2541      	movs	r5, #65	; 0x41
 800673c:	9501      	str	r5, [sp, #4]
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	4623      	mov	r3, r4
 8006742:	f000 f930 	bl	80069a6 <hx711_init>
		hx711_coef_set(&hx711_arr[i][CHANNEL_A], hx711_cali_factor[i][CHANNEL_A]); // read afer calibration
 8006746:	79fa      	ldrb	r2, [r7, #7]
 8006748:	4613      	mov	r3, r2
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	4413      	add	r3, r2
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	4a41      	ldr	r2, [pc, #260]	; (8006858 <initHx711+0x15c>)
 8006752:	1899      	adds	r1, r3, r2
 8006754:	79fa      	ldrb	r2, [r7, #7]
 8006756:	4843      	ldr	r0, [pc, #268]	; (8006864 <initHx711+0x168>)
 8006758:	4613      	mov	r3, r2
 800675a:	005b      	lsls	r3, r3, #1
 800675c:	4413      	add	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4403      	add	r3, r0
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	ee07 3a90 	vmov	s15, r3
 8006768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800676c:	eeb0 0a67 	vmov.f32	s0, s15
 8006770:	4608      	mov	r0, r1
 8006772:	f000 faac 	bl	8006cce <hx711_coef_set>
		hx711_tare(&hx711_arr[i][CHANNEL_A], 10);
 8006776:	79fa      	ldrb	r2, [r7, #7]
 8006778:	4613      	mov	r3, r2
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	4413      	add	r3, r2
 800677e:	011b      	lsls	r3, r3, #4
 8006780:	4a35      	ldr	r2, [pc, #212]	; (8006858 <initHx711+0x15c>)
 8006782:	4413      	add	r3, r2
 8006784:	210a      	movs	r1, #10
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fa16 	bl	8006bb8 <hx711_tare>
		printf("a completed");
 800678c:	4836      	ldr	r0, [pc, #216]	; (8006868 <initHx711+0x16c>)
 800678e:	f001 f903 	bl	8007998 <iprintf>
		if(hx711_cali_factor[i][CHANNEL_B] != 0){
 8006792:	79fa      	ldrb	r2, [r7, #7]
 8006794:	4933      	ldr	r1, [pc, #204]	; (8006864 <initHx711+0x168>)
 8006796:	4613      	mov	r3, r2
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	440b      	add	r3, r1
 80067a0:	3304      	adds	r3, #4
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d048      	beq.n	800683a <initHx711+0x13e>
			hx711_init(&hx711_arr[i][CHANNEL_B],  HX711_GPIO_Port[i][SCK], HX711_Pin[i][SCK],  HX711_GPIO_Port[i][DOUT], HX711_Pin[i][DOUT], 'B');
 80067a8:	79fa      	ldrb	r2, [r7, #7]
 80067aa:	4613      	mov	r3, r2
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	4413      	add	r3, r2
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	3318      	adds	r3, #24
 80067b4:	4a28      	ldr	r2, [pc, #160]	; (8006858 <initHx711+0x15c>)
 80067b6:	1898      	adds	r0, r3, r2
 80067b8:	79fb      	ldrb	r3, [r7, #7]
 80067ba:	4a28      	ldr	r2, [pc, #160]	; (800685c <initHx711+0x160>)
 80067bc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	4a27      	ldr	r2, [pc, #156]	; (8006860 <initHx711+0x164>)
 80067c4:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	4c24      	ldr	r4, [pc, #144]	; (800685c <initHx711+0x160>)
 80067cc:	00db      	lsls	r3, r3, #3
 80067ce:	4423      	add	r3, r4
 80067d0:	685c      	ldr	r4, [r3, #4]
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	4d22      	ldr	r5, [pc, #136]	; (8006860 <initHx711+0x164>)
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	442b      	add	r3, r5
 80067da:	885b      	ldrh	r3, [r3, #2]
 80067dc:	2542      	movs	r5, #66	; 0x42
 80067de:	9501      	str	r5, [sp, #4]
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	4623      	mov	r3, r4
 80067e4:	f000 f8df 	bl	80069a6 <hx711_init>
			hx711_coef_set(&hx711_arr[i][CHANNEL_B], hx711_cali_factor[i][CHANNEL_B]); // read afer calibration
 80067e8:	79fa      	ldrb	r2, [r7, #7]
 80067ea:	4613      	mov	r3, r2
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	4413      	add	r3, r2
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	3318      	adds	r3, #24
 80067f4:	4a18      	ldr	r2, [pc, #96]	; (8006858 <initHx711+0x15c>)
 80067f6:	1899      	adds	r1, r3, r2
 80067f8:	79fa      	ldrb	r2, [r7, #7]
 80067fa:	481a      	ldr	r0, [pc, #104]	; (8006864 <initHx711+0x168>)
 80067fc:	4613      	mov	r3, r2
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	4413      	add	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4403      	add	r3, r0
 8006806:	3304      	adds	r3, #4
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	ee07 3a90 	vmov	s15, r3
 800680e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006812:	eeb0 0a67 	vmov.f32	s0, s15
 8006816:	4608      	mov	r0, r1
 8006818:	f000 fa59 	bl	8006cce <hx711_coef_set>
			hx711_tare(&hx711_arr[i][CHANNEL_B], 10);
 800681c:	79fa      	ldrb	r2, [r7, #7]
 800681e:	4613      	mov	r3, r2
 8006820:	005b      	lsls	r3, r3, #1
 8006822:	4413      	add	r3, r2
 8006824:	011b      	lsls	r3, r3, #4
 8006826:	3318      	adds	r3, #24
 8006828:	4a0b      	ldr	r2, [pc, #44]	; (8006858 <initHx711+0x15c>)
 800682a:	4413      	add	r3, r2
 800682c:	210a      	movs	r1, #10
 800682e:	4618      	mov	r0, r3
 8006830:	f000 f9c2 	bl	8006bb8 <hx711_tare>
			printf("b completed");
 8006834:	480d      	ldr	r0, [pc, #52]	; (800686c <initHx711+0x170>)
 8006836:	f001 f8af 	bl	8007998 <iprintf>
	for(uint8_t i=0; i<HX711_NUM; i++){
 800683a:	79fb      	ldrb	r3, [r7, #7]
 800683c:	3301      	adds	r3, #1
 800683e:	71fb      	strb	r3, [r7, #7]
 8006840:	79fb      	ldrb	r3, [r7, #7]
 8006842:	2b08      	cmp	r3, #8
 8006844:	f67f af60 	bls.w	8006708 <initHx711+0xc>
		}
	}
	printf("hx711 initialization finished!\n");
 8006848:	4809      	ldr	r0, [pc, #36]	; (8006870 <initHx711+0x174>)
 800684a:	f001 f92b 	bl	8007aa4 <puts>
}
 800684e:	bf00      	nop
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bdb0      	pop	{r4, r5, r7, pc}
 8006856:	bf00      	nop
 8006858:	20004784 	.word	0x20004784
 800685c:	2000007c 	.word	0x2000007c
 8006860:	200000c4 	.word	0x200000c4
 8006864:	20000010 	.word	0x20000010
 8006868:	0800987c 	.word	0x0800987c
 800686c:	08009888 	.word	0x08009888
 8006870:	08009894 	.word	0x08009894

08006874 <runHx711>:

void runHx711(uint8_t i)
{
 8006874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006876:	b085      	sub	sp, #20
 8006878:	af02      	add	r7, sp, #8
 800687a:	4603      	mov	r3, r0
 800687c:	71fb      	strb	r3, [r7, #7]
	hx711_weight_arr[i][CHANNEL_A] = (int)(hx711_weight(&hx711_arr[i][CHANNEL_A], 10));
 800687e:	79fa      	ldrb	r2, [r7, #7]
 8006880:	4613      	mov	r3, r2
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	4413      	add	r3, r2
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	4a29      	ldr	r2, [pc, #164]	; (8006930 <runHx711+0xbc>)
 800688a:	4413      	add	r3, r2
 800688c:	210a      	movs	r1, #10
 800688e:	4618      	mov	r0, r3
 8006890:	f000 f9ce 	bl	8006c30 <hx711_weight>
 8006894:	eef0 7a40 	vmov.f32	s15, s0
 8006898:	79fb      	ldrb	r3, [r7, #7]
 800689a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800689e:	ee17 1a90 	vmov	r1, s15
 80068a2:	4a24      	ldr	r2, [pc, #144]	; (8006934 <runHx711+0xc0>)
 80068a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	hx711_weight_arr[i][CHANNEL_B] = (int)(hx711_weight(&hx711_arr[i][CHANNEL_B], 10));
 80068a8:	79fa      	ldrb	r2, [r7, #7]
 80068aa:	4613      	mov	r3, r2
 80068ac:	005b      	lsls	r3, r3, #1
 80068ae:	4413      	add	r3, r2
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	3318      	adds	r3, #24
 80068b4:	4a1e      	ldr	r2, [pc, #120]	; (8006930 <runHx711+0xbc>)
 80068b6:	4413      	add	r3, r2
 80068b8:	210a      	movs	r1, #10
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 f9b8 	bl	8006c30 <hx711_weight>
 80068c0:	eef0 7a40 	vmov.f32	s15, s0
 80068c4:	79fb      	ldrb	r3, [r7, #7]
 80068c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068ca:	ee17 1a90 	vmov	r1, s15
 80068ce:	4a19      	ldr	r2, [pc, #100]	; (8006934 <runHx711+0xc0>)
 80068d0:	00db      	lsls	r3, r3, #3
 80068d2:	4413      	add	r3, r2
 80068d4:	6059      	str	r1, [r3, #4]

//	printf("[%d th] A:%d g\n", i, hx711_weight_arr[i][CHANNEL_A]);
//	printf("[%d th] B:%d g\n", i, hx711_weight_arr[i][CHANNEL_B]);

	printf("[%d th] A:%d g, B:%d g ====> %d g\n\n", i, hx711_weight_arr[i][CHANNEL_A], hx711_weight_arr[i][CHANNEL_B], hx711_weight_arr[i][CHANNEL_A]+hx711_weight_arr[i][CHANNEL_B]+hx711_cali_factor[i][ZERO_VAL]);
 80068d6:	79f8      	ldrb	r0, [r7, #7]
 80068d8:	79fb      	ldrb	r3, [r7, #7]
 80068da:	4a16      	ldr	r2, [pc, #88]	; (8006934 <runHx711+0xc0>)
 80068dc:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	4a14      	ldr	r2, [pc, #80]	; (8006934 <runHx711+0xc0>)
 80068e4:	00db      	lsls	r3, r3, #3
 80068e6:	4413      	add	r3, r2
 80068e8:	685d      	ldr	r5, [r3, #4]
 80068ea:	79fb      	ldrb	r3, [r7, #7]
 80068ec:	4a11      	ldr	r2, [pc, #68]	; (8006934 <runHx711+0xc0>)
 80068ee:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80068f2:	79fb      	ldrb	r3, [r7, #7]
 80068f4:	490f      	ldr	r1, [pc, #60]	; (8006934 <runHx711+0xc0>)
 80068f6:	00db      	lsls	r3, r3, #3
 80068f8:	440b      	add	r3, r1
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	18d1      	adds	r1, r2, r3
 80068fe:	79fa      	ldrb	r2, [r7, #7]
 8006900:	4e0d      	ldr	r6, [pc, #52]	; (8006938 <runHx711+0xc4>)
 8006902:	4613      	mov	r3, r2
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	4413      	add	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4433      	add	r3, r6
 800690c:	3308      	adds	r3, #8
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	440b      	add	r3, r1
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	462b      	mov	r3, r5
 8006916:	4622      	mov	r2, r4
 8006918:	4601      	mov	r1, r0
 800691a:	4808      	ldr	r0, [pc, #32]	; (800693c <runHx711+0xc8>)
 800691c:	f001 f83c 	bl	8007998 <iprintf>

	HAL_Delay(100);
 8006920:	2064      	movs	r0, #100	; 0x64
 8006922:	f7fb fc55 	bl	80021d0 <HAL_Delay>
}
 8006926:	bf00      	nop
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800692e:	bf00      	nop
 8006930:	20004784 	.word	0x20004784
 8006934:	2000473c 	.word	0x2000473c
 8006938:	20000010 	.word	0x20000010
 800693c:	080098b4 	.word	0x080098b4

08006940 <hx711_delay_us>:
#define hx711_delay(x)    HAL_Delay(x)
#endif

//#############################################################################################
void hx711_delay_us(void)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
  uint32_t delay = _HX711_DELAY_US_LOOP;
 8006946:	2304      	movs	r3, #4
 8006948:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 800694a:	e002      	b.n	8006952 <hx711_delay_us+0x12>
  {
    delay--;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3b01      	subs	r3, #1
 8006950:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1f9      	bne.n	800694c <hx711_delay_us+0xc>
//    __nop(); __nop(); __nop(); __nop();
  }
}
 8006958:	bf00      	nop
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 800696e:	e002      	b.n	8006976 <hx711_lock+0x10>
    hx711_delay(1);
 8006970:	2001      	movs	r0, #1
 8006972:	f7fb fc2d 	bl	80021d0 <HAL_Delay>
  while (hx711->lock)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	7d1b      	ldrb	r3, [r3, #20]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1f8      	bne.n	8006970 <hx711_lock+0xa>
  hx711->lock = 1;      
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	751a      	strb	r2, [r3, #20]
}
 8006984:	bf00      	nop
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	751a      	strb	r2, [r3, #20]
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin, char channel)
//void hx711_init(hx711_t *hx711, uint8_t hx711_idx, char channel)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b08a      	sub	sp, #40	; 0x28
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	60f8      	str	r0, [r7, #12]
 80069ae:	60b9      	str	r1, [r7, #8]
 80069b0:	603b      	str	r3, [r7, #0]
 80069b2:	4613      	mov	r3, r2
 80069b4:	80fb      	strh	r3, [r7, #6]

  hx711->clk_gpio = clk_gpio;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	88fa      	ldrh	r2, [r7, #6]
 80069c0:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80069cc:	815a      	strh	r2, [r3, #10]
  hx711->channel = channel;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80069d4:	755a      	strb	r2, [r3, #21]

  GPIO_InitTypeDef  gpio = {0};
 80069d6:	f107 0314 	add.w	r3, r7, #20
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	605a      	str	r2, [r3, #4]
 80069e0:	609a      	str	r2, [r3, #8]
 80069e2:	60da      	str	r2, [r3, #12]
 80069e4:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80069e6:	2301      	movs	r3, #1
 80069e8:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80069ee:	2302      	movs	r3, #2
 80069f0:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 80069f2:	88fb      	ldrh	r3, [r7, #6]
 80069f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 80069f6:	f107 0314 	add.w	r3, r7, #20
 80069fa:	4619      	mov	r1, r3
 80069fc:	68b8      	ldr	r0, [r7, #8]
 80069fe:	f7fb fd7f 	bl	8002500 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8006a02:	2300      	movs	r3, #0
 8006a04:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8006a06:	2301      	movs	r3, #1
 8006a08:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8006a0e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006a10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8006a12:	f107 0314 	add.w	r3, r7, #20
 8006a16:	4619      	mov	r1, r3
 8006a18:	6838      	ldr	r0, [r7, #0]
 8006a1a:	f7fb fd71 	bl	8002500 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6818      	ldr	r0, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	891b      	ldrh	r3, [r3, #8]
 8006a26:	2201      	movs	r2, #1
 8006a28:	4619      	mov	r1, r3
 8006a2a:	f7fb ff2d 	bl	8002888 <HAL_GPIO_WritePin>
  hx711_delay(10);
 8006a2e:	200a      	movs	r0, #10
 8006a30:	f7fb fbce 	bl	80021d0 <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6818      	ldr	r0, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	891b      	ldrh	r3, [r3, #8]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	4619      	mov	r1, r3
 8006a40:	f7fb ff22 	bl	8002888 <HAL_GPIO_WritePin>
  hx711_delay(10);  
 8006a44:	200a      	movs	r0, #10
 8006a46:	f7fb fbc3 	bl	80021d0 <HAL_Delay>
  hx711_value(hx711);
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f000 f80a 	bl	8006a64 <hx711_value>
  hx711_value(hx711);
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 f807 	bl	8006a64 <hx711_value>
  hx711_unlock(hx711); 
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f7ff ff98 	bl	800698c <hx711_unlock>
}
 8006a5c:	bf00      	nop
 8006a5e:	3728      	adds	r7, #40	; 0x28
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8006a70:	f7fb fba2 	bl	80021b8 <HAL_GetTick>
 8006a74:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8006a76:	e00b      	b.n	8006a90 <hx711_value+0x2c>
  {
    hx711_delay(1);
 8006a78:	2001      	movs	r0, #1
 8006a7a:	f7fb fba9 	bl	80021d0 <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 8006a7e:	f7fb fb9b 	bl	80021b8 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b96      	cmp	r3, #150	; 0x96
 8006a8a:	d901      	bls.n	8006a90 <hx711_value+0x2c>
      return 0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	e08f      	b.n	8006bb0 <hx711_value+0x14c>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	895b      	ldrh	r3, [r3, #10]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	f7fb fedc 	bl	8002858 <HAL_GPIO_ReadPin>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d0e8      	beq.n	8006a78 <hx711_value+0x14>
  }
  switch(hx711->channel){
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	7d5b      	ldrb	r3, [r3, #21]
 8006aaa:	2b41      	cmp	r3, #65	; 0x41
 8006aac:	d034      	beq.n	8006b18 <hx711_value+0xb4>
 8006aae:	2b42      	cmp	r3, #66	; 0x42
 8006ab0:	d133      	bne.n	8006b1a <hx711_value+0xb6>
//	  hx711_delay_us();
//	  if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
//		data ++;
//

	  for(int8_t i=0; i<2 ; i++)
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	74fb      	strb	r3, [r7, #19]
 8006ab6:	e02a      	b.n	8006b0e <hx711_value+0xaa>
	  {
	    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6818      	ldr	r0, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	891b      	ldrh	r3, [r3, #8]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	f7fb fee0 	bl	8002888 <HAL_GPIO_WritePin>
	    hx711_delay_us();
 8006ac8:	f7ff ff3a 	bl	8006940 <hx711_delay_us>
	    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6818      	ldr	r0, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	891b      	ldrh	r3, [r3, #8]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	f7fb fed6 	bl	8002888 <HAL_GPIO_WritePin>
	    hx711_delay_us();
 8006adc:	f7ff ff30 	bl	8006940 <hx711_delay_us>
	    data = data << 1;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	617b      	str	r3, [r7, #20]
	    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	895b      	ldrh	r3, [r3, #10]
 8006aee:	4619      	mov	r1, r3
 8006af0:	4610      	mov	r0, r2
 8006af2:	f7fb feb1 	bl	8002858 <HAL_GPIO_ReadPin>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d102      	bne.n	8006b02 <hx711_value+0x9e>
	      data ++;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	3301      	adds	r3, #1
 8006b00:	617b      	str	r3, [r7, #20]
	  for(int8_t i=0; i<2 ; i++)
 8006b02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	3301      	adds	r3, #1
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	74fb      	strb	r3, [r7, #19]
 8006b0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	ddd0      	ble.n	8006ab8 <hx711_value+0x54>
	  }
	  break;
 8006b16:	e000      	b.n	8006b1a <hx711_value+0xb6>
	  break;
 8006b18:	bf00      	nop
  }
  for(int8_t i=0; i<24 ; i++)
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	74bb      	strb	r3, [r7, #18]
 8006b1e:	e02a      	b.n	8006b76 <hx711_value+0x112>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6818      	ldr	r0, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	891b      	ldrh	r3, [r3, #8]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	f7fb feac 	bl	8002888 <HAL_GPIO_WritePin>
    hx711_delay_us();
 8006b30:	f7ff ff06 	bl	8006940 <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6818      	ldr	r0, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	891b      	ldrh	r3, [r3, #8]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	4619      	mov	r1, r3
 8006b40:	f7fb fea2 	bl	8002888 <HAL_GPIO_WritePin>
    hx711_delay_us();
 8006b44:	f7ff fefc 	bl	8006940 <hx711_delay_us>
    data = data << 1;    
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	005b      	lsls	r3, r3, #1
 8006b4c:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	895b      	ldrh	r3, [r3, #10]
 8006b56:	4619      	mov	r1, r3
 8006b58:	4610      	mov	r0, r2
 8006b5a:	f7fb fe7d 	bl	8002858 <HAL_GPIO_ReadPin>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d102      	bne.n	8006b6a <hx711_value+0x106>
      data ++;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	3301      	adds	r3, #1
 8006b68:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 8006b6a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	3301      	adds	r3, #1
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	74bb      	strb	r3, [r7, #18]
 8006b76:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8006b7a:	2b17      	cmp	r3, #23
 8006b7c:	ddd0      	ble.n	8006b20 <hx711_value+0xbc>
  }
  data = data ^ 0x800000; 
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8006b84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6818      	ldr	r0, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	891b      	ldrh	r3, [r3, #8]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	4619      	mov	r1, r3
 8006b92:	f7fb fe79 	bl	8002888 <HAL_GPIO_WritePin>
  hx711_delay_us();
 8006b96:	f7ff fed3 	bl	8006940 <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6818      	ldr	r0, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	891b      	ldrh	r3, [r3, #8]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	f7fb fe6f 	bl	8002888 <HAL_GPIO_WritePin>
  hx711_delay_us();
 8006baa:	f7ff fec9 	bl	8006940 <hx711_delay_us>
  return data;    
 8006bae:	697b      	ldr	r3, [r7, #20]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <hx711_tare>:
  hx711_unlock(hx711);
  return answer;
}
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample)
{
 8006bb8:	b5b0      	push	{r4, r5, r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7ff fece 	bl	8006966 <hx711_lock>
  int64_t  ave = 0;
 8006bca:	f04f 0200 	mov.w	r2, #0
 8006bce:	f04f 0300 	mov.w	r3, #0
 8006bd2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	81fb      	strh	r3, [r7, #14]
 8006bda:	e013      	b.n	8006c04 <hx711_tare+0x4c>
  {
    ave += hx711_value(hx711);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7ff ff41 	bl	8006a64 <hx711_value>
 8006be2:	4603      	mov	r3, r0
 8006be4:	461a      	mov	r2, r3
 8006be6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006bea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006bee:	1884      	adds	r4, r0, r2
 8006bf0:	eb41 0503 	adc.w	r5, r1, r3
 8006bf4:	e9c7 4504 	strd	r4, r5, [r7, #16]
    hx711_delay(5);
 8006bf8:	2005      	movs	r0, #5
 8006bfa:	f7fb fae9 	bl	80021d0 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8006bfe:	89fb      	ldrh	r3, [r7, #14]
 8006c00:	3301      	adds	r3, #1
 8006c02:	81fb      	strh	r3, [r7, #14]
 8006c04:	89fa      	ldrh	r2, [r7, #14]
 8006c06:	887b      	ldrh	r3, [r7, #2]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d3e7      	bcc.n	8006bdc <hx711_tare+0x24>
  }
  hx711->offset = (int32_t)(ave / sample);
 8006c0c:	887a      	ldrh	r2, [r7, #2]
 8006c0e:	f04f 0300 	mov.w	r3, #0
 8006c12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006c16:	f7fa f827 	bl	8000c68 <__aeabi_ldivmod>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	60da      	str	r2, [r3, #12]
  hx711_unlock(hx711);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff feb2 	bl	800698c <hx711_unlock>
}
 8006c28:	bf00      	nop
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bdb0      	pop	{r4, r5, r7, pc}

08006c30 <hx711_weight>:
  hx711->coef = (load_raw - noload_raw) / scale;  
  hx711_unlock(hx711);
}
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 8006c30:	b5b0      	push	{r4, r5, r7, lr}
 8006c32:	b088      	sub	sp, #32
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7ff fe92 	bl	8006966 <hx711_lock>
  int64_t  ave = 0;
 8006c42:	f04f 0200 	mov.w	r2, #0
 8006c46:	f04f 0300 	mov.w	r3, #0
 8006c4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 8006c4e:	2300      	movs	r3, #0
 8006c50:	82fb      	strh	r3, [r7, #22]
 8006c52:	e013      	b.n	8006c7c <hx711_weight+0x4c>
  {
    ave += hx711_value(hx711);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff ff05 	bl	8006a64 <hx711_value>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006c62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006c66:	1884      	adds	r4, r0, r2
 8006c68:	eb41 0503 	adc.w	r5, r1, r3
 8006c6c:	e9c7 4506 	strd	r4, r5, [r7, #24]
    hx711_delay(5);
 8006c70:	2005      	movs	r0, #5
 8006c72:	f7fb faad 	bl	80021d0 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8006c76:	8afb      	ldrh	r3, [r7, #22]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	82fb      	strh	r3, [r7, #22]
 8006c7c:	8afa      	ldrh	r2, [r7, #22]
 8006c7e:	887b      	ldrh	r3, [r7, #2]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d3e7      	bcc.n	8006c54 <hx711_weight+0x24>
  }
  int32_t data = (int32_t)(ave / sample);
 8006c84:	887a      	ldrh	r2, [r7, #2]
 8006c86:	f04f 0300 	mov.w	r3, #0
 8006c8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006c8e:	f7f9 ffeb 	bl	8000c68 <__aeabi_ldivmod>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	4613      	mov	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]
  float answer =  (data - hx711->offset) / hx711->coef;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	ee07 3a90 	vmov	s15, r3
 8006ca6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	ed93 7a04 	vldr	s14, [r3, #16]
 8006cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cb4:	edc7 7a03 	vstr	s15, [r7, #12]
  hx711_unlock(hx711);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7ff fe67 	bl	800698c <hx711_unlock>
  return answer;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	ee07 3a90 	vmov	s15, r3
}
 8006cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8006cc8:	3720      	adds	r7, #32
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bdb0      	pop	{r4, r5, r7, pc}

08006cce <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coef)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	ed87 0a00 	vstr	s0, [r7]
  hx711->coef = coef;  
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	611a      	str	r2, [r3, #16]
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <__errno>:
 8006cec:	4b01      	ldr	r3, [pc, #4]	; (8006cf4 <__errno+0x8>)
 8006cee:	6818      	ldr	r0, [r3, #0]
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	200000e8 	.word	0x200000e8

08006cf8 <std>:
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	b510      	push	{r4, lr}
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8006d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d06:	6083      	str	r3, [r0, #8]
 8006d08:	8181      	strh	r1, [r0, #12]
 8006d0a:	6643      	str	r3, [r0, #100]	; 0x64
 8006d0c:	81c2      	strh	r2, [r0, #14]
 8006d0e:	6183      	str	r3, [r0, #24]
 8006d10:	4619      	mov	r1, r3
 8006d12:	2208      	movs	r2, #8
 8006d14:	305c      	adds	r0, #92	; 0x5c
 8006d16:	f000 f923 	bl	8006f60 <memset>
 8006d1a:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <std+0x38>)
 8006d1c:	6263      	str	r3, [r4, #36]	; 0x24
 8006d1e:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <std+0x3c>)
 8006d20:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d22:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <std+0x40>)
 8006d24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d26:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <std+0x44>)
 8006d28:	6224      	str	r4, [r4, #32]
 8006d2a:	6323      	str	r3, [r4, #48]	; 0x30
 8006d2c:	bd10      	pop	{r4, pc}
 8006d2e:	bf00      	nop
 8006d30:	08007ad5 	.word	0x08007ad5
 8006d34:	08007af7 	.word	0x08007af7
 8006d38:	08007b2f 	.word	0x08007b2f
 8006d3c:	08007b53 	.word	0x08007b53

08006d40 <_cleanup_r>:
 8006d40:	4901      	ldr	r1, [pc, #4]	; (8006d48 <_cleanup_r+0x8>)
 8006d42:	f000 b8af 	b.w	8006ea4 <_fwalk_reent>
 8006d46:	bf00      	nop
 8006d48:	08008b1d 	.word	0x08008b1d

08006d4c <__sfmoreglue>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	1e4a      	subs	r2, r1, #1
 8006d50:	2568      	movs	r5, #104	; 0x68
 8006d52:	4355      	muls	r5, r2
 8006d54:	460e      	mov	r6, r1
 8006d56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d5a:	f000 f959 	bl	8007010 <_malloc_r>
 8006d5e:	4604      	mov	r4, r0
 8006d60:	b140      	cbz	r0, 8006d74 <__sfmoreglue+0x28>
 8006d62:	2100      	movs	r1, #0
 8006d64:	e9c0 1600 	strd	r1, r6, [r0]
 8006d68:	300c      	adds	r0, #12
 8006d6a:	60a0      	str	r0, [r4, #8]
 8006d6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d70:	f000 f8f6 	bl	8006f60 <memset>
 8006d74:	4620      	mov	r0, r4
 8006d76:	bd70      	pop	{r4, r5, r6, pc}

08006d78 <__sfp_lock_acquire>:
 8006d78:	4801      	ldr	r0, [pc, #4]	; (8006d80 <__sfp_lock_acquire+0x8>)
 8006d7a:	f000 b8d8 	b.w	8006f2e <__retarget_lock_acquire_recursive>
 8006d7e:	bf00      	nop
 8006d80:	2000493c 	.word	0x2000493c

08006d84 <__sfp_lock_release>:
 8006d84:	4801      	ldr	r0, [pc, #4]	; (8006d8c <__sfp_lock_release+0x8>)
 8006d86:	f000 b8d3 	b.w	8006f30 <__retarget_lock_release_recursive>
 8006d8a:	bf00      	nop
 8006d8c:	2000493c 	.word	0x2000493c

08006d90 <__sinit_lock_acquire>:
 8006d90:	4801      	ldr	r0, [pc, #4]	; (8006d98 <__sinit_lock_acquire+0x8>)
 8006d92:	f000 b8cc 	b.w	8006f2e <__retarget_lock_acquire_recursive>
 8006d96:	bf00      	nop
 8006d98:	20004937 	.word	0x20004937

08006d9c <__sinit_lock_release>:
 8006d9c:	4801      	ldr	r0, [pc, #4]	; (8006da4 <__sinit_lock_release+0x8>)
 8006d9e:	f000 b8c7 	b.w	8006f30 <__retarget_lock_release_recursive>
 8006da2:	bf00      	nop
 8006da4:	20004937 	.word	0x20004937

08006da8 <__sinit>:
 8006da8:	b510      	push	{r4, lr}
 8006daa:	4604      	mov	r4, r0
 8006dac:	f7ff fff0 	bl	8006d90 <__sinit_lock_acquire>
 8006db0:	69a3      	ldr	r3, [r4, #24]
 8006db2:	b11b      	cbz	r3, 8006dbc <__sinit+0x14>
 8006db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006db8:	f7ff bff0 	b.w	8006d9c <__sinit_lock_release>
 8006dbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006dc0:	6523      	str	r3, [r4, #80]	; 0x50
 8006dc2:	4b13      	ldr	r3, [pc, #76]	; (8006e10 <__sinit+0x68>)
 8006dc4:	4a13      	ldr	r2, [pc, #76]	; (8006e14 <__sinit+0x6c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006dca:	42a3      	cmp	r3, r4
 8006dcc:	bf04      	itt	eq
 8006dce:	2301      	moveq	r3, #1
 8006dd0:	61a3      	streq	r3, [r4, #24]
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f000 f820 	bl	8006e18 <__sfp>
 8006dd8:	6060      	str	r0, [r4, #4]
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f000 f81c 	bl	8006e18 <__sfp>
 8006de0:	60a0      	str	r0, [r4, #8]
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 f818 	bl	8006e18 <__sfp>
 8006de8:	2200      	movs	r2, #0
 8006dea:	60e0      	str	r0, [r4, #12]
 8006dec:	2104      	movs	r1, #4
 8006dee:	6860      	ldr	r0, [r4, #4]
 8006df0:	f7ff ff82 	bl	8006cf8 <std>
 8006df4:	68a0      	ldr	r0, [r4, #8]
 8006df6:	2201      	movs	r2, #1
 8006df8:	2109      	movs	r1, #9
 8006dfa:	f7ff ff7d 	bl	8006cf8 <std>
 8006dfe:	68e0      	ldr	r0, [r4, #12]
 8006e00:	2202      	movs	r2, #2
 8006e02:	2112      	movs	r1, #18
 8006e04:	f7ff ff78 	bl	8006cf8 <std>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	61a3      	str	r3, [r4, #24]
 8006e0c:	e7d2      	b.n	8006db4 <__sinit+0xc>
 8006e0e:	bf00      	nop
 8006e10:	08009a04 	.word	0x08009a04
 8006e14:	08006d41 	.word	0x08006d41

08006e18 <__sfp>:
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1a:	4607      	mov	r7, r0
 8006e1c:	f7ff ffac 	bl	8006d78 <__sfp_lock_acquire>
 8006e20:	4b1e      	ldr	r3, [pc, #120]	; (8006e9c <__sfp+0x84>)
 8006e22:	681e      	ldr	r6, [r3, #0]
 8006e24:	69b3      	ldr	r3, [r6, #24]
 8006e26:	b913      	cbnz	r3, 8006e2e <__sfp+0x16>
 8006e28:	4630      	mov	r0, r6
 8006e2a:	f7ff ffbd 	bl	8006da8 <__sinit>
 8006e2e:	3648      	adds	r6, #72	; 0x48
 8006e30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	d503      	bpl.n	8006e40 <__sfp+0x28>
 8006e38:	6833      	ldr	r3, [r6, #0]
 8006e3a:	b30b      	cbz	r3, 8006e80 <__sfp+0x68>
 8006e3c:	6836      	ldr	r6, [r6, #0]
 8006e3e:	e7f7      	b.n	8006e30 <__sfp+0x18>
 8006e40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e44:	b9d5      	cbnz	r5, 8006e7c <__sfp+0x64>
 8006e46:	4b16      	ldr	r3, [pc, #88]	; (8006ea0 <__sfp+0x88>)
 8006e48:	60e3      	str	r3, [r4, #12]
 8006e4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e4e:	6665      	str	r5, [r4, #100]	; 0x64
 8006e50:	f000 f86c 	bl	8006f2c <__retarget_lock_init_recursive>
 8006e54:	f7ff ff96 	bl	8006d84 <__sfp_lock_release>
 8006e58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e60:	6025      	str	r5, [r4, #0]
 8006e62:	61a5      	str	r5, [r4, #24]
 8006e64:	2208      	movs	r2, #8
 8006e66:	4629      	mov	r1, r5
 8006e68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e6c:	f000 f878 	bl	8006f60 <memset>
 8006e70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e78:	4620      	mov	r0, r4
 8006e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e7c:	3468      	adds	r4, #104	; 0x68
 8006e7e:	e7d9      	b.n	8006e34 <__sfp+0x1c>
 8006e80:	2104      	movs	r1, #4
 8006e82:	4638      	mov	r0, r7
 8006e84:	f7ff ff62 	bl	8006d4c <__sfmoreglue>
 8006e88:	4604      	mov	r4, r0
 8006e8a:	6030      	str	r0, [r6, #0]
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d1d5      	bne.n	8006e3c <__sfp+0x24>
 8006e90:	f7ff ff78 	bl	8006d84 <__sfp_lock_release>
 8006e94:	230c      	movs	r3, #12
 8006e96:	603b      	str	r3, [r7, #0]
 8006e98:	e7ee      	b.n	8006e78 <__sfp+0x60>
 8006e9a:	bf00      	nop
 8006e9c:	08009a04 	.word	0x08009a04
 8006ea0:	ffff0001 	.word	0xffff0001

08006ea4 <_fwalk_reent>:
 8006ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	4688      	mov	r8, r1
 8006eac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006eb0:	2700      	movs	r7, #0
 8006eb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006eb6:	f1b9 0901 	subs.w	r9, r9, #1
 8006eba:	d505      	bpl.n	8006ec8 <_fwalk_reent+0x24>
 8006ebc:	6824      	ldr	r4, [r4, #0]
 8006ebe:	2c00      	cmp	r4, #0
 8006ec0:	d1f7      	bne.n	8006eb2 <_fwalk_reent+0xe>
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ec8:	89ab      	ldrh	r3, [r5, #12]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d907      	bls.n	8006ede <_fwalk_reent+0x3a>
 8006ece:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	d003      	beq.n	8006ede <_fwalk_reent+0x3a>
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	4630      	mov	r0, r6
 8006eda:	47c0      	blx	r8
 8006edc:	4307      	orrs	r7, r0
 8006ede:	3568      	adds	r5, #104	; 0x68
 8006ee0:	e7e9      	b.n	8006eb6 <_fwalk_reent+0x12>
	...

08006ee4 <__libc_init_array>:
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	4d0d      	ldr	r5, [pc, #52]	; (8006f1c <__libc_init_array+0x38>)
 8006ee8:	4c0d      	ldr	r4, [pc, #52]	; (8006f20 <__libc_init_array+0x3c>)
 8006eea:	1b64      	subs	r4, r4, r5
 8006eec:	10a4      	asrs	r4, r4, #2
 8006eee:	2600      	movs	r6, #0
 8006ef0:	42a6      	cmp	r6, r4
 8006ef2:	d109      	bne.n	8006f08 <__libc_init_array+0x24>
 8006ef4:	4d0b      	ldr	r5, [pc, #44]	; (8006f24 <__libc_init_array+0x40>)
 8006ef6:	4c0c      	ldr	r4, [pc, #48]	; (8006f28 <__libc_init_array+0x44>)
 8006ef8:	f002 fc86 	bl	8009808 <_init>
 8006efc:	1b64      	subs	r4, r4, r5
 8006efe:	10a4      	asrs	r4, r4, #2
 8006f00:	2600      	movs	r6, #0
 8006f02:	42a6      	cmp	r6, r4
 8006f04:	d105      	bne.n	8006f12 <__libc_init_array+0x2e>
 8006f06:	bd70      	pop	{r4, r5, r6, pc}
 8006f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f0c:	4798      	blx	r3
 8006f0e:	3601      	adds	r6, #1
 8006f10:	e7ee      	b.n	8006ef0 <__libc_init_array+0xc>
 8006f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f16:	4798      	blx	r3
 8006f18:	3601      	adds	r6, #1
 8006f1a:	e7f2      	b.n	8006f02 <__libc_init_array+0x1e>
 8006f1c:	08009d8c 	.word	0x08009d8c
 8006f20:	08009d8c 	.word	0x08009d8c
 8006f24:	08009d8c 	.word	0x08009d8c
 8006f28:	08009d90 	.word	0x08009d90

08006f2c <__retarget_lock_init_recursive>:
 8006f2c:	4770      	bx	lr

08006f2e <__retarget_lock_acquire_recursive>:
 8006f2e:	4770      	bx	lr

08006f30 <__retarget_lock_release_recursive>:
 8006f30:	4770      	bx	lr
	...

08006f34 <malloc>:
 8006f34:	4b02      	ldr	r3, [pc, #8]	; (8006f40 <malloc+0xc>)
 8006f36:	4601      	mov	r1, r0
 8006f38:	6818      	ldr	r0, [r3, #0]
 8006f3a:	f000 b869 	b.w	8007010 <_malloc_r>
 8006f3e:	bf00      	nop
 8006f40:	200000e8 	.word	0x200000e8

08006f44 <memcpy>:
 8006f44:	440a      	add	r2, r1
 8006f46:	4291      	cmp	r1, r2
 8006f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f4c:	d100      	bne.n	8006f50 <memcpy+0xc>
 8006f4e:	4770      	bx	lr
 8006f50:	b510      	push	{r4, lr}
 8006f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f5a:	4291      	cmp	r1, r2
 8006f5c:	d1f9      	bne.n	8006f52 <memcpy+0xe>
 8006f5e:	bd10      	pop	{r4, pc}

08006f60 <memset>:
 8006f60:	4402      	add	r2, r0
 8006f62:	4603      	mov	r3, r0
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d100      	bne.n	8006f6a <memset+0xa>
 8006f68:	4770      	bx	lr
 8006f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f6e:	e7f9      	b.n	8006f64 <memset+0x4>

08006f70 <_free_r>:
 8006f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f72:	2900      	cmp	r1, #0
 8006f74:	d048      	beq.n	8007008 <_free_r+0x98>
 8006f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f7a:	9001      	str	r0, [sp, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f1a1 0404 	sub.w	r4, r1, #4
 8006f82:	bfb8      	it	lt
 8006f84:	18e4      	addlt	r4, r4, r3
 8006f86:	f001 fe7f 	bl	8008c88 <__malloc_lock>
 8006f8a:	4a20      	ldr	r2, [pc, #128]	; (800700c <_free_r+0x9c>)
 8006f8c:	9801      	ldr	r0, [sp, #4]
 8006f8e:	6813      	ldr	r3, [r2, #0]
 8006f90:	4615      	mov	r5, r2
 8006f92:	b933      	cbnz	r3, 8006fa2 <_free_r+0x32>
 8006f94:	6063      	str	r3, [r4, #4]
 8006f96:	6014      	str	r4, [r2, #0]
 8006f98:	b003      	add	sp, #12
 8006f9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f9e:	f001 be79 	b.w	8008c94 <__malloc_unlock>
 8006fa2:	42a3      	cmp	r3, r4
 8006fa4:	d90b      	bls.n	8006fbe <_free_r+0x4e>
 8006fa6:	6821      	ldr	r1, [r4, #0]
 8006fa8:	1862      	adds	r2, r4, r1
 8006faa:	4293      	cmp	r3, r2
 8006fac:	bf04      	itt	eq
 8006fae:	681a      	ldreq	r2, [r3, #0]
 8006fb0:	685b      	ldreq	r3, [r3, #4]
 8006fb2:	6063      	str	r3, [r4, #4]
 8006fb4:	bf04      	itt	eq
 8006fb6:	1852      	addeq	r2, r2, r1
 8006fb8:	6022      	streq	r2, [r4, #0]
 8006fba:	602c      	str	r4, [r5, #0]
 8006fbc:	e7ec      	b.n	8006f98 <_free_r+0x28>
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	b10b      	cbz	r3, 8006fc8 <_free_r+0x58>
 8006fc4:	42a3      	cmp	r3, r4
 8006fc6:	d9fa      	bls.n	8006fbe <_free_r+0x4e>
 8006fc8:	6811      	ldr	r1, [r2, #0]
 8006fca:	1855      	adds	r5, r2, r1
 8006fcc:	42a5      	cmp	r5, r4
 8006fce:	d10b      	bne.n	8006fe8 <_free_r+0x78>
 8006fd0:	6824      	ldr	r4, [r4, #0]
 8006fd2:	4421      	add	r1, r4
 8006fd4:	1854      	adds	r4, r2, r1
 8006fd6:	42a3      	cmp	r3, r4
 8006fd8:	6011      	str	r1, [r2, #0]
 8006fda:	d1dd      	bne.n	8006f98 <_free_r+0x28>
 8006fdc:	681c      	ldr	r4, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	6053      	str	r3, [r2, #4]
 8006fe2:	4421      	add	r1, r4
 8006fe4:	6011      	str	r1, [r2, #0]
 8006fe6:	e7d7      	b.n	8006f98 <_free_r+0x28>
 8006fe8:	d902      	bls.n	8006ff0 <_free_r+0x80>
 8006fea:	230c      	movs	r3, #12
 8006fec:	6003      	str	r3, [r0, #0]
 8006fee:	e7d3      	b.n	8006f98 <_free_r+0x28>
 8006ff0:	6825      	ldr	r5, [r4, #0]
 8006ff2:	1961      	adds	r1, r4, r5
 8006ff4:	428b      	cmp	r3, r1
 8006ff6:	bf04      	itt	eq
 8006ff8:	6819      	ldreq	r1, [r3, #0]
 8006ffa:	685b      	ldreq	r3, [r3, #4]
 8006ffc:	6063      	str	r3, [r4, #4]
 8006ffe:	bf04      	itt	eq
 8007000:	1949      	addeq	r1, r1, r5
 8007002:	6021      	streq	r1, [r4, #0]
 8007004:	6054      	str	r4, [r2, #4]
 8007006:	e7c7      	b.n	8006f98 <_free_r+0x28>
 8007008:	b003      	add	sp, #12
 800700a:	bd30      	pop	{r4, r5, pc}
 800700c:	20004410 	.word	0x20004410

08007010 <_malloc_r>:
 8007010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007012:	1ccd      	adds	r5, r1, #3
 8007014:	f025 0503 	bic.w	r5, r5, #3
 8007018:	3508      	adds	r5, #8
 800701a:	2d0c      	cmp	r5, #12
 800701c:	bf38      	it	cc
 800701e:	250c      	movcc	r5, #12
 8007020:	2d00      	cmp	r5, #0
 8007022:	4606      	mov	r6, r0
 8007024:	db01      	blt.n	800702a <_malloc_r+0x1a>
 8007026:	42a9      	cmp	r1, r5
 8007028:	d903      	bls.n	8007032 <_malloc_r+0x22>
 800702a:	230c      	movs	r3, #12
 800702c:	6033      	str	r3, [r6, #0]
 800702e:	2000      	movs	r0, #0
 8007030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007032:	f001 fe29 	bl	8008c88 <__malloc_lock>
 8007036:	4921      	ldr	r1, [pc, #132]	; (80070bc <_malloc_r+0xac>)
 8007038:	680a      	ldr	r2, [r1, #0]
 800703a:	4614      	mov	r4, r2
 800703c:	b99c      	cbnz	r4, 8007066 <_malloc_r+0x56>
 800703e:	4f20      	ldr	r7, [pc, #128]	; (80070c0 <_malloc_r+0xb0>)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	b923      	cbnz	r3, 800704e <_malloc_r+0x3e>
 8007044:	4621      	mov	r1, r4
 8007046:	4630      	mov	r0, r6
 8007048:	f000 fd34 	bl	8007ab4 <_sbrk_r>
 800704c:	6038      	str	r0, [r7, #0]
 800704e:	4629      	mov	r1, r5
 8007050:	4630      	mov	r0, r6
 8007052:	f000 fd2f 	bl	8007ab4 <_sbrk_r>
 8007056:	1c43      	adds	r3, r0, #1
 8007058:	d123      	bne.n	80070a2 <_malloc_r+0x92>
 800705a:	230c      	movs	r3, #12
 800705c:	6033      	str	r3, [r6, #0]
 800705e:	4630      	mov	r0, r6
 8007060:	f001 fe18 	bl	8008c94 <__malloc_unlock>
 8007064:	e7e3      	b.n	800702e <_malloc_r+0x1e>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	1b5b      	subs	r3, r3, r5
 800706a:	d417      	bmi.n	800709c <_malloc_r+0x8c>
 800706c:	2b0b      	cmp	r3, #11
 800706e:	d903      	bls.n	8007078 <_malloc_r+0x68>
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	441c      	add	r4, r3
 8007074:	6025      	str	r5, [r4, #0]
 8007076:	e004      	b.n	8007082 <_malloc_r+0x72>
 8007078:	6863      	ldr	r3, [r4, #4]
 800707a:	42a2      	cmp	r2, r4
 800707c:	bf0c      	ite	eq
 800707e:	600b      	streq	r3, [r1, #0]
 8007080:	6053      	strne	r3, [r2, #4]
 8007082:	4630      	mov	r0, r6
 8007084:	f001 fe06 	bl	8008c94 <__malloc_unlock>
 8007088:	f104 000b 	add.w	r0, r4, #11
 800708c:	1d23      	adds	r3, r4, #4
 800708e:	f020 0007 	bic.w	r0, r0, #7
 8007092:	1ac2      	subs	r2, r0, r3
 8007094:	d0cc      	beq.n	8007030 <_malloc_r+0x20>
 8007096:	1a1b      	subs	r3, r3, r0
 8007098:	50a3      	str	r3, [r4, r2]
 800709a:	e7c9      	b.n	8007030 <_malloc_r+0x20>
 800709c:	4622      	mov	r2, r4
 800709e:	6864      	ldr	r4, [r4, #4]
 80070a0:	e7cc      	b.n	800703c <_malloc_r+0x2c>
 80070a2:	1cc4      	adds	r4, r0, #3
 80070a4:	f024 0403 	bic.w	r4, r4, #3
 80070a8:	42a0      	cmp	r0, r4
 80070aa:	d0e3      	beq.n	8007074 <_malloc_r+0x64>
 80070ac:	1a21      	subs	r1, r4, r0
 80070ae:	4630      	mov	r0, r6
 80070b0:	f000 fd00 	bl	8007ab4 <_sbrk_r>
 80070b4:	3001      	adds	r0, #1
 80070b6:	d1dd      	bne.n	8007074 <_malloc_r+0x64>
 80070b8:	e7cf      	b.n	800705a <_malloc_r+0x4a>
 80070ba:	bf00      	nop
 80070bc:	20004410 	.word	0x20004410
 80070c0:	20004414 	.word	0x20004414

080070c4 <__cvt>:
 80070c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070c8:	ec55 4b10 	vmov	r4, r5, d0
 80070cc:	2d00      	cmp	r5, #0
 80070ce:	460e      	mov	r6, r1
 80070d0:	4619      	mov	r1, r3
 80070d2:	462b      	mov	r3, r5
 80070d4:	bfbb      	ittet	lt
 80070d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80070da:	461d      	movlt	r5, r3
 80070dc:	2300      	movge	r3, #0
 80070de:	232d      	movlt	r3, #45	; 0x2d
 80070e0:	700b      	strb	r3, [r1, #0]
 80070e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80070e8:	4691      	mov	r9, r2
 80070ea:	f023 0820 	bic.w	r8, r3, #32
 80070ee:	bfbc      	itt	lt
 80070f0:	4622      	movlt	r2, r4
 80070f2:	4614      	movlt	r4, r2
 80070f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070f8:	d005      	beq.n	8007106 <__cvt+0x42>
 80070fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80070fe:	d100      	bne.n	8007102 <__cvt+0x3e>
 8007100:	3601      	adds	r6, #1
 8007102:	2102      	movs	r1, #2
 8007104:	e000      	b.n	8007108 <__cvt+0x44>
 8007106:	2103      	movs	r1, #3
 8007108:	ab03      	add	r3, sp, #12
 800710a:	9301      	str	r3, [sp, #4]
 800710c:	ab02      	add	r3, sp, #8
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	ec45 4b10 	vmov	d0, r4, r5
 8007114:	4653      	mov	r3, sl
 8007116:	4632      	mov	r2, r6
 8007118:	f000 fe8e 	bl	8007e38 <_dtoa_r>
 800711c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007120:	4607      	mov	r7, r0
 8007122:	d102      	bne.n	800712a <__cvt+0x66>
 8007124:	f019 0f01 	tst.w	r9, #1
 8007128:	d022      	beq.n	8007170 <__cvt+0xac>
 800712a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800712e:	eb07 0906 	add.w	r9, r7, r6
 8007132:	d110      	bne.n	8007156 <__cvt+0x92>
 8007134:	783b      	ldrb	r3, [r7, #0]
 8007136:	2b30      	cmp	r3, #48	; 0x30
 8007138:	d10a      	bne.n	8007150 <__cvt+0x8c>
 800713a:	2200      	movs	r2, #0
 800713c:	2300      	movs	r3, #0
 800713e:	4620      	mov	r0, r4
 8007140:	4629      	mov	r1, r5
 8007142:	f7f9 fcd1 	bl	8000ae8 <__aeabi_dcmpeq>
 8007146:	b918      	cbnz	r0, 8007150 <__cvt+0x8c>
 8007148:	f1c6 0601 	rsb	r6, r6, #1
 800714c:	f8ca 6000 	str.w	r6, [sl]
 8007150:	f8da 3000 	ldr.w	r3, [sl]
 8007154:	4499      	add	r9, r3
 8007156:	2200      	movs	r2, #0
 8007158:	2300      	movs	r3, #0
 800715a:	4620      	mov	r0, r4
 800715c:	4629      	mov	r1, r5
 800715e:	f7f9 fcc3 	bl	8000ae8 <__aeabi_dcmpeq>
 8007162:	b108      	cbz	r0, 8007168 <__cvt+0xa4>
 8007164:	f8cd 900c 	str.w	r9, [sp, #12]
 8007168:	2230      	movs	r2, #48	; 0x30
 800716a:	9b03      	ldr	r3, [sp, #12]
 800716c:	454b      	cmp	r3, r9
 800716e:	d307      	bcc.n	8007180 <__cvt+0xbc>
 8007170:	9b03      	ldr	r3, [sp, #12]
 8007172:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007174:	1bdb      	subs	r3, r3, r7
 8007176:	4638      	mov	r0, r7
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	b004      	add	sp, #16
 800717c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007180:	1c59      	adds	r1, r3, #1
 8007182:	9103      	str	r1, [sp, #12]
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	e7f0      	b.n	800716a <__cvt+0xa6>

08007188 <__exponent>:
 8007188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800718a:	4603      	mov	r3, r0
 800718c:	2900      	cmp	r1, #0
 800718e:	bfb8      	it	lt
 8007190:	4249      	neglt	r1, r1
 8007192:	f803 2b02 	strb.w	r2, [r3], #2
 8007196:	bfb4      	ite	lt
 8007198:	222d      	movlt	r2, #45	; 0x2d
 800719a:	222b      	movge	r2, #43	; 0x2b
 800719c:	2909      	cmp	r1, #9
 800719e:	7042      	strb	r2, [r0, #1]
 80071a0:	dd2a      	ble.n	80071f8 <__exponent+0x70>
 80071a2:	f10d 0407 	add.w	r4, sp, #7
 80071a6:	46a4      	mov	ip, r4
 80071a8:	270a      	movs	r7, #10
 80071aa:	46a6      	mov	lr, r4
 80071ac:	460a      	mov	r2, r1
 80071ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80071b2:	fb07 1516 	mls	r5, r7, r6, r1
 80071b6:	3530      	adds	r5, #48	; 0x30
 80071b8:	2a63      	cmp	r2, #99	; 0x63
 80071ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80071be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80071c2:	4631      	mov	r1, r6
 80071c4:	dcf1      	bgt.n	80071aa <__exponent+0x22>
 80071c6:	3130      	adds	r1, #48	; 0x30
 80071c8:	f1ae 0502 	sub.w	r5, lr, #2
 80071cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80071d0:	1c44      	adds	r4, r0, #1
 80071d2:	4629      	mov	r1, r5
 80071d4:	4561      	cmp	r1, ip
 80071d6:	d30a      	bcc.n	80071ee <__exponent+0x66>
 80071d8:	f10d 0209 	add.w	r2, sp, #9
 80071dc:	eba2 020e 	sub.w	r2, r2, lr
 80071e0:	4565      	cmp	r5, ip
 80071e2:	bf88      	it	hi
 80071e4:	2200      	movhi	r2, #0
 80071e6:	4413      	add	r3, r2
 80071e8:	1a18      	subs	r0, r3, r0
 80071ea:	b003      	add	sp, #12
 80071ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80071f6:	e7ed      	b.n	80071d4 <__exponent+0x4c>
 80071f8:	2330      	movs	r3, #48	; 0x30
 80071fa:	3130      	adds	r1, #48	; 0x30
 80071fc:	7083      	strb	r3, [r0, #2]
 80071fe:	70c1      	strb	r1, [r0, #3]
 8007200:	1d03      	adds	r3, r0, #4
 8007202:	e7f1      	b.n	80071e8 <__exponent+0x60>

08007204 <_printf_float>:
 8007204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007208:	ed2d 8b02 	vpush	{d8}
 800720c:	b08d      	sub	sp, #52	; 0x34
 800720e:	460c      	mov	r4, r1
 8007210:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007214:	4616      	mov	r6, r2
 8007216:	461f      	mov	r7, r3
 8007218:	4605      	mov	r5, r0
 800721a:	f001 fcbb 	bl	8008b94 <_localeconv_r>
 800721e:	f8d0 a000 	ldr.w	sl, [r0]
 8007222:	4650      	mov	r0, sl
 8007224:	f7f8 ffe4 	bl	80001f0 <strlen>
 8007228:	2300      	movs	r3, #0
 800722a:	930a      	str	r3, [sp, #40]	; 0x28
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	9305      	str	r3, [sp, #20]
 8007230:	f8d8 3000 	ldr.w	r3, [r8]
 8007234:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007238:	3307      	adds	r3, #7
 800723a:	f023 0307 	bic.w	r3, r3, #7
 800723e:	f103 0208 	add.w	r2, r3, #8
 8007242:	f8c8 2000 	str.w	r2, [r8]
 8007246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800724e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007252:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007256:	9307      	str	r3, [sp, #28]
 8007258:	f8cd 8018 	str.w	r8, [sp, #24]
 800725c:	ee08 0a10 	vmov	s16, r0
 8007260:	4b9f      	ldr	r3, [pc, #636]	; (80074e0 <_printf_float+0x2dc>)
 8007262:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007266:	f04f 32ff 	mov.w	r2, #4294967295
 800726a:	f7f9 fc6f 	bl	8000b4c <__aeabi_dcmpun>
 800726e:	bb88      	cbnz	r0, 80072d4 <_printf_float+0xd0>
 8007270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007274:	4b9a      	ldr	r3, [pc, #616]	; (80074e0 <_printf_float+0x2dc>)
 8007276:	f04f 32ff 	mov.w	r2, #4294967295
 800727a:	f7f9 fc49 	bl	8000b10 <__aeabi_dcmple>
 800727e:	bb48      	cbnz	r0, 80072d4 <_printf_float+0xd0>
 8007280:	2200      	movs	r2, #0
 8007282:	2300      	movs	r3, #0
 8007284:	4640      	mov	r0, r8
 8007286:	4649      	mov	r1, r9
 8007288:	f7f9 fc38 	bl	8000afc <__aeabi_dcmplt>
 800728c:	b110      	cbz	r0, 8007294 <_printf_float+0x90>
 800728e:	232d      	movs	r3, #45	; 0x2d
 8007290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007294:	4b93      	ldr	r3, [pc, #588]	; (80074e4 <_printf_float+0x2e0>)
 8007296:	4894      	ldr	r0, [pc, #592]	; (80074e8 <_printf_float+0x2e4>)
 8007298:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800729c:	bf94      	ite	ls
 800729e:	4698      	movls	r8, r3
 80072a0:	4680      	movhi	r8, r0
 80072a2:	2303      	movs	r3, #3
 80072a4:	6123      	str	r3, [r4, #16]
 80072a6:	9b05      	ldr	r3, [sp, #20]
 80072a8:	f023 0204 	bic.w	r2, r3, #4
 80072ac:	6022      	str	r2, [r4, #0]
 80072ae:	f04f 0900 	mov.w	r9, #0
 80072b2:	9700      	str	r7, [sp, #0]
 80072b4:	4633      	mov	r3, r6
 80072b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80072b8:	4621      	mov	r1, r4
 80072ba:	4628      	mov	r0, r5
 80072bc:	f000 f9d8 	bl	8007670 <_printf_common>
 80072c0:	3001      	adds	r0, #1
 80072c2:	f040 8090 	bne.w	80073e6 <_printf_float+0x1e2>
 80072c6:	f04f 30ff 	mov.w	r0, #4294967295
 80072ca:	b00d      	add	sp, #52	; 0x34
 80072cc:	ecbd 8b02 	vpop	{d8}
 80072d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d4:	4642      	mov	r2, r8
 80072d6:	464b      	mov	r3, r9
 80072d8:	4640      	mov	r0, r8
 80072da:	4649      	mov	r1, r9
 80072dc:	f7f9 fc36 	bl	8000b4c <__aeabi_dcmpun>
 80072e0:	b140      	cbz	r0, 80072f4 <_printf_float+0xf0>
 80072e2:	464b      	mov	r3, r9
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	bfbc      	itt	lt
 80072e8:	232d      	movlt	r3, #45	; 0x2d
 80072ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072ee:	487f      	ldr	r0, [pc, #508]	; (80074ec <_printf_float+0x2e8>)
 80072f0:	4b7f      	ldr	r3, [pc, #508]	; (80074f0 <_printf_float+0x2ec>)
 80072f2:	e7d1      	b.n	8007298 <_printf_float+0x94>
 80072f4:	6863      	ldr	r3, [r4, #4]
 80072f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80072fa:	9206      	str	r2, [sp, #24]
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	d13f      	bne.n	8007380 <_printf_float+0x17c>
 8007300:	2306      	movs	r3, #6
 8007302:	6063      	str	r3, [r4, #4]
 8007304:	9b05      	ldr	r3, [sp, #20]
 8007306:	6861      	ldr	r1, [r4, #4]
 8007308:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800730c:	2300      	movs	r3, #0
 800730e:	9303      	str	r3, [sp, #12]
 8007310:	ab0a      	add	r3, sp, #40	; 0x28
 8007312:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007316:	ab09      	add	r3, sp, #36	; 0x24
 8007318:	ec49 8b10 	vmov	d0, r8, r9
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	6022      	str	r2, [r4, #0]
 8007320:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007324:	4628      	mov	r0, r5
 8007326:	f7ff fecd 	bl	80070c4 <__cvt>
 800732a:	9b06      	ldr	r3, [sp, #24]
 800732c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800732e:	2b47      	cmp	r3, #71	; 0x47
 8007330:	4680      	mov	r8, r0
 8007332:	d108      	bne.n	8007346 <_printf_float+0x142>
 8007334:	1cc8      	adds	r0, r1, #3
 8007336:	db02      	blt.n	800733e <_printf_float+0x13a>
 8007338:	6863      	ldr	r3, [r4, #4]
 800733a:	4299      	cmp	r1, r3
 800733c:	dd41      	ble.n	80073c2 <_printf_float+0x1be>
 800733e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007342:	fa5f fb8b 	uxtb.w	fp, fp
 8007346:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800734a:	d820      	bhi.n	800738e <_printf_float+0x18a>
 800734c:	3901      	subs	r1, #1
 800734e:	465a      	mov	r2, fp
 8007350:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007354:	9109      	str	r1, [sp, #36]	; 0x24
 8007356:	f7ff ff17 	bl	8007188 <__exponent>
 800735a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800735c:	1813      	adds	r3, r2, r0
 800735e:	2a01      	cmp	r2, #1
 8007360:	4681      	mov	r9, r0
 8007362:	6123      	str	r3, [r4, #16]
 8007364:	dc02      	bgt.n	800736c <_printf_float+0x168>
 8007366:	6822      	ldr	r2, [r4, #0]
 8007368:	07d2      	lsls	r2, r2, #31
 800736a:	d501      	bpl.n	8007370 <_printf_float+0x16c>
 800736c:	3301      	adds	r3, #1
 800736e:	6123      	str	r3, [r4, #16]
 8007370:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007374:	2b00      	cmp	r3, #0
 8007376:	d09c      	beq.n	80072b2 <_printf_float+0xae>
 8007378:	232d      	movs	r3, #45	; 0x2d
 800737a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800737e:	e798      	b.n	80072b2 <_printf_float+0xae>
 8007380:	9a06      	ldr	r2, [sp, #24]
 8007382:	2a47      	cmp	r2, #71	; 0x47
 8007384:	d1be      	bne.n	8007304 <_printf_float+0x100>
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1bc      	bne.n	8007304 <_printf_float+0x100>
 800738a:	2301      	movs	r3, #1
 800738c:	e7b9      	b.n	8007302 <_printf_float+0xfe>
 800738e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007392:	d118      	bne.n	80073c6 <_printf_float+0x1c2>
 8007394:	2900      	cmp	r1, #0
 8007396:	6863      	ldr	r3, [r4, #4]
 8007398:	dd0b      	ble.n	80073b2 <_printf_float+0x1ae>
 800739a:	6121      	str	r1, [r4, #16]
 800739c:	b913      	cbnz	r3, 80073a4 <_printf_float+0x1a0>
 800739e:	6822      	ldr	r2, [r4, #0]
 80073a0:	07d0      	lsls	r0, r2, #31
 80073a2:	d502      	bpl.n	80073aa <_printf_float+0x1a6>
 80073a4:	3301      	adds	r3, #1
 80073a6:	440b      	add	r3, r1
 80073a8:	6123      	str	r3, [r4, #16]
 80073aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80073ac:	f04f 0900 	mov.w	r9, #0
 80073b0:	e7de      	b.n	8007370 <_printf_float+0x16c>
 80073b2:	b913      	cbnz	r3, 80073ba <_printf_float+0x1b6>
 80073b4:	6822      	ldr	r2, [r4, #0]
 80073b6:	07d2      	lsls	r2, r2, #31
 80073b8:	d501      	bpl.n	80073be <_printf_float+0x1ba>
 80073ba:	3302      	adds	r3, #2
 80073bc:	e7f4      	b.n	80073a8 <_printf_float+0x1a4>
 80073be:	2301      	movs	r3, #1
 80073c0:	e7f2      	b.n	80073a8 <_printf_float+0x1a4>
 80073c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80073c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073c8:	4299      	cmp	r1, r3
 80073ca:	db05      	blt.n	80073d8 <_printf_float+0x1d4>
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	6121      	str	r1, [r4, #16]
 80073d0:	07d8      	lsls	r0, r3, #31
 80073d2:	d5ea      	bpl.n	80073aa <_printf_float+0x1a6>
 80073d4:	1c4b      	adds	r3, r1, #1
 80073d6:	e7e7      	b.n	80073a8 <_printf_float+0x1a4>
 80073d8:	2900      	cmp	r1, #0
 80073da:	bfd4      	ite	le
 80073dc:	f1c1 0202 	rsble	r2, r1, #2
 80073e0:	2201      	movgt	r2, #1
 80073e2:	4413      	add	r3, r2
 80073e4:	e7e0      	b.n	80073a8 <_printf_float+0x1a4>
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	055a      	lsls	r2, r3, #21
 80073ea:	d407      	bmi.n	80073fc <_printf_float+0x1f8>
 80073ec:	6923      	ldr	r3, [r4, #16]
 80073ee:	4642      	mov	r2, r8
 80073f0:	4631      	mov	r1, r6
 80073f2:	4628      	mov	r0, r5
 80073f4:	47b8      	blx	r7
 80073f6:	3001      	adds	r0, #1
 80073f8:	d12c      	bne.n	8007454 <_printf_float+0x250>
 80073fa:	e764      	b.n	80072c6 <_printf_float+0xc2>
 80073fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007400:	f240 80e0 	bls.w	80075c4 <_printf_float+0x3c0>
 8007404:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007408:	2200      	movs	r2, #0
 800740a:	2300      	movs	r3, #0
 800740c:	f7f9 fb6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8007410:	2800      	cmp	r0, #0
 8007412:	d034      	beq.n	800747e <_printf_float+0x27a>
 8007414:	4a37      	ldr	r2, [pc, #220]	; (80074f4 <_printf_float+0x2f0>)
 8007416:	2301      	movs	r3, #1
 8007418:	4631      	mov	r1, r6
 800741a:	4628      	mov	r0, r5
 800741c:	47b8      	blx	r7
 800741e:	3001      	adds	r0, #1
 8007420:	f43f af51 	beq.w	80072c6 <_printf_float+0xc2>
 8007424:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007428:	429a      	cmp	r2, r3
 800742a:	db02      	blt.n	8007432 <_printf_float+0x22e>
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	07d8      	lsls	r0, r3, #31
 8007430:	d510      	bpl.n	8007454 <_printf_float+0x250>
 8007432:	ee18 3a10 	vmov	r3, s16
 8007436:	4652      	mov	r2, sl
 8007438:	4631      	mov	r1, r6
 800743a:	4628      	mov	r0, r5
 800743c:	47b8      	blx	r7
 800743e:	3001      	adds	r0, #1
 8007440:	f43f af41 	beq.w	80072c6 <_printf_float+0xc2>
 8007444:	f04f 0800 	mov.w	r8, #0
 8007448:	f104 091a 	add.w	r9, r4, #26
 800744c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800744e:	3b01      	subs	r3, #1
 8007450:	4543      	cmp	r3, r8
 8007452:	dc09      	bgt.n	8007468 <_printf_float+0x264>
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	079b      	lsls	r3, r3, #30
 8007458:	f100 8105 	bmi.w	8007666 <_printf_float+0x462>
 800745c:	68e0      	ldr	r0, [r4, #12]
 800745e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007460:	4298      	cmp	r0, r3
 8007462:	bfb8      	it	lt
 8007464:	4618      	movlt	r0, r3
 8007466:	e730      	b.n	80072ca <_printf_float+0xc6>
 8007468:	2301      	movs	r3, #1
 800746a:	464a      	mov	r2, r9
 800746c:	4631      	mov	r1, r6
 800746e:	4628      	mov	r0, r5
 8007470:	47b8      	blx	r7
 8007472:	3001      	adds	r0, #1
 8007474:	f43f af27 	beq.w	80072c6 <_printf_float+0xc2>
 8007478:	f108 0801 	add.w	r8, r8, #1
 800747c:	e7e6      	b.n	800744c <_printf_float+0x248>
 800747e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007480:	2b00      	cmp	r3, #0
 8007482:	dc39      	bgt.n	80074f8 <_printf_float+0x2f4>
 8007484:	4a1b      	ldr	r2, [pc, #108]	; (80074f4 <_printf_float+0x2f0>)
 8007486:	2301      	movs	r3, #1
 8007488:	4631      	mov	r1, r6
 800748a:	4628      	mov	r0, r5
 800748c:	47b8      	blx	r7
 800748e:	3001      	adds	r0, #1
 8007490:	f43f af19 	beq.w	80072c6 <_printf_float+0xc2>
 8007494:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007498:	4313      	orrs	r3, r2
 800749a:	d102      	bne.n	80074a2 <_printf_float+0x29e>
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	07d9      	lsls	r1, r3, #31
 80074a0:	d5d8      	bpl.n	8007454 <_printf_float+0x250>
 80074a2:	ee18 3a10 	vmov	r3, s16
 80074a6:	4652      	mov	r2, sl
 80074a8:	4631      	mov	r1, r6
 80074aa:	4628      	mov	r0, r5
 80074ac:	47b8      	blx	r7
 80074ae:	3001      	adds	r0, #1
 80074b0:	f43f af09 	beq.w	80072c6 <_printf_float+0xc2>
 80074b4:	f04f 0900 	mov.w	r9, #0
 80074b8:	f104 0a1a 	add.w	sl, r4, #26
 80074bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074be:	425b      	negs	r3, r3
 80074c0:	454b      	cmp	r3, r9
 80074c2:	dc01      	bgt.n	80074c8 <_printf_float+0x2c4>
 80074c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074c6:	e792      	b.n	80073ee <_printf_float+0x1ea>
 80074c8:	2301      	movs	r3, #1
 80074ca:	4652      	mov	r2, sl
 80074cc:	4631      	mov	r1, r6
 80074ce:	4628      	mov	r0, r5
 80074d0:	47b8      	blx	r7
 80074d2:	3001      	adds	r0, #1
 80074d4:	f43f aef7 	beq.w	80072c6 <_printf_float+0xc2>
 80074d8:	f109 0901 	add.w	r9, r9, #1
 80074dc:	e7ee      	b.n	80074bc <_printf_float+0x2b8>
 80074de:	bf00      	nop
 80074e0:	7fefffff 	.word	0x7fefffff
 80074e4:	08009a08 	.word	0x08009a08
 80074e8:	08009a0c 	.word	0x08009a0c
 80074ec:	08009a14 	.word	0x08009a14
 80074f0:	08009a10 	.word	0x08009a10
 80074f4:	08009a18 	.word	0x08009a18
 80074f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074fc:	429a      	cmp	r2, r3
 80074fe:	bfa8      	it	ge
 8007500:	461a      	movge	r2, r3
 8007502:	2a00      	cmp	r2, #0
 8007504:	4691      	mov	r9, r2
 8007506:	dc37      	bgt.n	8007578 <_printf_float+0x374>
 8007508:	f04f 0b00 	mov.w	fp, #0
 800750c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007510:	f104 021a 	add.w	r2, r4, #26
 8007514:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007516:	9305      	str	r3, [sp, #20]
 8007518:	eba3 0309 	sub.w	r3, r3, r9
 800751c:	455b      	cmp	r3, fp
 800751e:	dc33      	bgt.n	8007588 <_printf_float+0x384>
 8007520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007524:	429a      	cmp	r2, r3
 8007526:	db3b      	blt.n	80075a0 <_printf_float+0x39c>
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	07da      	lsls	r2, r3, #31
 800752c:	d438      	bmi.n	80075a0 <_printf_float+0x39c>
 800752e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007530:	9b05      	ldr	r3, [sp, #20]
 8007532:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	eba2 0901 	sub.w	r9, r2, r1
 800753a:	4599      	cmp	r9, r3
 800753c:	bfa8      	it	ge
 800753e:	4699      	movge	r9, r3
 8007540:	f1b9 0f00 	cmp.w	r9, #0
 8007544:	dc35      	bgt.n	80075b2 <_printf_float+0x3ae>
 8007546:	f04f 0800 	mov.w	r8, #0
 800754a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800754e:	f104 0a1a 	add.w	sl, r4, #26
 8007552:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007556:	1a9b      	subs	r3, r3, r2
 8007558:	eba3 0309 	sub.w	r3, r3, r9
 800755c:	4543      	cmp	r3, r8
 800755e:	f77f af79 	ble.w	8007454 <_printf_float+0x250>
 8007562:	2301      	movs	r3, #1
 8007564:	4652      	mov	r2, sl
 8007566:	4631      	mov	r1, r6
 8007568:	4628      	mov	r0, r5
 800756a:	47b8      	blx	r7
 800756c:	3001      	adds	r0, #1
 800756e:	f43f aeaa 	beq.w	80072c6 <_printf_float+0xc2>
 8007572:	f108 0801 	add.w	r8, r8, #1
 8007576:	e7ec      	b.n	8007552 <_printf_float+0x34e>
 8007578:	4613      	mov	r3, r2
 800757a:	4631      	mov	r1, r6
 800757c:	4642      	mov	r2, r8
 800757e:	4628      	mov	r0, r5
 8007580:	47b8      	blx	r7
 8007582:	3001      	adds	r0, #1
 8007584:	d1c0      	bne.n	8007508 <_printf_float+0x304>
 8007586:	e69e      	b.n	80072c6 <_printf_float+0xc2>
 8007588:	2301      	movs	r3, #1
 800758a:	4631      	mov	r1, r6
 800758c:	4628      	mov	r0, r5
 800758e:	9205      	str	r2, [sp, #20]
 8007590:	47b8      	blx	r7
 8007592:	3001      	adds	r0, #1
 8007594:	f43f ae97 	beq.w	80072c6 <_printf_float+0xc2>
 8007598:	9a05      	ldr	r2, [sp, #20]
 800759a:	f10b 0b01 	add.w	fp, fp, #1
 800759e:	e7b9      	b.n	8007514 <_printf_float+0x310>
 80075a0:	ee18 3a10 	vmov	r3, s16
 80075a4:	4652      	mov	r2, sl
 80075a6:	4631      	mov	r1, r6
 80075a8:	4628      	mov	r0, r5
 80075aa:	47b8      	blx	r7
 80075ac:	3001      	adds	r0, #1
 80075ae:	d1be      	bne.n	800752e <_printf_float+0x32a>
 80075b0:	e689      	b.n	80072c6 <_printf_float+0xc2>
 80075b2:	9a05      	ldr	r2, [sp, #20]
 80075b4:	464b      	mov	r3, r9
 80075b6:	4442      	add	r2, r8
 80075b8:	4631      	mov	r1, r6
 80075ba:	4628      	mov	r0, r5
 80075bc:	47b8      	blx	r7
 80075be:	3001      	adds	r0, #1
 80075c0:	d1c1      	bne.n	8007546 <_printf_float+0x342>
 80075c2:	e680      	b.n	80072c6 <_printf_float+0xc2>
 80075c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075c6:	2a01      	cmp	r2, #1
 80075c8:	dc01      	bgt.n	80075ce <_printf_float+0x3ca>
 80075ca:	07db      	lsls	r3, r3, #31
 80075cc:	d538      	bpl.n	8007640 <_printf_float+0x43c>
 80075ce:	2301      	movs	r3, #1
 80075d0:	4642      	mov	r2, r8
 80075d2:	4631      	mov	r1, r6
 80075d4:	4628      	mov	r0, r5
 80075d6:	47b8      	blx	r7
 80075d8:	3001      	adds	r0, #1
 80075da:	f43f ae74 	beq.w	80072c6 <_printf_float+0xc2>
 80075de:	ee18 3a10 	vmov	r3, s16
 80075e2:	4652      	mov	r2, sl
 80075e4:	4631      	mov	r1, r6
 80075e6:	4628      	mov	r0, r5
 80075e8:	47b8      	blx	r7
 80075ea:	3001      	adds	r0, #1
 80075ec:	f43f ae6b 	beq.w	80072c6 <_printf_float+0xc2>
 80075f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075f4:	2200      	movs	r2, #0
 80075f6:	2300      	movs	r3, #0
 80075f8:	f7f9 fa76 	bl	8000ae8 <__aeabi_dcmpeq>
 80075fc:	b9d8      	cbnz	r0, 8007636 <_printf_float+0x432>
 80075fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007600:	f108 0201 	add.w	r2, r8, #1
 8007604:	3b01      	subs	r3, #1
 8007606:	4631      	mov	r1, r6
 8007608:	4628      	mov	r0, r5
 800760a:	47b8      	blx	r7
 800760c:	3001      	adds	r0, #1
 800760e:	d10e      	bne.n	800762e <_printf_float+0x42a>
 8007610:	e659      	b.n	80072c6 <_printf_float+0xc2>
 8007612:	2301      	movs	r3, #1
 8007614:	4652      	mov	r2, sl
 8007616:	4631      	mov	r1, r6
 8007618:	4628      	mov	r0, r5
 800761a:	47b8      	blx	r7
 800761c:	3001      	adds	r0, #1
 800761e:	f43f ae52 	beq.w	80072c6 <_printf_float+0xc2>
 8007622:	f108 0801 	add.w	r8, r8, #1
 8007626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007628:	3b01      	subs	r3, #1
 800762a:	4543      	cmp	r3, r8
 800762c:	dcf1      	bgt.n	8007612 <_printf_float+0x40e>
 800762e:	464b      	mov	r3, r9
 8007630:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007634:	e6dc      	b.n	80073f0 <_printf_float+0x1ec>
 8007636:	f04f 0800 	mov.w	r8, #0
 800763a:	f104 0a1a 	add.w	sl, r4, #26
 800763e:	e7f2      	b.n	8007626 <_printf_float+0x422>
 8007640:	2301      	movs	r3, #1
 8007642:	4642      	mov	r2, r8
 8007644:	e7df      	b.n	8007606 <_printf_float+0x402>
 8007646:	2301      	movs	r3, #1
 8007648:	464a      	mov	r2, r9
 800764a:	4631      	mov	r1, r6
 800764c:	4628      	mov	r0, r5
 800764e:	47b8      	blx	r7
 8007650:	3001      	adds	r0, #1
 8007652:	f43f ae38 	beq.w	80072c6 <_printf_float+0xc2>
 8007656:	f108 0801 	add.w	r8, r8, #1
 800765a:	68e3      	ldr	r3, [r4, #12]
 800765c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800765e:	1a5b      	subs	r3, r3, r1
 8007660:	4543      	cmp	r3, r8
 8007662:	dcf0      	bgt.n	8007646 <_printf_float+0x442>
 8007664:	e6fa      	b.n	800745c <_printf_float+0x258>
 8007666:	f04f 0800 	mov.w	r8, #0
 800766a:	f104 0919 	add.w	r9, r4, #25
 800766e:	e7f4      	b.n	800765a <_printf_float+0x456>

08007670 <_printf_common>:
 8007670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007674:	4616      	mov	r6, r2
 8007676:	4699      	mov	r9, r3
 8007678:	688a      	ldr	r2, [r1, #8]
 800767a:	690b      	ldr	r3, [r1, #16]
 800767c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007680:	4293      	cmp	r3, r2
 8007682:	bfb8      	it	lt
 8007684:	4613      	movlt	r3, r2
 8007686:	6033      	str	r3, [r6, #0]
 8007688:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800768c:	4607      	mov	r7, r0
 800768e:	460c      	mov	r4, r1
 8007690:	b10a      	cbz	r2, 8007696 <_printf_common+0x26>
 8007692:	3301      	adds	r3, #1
 8007694:	6033      	str	r3, [r6, #0]
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	0699      	lsls	r1, r3, #26
 800769a:	bf42      	ittt	mi
 800769c:	6833      	ldrmi	r3, [r6, #0]
 800769e:	3302      	addmi	r3, #2
 80076a0:	6033      	strmi	r3, [r6, #0]
 80076a2:	6825      	ldr	r5, [r4, #0]
 80076a4:	f015 0506 	ands.w	r5, r5, #6
 80076a8:	d106      	bne.n	80076b8 <_printf_common+0x48>
 80076aa:	f104 0a19 	add.w	sl, r4, #25
 80076ae:	68e3      	ldr	r3, [r4, #12]
 80076b0:	6832      	ldr	r2, [r6, #0]
 80076b2:	1a9b      	subs	r3, r3, r2
 80076b4:	42ab      	cmp	r3, r5
 80076b6:	dc26      	bgt.n	8007706 <_printf_common+0x96>
 80076b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076bc:	1e13      	subs	r3, r2, #0
 80076be:	6822      	ldr	r2, [r4, #0]
 80076c0:	bf18      	it	ne
 80076c2:	2301      	movne	r3, #1
 80076c4:	0692      	lsls	r2, r2, #26
 80076c6:	d42b      	bmi.n	8007720 <_printf_common+0xb0>
 80076c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076cc:	4649      	mov	r1, r9
 80076ce:	4638      	mov	r0, r7
 80076d0:	47c0      	blx	r8
 80076d2:	3001      	adds	r0, #1
 80076d4:	d01e      	beq.n	8007714 <_printf_common+0xa4>
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	68e5      	ldr	r5, [r4, #12]
 80076da:	6832      	ldr	r2, [r6, #0]
 80076dc:	f003 0306 	and.w	r3, r3, #6
 80076e0:	2b04      	cmp	r3, #4
 80076e2:	bf08      	it	eq
 80076e4:	1aad      	subeq	r5, r5, r2
 80076e6:	68a3      	ldr	r3, [r4, #8]
 80076e8:	6922      	ldr	r2, [r4, #16]
 80076ea:	bf0c      	ite	eq
 80076ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076f0:	2500      	movne	r5, #0
 80076f2:	4293      	cmp	r3, r2
 80076f4:	bfc4      	itt	gt
 80076f6:	1a9b      	subgt	r3, r3, r2
 80076f8:	18ed      	addgt	r5, r5, r3
 80076fa:	2600      	movs	r6, #0
 80076fc:	341a      	adds	r4, #26
 80076fe:	42b5      	cmp	r5, r6
 8007700:	d11a      	bne.n	8007738 <_printf_common+0xc8>
 8007702:	2000      	movs	r0, #0
 8007704:	e008      	b.n	8007718 <_printf_common+0xa8>
 8007706:	2301      	movs	r3, #1
 8007708:	4652      	mov	r2, sl
 800770a:	4649      	mov	r1, r9
 800770c:	4638      	mov	r0, r7
 800770e:	47c0      	blx	r8
 8007710:	3001      	adds	r0, #1
 8007712:	d103      	bne.n	800771c <_printf_common+0xac>
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800771c:	3501      	adds	r5, #1
 800771e:	e7c6      	b.n	80076ae <_printf_common+0x3e>
 8007720:	18e1      	adds	r1, r4, r3
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	2030      	movs	r0, #48	; 0x30
 8007726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800772a:	4422      	add	r2, r4
 800772c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007734:	3302      	adds	r3, #2
 8007736:	e7c7      	b.n	80076c8 <_printf_common+0x58>
 8007738:	2301      	movs	r3, #1
 800773a:	4622      	mov	r2, r4
 800773c:	4649      	mov	r1, r9
 800773e:	4638      	mov	r0, r7
 8007740:	47c0      	blx	r8
 8007742:	3001      	adds	r0, #1
 8007744:	d0e6      	beq.n	8007714 <_printf_common+0xa4>
 8007746:	3601      	adds	r6, #1
 8007748:	e7d9      	b.n	80076fe <_printf_common+0x8e>
	...

0800774c <_printf_i>:
 800774c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007750:	460c      	mov	r4, r1
 8007752:	4691      	mov	r9, r2
 8007754:	7e27      	ldrb	r7, [r4, #24]
 8007756:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007758:	2f78      	cmp	r7, #120	; 0x78
 800775a:	4680      	mov	r8, r0
 800775c:	469a      	mov	sl, r3
 800775e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007762:	d807      	bhi.n	8007774 <_printf_i+0x28>
 8007764:	2f62      	cmp	r7, #98	; 0x62
 8007766:	d80a      	bhi.n	800777e <_printf_i+0x32>
 8007768:	2f00      	cmp	r7, #0
 800776a:	f000 80d8 	beq.w	800791e <_printf_i+0x1d2>
 800776e:	2f58      	cmp	r7, #88	; 0x58
 8007770:	f000 80a3 	beq.w	80078ba <_printf_i+0x16e>
 8007774:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800777c:	e03a      	b.n	80077f4 <_printf_i+0xa8>
 800777e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007782:	2b15      	cmp	r3, #21
 8007784:	d8f6      	bhi.n	8007774 <_printf_i+0x28>
 8007786:	a001      	add	r0, pc, #4	; (adr r0, 800778c <_printf_i+0x40>)
 8007788:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800778c:	080077e5 	.word	0x080077e5
 8007790:	080077f9 	.word	0x080077f9
 8007794:	08007775 	.word	0x08007775
 8007798:	08007775 	.word	0x08007775
 800779c:	08007775 	.word	0x08007775
 80077a0:	08007775 	.word	0x08007775
 80077a4:	080077f9 	.word	0x080077f9
 80077a8:	08007775 	.word	0x08007775
 80077ac:	08007775 	.word	0x08007775
 80077b0:	08007775 	.word	0x08007775
 80077b4:	08007775 	.word	0x08007775
 80077b8:	08007905 	.word	0x08007905
 80077bc:	08007829 	.word	0x08007829
 80077c0:	080078e7 	.word	0x080078e7
 80077c4:	08007775 	.word	0x08007775
 80077c8:	08007775 	.word	0x08007775
 80077cc:	08007927 	.word	0x08007927
 80077d0:	08007775 	.word	0x08007775
 80077d4:	08007829 	.word	0x08007829
 80077d8:	08007775 	.word	0x08007775
 80077dc:	08007775 	.word	0x08007775
 80077e0:	080078ef 	.word	0x080078ef
 80077e4:	680b      	ldr	r3, [r1, #0]
 80077e6:	1d1a      	adds	r2, r3, #4
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	600a      	str	r2, [r1, #0]
 80077ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80077f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077f4:	2301      	movs	r3, #1
 80077f6:	e0a3      	b.n	8007940 <_printf_i+0x1f4>
 80077f8:	6825      	ldr	r5, [r4, #0]
 80077fa:	6808      	ldr	r0, [r1, #0]
 80077fc:	062e      	lsls	r6, r5, #24
 80077fe:	f100 0304 	add.w	r3, r0, #4
 8007802:	d50a      	bpl.n	800781a <_printf_i+0xce>
 8007804:	6805      	ldr	r5, [r0, #0]
 8007806:	600b      	str	r3, [r1, #0]
 8007808:	2d00      	cmp	r5, #0
 800780a:	da03      	bge.n	8007814 <_printf_i+0xc8>
 800780c:	232d      	movs	r3, #45	; 0x2d
 800780e:	426d      	negs	r5, r5
 8007810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007814:	485e      	ldr	r0, [pc, #376]	; (8007990 <_printf_i+0x244>)
 8007816:	230a      	movs	r3, #10
 8007818:	e019      	b.n	800784e <_printf_i+0x102>
 800781a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800781e:	6805      	ldr	r5, [r0, #0]
 8007820:	600b      	str	r3, [r1, #0]
 8007822:	bf18      	it	ne
 8007824:	b22d      	sxthne	r5, r5
 8007826:	e7ef      	b.n	8007808 <_printf_i+0xbc>
 8007828:	680b      	ldr	r3, [r1, #0]
 800782a:	6825      	ldr	r5, [r4, #0]
 800782c:	1d18      	adds	r0, r3, #4
 800782e:	6008      	str	r0, [r1, #0]
 8007830:	0628      	lsls	r0, r5, #24
 8007832:	d501      	bpl.n	8007838 <_printf_i+0xec>
 8007834:	681d      	ldr	r5, [r3, #0]
 8007836:	e002      	b.n	800783e <_printf_i+0xf2>
 8007838:	0669      	lsls	r1, r5, #25
 800783a:	d5fb      	bpl.n	8007834 <_printf_i+0xe8>
 800783c:	881d      	ldrh	r5, [r3, #0]
 800783e:	4854      	ldr	r0, [pc, #336]	; (8007990 <_printf_i+0x244>)
 8007840:	2f6f      	cmp	r7, #111	; 0x6f
 8007842:	bf0c      	ite	eq
 8007844:	2308      	moveq	r3, #8
 8007846:	230a      	movne	r3, #10
 8007848:	2100      	movs	r1, #0
 800784a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800784e:	6866      	ldr	r6, [r4, #4]
 8007850:	60a6      	str	r6, [r4, #8]
 8007852:	2e00      	cmp	r6, #0
 8007854:	bfa2      	ittt	ge
 8007856:	6821      	ldrge	r1, [r4, #0]
 8007858:	f021 0104 	bicge.w	r1, r1, #4
 800785c:	6021      	strge	r1, [r4, #0]
 800785e:	b90d      	cbnz	r5, 8007864 <_printf_i+0x118>
 8007860:	2e00      	cmp	r6, #0
 8007862:	d04d      	beq.n	8007900 <_printf_i+0x1b4>
 8007864:	4616      	mov	r6, r2
 8007866:	fbb5 f1f3 	udiv	r1, r5, r3
 800786a:	fb03 5711 	mls	r7, r3, r1, r5
 800786e:	5dc7      	ldrb	r7, [r0, r7]
 8007870:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007874:	462f      	mov	r7, r5
 8007876:	42bb      	cmp	r3, r7
 8007878:	460d      	mov	r5, r1
 800787a:	d9f4      	bls.n	8007866 <_printf_i+0x11a>
 800787c:	2b08      	cmp	r3, #8
 800787e:	d10b      	bne.n	8007898 <_printf_i+0x14c>
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	07df      	lsls	r7, r3, #31
 8007884:	d508      	bpl.n	8007898 <_printf_i+0x14c>
 8007886:	6923      	ldr	r3, [r4, #16]
 8007888:	6861      	ldr	r1, [r4, #4]
 800788a:	4299      	cmp	r1, r3
 800788c:	bfde      	ittt	le
 800788e:	2330      	movle	r3, #48	; 0x30
 8007890:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007894:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007898:	1b92      	subs	r2, r2, r6
 800789a:	6122      	str	r2, [r4, #16]
 800789c:	f8cd a000 	str.w	sl, [sp]
 80078a0:	464b      	mov	r3, r9
 80078a2:	aa03      	add	r2, sp, #12
 80078a4:	4621      	mov	r1, r4
 80078a6:	4640      	mov	r0, r8
 80078a8:	f7ff fee2 	bl	8007670 <_printf_common>
 80078ac:	3001      	adds	r0, #1
 80078ae:	d14c      	bne.n	800794a <_printf_i+0x1fe>
 80078b0:	f04f 30ff 	mov.w	r0, #4294967295
 80078b4:	b004      	add	sp, #16
 80078b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ba:	4835      	ldr	r0, [pc, #212]	; (8007990 <_printf_i+0x244>)
 80078bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	680e      	ldr	r6, [r1, #0]
 80078c4:	061f      	lsls	r7, r3, #24
 80078c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80078ca:	600e      	str	r6, [r1, #0]
 80078cc:	d514      	bpl.n	80078f8 <_printf_i+0x1ac>
 80078ce:	07d9      	lsls	r1, r3, #31
 80078d0:	bf44      	itt	mi
 80078d2:	f043 0320 	orrmi.w	r3, r3, #32
 80078d6:	6023      	strmi	r3, [r4, #0]
 80078d8:	b91d      	cbnz	r5, 80078e2 <_printf_i+0x196>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	f023 0320 	bic.w	r3, r3, #32
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	2310      	movs	r3, #16
 80078e4:	e7b0      	b.n	8007848 <_printf_i+0xfc>
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	f043 0320 	orr.w	r3, r3, #32
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	2378      	movs	r3, #120	; 0x78
 80078f0:	4828      	ldr	r0, [pc, #160]	; (8007994 <_printf_i+0x248>)
 80078f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078f6:	e7e3      	b.n	80078c0 <_printf_i+0x174>
 80078f8:	065e      	lsls	r6, r3, #25
 80078fa:	bf48      	it	mi
 80078fc:	b2ad      	uxthmi	r5, r5
 80078fe:	e7e6      	b.n	80078ce <_printf_i+0x182>
 8007900:	4616      	mov	r6, r2
 8007902:	e7bb      	b.n	800787c <_printf_i+0x130>
 8007904:	680b      	ldr	r3, [r1, #0]
 8007906:	6826      	ldr	r6, [r4, #0]
 8007908:	6960      	ldr	r0, [r4, #20]
 800790a:	1d1d      	adds	r5, r3, #4
 800790c:	600d      	str	r5, [r1, #0]
 800790e:	0635      	lsls	r5, r6, #24
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	d501      	bpl.n	8007918 <_printf_i+0x1cc>
 8007914:	6018      	str	r0, [r3, #0]
 8007916:	e002      	b.n	800791e <_printf_i+0x1d2>
 8007918:	0671      	lsls	r1, r6, #25
 800791a:	d5fb      	bpl.n	8007914 <_printf_i+0x1c8>
 800791c:	8018      	strh	r0, [r3, #0]
 800791e:	2300      	movs	r3, #0
 8007920:	6123      	str	r3, [r4, #16]
 8007922:	4616      	mov	r6, r2
 8007924:	e7ba      	b.n	800789c <_printf_i+0x150>
 8007926:	680b      	ldr	r3, [r1, #0]
 8007928:	1d1a      	adds	r2, r3, #4
 800792a:	600a      	str	r2, [r1, #0]
 800792c:	681e      	ldr	r6, [r3, #0]
 800792e:	6862      	ldr	r2, [r4, #4]
 8007930:	2100      	movs	r1, #0
 8007932:	4630      	mov	r0, r6
 8007934:	f7f8 fc64 	bl	8000200 <memchr>
 8007938:	b108      	cbz	r0, 800793e <_printf_i+0x1f2>
 800793a:	1b80      	subs	r0, r0, r6
 800793c:	6060      	str	r0, [r4, #4]
 800793e:	6863      	ldr	r3, [r4, #4]
 8007940:	6123      	str	r3, [r4, #16]
 8007942:	2300      	movs	r3, #0
 8007944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007948:	e7a8      	b.n	800789c <_printf_i+0x150>
 800794a:	6923      	ldr	r3, [r4, #16]
 800794c:	4632      	mov	r2, r6
 800794e:	4649      	mov	r1, r9
 8007950:	4640      	mov	r0, r8
 8007952:	47d0      	blx	sl
 8007954:	3001      	adds	r0, #1
 8007956:	d0ab      	beq.n	80078b0 <_printf_i+0x164>
 8007958:	6823      	ldr	r3, [r4, #0]
 800795a:	079b      	lsls	r3, r3, #30
 800795c:	d413      	bmi.n	8007986 <_printf_i+0x23a>
 800795e:	68e0      	ldr	r0, [r4, #12]
 8007960:	9b03      	ldr	r3, [sp, #12]
 8007962:	4298      	cmp	r0, r3
 8007964:	bfb8      	it	lt
 8007966:	4618      	movlt	r0, r3
 8007968:	e7a4      	b.n	80078b4 <_printf_i+0x168>
 800796a:	2301      	movs	r3, #1
 800796c:	4632      	mov	r2, r6
 800796e:	4649      	mov	r1, r9
 8007970:	4640      	mov	r0, r8
 8007972:	47d0      	blx	sl
 8007974:	3001      	adds	r0, #1
 8007976:	d09b      	beq.n	80078b0 <_printf_i+0x164>
 8007978:	3501      	adds	r5, #1
 800797a:	68e3      	ldr	r3, [r4, #12]
 800797c:	9903      	ldr	r1, [sp, #12]
 800797e:	1a5b      	subs	r3, r3, r1
 8007980:	42ab      	cmp	r3, r5
 8007982:	dcf2      	bgt.n	800796a <_printf_i+0x21e>
 8007984:	e7eb      	b.n	800795e <_printf_i+0x212>
 8007986:	2500      	movs	r5, #0
 8007988:	f104 0619 	add.w	r6, r4, #25
 800798c:	e7f5      	b.n	800797a <_printf_i+0x22e>
 800798e:	bf00      	nop
 8007990:	08009a1a 	.word	0x08009a1a
 8007994:	08009a2b 	.word	0x08009a2b

08007998 <iprintf>:
 8007998:	b40f      	push	{r0, r1, r2, r3}
 800799a:	4b0a      	ldr	r3, [pc, #40]	; (80079c4 <iprintf+0x2c>)
 800799c:	b513      	push	{r0, r1, r4, lr}
 800799e:	681c      	ldr	r4, [r3, #0]
 80079a0:	b124      	cbz	r4, 80079ac <iprintf+0x14>
 80079a2:	69a3      	ldr	r3, [r4, #24]
 80079a4:	b913      	cbnz	r3, 80079ac <iprintf+0x14>
 80079a6:	4620      	mov	r0, r4
 80079a8:	f7ff f9fe 	bl	8006da8 <__sinit>
 80079ac:	ab05      	add	r3, sp, #20
 80079ae:	9a04      	ldr	r2, [sp, #16]
 80079b0:	68a1      	ldr	r1, [r4, #8]
 80079b2:	9301      	str	r3, [sp, #4]
 80079b4:	4620      	mov	r0, r4
 80079b6:	f001 fd29 	bl	800940c <_vfiprintf_r>
 80079ba:	b002      	add	sp, #8
 80079bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079c0:	b004      	add	sp, #16
 80079c2:	4770      	bx	lr
 80079c4:	200000e8 	.word	0x200000e8

080079c8 <_puts_r>:
 80079c8:	b570      	push	{r4, r5, r6, lr}
 80079ca:	460e      	mov	r6, r1
 80079cc:	4605      	mov	r5, r0
 80079ce:	b118      	cbz	r0, 80079d8 <_puts_r+0x10>
 80079d0:	6983      	ldr	r3, [r0, #24]
 80079d2:	b90b      	cbnz	r3, 80079d8 <_puts_r+0x10>
 80079d4:	f7ff f9e8 	bl	8006da8 <__sinit>
 80079d8:	69ab      	ldr	r3, [r5, #24]
 80079da:	68ac      	ldr	r4, [r5, #8]
 80079dc:	b913      	cbnz	r3, 80079e4 <_puts_r+0x1c>
 80079de:	4628      	mov	r0, r5
 80079e0:	f7ff f9e2 	bl	8006da8 <__sinit>
 80079e4:	4b2c      	ldr	r3, [pc, #176]	; (8007a98 <_puts_r+0xd0>)
 80079e6:	429c      	cmp	r4, r3
 80079e8:	d120      	bne.n	8007a2c <_puts_r+0x64>
 80079ea:	686c      	ldr	r4, [r5, #4]
 80079ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079ee:	07db      	lsls	r3, r3, #31
 80079f0:	d405      	bmi.n	80079fe <_puts_r+0x36>
 80079f2:	89a3      	ldrh	r3, [r4, #12]
 80079f4:	0598      	lsls	r0, r3, #22
 80079f6:	d402      	bmi.n	80079fe <_puts_r+0x36>
 80079f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079fa:	f7ff fa98 	bl	8006f2e <__retarget_lock_acquire_recursive>
 80079fe:	89a3      	ldrh	r3, [r4, #12]
 8007a00:	0719      	lsls	r1, r3, #28
 8007a02:	d51d      	bpl.n	8007a40 <_puts_r+0x78>
 8007a04:	6923      	ldr	r3, [r4, #16]
 8007a06:	b1db      	cbz	r3, 8007a40 <_puts_r+0x78>
 8007a08:	3e01      	subs	r6, #1
 8007a0a:	68a3      	ldr	r3, [r4, #8]
 8007a0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a10:	3b01      	subs	r3, #1
 8007a12:	60a3      	str	r3, [r4, #8]
 8007a14:	bb39      	cbnz	r1, 8007a66 <_puts_r+0x9e>
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	da38      	bge.n	8007a8c <_puts_r+0xc4>
 8007a1a:	4622      	mov	r2, r4
 8007a1c:	210a      	movs	r1, #10
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f000 f89c 	bl	8007b5c <__swbuf_r>
 8007a24:	3001      	adds	r0, #1
 8007a26:	d011      	beq.n	8007a4c <_puts_r+0x84>
 8007a28:	250a      	movs	r5, #10
 8007a2a:	e011      	b.n	8007a50 <_puts_r+0x88>
 8007a2c:	4b1b      	ldr	r3, [pc, #108]	; (8007a9c <_puts_r+0xd4>)
 8007a2e:	429c      	cmp	r4, r3
 8007a30:	d101      	bne.n	8007a36 <_puts_r+0x6e>
 8007a32:	68ac      	ldr	r4, [r5, #8]
 8007a34:	e7da      	b.n	80079ec <_puts_r+0x24>
 8007a36:	4b1a      	ldr	r3, [pc, #104]	; (8007aa0 <_puts_r+0xd8>)
 8007a38:	429c      	cmp	r4, r3
 8007a3a:	bf08      	it	eq
 8007a3c:	68ec      	ldreq	r4, [r5, #12]
 8007a3e:	e7d5      	b.n	80079ec <_puts_r+0x24>
 8007a40:	4621      	mov	r1, r4
 8007a42:	4628      	mov	r0, r5
 8007a44:	f000 f8ee 	bl	8007c24 <__swsetup_r>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d0dd      	beq.n	8007a08 <_puts_r+0x40>
 8007a4c:	f04f 35ff 	mov.w	r5, #4294967295
 8007a50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a52:	07da      	lsls	r2, r3, #31
 8007a54:	d405      	bmi.n	8007a62 <_puts_r+0x9a>
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	059b      	lsls	r3, r3, #22
 8007a5a:	d402      	bmi.n	8007a62 <_puts_r+0x9a>
 8007a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a5e:	f7ff fa67 	bl	8006f30 <__retarget_lock_release_recursive>
 8007a62:	4628      	mov	r0, r5
 8007a64:	bd70      	pop	{r4, r5, r6, pc}
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	da04      	bge.n	8007a74 <_puts_r+0xac>
 8007a6a:	69a2      	ldr	r2, [r4, #24]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	dc06      	bgt.n	8007a7e <_puts_r+0xb6>
 8007a70:	290a      	cmp	r1, #10
 8007a72:	d004      	beq.n	8007a7e <_puts_r+0xb6>
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	6022      	str	r2, [r4, #0]
 8007a7a:	7019      	strb	r1, [r3, #0]
 8007a7c:	e7c5      	b.n	8007a0a <_puts_r+0x42>
 8007a7e:	4622      	mov	r2, r4
 8007a80:	4628      	mov	r0, r5
 8007a82:	f000 f86b 	bl	8007b5c <__swbuf_r>
 8007a86:	3001      	adds	r0, #1
 8007a88:	d1bf      	bne.n	8007a0a <_puts_r+0x42>
 8007a8a:	e7df      	b.n	8007a4c <_puts_r+0x84>
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	250a      	movs	r5, #10
 8007a90:	1c5a      	adds	r2, r3, #1
 8007a92:	6022      	str	r2, [r4, #0]
 8007a94:	701d      	strb	r5, [r3, #0]
 8007a96:	e7db      	b.n	8007a50 <_puts_r+0x88>
 8007a98:	080099c4 	.word	0x080099c4
 8007a9c:	080099e4 	.word	0x080099e4
 8007aa0:	080099a4 	.word	0x080099a4

08007aa4 <puts>:
 8007aa4:	4b02      	ldr	r3, [pc, #8]	; (8007ab0 <puts+0xc>)
 8007aa6:	4601      	mov	r1, r0
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	f7ff bf8d 	b.w	80079c8 <_puts_r>
 8007aae:	bf00      	nop
 8007ab0:	200000e8 	.word	0x200000e8

08007ab4 <_sbrk_r>:
 8007ab4:	b538      	push	{r3, r4, r5, lr}
 8007ab6:	4d06      	ldr	r5, [pc, #24]	; (8007ad0 <_sbrk_r+0x1c>)
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4604      	mov	r4, r0
 8007abc:	4608      	mov	r0, r1
 8007abe:	602b      	str	r3, [r5, #0]
 8007ac0:	f7fa fad2 	bl	8002068 <_sbrk>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d102      	bne.n	8007ace <_sbrk_r+0x1a>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	b103      	cbz	r3, 8007ace <_sbrk_r+0x1a>
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	20004940 	.word	0x20004940

08007ad4 <__sread>:
 8007ad4:	b510      	push	{r4, lr}
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007adc:	f001 fdc6 	bl	800966c <_read_r>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	bfab      	itete	ge
 8007ae4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ae6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ae8:	181b      	addge	r3, r3, r0
 8007aea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007aee:	bfac      	ite	ge
 8007af0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007af2:	81a3      	strhlt	r3, [r4, #12]
 8007af4:	bd10      	pop	{r4, pc}

08007af6 <__swrite>:
 8007af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007afa:	461f      	mov	r7, r3
 8007afc:	898b      	ldrh	r3, [r1, #12]
 8007afe:	05db      	lsls	r3, r3, #23
 8007b00:	4605      	mov	r5, r0
 8007b02:	460c      	mov	r4, r1
 8007b04:	4616      	mov	r6, r2
 8007b06:	d505      	bpl.n	8007b14 <__swrite+0x1e>
 8007b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f001 f844 	bl	8008b9c <_lseek_r>
 8007b14:	89a3      	ldrh	r3, [r4, #12]
 8007b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b1e:	81a3      	strh	r3, [r4, #12]
 8007b20:	4632      	mov	r2, r6
 8007b22:	463b      	mov	r3, r7
 8007b24:	4628      	mov	r0, r5
 8007b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b2a:	f000 b869 	b.w	8007c00 <_write_r>

08007b2e <__sseek>:
 8007b2e:	b510      	push	{r4, lr}
 8007b30:	460c      	mov	r4, r1
 8007b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b36:	f001 f831 	bl	8008b9c <_lseek_r>
 8007b3a:	1c43      	adds	r3, r0, #1
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	bf15      	itete	ne
 8007b40:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b4a:	81a3      	strheq	r3, [r4, #12]
 8007b4c:	bf18      	it	ne
 8007b4e:	81a3      	strhne	r3, [r4, #12]
 8007b50:	bd10      	pop	{r4, pc}

08007b52 <__sclose>:
 8007b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b56:	f000 b8d3 	b.w	8007d00 <_close_r>
	...

08007b5c <__swbuf_r>:
 8007b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5e:	460e      	mov	r6, r1
 8007b60:	4614      	mov	r4, r2
 8007b62:	4605      	mov	r5, r0
 8007b64:	b118      	cbz	r0, 8007b6e <__swbuf_r+0x12>
 8007b66:	6983      	ldr	r3, [r0, #24]
 8007b68:	b90b      	cbnz	r3, 8007b6e <__swbuf_r+0x12>
 8007b6a:	f7ff f91d 	bl	8006da8 <__sinit>
 8007b6e:	4b21      	ldr	r3, [pc, #132]	; (8007bf4 <__swbuf_r+0x98>)
 8007b70:	429c      	cmp	r4, r3
 8007b72:	d12b      	bne.n	8007bcc <__swbuf_r+0x70>
 8007b74:	686c      	ldr	r4, [r5, #4]
 8007b76:	69a3      	ldr	r3, [r4, #24]
 8007b78:	60a3      	str	r3, [r4, #8]
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	071a      	lsls	r2, r3, #28
 8007b7e:	d52f      	bpl.n	8007be0 <__swbuf_r+0x84>
 8007b80:	6923      	ldr	r3, [r4, #16]
 8007b82:	b36b      	cbz	r3, 8007be0 <__swbuf_r+0x84>
 8007b84:	6923      	ldr	r3, [r4, #16]
 8007b86:	6820      	ldr	r0, [r4, #0]
 8007b88:	1ac0      	subs	r0, r0, r3
 8007b8a:	6963      	ldr	r3, [r4, #20]
 8007b8c:	b2f6      	uxtb	r6, r6
 8007b8e:	4283      	cmp	r3, r0
 8007b90:	4637      	mov	r7, r6
 8007b92:	dc04      	bgt.n	8007b9e <__swbuf_r+0x42>
 8007b94:	4621      	mov	r1, r4
 8007b96:	4628      	mov	r0, r5
 8007b98:	f000 ffc0 	bl	8008b1c <_fflush_r>
 8007b9c:	bb30      	cbnz	r0, 8007bec <__swbuf_r+0x90>
 8007b9e:	68a3      	ldr	r3, [r4, #8]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	60a3      	str	r3, [r4, #8]
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	6022      	str	r2, [r4, #0]
 8007baa:	701e      	strb	r6, [r3, #0]
 8007bac:	6963      	ldr	r3, [r4, #20]
 8007bae:	3001      	adds	r0, #1
 8007bb0:	4283      	cmp	r3, r0
 8007bb2:	d004      	beq.n	8007bbe <__swbuf_r+0x62>
 8007bb4:	89a3      	ldrh	r3, [r4, #12]
 8007bb6:	07db      	lsls	r3, r3, #31
 8007bb8:	d506      	bpl.n	8007bc8 <__swbuf_r+0x6c>
 8007bba:	2e0a      	cmp	r6, #10
 8007bbc:	d104      	bne.n	8007bc8 <__swbuf_r+0x6c>
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	f000 ffab 	bl	8008b1c <_fflush_r>
 8007bc6:	b988      	cbnz	r0, 8007bec <__swbuf_r+0x90>
 8007bc8:	4638      	mov	r0, r7
 8007bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bcc:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <__swbuf_r+0x9c>)
 8007bce:	429c      	cmp	r4, r3
 8007bd0:	d101      	bne.n	8007bd6 <__swbuf_r+0x7a>
 8007bd2:	68ac      	ldr	r4, [r5, #8]
 8007bd4:	e7cf      	b.n	8007b76 <__swbuf_r+0x1a>
 8007bd6:	4b09      	ldr	r3, [pc, #36]	; (8007bfc <__swbuf_r+0xa0>)
 8007bd8:	429c      	cmp	r4, r3
 8007bda:	bf08      	it	eq
 8007bdc:	68ec      	ldreq	r4, [r5, #12]
 8007bde:	e7ca      	b.n	8007b76 <__swbuf_r+0x1a>
 8007be0:	4621      	mov	r1, r4
 8007be2:	4628      	mov	r0, r5
 8007be4:	f000 f81e 	bl	8007c24 <__swsetup_r>
 8007be8:	2800      	cmp	r0, #0
 8007bea:	d0cb      	beq.n	8007b84 <__swbuf_r+0x28>
 8007bec:	f04f 37ff 	mov.w	r7, #4294967295
 8007bf0:	e7ea      	b.n	8007bc8 <__swbuf_r+0x6c>
 8007bf2:	bf00      	nop
 8007bf4:	080099c4 	.word	0x080099c4
 8007bf8:	080099e4 	.word	0x080099e4
 8007bfc:	080099a4 	.word	0x080099a4

08007c00 <_write_r>:
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	4d07      	ldr	r5, [pc, #28]	; (8007c20 <_write_r+0x20>)
 8007c04:	4604      	mov	r4, r0
 8007c06:	4608      	mov	r0, r1
 8007c08:	4611      	mov	r1, r2
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	602a      	str	r2, [r5, #0]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	f7f9 f9f6 	bl	8001000 <_write>
 8007c14:	1c43      	adds	r3, r0, #1
 8007c16:	d102      	bne.n	8007c1e <_write_r+0x1e>
 8007c18:	682b      	ldr	r3, [r5, #0]
 8007c1a:	b103      	cbz	r3, 8007c1e <_write_r+0x1e>
 8007c1c:	6023      	str	r3, [r4, #0]
 8007c1e:	bd38      	pop	{r3, r4, r5, pc}
 8007c20:	20004940 	.word	0x20004940

08007c24 <__swsetup_r>:
 8007c24:	4b32      	ldr	r3, [pc, #200]	; (8007cf0 <__swsetup_r+0xcc>)
 8007c26:	b570      	push	{r4, r5, r6, lr}
 8007c28:	681d      	ldr	r5, [r3, #0]
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	460c      	mov	r4, r1
 8007c2e:	b125      	cbz	r5, 8007c3a <__swsetup_r+0x16>
 8007c30:	69ab      	ldr	r3, [r5, #24]
 8007c32:	b913      	cbnz	r3, 8007c3a <__swsetup_r+0x16>
 8007c34:	4628      	mov	r0, r5
 8007c36:	f7ff f8b7 	bl	8006da8 <__sinit>
 8007c3a:	4b2e      	ldr	r3, [pc, #184]	; (8007cf4 <__swsetup_r+0xd0>)
 8007c3c:	429c      	cmp	r4, r3
 8007c3e:	d10f      	bne.n	8007c60 <__swsetup_r+0x3c>
 8007c40:	686c      	ldr	r4, [r5, #4]
 8007c42:	89a3      	ldrh	r3, [r4, #12]
 8007c44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c48:	0719      	lsls	r1, r3, #28
 8007c4a:	d42c      	bmi.n	8007ca6 <__swsetup_r+0x82>
 8007c4c:	06dd      	lsls	r5, r3, #27
 8007c4e:	d411      	bmi.n	8007c74 <__swsetup_r+0x50>
 8007c50:	2309      	movs	r3, #9
 8007c52:	6033      	str	r3, [r6, #0]
 8007c54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c58:	81a3      	strh	r3, [r4, #12]
 8007c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5e:	e03e      	b.n	8007cde <__swsetup_r+0xba>
 8007c60:	4b25      	ldr	r3, [pc, #148]	; (8007cf8 <__swsetup_r+0xd4>)
 8007c62:	429c      	cmp	r4, r3
 8007c64:	d101      	bne.n	8007c6a <__swsetup_r+0x46>
 8007c66:	68ac      	ldr	r4, [r5, #8]
 8007c68:	e7eb      	b.n	8007c42 <__swsetup_r+0x1e>
 8007c6a:	4b24      	ldr	r3, [pc, #144]	; (8007cfc <__swsetup_r+0xd8>)
 8007c6c:	429c      	cmp	r4, r3
 8007c6e:	bf08      	it	eq
 8007c70:	68ec      	ldreq	r4, [r5, #12]
 8007c72:	e7e6      	b.n	8007c42 <__swsetup_r+0x1e>
 8007c74:	0758      	lsls	r0, r3, #29
 8007c76:	d512      	bpl.n	8007c9e <__swsetup_r+0x7a>
 8007c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c7a:	b141      	cbz	r1, 8007c8e <__swsetup_r+0x6a>
 8007c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c80:	4299      	cmp	r1, r3
 8007c82:	d002      	beq.n	8007c8a <__swsetup_r+0x66>
 8007c84:	4630      	mov	r0, r6
 8007c86:	f7ff f973 	bl	8006f70 <_free_r>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	6363      	str	r3, [r4, #52]	; 0x34
 8007c8e:	89a3      	ldrh	r3, [r4, #12]
 8007c90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c94:	81a3      	strh	r3, [r4, #12]
 8007c96:	2300      	movs	r3, #0
 8007c98:	6063      	str	r3, [r4, #4]
 8007c9a:	6923      	ldr	r3, [r4, #16]
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	89a3      	ldrh	r3, [r4, #12]
 8007ca0:	f043 0308 	orr.w	r3, r3, #8
 8007ca4:	81a3      	strh	r3, [r4, #12]
 8007ca6:	6923      	ldr	r3, [r4, #16]
 8007ca8:	b94b      	cbnz	r3, 8007cbe <__swsetup_r+0x9a>
 8007caa:	89a3      	ldrh	r3, [r4, #12]
 8007cac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cb4:	d003      	beq.n	8007cbe <__swsetup_r+0x9a>
 8007cb6:	4621      	mov	r1, r4
 8007cb8:	4630      	mov	r0, r6
 8007cba:	f000 ffa5 	bl	8008c08 <__smakebuf_r>
 8007cbe:	89a0      	ldrh	r0, [r4, #12]
 8007cc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cc4:	f010 0301 	ands.w	r3, r0, #1
 8007cc8:	d00a      	beq.n	8007ce0 <__swsetup_r+0xbc>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60a3      	str	r3, [r4, #8]
 8007cce:	6963      	ldr	r3, [r4, #20]
 8007cd0:	425b      	negs	r3, r3
 8007cd2:	61a3      	str	r3, [r4, #24]
 8007cd4:	6923      	ldr	r3, [r4, #16]
 8007cd6:	b943      	cbnz	r3, 8007cea <__swsetup_r+0xc6>
 8007cd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cdc:	d1ba      	bne.n	8007c54 <__swsetup_r+0x30>
 8007cde:	bd70      	pop	{r4, r5, r6, pc}
 8007ce0:	0781      	lsls	r1, r0, #30
 8007ce2:	bf58      	it	pl
 8007ce4:	6963      	ldrpl	r3, [r4, #20]
 8007ce6:	60a3      	str	r3, [r4, #8]
 8007ce8:	e7f4      	b.n	8007cd4 <__swsetup_r+0xb0>
 8007cea:	2000      	movs	r0, #0
 8007cec:	e7f7      	b.n	8007cde <__swsetup_r+0xba>
 8007cee:	bf00      	nop
 8007cf0:	200000e8 	.word	0x200000e8
 8007cf4:	080099c4 	.word	0x080099c4
 8007cf8:	080099e4 	.word	0x080099e4
 8007cfc:	080099a4 	.word	0x080099a4

08007d00 <_close_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	4d06      	ldr	r5, [pc, #24]	; (8007d1c <_close_r+0x1c>)
 8007d04:	2300      	movs	r3, #0
 8007d06:	4604      	mov	r4, r0
 8007d08:	4608      	mov	r0, r1
 8007d0a:	602b      	str	r3, [r5, #0]
 8007d0c:	f7fa f977 	bl	8001ffe <_close>
 8007d10:	1c43      	adds	r3, r0, #1
 8007d12:	d102      	bne.n	8007d1a <_close_r+0x1a>
 8007d14:	682b      	ldr	r3, [r5, #0]
 8007d16:	b103      	cbz	r3, 8007d1a <_close_r+0x1a>
 8007d18:	6023      	str	r3, [r4, #0]
 8007d1a:	bd38      	pop	{r3, r4, r5, pc}
 8007d1c:	20004940 	.word	0x20004940

08007d20 <quorem>:
 8007d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d24:	6903      	ldr	r3, [r0, #16]
 8007d26:	690c      	ldr	r4, [r1, #16]
 8007d28:	42a3      	cmp	r3, r4
 8007d2a:	4607      	mov	r7, r0
 8007d2c:	f2c0 8081 	blt.w	8007e32 <quorem+0x112>
 8007d30:	3c01      	subs	r4, #1
 8007d32:	f101 0814 	add.w	r8, r1, #20
 8007d36:	f100 0514 	add.w	r5, r0, #20
 8007d3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d3e:	9301      	str	r3, [sp, #4]
 8007d40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d54:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d58:	d331      	bcc.n	8007dbe <quorem+0x9e>
 8007d5a:	f04f 0e00 	mov.w	lr, #0
 8007d5e:	4640      	mov	r0, r8
 8007d60:	46ac      	mov	ip, r5
 8007d62:	46f2      	mov	sl, lr
 8007d64:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d68:	b293      	uxth	r3, r2
 8007d6a:	fb06 e303 	mla	r3, r6, r3, lr
 8007d6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	ebaa 0303 	sub.w	r3, sl, r3
 8007d78:	0c12      	lsrs	r2, r2, #16
 8007d7a:	f8dc a000 	ldr.w	sl, [ip]
 8007d7e:	fb06 e202 	mla	r2, r6, r2, lr
 8007d82:	fa13 f38a 	uxtah	r3, r3, sl
 8007d86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d8a:	fa1f fa82 	uxth.w	sl, r2
 8007d8e:	f8dc 2000 	ldr.w	r2, [ip]
 8007d92:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007d96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007da0:	4581      	cmp	r9, r0
 8007da2:	f84c 3b04 	str.w	r3, [ip], #4
 8007da6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007daa:	d2db      	bcs.n	8007d64 <quorem+0x44>
 8007dac:	f855 300b 	ldr.w	r3, [r5, fp]
 8007db0:	b92b      	cbnz	r3, 8007dbe <quorem+0x9e>
 8007db2:	9b01      	ldr	r3, [sp, #4]
 8007db4:	3b04      	subs	r3, #4
 8007db6:	429d      	cmp	r5, r3
 8007db8:	461a      	mov	r2, r3
 8007dba:	d32e      	bcc.n	8007e1a <quorem+0xfa>
 8007dbc:	613c      	str	r4, [r7, #16]
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	f001 f9ec 	bl	800919c <__mcmp>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	db24      	blt.n	8007e12 <quorem+0xf2>
 8007dc8:	3601      	adds	r6, #1
 8007dca:	4628      	mov	r0, r5
 8007dcc:	f04f 0c00 	mov.w	ip, #0
 8007dd0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007dd4:	f8d0 e000 	ldr.w	lr, [r0]
 8007dd8:	b293      	uxth	r3, r2
 8007dda:	ebac 0303 	sub.w	r3, ip, r3
 8007dde:	0c12      	lsrs	r2, r2, #16
 8007de0:	fa13 f38e 	uxtah	r3, r3, lr
 8007de4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007de8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007df2:	45c1      	cmp	r9, r8
 8007df4:	f840 3b04 	str.w	r3, [r0], #4
 8007df8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007dfc:	d2e8      	bcs.n	8007dd0 <quorem+0xb0>
 8007dfe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e06:	b922      	cbnz	r2, 8007e12 <quorem+0xf2>
 8007e08:	3b04      	subs	r3, #4
 8007e0a:	429d      	cmp	r5, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	d30a      	bcc.n	8007e26 <quorem+0x106>
 8007e10:	613c      	str	r4, [r7, #16]
 8007e12:	4630      	mov	r0, r6
 8007e14:	b003      	add	sp, #12
 8007e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1a:	6812      	ldr	r2, [r2, #0]
 8007e1c:	3b04      	subs	r3, #4
 8007e1e:	2a00      	cmp	r2, #0
 8007e20:	d1cc      	bne.n	8007dbc <quorem+0x9c>
 8007e22:	3c01      	subs	r4, #1
 8007e24:	e7c7      	b.n	8007db6 <quorem+0x96>
 8007e26:	6812      	ldr	r2, [r2, #0]
 8007e28:	3b04      	subs	r3, #4
 8007e2a:	2a00      	cmp	r2, #0
 8007e2c:	d1f0      	bne.n	8007e10 <quorem+0xf0>
 8007e2e:	3c01      	subs	r4, #1
 8007e30:	e7eb      	b.n	8007e0a <quorem+0xea>
 8007e32:	2000      	movs	r0, #0
 8007e34:	e7ee      	b.n	8007e14 <quorem+0xf4>
	...

08007e38 <_dtoa_r>:
 8007e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	ed2d 8b02 	vpush	{d8}
 8007e40:	ec57 6b10 	vmov	r6, r7, d0
 8007e44:	b095      	sub	sp, #84	; 0x54
 8007e46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e4c:	9105      	str	r1, [sp, #20]
 8007e4e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007e52:	4604      	mov	r4, r0
 8007e54:	9209      	str	r2, [sp, #36]	; 0x24
 8007e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e58:	b975      	cbnz	r5, 8007e78 <_dtoa_r+0x40>
 8007e5a:	2010      	movs	r0, #16
 8007e5c:	f7ff f86a 	bl	8006f34 <malloc>
 8007e60:	4602      	mov	r2, r0
 8007e62:	6260      	str	r0, [r4, #36]	; 0x24
 8007e64:	b920      	cbnz	r0, 8007e70 <_dtoa_r+0x38>
 8007e66:	4bb2      	ldr	r3, [pc, #712]	; (8008130 <_dtoa_r+0x2f8>)
 8007e68:	21ea      	movs	r1, #234	; 0xea
 8007e6a:	48b2      	ldr	r0, [pc, #712]	; (8008134 <_dtoa_r+0x2fc>)
 8007e6c:	f001 fc10 	bl	8009690 <__assert_func>
 8007e70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e74:	6005      	str	r5, [r0, #0]
 8007e76:	60c5      	str	r5, [r0, #12]
 8007e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e7a:	6819      	ldr	r1, [r3, #0]
 8007e7c:	b151      	cbz	r1, 8007e94 <_dtoa_r+0x5c>
 8007e7e:	685a      	ldr	r2, [r3, #4]
 8007e80:	604a      	str	r2, [r1, #4]
 8007e82:	2301      	movs	r3, #1
 8007e84:	4093      	lsls	r3, r2
 8007e86:	608b      	str	r3, [r1, #8]
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f000 ff49 	bl	8008d20 <_Bfree>
 8007e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e90:	2200      	movs	r2, #0
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	1e3b      	subs	r3, r7, #0
 8007e96:	bfb9      	ittee	lt
 8007e98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e9c:	9303      	strlt	r3, [sp, #12]
 8007e9e:	2300      	movge	r3, #0
 8007ea0:	f8c8 3000 	strge.w	r3, [r8]
 8007ea4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007ea8:	4ba3      	ldr	r3, [pc, #652]	; (8008138 <_dtoa_r+0x300>)
 8007eaa:	bfbc      	itt	lt
 8007eac:	2201      	movlt	r2, #1
 8007eae:	f8c8 2000 	strlt.w	r2, [r8]
 8007eb2:	ea33 0309 	bics.w	r3, r3, r9
 8007eb6:	d11b      	bne.n	8007ef0 <_dtoa_r+0xb8>
 8007eb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007eba:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ec4:	4333      	orrs	r3, r6
 8007ec6:	f000 857a 	beq.w	80089be <_dtoa_r+0xb86>
 8007eca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ecc:	b963      	cbnz	r3, 8007ee8 <_dtoa_r+0xb0>
 8007ece:	4b9b      	ldr	r3, [pc, #620]	; (800813c <_dtoa_r+0x304>)
 8007ed0:	e024      	b.n	8007f1c <_dtoa_r+0xe4>
 8007ed2:	4b9b      	ldr	r3, [pc, #620]	; (8008140 <_dtoa_r+0x308>)
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	3308      	adds	r3, #8
 8007ed8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007eda:	6013      	str	r3, [r2, #0]
 8007edc:	9800      	ldr	r0, [sp, #0]
 8007ede:	b015      	add	sp, #84	; 0x54
 8007ee0:	ecbd 8b02 	vpop	{d8}
 8007ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee8:	4b94      	ldr	r3, [pc, #592]	; (800813c <_dtoa_r+0x304>)
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	3303      	adds	r3, #3
 8007eee:	e7f3      	b.n	8007ed8 <_dtoa_r+0xa0>
 8007ef0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	ec51 0b17 	vmov	r0, r1, d7
 8007efa:	2300      	movs	r3, #0
 8007efc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007f00:	f7f8 fdf2 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f04:	4680      	mov	r8, r0
 8007f06:	b158      	cbz	r0, 8007f20 <_dtoa_r+0xe8>
 8007f08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 8551 	beq.w	80089b8 <_dtoa_r+0xb80>
 8007f16:	488b      	ldr	r0, [pc, #556]	; (8008144 <_dtoa_r+0x30c>)
 8007f18:	6018      	str	r0, [r3, #0]
 8007f1a:	1e43      	subs	r3, r0, #1
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	e7dd      	b.n	8007edc <_dtoa_r+0xa4>
 8007f20:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007f24:	aa12      	add	r2, sp, #72	; 0x48
 8007f26:	a913      	add	r1, sp, #76	; 0x4c
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f001 f9db 	bl	80092e4 <__d2b>
 8007f2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f32:	4683      	mov	fp, r0
 8007f34:	2d00      	cmp	r5, #0
 8007f36:	d07c      	beq.n	8008032 <_dtoa_r+0x1fa>
 8007f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f3a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007f3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f42:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007f46:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007f4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007f4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f52:	4b7d      	ldr	r3, [pc, #500]	; (8008148 <_dtoa_r+0x310>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	4630      	mov	r0, r6
 8007f58:	4639      	mov	r1, r7
 8007f5a:	f7f8 f9a5 	bl	80002a8 <__aeabi_dsub>
 8007f5e:	a36e      	add	r3, pc, #440	; (adr r3, 8008118 <_dtoa_r+0x2e0>)
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f7f8 fb58 	bl	8000618 <__aeabi_dmul>
 8007f68:	a36d      	add	r3, pc, #436	; (adr r3, 8008120 <_dtoa_r+0x2e8>)
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	f7f8 f99d 	bl	80002ac <__adddf3>
 8007f72:	4606      	mov	r6, r0
 8007f74:	4628      	mov	r0, r5
 8007f76:	460f      	mov	r7, r1
 8007f78:	f7f8 fae4 	bl	8000544 <__aeabi_i2d>
 8007f7c:	a36a      	add	r3, pc, #424	; (adr r3, 8008128 <_dtoa_r+0x2f0>)
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	f7f8 fb49 	bl	8000618 <__aeabi_dmul>
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	4639      	mov	r1, r7
 8007f8e:	f7f8 f98d 	bl	80002ac <__adddf3>
 8007f92:	4606      	mov	r6, r0
 8007f94:	460f      	mov	r7, r1
 8007f96:	f7f8 fdef 	bl	8000b78 <__aeabi_d2iz>
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	4682      	mov	sl, r0
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	4639      	mov	r1, r7
 8007fa4:	f7f8 fdaa 	bl	8000afc <__aeabi_dcmplt>
 8007fa8:	b148      	cbz	r0, 8007fbe <_dtoa_r+0x186>
 8007faa:	4650      	mov	r0, sl
 8007fac:	f7f8 faca 	bl	8000544 <__aeabi_i2d>
 8007fb0:	4632      	mov	r2, r6
 8007fb2:	463b      	mov	r3, r7
 8007fb4:	f7f8 fd98 	bl	8000ae8 <__aeabi_dcmpeq>
 8007fb8:	b908      	cbnz	r0, 8007fbe <_dtoa_r+0x186>
 8007fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fbe:	f1ba 0f16 	cmp.w	sl, #22
 8007fc2:	d854      	bhi.n	800806e <_dtoa_r+0x236>
 8007fc4:	4b61      	ldr	r3, [pc, #388]	; (800814c <_dtoa_r+0x314>)
 8007fc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007fd2:	f7f8 fd93 	bl	8000afc <__aeabi_dcmplt>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d04b      	beq.n	8008072 <_dtoa_r+0x23a>
 8007fda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fde:	2300      	movs	r3, #0
 8007fe0:	930e      	str	r3, [sp, #56]	; 0x38
 8007fe2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fe4:	1b5d      	subs	r5, r3, r5
 8007fe6:	1e6b      	subs	r3, r5, #1
 8007fe8:	9304      	str	r3, [sp, #16]
 8007fea:	bf43      	ittte	mi
 8007fec:	2300      	movmi	r3, #0
 8007fee:	f1c5 0801 	rsbmi	r8, r5, #1
 8007ff2:	9304      	strmi	r3, [sp, #16]
 8007ff4:	f04f 0800 	movpl.w	r8, #0
 8007ff8:	f1ba 0f00 	cmp.w	sl, #0
 8007ffc:	db3b      	blt.n	8008076 <_dtoa_r+0x23e>
 8007ffe:	9b04      	ldr	r3, [sp, #16]
 8008000:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008004:	4453      	add	r3, sl
 8008006:	9304      	str	r3, [sp, #16]
 8008008:	2300      	movs	r3, #0
 800800a:	9306      	str	r3, [sp, #24]
 800800c:	9b05      	ldr	r3, [sp, #20]
 800800e:	2b09      	cmp	r3, #9
 8008010:	d869      	bhi.n	80080e6 <_dtoa_r+0x2ae>
 8008012:	2b05      	cmp	r3, #5
 8008014:	bfc4      	itt	gt
 8008016:	3b04      	subgt	r3, #4
 8008018:	9305      	strgt	r3, [sp, #20]
 800801a:	9b05      	ldr	r3, [sp, #20]
 800801c:	f1a3 0302 	sub.w	r3, r3, #2
 8008020:	bfcc      	ite	gt
 8008022:	2500      	movgt	r5, #0
 8008024:	2501      	movle	r5, #1
 8008026:	2b03      	cmp	r3, #3
 8008028:	d869      	bhi.n	80080fe <_dtoa_r+0x2c6>
 800802a:	e8df f003 	tbb	[pc, r3]
 800802e:	4e2c      	.short	0x4e2c
 8008030:	5a4c      	.short	0x5a4c
 8008032:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008036:	441d      	add	r5, r3
 8008038:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800803c:	2b20      	cmp	r3, #32
 800803e:	bfc1      	itttt	gt
 8008040:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008044:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008048:	fa09 f303 	lslgt.w	r3, r9, r3
 800804c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008050:	bfda      	itte	le
 8008052:	f1c3 0320 	rsble	r3, r3, #32
 8008056:	fa06 f003 	lslle.w	r0, r6, r3
 800805a:	4318      	orrgt	r0, r3
 800805c:	f7f8 fa62 	bl	8000524 <__aeabi_ui2d>
 8008060:	2301      	movs	r3, #1
 8008062:	4606      	mov	r6, r0
 8008064:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008068:	3d01      	subs	r5, #1
 800806a:	9310      	str	r3, [sp, #64]	; 0x40
 800806c:	e771      	b.n	8007f52 <_dtoa_r+0x11a>
 800806e:	2301      	movs	r3, #1
 8008070:	e7b6      	b.n	8007fe0 <_dtoa_r+0x1a8>
 8008072:	900e      	str	r0, [sp, #56]	; 0x38
 8008074:	e7b5      	b.n	8007fe2 <_dtoa_r+0x1aa>
 8008076:	f1ca 0300 	rsb	r3, sl, #0
 800807a:	9306      	str	r3, [sp, #24]
 800807c:	2300      	movs	r3, #0
 800807e:	eba8 080a 	sub.w	r8, r8, sl
 8008082:	930d      	str	r3, [sp, #52]	; 0x34
 8008084:	e7c2      	b.n	800800c <_dtoa_r+0x1d4>
 8008086:	2300      	movs	r3, #0
 8008088:	9308      	str	r3, [sp, #32]
 800808a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800808c:	2b00      	cmp	r3, #0
 800808e:	dc39      	bgt.n	8008104 <_dtoa_r+0x2cc>
 8008090:	f04f 0901 	mov.w	r9, #1
 8008094:	f8cd 9004 	str.w	r9, [sp, #4]
 8008098:	464b      	mov	r3, r9
 800809a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800809e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80080a0:	2200      	movs	r2, #0
 80080a2:	6042      	str	r2, [r0, #4]
 80080a4:	2204      	movs	r2, #4
 80080a6:	f102 0614 	add.w	r6, r2, #20
 80080aa:	429e      	cmp	r6, r3
 80080ac:	6841      	ldr	r1, [r0, #4]
 80080ae:	d92f      	bls.n	8008110 <_dtoa_r+0x2d8>
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 fdf5 	bl	8008ca0 <_Balloc>
 80080b6:	9000      	str	r0, [sp, #0]
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d14b      	bne.n	8008154 <_dtoa_r+0x31c>
 80080bc:	4b24      	ldr	r3, [pc, #144]	; (8008150 <_dtoa_r+0x318>)
 80080be:	4602      	mov	r2, r0
 80080c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80080c4:	e6d1      	b.n	8007e6a <_dtoa_r+0x32>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e7de      	b.n	8008088 <_dtoa_r+0x250>
 80080ca:	2300      	movs	r3, #0
 80080cc:	9308      	str	r3, [sp, #32]
 80080ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d0:	eb0a 0903 	add.w	r9, sl, r3
 80080d4:	f109 0301 	add.w	r3, r9, #1
 80080d8:	2b01      	cmp	r3, #1
 80080da:	9301      	str	r3, [sp, #4]
 80080dc:	bfb8      	it	lt
 80080de:	2301      	movlt	r3, #1
 80080e0:	e7dd      	b.n	800809e <_dtoa_r+0x266>
 80080e2:	2301      	movs	r3, #1
 80080e4:	e7f2      	b.n	80080cc <_dtoa_r+0x294>
 80080e6:	2501      	movs	r5, #1
 80080e8:	2300      	movs	r3, #0
 80080ea:	9305      	str	r3, [sp, #20]
 80080ec:	9508      	str	r5, [sp, #32]
 80080ee:	f04f 39ff 	mov.w	r9, #4294967295
 80080f2:	2200      	movs	r2, #0
 80080f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80080f8:	2312      	movs	r3, #18
 80080fa:	9209      	str	r2, [sp, #36]	; 0x24
 80080fc:	e7cf      	b.n	800809e <_dtoa_r+0x266>
 80080fe:	2301      	movs	r3, #1
 8008100:	9308      	str	r3, [sp, #32]
 8008102:	e7f4      	b.n	80080ee <_dtoa_r+0x2b6>
 8008104:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008108:	f8cd 9004 	str.w	r9, [sp, #4]
 800810c:	464b      	mov	r3, r9
 800810e:	e7c6      	b.n	800809e <_dtoa_r+0x266>
 8008110:	3101      	adds	r1, #1
 8008112:	6041      	str	r1, [r0, #4]
 8008114:	0052      	lsls	r2, r2, #1
 8008116:	e7c6      	b.n	80080a6 <_dtoa_r+0x26e>
 8008118:	636f4361 	.word	0x636f4361
 800811c:	3fd287a7 	.word	0x3fd287a7
 8008120:	8b60c8b3 	.word	0x8b60c8b3
 8008124:	3fc68a28 	.word	0x3fc68a28
 8008128:	509f79fb 	.word	0x509f79fb
 800812c:	3fd34413 	.word	0x3fd34413
 8008130:	08009a49 	.word	0x08009a49
 8008134:	08009a60 	.word	0x08009a60
 8008138:	7ff00000 	.word	0x7ff00000
 800813c:	08009a45 	.word	0x08009a45
 8008140:	08009a3c 	.word	0x08009a3c
 8008144:	08009a19 	.word	0x08009a19
 8008148:	3ff80000 	.word	0x3ff80000
 800814c:	08009b58 	.word	0x08009b58
 8008150:	08009abf 	.word	0x08009abf
 8008154:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008156:	9a00      	ldr	r2, [sp, #0]
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	9b01      	ldr	r3, [sp, #4]
 800815c:	2b0e      	cmp	r3, #14
 800815e:	f200 80ad 	bhi.w	80082bc <_dtoa_r+0x484>
 8008162:	2d00      	cmp	r5, #0
 8008164:	f000 80aa 	beq.w	80082bc <_dtoa_r+0x484>
 8008168:	f1ba 0f00 	cmp.w	sl, #0
 800816c:	dd36      	ble.n	80081dc <_dtoa_r+0x3a4>
 800816e:	4ac3      	ldr	r2, [pc, #780]	; (800847c <_dtoa_r+0x644>)
 8008170:	f00a 030f 	and.w	r3, sl, #15
 8008174:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008178:	ed93 7b00 	vldr	d7, [r3]
 800817c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008180:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008184:	eeb0 8a47 	vmov.f32	s16, s14
 8008188:	eef0 8a67 	vmov.f32	s17, s15
 800818c:	d016      	beq.n	80081bc <_dtoa_r+0x384>
 800818e:	4bbc      	ldr	r3, [pc, #752]	; (8008480 <_dtoa_r+0x648>)
 8008190:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008194:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008198:	f7f8 fb68 	bl	800086c <__aeabi_ddiv>
 800819c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081a0:	f007 070f 	and.w	r7, r7, #15
 80081a4:	2503      	movs	r5, #3
 80081a6:	4eb6      	ldr	r6, [pc, #728]	; (8008480 <_dtoa_r+0x648>)
 80081a8:	b957      	cbnz	r7, 80081c0 <_dtoa_r+0x388>
 80081aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ae:	ec53 2b18 	vmov	r2, r3, d8
 80081b2:	f7f8 fb5b 	bl	800086c <__aeabi_ddiv>
 80081b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081ba:	e029      	b.n	8008210 <_dtoa_r+0x3d8>
 80081bc:	2502      	movs	r5, #2
 80081be:	e7f2      	b.n	80081a6 <_dtoa_r+0x36e>
 80081c0:	07f9      	lsls	r1, r7, #31
 80081c2:	d508      	bpl.n	80081d6 <_dtoa_r+0x39e>
 80081c4:	ec51 0b18 	vmov	r0, r1, d8
 80081c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081cc:	f7f8 fa24 	bl	8000618 <__aeabi_dmul>
 80081d0:	ec41 0b18 	vmov	d8, r0, r1
 80081d4:	3501      	adds	r5, #1
 80081d6:	107f      	asrs	r7, r7, #1
 80081d8:	3608      	adds	r6, #8
 80081da:	e7e5      	b.n	80081a8 <_dtoa_r+0x370>
 80081dc:	f000 80a6 	beq.w	800832c <_dtoa_r+0x4f4>
 80081e0:	f1ca 0600 	rsb	r6, sl, #0
 80081e4:	4ba5      	ldr	r3, [pc, #660]	; (800847c <_dtoa_r+0x644>)
 80081e6:	4fa6      	ldr	r7, [pc, #664]	; (8008480 <_dtoa_r+0x648>)
 80081e8:	f006 020f 	and.w	r2, r6, #15
 80081ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80081f8:	f7f8 fa0e 	bl	8000618 <__aeabi_dmul>
 80081fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008200:	1136      	asrs	r6, r6, #4
 8008202:	2300      	movs	r3, #0
 8008204:	2502      	movs	r5, #2
 8008206:	2e00      	cmp	r6, #0
 8008208:	f040 8085 	bne.w	8008316 <_dtoa_r+0x4de>
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1d2      	bne.n	80081b6 <_dtoa_r+0x37e>
 8008210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 808c 	beq.w	8008330 <_dtoa_r+0x4f8>
 8008218:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800821c:	4b99      	ldr	r3, [pc, #612]	; (8008484 <_dtoa_r+0x64c>)
 800821e:	2200      	movs	r2, #0
 8008220:	4630      	mov	r0, r6
 8008222:	4639      	mov	r1, r7
 8008224:	f7f8 fc6a 	bl	8000afc <__aeabi_dcmplt>
 8008228:	2800      	cmp	r0, #0
 800822a:	f000 8081 	beq.w	8008330 <_dtoa_r+0x4f8>
 800822e:	9b01      	ldr	r3, [sp, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d07d      	beq.n	8008330 <_dtoa_r+0x4f8>
 8008234:	f1b9 0f00 	cmp.w	r9, #0
 8008238:	dd3c      	ble.n	80082b4 <_dtoa_r+0x47c>
 800823a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800823e:	9307      	str	r3, [sp, #28]
 8008240:	2200      	movs	r2, #0
 8008242:	4b91      	ldr	r3, [pc, #580]	; (8008488 <_dtoa_r+0x650>)
 8008244:	4630      	mov	r0, r6
 8008246:	4639      	mov	r1, r7
 8008248:	f7f8 f9e6 	bl	8000618 <__aeabi_dmul>
 800824c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008250:	3501      	adds	r5, #1
 8008252:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008256:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800825a:	4628      	mov	r0, r5
 800825c:	f7f8 f972 	bl	8000544 <__aeabi_i2d>
 8008260:	4632      	mov	r2, r6
 8008262:	463b      	mov	r3, r7
 8008264:	f7f8 f9d8 	bl	8000618 <__aeabi_dmul>
 8008268:	4b88      	ldr	r3, [pc, #544]	; (800848c <_dtoa_r+0x654>)
 800826a:	2200      	movs	r2, #0
 800826c:	f7f8 f81e 	bl	80002ac <__adddf3>
 8008270:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008274:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008278:	9303      	str	r3, [sp, #12]
 800827a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800827c:	2b00      	cmp	r3, #0
 800827e:	d15c      	bne.n	800833a <_dtoa_r+0x502>
 8008280:	4b83      	ldr	r3, [pc, #524]	; (8008490 <_dtoa_r+0x658>)
 8008282:	2200      	movs	r2, #0
 8008284:	4630      	mov	r0, r6
 8008286:	4639      	mov	r1, r7
 8008288:	f7f8 f80e 	bl	80002a8 <__aeabi_dsub>
 800828c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008290:	4606      	mov	r6, r0
 8008292:	460f      	mov	r7, r1
 8008294:	f7f8 fc50 	bl	8000b38 <__aeabi_dcmpgt>
 8008298:	2800      	cmp	r0, #0
 800829a:	f040 8296 	bne.w	80087ca <_dtoa_r+0x992>
 800829e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80082a2:	4630      	mov	r0, r6
 80082a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082a8:	4639      	mov	r1, r7
 80082aa:	f7f8 fc27 	bl	8000afc <__aeabi_dcmplt>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f040 8288 	bne.w	80087c4 <_dtoa_r+0x98c>
 80082b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80082b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f2c0 8158 	blt.w	8008574 <_dtoa_r+0x73c>
 80082c4:	f1ba 0f0e 	cmp.w	sl, #14
 80082c8:	f300 8154 	bgt.w	8008574 <_dtoa_r+0x73c>
 80082cc:	4b6b      	ldr	r3, [pc, #428]	; (800847c <_dtoa_r+0x644>)
 80082ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80082d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f280 80e3 	bge.w	80084a4 <_dtoa_r+0x66c>
 80082de:	9b01      	ldr	r3, [sp, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f300 80df 	bgt.w	80084a4 <_dtoa_r+0x66c>
 80082e6:	f040 826d 	bne.w	80087c4 <_dtoa_r+0x98c>
 80082ea:	4b69      	ldr	r3, [pc, #420]	; (8008490 <_dtoa_r+0x658>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	4640      	mov	r0, r8
 80082f0:	4649      	mov	r1, r9
 80082f2:	f7f8 f991 	bl	8000618 <__aeabi_dmul>
 80082f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082fa:	f7f8 fc13 	bl	8000b24 <__aeabi_dcmpge>
 80082fe:	9e01      	ldr	r6, [sp, #4]
 8008300:	4637      	mov	r7, r6
 8008302:	2800      	cmp	r0, #0
 8008304:	f040 8243 	bne.w	800878e <_dtoa_r+0x956>
 8008308:	9d00      	ldr	r5, [sp, #0]
 800830a:	2331      	movs	r3, #49	; 0x31
 800830c:	f805 3b01 	strb.w	r3, [r5], #1
 8008310:	f10a 0a01 	add.w	sl, sl, #1
 8008314:	e23f      	b.n	8008796 <_dtoa_r+0x95e>
 8008316:	07f2      	lsls	r2, r6, #31
 8008318:	d505      	bpl.n	8008326 <_dtoa_r+0x4ee>
 800831a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800831e:	f7f8 f97b 	bl	8000618 <__aeabi_dmul>
 8008322:	3501      	adds	r5, #1
 8008324:	2301      	movs	r3, #1
 8008326:	1076      	asrs	r6, r6, #1
 8008328:	3708      	adds	r7, #8
 800832a:	e76c      	b.n	8008206 <_dtoa_r+0x3ce>
 800832c:	2502      	movs	r5, #2
 800832e:	e76f      	b.n	8008210 <_dtoa_r+0x3d8>
 8008330:	9b01      	ldr	r3, [sp, #4]
 8008332:	f8cd a01c 	str.w	sl, [sp, #28]
 8008336:	930c      	str	r3, [sp, #48]	; 0x30
 8008338:	e78d      	b.n	8008256 <_dtoa_r+0x41e>
 800833a:	9900      	ldr	r1, [sp, #0]
 800833c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800833e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008340:	4b4e      	ldr	r3, [pc, #312]	; (800847c <_dtoa_r+0x644>)
 8008342:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008346:	4401      	add	r1, r0
 8008348:	9102      	str	r1, [sp, #8]
 800834a:	9908      	ldr	r1, [sp, #32]
 800834c:	eeb0 8a47 	vmov.f32	s16, s14
 8008350:	eef0 8a67 	vmov.f32	s17, s15
 8008354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008358:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800835c:	2900      	cmp	r1, #0
 800835e:	d045      	beq.n	80083ec <_dtoa_r+0x5b4>
 8008360:	494c      	ldr	r1, [pc, #304]	; (8008494 <_dtoa_r+0x65c>)
 8008362:	2000      	movs	r0, #0
 8008364:	f7f8 fa82 	bl	800086c <__aeabi_ddiv>
 8008368:	ec53 2b18 	vmov	r2, r3, d8
 800836c:	f7f7 ff9c 	bl	80002a8 <__aeabi_dsub>
 8008370:	9d00      	ldr	r5, [sp, #0]
 8008372:	ec41 0b18 	vmov	d8, r0, r1
 8008376:	4639      	mov	r1, r7
 8008378:	4630      	mov	r0, r6
 800837a:	f7f8 fbfd 	bl	8000b78 <__aeabi_d2iz>
 800837e:	900c      	str	r0, [sp, #48]	; 0x30
 8008380:	f7f8 f8e0 	bl	8000544 <__aeabi_i2d>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	4630      	mov	r0, r6
 800838a:	4639      	mov	r1, r7
 800838c:	f7f7 ff8c 	bl	80002a8 <__aeabi_dsub>
 8008390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008392:	3330      	adds	r3, #48	; 0x30
 8008394:	f805 3b01 	strb.w	r3, [r5], #1
 8008398:	ec53 2b18 	vmov	r2, r3, d8
 800839c:	4606      	mov	r6, r0
 800839e:	460f      	mov	r7, r1
 80083a0:	f7f8 fbac 	bl	8000afc <__aeabi_dcmplt>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d165      	bne.n	8008474 <_dtoa_r+0x63c>
 80083a8:	4632      	mov	r2, r6
 80083aa:	463b      	mov	r3, r7
 80083ac:	4935      	ldr	r1, [pc, #212]	; (8008484 <_dtoa_r+0x64c>)
 80083ae:	2000      	movs	r0, #0
 80083b0:	f7f7 ff7a 	bl	80002a8 <__aeabi_dsub>
 80083b4:	ec53 2b18 	vmov	r2, r3, d8
 80083b8:	f7f8 fba0 	bl	8000afc <__aeabi_dcmplt>
 80083bc:	2800      	cmp	r0, #0
 80083be:	f040 80b9 	bne.w	8008534 <_dtoa_r+0x6fc>
 80083c2:	9b02      	ldr	r3, [sp, #8]
 80083c4:	429d      	cmp	r5, r3
 80083c6:	f43f af75 	beq.w	80082b4 <_dtoa_r+0x47c>
 80083ca:	4b2f      	ldr	r3, [pc, #188]	; (8008488 <_dtoa_r+0x650>)
 80083cc:	ec51 0b18 	vmov	r0, r1, d8
 80083d0:	2200      	movs	r2, #0
 80083d2:	f7f8 f921 	bl	8000618 <__aeabi_dmul>
 80083d6:	4b2c      	ldr	r3, [pc, #176]	; (8008488 <_dtoa_r+0x650>)
 80083d8:	ec41 0b18 	vmov	d8, r0, r1
 80083dc:	2200      	movs	r2, #0
 80083de:	4630      	mov	r0, r6
 80083e0:	4639      	mov	r1, r7
 80083e2:	f7f8 f919 	bl	8000618 <__aeabi_dmul>
 80083e6:	4606      	mov	r6, r0
 80083e8:	460f      	mov	r7, r1
 80083ea:	e7c4      	b.n	8008376 <_dtoa_r+0x53e>
 80083ec:	ec51 0b17 	vmov	r0, r1, d7
 80083f0:	f7f8 f912 	bl	8000618 <__aeabi_dmul>
 80083f4:	9b02      	ldr	r3, [sp, #8]
 80083f6:	9d00      	ldr	r5, [sp, #0]
 80083f8:	930c      	str	r3, [sp, #48]	; 0x30
 80083fa:	ec41 0b18 	vmov	d8, r0, r1
 80083fe:	4639      	mov	r1, r7
 8008400:	4630      	mov	r0, r6
 8008402:	f7f8 fbb9 	bl	8000b78 <__aeabi_d2iz>
 8008406:	9011      	str	r0, [sp, #68]	; 0x44
 8008408:	f7f8 f89c 	bl	8000544 <__aeabi_i2d>
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	4630      	mov	r0, r6
 8008412:	4639      	mov	r1, r7
 8008414:	f7f7 ff48 	bl	80002a8 <__aeabi_dsub>
 8008418:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800841a:	3330      	adds	r3, #48	; 0x30
 800841c:	f805 3b01 	strb.w	r3, [r5], #1
 8008420:	9b02      	ldr	r3, [sp, #8]
 8008422:	429d      	cmp	r5, r3
 8008424:	4606      	mov	r6, r0
 8008426:	460f      	mov	r7, r1
 8008428:	f04f 0200 	mov.w	r2, #0
 800842c:	d134      	bne.n	8008498 <_dtoa_r+0x660>
 800842e:	4b19      	ldr	r3, [pc, #100]	; (8008494 <_dtoa_r+0x65c>)
 8008430:	ec51 0b18 	vmov	r0, r1, d8
 8008434:	f7f7 ff3a 	bl	80002ac <__adddf3>
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	4630      	mov	r0, r6
 800843e:	4639      	mov	r1, r7
 8008440:	f7f8 fb7a 	bl	8000b38 <__aeabi_dcmpgt>
 8008444:	2800      	cmp	r0, #0
 8008446:	d175      	bne.n	8008534 <_dtoa_r+0x6fc>
 8008448:	ec53 2b18 	vmov	r2, r3, d8
 800844c:	4911      	ldr	r1, [pc, #68]	; (8008494 <_dtoa_r+0x65c>)
 800844e:	2000      	movs	r0, #0
 8008450:	f7f7 ff2a 	bl	80002a8 <__aeabi_dsub>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	4630      	mov	r0, r6
 800845a:	4639      	mov	r1, r7
 800845c:	f7f8 fb4e 	bl	8000afc <__aeabi_dcmplt>
 8008460:	2800      	cmp	r0, #0
 8008462:	f43f af27 	beq.w	80082b4 <_dtoa_r+0x47c>
 8008466:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008468:	1e6b      	subs	r3, r5, #1
 800846a:	930c      	str	r3, [sp, #48]	; 0x30
 800846c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008470:	2b30      	cmp	r3, #48	; 0x30
 8008472:	d0f8      	beq.n	8008466 <_dtoa_r+0x62e>
 8008474:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008478:	e04a      	b.n	8008510 <_dtoa_r+0x6d8>
 800847a:	bf00      	nop
 800847c:	08009b58 	.word	0x08009b58
 8008480:	08009b30 	.word	0x08009b30
 8008484:	3ff00000 	.word	0x3ff00000
 8008488:	40240000 	.word	0x40240000
 800848c:	401c0000 	.word	0x401c0000
 8008490:	40140000 	.word	0x40140000
 8008494:	3fe00000 	.word	0x3fe00000
 8008498:	4baf      	ldr	r3, [pc, #700]	; (8008758 <_dtoa_r+0x920>)
 800849a:	f7f8 f8bd 	bl	8000618 <__aeabi_dmul>
 800849e:	4606      	mov	r6, r0
 80084a0:	460f      	mov	r7, r1
 80084a2:	e7ac      	b.n	80083fe <_dtoa_r+0x5c6>
 80084a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80084a8:	9d00      	ldr	r5, [sp, #0]
 80084aa:	4642      	mov	r2, r8
 80084ac:	464b      	mov	r3, r9
 80084ae:	4630      	mov	r0, r6
 80084b0:	4639      	mov	r1, r7
 80084b2:	f7f8 f9db 	bl	800086c <__aeabi_ddiv>
 80084b6:	f7f8 fb5f 	bl	8000b78 <__aeabi_d2iz>
 80084ba:	9002      	str	r0, [sp, #8]
 80084bc:	f7f8 f842 	bl	8000544 <__aeabi_i2d>
 80084c0:	4642      	mov	r2, r8
 80084c2:	464b      	mov	r3, r9
 80084c4:	f7f8 f8a8 	bl	8000618 <__aeabi_dmul>
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	4630      	mov	r0, r6
 80084ce:	4639      	mov	r1, r7
 80084d0:	f7f7 feea 	bl	80002a8 <__aeabi_dsub>
 80084d4:	9e02      	ldr	r6, [sp, #8]
 80084d6:	9f01      	ldr	r7, [sp, #4]
 80084d8:	3630      	adds	r6, #48	; 0x30
 80084da:	f805 6b01 	strb.w	r6, [r5], #1
 80084de:	9e00      	ldr	r6, [sp, #0]
 80084e0:	1bae      	subs	r6, r5, r6
 80084e2:	42b7      	cmp	r7, r6
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	d137      	bne.n	800855a <_dtoa_r+0x722>
 80084ea:	f7f7 fedf 	bl	80002ac <__adddf3>
 80084ee:	4642      	mov	r2, r8
 80084f0:	464b      	mov	r3, r9
 80084f2:	4606      	mov	r6, r0
 80084f4:	460f      	mov	r7, r1
 80084f6:	f7f8 fb1f 	bl	8000b38 <__aeabi_dcmpgt>
 80084fa:	b9c8      	cbnz	r0, 8008530 <_dtoa_r+0x6f8>
 80084fc:	4642      	mov	r2, r8
 80084fe:	464b      	mov	r3, r9
 8008500:	4630      	mov	r0, r6
 8008502:	4639      	mov	r1, r7
 8008504:	f7f8 faf0 	bl	8000ae8 <__aeabi_dcmpeq>
 8008508:	b110      	cbz	r0, 8008510 <_dtoa_r+0x6d8>
 800850a:	9b02      	ldr	r3, [sp, #8]
 800850c:	07d9      	lsls	r1, r3, #31
 800850e:	d40f      	bmi.n	8008530 <_dtoa_r+0x6f8>
 8008510:	4620      	mov	r0, r4
 8008512:	4659      	mov	r1, fp
 8008514:	f000 fc04 	bl	8008d20 <_Bfree>
 8008518:	2300      	movs	r3, #0
 800851a:	702b      	strb	r3, [r5, #0]
 800851c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800851e:	f10a 0001 	add.w	r0, sl, #1
 8008522:	6018      	str	r0, [r3, #0]
 8008524:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008526:	2b00      	cmp	r3, #0
 8008528:	f43f acd8 	beq.w	8007edc <_dtoa_r+0xa4>
 800852c:	601d      	str	r5, [r3, #0]
 800852e:	e4d5      	b.n	8007edc <_dtoa_r+0xa4>
 8008530:	f8cd a01c 	str.w	sl, [sp, #28]
 8008534:	462b      	mov	r3, r5
 8008536:	461d      	mov	r5, r3
 8008538:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800853c:	2a39      	cmp	r2, #57	; 0x39
 800853e:	d108      	bne.n	8008552 <_dtoa_r+0x71a>
 8008540:	9a00      	ldr	r2, [sp, #0]
 8008542:	429a      	cmp	r2, r3
 8008544:	d1f7      	bne.n	8008536 <_dtoa_r+0x6fe>
 8008546:	9a07      	ldr	r2, [sp, #28]
 8008548:	9900      	ldr	r1, [sp, #0]
 800854a:	3201      	adds	r2, #1
 800854c:	9207      	str	r2, [sp, #28]
 800854e:	2230      	movs	r2, #48	; 0x30
 8008550:	700a      	strb	r2, [r1, #0]
 8008552:	781a      	ldrb	r2, [r3, #0]
 8008554:	3201      	adds	r2, #1
 8008556:	701a      	strb	r2, [r3, #0]
 8008558:	e78c      	b.n	8008474 <_dtoa_r+0x63c>
 800855a:	4b7f      	ldr	r3, [pc, #508]	; (8008758 <_dtoa_r+0x920>)
 800855c:	2200      	movs	r2, #0
 800855e:	f7f8 f85b 	bl	8000618 <__aeabi_dmul>
 8008562:	2200      	movs	r2, #0
 8008564:	2300      	movs	r3, #0
 8008566:	4606      	mov	r6, r0
 8008568:	460f      	mov	r7, r1
 800856a:	f7f8 fabd 	bl	8000ae8 <__aeabi_dcmpeq>
 800856e:	2800      	cmp	r0, #0
 8008570:	d09b      	beq.n	80084aa <_dtoa_r+0x672>
 8008572:	e7cd      	b.n	8008510 <_dtoa_r+0x6d8>
 8008574:	9a08      	ldr	r2, [sp, #32]
 8008576:	2a00      	cmp	r2, #0
 8008578:	f000 80c4 	beq.w	8008704 <_dtoa_r+0x8cc>
 800857c:	9a05      	ldr	r2, [sp, #20]
 800857e:	2a01      	cmp	r2, #1
 8008580:	f300 80a8 	bgt.w	80086d4 <_dtoa_r+0x89c>
 8008584:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008586:	2a00      	cmp	r2, #0
 8008588:	f000 80a0 	beq.w	80086cc <_dtoa_r+0x894>
 800858c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008590:	9e06      	ldr	r6, [sp, #24]
 8008592:	4645      	mov	r5, r8
 8008594:	9a04      	ldr	r2, [sp, #16]
 8008596:	2101      	movs	r1, #1
 8008598:	441a      	add	r2, r3
 800859a:	4620      	mov	r0, r4
 800859c:	4498      	add	r8, r3
 800859e:	9204      	str	r2, [sp, #16]
 80085a0:	f000 fc7a 	bl	8008e98 <__i2b>
 80085a4:	4607      	mov	r7, r0
 80085a6:	2d00      	cmp	r5, #0
 80085a8:	dd0b      	ble.n	80085c2 <_dtoa_r+0x78a>
 80085aa:	9b04      	ldr	r3, [sp, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	dd08      	ble.n	80085c2 <_dtoa_r+0x78a>
 80085b0:	42ab      	cmp	r3, r5
 80085b2:	9a04      	ldr	r2, [sp, #16]
 80085b4:	bfa8      	it	ge
 80085b6:	462b      	movge	r3, r5
 80085b8:	eba8 0803 	sub.w	r8, r8, r3
 80085bc:	1aed      	subs	r5, r5, r3
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	9304      	str	r3, [sp, #16]
 80085c2:	9b06      	ldr	r3, [sp, #24]
 80085c4:	b1fb      	cbz	r3, 8008606 <_dtoa_r+0x7ce>
 80085c6:	9b08      	ldr	r3, [sp, #32]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 809f 	beq.w	800870c <_dtoa_r+0x8d4>
 80085ce:	2e00      	cmp	r6, #0
 80085d0:	dd11      	ble.n	80085f6 <_dtoa_r+0x7be>
 80085d2:	4639      	mov	r1, r7
 80085d4:	4632      	mov	r2, r6
 80085d6:	4620      	mov	r0, r4
 80085d8:	f000 fd1a 	bl	8009010 <__pow5mult>
 80085dc:	465a      	mov	r2, fp
 80085de:	4601      	mov	r1, r0
 80085e0:	4607      	mov	r7, r0
 80085e2:	4620      	mov	r0, r4
 80085e4:	f000 fc6e 	bl	8008ec4 <__multiply>
 80085e8:	4659      	mov	r1, fp
 80085ea:	9007      	str	r0, [sp, #28]
 80085ec:	4620      	mov	r0, r4
 80085ee:	f000 fb97 	bl	8008d20 <_Bfree>
 80085f2:	9b07      	ldr	r3, [sp, #28]
 80085f4:	469b      	mov	fp, r3
 80085f6:	9b06      	ldr	r3, [sp, #24]
 80085f8:	1b9a      	subs	r2, r3, r6
 80085fa:	d004      	beq.n	8008606 <_dtoa_r+0x7ce>
 80085fc:	4659      	mov	r1, fp
 80085fe:	4620      	mov	r0, r4
 8008600:	f000 fd06 	bl	8009010 <__pow5mult>
 8008604:	4683      	mov	fp, r0
 8008606:	2101      	movs	r1, #1
 8008608:	4620      	mov	r0, r4
 800860a:	f000 fc45 	bl	8008e98 <__i2b>
 800860e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008610:	2b00      	cmp	r3, #0
 8008612:	4606      	mov	r6, r0
 8008614:	dd7c      	ble.n	8008710 <_dtoa_r+0x8d8>
 8008616:	461a      	mov	r2, r3
 8008618:	4601      	mov	r1, r0
 800861a:	4620      	mov	r0, r4
 800861c:	f000 fcf8 	bl	8009010 <__pow5mult>
 8008620:	9b05      	ldr	r3, [sp, #20]
 8008622:	2b01      	cmp	r3, #1
 8008624:	4606      	mov	r6, r0
 8008626:	dd76      	ble.n	8008716 <_dtoa_r+0x8de>
 8008628:	2300      	movs	r3, #0
 800862a:	9306      	str	r3, [sp, #24]
 800862c:	6933      	ldr	r3, [r6, #16]
 800862e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008632:	6918      	ldr	r0, [r3, #16]
 8008634:	f000 fbe0 	bl	8008df8 <__hi0bits>
 8008638:	f1c0 0020 	rsb	r0, r0, #32
 800863c:	9b04      	ldr	r3, [sp, #16]
 800863e:	4418      	add	r0, r3
 8008640:	f010 001f 	ands.w	r0, r0, #31
 8008644:	f000 8086 	beq.w	8008754 <_dtoa_r+0x91c>
 8008648:	f1c0 0320 	rsb	r3, r0, #32
 800864c:	2b04      	cmp	r3, #4
 800864e:	dd7f      	ble.n	8008750 <_dtoa_r+0x918>
 8008650:	f1c0 001c 	rsb	r0, r0, #28
 8008654:	9b04      	ldr	r3, [sp, #16]
 8008656:	4403      	add	r3, r0
 8008658:	4480      	add	r8, r0
 800865a:	4405      	add	r5, r0
 800865c:	9304      	str	r3, [sp, #16]
 800865e:	f1b8 0f00 	cmp.w	r8, #0
 8008662:	dd05      	ble.n	8008670 <_dtoa_r+0x838>
 8008664:	4659      	mov	r1, fp
 8008666:	4642      	mov	r2, r8
 8008668:	4620      	mov	r0, r4
 800866a:	f000 fd2b 	bl	80090c4 <__lshift>
 800866e:	4683      	mov	fp, r0
 8008670:	9b04      	ldr	r3, [sp, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	dd05      	ble.n	8008682 <_dtoa_r+0x84a>
 8008676:	4631      	mov	r1, r6
 8008678:	461a      	mov	r2, r3
 800867a:	4620      	mov	r0, r4
 800867c:	f000 fd22 	bl	80090c4 <__lshift>
 8008680:	4606      	mov	r6, r0
 8008682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008684:	2b00      	cmp	r3, #0
 8008686:	d069      	beq.n	800875c <_dtoa_r+0x924>
 8008688:	4631      	mov	r1, r6
 800868a:	4658      	mov	r0, fp
 800868c:	f000 fd86 	bl	800919c <__mcmp>
 8008690:	2800      	cmp	r0, #0
 8008692:	da63      	bge.n	800875c <_dtoa_r+0x924>
 8008694:	2300      	movs	r3, #0
 8008696:	4659      	mov	r1, fp
 8008698:	220a      	movs	r2, #10
 800869a:	4620      	mov	r0, r4
 800869c:	f000 fb62 	bl	8008d64 <__multadd>
 80086a0:	9b08      	ldr	r3, [sp, #32]
 80086a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086a6:	4683      	mov	fp, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 818f 	beq.w	80089cc <_dtoa_r+0xb94>
 80086ae:	4639      	mov	r1, r7
 80086b0:	2300      	movs	r3, #0
 80086b2:	220a      	movs	r2, #10
 80086b4:	4620      	mov	r0, r4
 80086b6:	f000 fb55 	bl	8008d64 <__multadd>
 80086ba:	f1b9 0f00 	cmp.w	r9, #0
 80086be:	4607      	mov	r7, r0
 80086c0:	f300 808e 	bgt.w	80087e0 <_dtoa_r+0x9a8>
 80086c4:	9b05      	ldr	r3, [sp, #20]
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	dc50      	bgt.n	800876c <_dtoa_r+0x934>
 80086ca:	e089      	b.n	80087e0 <_dtoa_r+0x9a8>
 80086cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086d2:	e75d      	b.n	8008590 <_dtoa_r+0x758>
 80086d4:	9b01      	ldr	r3, [sp, #4]
 80086d6:	1e5e      	subs	r6, r3, #1
 80086d8:	9b06      	ldr	r3, [sp, #24]
 80086da:	42b3      	cmp	r3, r6
 80086dc:	bfbf      	itttt	lt
 80086de:	9b06      	ldrlt	r3, [sp, #24]
 80086e0:	9606      	strlt	r6, [sp, #24]
 80086e2:	1af2      	sublt	r2, r6, r3
 80086e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80086e6:	bfb6      	itet	lt
 80086e8:	189b      	addlt	r3, r3, r2
 80086ea:	1b9e      	subge	r6, r3, r6
 80086ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80086ee:	9b01      	ldr	r3, [sp, #4]
 80086f0:	bfb8      	it	lt
 80086f2:	2600      	movlt	r6, #0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	bfb5      	itete	lt
 80086f8:	eba8 0503 	sublt.w	r5, r8, r3
 80086fc:	9b01      	ldrge	r3, [sp, #4]
 80086fe:	2300      	movlt	r3, #0
 8008700:	4645      	movge	r5, r8
 8008702:	e747      	b.n	8008594 <_dtoa_r+0x75c>
 8008704:	9e06      	ldr	r6, [sp, #24]
 8008706:	9f08      	ldr	r7, [sp, #32]
 8008708:	4645      	mov	r5, r8
 800870a:	e74c      	b.n	80085a6 <_dtoa_r+0x76e>
 800870c:	9a06      	ldr	r2, [sp, #24]
 800870e:	e775      	b.n	80085fc <_dtoa_r+0x7c4>
 8008710:	9b05      	ldr	r3, [sp, #20]
 8008712:	2b01      	cmp	r3, #1
 8008714:	dc18      	bgt.n	8008748 <_dtoa_r+0x910>
 8008716:	9b02      	ldr	r3, [sp, #8]
 8008718:	b9b3      	cbnz	r3, 8008748 <_dtoa_r+0x910>
 800871a:	9b03      	ldr	r3, [sp, #12]
 800871c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008720:	b9a3      	cbnz	r3, 800874c <_dtoa_r+0x914>
 8008722:	9b03      	ldr	r3, [sp, #12]
 8008724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008728:	0d1b      	lsrs	r3, r3, #20
 800872a:	051b      	lsls	r3, r3, #20
 800872c:	b12b      	cbz	r3, 800873a <_dtoa_r+0x902>
 800872e:	9b04      	ldr	r3, [sp, #16]
 8008730:	3301      	adds	r3, #1
 8008732:	9304      	str	r3, [sp, #16]
 8008734:	f108 0801 	add.w	r8, r8, #1
 8008738:	2301      	movs	r3, #1
 800873a:	9306      	str	r3, [sp, #24]
 800873c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800873e:	2b00      	cmp	r3, #0
 8008740:	f47f af74 	bne.w	800862c <_dtoa_r+0x7f4>
 8008744:	2001      	movs	r0, #1
 8008746:	e779      	b.n	800863c <_dtoa_r+0x804>
 8008748:	2300      	movs	r3, #0
 800874a:	e7f6      	b.n	800873a <_dtoa_r+0x902>
 800874c:	9b02      	ldr	r3, [sp, #8]
 800874e:	e7f4      	b.n	800873a <_dtoa_r+0x902>
 8008750:	d085      	beq.n	800865e <_dtoa_r+0x826>
 8008752:	4618      	mov	r0, r3
 8008754:	301c      	adds	r0, #28
 8008756:	e77d      	b.n	8008654 <_dtoa_r+0x81c>
 8008758:	40240000 	.word	0x40240000
 800875c:	9b01      	ldr	r3, [sp, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	dc38      	bgt.n	80087d4 <_dtoa_r+0x99c>
 8008762:	9b05      	ldr	r3, [sp, #20]
 8008764:	2b02      	cmp	r3, #2
 8008766:	dd35      	ble.n	80087d4 <_dtoa_r+0x99c>
 8008768:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800876c:	f1b9 0f00 	cmp.w	r9, #0
 8008770:	d10d      	bne.n	800878e <_dtoa_r+0x956>
 8008772:	4631      	mov	r1, r6
 8008774:	464b      	mov	r3, r9
 8008776:	2205      	movs	r2, #5
 8008778:	4620      	mov	r0, r4
 800877a:	f000 faf3 	bl	8008d64 <__multadd>
 800877e:	4601      	mov	r1, r0
 8008780:	4606      	mov	r6, r0
 8008782:	4658      	mov	r0, fp
 8008784:	f000 fd0a 	bl	800919c <__mcmp>
 8008788:	2800      	cmp	r0, #0
 800878a:	f73f adbd 	bgt.w	8008308 <_dtoa_r+0x4d0>
 800878e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008790:	9d00      	ldr	r5, [sp, #0]
 8008792:	ea6f 0a03 	mvn.w	sl, r3
 8008796:	f04f 0800 	mov.w	r8, #0
 800879a:	4631      	mov	r1, r6
 800879c:	4620      	mov	r0, r4
 800879e:	f000 fabf 	bl	8008d20 <_Bfree>
 80087a2:	2f00      	cmp	r7, #0
 80087a4:	f43f aeb4 	beq.w	8008510 <_dtoa_r+0x6d8>
 80087a8:	f1b8 0f00 	cmp.w	r8, #0
 80087ac:	d005      	beq.n	80087ba <_dtoa_r+0x982>
 80087ae:	45b8      	cmp	r8, r7
 80087b0:	d003      	beq.n	80087ba <_dtoa_r+0x982>
 80087b2:	4641      	mov	r1, r8
 80087b4:	4620      	mov	r0, r4
 80087b6:	f000 fab3 	bl	8008d20 <_Bfree>
 80087ba:	4639      	mov	r1, r7
 80087bc:	4620      	mov	r0, r4
 80087be:	f000 faaf 	bl	8008d20 <_Bfree>
 80087c2:	e6a5      	b.n	8008510 <_dtoa_r+0x6d8>
 80087c4:	2600      	movs	r6, #0
 80087c6:	4637      	mov	r7, r6
 80087c8:	e7e1      	b.n	800878e <_dtoa_r+0x956>
 80087ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80087cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80087d0:	4637      	mov	r7, r6
 80087d2:	e599      	b.n	8008308 <_dtoa_r+0x4d0>
 80087d4:	9b08      	ldr	r3, [sp, #32]
 80087d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 80fd 	beq.w	80089da <_dtoa_r+0xba2>
 80087e0:	2d00      	cmp	r5, #0
 80087e2:	dd05      	ble.n	80087f0 <_dtoa_r+0x9b8>
 80087e4:	4639      	mov	r1, r7
 80087e6:	462a      	mov	r2, r5
 80087e8:	4620      	mov	r0, r4
 80087ea:	f000 fc6b 	bl	80090c4 <__lshift>
 80087ee:	4607      	mov	r7, r0
 80087f0:	9b06      	ldr	r3, [sp, #24]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d05c      	beq.n	80088b0 <_dtoa_r+0xa78>
 80087f6:	6879      	ldr	r1, [r7, #4]
 80087f8:	4620      	mov	r0, r4
 80087fa:	f000 fa51 	bl	8008ca0 <_Balloc>
 80087fe:	4605      	mov	r5, r0
 8008800:	b928      	cbnz	r0, 800880e <_dtoa_r+0x9d6>
 8008802:	4b80      	ldr	r3, [pc, #512]	; (8008a04 <_dtoa_r+0xbcc>)
 8008804:	4602      	mov	r2, r0
 8008806:	f240 21ea 	movw	r1, #746	; 0x2ea
 800880a:	f7ff bb2e 	b.w	8007e6a <_dtoa_r+0x32>
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	3202      	adds	r2, #2
 8008812:	0092      	lsls	r2, r2, #2
 8008814:	f107 010c 	add.w	r1, r7, #12
 8008818:	300c      	adds	r0, #12
 800881a:	f7fe fb93 	bl	8006f44 <memcpy>
 800881e:	2201      	movs	r2, #1
 8008820:	4629      	mov	r1, r5
 8008822:	4620      	mov	r0, r4
 8008824:	f000 fc4e 	bl	80090c4 <__lshift>
 8008828:	9b00      	ldr	r3, [sp, #0]
 800882a:	3301      	adds	r3, #1
 800882c:	9301      	str	r3, [sp, #4]
 800882e:	9b00      	ldr	r3, [sp, #0]
 8008830:	444b      	add	r3, r9
 8008832:	9307      	str	r3, [sp, #28]
 8008834:	9b02      	ldr	r3, [sp, #8]
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	46b8      	mov	r8, r7
 800883c:	9306      	str	r3, [sp, #24]
 800883e:	4607      	mov	r7, r0
 8008840:	9b01      	ldr	r3, [sp, #4]
 8008842:	4631      	mov	r1, r6
 8008844:	3b01      	subs	r3, #1
 8008846:	4658      	mov	r0, fp
 8008848:	9302      	str	r3, [sp, #8]
 800884a:	f7ff fa69 	bl	8007d20 <quorem>
 800884e:	4603      	mov	r3, r0
 8008850:	3330      	adds	r3, #48	; 0x30
 8008852:	9004      	str	r0, [sp, #16]
 8008854:	4641      	mov	r1, r8
 8008856:	4658      	mov	r0, fp
 8008858:	9308      	str	r3, [sp, #32]
 800885a:	f000 fc9f 	bl	800919c <__mcmp>
 800885e:	463a      	mov	r2, r7
 8008860:	4681      	mov	r9, r0
 8008862:	4631      	mov	r1, r6
 8008864:	4620      	mov	r0, r4
 8008866:	f000 fcb5 	bl	80091d4 <__mdiff>
 800886a:	68c2      	ldr	r2, [r0, #12]
 800886c:	9b08      	ldr	r3, [sp, #32]
 800886e:	4605      	mov	r5, r0
 8008870:	bb02      	cbnz	r2, 80088b4 <_dtoa_r+0xa7c>
 8008872:	4601      	mov	r1, r0
 8008874:	4658      	mov	r0, fp
 8008876:	f000 fc91 	bl	800919c <__mcmp>
 800887a:	9b08      	ldr	r3, [sp, #32]
 800887c:	4602      	mov	r2, r0
 800887e:	4629      	mov	r1, r5
 8008880:	4620      	mov	r0, r4
 8008882:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008886:	f000 fa4b 	bl	8008d20 <_Bfree>
 800888a:	9b05      	ldr	r3, [sp, #20]
 800888c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800888e:	9d01      	ldr	r5, [sp, #4]
 8008890:	ea43 0102 	orr.w	r1, r3, r2
 8008894:	9b06      	ldr	r3, [sp, #24]
 8008896:	430b      	orrs	r3, r1
 8008898:	9b08      	ldr	r3, [sp, #32]
 800889a:	d10d      	bne.n	80088b8 <_dtoa_r+0xa80>
 800889c:	2b39      	cmp	r3, #57	; 0x39
 800889e:	d029      	beq.n	80088f4 <_dtoa_r+0xabc>
 80088a0:	f1b9 0f00 	cmp.w	r9, #0
 80088a4:	dd01      	ble.n	80088aa <_dtoa_r+0xa72>
 80088a6:	9b04      	ldr	r3, [sp, #16]
 80088a8:	3331      	adds	r3, #49	; 0x31
 80088aa:	9a02      	ldr	r2, [sp, #8]
 80088ac:	7013      	strb	r3, [r2, #0]
 80088ae:	e774      	b.n	800879a <_dtoa_r+0x962>
 80088b0:	4638      	mov	r0, r7
 80088b2:	e7b9      	b.n	8008828 <_dtoa_r+0x9f0>
 80088b4:	2201      	movs	r2, #1
 80088b6:	e7e2      	b.n	800887e <_dtoa_r+0xa46>
 80088b8:	f1b9 0f00 	cmp.w	r9, #0
 80088bc:	db06      	blt.n	80088cc <_dtoa_r+0xa94>
 80088be:	9905      	ldr	r1, [sp, #20]
 80088c0:	ea41 0909 	orr.w	r9, r1, r9
 80088c4:	9906      	ldr	r1, [sp, #24]
 80088c6:	ea59 0101 	orrs.w	r1, r9, r1
 80088ca:	d120      	bne.n	800890e <_dtoa_r+0xad6>
 80088cc:	2a00      	cmp	r2, #0
 80088ce:	ddec      	ble.n	80088aa <_dtoa_r+0xa72>
 80088d0:	4659      	mov	r1, fp
 80088d2:	2201      	movs	r2, #1
 80088d4:	4620      	mov	r0, r4
 80088d6:	9301      	str	r3, [sp, #4]
 80088d8:	f000 fbf4 	bl	80090c4 <__lshift>
 80088dc:	4631      	mov	r1, r6
 80088de:	4683      	mov	fp, r0
 80088e0:	f000 fc5c 	bl	800919c <__mcmp>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	9b01      	ldr	r3, [sp, #4]
 80088e8:	dc02      	bgt.n	80088f0 <_dtoa_r+0xab8>
 80088ea:	d1de      	bne.n	80088aa <_dtoa_r+0xa72>
 80088ec:	07da      	lsls	r2, r3, #31
 80088ee:	d5dc      	bpl.n	80088aa <_dtoa_r+0xa72>
 80088f0:	2b39      	cmp	r3, #57	; 0x39
 80088f2:	d1d8      	bne.n	80088a6 <_dtoa_r+0xa6e>
 80088f4:	9a02      	ldr	r2, [sp, #8]
 80088f6:	2339      	movs	r3, #57	; 0x39
 80088f8:	7013      	strb	r3, [r2, #0]
 80088fa:	462b      	mov	r3, r5
 80088fc:	461d      	mov	r5, r3
 80088fe:	3b01      	subs	r3, #1
 8008900:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008904:	2a39      	cmp	r2, #57	; 0x39
 8008906:	d050      	beq.n	80089aa <_dtoa_r+0xb72>
 8008908:	3201      	adds	r2, #1
 800890a:	701a      	strb	r2, [r3, #0]
 800890c:	e745      	b.n	800879a <_dtoa_r+0x962>
 800890e:	2a00      	cmp	r2, #0
 8008910:	dd03      	ble.n	800891a <_dtoa_r+0xae2>
 8008912:	2b39      	cmp	r3, #57	; 0x39
 8008914:	d0ee      	beq.n	80088f4 <_dtoa_r+0xabc>
 8008916:	3301      	adds	r3, #1
 8008918:	e7c7      	b.n	80088aa <_dtoa_r+0xa72>
 800891a:	9a01      	ldr	r2, [sp, #4]
 800891c:	9907      	ldr	r1, [sp, #28]
 800891e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008922:	428a      	cmp	r2, r1
 8008924:	d02a      	beq.n	800897c <_dtoa_r+0xb44>
 8008926:	4659      	mov	r1, fp
 8008928:	2300      	movs	r3, #0
 800892a:	220a      	movs	r2, #10
 800892c:	4620      	mov	r0, r4
 800892e:	f000 fa19 	bl	8008d64 <__multadd>
 8008932:	45b8      	cmp	r8, r7
 8008934:	4683      	mov	fp, r0
 8008936:	f04f 0300 	mov.w	r3, #0
 800893a:	f04f 020a 	mov.w	r2, #10
 800893e:	4641      	mov	r1, r8
 8008940:	4620      	mov	r0, r4
 8008942:	d107      	bne.n	8008954 <_dtoa_r+0xb1c>
 8008944:	f000 fa0e 	bl	8008d64 <__multadd>
 8008948:	4680      	mov	r8, r0
 800894a:	4607      	mov	r7, r0
 800894c:	9b01      	ldr	r3, [sp, #4]
 800894e:	3301      	adds	r3, #1
 8008950:	9301      	str	r3, [sp, #4]
 8008952:	e775      	b.n	8008840 <_dtoa_r+0xa08>
 8008954:	f000 fa06 	bl	8008d64 <__multadd>
 8008958:	4639      	mov	r1, r7
 800895a:	4680      	mov	r8, r0
 800895c:	2300      	movs	r3, #0
 800895e:	220a      	movs	r2, #10
 8008960:	4620      	mov	r0, r4
 8008962:	f000 f9ff 	bl	8008d64 <__multadd>
 8008966:	4607      	mov	r7, r0
 8008968:	e7f0      	b.n	800894c <_dtoa_r+0xb14>
 800896a:	f1b9 0f00 	cmp.w	r9, #0
 800896e:	9a00      	ldr	r2, [sp, #0]
 8008970:	bfcc      	ite	gt
 8008972:	464d      	movgt	r5, r9
 8008974:	2501      	movle	r5, #1
 8008976:	4415      	add	r5, r2
 8008978:	f04f 0800 	mov.w	r8, #0
 800897c:	4659      	mov	r1, fp
 800897e:	2201      	movs	r2, #1
 8008980:	4620      	mov	r0, r4
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	f000 fb9e 	bl	80090c4 <__lshift>
 8008988:	4631      	mov	r1, r6
 800898a:	4683      	mov	fp, r0
 800898c:	f000 fc06 	bl	800919c <__mcmp>
 8008990:	2800      	cmp	r0, #0
 8008992:	dcb2      	bgt.n	80088fa <_dtoa_r+0xac2>
 8008994:	d102      	bne.n	800899c <_dtoa_r+0xb64>
 8008996:	9b01      	ldr	r3, [sp, #4]
 8008998:	07db      	lsls	r3, r3, #31
 800899a:	d4ae      	bmi.n	80088fa <_dtoa_r+0xac2>
 800899c:	462b      	mov	r3, r5
 800899e:	461d      	mov	r5, r3
 80089a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089a4:	2a30      	cmp	r2, #48	; 0x30
 80089a6:	d0fa      	beq.n	800899e <_dtoa_r+0xb66>
 80089a8:	e6f7      	b.n	800879a <_dtoa_r+0x962>
 80089aa:	9a00      	ldr	r2, [sp, #0]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d1a5      	bne.n	80088fc <_dtoa_r+0xac4>
 80089b0:	f10a 0a01 	add.w	sl, sl, #1
 80089b4:	2331      	movs	r3, #49	; 0x31
 80089b6:	e779      	b.n	80088ac <_dtoa_r+0xa74>
 80089b8:	4b13      	ldr	r3, [pc, #76]	; (8008a08 <_dtoa_r+0xbd0>)
 80089ba:	f7ff baaf 	b.w	8007f1c <_dtoa_r+0xe4>
 80089be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f47f aa86 	bne.w	8007ed2 <_dtoa_r+0x9a>
 80089c6:	4b11      	ldr	r3, [pc, #68]	; (8008a0c <_dtoa_r+0xbd4>)
 80089c8:	f7ff baa8 	b.w	8007f1c <_dtoa_r+0xe4>
 80089cc:	f1b9 0f00 	cmp.w	r9, #0
 80089d0:	dc03      	bgt.n	80089da <_dtoa_r+0xba2>
 80089d2:	9b05      	ldr	r3, [sp, #20]
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	f73f aec9 	bgt.w	800876c <_dtoa_r+0x934>
 80089da:	9d00      	ldr	r5, [sp, #0]
 80089dc:	4631      	mov	r1, r6
 80089de:	4658      	mov	r0, fp
 80089e0:	f7ff f99e 	bl	8007d20 <quorem>
 80089e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80089e8:	f805 3b01 	strb.w	r3, [r5], #1
 80089ec:	9a00      	ldr	r2, [sp, #0]
 80089ee:	1aaa      	subs	r2, r5, r2
 80089f0:	4591      	cmp	r9, r2
 80089f2:	ddba      	ble.n	800896a <_dtoa_r+0xb32>
 80089f4:	4659      	mov	r1, fp
 80089f6:	2300      	movs	r3, #0
 80089f8:	220a      	movs	r2, #10
 80089fa:	4620      	mov	r0, r4
 80089fc:	f000 f9b2 	bl	8008d64 <__multadd>
 8008a00:	4683      	mov	fp, r0
 8008a02:	e7eb      	b.n	80089dc <_dtoa_r+0xba4>
 8008a04:	08009abf 	.word	0x08009abf
 8008a08:	08009a18 	.word	0x08009a18
 8008a0c:	08009a3c 	.word	0x08009a3c

08008a10 <__sflush_r>:
 8008a10:	898a      	ldrh	r2, [r1, #12]
 8008a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a16:	4605      	mov	r5, r0
 8008a18:	0710      	lsls	r0, r2, #28
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	d458      	bmi.n	8008ad0 <__sflush_r+0xc0>
 8008a1e:	684b      	ldr	r3, [r1, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	dc05      	bgt.n	8008a30 <__sflush_r+0x20>
 8008a24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	dc02      	bgt.n	8008a30 <__sflush_r+0x20>
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a32:	2e00      	cmp	r6, #0
 8008a34:	d0f9      	beq.n	8008a2a <__sflush_r+0x1a>
 8008a36:	2300      	movs	r3, #0
 8008a38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a3c:	682f      	ldr	r7, [r5, #0]
 8008a3e:	602b      	str	r3, [r5, #0]
 8008a40:	d032      	beq.n	8008aa8 <__sflush_r+0x98>
 8008a42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a44:	89a3      	ldrh	r3, [r4, #12]
 8008a46:	075a      	lsls	r2, r3, #29
 8008a48:	d505      	bpl.n	8008a56 <__sflush_r+0x46>
 8008a4a:	6863      	ldr	r3, [r4, #4]
 8008a4c:	1ac0      	subs	r0, r0, r3
 8008a4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a50:	b10b      	cbz	r3, 8008a56 <__sflush_r+0x46>
 8008a52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a54:	1ac0      	subs	r0, r0, r3
 8008a56:	2300      	movs	r3, #0
 8008a58:	4602      	mov	r2, r0
 8008a5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a5c:	6a21      	ldr	r1, [r4, #32]
 8008a5e:	4628      	mov	r0, r5
 8008a60:	47b0      	blx	r6
 8008a62:	1c43      	adds	r3, r0, #1
 8008a64:	89a3      	ldrh	r3, [r4, #12]
 8008a66:	d106      	bne.n	8008a76 <__sflush_r+0x66>
 8008a68:	6829      	ldr	r1, [r5, #0]
 8008a6a:	291d      	cmp	r1, #29
 8008a6c:	d82c      	bhi.n	8008ac8 <__sflush_r+0xb8>
 8008a6e:	4a2a      	ldr	r2, [pc, #168]	; (8008b18 <__sflush_r+0x108>)
 8008a70:	40ca      	lsrs	r2, r1
 8008a72:	07d6      	lsls	r6, r2, #31
 8008a74:	d528      	bpl.n	8008ac8 <__sflush_r+0xb8>
 8008a76:	2200      	movs	r2, #0
 8008a78:	6062      	str	r2, [r4, #4]
 8008a7a:	04d9      	lsls	r1, r3, #19
 8008a7c:	6922      	ldr	r2, [r4, #16]
 8008a7e:	6022      	str	r2, [r4, #0]
 8008a80:	d504      	bpl.n	8008a8c <__sflush_r+0x7c>
 8008a82:	1c42      	adds	r2, r0, #1
 8008a84:	d101      	bne.n	8008a8a <__sflush_r+0x7a>
 8008a86:	682b      	ldr	r3, [r5, #0]
 8008a88:	b903      	cbnz	r3, 8008a8c <__sflush_r+0x7c>
 8008a8a:	6560      	str	r0, [r4, #84]	; 0x54
 8008a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a8e:	602f      	str	r7, [r5, #0]
 8008a90:	2900      	cmp	r1, #0
 8008a92:	d0ca      	beq.n	8008a2a <__sflush_r+0x1a>
 8008a94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a98:	4299      	cmp	r1, r3
 8008a9a:	d002      	beq.n	8008aa2 <__sflush_r+0x92>
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	f7fe fa67 	bl	8006f70 <_free_r>
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	6360      	str	r0, [r4, #52]	; 0x34
 8008aa6:	e7c1      	b.n	8008a2c <__sflush_r+0x1c>
 8008aa8:	6a21      	ldr	r1, [r4, #32]
 8008aaa:	2301      	movs	r3, #1
 8008aac:	4628      	mov	r0, r5
 8008aae:	47b0      	blx	r6
 8008ab0:	1c41      	adds	r1, r0, #1
 8008ab2:	d1c7      	bne.n	8008a44 <__sflush_r+0x34>
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d0c4      	beq.n	8008a44 <__sflush_r+0x34>
 8008aba:	2b1d      	cmp	r3, #29
 8008abc:	d001      	beq.n	8008ac2 <__sflush_r+0xb2>
 8008abe:	2b16      	cmp	r3, #22
 8008ac0:	d101      	bne.n	8008ac6 <__sflush_r+0xb6>
 8008ac2:	602f      	str	r7, [r5, #0]
 8008ac4:	e7b1      	b.n	8008a2a <__sflush_r+0x1a>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008acc:	81a3      	strh	r3, [r4, #12]
 8008ace:	e7ad      	b.n	8008a2c <__sflush_r+0x1c>
 8008ad0:	690f      	ldr	r7, [r1, #16]
 8008ad2:	2f00      	cmp	r7, #0
 8008ad4:	d0a9      	beq.n	8008a2a <__sflush_r+0x1a>
 8008ad6:	0793      	lsls	r3, r2, #30
 8008ad8:	680e      	ldr	r6, [r1, #0]
 8008ada:	bf08      	it	eq
 8008adc:	694b      	ldreq	r3, [r1, #20]
 8008ade:	600f      	str	r7, [r1, #0]
 8008ae0:	bf18      	it	ne
 8008ae2:	2300      	movne	r3, #0
 8008ae4:	eba6 0807 	sub.w	r8, r6, r7
 8008ae8:	608b      	str	r3, [r1, #8]
 8008aea:	f1b8 0f00 	cmp.w	r8, #0
 8008aee:	dd9c      	ble.n	8008a2a <__sflush_r+0x1a>
 8008af0:	6a21      	ldr	r1, [r4, #32]
 8008af2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008af4:	4643      	mov	r3, r8
 8008af6:	463a      	mov	r2, r7
 8008af8:	4628      	mov	r0, r5
 8008afa:	47b0      	blx	r6
 8008afc:	2800      	cmp	r0, #0
 8008afe:	dc06      	bgt.n	8008b0e <__sflush_r+0xfe>
 8008b00:	89a3      	ldrh	r3, [r4, #12]
 8008b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b06:	81a3      	strh	r3, [r4, #12]
 8008b08:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0c:	e78e      	b.n	8008a2c <__sflush_r+0x1c>
 8008b0e:	4407      	add	r7, r0
 8008b10:	eba8 0800 	sub.w	r8, r8, r0
 8008b14:	e7e9      	b.n	8008aea <__sflush_r+0xda>
 8008b16:	bf00      	nop
 8008b18:	20400001 	.word	0x20400001

08008b1c <_fflush_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	690b      	ldr	r3, [r1, #16]
 8008b20:	4605      	mov	r5, r0
 8008b22:	460c      	mov	r4, r1
 8008b24:	b913      	cbnz	r3, 8008b2c <_fflush_r+0x10>
 8008b26:	2500      	movs	r5, #0
 8008b28:	4628      	mov	r0, r5
 8008b2a:	bd38      	pop	{r3, r4, r5, pc}
 8008b2c:	b118      	cbz	r0, 8008b36 <_fflush_r+0x1a>
 8008b2e:	6983      	ldr	r3, [r0, #24]
 8008b30:	b90b      	cbnz	r3, 8008b36 <_fflush_r+0x1a>
 8008b32:	f7fe f939 	bl	8006da8 <__sinit>
 8008b36:	4b14      	ldr	r3, [pc, #80]	; (8008b88 <_fflush_r+0x6c>)
 8008b38:	429c      	cmp	r4, r3
 8008b3a:	d11b      	bne.n	8008b74 <_fflush_r+0x58>
 8008b3c:	686c      	ldr	r4, [r5, #4]
 8008b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0ef      	beq.n	8008b26 <_fflush_r+0xa>
 8008b46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b48:	07d0      	lsls	r0, r2, #31
 8008b4a:	d404      	bmi.n	8008b56 <_fflush_r+0x3a>
 8008b4c:	0599      	lsls	r1, r3, #22
 8008b4e:	d402      	bmi.n	8008b56 <_fflush_r+0x3a>
 8008b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b52:	f7fe f9ec 	bl	8006f2e <__retarget_lock_acquire_recursive>
 8008b56:	4628      	mov	r0, r5
 8008b58:	4621      	mov	r1, r4
 8008b5a:	f7ff ff59 	bl	8008a10 <__sflush_r>
 8008b5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b60:	07da      	lsls	r2, r3, #31
 8008b62:	4605      	mov	r5, r0
 8008b64:	d4e0      	bmi.n	8008b28 <_fflush_r+0xc>
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	059b      	lsls	r3, r3, #22
 8008b6a:	d4dd      	bmi.n	8008b28 <_fflush_r+0xc>
 8008b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b6e:	f7fe f9df 	bl	8006f30 <__retarget_lock_release_recursive>
 8008b72:	e7d9      	b.n	8008b28 <_fflush_r+0xc>
 8008b74:	4b05      	ldr	r3, [pc, #20]	; (8008b8c <_fflush_r+0x70>)
 8008b76:	429c      	cmp	r4, r3
 8008b78:	d101      	bne.n	8008b7e <_fflush_r+0x62>
 8008b7a:	68ac      	ldr	r4, [r5, #8]
 8008b7c:	e7df      	b.n	8008b3e <_fflush_r+0x22>
 8008b7e:	4b04      	ldr	r3, [pc, #16]	; (8008b90 <_fflush_r+0x74>)
 8008b80:	429c      	cmp	r4, r3
 8008b82:	bf08      	it	eq
 8008b84:	68ec      	ldreq	r4, [r5, #12]
 8008b86:	e7da      	b.n	8008b3e <_fflush_r+0x22>
 8008b88:	080099c4 	.word	0x080099c4
 8008b8c:	080099e4 	.word	0x080099e4
 8008b90:	080099a4 	.word	0x080099a4

08008b94 <_localeconv_r>:
 8008b94:	4800      	ldr	r0, [pc, #0]	; (8008b98 <_localeconv_r+0x4>)
 8008b96:	4770      	bx	lr
 8008b98:	2000023c 	.word	0x2000023c

08008b9c <_lseek_r>:
 8008b9c:	b538      	push	{r3, r4, r5, lr}
 8008b9e:	4d07      	ldr	r5, [pc, #28]	; (8008bbc <_lseek_r+0x20>)
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	4608      	mov	r0, r1
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	602a      	str	r2, [r5, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	f7f9 fa4e 	bl	800204c <_lseek>
 8008bb0:	1c43      	adds	r3, r0, #1
 8008bb2:	d102      	bne.n	8008bba <_lseek_r+0x1e>
 8008bb4:	682b      	ldr	r3, [r5, #0]
 8008bb6:	b103      	cbz	r3, 8008bba <_lseek_r+0x1e>
 8008bb8:	6023      	str	r3, [r4, #0]
 8008bba:	bd38      	pop	{r3, r4, r5, pc}
 8008bbc:	20004940 	.word	0x20004940

08008bc0 <__swhatbuf_r>:
 8008bc0:	b570      	push	{r4, r5, r6, lr}
 8008bc2:	460e      	mov	r6, r1
 8008bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bc8:	2900      	cmp	r1, #0
 8008bca:	b096      	sub	sp, #88	; 0x58
 8008bcc:	4614      	mov	r4, r2
 8008bce:	461d      	mov	r5, r3
 8008bd0:	da07      	bge.n	8008be2 <__swhatbuf_r+0x22>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	602b      	str	r3, [r5, #0]
 8008bd6:	89b3      	ldrh	r3, [r6, #12]
 8008bd8:	061a      	lsls	r2, r3, #24
 8008bda:	d410      	bmi.n	8008bfe <__swhatbuf_r+0x3e>
 8008bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008be0:	e00e      	b.n	8008c00 <__swhatbuf_r+0x40>
 8008be2:	466a      	mov	r2, sp
 8008be4:	f000 fd84 	bl	80096f0 <_fstat_r>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	dbf2      	blt.n	8008bd2 <__swhatbuf_r+0x12>
 8008bec:	9a01      	ldr	r2, [sp, #4]
 8008bee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008bf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008bf6:	425a      	negs	r2, r3
 8008bf8:	415a      	adcs	r2, r3
 8008bfa:	602a      	str	r2, [r5, #0]
 8008bfc:	e7ee      	b.n	8008bdc <__swhatbuf_r+0x1c>
 8008bfe:	2340      	movs	r3, #64	; 0x40
 8008c00:	2000      	movs	r0, #0
 8008c02:	6023      	str	r3, [r4, #0]
 8008c04:	b016      	add	sp, #88	; 0x58
 8008c06:	bd70      	pop	{r4, r5, r6, pc}

08008c08 <__smakebuf_r>:
 8008c08:	898b      	ldrh	r3, [r1, #12]
 8008c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c0c:	079d      	lsls	r5, r3, #30
 8008c0e:	4606      	mov	r6, r0
 8008c10:	460c      	mov	r4, r1
 8008c12:	d507      	bpl.n	8008c24 <__smakebuf_r+0x1c>
 8008c14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	6123      	str	r3, [r4, #16]
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	6163      	str	r3, [r4, #20]
 8008c20:	b002      	add	sp, #8
 8008c22:	bd70      	pop	{r4, r5, r6, pc}
 8008c24:	ab01      	add	r3, sp, #4
 8008c26:	466a      	mov	r2, sp
 8008c28:	f7ff ffca 	bl	8008bc0 <__swhatbuf_r>
 8008c2c:	9900      	ldr	r1, [sp, #0]
 8008c2e:	4605      	mov	r5, r0
 8008c30:	4630      	mov	r0, r6
 8008c32:	f7fe f9ed 	bl	8007010 <_malloc_r>
 8008c36:	b948      	cbnz	r0, 8008c4c <__smakebuf_r+0x44>
 8008c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c3c:	059a      	lsls	r2, r3, #22
 8008c3e:	d4ef      	bmi.n	8008c20 <__smakebuf_r+0x18>
 8008c40:	f023 0303 	bic.w	r3, r3, #3
 8008c44:	f043 0302 	orr.w	r3, r3, #2
 8008c48:	81a3      	strh	r3, [r4, #12]
 8008c4a:	e7e3      	b.n	8008c14 <__smakebuf_r+0xc>
 8008c4c:	4b0d      	ldr	r3, [pc, #52]	; (8008c84 <__smakebuf_r+0x7c>)
 8008c4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c50:	89a3      	ldrh	r3, [r4, #12]
 8008c52:	6020      	str	r0, [r4, #0]
 8008c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c58:	81a3      	strh	r3, [r4, #12]
 8008c5a:	9b00      	ldr	r3, [sp, #0]
 8008c5c:	6163      	str	r3, [r4, #20]
 8008c5e:	9b01      	ldr	r3, [sp, #4]
 8008c60:	6120      	str	r0, [r4, #16]
 8008c62:	b15b      	cbz	r3, 8008c7c <__smakebuf_r+0x74>
 8008c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c68:	4630      	mov	r0, r6
 8008c6a:	f000 fd53 	bl	8009714 <_isatty_r>
 8008c6e:	b128      	cbz	r0, 8008c7c <__smakebuf_r+0x74>
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	f023 0303 	bic.w	r3, r3, #3
 8008c76:	f043 0301 	orr.w	r3, r3, #1
 8008c7a:	81a3      	strh	r3, [r4, #12]
 8008c7c:	89a0      	ldrh	r0, [r4, #12]
 8008c7e:	4305      	orrs	r5, r0
 8008c80:	81a5      	strh	r5, [r4, #12]
 8008c82:	e7cd      	b.n	8008c20 <__smakebuf_r+0x18>
 8008c84:	08006d41 	.word	0x08006d41

08008c88 <__malloc_lock>:
 8008c88:	4801      	ldr	r0, [pc, #4]	; (8008c90 <__malloc_lock+0x8>)
 8008c8a:	f7fe b950 	b.w	8006f2e <__retarget_lock_acquire_recursive>
 8008c8e:	bf00      	nop
 8008c90:	20004938 	.word	0x20004938

08008c94 <__malloc_unlock>:
 8008c94:	4801      	ldr	r0, [pc, #4]	; (8008c9c <__malloc_unlock+0x8>)
 8008c96:	f7fe b94b 	b.w	8006f30 <__retarget_lock_release_recursive>
 8008c9a:	bf00      	nop
 8008c9c:	20004938 	.word	0x20004938

08008ca0 <_Balloc>:
 8008ca0:	b570      	push	{r4, r5, r6, lr}
 8008ca2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	460d      	mov	r5, r1
 8008ca8:	b976      	cbnz	r6, 8008cc8 <_Balloc+0x28>
 8008caa:	2010      	movs	r0, #16
 8008cac:	f7fe f942 	bl	8006f34 <malloc>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	6260      	str	r0, [r4, #36]	; 0x24
 8008cb4:	b920      	cbnz	r0, 8008cc0 <_Balloc+0x20>
 8008cb6:	4b18      	ldr	r3, [pc, #96]	; (8008d18 <_Balloc+0x78>)
 8008cb8:	4818      	ldr	r0, [pc, #96]	; (8008d1c <_Balloc+0x7c>)
 8008cba:	2166      	movs	r1, #102	; 0x66
 8008cbc:	f000 fce8 	bl	8009690 <__assert_func>
 8008cc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cc4:	6006      	str	r6, [r0, #0]
 8008cc6:	60c6      	str	r6, [r0, #12]
 8008cc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008cca:	68f3      	ldr	r3, [r6, #12]
 8008ccc:	b183      	cbz	r3, 8008cf0 <_Balloc+0x50>
 8008cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008cd6:	b9b8      	cbnz	r0, 8008d08 <_Balloc+0x68>
 8008cd8:	2101      	movs	r1, #1
 8008cda:	fa01 f605 	lsl.w	r6, r1, r5
 8008cde:	1d72      	adds	r2, r6, #5
 8008ce0:	0092      	lsls	r2, r2, #2
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f000 fb5a 	bl	800939c <_calloc_r>
 8008ce8:	b160      	cbz	r0, 8008d04 <_Balloc+0x64>
 8008cea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cee:	e00e      	b.n	8008d0e <_Balloc+0x6e>
 8008cf0:	2221      	movs	r2, #33	; 0x21
 8008cf2:	2104      	movs	r1, #4
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f000 fb51 	bl	800939c <_calloc_r>
 8008cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cfc:	60f0      	str	r0, [r6, #12]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1e4      	bne.n	8008cce <_Balloc+0x2e>
 8008d04:	2000      	movs	r0, #0
 8008d06:	bd70      	pop	{r4, r5, r6, pc}
 8008d08:	6802      	ldr	r2, [r0, #0]
 8008d0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d0e:	2300      	movs	r3, #0
 8008d10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d14:	e7f7      	b.n	8008d06 <_Balloc+0x66>
 8008d16:	bf00      	nop
 8008d18:	08009a49 	.word	0x08009a49
 8008d1c:	08009ad0 	.word	0x08009ad0

08008d20 <_Bfree>:
 8008d20:	b570      	push	{r4, r5, r6, lr}
 8008d22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d24:	4605      	mov	r5, r0
 8008d26:	460c      	mov	r4, r1
 8008d28:	b976      	cbnz	r6, 8008d48 <_Bfree+0x28>
 8008d2a:	2010      	movs	r0, #16
 8008d2c:	f7fe f902 	bl	8006f34 <malloc>
 8008d30:	4602      	mov	r2, r0
 8008d32:	6268      	str	r0, [r5, #36]	; 0x24
 8008d34:	b920      	cbnz	r0, 8008d40 <_Bfree+0x20>
 8008d36:	4b09      	ldr	r3, [pc, #36]	; (8008d5c <_Bfree+0x3c>)
 8008d38:	4809      	ldr	r0, [pc, #36]	; (8008d60 <_Bfree+0x40>)
 8008d3a:	218a      	movs	r1, #138	; 0x8a
 8008d3c:	f000 fca8 	bl	8009690 <__assert_func>
 8008d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d44:	6006      	str	r6, [r0, #0]
 8008d46:	60c6      	str	r6, [r0, #12]
 8008d48:	b13c      	cbz	r4, 8008d5a <_Bfree+0x3a>
 8008d4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d4c:	6862      	ldr	r2, [r4, #4]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d54:	6021      	str	r1, [r4, #0]
 8008d56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d5a:	bd70      	pop	{r4, r5, r6, pc}
 8008d5c:	08009a49 	.word	0x08009a49
 8008d60:	08009ad0 	.word	0x08009ad0

08008d64 <__multadd>:
 8008d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d68:	690e      	ldr	r6, [r1, #16]
 8008d6a:	4607      	mov	r7, r0
 8008d6c:	4698      	mov	r8, r3
 8008d6e:	460c      	mov	r4, r1
 8008d70:	f101 0014 	add.w	r0, r1, #20
 8008d74:	2300      	movs	r3, #0
 8008d76:	6805      	ldr	r5, [r0, #0]
 8008d78:	b2a9      	uxth	r1, r5
 8008d7a:	fb02 8101 	mla	r1, r2, r1, r8
 8008d7e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008d82:	0c2d      	lsrs	r5, r5, #16
 8008d84:	fb02 c505 	mla	r5, r2, r5, ip
 8008d88:	b289      	uxth	r1, r1
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008d90:	429e      	cmp	r6, r3
 8008d92:	f840 1b04 	str.w	r1, [r0], #4
 8008d96:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008d9a:	dcec      	bgt.n	8008d76 <__multadd+0x12>
 8008d9c:	f1b8 0f00 	cmp.w	r8, #0
 8008da0:	d022      	beq.n	8008de8 <__multadd+0x84>
 8008da2:	68a3      	ldr	r3, [r4, #8]
 8008da4:	42b3      	cmp	r3, r6
 8008da6:	dc19      	bgt.n	8008ddc <__multadd+0x78>
 8008da8:	6861      	ldr	r1, [r4, #4]
 8008daa:	4638      	mov	r0, r7
 8008dac:	3101      	adds	r1, #1
 8008dae:	f7ff ff77 	bl	8008ca0 <_Balloc>
 8008db2:	4605      	mov	r5, r0
 8008db4:	b928      	cbnz	r0, 8008dc2 <__multadd+0x5e>
 8008db6:	4602      	mov	r2, r0
 8008db8:	4b0d      	ldr	r3, [pc, #52]	; (8008df0 <__multadd+0x8c>)
 8008dba:	480e      	ldr	r0, [pc, #56]	; (8008df4 <__multadd+0x90>)
 8008dbc:	21b5      	movs	r1, #181	; 0xb5
 8008dbe:	f000 fc67 	bl	8009690 <__assert_func>
 8008dc2:	6922      	ldr	r2, [r4, #16]
 8008dc4:	3202      	adds	r2, #2
 8008dc6:	f104 010c 	add.w	r1, r4, #12
 8008dca:	0092      	lsls	r2, r2, #2
 8008dcc:	300c      	adds	r0, #12
 8008dce:	f7fe f8b9 	bl	8006f44 <memcpy>
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	f7ff ffa3 	bl	8008d20 <_Bfree>
 8008dda:	462c      	mov	r4, r5
 8008ddc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008de0:	3601      	adds	r6, #1
 8008de2:	f8c3 8014 	str.w	r8, [r3, #20]
 8008de6:	6126      	str	r6, [r4, #16]
 8008de8:	4620      	mov	r0, r4
 8008dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dee:	bf00      	nop
 8008df0:	08009abf 	.word	0x08009abf
 8008df4:	08009ad0 	.word	0x08009ad0

08008df8 <__hi0bits>:
 8008df8:	0c03      	lsrs	r3, r0, #16
 8008dfa:	041b      	lsls	r3, r3, #16
 8008dfc:	b9d3      	cbnz	r3, 8008e34 <__hi0bits+0x3c>
 8008dfe:	0400      	lsls	r0, r0, #16
 8008e00:	2310      	movs	r3, #16
 8008e02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e06:	bf04      	itt	eq
 8008e08:	0200      	lsleq	r0, r0, #8
 8008e0a:	3308      	addeq	r3, #8
 8008e0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e10:	bf04      	itt	eq
 8008e12:	0100      	lsleq	r0, r0, #4
 8008e14:	3304      	addeq	r3, #4
 8008e16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e1a:	bf04      	itt	eq
 8008e1c:	0080      	lsleq	r0, r0, #2
 8008e1e:	3302      	addeq	r3, #2
 8008e20:	2800      	cmp	r0, #0
 8008e22:	db05      	blt.n	8008e30 <__hi0bits+0x38>
 8008e24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e28:	f103 0301 	add.w	r3, r3, #1
 8008e2c:	bf08      	it	eq
 8008e2e:	2320      	moveq	r3, #32
 8008e30:	4618      	mov	r0, r3
 8008e32:	4770      	bx	lr
 8008e34:	2300      	movs	r3, #0
 8008e36:	e7e4      	b.n	8008e02 <__hi0bits+0xa>

08008e38 <__lo0bits>:
 8008e38:	6803      	ldr	r3, [r0, #0]
 8008e3a:	f013 0207 	ands.w	r2, r3, #7
 8008e3e:	4601      	mov	r1, r0
 8008e40:	d00b      	beq.n	8008e5a <__lo0bits+0x22>
 8008e42:	07da      	lsls	r2, r3, #31
 8008e44:	d424      	bmi.n	8008e90 <__lo0bits+0x58>
 8008e46:	0798      	lsls	r0, r3, #30
 8008e48:	bf49      	itett	mi
 8008e4a:	085b      	lsrmi	r3, r3, #1
 8008e4c:	089b      	lsrpl	r3, r3, #2
 8008e4e:	2001      	movmi	r0, #1
 8008e50:	600b      	strmi	r3, [r1, #0]
 8008e52:	bf5c      	itt	pl
 8008e54:	600b      	strpl	r3, [r1, #0]
 8008e56:	2002      	movpl	r0, #2
 8008e58:	4770      	bx	lr
 8008e5a:	b298      	uxth	r0, r3
 8008e5c:	b9b0      	cbnz	r0, 8008e8c <__lo0bits+0x54>
 8008e5e:	0c1b      	lsrs	r3, r3, #16
 8008e60:	2010      	movs	r0, #16
 8008e62:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008e66:	bf04      	itt	eq
 8008e68:	0a1b      	lsreq	r3, r3, #8
 8008e6a:	3008      	addeq	r0, #8
 8008e6c:	071a      	lsls	r2, r3, #28
 8008e6e:	bf04      	itt	eq
 8008e70:	091b      	lsreq	r3, r3, #4
 8008e72:	3004      	addeq	r0, #4
 8008e74:	079a      	lsls	r2, r3, #30
 8008e76:	bf04      	itt	eq
 8008e78:	089b      	lsreq	r3, r3, #2
 8008e7a:	3002      	addeq	r0, #2
 8008e7c:	07da      	lsls	r2, r3, #31
 8008e7e:	d403      	bmi.n	8008e88 <__lo0bits+0x50>
 8008e80:	085b      	lsrs	r3, r3, #1
 8008e82:	f100 0001 	add.w	r0, r0, #1
 8008e86:	d005      	beq.n	8008e94 <__lo0bits+0x5c>
 8008e88:	600b      	str	r3, [r1, #0]
 8008e8a:	4770      	bx	lr
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	e7e8      	b.n	8008e62 <__lo0bits+0x2a>
 8008e90:	2000      	movs	r0, #0
 8008e92:	4770      	bx	lr
 8008e94:	2020      	movs	r0, #32
 8008e96:	4770      	bx	lr

08008e98 <__i2b>:
 8008e98:	b510      	push	{r4, lr}
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	2101      	movs	r1, #1
 8008e9e:	f7ff feff 	bl	8008ca0 <_Balloc>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	b928      	cbnz	r0, 8008eb2 <__i2b+0x1a>
 8008ea6:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <__i2b+0x24>)
 8008ea8:	4805      	ldr	r0, [pc, #20]	; (8008ec0 <__i2b+0x28>)
 8008eaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008eae:	f000 fbef 	bl	8009690 <__assert_func>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	6144      	str	r4, [r0, #20]
 8008eb6:	6103      	str	r3, [r0, #16]
 8008eb8:	bd10      	pop	{r4, pc}
 8008eba:	bf00      	nop
 8008ebc:	08009abf 	.word	0x08009abf
 8008ec0:	08009ad0 	.word	0x08009ad0

08008ec4 <__multiply>:
 8008ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec8:	4614      	mov	r4, r2
 8008eca:	690a      	ldr	r2, [r1, #16]
 8008ecc:	6923      	ldr	r3, [r4, #16]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	bfb8      	it	lt
 8008ed2:	460b      	movlt	r3, r1
 8008ed4:	460d      	mov	r5, r1
 8008ed6:	bfbc      	itt	lt
 8008ed8:	4625      	movlt	r5, r4
 8008eda:	461c      	movlt	r4, r3
 8008edc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008ee0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008ee4:	68ab      	ldr	r3, [r5, #8]
 8008ee6:	6869      	ldr	r1, [r5, #4]
 8008ee8:	eb0a 0709 	add.w	r7, sl, r9
 8008eec:	42bb      	cmp	r3, r7
 8008eee:	b085      	sub	sp, #20
 8008ef0:	bfb8      	it	lt
 8008ef2:	3101      	addlt	r1, #1
 8008ef4:	f7ff fed4 	bl	8008ca0 <_Balloc>
 8008ef8:	b930      	cbnz	r0, 8008f08 <__multiply+0x44>
 8008efa:	4602      	mov	r2, r0
 8008efc:	4b42      	ldr	r3, [pc, #264]	; (8009008 <__multiply+0x144>)
 8008efe:	4843      	ldr	r0, [pc, #268]	; (800900c <__multiply+0x148>)
 8008f00:	f240 115d 	movw	r1, #349	; 0x15d
 8008f04:	f000 fbc4 	bl	8009690 <__assert_func>
 8008f08:	f100 0614 	add.w	r6, r0, #20
 8008f0c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008f10:	4633      	mov	r3, r6
 8008f12:	2200      	movs	r2, #0
 8008f14:	4543      	cmp	r3, r8
 8008f16:	d31e      	bcc.n	8008f56 <__multiply+0x92>
 8008f18:	f105 0c14 	add.w	ip, r5, #20
 8008f1c:	f104 0314 	add.w	r3, r4, #20
 8008f20:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008f24:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008f28:	9202      	str	r2, [sp, #8]
 8008f2a:	ebac 0205 	sub.w	r2, ip, r5
 8008f2e:	3a15      	subs	r2, #21
 8008f30:	f022 0203 	bic.w	r2, r2, #3
 8008f34:	3204      	adds	r2, #4
 8008f36:	f105 0115 	add.w	r1, r5, #21
 8008f3a:	458c      	cmp	ip, r1
 8008f3c:	bf38      	it	cc
 8008f3e:	2204      	movcc	r2, #4
 8008f40:	9201      	str	r2, [sp, #4]
 8008f42:	9a02      	ldr	r2, [sp, #8]
 8008f44:	9303      	str	r3, [sp, #12]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d808      	bhi.n	8008f5c <__multiply+0x98>
 8008f4a:	2f00      	cmp	r7, #0
 8008f4c:	dc55      	bgt.n	8008ffa <__multiply+0x136>
 8008f4e:	6107      	str	r7, [r0, #16]
 8008f50:	b005      	add	sp, #20
 8008f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f56:	f843 2b04 	str.w	r2, [r3], #4
 8008f5a:	e7db      	b.n	8008f14 <__multiply+0x50>
 8008f5c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f60:	f1ba 0f00 	cmp.w	sl, #0
 8008f64:	d020      	beq.n	8008fa8 <__multiply+0xe4>
 8008f66:	f105 0e14 	add.w	lr, r5, #20
 8008f6a:	46b1      	mov	r9, r6
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008f72:	f8d9 b000 	ldr.w	fp, [r9]
 8008f76:	b2a1      	uxth	r1, r4
 8008f78:	fa1f fb8b 	uxth.w	fp, fp
 8008f7c:	fb0a b101 	mla	r1, sl, r1, fp
 8008f80:	4411      	add	r1, r2
 8008f82:	f8d9 2000 	ldr.w	r2, [r9]
 8008f86:	0c24      	lsrs	r4, r4, #16
 8008f88:	0c12      	lsrs	r2, r2, #16
 8008f8a:	fb0a 2404 	mla	r4, sl, r4, r2
 8008f8e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008f92:	b289      	uxth	r1, r1
 8008f94:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008f98:	45f4      	cmp	ip, lr
 8008f9a:	f849 1b04 	str.w	r1, [r9], #4
 8008f9e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008fa2:	d8e4      	bhi.n	8008f6e <__multiply+0xaa>
 8008fa4:	9901      	ldr	r1, [sp, #4]
 8008fa6:	5072      	str	r2, [r6, r1]
 8008fa8:	9a03      	ldr	r2, [sp, #12]
 8008faa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008fae:	3304      	adds	r3, #4
 8008fb0:	f1b9 0f00 	cmp.w	r9, #0
 8008fb4:	d01f      	beq.n	8008ff6 <__multiply+0x132>
 8008fb6:	6834      	ldr	r4, [r6, #0]
 8008fb8:	f105 0114 	add.w	r1, r5, #20
 8008fbc:	46b6      	mov	lr, r6
 8008fbe:	f04f 0a00 	mov.w	sl, #0
 8008fc2:	880a      	ldrh	r2, [r1, #0]
 8008fc4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008fc8:	fb09 b202 	mla	r2, r9, r2, fp
 8008fcc:	4492      	add	sl, r2
 8008fce:	b2a4      	uxth	r4, r4
 8008fd0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008fd4:	f84e 4b04 	str.w	r4, [lr], #4
 8008fd8:	f851 4b04 	ldr.w	r4, [r1], #4
 8008fdc:	f8be 2000 	ldrh.w	r2, [lr]
 8008fe0:	0c24      	lsrs	r4, r4, #16
 8008fe2:	fb09 2404 	mla	r4, r9, r4, r2
 8008fe6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008fea:	458c      	cmp	ip, r1
 8008fec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008ff0:	d8e7      	bhi.n	8008fc2 <__multiply+0xfe>
 8008ff2:	9a01      	ldr	r2, [sp, #4]
 8008ff4:	50b4      	str	r4, [r6, r2]
 8008ff6:	3604      	adds	r6, #4
 8008ff8:	e7a3      	b.n	8008f42 <__multiply+0x7e>
 8008ffa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1a5      	bne.n	8008f4e <__multiply+0x8a>
 8009002:	3f01      	subs	r7, #1
 8009004:	e7a1      	b.n	8008f4a <__multiply+0x86>
 8009006:	bf00      	nop
 8009008:	08009abf 	.word	0x08009abf
 800900c:	08009ad0 	.word	0x08009ad0

08009010 <__pow5mult>:
 8009010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009014:	4615      	mov	r5, r2
 8009016:	f012 0203 	ands.w	r2, r2, #3
 800901a:	4606      	mov	r6, r0
 800901c:	460f      	mov	r7, r1
 800901e:	d007      	beq.n	8009030 <__pow5mult+0x20>
 8009020:	4c25      	ldr	r4, [pc, #148]	; (80090b8 <__pow5mult+0xa8>)
 8009022:	3a01      	subs	r2, #1
 8009024:	2300      	movs	r3, #0
 8009026:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800902a:	f7ff fe9b 	bl	8008d64 <__multadd>
 800902e:	4607      	mov	r7, r0
 8009030:	10ad      	asrs	r5, r5, #2
 8009032:	d03d      	beq.n	80090b0 <__pow5mult+0xa0>
 8009034:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009036:	b97c      	cbnz	r4, 8009058 <__pow5mult+0x48>
 8009038:	2010      	movs	r0, #16
 800903a:	f7fd ff7b 	bl	8006f34 <malloc>
 800903e:	4602      	mov	r2, r0
 8009040:	6270      	str	r0, [r6, #36]	; 0x24
 8009042:	b928      	cbnz	r0, 8009050 <__pow5mult+0x40>
 8009044:	4b1d      	ldr	r3, [pc, #116]	; (80090bc <__pow5mult+0xac>)
 8009046:	481e      	ldr	r0, [pc, #120]	; (80090c0 <__pow5mult+0xb0>)
 8009048:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800904c:	f000 fb20 	bl	8009690 <__assert_func>
 8009050:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009054:	6004      	str	r4, [r0, #0]
 8009056:	60c4      	str	r4, [r0, #12]
 8009058:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800905c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009060:	b94c      	cbnz	r4, 8009076 <__pow5mult+0x66>
 8009062:	f240 2171 	movw	r1, #625	; 0x271
 8009066:	4630      	mov	r0, r6
 8009068:	f7ff ff16 	bl	8008e98 <__i2b>
 800906c:	2300      	movs	r3, #0
 800906e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009072:	4604      	mov	r4, r0
 8009074:	6003      	str	r3, [r0, #0]
 8009076:	f04f 0900 	mov.w	r9, #0
 800907a:	07eb      	lsls	r3, r5, #31
 800907c:	d50a      	bpl.n	8009094 <__pow5mult+0x84>
 800907e:	4639      	mov	r1, r7
 8009080:	4622      	mov	r2, r4
 8009082:	4630      	mov	r0, r6
 8009084:	f7ff ff1e 	bl	8008ec4 <__multiply>
 8009088:	4639      	mov	r1, r7
 800908a:	4680      	mov	r8, r0
 800908c:	4630      	mov	r0, r6
 800908e:	f7ff fe47 	bl	8008d20 <_Bfree>
 8009092:	4647      	mov	r7, r8
 8009094:	106d      	asrs	r5, r5, #1
 8009096:	d00b      	beq.n	80090b0 <__pow5mult+0xa0>
 8009098:	6820      	ldr	r0, [r4, #0]
 800909a:	b938      	cbnz	r0, 80090ac <__pow5mult+0x9c>
 800909c:	4622      	mov	r2, r4
 800909e:	4621      	mov	r1, r4
 80090a0:	4630      	mov	r0, r6
 80090a2:	f7ff ff0f 	bl	8008ec4 <__multiply>
 80090a6:	6020      	str	r0, [r4, #0]
 80090a8:	f8c0 9000 	str.w	r9, [r0]
 80090ac:	4604      	mov	r4, r0
 80090ae:	e7e4      	b.n	800907a <__pow5mult+0x6a>
 80090b0:	4638      	mov	r0, r7
 80090b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090b6:	bf00      	nop
 80090b8:	08009c20 	.word	0x08009c20
 80090bc:	08009a49 	.word	0x08009a49
 80090c0:	08009ad0 	.word	0x08009ad0

080090c4 <__lshift>:
 80090c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090c8:	460c      	mov	r4, r1
 80090ca:	6849      	ldr	r1, [r1, #4]
 80090cc:	6923      	ldr	r3, [r4, #16]
 80090ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090d2:	68a3      	ldr	r3, [r4, #8]
 80090d4:	4607      	mov	r7, r0
 80090d6:	4691      	mov	r9, r2
 80090d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090dc:	f108 0601 	add.w	r6, r8, #1
 80090e0:	42b3      	cmp	r3, r6
 80090e2:	db0b      	blt.n	80090fc <__lshift+0x38>
 80090e4:	4638      	mov	r0, r7
 80090e6:	f7ff fddb 	bl	8008ca0 <_Balloc>
 80090ea:	4605      	mov	r5, r0
 80090ec:	b948      	cbnz	r0, 8009102 <__lshift+0x3e>
 80090ee:	4602      	mov	r2, r0
 80090f0:	4b28      	ldr	r3, [pc, #160]	; (8009194 <__lshift+0xd0>)
 80090f2:	4829      	ldr	r0, [pc, #164]	; (8009198 <__lshift+0xd4>)
 80090f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80090f8:	f000 faca 	bl	8009690 <__assert_func>
 80090fc:	3101      	adds	r1, #1
 80090fe:	005b      	lsls	r3, r3, #1
 8009100:	e7ee      	b.n	80090e0 <__lshift+0x1c>
 8009102:	2300      	movs	r3, #0
 8009104:	f100 0114 	add.w	r1, r0, #20
 8009108:	f100 0210 	add.w	r2, r0, #16
 800910c:	4618      	mov	r0, r3
 800910e:	4553      	cmp	r3, sl
 8009110:	db33      	blt.n	800917a <__lshift+0xb6>
 8009112:	6920      	ldr	r0, [r4, #16]
 8009114:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009118:	f104 0314 	add.w	r3, r4, #20
 800911c:	f019 091f 	ands.w	r9, r9, #31
 8009120:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009124:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009128:	d02b      	beq.n	8009182 <__lshift+0xbe>
 800912a:	f1c9 0e20 	rsb	lr, r9, #32
 800912e:	468a      	mov	sl, r1
 8009130:	2200      	movs	r2, #0
 8009132:	6818      	ldr	r0, [r3, #0]
 8009134:	fa00 f009 	lsl.w	r0, r0, r9
 8009138:	4302      	orrs	r2, r0
 800913a:	f84a 2b04 	str.w	r2, [sl], #4
 800913e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009142:	459c      	cmp	ip, r3
 8009144:	fa22 f20e 	lsr.w	r2, r2, lr
 8009148:	d8f3      	bhi.n	8009132 <__lshift+0x6e>
 800914a:	ebac 0304 	sub.w	r3, ip, r4
 800914e:	3b15      	subs	r3, #21
 8009150:	f023 0303 	bic.w	r3, r3, #3
 8009154:	3304      	adds	r3, #4
 8009156:	f104 0015 	add.w	r0, r4, #21
 800915a:	4584      	cmp	ip, r0
 800915c:	bf38      	it	cc
 800915e:	2304      	movcc	r3, #4
 8009160:	50ca      	str	r2, [r1, r3]
 8009162:	b10a      	cbz	r2, 8009168 <__lshift+0xa4>
 8009164:	f108 0602 	add.w	r6, r8, #2
 8009168:	3e01      	subs	r6, #1
 800916a:	4638      	mov	r0, r7
 800916c:	612e      	str	r6, [r5, #16]
 800916e:	4621      	mov	r1, r4
 8009170:	f7ff fdd6 	bl	8008d20 <_Bfree>
 8009174:	4628      	mov	r0, r5
 8009176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800917a:	f842 0f04 	str.w	r0, [r2, #4]!
 800917e:	3301      	adds	r3, #1
 8009180:	e7c5      	b.n	800910e <__lshift+0x4a>
 8009182:	3904      	subs	r1, #4
 8009184:	f853 2b04 	ldr.w	r2, [r3], #4
 8009188:	f841 2f04 	str.w	r2, [r1, #4]!
 800918c:	459c      	cmp	ip, r3
 800918e:	d8f9      	bhi.n	8009184 <__lshift+0xc0>
 8009190:	e7ea      	b.n	8009168 <__lshift+0xa4>
 8009192:	bf00      	nop
 8009194:	08009abf 	.word	0x08009abf
 8009198:	08009ad0 	.word	0x08009ad0

0800919c <__mcmp>:
 800919c:	b530      	push	{r4, r5, lr}
 800919e:	6902      	ldr	r2, [r0, #16]
 80091a0:	690c      	ldr	r4, [r1, #16]
 80091a2:	1b12      	subs	r2, r2, r4
 80091a4:	d10e      	bne.n	80091c4 <__mcmp+0x28>
 80091a6:	f100 0314 	add.w	r3, r0, #20
 80091aa:	3114      	adds	r1, #20
 80091ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80091b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80091b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80091b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80091bc:	42a5      	cmp	r5, r4
 80091be:	d003      	beq.n	80091c8 <__mcmp+0x2c>
 80091c0:	d305      	bcc.n	80091ce <__mcmp+0x32>
 80091c2:	2201      	movs	r2, #1
 80091c4:	4610      	mov	r0, r2
 80091c6:	bd30      	pop	{r4, r5, pc}
 80091c8:	4283      	cmp	r3, r0
 80091ca:	d3f3      	bcc.n	80091b4 <__mcmp+0x18>
 80091cc:	e7fa      	b.n	80091c4 <__mcmp+0x28>
 80091ce:	f04f 32ff 	mov.w	r2, #4294967295
 80091d2:	e7f7      	b.n	80091c4 <__mcmp+0x28>

080091d4 <__mdiff>:
 80091d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d8:	460c      	mov	r4, r1
 80091da:	4606      	mov	r6, r0
 80091dc:	4611      	mov	r1, r2
 80091de:	4620      	mov	r0, r4
 80091e0:	4617      	mov	r7, r2
 80091e2:	f7ff ffdb 	bl	800919c <__mcmp>
 80091e6:	1e05      	subs	r5, r0, #0
 80091e8:	d110      	bne.n	800920c <__mdiff+0x38>
 80091ea:	4629      	mov	r1, r5
 80091ec:	4630      	mov	r0, r6
 80091ee:	f7ff fd57 	bl	8008ca0 <_Balloc>
 80091f2:	b930      	cbnz	r0, 8009202 <__mdiff+0x2e>
 80091f4:	4b39      	ldr	r3, [pc, #228]	; (80092dc <__mdiff+0x108>)
 80091f6:	4602      	mov	r2, r0
 80091f8:	f240 2132 	movw	r1, #562	; 0x232
 80091fc:	4838      	ldr	r0, [pc, #224]	; (80092e0 <__mdiff+0x10c>)
 80091fe:	f000 fa47 	bl	8009690 <__assert_func>
 8009202:	2301      	movs	r3, #1
 8009204:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009208:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800920c:	bfa4      	itt	ge
 800920e:	463b      	movge	r3, r7
 8009210:	4627      	movge	r7, r4
 8009212:	4630      	mov	r0, r6
 8009214:	6879      	ldr	r1, [r7, #4]
 8009216:	bfa6      	itte	ge
 8009218:	461c      	movge	r4, r3
 800921a:	2500      	movge	r5, #0
 800921c:	2501      	movlt	r5, #1
 800921e:	f7ff fd3f 	bl	8008ca0 <_Balloc>
 8009222:	b920      	cbnz	r0, 800922e <__mdiff+0x5a>
 8009224:	4b2d      	ldr	r3, [pc, #180]	; (80092dc <__mdiff+0x108>)
 8009226:	4602      	mov	r2, r0
 8009228:	f44f 7110 	mov.w	r1, #576	; 0x240
 800922c:	e7e6      	b.n	80091fc <__mdiff+0x28>
 800922e:	693e      	ldr	r6, [r7, #16]
 8009230:	60c5      	str	r5, [r0, #12]
 8009232:	6925      	ldr	r5, [r4, #16]
 8009234:	f107 0114 	add.w	r1, r7, #20
 8009238:	f104 0914 	add.w	r9, r4, #20
 800923c:	f100 0e14 	add.w	lr, r0, #20
 8009240:	f107 0210 	add.w	r2, r7, #16
 8009244:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009248:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800924c:	46f2      	mov	sl, lr
 800924e:	2700      	movs	r7, #0
 8009250:	f859 3b04 	ldr.w	r3, [r9], #4
 8009254:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009258:	fa1f f883 	uxth.w	r8, r3
 800925c:	fa17 f78b 	uxtah	r7, r7, fp
 8009260:	0c1b      	lsrs	r3, r3, #16
 8009262:	eba7 0808 	sub.w	r8, r7, r8
 8009266:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800926a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800926e:	fa1f f888 	uxth.w	r8, r8
 8009272:	141f      	asrs	r7, r3, #16
 8009274:	454d      	cmp	r5, r9
 8009276:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800927a:	f84a 3b04 	str.w	r3, [sl], #4
 800927e:	d8e7      	bhi.n	8009250 <__mdiff+0x7c>
 8009280:	1b2b      	subs	r3, r5, r4
 8009282:	3b15      	subs	r3, #21
 8009284:	f023 0303 	bic.w	r3, r3, #3
 8009288:	3304      	adds	r3, #4
 800928a:	3415      	adds	r4, #21
 800928c:	42a5      	cmp	r5, r4
 800928e:	bf38      	it	cc
 8009290:	2304      	movcc	r3, #4
 8009292:	4419      	add	r1, r3
 8009294:	4473      	add	r3, lr
 8009296:	469e      	mov	lr, r3
 8009298:	460d      	mov	r5, r1
 800929a:	4565      	cmp	r5, ip
 800929c:	d30e      	bcc.n	80092bc <__mdiff+0xe8>
 800929e:	f10c 0203 	add.w	r2, ip, #3
 80092a2:	1a52      	subs	r2, r2, r1
 80092a4:	f022 0203 	bic.w	r2, r2, #3
 80092a8:	3903      	subs	r1, #3
 80092aa:	458c      	cmp	ip, r1
 80092ac:	bf38      	it	cc
 80092ae:	2200      	movcc	r2, #0
 80092b0:	441a      	add	r2, r3
 80092b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80092b6:	b17b      	cbz	r3, 80092d8 <__mdiff+0x104>
 80092b8:	6106      	str	r6, [r0, #16]
 80092ba:	e7a5      	b.n	8009208 <__mdiff+0x34>
 80092bc:	f855 8b04 	ldr.w	r8, [r5], #4
 80092c0:	fa17 f488 	uxtah	r4, r7, r8
 80092c4:	1422      	asrs	r2, r4, #16
 80092c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80092ca:	b2a4      	uxth	r4, r4
 80092cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80092d0:	f84e 4b04 	str.w	r4, [lr], #4
 80092d4:	1417      	asrs	r7, r2, #16
 80092d6:	e7e0      	b.n	800929a <__mdiff+0xc6>
 80092d8:	3e01      	subs	r6, #1
 80092da:	e7ea      	b.n	80092b2 <__mdiff+0xde>
 80092dc:	08009abf 	.word	0x08009abf
 80092e0:	08009ad0 	.word	0x08009ad0

080092e4 <__d2b>:
 80092e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092e8:	4689      	mov	r9, r1
 80092ea:	2101      	movs	r1, #1
 80092ec:	ec57 6b10 	vmov	r6, r7, d0
 80092f0:	4690      	mov	r8, r2
 80092f2:	f7ff fcd5 	bl	8008ca0 <_Balloc>
 80092f6:	4604      	mov	r4, r0
 80092f8:	b930      	cbnz	r0, 8009308 <__d2b+0x24>
 80092fa:	4602      	mov	r2, r0
 80092fc:	4b25      	ldr	r3, [pc, #148]	; (8009394 <__d2b+0xb0>)
 80092fe:	4826      	ldr	r0, [pc, #152]	; (8009398 <__d2b+0xb4>)
 8009300:	f240 310a 	movw	r1, #778	; 0x30a
 8009304:	f000 f9c4 	bl	8009690 <__assert_func>
 8009308:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800930c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009310:	bb35      	cbnz	r5, 8009360 <__d2b+0x7c>
 8009312:	2e00      	cmp	r6, #0
 8009314:	9301      	str	r3, [sp, #4]
 8009316:	d028      	beq.n	800936a <__d2b+0x86>
 8009318:	4668      	mov	r0, sp
 800931a:	9600      	str	r6, [sp, #0]
 800931c:	f7ff fd8c 	bl	8008e38 <__lo0bits>
 8009320:	9900      	ldr	r1, [sp, #0]
 8009322:	b300      	cbz	r0, 8009366 <__d2b+0x82>
 8009324:	9a01      	ldr	r2, [sp, #4]
 8009326:	f1c0 0320 	rsb	r3, r0, #32
 800932a:	fa02 f303 	lsl.w	r3, r2, r3
 800932e:	430b      	orrs	r3, r1
 8009330:	40c2      	lsrs	r2, r0
 8009332:	6163      	str	r3, [r4, #20]
 8009334:	9201      	str	r2, [sp, #4]
 8009336:	9b01      	ldr	r3, [sp, #4]
 8009338:	61a3      	str	r3, [r4, #24]
 800933a:	2b00      	cmp	r3, #0
 800933c:	bf14      	ite	ne
 800933e:	2202      	movne	r2, #2
 8009340:	2201      	moveq	r2, #1
 8009342:	6122      	str	r2, [r4, #16]
 8009344:	b1d5      	cbz	r5, 800937c <__d2b+0x98>
 8009346:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800934a:	4405      	add	r5, r0
 800934c:	f8c9 5000 	str.w	r5, [r9]
 8009350:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009354:	f8c8 0000 	str.w	r0, [r8]
 8009358:	4620      	mov	r0, r4
 800935a:	b003      	add	sp, #12
 800935c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009360:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009364:	e7d5      	b.n	8009312 <__d2b+0x2e>
 8009366:	6161      	str	r1, [r4, #20]
 8009368:	e7e5      	b.n	8009336 <__d2b+0x52>
 800936a:	a801      	add	r0, sp, #4
 800936c:	f7ff fd64 	bl	8008e38 <__lo0bits>
 8009370:	9b01      	ldr	r3, [sp, #4]
 8009372:	6163      	str	r3, [r4, #20]
 8009374:	2201      	movs	r2, #1
 8009376:	6122      	str	r2, [r4, #16]
 8009378:	3020      	adds	r0, #32
 800937a:	e7e3      	b.n	8009344 <__d2b+0x60>
 800937c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009380:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009384:	f8c9 0000 	str.w	r0, [r9]
 8009388:	6918      	ldr	r0, [r3, #16]
 800938a:	f7ff fd35 	bl	8008df8 <__hi0bits>
 800938e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009392:	e7df      	b.n	8009354 <__d2b+0x70>
 8009394:	08009abf 	.word	0x08009abf
 8009398:	08009ad0 	.word	0x08009ad0

0800939c <_calloc_r>:
 800939c:	b513      	push	{r0, r1, r4, lr}
 800939e:	434a      	muls	r2, r1
 80093a0:	4611      	mov	r1, r2
 80093a2:	9201      	str	r2, [sp, #4]
 80093a4:	f7fd fe34 	bl	8007010 <_malloc_r>
 80093a8:	4604      	mov	r4, r0
 80093aa:	b118      	cbz	r0, 80093b4 <_calloc_r+0x18>
 80093ac:	9a01      	ldr	r2, [sp, #4]
 80093ae:	2100      	movs	r1, #0
 80093b0:	f7fd fdd6 	bl	8006f60 <memset>
 80093b4:	4620      	mov	r0, r4
 80093b6:	b002      	add	sp, #8
 80093b8:	bd10      	pop	{r4, pc}

080093ba <__sfputc_r>:
 80093ba:	6893      	ldr	r3, [r2, #8]
 80093bc:	3b01      	subs	r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	b410      	push	{r4}
 80093c2:	6093      	str	r3, [r2, #8]
 80093c4:	da08      	bge.n	80093d8 <__sfputc_r+0x1e>
 80093c6:	6994      	ldr	r4, [r2, #24]
 80093c8:	42a3      	cmp	r3, r4
 80093ca:	db01      	blt.n	80093d0 <__sfputc_r+0x16>
 80093cc:	290a      	cmp	r1, #10
 80093ce:	d103      	bne.n	80093d8 <__sfputc_r+0x1e>
 80093d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093d4:	f7fe bbc2 	b.w	8007b5c <__swbuf_r>
 80093d8:	6813      	ldr	r3, [r2, #0]
 80093da:	1c58      	adds	r0, r3, #1
 80093dc:	6010      	str	r0, [r2, #0]
 80093de:	7019      	strb	r1, [r3, #0]
 80093e0:	4608      	mov	r0, r1
 80093e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <__sfputs_r>:
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ea:	4606      	mov	r6, r0
 80093ec:	460f      	mov	r7, r1
 80093ee:	4614      	mov	r4, r2
 80093f0:	18d5      	adds	r5, r2, r3
 80093f2:	42ac      	cmp	r4, r5
 80093f4:	d101      	bne.n	80093fa <__sfputs_r+0x12>
 80093f6:	2000      	movs	r0, #0
 80093f8:	e007      	b.n	800940a <__sfputs_r+0x22>
 80093fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093fe:	463a      	mov	r2, r7
 8009400:	4630      	mov	r0, r6
 8009402:	f7ff ffda 	bl	80093ba <__sfputc_r>
 8009406:	1c43      	adds	r3, r0, #1
 8009408:	d1f3      	bne.n	80093f2 <__sfputs_r+0xa>
 800940a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800940c <_vfiprintf_r>:
 800940c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009410:	460d      	mov	r5, r1
 8009412:	b09d      	sub	sp, #116	; 0x74
 8009414:	4614      	mov	r4, r2
 8009416:	4698      	mov	r8, r3
 8009418:	4606      	mov	r6, r0
 800941a:	b118      	cbz	r0, 8009424 <_vfiprintf_r+0x18>
 800941c:	6983      	ldr	r3, [r0, #24]
 800941e:	b90b      	cbnz	r3, 8009424 <_vfiprintf_r+0x18>
 8009420:	f7fd fcc2 	bl	8006da8 <__sinit>
 8009424:	4b89      	ldr	r3, [pc, #548]	; (800964c <_vfiprintf_r+0x240>)
 8009426:	429d      	cmp	r5, r3
 8009428:	d11b      	bne.n	8009462 <_vfiprintf_r+0x56>
 800942a:	6875      	ldr	r5, [r6, #4]
 800942c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800942e:	07d9      	lsls	r1, r3, #31
 8009430:	d405      	bmi.n	800943e <_vfiprintf_r+0x32>
 8009432:	89ab      	ldrh	r3, [r5, #12]
 8009434:	059a      	lsls	r2, r3, #22
 8009436:	d402      	bmi.n	800943e <_vfiprintf_r+0x32>
 8009438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800943a:	f7fd fd78 	bl	8006f2e <__retarget_lock_acquire_recursive>
 800943e:	89ab      	ldrh	r3, [r5, #12]
 8009440:	071b      	lsls	r3, r3, #28
 8009442:	d501      	bpl.n	8009448 <_vfiprintf_r+0x3c>
 8009444:	692b      	ldr	r3, [r5, #16]
 8009446:	b9eb      	cbnz	r3, 8009484 <_vfiprintf_r+0x78>
 8009448:	4629      	mov	r1, r5
 800944a:	4630      	mov	r0, r6
 800944c:	f7fe fbea 	bl	8007c24 <__swsetup_r>
 8009450:	b1c0      	cbz	r0, 8009484 <_vfiprintf_r+0x78>
 8009452:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009454:	07dc      	lsls	r4, r3, #31
 8009456:	d50e      	bpl.n	8009476 <_vfiprintf_r+0x6a>
 8009458:	f04f 30ff 	mov.w	r0, #4294967295
 800945c:	b01d      	add	sp, #116	; 0x74
 800945e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009462:	4b7b      	ldr	r3, [pc, #492]	; (8009650 <_vfiprintf_r+0x244>)
 8009464:	429d      	cmp	r5, r3
 8009466:	d101      	bne.n	800946c <_vfiprintf_r+0x60>
 8009468:	68b5      	ldr	r5, [r6, #8]
 800946a:	e7df      	b.n	800942c <_vfiprintf_r+0x20>
 800946c:	4b79      	ldr	r3, [pc, #484]	; (8009654 <_vfiprintf_r+0x248>)
 800946e:	429d      	cmp	r5, r3
 8009470:	bf08      	it	eq
 8009472:	68f5      	ldreq	r5, [r6, #12]
 8009474:	e7da      	b.n	800942c <_vfiprintf_r+0x20>
 8009476:	89ab      	ldrh	r3, [r5, #12]
 8009478:	0598      	lsls	r0, r3, #22
 800947a:	d4ed      	bmi.n	8009458 <_vfiprintf_r+0x4c>
 800947c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800947e:	f7fd fd57 	bl	8006f30 <__retarget_lock_release_recursive>
 8009482:	e7e9      	b.n	8009458 <_vfiprintf_r+0x4c>
 8009484:	2300      	movs	r3, #0
 8009486:	9309      	str	r3, [sp, #36]	; 0x24
 8009488:	2320      	movs	r3, #32
 800948a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800948e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009492:	2330      	movs	r3, #48	; 0x30
 8009494:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009658 <_vfiprintf_r+0x24c>
 8009498:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800949c:	f04f 0901 	mov.w	r9, #1
 80094a0:	4623      	mov	r3, r4
 80094a2:	469a      	mov	sl, r3
 80094a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094a8:	b10a      	cbz	r2, 80094ae <_vfiprintf_r+0xa2>
 80094aa:	2a25      	cmp	r2, #37	; 0x25
 80094ac:	d1f9      	bne.n	80094a2 <_vfiprintf_r+0x96>
 80094ae:	ebba 0b04 	subs.w	fp, sl, r4
 80094b2:	d00b      	beq.n	80094cc <_vfiprintf_r+0xc0>
 80094b4:	465b      	mov	r3, fp
 80094b6:	4622      	mov	r2, r4
 80094b8:	4629      	mov	r1, r5
 80094ba:	4630      	mov	r0, r6
 80094bc:	f7ff ff94 	bl	80093e8 <__sfputs_r>
 80094c0:	3001      	adds	r0, #1
 80094c2:	f000 80aa 	beq.w	800961a <_vfiprintf_r+0x20e>
 80094c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094c8:	445a      	add	r2, fp
 80094ca:	9209      	str	r2, [sp, #36]	; 0x24
 80094cc:	f89a 3000 	ldrb.w	r3, [sl]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 80a2 	beq.w	800961a <_vfiprintf_r+0x20e>
 80094d6:	2300      	movs	r3, #0
 80094d8:	f04f 32ff 	mov.w	r2, #4294967295
 80094dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094e0:	f10a 0a01 	add.w	sl, sl, #1
 80094e4:	9304      	str	r3, [sp, #16]
 80094e6:	9307      	str	r3, [sp, #28]
 80094e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094ec:	931a      	str	r3, [sp, #104]	; 0x68
 80094ee:	4654      	mov	r4, sl
 80094f0:	2205      	movs	r2, #5
 80094f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f6:	4858      	ldr	r0, [pc, #352]	; (8009658 <_vfiprintf_r+0x24c>)
 80094f8:	f7f6 fe82 	bl	8000200 <memchr>
 80094fc:	9a04      	ldr	r2, [sp, #16]
 80094fe:	b9d8      	cbnz	r0, 8009538 <_vfiprintf_r+0x12c>
 8009500:	06d1      	lsls	r1, r2, #27
 8009502:	bf44      	itt	mi
 8009504:	2320      	movmi	r3, #32
 8009506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800950a:	0713      	lsls	r3, r2, #28
 800950c:	bf44      	itt	mi
 800950e:	232b      	movmi	r3, #43	; 0x2b
 8009510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009514:	f89a 3000 	ldrb.w	r3, [sl]
 8009518:	2b2a      	cmp	r3, #42	; 0x2a
 800951a:	d015      	beq.n	8009548 <_vfiprintf_r+0x13c>
 800951c:	9a07      	ldr	r2, [sp, #28]
 800951e:	4654      	mov	r4, sl
 8009520:	2000      	movs	r0, #0
 8009522:	f04f 0c0a 	mov.w	ip, #10
 8009526:	4621      	mov	r1, r4
 8009528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800952c:	3b30      	subs	r3, #48	; 0x30
 800952e:	2b09      	cmp	r3, #9
 8009530:	d94e      	bls.n	80095d0 <_vfiprintf_r+0x1c4>
 8009532:	b1b0      	cbz	r0, 8009562 <_vfiprintf_r+0x156>
 8009534:	9207      	str	r2, [sp, #28]
 8009536:	e014      	b.n	8009562 <_vfiprintf_r+0x156>
 8009538:	eba0 0308 	sub.w	r3, r0, r8
 800953c:	fa09 f303 	lsl.w	r3, r9, r3
 8009540:	4313      	orrs	r3, r2
 8009542:	9304      	str	r3, [sp, #16]
 8009544:	46a2      	mov	sl, r4
 8009546:	e7d2      	b.n	80094ee <_vfiprintf_r+0xe2>
 8009548:	9b03      	ldr	r3, [sp, #12]
 800954a:	1d19      	adds	r1, r3, #4
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	9103      	str	r1, [sp, #12]
 8009550:	2b00      	cmp	r3, #0
 8009552:	bfbb      	ittet	lt
 8009554:	425b      	neglt	r3, r3
 8009556:	f042 0202 	orrlt.w	r2, r2, #2
 800955a:	9307      	strge	r3, [sp, #28]
 800955c:	9307      	strlt	r3, [sp, #28]
 800955e:	bfb8      	it	lt
 8009560:	9204      	strlt	r2, [sp, #16]
 8009562:	7823      	ldrb	r3, [r4, #0]
 8009564:	2b2e      	cmp	r3, #46	; 0x2e
 8009566:	d10c      	bne.n	8009582 <_vfiprintf_r+0x176>
 8009568:	7863      	ldrb	r3, [r4, #1]
 800956a:	2b2a      	cmp	r3, #42	; 0x2a
 800956c:	d135      	bne.n	80095da <_vfiprintf_r+0x1ce>
 800956e:	9b03      	ldr	r3, [sp, #12]
 8009570:	1d1a      	adds	r2, r3, #4
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	9203      	str	r2, [sp, #12]
 8009576:	2b00      	cmp	r3, #0
 8009578:	bfb8      	it	lt
 800957a:	f04f 33ff 	movlt.w	r3, #4294967295
 800957e:	3402      	adds	r4, #2
 8009580:	9305      	str	r3, [sp, #20]
 8009582:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009668 <_vfiprintf_r+0x25c>
 8009586:	7821      	ldrb	r1, [r4, #0]
 8009588:	2203      	movs	r2, #3
 800958a:	4650      	mov	r0, sl
 800958c:	f7f6 fe38 	bl	8000200 <memchr>
 8009590:	b140      	cbz	r0, 80095a4 <_vfiprintf_r+0x198>
 8009592:	2340      	movs	r3, #64	; 0x40
 8009594:	eba0 000a 	sub.w	r0, r0, sl
 8009598:	fa03 f000 	lsl.w	r0, r3, r0
 800959c:	9b04      	ldr	r3, [sp, #16]
 800959e:	4303      	orrs	r3, r0
 80095a0:	3401      	adds	r4, #1
 80095a2:	9304      	str	r3, [sp, #16]
 80095a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095a8:	482c      	ldr	r0, [pc, #176]	; (800965c <_vfiprintf_r+0x250>)
 80095aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095ae:	2206      	movs	r2, #6
 80095b0:	f7f6 fe26 	bl	8000200 <memchr>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d03f      	beq.n	8009638 <_vfiprintf_r+0x22c>
 80095b8:	4b29      	ldr	r3, [pc, #164]	; (8009660 <_vfiprintf_r+0x254>)
 80095ba:	bb1b      	cbnz	r3, 8009604 <_vfiprintf_r+0x1f8>
 80095bc:	9b03      	ldr	r3, [sp, #12]
 80095be:	3307      	adds	r3, #7
 80095c0:	f023 0307 	bic.w	r3, r3, #7
 80095c4:	3308      	adds	r3, #8
 80095c6:	9303      	str	r3, [sp, #12]
 80095c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ca:	443b      	add	r3, r7
 80095cc:	9309      	str	r3, [sp, #36]	; 0x24
 80095ce:	e767      	b.n	80094a0 <_vfiprintf_r+0x94>
 80095d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80095d4:	460c      	mov	r4, r1
 80095d6:	2001      	movs	r0, #1
 80095d8:	e7a5      	b.n	8009526 <_vfiprintf_r+0x11a>
 80095da:	2300      	movs	r3, #0
 80095dc:	3401      	adds	r4, #1
 80095de:	9305      	str	r3, [sp, #20]
 80095e0:	4619      	mov	r1, r3
 80095e2:	f04f 0c0a 	mov.w	ip, #10
 80095e6:	4620      	mov	r0, r4
 80095e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095ec:	3a30      	subs	r2, #48	; 0x30
 80095ee:	2a09      	cmp	r2, #9
 80095f0:	d903      	bls.n	80095fa <_vfiprintf_r+0x1ee>
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d0c5      	beq.n	8009582 <_vfiprintf_r+0x176>
 80095f6:	9105      	str	r1, [sp, #20]
 80095f8:	e7c3      	b.n	8009582 <_vfiprintf_r+0x176>
 80095fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80095fe:	4604      	mov	r4, r0
 8009600:	2301      	movs	r3, #1
 8009602:	e7f0      	b.n	80095e6 <_vfiprintf_r+0x1da>
 8009604:	ab03      	add	r3, sp, #12
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	462a      	mov	r2, r5
 800960a:	4b16      	ldr	r3, [pc, #88]	; (8009664 <_vfiprintf_r+0x258>)
 800960c:	a904      	add	r1, sp, #16
 800960e:	4630      	mov	r0, r6
 8009610:	f7fd fdf8 	bl	8007204 <_printf_float>
 8009614:	4607      	mov	r7, r0
 8009616:	1c78      	adds	r0, r7, #1
 8009618:	d1d6      	bne.n	80095c8 <_vfiprintf_r+0x1bc>
 800961a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800961c:	07d9      	lsls	r1, r3, #31
 800961e:	d405      	bmi.n	800962c <_vfiprintf_r+0x220>
 8009620:	89ab      	ldrh	r3, [r5, #12]
 8009622:	059a      	lsls	r2, r3, #22
 8009624:	d402      	bmi.n	800962c <_vfiprintf_r+0x220>
 8009626:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009628:	f7fd fc82 	bl	8006f30 <__retarget_lock_release_recursive>
 800962c:	89ab      	ldrh	r3, [r5, #12]
 800962e:	065b      	lsls	r3, r3, #25
 8009630:	f53f af12 	bmi.w	8009458 <_vfiprintf_r+0x4c>
 8009634:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009636:	e711      	b.n	800945c <_vfiprintf_r+0x50>
 8009638:	ab03      	add	r3, sp, #12
 800963a:	9300      	str	r3, [sp, #0]
 800963c:	462a      	mov	r2, r5
 800963e:	4b09      	ldr	r3, [pc, #36]	; (8009664 <_vfiprintf_r+0x258>)
 8009640:	a904      	add	r1, sp, #16
 8009642:	4630      	mov	r0, r6
 8009644:	f7fe f882 	bl	800774c <_printf_i>
 8009648:	e7e4      	b.n	8009614 <_vfiprintf_r+0x208>
 800964a:	bf00      	nop
 800964c:	080099c4 	.word	0x080099c4
 8009650:	080099e4 	.word	0x080099e4
 8009654:	080099a4 	.word	0x080099a4
 8009658:	08009c2c 	.word	0x08009c2c
 800965c:	08009c36 	.word	0x08009c36
 8009660:	08007205 	.word	0x08007205
 8009664:	080093e9 	.word	0x080093e9
 8009668:	08009c32 	.word	0x08009c32

0800966c <_read_r>:
 800966c:	b538      	push	{r3, r4, r5, lr}
 800966e:	4d07      	ldr	r5, [pc, #28]	; (800968c <_read_r+0x20>)
 8009670:	4604      	mov	r4, r0
 8009672:	4608      	mov	r0, r1
 8009674:	4611      	mov	r1, r2
 8009676:	2200      	movs	r2, #0
 8009678:	602a      	str	r2, [r5, #0]
 800967a:	461a      	mov	r2, r3
 800967c:	f7f8 fca2 	bl	8001fc4 <_read>
 8009680:	1c43      	adds	r3, r0, #1
 8009682:	d102      	bne.n	800968a <_read_r+0x1e>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	b103      	cbz	r3, 800968a <_read_r+0x1e>
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	bd38      	pop	{r3, r4, r5, pc}
 800968c:	20004940 	.word	0x20004940

08009690 <__assert_func>:
 8009690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009692:	4614      	mov	r4, r2
 8009694:	461a      	mov	r2, r3
 8009696:	4b09      	ldr	r3, [pc, #36]	; (80096bc <__assert_func+0x2c>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4605      	mov	r5, r0
 800969c:	68d8      	ldr	r0, [r3, #12]
 800969e:	b14c      	cbz	r4, 80096b4 <__assert_func+0x24>
 80096a0:	4b07      	ldr	r3, [pc, #28]	; (80096c0 <__assert_func+0x30>)
 80096a2:	9100      	str	r1, [sp, #0]
 80096a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096a8:	4906      	ldr	r1, [pc, #24]	; (80096c4 <__assert_func+0x34>)
 80096aa:	462b      	mov	r3, r5
 80096ac:	f000 f80e 	bl	80096cc <fiprintf>
 80096b0:	f000 f85f 	bl	8009772 <abort>
 80096b4:	4b04      	ldr	r3, [pc, #16]	; (80096c8 <__assert_func+0x38>)
 80096b6:	461c      	mov	r4, r3
 80096b8:	e7f3      	b.n	80096a2 <__assert_func+0x12>
 80096ba:	bf00      	nop
 80096bc:	200000e8 	.word	0x200000e8
 80096c0:	08009c3d 	.word	0x08009c3d
 80096c4:	08009c4a 	.word	0x08009c4a
 80096c8:	08009c78 	.word	0x08009c78

080096cc <fiprintf>:
 80096cc:	b40e      	push	{r1, r2, r3}
 80096ce:	b503      	push	{r0, r1, lr}
 80096d0:	4601      	mov	r1, r0
 80096d2:	ab03      	add	r3, sp, #12
 80096d4:	4805      	ldr	r0, [pc, #20]	; (80096ec <fiprintf+0x20>)
 80096d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096da:	6800      	ldr	r0, [r0, #0]
 80096dc:	9301      	str	r3, [sp, #4]
 80096de:	f7ff fe95 	bl	800940c <_vfiprintf_r>
 80096e2:	b002      	add	sp, #8
 80096e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80096e8:	b003      	add	sp, #12
 80096ea:	4770      	bx	lr
 80096ec:	200000e8 	.word	0x200000e8

080096f0 <_fstat_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4d07      	ldr	r5, [pc, #28]	; (8009710 <_fstat_r+0x20>)
 80096f4:	2300      	movs	r3, #0
 80096f6:	4604      	mov	r4, r0
 80096f8:	4608      	mov	r0, r1
 80096fa:	4611      	mov	r1, r2
 80096fc:	602b      	str	r3, [r5, #0]
 80096fe:	f7f8 fc8a 	bl	8002016 <_fstat>
 8009702:	1c43      	adds	r3, r0, #1
 8009704:	d102      	bne.n	800970c <_fstat_r+0x1c>
 8009706:	682b      	ldr	r3, [r5, #0]
 8009708:	b103      	cbz	r3, 800970c <_fstat_r+0x1c>
 800970a:	6023      	str	r3, [r4, #0]
 800970c:	bd38      	pop	{r3, r4, r5, pc}
 800970e:	bf00      	nop
 8009710:	20004940 	.word	0x20004940

08009714 <_isatty_r>:
 8009714:	b538      	push	{r3, r4, r5, lr}
 8009716:	4d06      	ldr	r5, [pc, #24]	; (8009730 <_isatty_r+0x1c>)
 8009718:	2300      	movs	r3, #0
 800971a:	4604      	mov	r4, r0
 800971c:	4608      	mov	r0, r1
 800971e:	602b      	str	r3, [r5, #0]
 8009720:	f7f8 fc89 	bl	8002036 <_isatty>
 8009724:	1c43      	adds	r3, r0, #1
 8009726:	d102      	bne.n	800972e <_isatty_r+0x1a>
 8009728:	682b      	ldr	r3, [r5, #0]
 800972a:	b103      	cbz	r3, 800972e <_isatty_r+0x1a>
 800972c:	6023      	str	r3, [r4, #0]
 800972e:	bd38      	pop	{r3, r4, r5, pc}
 8009730:	20004940 	.word	0x20004940

08009734 <__ascii_mbtowc>:
 8009734:	b082      	sub	sp, #8
 8009736:	b901      	cbnz	r1, 800973a <__ascii_mbtowc+0x6>
 8009738:	a901      	add	r1, sp, #4
 800973a:	b142      	cbz	r2, 800974e <__ascii_mbtowc+0x1a>
 800973c:	b14b      	cbz	r3, 8009752 <__ascii_mbtowc+0x1e>
 800973e:	7813      	ldrb	r3, [r2, #0]
 8009740:	600b      	str	r3, [r1, #0]
 8009742:	7812      	ldrb	r2, [r2, #0]
 8009744:	1e10      	subs	r0, r2, #0
 8009746:	bf18      	it	ne
 8009748:	2001      	movne	r0, #1
 800974a:	b002      	add	sp, #8
 800974c:	4770      	bx	lr
 800974e:	4610      	mov	r0, r2
 8009750:	e7fb      	b.n	800974a <__ascii_mbtowc+0x16>
 8009752:	f06f 0001 	mvn.w	r0, #1
 8009756:	e7f8      	b.n	800974a <__ascii_mbtowc+0x16>

08009758 <__ascii_wctomb>:
 8009758:	b149      	cbz	r1, 800976e <__ascii_wctomb+0x16>
 800975a:	2aff      	cmp	r2, #255	; 0xff
 800975c:	bf85      	ittet	hi
 800975e:	238a      	movhi	r3, #138	; 0x8a
 8009760:	6003      	strhi	r3, [r0, #0]
 8009762:	700a      	strbls	r2, [r1, #0]
 8009764:	f04f 30ff 	movhi.w	r0, #4294967295
 8009768:	bf98      	it	ls
 800976a:	2001      	movls	r0, #1
 800976c:	4770      	bx	lr
 800976e:	4608      	mov	r0, r1
 8009770:	4770      	bx	lr

08009772 <abort>:
 8009772:	b508      	push	{r3, lr}
 8009774:	2006      	movs	r0, #6
 8009776:	f000 f82b 	bl	80097d0 <raise>
 800977a:	2001      	movs	r0, #1
 800977c:	f7f8 fc18 	bl	8001fb0 <_exit>

08009780 <_raise_r>:
 8009780:	291f      	cmp	r1, #31
 8009782:	b538      	push	{r3, r4, r5, lr}
 8009784:	4604      	mov	r4, r0
 8009786:	460d      	mov	r5, r1
 8009788:	d904      	bls.n	8009794 <_raise_r+0x14>
 800978a:	2316      	movs	r3, #22
 800978c:	6003      	str	r3, [r0, #0]
 800978e:	f04f 30ff 	mov.w	r0, #4294967295
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009796:	b112      	cbz	r2, 800979e <_raise_r+0x1e>
 8009798:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800979c:	b94b      	cbnz	r3, 80097b2 <_raise_r+0x32>
 800979e:	4620      	mov	r0, r4
 80097a0:	f000 f830 	bl	8009804 <_getpid_r>
 80097a4:	462a      	mov	r2, r5
 80097a6:	4601      	mov	r1, r0
 80097a8:	4620      	mov	r0, r4
 80097aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097ae:	f000 b817 	b.w	80097e0 <_kill_r>
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d00a      	beq.n	80097cc <_raise_r+0x4c>
 80097b6:	1c59      	adds	r1, r3, #1
 80097b8:	d103      	bne.n	80097c2 <_raise_r+0x42>
 80097ba:	2316      	movs	r3, #22
 80097bc:	6003      	str	r3, [r0, #0]
 80097be:	2001      	movs	r0, #1
 80097c0:	e7e7      	b.n	8009792 <_raise_r+0x12>
 80097c2:	2400      	movs	r4, #0
 80097c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097c8:	4628      	mov	r0, r5
 80097ca:	4798      	blx	r3
 80097cc:	2000      	movs	r0, #0
 80097ce:	e7e0      	b.n	8009792 <_raise_r+0x12>

080097d0 <raise>:
 80097d0:	4b02      	ldr	r3, [pc, #8]	; (80097dc <raise+0xc>)
 80097d2:	4601      	mov	r1, r0
 80097d4:	6818      	ldr	r0, [r3, #0]
 80097d6:	f7ff bfd3 	b.w	8009780 <_raise_r>
 80097da:	bf00      	nop
 80097dc:	200000e8 	.word	0x200000e8

080097e0 <_kill_r>:
 80097e0:	b538      	push	{r3, r4, r5, lr}
 80097e2:	4d07      	ldr	r5, [pc, #28]	; (8009800 <_kill_r+0x20>)
 80097e4:	2300      	movs	r3, #0
 80097e6:	4604      	mov	r4, r0
 80097e8:	4608      	mov	r0, r1
 80097ea:	4611      	mov	r1, r2
 80097ec:	602b      	str	r3, [r5, #0]
 80097ee:	f7f8 fbcf 	bl	8001f90 <_kill>
 80097f2:	1c43      	adds	r3, r0, #1
 80097f4:	d102      	bne.n	80097fc <_kill_r+0x1c>
 80097f6:	682b      	ldr	r3, [r5, #0]
 80097f8:	b103      	cbz	r3, 80097fc <_kill_r+0x1c>
 80097fa:	6023      	str	r3, [r4, #0]
 80097fc:	bd38      	pop	{r3, r4, r5, pc}
 80097fe:	bf00      	nop
 8009800:	20004940 	.word	0x20004940

08009804 <_getpid_r>:
 8009804:	f7f8 bbbc 	b.w	8001f80 <_getpid>

08009808 <_init>:
 8009808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980a:	bf00      	nop
 800980c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980e:	bc08      	pop	{r3}
 8009810:	469e      	mov	lr, r3
 8009812:	4770      	bx	lr

08009814 <_fini>:
 8009814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009816:	bf00      	nop
 8009818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800981a:	bc08      	pop	{r3}
 800981c:	469e      	mov	lr, r3
 800981e:	4770      	bx	lr
