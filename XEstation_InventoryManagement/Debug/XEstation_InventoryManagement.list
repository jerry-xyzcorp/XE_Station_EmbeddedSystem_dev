
XEstation_InventoryManagement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a04  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08007bb8  08007bb8  00017bb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fd4  08007fd4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007fd4  08007fd4  00017fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fdc  08007fdc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fdc  08007fdc  00017fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fe0  08007fe0  00017fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000308  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004e4  200004e4  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001772a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d8e  00000000  00000000  00037936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  0003a6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001038  00000000  00000000  0003b7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025fdf  00000000  00000000  0003c828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015c3a  00000000  00000000  00062807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de9e0  00000000  00000000  00078441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00156e21  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005910  00000000  00000000  00156e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000004e  00000000  00000000  0015c784  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007b9c 	.word	0x08007b9c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08007b9c 	.word	0x08007b9c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295
 8000be6:	f000 b9b9 	b.w	8000f5c <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f84d 	bl	8000c98 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f840 	bl	8000c98 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f82f 	bl	8000c98 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f821 	bl	8000c98 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96e 	b.w	8000f5c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468c      	mov	ip, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8083 	bne.w	8000dae <__udivmoddi4+0x116>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d947      	bls.n	8000d3e <__udivmoddi4+0xa6>
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	b142      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	f1c2 0020 	rsb	r0, r2, #32
 8000cb8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	4097      	lsls	r7, r2
 8000cc0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd0:	fa1f fe87 	uxth.w	lr, r7
 8000cd4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cea:	f080 8119 	bcs.w	8000f20 <__udivmoddi4+0x288>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8116 	bls.w	8000f20 <__udivmoddi4+0x288>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8105 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8102 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	b902      	cbnz	r2, 8000d42 <__udivmoddi4+0xaa>
 8000d40:	deff      	udf	#255	; 0xff
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d150      	bne.n	8000dec <__udivmoddi4+0x154>
 8000d4a:	1bcb      	subs	r3, r1, r7
 8000d4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d50:	fa1f f887 	uxth.w	r8, r7
 8000d54:	2601      	movs	r6, #1
 8000d56:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5a:	0c21      	lsrs	r1, r4, #16
 8000d5c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb08 f30c 	mul.w	r3, r8, ip
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0xe2>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	f200 80e9 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d88:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x10c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x10a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80d9 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e7bf      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x12e>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80b1 	beq.w	8000f1a <__udivmoddi4+0x282>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x1cc>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x140>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80b8 	bhi.w	8000f48 <__udivmoddi4+0x2b0>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0103 	sbc.w	r1, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	468c      	mov	ip, r1
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0a8      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000de6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dea:	e7a5      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f603 	lsr.w	r6, r0, r3
 8000df4:	4097      	lsls	r7, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	4330      	orrs	r0, r6
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e08:	fa1f f887 	uxth.w	r8, r7
 8000e0c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f108 	mul.w	r1, r6, r8
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x19c>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e26:	f080 808d 	bcs.w	8000f44 <__udivmoddi4+0x2ac>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 808a 	bls.w	8000f44 <__udivmoddi4+0x2ac>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b281      	uxth	r1, r0
 8000e38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb00 f308 	mul.w	r3, r0, r8
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x1c4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e52:	d273      	bcs.n	8000f3c <__udivmoddi4+0x2a4>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d971      	bls.n	8000f3c <__udivmoddi4+0x2a4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4439      	add	r1, r7
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e62:	e778      	b.n	8000d56 <__udivmoddi4+0xbe>
 8000e64:	f1c6 0c20 	rsb	ip, r6, #32
 8000e68:	fa03 f406 	lsl.w	r4, r3, r6
 8000e6c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e70:	431c      	orrs	r4, r3
 8000e72:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e82:	431f      	orrs	r7, r3
 8000e84:	0c3b      	lsrs	r3, r7, #16
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fa1f f884 	uxth.w	r8, r4
 8000e8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e96:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x220>
 8000ea6:	1861      	adds	r1, r4, r1
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	d248      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000eae:	458a      	cmp	sl, r1
 8000eb0:	d946      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4421      	add	r1, r4
 8000eb8:	eba1 010a 	sub.w	r1, r1, sl
 8000ebc:	b2bf      	uxth	r7, r7
 8000ebe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eca:	fb00 f808 	mul.w	r8, r0, r8
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x24a>
 8000ed2:	19e7      	adds	r7, r4, r7
 8000ed4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed8:	d22e      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d92c      	bls.n	8000f38 <__udivmoddi4+0x2a0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4427      	add	r7, r4
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	eba7 0708 	sub.w	r7, r7, r8
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	454f      	cmp	r7, r9
 8000ef0:	46c6      	mov	lr, r8
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	d31a      	bcc.n	8000f2c <__udivmoddi4+0x294>
 8000ef6:	d017      	beq.n	8000f28 <__udivmoddi4+0x290>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x27a>
 8000efa:	ebb3 020e 	subs.w	r2, r3, lr
 8000efe:	eb67 0701 	sbc.w	r7, r7, r1
 8000f02:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f06:	40f2      	lsrs	r2, r6
 8000f08:	ea4c 0202 	orr.w	r2, ip, r2
 8000f0c:	40f7      	lsrs	r7, r6
 8000f0e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f12:	2600      	movs	r6, #0
 8000f14:	4631      	mov	r1, r6
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e70b      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6fd      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f28:	4543      	cmp	r3, r8
 8000f2a:	d2e5      	bcs.n	8000ef8 <__udivmoddi4+0x260>
 8000f2c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f30:	eb69 0104 	sbc.w	r1, r9, r4
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7df      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e7d2      	b.n	8000ee2 <__udivmoddi4+0x24a>
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	e78d      	b.n	8000e5c <__udivmoddi4+0x1c4>
 8000f40:	4681      	mov	r9, r0
 8000f42:	e7b9      	b.n	8000eb8 <__udivmoddi4+0x220>
 8000f44:	4666      	mov	r6, ip
 8000f46:	e775      	b.n	8000e34 <__udivmoddi4+0x19c>
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e74a      	b.n	8000de2 <__udivmoddi4+0x14a>
 8000f4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f50:	4439      	add	r1, r7
 8000f52:	e713      	b.n	8000d7c <__udivmoddi4+0xe4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	e724      	b.n	8000da4 <__udivmoddi4+0x10c>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 10) == HAL_OK)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	230a      	movs	r3, #10
 8000f72:	68b9      	ldr	r1, [r7, #8]
 8000f74:	4806      	ldr	r0, [pc, #24]	; (8000f90 <_write+0x30>)
 8000f76:	f002 ff16 	bl	8003da6 <HAL_UART_Transmit>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <_write+0x24>
		return len;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	e001      	b.n	8000f88 <_write+0x28>
	return -1;
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000210 	.word	0x20000210

08000f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f98:	f000 ff6a 	bl	8001e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9c:	f000 f81e 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa0:	f000 fb0a 	bl	80015b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fa4:	f000 f88a 	bl	80010bc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000fa8:	f000 f8c8 	bl	800113c <MX_I2C2_Init>
  MX_TIM1_Init();
 8000fac:	f000 f906 	bl	80011bc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fb0:	f000 f990 	bl	80012d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fb4:	f000 fa00 	bl	80013b8 <MX_TIM3_Init>
  MX_UART5_Init();
 8000fb8:	f000 fa7e 	bl	80014b8 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8000fbc:	f000 faa8 	bl	8001510 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000fc0:	f000 fad0 	bl	8001564 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

//  init_Lidar();
//  Lidar3dTest();
  printf("start hx711\n");
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <main+0x44>)
 8000fc6:	f004 fe2d 	bl	8005c24 <puts>
  initHx711();
 8000fca:	f003 fe87 	bl	8004cdc <initHx711>
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
//	  pcTest();

	  HAL_Delay(1000);
 8000fce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd2:	f000 ffbf 	bl	8001f54 <HAL_Delay>
 8000fd6:	e7fa      	b.n	8000fce <main+0x3a>
 8000fd8:	08007bb8 	.word	0x08007bb8

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b094      	sub	sp, #80	; 0x50
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	2230      	movs	r2, #48	; 0x30
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f004 f878 	bl	80050e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <SystemClock_Config+0xd8>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	4a2a      	ldr	r2, [pc, #168]	; (80010b4 <SystemClock_Config+0xd8>)
 800100a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100e:	6413      	str	r3, [r2, #64]	; 0x40
 8001010:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <SystemClock_Config+0xd8>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <SystemClock_Config+0xdc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a24      	ldr	r2, [pc, #144]	; (80010b8 <SystemClock_Config+0xdc>)
 8001026:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <SystemClock_Config+0xdc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001038:	2302      	movs	r3, #2
 800103a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800103c:	2301      	movs	r3, #1
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001040:	2310      	movs	r3, #16
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001044:	2302      	movs	r3, #2
 8001046:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001048:	2300      	movs	r3, #0
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800104c:	2308      	movs	r3, #8
 800104e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001050:	23b4      	movs	r3, #180	; 0xb4
 8001052:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001054:	2302      	movs	r3, #2
 8001056:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001058:	2304      	movs	r3, #4
 800105a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105c:	f107 0320 	add.w	r3, r7, #32
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fd2d 	bl	8002ac0 <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800106c:	f000 fb9c 	bl	80017a8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001070:	f001 fcd6 	bl	8002a20 <HAL_PWREx_EnableOverDrive>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800107a:	f000 fb95 	bl	80017a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107e:	230f      	movs	r3, #15
 8001080:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001082:	2302      	movs	r3, #2
 8001084:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800108a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800108e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001094:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	2105      	movs	r1, #5
 800109c:	4618      	mov	r0, r3
 800109e:	f001 ff87 	bl	8002fb0 <HAL_RCC_ClockConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80010a8:	f000 fb7e 	bl	80017a8 <Error_Handler>
  }
}
 80010ac:	bf00      	nop
 80010ae:	3750      	adds	r7, #80	; 0x50
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40007000 	.word	0x40007000

080010bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_I2C1_Init+0x74>)
 80010c2:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <MX_I2C1_Init+0x78>)
 80010c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_I2C1_Init+0x74>)
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <MX_I2C1_Init+0x7c>)
 80010ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <MX_I2C1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_I2C1_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MX_I2C1_Init+0x74>)
 80010da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_I2C1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ec:	4b10      	ldr	r3, [pc, #64]	; (8001130 <MX_I2C1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_I2C1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_I2C1_Init+0x74>)
 80010fa:	f001 fad1 	bl	80026a0 <HAL_I2C_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001104:	f000 fb50 	bl	80017a8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001108:	2100      	movs	r1, #0
 800110a:	4809      	ldr	r0, [pc, #36]	; (8001130 <MX_I2C1_Init+0x74>)
 800110c:	f001 fc0c 	bl	8002928 <HAL_I2CEx_ConfigAnalogFilter>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001116:	f000 fb47 	bl	80017a8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800111a:	2100      	movs	r1, #0
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <MX_I2C1_Init+0x74>)
 800111e:	f001 fc3f 	bl	80029a0 <HAL_I2CEx_ConfigDigitalFilter>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001128:	f000 fb3e 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000254 	.word	0x20000254
 8001134:	40005400 	.word	0x40005400
 8001138:	000186a0 	.word	0x000186a0

0800113c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MX_I2C2_Init+0x74>)
 8001142:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <MX_I2C2_Init+0x78>)
 8001144:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_I2C2_Init+0x74>)
 8001148:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <MX_I2C2_Init+0x7c>)
 800114a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_I2C2_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <MX_I2C2_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <MX_I2C2_Init+0x74>)
 800115a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800115e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <MX_I2C2_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_I2C2_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116c:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_I2C2_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_I2C2_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <MX_I2C2_Init+0x74>)
 800117a:	f001 fa91 	bl	80026a0 <HAL_I2C_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001184:	f000 fb10 	bl	80017a8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001188:	2100      	movs	r1, #0
 800118a:	4809      	ldr	r0, [pc, #36]	; (80011b0 <MX_I2C2_Init+0x74>)
 800118c:	f001 fbcc 	bl	8002928 <HAL_I2CEx_ConfigAnalogFilter>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001196:	f000 fb07 	bl	80017a8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800119a:	2100      	movs	r1, #0
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_I2C2_Init+0x74>)
 800119e:	f001 fbff 	bl	80029a0 <HAL_I2CEx_ConfigDigitalFilter>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80011a8:	f000 fafe 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200002a8 	.word	0x200002a8
 80011b4:	40005800 	.word	0x40005800
 80011b8:	000186a0 	.word	0x000186a0

080011bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	; 0x30
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011e8:	4b38      	ldr	r3, [pc, #224]	; (80012cc <MX_TIM1_Init+0x110>)
 80011ea:	4a39      	ldr	r2, [pc, #228]	; (80012d0 <MX_TIM1_Init+0x114>)
 80011ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011ee:	4b37      	ldr	r3, [pc, #220]	; (80012cc <MX_TIM1_Init+0x110>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	4b35      	ldr	r3, [pc, #212]	; (80012cc <MX_TIM1_Init+0x110>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011fa:	4b34      	ldr	r3, [pc, #208]	; (80012cc <MX_TIM1_Init+0x110>)
 80011fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001200:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001202:	4b32      	ldr	r3, [pc, #200]	; (80012cc <MX_TIM1_Init+0x110>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001208:	4b30      	ldr	r3, [pc, #192]	; (80012cc <MX_TIM1_Init+0x110>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <MX_TIM1_Init+0x110>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001214:	482d      	ldr	r0, [pc, #180]	; (80012cc <MX_TIM1_Init+0x110>)
 8001216:	f002 f89b 	bl	8003350 <HAL_TIM_Base_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001220:	f000 fac2 	bl	80017a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001224:	4829      	ldr	r0, [pc, #164]	; (80012cc <MX_TIM1_Init+0x110>)
 8001226:	f002 f8e2 	bl	80033ee <HAL_TIM_IC_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001230:	f000 faba 	bl	80017a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	4822      	ldr	r0, [pc, #136]	; (80012cc <MX_TIM1_Init+0x110>)
 8001244:	f002 f9c8 	bl	80035d8 <HAL_TIM_SlaveConfigSynchro>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800124e:	f000 faab 	bl	80017a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	481a      	ldr	r0, [pc, #104]	; (80012cc <MX_TIM1_Init+0x110>)
 8001262:	f002 fcd7 	bl	8003c14 <HAL_TIMEx_MasterConfigSynchronization>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 800126c:	f000 fa9c 	bl	80017a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001274:	2301      	movs	r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	4619      	mov	r1, r3
 8001286:	4811      	ldr	r0, [pc, #68]	; (80012cc <MX_TIM1_Init+0x110>)
 8001288:	f002 f90a 	bl	80034a0 <HAL_TIM_IC_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8001292:	f000 fa89 	bl	80017a8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2204      	movs	r2, #4
 800129a:	4619      	mov	r1, r3
 800129c:	480b      	ldr	r0, [pc, #44]	; (80012cc <MX_TIM1_Init+0x110>)
 800129e:	f002 f8ff 	bl	80034a0 <HAL_TIM_IC_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80012a8:	f000 fa7e 	bl	80017a8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2208      	movs	r2, #8
 80012b0:	4619      	mov	r1, r3
 80012b2:	4806      	ldr	r0, [pc, #24]	; (80012cc <MX_TIM1_Init+0x110>)
 80012b4:	f002 f8f4 	bl	80034a0 <HAL_TIM_IC_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80012be:	f000 fa73 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	3730      	adds	r7, #48	; 0x30
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200003a8 	.word	0x200003a8
 80012d0:	40010000 	.word	0x40010000

080012d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08c      	sub	sp, #48	; 0x30
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001300:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <MX_TIM2_Init+0xe0>)
 8001302:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001306:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001308:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <MX_TIM2_Init+0xe0>)
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <MX_TIM2_Init+0xe0>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <MX_TIM2_Init+0xe0>)
 8001316:	f04f 32ff 	mov.w	r2, #4294967295
 800131a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <MX_TIM2_Init+0xe0>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <MX_TIM2_Init+0xe0>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001328:	4822      	ldr	r0, [pc, #136]	; (80013b4 <MX_TIM2_Init+0xe0>)
 800132a:	f002 f811 	bl	8003350 <HAL_TIM_Base_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001334:	f000 fa38 	bl	80017a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001338:	481e      	ldr	r0, [pc, #120]	; (80013b4 <MX_TIM2_Init+0xe0>)
 800133a:	f002 f858 	bl	80033ee <HAL_TIM_IC_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001344:	f000 fa30 	bl	80017a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4619      	mov	r1, r3
 8001356:	4817      	ldr	r0, [pc, #92]	; (80013b4 <MX_TIM2_Init+0xe0>)
 8001358:	f002 f93e 	bl	80035d8 <HAL_TIM_SlaveConfigSynchro>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001362:	f000 fa21 	bl	80017a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	480f      	ldr	r0, [pc, #60]	; (80013b4 <MX_TIM2_Init+0xe0>)
 8001376:	f002 fc4d 	bl	8003c14 <HAL_TIMEx_MasterConfigSynchronization>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001380:	f000 fa12 	bl	80017a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001388:	2301      	movs	r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2204      	movs	r2, #4
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	; (80013b4 <MX_TIM2_Init+0xe0>)
 800139c:	f002 f880 	bl	80034a0 <HAL_TIM_IC_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80013a6:	f000 f9ff 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	3730      	adds	r7, #48	; 0x30
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000488 	.word	0x20000488

080013b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	; 0x30
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013e4:	4b32      	ldr	r3, [pc, #200]	; (80014b0 <MX_TIM3_Init+0xf8>)
 80013e6:	4a33      	ldr	r2, [pc, #204]	; (80014b4 <MX_TIM3_Init+0xfc>)
 80013e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535-1;
 80013ea:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <MX_TIM3_Init+0xf8>)
 80013ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f2:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <MX_TIM3_Init+0xf8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013f8:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <MX_TIM3_Init+0xf8>)
 80013fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001400:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <MX_TIM3_Init+0xf8>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001406:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <MX_TIM3_Init+0xf8>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800140c:	4828      	ldr	r0, [pc, #160]	; (80014b0 <MX_TIM3_Init+0xf8>)
 800140e:	f001 ff9f 	bl	8003350 <HAL_TIM_Base_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001418:	f000 f9c6 	bl	80017a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800141c:	4824      	ldr	r0, [pc, #144]	; (80014b0 <MX_TIM3_Init+0xf8>)
 800141e:	f001 ffe6 	bl	80033ee <HAL_TIM_IC_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001428:	f000 f9be 	bl	80017a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8001430:	2340      	movs	r3, #64	; 0x40
 8001432:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	4619      	mov	r1, r3
 800143e:	481c      	ldr	r0, [pc, #112]	; (80014b0 <MX_TIM3_Init+0xf8>)
 8001440:	f002 f8ca 	bl	80035d8 <HAL_TIM_SlaveConfigSynchro>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800144a:	f000 f9ad 	bl	80017a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	4814      	ldr	r0, [pc, #80]	; (80014b0 <MX_TIM3_Init+0xf8>)
 800145e:	f002 fbd9 	bl	8003c14 <HAL_TIMEx_MasterConfigSynchronization>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001468:	f000 f99e 	bl	80017a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001470:	2301      	movs	r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2204      	movs	r2, #4
 8001480:	4619      	mov	r1, r3
 8001482:	480b      	ldr	r0, [pc, #44]	; (80014b0 <MX_TIM3_Init+0xf8>)
 8001484:	f002 f80c 	bl	80034a0 <HAL_TIM_IC_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800148e:	f000 f98b 	bl	80017a8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2208      	movs	r2, #8
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_TIM3_Init+0xf8>)
 800149a:	f002 f801 	bl	80034a0 <HAL_TIM_IC_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80014a4:	f000 f980 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	3730      	adds	r7, #48	; 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000318 	.word	0x20000318
 80014b4:	40000400 	.word	0x40000400

080014b8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_UART5_Init+0x4c>)
 80014be:	4a12      	ldr	r2, [pc, #72]	; (8001508 <MX_UART5_Init+0x50>)
 80014c0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 3000000;
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <MX_UART5_Init+0x4c>)
 80014c4:	4a11      	ldr	r2, [pc, #68]	; (800150c <MX_UART5_Init+0x54>)
 80014c6:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_UART5_Init+0x4c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_UART5_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_UART5_Init+0x4c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <MX_UART5_Init+0x4c>)
 80014dc:	220c      	movs	r2, #12
 80014de:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_UART5_Init+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_8;
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <MX_UART5_Init+0x4c>)
 80014e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_UART5_Init+0x4c>)
 80014f0:	f002 fc0c 	bl	8003d0c <HAL_UART_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80014fa:	f000 f955 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000360 	.word	0x20000360
 8001508:	40005000 	.word	0x40005000
 800150c:	002dc6c0 	.word	0x002dc6c0

08001510 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_USART3_UART_Init+0x4c>)
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <MX_USART3_UART_Init+0x50>)
 8001518:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <MX_USART3_UART_Init+0x4c>)
 800151c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001520:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_USART3_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_USART3_UART_Init+0x4c>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MX_USART3_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_USART3_UART_Init+0x4c>)
 8001536:	220c      	movs	r2, #12
 8001538:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <MX_USART3_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_USART3_UART_Init+0x4c>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_USART3_UART_Init+0x4c>)
 8001548:	f002 fbe0 	bl	8003d0c <HAL_UART_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001552:	f000 f929 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000210 	.word	0x20000210
 8001560:	40004800 	.word	0x40004800

08001564 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_USART6_UART_Init+0x4c>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <MX_USART6_UART_Init+0x50>)
 800156c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <MX_USART6_UART_Init+0x4c>)
 8001570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001574:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_USART6_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_USART6_UART_Init+0x4c>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <MX_USART6_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_USART6_UART_Init+0x4c>)
 800158a:	220c      	movs	r2, #12
 800158c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <MX_USART6_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MX_USART6_UART_Init+0x4c>)
 8001596:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800159a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	; (80015b0 <MX_USART6_UART_Init+0x4c>)
 800159e:	f002 fbb5 	bl	8003d0c <HAL_UART_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 80015a8:	f000 f8fe 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000440 	.word	0x20000440
 80015b4:	40011400 	.word	0x40011400

080015b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08c      	sub	sp, #48	; 0x30
 80015bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
 80015cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	4b6e      	ldr	r3, [pc, #440]	; (800178c <MX_GPIO_Init+0x1d4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a6d      	ldr	r2, [pc, #436]	; (800178c <MX_GPIO_Init+0x1d4>)
 80015d8:	f043 0310 	orr.w	r3, r3, #16
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b6b      	ldr	r3, [pc, #428]	; (800178c <MX_GPIO_Init+0x1d4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	4b67      	ldr	r3, [pc, #412]	; (800178c <MX_GPIO_Init+0x1d4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a66      	ldr	r2, [pc, #408]	; (800178c <MX_GPIO_Init+0x1d4>)
 80015f4:	f043 0320 	orr.w	r3, r3, #32
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b64      	ldr	r3, [pc, #400]	; (800178c <MX_GPIO_Init+0x1d4>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0320 	and.w	r3, r3, #32
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b60      	ldr	r3, [pc, #384]	; (800178c <MX_GPIO_Init+0x1d4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a5f      	ldr	r2, [pc, #380]	; (800178c <MX_GPIO_Init+0x1d4>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b5d      	ldr	r3, [pc, #372]	; (800178c <MX_GPIO_Init+0x1d4>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b59      	ldr	r3, [pc, #356]	; (800178c <MX_GPIO_Init+0x1d4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a58      	ldr	r2, [pc, #352]	; (800178c <MX_GPIO_Init+0x1d4>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b56      	ldr	r3, [pc, #344]	; (800178c <MX_GPIO_Init+0x1d4>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	4b52      	ldr	r3, [pc, #328]	; (800178c <MX_GPIO_Init+0x1d4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a51      	ldr	r2, [pc, #324]	; (800178c <MX_GPIO_Init+0x1d4>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b4f      	ldr	r3, [pc, #316]	; (800178c <MX_GPIO_Init+0x1d4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	4b4b      	ldr	r3, [pc, #300]	; (800178c <MX_GPIO_Init+0x1d4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a4a      	ldr	r2, [pc, #296]	; (800178c <MX_GPIO_Init+0x1d4>)
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b48      	ldr	r3, [pc, #288]	; (800178c <MX_GPIO_Init+0x1d4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	4b44      	ldr	r3, [pc, #272]	; (800178c <MX_GPIO_Init+0x1d4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a43      	ldr	r2, [pc, #268]	; (800178c <MX_GPIO_Init+0x1d4>)
 8001680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b41      	ldr	r3, [pc, #260]	; (800178c <MX_GPIO_Init+0x1d4>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EXPD01_sck_Pin|PD05_dout_Pin|PD03_sck_Pin|PD05_sck_Pin
 8001692:	2200      	movs	r2, #0
 8001694:	f245 5184 	movw	r1, #21892	; 0x5584
 8001698:	483d      	ldr	r0, [pc, #244]	; (8001790 <MX_GPIO_Init+0x1d8>)
 800169a:	f000 ffe7 	bl	800266c <HAL_GPIO_WritePin>
                          |EXIC01_dout_Pin|EXIC01_sck_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PD02_dout_Pin|PD01_echo_Pin|JG01_echo_Pin|JG02_echo_Pin
 800169e:	2200      	movs	r2, #0
 80016a0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80016a4:	483b      	ldr	r0, [pc, #236]	; (8001794 <MX_GPIO_Init+0x1dc>)
 80016a6:	f000 ffe1 	bl	800266c <HAL_GPIO_WritePin>
                          |LD01_echo_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD01_sck_GPIO_Port, PD01_sck_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2104      	movs	r1, #4
 80016ae:	483a      	ldr	r0, [pc, #232]	; (8001798 <MX_GPIO_Init+0x1e0>)
 80016b0:	f000 ffdc 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CP01_echo_GPIO_Port, CP01_echo_Pin, GPIO_PIN_RESET);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2180      	movs	r1, #128	; 0x80
 80016b8:	4838      	ldr	r0, [pc, #224]	; (800179c <MX_GPIO_Init+0x1e4>)
 80016ba:	f000 ffd7 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PD01_dout_Pin|PD03_dout_Pin|PD02_sck_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	2146      	movs	r1, #70	; 0x46
 80016c2:	4837      	ldr	r0, [pc, #220]	; (80017a0 <MX_GPIO_Init+0x1e8>)
 80016c4:	f000 ffd2 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EXPD01_dout_Pin|PD04_sck_Pin|PD04_dout_Pin|CF01_echo_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 80016ce:	4835      	ldr	r0, [pc, #212]	; (80017a4 <MX_GPIO_Init+0x1ec>)
 80016d0:	f000 ffcc 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EXPD01_sck_Pin PD05_dout_Pin PD03_sck_Pin PD05_sck_Pin
                           EXIC01_dout_Pin EXIC01_sck_Pin */
  GPIO_InitStruct.Pin = EXPD01_sck_Pin|PD05_dout_Pin|PD03_sck_Pin|PD05_sck_Pin
 80016d4:	f245 5384 	movw	r3, #21892	; 0x5584
 80016d8:	61fb      	str	r3, [r7, #28]
                          |EXIC01_dout_Pin|EXIC01_sck_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	2301      	movs	r3, #1
 80016dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e6:	f107 031c 	add.w	r3, r7, #28
 80016ea:	4619      	mov	r1, r3
 80016ec:	4828      	ldr	r0, [pc, #160]	; (8001790 <MX_GPIO_Init+0x1d8>)
 80016ee:	f000 fdf9 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_dout_Pin PD01_echo_Pin JG01_echo_Pin JG02_echo_Pin
                           LD01_echo_Pin */
  GPIO_InitStruct.Pin = PD02_dout_Pin|PD01_echo_Pin|JG01_echo_Pin|JG02_echo_Pin
 80016f2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80016f6:	61fb      	str	r3, [r7, #28]
                          |LD01_echo_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	4619      	mov	r1, r3
 800170a:	4822      	ldr	r0, [pc, #136]	; (8001794 <MX_GPIO_Init+0x1dc>)
 800170c:	f000 fdea 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD01_sck_Pin */
  GPIO_InitStruct.Pin = PD01_sck_Pin;
 8001710:	2304      	movs	r3, #4
 8001712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001714:	2301      	movs	r3, #1
 8001716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PD01_sck_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	4619      	mov	r1, r3
 8001726:	481c      	ldr	r0, [pc, #112]	; (8001798 <MX_GPIO_Init+0x1e0>)
 8001728:	f000 fddc 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CP01_echo_Pin */
  GPIO_InitStruct.Pin = CP01_echo_Pin;
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CP01_echo_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	4619      	mov	r1, r3
 8001742:	4816      	ldr	r0, [pc, #88]	; (800179c <MX_GPIO_Init+0x1e4>)
 8001744:	f000 fdce 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD01_dout_Pin PD03_dout_Pin PD02_sck_Pin */
  GPIO_InitStruct.Pin = PD01_dout_Pin|PD03_dout_Pin|PD02_sck_Pin;
 8001748:	2346      	movs	r3, #70	; 0x46
 800174a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4619      	mov	r1, r3
 800175e:	4810      	ldr	r0, [pc, #64]	; (80017a0 <MX_GPIO_Init+0x1e8>)
 8001760:	f000 fdc0 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXPD01_dout_Pin PD04_sck_Pin PD04_dout_Pin CF01_echo_Pin */
  GPIO_InitStruct.Pin = EXPD01_dout_Pin|PD04_sck_Pin|PD04_dout_Pin|CF01_echo_Pin;
 8001764:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	4619      	mov	r1, r3
 800177c:	4809      	ldr	r0, [pc, #36]	; (80017a4 <MX_GPIO_Init+0x1ec>)
 800177e:	f000 fdb1 	bl	80022e4 <HAL_GPIO_Init>

}
 8001782:	bf00      	nop
 8001784:	3730      	adds	r7, #48	; 0x30
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	40021000 	.word	0x40021000
 8001794:	40021400 	.word	0x40021400
 8001798:	40020800 	.word	0x40020800
 800179c:	40020000 	.word	0x40020000
 80017a0:	40020400 	.word	0x40020400
 80017a4:	40020c00 	.word	0x40020c00

080017a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ac:	b672      	cpsid	i
}
 80017ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <Error_Handler+0x8>
	...

080017b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <HAL_MspInit+0x4c>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <HAL_MspInit+0x4c>)
 80017c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_MspInit+0x4c>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_MspInit+0x4c>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	4a08      	ldr	r2, [pc, #32]	; (8001800 <HAL_MspInit+0x4c>)
 80017e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e4:	6413      	str	r3, [r2, #64]	; 0x40
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_MspInit+0x4c>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800

08001804 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08c      	sub	sp, #48	; 0x30
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a33      	ldr	r2, [pc, #204]	; (80018f0 <HAL_I2C_MspInit+0xec>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d12d      	bne.n	8001882 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
 800182a:	4b32      	ldr	r3, [pc, #200]	; (80018f4 <HAL_I2C_MspInit+0xf0>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a31      	ldr	r2, [pc, #196]	; (80018f4 <HAL_I2C_MspInit+0xf0>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <HAL_I2C_MspInit+0xf0>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	61bb      	str	r3, [r7, #24]
 8001840:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Cup_Bakery_SCL_Pin|Cup_Bakery_SDA_Pin;
 8001842:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001848:	2312      	movs	r3, #18
 800184a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001854:	2304      	movs	r3, #4
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	4619      	mov	r1, r3
 800185e:	4826      	ldr	r0, [pc, #152]	; (80018f8 <HAL_I2C_MspInit+0xf4>)
 8001860:	f000 fd40 	bl	80022e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <HAL_I2C_MspInit+0xf0>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	4a21      	ldr	r2, [pc, #132]	; (80018f4 <HAL_I2C_MspInit+0xf0>)
 800186e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001872:	6413      	str	r3, [r2, #64]	; 0x40
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <HAL_I2C_MspInit+0xf0>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001880:	e031      	b.n	80018e6 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <HAL_I2C_MspInit+0xf8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d12c      	bne.n	80018e6 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188c:	2300      	movs	r3, #0
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_I2C_MspInit+0xf0>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	4a17      	ldr	r2, [pc, #92]	; (80018f4 <HAL_I2C_MspInit+0xf0>)
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	6313      	str	r3, [r2, #48]	; 0x30
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <HAL_I2C_MspInit+0xf0>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Lid_SCL_Pin|Lid_SDA_Pin;
 80018a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ae:	2312      	movs	r3, #18
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b6:	2303      	movs	r3, #3
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018ba:	2304      	movs	r3, #4
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <HAL_I2C_MspInit+0xf4>)
 80018c6:	f000 fd0d 	bl	80022e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_I2C_MspInit+0xf0>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <HAL_I2C_MspInit+0xf0>)
 80018d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_I2C_MspInit+0xf0>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
}
 80018e6:	bf00      	nop
 80018e8:	3730      	adds	r7, #48	; 0x30
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40005400 	.word	0x40005400
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020400 	.word	0x40020400
 80018fc:	40005800 	.word	0x40005800

08001900 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08e      	sub	sp, #56	; 0x38
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a4b      	ldr	r2, [pc, #300]	; (8001a4c <HAL_TIM_Base_MspInit+0x14c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d12d      	bne.n	800197e <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
 8001926:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <HAL_TIM_Base_MspInit+0x150>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	4a49      	ldr	r2, [pc, #292]	; (8001a50 <HAL_TIM_Base_MspInit+0x150>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6453      	str	r3, [r2, #68]	; 0x44
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <HAL_TIM_Base_MspInit+0x150>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	623b      	str	r3, [r7, #32]
 800193c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
 8001942:	4b43      	ldr	r3, [pc, #268]	; (8001a50 <HAL_TIM_Base_MspInit+0x150>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a42      	ldr	r2, [pc, #264]	; (8001a50 <HAL_TIM_Base_MspInit+0x150>)
 8001948:	f043 0310 	orr.w	r3, r3, #16
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b40      	ldr	r3, [pc, #256]	; (8001a50 <HAL_TIM_Base_MspInit+0x150>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = JG01_TIM_Pin|JG02_TIM_Pin|LD01_TIM_Pin;
 800195a:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800196c:	2301      	movs	r3, #1
 800196e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001974:	4619      	mov	r1, r3
 8001976:	4837      	ldr	r0, [pc, #220]	; (8001a54 <HAL_TIM_Base_MspInit+0x154>)
 8001978:	f000 fcb4 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800197c:	e062      	b.n	8001a44 <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM2)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001986:	d12c      	bne.n	80019e2 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <HAL_TIM_Base_MspInit+0x150>)
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	4a2f      	ldr	r2, [pc, #188]	; (8001a50 <HAL_TIM_Base_MspInit+0x150>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6413      	str	r3, [r2, #64]	; 0x40
 8001998:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <HAL_TIM_Base_MspInit+0x150>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	61bb      	str	r3, [r7, #24]
 80019a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	4b29      	ldr	r3, [pc, #164]	; (8001a50 <HAL_TIM_Base_MspInit+0x150>)
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	4a28      	ldr	r2, [pc, #160]	; (8001a50 <HAL_TIM_Base_MspInit+0x150>)
 80019ae:	f043 0302 	orr.w	r3, r3, #2
 80019b2:	6313      	str	r3, [r2, #48]	; 0x30
 80019b4:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <HAL_TIM_Base_MspInit+0x150>)
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PD01_TIM_Pin;
 80019c0:	2308      	movs	r3, #8
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019d0:	2301      	movs	r3, #1
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PD01_TIM_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d8:	4619      	mov	r1, r3
 80019da:	481f      	ldr	r0, [pc, #124]	; (8001a58 <HAL_TIM_Base_MspInit+0x158>)
 80019dc:	f000 fc82 	bl	80022e4 <HAL_GPIO_Init>
}
 80019e0:	e030      	b.n	8001a44 <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM3)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1d      	ldr	r2, [pc, #116]	; (8001a5c <HAL_TIM_Base_MspInit+0x15c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d12b      	bne.n	8001a44 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_TIM_Base_MspInit+0x150>)
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	4a16      	ldr	r2, [pc, #88]	; (8001a50 <HAL_TIM_Base_MspInit+0x150>)
 80019f6:	f043 0302 	orr.w	r3, r3, #2
 80019fa:	6413      	str	r3, [r2, #64]	; 0x40
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_TIM_Base_MspInit+0x150>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <HAL_TIM_Base_MspInit+0x150>)
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a10:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <HAL_TIM_Base_MspInit+0x150>)
 8001a12:	f043 0302 	orr.w	r3, r3, #2
 8001a16:	6313      	str	r3, [r2, #48]	; 0x30
 8001a18:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <HAL_TIM_Base_MspInit+0x150>)
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|CF01_TIM_Pin|CP01_TIM_Pin;
 8001a24:	2331      	movs	r3, #49	; 0x31
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a34:	2302      	movs	r3, #2
 8001a36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4806      	ldr	r0, [pc, #24]	; (8001a58 <HAL_TIM_Base_MspInit+0x158>)
 8001a40:	f000 fc50 	bl	80022e4 <HAL_GPIO_Init>
}
 8001a44:	bf00      	nop
 8001a46:	3738      	adds	r7, #56	; 0x38
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40010000 	.word	0x40010000
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40020400 	.word	0x40020400
 8001a5c:	40000400 	.word	0x40000400

08001a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08e      	sub	sp, #56	; 0x38
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a63      	ldr	r2, [pc, #396]	; (8001c0c <HAL_UART_MspInit+0x1ac>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d153      	bne.n	8001b2a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]
 8001a86:	4b62      	ldr	r3, [pc, #392]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	4a61      	ldr	r2, [pc, #388]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001a8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	4b5f      	ldr	r3, [pc, #380]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9a:	623b      	str	r3, [r7, #32]
 8001a9c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	4b5b      	ldr	r3, [pc, #364]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a5a      	ldr	r2, [pc, #360]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b58      	ldr	r3, [pc, #352]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	61fb      	str	r3, [r7, #28]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	4b54      	ldr	r3, [pc, #336]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a53      	ldr	r2, [pc, #332]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001ac4:	f043 0308 	orr.w	r3, r3, #8
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b51      	ldr	r3, [pc, #324]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	61bb      	str	r3, [r7, #24]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001ae8:	2308      	movs	r3, #8
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af0:	4619      	mov	r1, r3
 8001af2:	4848      	ldr	r0, [pc, #288]	; (8001c14 <HAL_UART_MspInit+0x1b4>)
 8001af4:	f000 fbf6 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001af8:	2304      	movs	r3, #4
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001b08:	2308      	movs	r3, #8
 8001b0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b10:	4619      	mov	r1, r3
 8001b12:	4841      	ldr	r0, [pc, #260]	; (8001c18 <HAL_UART_MspInit+0x1b8>)
 8001b14:	f000 fbe6 	bl	80022e4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2035      	movs	r0, #53	; 0x35
 8001b1e:	f000 fb18 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001b22:	2035      	movs	r0, #53	; 0x35
 8001b24:	f000 fb31 	bl	800218a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b28:	e06c      	b.n	8001c04 <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART3)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a3b      	ldr	r2, [pc, #236]	; (8001c1c <HAL_UART_MspInit+0x1bc>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d135      	bne.n	8001ba0 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	4a34      	ldr	r2, [pc, #208]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001b3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b42:	6413      	str	r3, [r2, #64]	; 0x40
 8001b44:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	4a2d      	ldr	r2, [pc, #180]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001b5a:	f043 0308 	orr.w	r3, r3, #8
 8001b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b60:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 8001b6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b7e:	2307      	movs	r3, #7
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b86:	4619      	mov	r1, r3
 8001b88:	4823      	ldr	r0, [pc, #140]	; (8001c18 <HAL_UART_MspInit+0x1b8>)
 8001b8a:	f000 fbab 	bl	80022e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2101      	movs	r1, #1
 8001b92:	2027      	movs	r0, #39	; 0x27
 8001b94:	f000 fadd 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b98:	2027      	movs	r0, #39	; 0x27
 8001b9a:	f000 faf6 	bl	800218a <HAL_NVIC_EnableIRQ>
}
 8001b9e:	e031      	b.n	8001c04 <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART6)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1e      	ldr	r2, [pc, #120]	; (8001c20 <HAL_UART_MspInit+0x1c0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d12c      	bne.n	8001c04 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001bb4:	f043 0320 	orr.w	r3, r3, #32
 8001bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f003 0320 	and.w	r3, r3, #32
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a10      	ldr	r2, [pc, #64]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <HAL_UART_MspInit+0x1b0>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Lidar2_RX_Pin|Lidar2_TX_Pin;
 8001be2:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bf4:	2308      	movs	r3, #8
 8001bf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4809      	ldr	r0, [pc, #36]	; (8001c24 <HAL_UART_MspInit+0x1c4>)
 8001c00:	f000 fb70 	bl	80022e4 <HAL_GPIO_Init>
}
 8001c04:	bf00      	nop
 8001c06:	3738      	adds	r7, #56	; 0x38
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40005000 	.word	0x40005000
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020800 	.word	0x40020800
 8001c18:	40020c00 	.word	0x40020c00
 8001c1c:	40004800 	.word	0x40004800
 8001c20:	40011400 	.word	0x40011400
 8001c24:	40021800 	.word	0x40021800

08001c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <NMI_Handler+0x4>

08001c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c32:	e7fe      	b.n	8001c32 <HardFault_Handler+0x4>

08001c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <MemManage_Handler+0x4>

08001c3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c3e:	e7fe      	b.n	8001c3e <BusFault_Handler+0x4>

08001c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <UsageFault_Handler+0x4>

08001c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c74:	f000 f94e 	bl	8001f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <USART3_IRQHandler+0x10>)
 8001c82:	f002 f953 	bl	8003f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000210 	.word	0x20000210

08001c90 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <UART5_IRQHandler+0x10>)
 8001c96:	f002 f949 	bl	8003f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000360 	.word	0x20000360

08001ca4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
	return 1;
 8001ca8:	2301      	movs	r3, #1
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <_kill>:

int _kill(int pid, int sig)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cbe:	f003 f9dd 	bl	800507c <__errno>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2216      	movs	r2, #22
 8001cc6:	601a      	str	r2, [r3, #0]
	return -1;
 8001cc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <_exit>:

void _exit (int status)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ffe7 	bl	8001cb4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ce6:	e7fe      	b.n	8001ce6 <_exit+0x12>

08001ce8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	e00a      	b.n	8001d10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cfa:	f3af 8000 	nop.w
 8001cfe:	4601      	mov	r1, r0
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	60ba      	str	r2, [r7, #8]
 8001d06:	b2ca      	uxtb	r2, r1
 8001d08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	dbf0      	blt.n	8001cfa <_read+0x12>
	}

return len;
 8001d18:	687b      	ldr	r3, [r7, #4]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
	return -1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d4a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <_isatty>:

int _isatty(int file)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
	return 1;
 8001d62:	2301      	movs	r3, #1
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d94:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <_sbrk+0x5c>)
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <_sbrk+0x60>)
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <_sbrk+0x64>)
 8001daa:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <_sbrk+0x68>)
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d207      	bcs.n	8001dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dbc:	f003 f95e 	bl	800507c <__errno>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dca:	e009      	b.n	8001de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <_sbrk+0x64>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <_sbrk+0x64>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <_sbrk+0x64>)
 8001ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dde:	68fb      	ldr	r3, [r7, #12]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20030000 	.word	0x20030000
 8001dec:	00000400 	.word	0x00000400
 8001df0:	200001f8 	.word	0x200001f8
 8001df4:	200004e8 	.word	0x200004e8

08001df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <SystemInit+0x20>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <SystemInit+0x20>)
 8001e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e54 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e20:	480d      	ldr	r0, [pc, #52]	; (8001e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e22:	490e      	ldr	r1, [pc, #56]	; (8001e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e24:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e28:	e002      	b.n	8001e30 <LoopCopyDataInit>

08001e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2e:	3304      	adds	r3, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e34:	d3f9      	bcc.n	8001e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e36:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e38:	4c0b      	ldr	r4, [pc, #44]	; (8001e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e3c:	e001      	b.n	8001e42 <LoopFillZerobss>

08001e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e40:	3204      	adds	r2, #4

08001e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e44:	d3fb      	bcc.n	8001e3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e46:	f7ff ffd7 	bl	8001df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4a:	f003 f91d 	bl	8005088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4e:	f7ff f8a1 	bl	8000f94 <main>
  bx  lr    
 8001e52:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e54:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e5c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001e60:	08007fe4 	.word	0x08007fe4
  ldr r2, =_sbss
 8001e64:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001e68:	200004e4 	.word	0x200004e4

08001e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC_IRQHandler>
	...

08001e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_Init+0x40>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <HAL_Init+0x40>)
 8001e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_Init+0x40>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <HAL_Init+0x40>)
 8001e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <HAL_Init+0x40>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_Init+0x40>)
 8001e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f000 f94f 	bl	800213c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9e:	200f      	movs	r0, #15
 8001ea0:	f000 f808 	bl	8001eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea4:	f7ff fc86 	bl	80017b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023c00 	.word	0x40023c00

08001eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_InitTick+0x54>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_InitTick+0x58>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 f967 	bl	80021a6 <HAL_SYSTICK_Config>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00e      	b.n	8001f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0f      	cmp	r3, #15
 8001ee6:	d80a      	bhi.n	8001efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f000 f92f 	bl	8002152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef4:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <HAL_InitTick+0x5c>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x20>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x24>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_IncTick+0x24>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000008 	.word	0x20000008
 8001f38:	200004d0 	.word	0x200004d0

08001f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_GetTick+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	200004d0 	.word	0x200004d0

08001f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff ffee 	bl	8001f3c <HAL_GetTick>
 8001f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d005      	beq.n	8001f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_Delay+0x44>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f7a:	bf00      	nop
 8001f7c:	f7ff ffde 	bl	8001f3c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d8f7      	bhi.n	8001f7c <HAL_Delay+0x28>
  {
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000008 	.word	0x20000008

08001f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fce:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	60d3      	str	r3, [r2, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <__NVIC_GetPriorityGrouping+0x18>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	f003 0307 	and.w	r3, r3, #7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db0b      	blt.n	800202a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4907      	ldr	r1, [pc, #28]	; (8002038 <__NVIC_EnableIRQ+0x38>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	2001      	movs	r0, #1
 8002022:	fa00 f202 	lsl.w	r2, r0, r2
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e100 	.word	0xe000e100

0800203c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db0a      	blt.n	8002066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	490c      	ldr	r1, [pc, #48]	; (8002088 <__NVIC_SetPriority+0x4c>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	440b      	add	r3, r1
 8002060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002064:	e00a      	b.n	800207c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4908      	ldr	r1, [pc, #32]	; (800208c <__NVIC_SetPriority+0x50>)
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	3b04      	subs	r3, #4
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	440b      	add	r3, r1
 800207a:	761a      	strb	r2, [r3, #24]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000e100 	.word	0xe000e100
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f1c3 0307 	rsb	r3, r3, #7
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	bf28      	it	cs
 80020ae:	2304      	movcs	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d902      	bls.n	80020c0 <NVIC_EncodePriority+0x30>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3b03      	subs	r3, #3
 80020be:	e000      	b.n	80020c2 <NVIC_EncodePriority+0x32>
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	4313      	orrs	r3, r2
         );
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	; 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002108:	d301      	bcc.n	800210e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210a:	2301      	movs	r3, #1
 800210c:	e00f      	b.n	800212e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <SysTick_Config+0x40>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002116:	210f      	movs	r1, #15
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f7ff ff8e 	bl	800203c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <SysTick_Config+0x40>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002126:	4b04      	ldr	r3, [pc, #16]	; (8002138 <SysTick_Config+0x40>)
 8002128:	2207      	movs	r2, #7
 800212a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	e000e010 	.word	0xe000e010

0800213c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff29 	bl	8001f9c <__NVIC_SetPriorityGrouping>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002164:	f7ff ff3e 	bl	8001fe4 <__NVIC_GetPriorityGrouping>
 8002168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	6978      	ldr	r0, [r7, #20]
 8002170:	f7ff ff8e 	bl	8002090 <NVIC_EncodePriority>
 8002174:	4602      	mov	r2, r0
 8002176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff5d 	bl	800203c <__NVIC_SetPriority>
}
 8002182:	bf00      	nop
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff31 	bl	8002000 <__NVIC_EnableIRQ>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ffa2 	bl	80020f8 <SysTick_Config>
 80021b4:	4603      	mov	r3, r0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021cc:	f7ff feb6 	bl	8001f3c <HAL_GetTick>
 80021d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d008      	beq.n	80021f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2280      	movs	r2, #128	; 0x80
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e052      	b.n	8002296 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0216 	bic.w	r2, r2, #22
 80021fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800220e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	2b00      	cmp	r3, #0
 8002216:	d103      	bne.n	8002220 <HAL_DMA_Abort+0x62>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0208 	bic.w	r2, r2, #8
 800222e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002240:	e013      	b.n	800226a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002242:	f7ff fe7b 	bl	8001f3c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b05      	cmp	r3, #5
 800224e:	d90c      	bls.n	800226a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2220      	movs	r2, #32
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2203      	movs	r2, #3
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e015      	b.n	8002296 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1e4      	bne.n	8002242 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	223f      	movs	r2, #63	; 0x3f
 800227e:	409a      	lsls	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d004      	beq.n	80022bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2280      	movs	r2, #128	; 0x80
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e00c      	b.n	80022d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2205      	movs	r2, #5
 80022c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	e177      	b.n	80025f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002300:	2201      	movs	r2, #1
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	429a      	cmp	r2, r3
 800231a:	f040 8166 	bne.w	80025ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b01      	cmp	r3, #1
 8002328:	d005      	beq.n	8002336 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002332:	2b02      	cmp	r3, #2
 8002334:	d130      	bne.n	8002398 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800236c:	2201      	movs	r2, #1
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 0201 	and.w	r2, r3, #1
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d017      	beq.n	80023d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d123      	bne.n	8002428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	08da      	lsrs	r2, r3, #3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3208      	adds	r2, #8
 80023e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	220f      	movs	r2, #15
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	08da      	lsrs	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3208      	adds	r2, #8
 8002422:	69b9      	ldr	r1, [r7, #24]
 8002424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0203 	and.w	r2, r3, #3
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80c0 	beq.w	80025ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	4b66      	ldr	r3, [pc, #408]	; (8002608 <HAL_GPIO_Init+0x324>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	4a65      	ldr	r2, [pc, #404]	; (8002608 <HAL_GPIO_Init+0x324>)
 8002474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002478:	6453      	str	r3, [r2, #68]	; 0x44
 800247a:	4b63      	ldr	r3, [pc, #396]	; (8002608 <HAL_GPIO_Init+0x324>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002486:	4a61      	ldr	r2, [pc, #388]	; (800260c <HAL_GPIO_Init+0x328>)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	3302      	adds	r3, #2
 800248e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	220f      	movs	r2, #15
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a58      	ldr	r2, [pc, #352]	; (8002610 <HAL_GPIO_Init+0x32c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d037      	beq.n	8002522 <HAL_GPIO_Init+0x23e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a57      	ldr	r2, [pc, #348]	; (8002614 <HAL_GPIO_Init+0x330>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d031      	beq.n	800251e <HAL_GPIO_Init+0x23a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a56      	ldr	r2, [pc, #344]	; (8002618 <HAL_GPIO_Init+0x334>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d02b      	beq.n	800251a <HAL_GPIO_Init+0x236>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a55      	ldr	r2, [pc, #340]	; (800261c <HAL_GPIO_Init+0x338>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d025      	beq.n	8002516 <HAL_GPIO_Init+0x232>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a54      	ldr	r2, [pc, #336]	; (8002620 <HAL_GPIO_Init+0x33c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d01f      	beq.n	8002512 <HAL_GPIO_Init+0x22e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a53      	ldr	r2, [pc, #332]	; (8002624 <HAL_GPIO_Init+0x340>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d019      	beq.n	800250e <HAL_GPIO_Init+0x22a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a52      	ldr	r2, [pc, #328]	; (8002628 <HAL_GPIO_Init+0x344>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d013      	beq.n	800250a <HAL_GPIO_Init+0x226>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a51      	ldr	r2, [pc, #324]	; (800262c <HAL_GPIO_Init+0x348>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00d      	beq.n	8002506 <HAL_GPIO_Init+0x222>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a50      	ldr	r2, [pc, #320]	; (8002630 <HAL_GPIO_Init+0x34c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d007      	beq.n	8002502 <HAL_GPIO_Init+0x21e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4f      	ldr	r2, [pc, #316]	; (8002634 <HAL_GPIO_Init+0x350>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d101      	bne.n	80024fe <HAL_GPIO_Init+0x21a>
 80024fa:	2309      	movs	r3, #9
 80024fc:	e012      	b.n	8002524 <HAL_GPIO_Init+0x240>
 80024fe:	230a      	movs	r3, #10
 8002500:	e010      	b.n	8002524 <HAL_GPIO_Init+0x240>
 8002502:	2308      	movs	r3, #8
 8002504:	e00e      	b.n	8002524 <HAL_GPIO_Init+0x240>
 8002506:	2307      	movs	r3, #7
 8002508:	e00c      	b.n	8002524 <HAL_GPIO_Init+0x240>
 800250a:	2306      	movs	r3, #6
 800250c:	e00a      	b.n	8002524 <HAL_GPIO_Init+0x240>
 800250e:	2305      	movs	r3, #5
 8002510:	e008      	b.n	8002524 <HAL_GPIO_Init+0x240>
 8002512:	2304      	movs	r3, #4
 8002514:	e006      	b.n	8002524 <HAL_GPIO_Init+0x240>
 8002516:	2303      	movs	r3, #3
 8002518:	e004      	b.n	8002524 <HAL_GPIO_Init+0x240>
 800251a:	2302      	movs	r3, #2
 800251c:	e002      	b.n	8002524 <HAL_GPIO_Init+0x240>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <HAL_GPIO_Init+0x240>
 8002522:	2300      	movs	r3, #0
 8002524:	69fa      	ldr	r2, [r7, #28]
 8002526:	f002 0203 	and.w	r2, r2, #3
 800252a:	0092      	lsls	r2, r2, #2
 800252c:	4093      	lsls	r3, r2
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002534:	4935      	ldr	r1, [pc, #212]	; (800260c <HAL_GPIO_Init+0x328>)
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	089b      	lsrs	r3, r3, #2
 800253a:	3302      	adds	r3, #2
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002542:	4b3d      	ldr	r3, [pc, #244]	; (8002638 <HAL_GPIO_Init+0x354>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002566:	4a34      	ldr	r2, [pc, #208]	; (8002638 <HAL_GPIO_Init+0x354>)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800256c:	4b32      	ldr	r3, [pc, #200]	; (8002638 <HAL_GPIO_Init+0x354>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002590:	4a29      	ldr	r2, [pc, #164]	; (8002638 <HAL_GPIO_Init+0x354>)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002596:	4b28      	ldr	r3, [pc, #160]	; (8002638 <HAL_GPIO_Init+0x354>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ba:	4a1f      	ldr	r2, [pc, #124]	; (8002638 <HAL_GPIO_Init+0x354>)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025c0:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <HAL_GPIO_Init+0x354>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025e4:	4a14      	ldr	r2, [pc, #80]	; (8002638 <HAL_GPIO_Init+0x354>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3301      	adds	r3, #1
 80025ee:	61fb      	str	r3, [r7, #28]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	2b0f      	cmp	r3, #15
 80025f4:	f67f ae84 	bls.w	8002300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3724      	adds	r7, #36	; 0x24
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800
 800260c:	40013800 	.word	0x40013800
 8002610:	40020000 	.word	0x40020000
 8002614:	40020400 	.word	0x40020400
 8002618:	40020800 	.word	0x40020800
 800261c:	40020c00 	.word	0x40020c00
 8002620:	40021000 	.word	0x40021000
 8002624:	40021400 	.word	0x40021400
 8002628:	40021800 	.word	0x40021800
 800262c:	40021c00 	.word	0x40021c00
 8002630:	40022000 	.word	0x40022000
 8002634:	40022400 	.word	0x40022400
 8002638:	40013c00 	.word	0x40013c00

0800263c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	887b      	ldrh	r3, [r7, #2]
 800264e:	4013      	ands	r3, r2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
 8002658:	e001      	b.n	800265e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800265e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	807b      	strh	r3, [r7, #2]
 8002678:	4613      	mov	r3, r2
 800267a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800267c:	787b      	ldrb	r3, [r7, #1]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002688:	e003      	b.n	8002692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800268a:	887b      	ldrh	r3, [r7, #2]
 800268c:	041a      	lsls	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	619a      	str	r2, [r3, #24]
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e12b      	b.n	800290a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d106      	bne.n	80026cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff f89c 	bl	8001804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2224      	movs	r2, #36	; 0x24
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002702:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002704:	f000 fdfc 	bl	8003300 <HAL_RCC_GetPCLK1Freq>
 8002708:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4a81      	ldr	r2, [pc, #516]	; (8002914 <HAL_I2C_Init+0x274>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d807      	bhi.n	8002724 <HAL_I2C_Init+0x84>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4a80      	ldr	r2, [pc, #512]	; (8002918 <HAL_I2C_Init+0x278>)
 8002718:	4293      	cmp	r3, r2
 800271a:	bf94      	ite	ls
 800271c:	2301      	movls	r3, #1
 800271e:	2300      	movhi	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	e006      	b.n	8002732 <HAL_I2C_Init+0x92>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4a7d      	ldr	r2, [pc, #500]	; (800291c <HAL_I2C_Init+0x27c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	bf94      	ite	ls
 800272c:	2301      	movls	r3, #1
 800272e:	2300      	movhi	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e0e7      	b.n	800290a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4a78      	ldr	r2, [pc, #480]	; (8002920 <HAL_I2C_Init+0x280>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	0c9b      	lsrs	r3, r3, #18
 8002744:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	430a      	orrs	r2, r1
 8002758:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4a6a      	ldr	r2, [pc, #424]	; (8002914 <HAL_I2C_Init+0x274>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d802      	bhi.n	8002774 <HAL_I2C_Init+0xd4>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	3301      	adds	r3, #1
 8002772:	e009      	b.n	8002788 <HAL_I2C_Init+0xe8>
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	4a69      	ldr	r2, [pc, #420]	; (8002924 <HAL_I2C_Init+0x284>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	3301      	adds	r3, #1
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	430b      	orrs	r3, r1
 800278e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800279a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	495c      	ldr	r1, [pc, #368]	; (8002914 <HAL_I2C_Init+0x274>)
 80027a4:	428b      	cmp	r3, r1
 80027a6:	d819      	bhi.n	80027dc <HAL_I2C_Init+0x13c>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1e59      	subs	r1, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80027b6:	1c59      	adds	r1, r3, #1
 80027b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027bc:	400b      	ands	r3, r1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_I2C_Init+0x138>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1e59      	subs	r1, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80027d0:	3301      	adds	r3, #1
 80027d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d6:	e051      	b.n	800287c <HAL_I2C_Init+0x1dc>
 80027d8:	2304      	movs	r3, #4
 80027da:	e04f      	b.n	800287c <HAL_I2C_Init+0x1dc>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d111      	bne.n	8002808 <HAL_I2C_Init+0x168>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1e58      	subs	r0, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6859      	ldr	r1, [r3, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	440b      	add	r3, r1
 80027f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f6:	3301      	adds	r3, #1
 80027f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf0c      	ite	eq
 8002800:	2301      	moveq	r3, #1
 8002802:	2300      	movne	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	e012      	b.n	800282e <HAL_I2C_Init+0x18e>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1e58      	subs	r0, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	0099      	lsls	r1, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	fbb0 f3f3 	udiv	r3, r0, r3
 800281e:	3301      	adds	r3, #1
 8002820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002824:	2b00      	cmp	r3, #0
 8002826:	bf0c      	ite	eq
 8002828:	2301      	moveq	r3, #1
 800282a:	2300      	movne	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Init+0x196>
 8002832:	2301      	movs	r3, #1
 8002834:	e022      	b.n	800287c <HAL_I2C_Init+0x1dc>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10e      	bne.n	800285c <HAL_I2C_Init+0x1bc>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1e58      	subs	r0, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6859      	ldr	r1, [r3, #4]
 8002846:	460b      	mov	r3, r1
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	440b      	add	r3, r1
 800284c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002850:	3301      	adds	r3, #1
 8002852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800285a:	e00f      	b.n	800287c <HAL_I2C_Init+0x1dc>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1e58      	subs	r0, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	0099      	lsls	r1, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002872:	3301      	adds	r3, #1
 8002874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002878:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	6809      	ldr	r1, [r1, #0]
 8002880:	4313      	orrs	r3, r2
 8002882:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69da      	ldr	r2, [r3, #28]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6911      	ldr	r1, [r2, #16]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68d2      	ldr	r2, [r2, #12]
 80028b6:	4311      	orrs	r1, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	430b      	orrs	r3, r1
 80028be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	000186a0 	.word	0x000186a0
 8002918:	001e847f 	.word	0x001e847f
 800291c:	003d08ff 	.word	0x003d08ff
 8002920:	431bde83 	.word	0x431bde83
 8002924:	10624dd3 	.word	0x10624dd3

08002928 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b20      	cmp	r3, #32
 800293c:	d129      	bne.n	8002992 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2224      	movs	r2, #36	; 0x24
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0210 	bic.w	r2, r2, #16
 8002964:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0201 	orr.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2220      	movs	r2, #32
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	e000      	b.n	8002994 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002992:	2302      	movs	r3, #2
  }
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d12a      	bne.n	8002a10 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2224      	movs	r2, #36	; 0x24
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0201 	bic.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80029da:	89fb      	ldrh	r3, [r7, #14]
 80029dc:	f023 030f 	bic.w	r3, r3, #15
 80029e0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	89fb      	ldrh	r3, [r7, #14]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	89fa      	ldrh	r2, [r7, #14]
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e000      	b.n	8002a12 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002a10:	2302      	movs	r3, #2
  }
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	603b      	str	r3, [r7, #0]
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	4a1f      	ldr	r2, [pc, #124]	; (8002ab0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a38:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3a:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a46:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a4c:	f7ff fa76 	bl	8001f3c <HAL_GetTick>
 8002a50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a52:	e009      	b.n	8002a68 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a54:	f7ff fa72 	bl	8001f3c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a62:	d901      	bls.n	8002a68 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e01f      	b.n	8002aa8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a68:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a74:	d1ee      	bne.n	8002a54 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a76:	4b11      	ldr	r3, [pc, #68]	; (8002abc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a7c:	f7ff fa5e 	bl	8001f3c <HAL_GetTick>
 8002a80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a82:	e009      	b.n	8002a98 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a84:	f7ff fa5a 	bl	8001f3c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a92:	d901      	bls.n	8002a98 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e007      	b.n	8002aa8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a98:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aa4:	d1ee      	bne.n	8002a84 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	420e0040 	.word	0x420e0040
 8002ab8:	40007000 	.word	0x40007000
 8002abc:	420e0044 	.word	0x420e0044

08002ac0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e264      	b.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d075      	beq.n	8002bca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ade:	4ba3      	ldr	r3, [pc, #652]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d00c      	beq.n	8002b04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aea:	4ba0      	ldr	r3, [pc, #640]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d112      	bne.n	8002b1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af6:	4b9d      	ldr	r3, [pc, #628]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b02:	d10b      	bne.n	8002b1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b04:	4b99      	ldr	r3, [pc, #612]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d05b      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x108>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d157      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e23f      	b.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b24:	d106      	bne.n	8002b34 <HAL_RCC_OscConfig+0x74>
 8002b26:	4b91      	ldr	r3, [pc, #580]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a90      	ldr	r2, [pc, #576]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e01d      	b.n	8002b70 <HAL_RCC_OscConfig+0xb0>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x98>
 8002b3e:	4b8b      	ldr	r3, [pc, #556]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a8a      	ldr	r2, [pc, #552]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	4b88      	ldr	r3, [pc, #544]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a87      	ldr	r2, [pc, #540]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e00b      	b.n	8002b70 <HAL_RCC_OscConfig+0xb0>
 8002b58:	4b84      	ldr	r3, [pc, #528]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a83      	ldr	r2, [pc, #524]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	4b81      	ldr	r3, [pc, #516]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a80      	ldr	r2, [pc, #512]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d013      	beq.n	8002ba0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7ff f9e0 	bl	8001f3c <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b80:	f7ff f9dc 	bl	8001f3c <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e204      	b.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	4b76      	ldr	r3, [pc, #472]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0xc0>
 8002b9e:	e014      	b.n	8002bca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7ff f9cc 	bl	8001f3c <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7ff f9c8 	bl	8001f3c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	; 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e1f0      	b.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	4b6c      	ldr	r3, [pc, #432]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0xe8>
 8002bc6:	e000      	b.n	8002bca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d063      	beq.n	8002c9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bd6:	4b65      	ldr	r3, [pc, #404]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002be2:	4b62      	ldr	r3, [pc, #392]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d11c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bee:	4b5f      	ldr	r3, [pc, #380]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d116      	bne.n	8002c28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfa:	4b5c      	ldr	r3, [pc, #368]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <HAL_RCC_OscConfig+0x152>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e1c4      	b.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c12:	4b56      	ldr	r3, [pc, #344]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4952      	ldr	r1, [pc, #328]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c26:	e03a      	b.n	8002c9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d020      	beq.n	8002c72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c30:	4b4f      	ldr	r3, [pc, #316]	; (8002d70 <HAL_RCC_OscConfig+0x2b0>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c36:	f7ff f981 	bl	8001f3c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c3e:	f7ff f97d 	bl	8001f3c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e1a5      	b.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c50:	4b46      	ldr	r3, [pc, #280]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5c:	4b43      	ldr	r3, [pc, #268]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4940      	ldr	r1, [pc, #256]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	600b      	str	r3, [r1, #0]
 8002c70:	e015      	b.n	8002c9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c72:	4b3f      	ldr	r3, [pc, #252]	; (8002d70 <HAL_RCC_OscConfig+0x2b0>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7ff f960 	bl	8001f3c <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c80:	f7ff f95c 	bl	8001f3c <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e184      	b.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	4b36      	ldr	r3, [pc, #216]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d030      	beq.n	8002d0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d016      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb2:	4b30      	ldr	r3, [pc, #192]	; (8002d74 <HAL_RCC_OscConfig+0x2b4>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb8:	f7ff f940 	bl	8001f3c <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc0:	f7ff f93c 	bl	8001f3c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e164      	b.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd2:	4b26      	ldr	r3, [pc, #152]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x200>
 8002cde:	e015      	b.n	8002d0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce0:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <HAL_RCC_OscConfig+0x2b4>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce6:	f7ff f929 	bl	8001f3c <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cee:	f7ff f925 	bl	8001f3c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e14d      	b.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d00:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f0      	bne.n	8002cee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80a0 	beq.w	8002e5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1e:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10f      	bne.n	8002d4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	4a0e      	ldr	r2, [pc, #56]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d38:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3a:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d46:	2301      	movs	r3, #1
 8002d48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_OscConfig+0x2b8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d121      	bne.n	8002d9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <HAL_RCC_OscConfig+0x2b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a07      	ldr	r2, [pc, #28]	; (8002d78 <HAL_RCC_OscConfig+0x2b8>)
 8002d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d62:	f7ff f8eb 	bl	8001f3c <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d68:	e011      	b.n	8002d8e <HAL_RCC_OscConfig+0x2ce>
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	42470000 	.word	0x42470000
 8002d74:	42470e80 	.word	0x42470e80
 8002d78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d7c:	f7ff f8de 	bl	8001f3c <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e106      	b.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8e:	4b85      	ldr	r3, [pc, #532]	; (8002fa4 <HAL_RCC_OscConfig+0x4e4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d106      	bne.n	8002db0 <HAL_RCC_OscConfig+0x2f0>
 8002da2:	4b81      	ldr	r3, [pc, #516]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da6:	4a80      	ldr	r2, [pc, #512]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6713      	str	r3, [r2, #112]	; 0x70
 8002dae:	e01c      	b.n	8002dea <HAL_RCC_OscConfig+0x32a>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b05      	cmp	r3, #5
 8002db6:	d10c      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x312>
 8002db8:	4b7b      	ldr	r3, [pc, #492]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	4a7a      	ldr	r2, [pc, #488]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002dbe:	f043 0304 	orr.w	r3, r3, #4
 8002dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc4:	4b78      	ldr	r3, [pc, #480]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc8:	4a77      	ldr	r2, [pc, #476]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd0:	e00b      	b.n	8002dea <HAL_RCC_OscConfig+0x32a>
 8002dd2:	4b75      	ldr	r3, [pc, #468]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	4a74      	ldr	r2, [pc, #464]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002dd8:	f023 0301 	bic.w	r3, r3, #1
 8002ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dde:	4b72      	ldr	r3, [pc, #456]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de2:	4a71      	ldr	r2, [pc, #452]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002de4:	f023 0304 	bic.w	r3, r3, #4
 8002de8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d015      	beq.n	8002e1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df2:	f7ff f8a3 	bl	8001f3c <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df8:	e00a      	b.n	8002e10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dfa:	f7ff f89f 	bl	8001f3c <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e0c5      	b.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e10:	4b65      	ldr	r3, [pc, #404]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0ee      	beq.n	8002dfa <HAL_RCC_OscConfig+0x33a>
 8002e1c:	e014      	b.n	8002e48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1e:	f7ff f88d 	bl	8001f3c <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e26:	f7ff f889 	bl	8001f3c <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e0af      	b.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e3c:	4b5a      	ldr	r3, [pc, #360]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1ee      	bne.n	8002e26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d105      	bne.n	8002e5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4e:	4b56      	ldr	r3, [pc, #344]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	4a55      	ldr	r2, [pc, #340]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 809b 	beq.w	8002f9a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e64:	4b50      	ldr	r3, [pc, #320]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 030c 	and.w	r3, r3, #12
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d05c      	beq.n	8002f2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d141      	bne.n	8002efc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e78:	4b4c      	ldr	r3, [pc, #304]	; (8002fac <HAL_RCC_OscConfig+0x4ec>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7e:	f7ff f85d 	bl	8001f3c <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e86:	f7ff f859 	bl	8001f3c <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e081      	b.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e98:	4b43      	ldr	r3, [pc, #268]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1f0      	bne.n	8002e86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69da      	ldr	r2, [r3, #28]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	019b      	lsls	r3, r3, #6
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	085b      	lsrs	r3, r3, #1
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	041b      	lsls	r3, r3, #16
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	061b      	lsls	r3, r3, #24
 8002ec8:	4937      	ldr	r1, [pc, #220]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ece:	4b37      	ldr	r3, [pc, #220]	; (8002fac <HAL_RCC_OscConfig+0x4ec>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7ff f832 	bl	8001f3c <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002edc:	f7ff f82e 	bl	8001f3c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e056      	b.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eee:	4b2e      	ldr	r3, [pc, #184]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x41c>
 8002efa:	e04e      	b.n	8002f9a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efc:	4b2b      	ldr	r3, [pc, #172]	; (8002fac <HAL_RCC_OscConfig+0x4ec>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f02:	f7ff f81b 	bl	8001f3c <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0a:	f7ff f817 	bl	8001f3c <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e03f      	b.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1c:	4b22      	ldr	r3, [pc, #136]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f0      	bne.n	8002f0a <HAL_RCC_OscConfig+0x44a>
 8002f28:	e037      	b.n	8002f9a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e032      	b.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f36:	4b1c      	ldr	r3, [pc, #112]	; (8002fa8 <HAL_RCC_OscConfig+0x4e8>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d028      	beq.n	8002f96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d121      	bne.n	8002f96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d11a      	bne.n	8002f96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f66:	4013      	ands	r3, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f6c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d111      	bne.n	8002f96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	085b      	lsrs	r3, r3, #1
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d107      	bne.n	8002f96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d001      	beq.n	8002f9a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	42470060 	.word	0x42470060

08002fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0cc      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b68      	ldr	r3, [pc, #416]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d90c      	bls.n	8002fec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b65      	ldr	r3, [pc, #404]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fda:	4b63      	ldr	r3, [pc, #396]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0b8      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d020      	beq.n	800303a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003004:	4b59      	ldr	r3, [pc, #356]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	4a58      	ldr	r2, [pc, #352]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800300e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800301c:	4b53      	ldr	r3, [pc, #332]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4a52      	ldr	r2, [pc, #328]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003026:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003028:	4b50      	ldr	r3, [pc, #320]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	494d      	ldr	r1, [pc, #308]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d044      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d107      	bne.n	800305e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	4b47      	ldr	r3, [pc, #284]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d119      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e07f      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d003      	beq.n	800306e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800306a:	2b03      	cmp	r3, #3
 800306c:	d107      	bne.n	800307e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306e:	4b3f      	ldr	r3, [pc, #252]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e06f      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307e:	4b3b      	ldr	r3, [pc, #236]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e067      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800308e:	4b37      	ldr	r3, [pc, #220]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f023 0203 	bic.w	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4934      	ldr	r1, [pc, #208]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	4313      	orrs	r3, r2
 800309e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a0:	f7fe ff4c 	bl	8001f3c <HAL_GetTick>
 80030a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a6:	e00a      	b.n	80030be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a8:	f7fe ff48 	bl	8001f3c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e04f      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	4b2b      	ldr	r3, [pc, #172]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 020c 	and.w	r2, r3, #12
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d1eb      	bne.n	80030a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d0:	4b25      	ldr	r3, [pc, #148]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 030f 	and.w	r3, r3, #15
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d20c      	bcs.n	80030f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030de:	4b22      	ldr	r3, [pc, #136]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e6:	4b20      	ldr	r3, [pc, #128]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e032      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003104:	4b19      	ldr	r3, [pc, #100]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	4916      	ldr	r1, [pc, #88]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003122:	4b12      	ldr	r3, [pc, #72]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	490e      	ldr	r1, [pc, #56]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003136:	f000 f821 	bl	800317c <HAL_RCC_GetSysClockFreq>
 800313a:	4602      	mov	r2, r0
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	490a      	ldr	r1, [pc, #40]	; (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	5ccb      	ldrb	r3, [r1, r3]
 800314a:	fa22 f303 	lsr.w	r3, r2, r3
 800314e:	4a09      	ldr	r2, [pc, #36]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe feac 	bl	8001eb4 <HAL_InitTick>

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023c00 	.word	0x40023c00
 800316c:	40023800 	.word	0x40023800
 8003170:	08007bd8 	.word	0x08007bd8
 8003174:	20000000 	.word	0x20000000
 8003178:	20000004 	.word	0x20000004

0800317c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800317c:	b5b0      	push	{r4, r5, r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003182:	2100      	movs	r1, #0
 8003184:	6079      	str	r1, [r7, #4]
 8003186:	2100      	movs	r1, #0
 8003188:	60f9      	str	r1, [r7, #12]
 800318a:	2100      	movs	r1, #0
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800318e:	2100      	movs	r1, #0
 8003190:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003192:	4952      	ldr	r1, [pc, #328]	; (80032dc <HAL_RCC_GetSysClockFreq+0x160>)
 8003194:	6889      	ldr	r1, [r1, #8]
 8003196:	f001 010c 	and.w	r1, r1, #12
 800319a:	2908      	cmp	r1, #8
 800319c:	d00d      	beq.n	80031ba <HAL_RCC_GetSysClockFreq+0x3e>
 800319e:	2908      	cmp	r1, #8
 80031a0:	f200 8094 	bhi.w	80032cc <HAL_RCC_GetSysClockFreq+0x150>
 80031a4:	2900      	cmp	r1, #0
 80031a6:	d002      	beq.n	80031ae <HAL_RCC_GetSysClockFreq+0x32>
 80031a8:	2904      	cmp	r1, #4
 80031aa:	d003      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0x38>
 80031ac:	e08e      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031ae:	4b4c      	ldr	r3, [pc, #304]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80031b0:	60bb      	str	r3, [r7, #8]
       break;
 80031b2:	e08e      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031b4:	4b4b      	ldr	r3, [pc, #300]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80031b6:	60bb      	str	r3, [r7, #8]
      break;
 80031b8:	e08b      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031ba:	4948      	ldr	r1, [pc, #288]	; (80032dc <HAL_RCC_GetSysClockFreq+0x160>)
 80031bc:	6849      	ldr	r1, [r1, #4]
 80031be:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80031c2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031c4:	4945      	ldr	r1, [pc, #276]	; (80032dc <HAL_RCC_GetSysClockFreq+0x160>)
 80031c6:	6849      	ldr	r1, [r1, #4]
 80031c8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80031cc:	2900      	cmp	r1, #0
 80031ce:	d024      	beq.n	800321a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d0:	4942      	ldr	r1, [pc, #264]	; (80032dc <HAL_RCC_GetSysClockFreq+0x160>)
 80031d2:	6849      	ldr	r1, [r1, #4]
 80031d4:	0989      	lsrs	r1, r1, #6
 80031d6:	4608      	mov	r0, r1
 80031d8:	f04f 0100 	mov.w	r1, #0
 80031dc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80031e0:	f04f 0500 	mov.w	r5, #0
 80031e4:	ea00 0204 	and.w	r2, r0, r4
 80031e8:	ea01 0305 	and.w	r3, r1, r5
 80031ec:	493d      	ldr	r1, [pc, #244]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80031ee:	fb01 f003 	mul.w	r0, r1, r3
 80031f2:	2100      	movs	r1, #0
 80031f4:	fb01 f102 	mul.w	r1, r1, r2
 80031f8:	1844      	adds	r4, r0, r1
 80031fa:	493a      	ldr	r1, [pc, #232]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80031fc:	fba2 0101 	umull	r0, r1, r2, r1
 8003200:	1863      	adds	r3, r4, r1
 8003202:	4619      	mov	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	461a      	mov	r2, r3
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	f7fd fd2c 	bl	8000c68 <__aeabi_uldivmod>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4613      	mov	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	e04a      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800321a:	4b30      	ldr	r3, [pc, #192]	; (80032dc <HAL_RCC_GetSysClockFreq+0x160>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	099b      	lsrs	r3, r3, #6
 8003220:	461a      	mov	r2, r3
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	f240 10ff 	movw	r0, #511	; 0x1ff
 800322a:	f04f 0100 	mov.w	r1, #0
 800322e:	ea02 0400 	and.w	r4, r2, r0
 8003232:	ea03 0501 	and.w	r5, r3, r1
 8003236:	4620      	mov	r0, r4
 8003238:	4629      	mov	r1, r5
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	014b      	lsls	r3, r1, #5
 8003244:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003248:	0142      	lsls	r2, r0, #5
 800324a:	4610      	mov	r0, r2
 800324c:	4619      	mov	r1, r3
 800324e:	1b00      	subs	r0, r0, r4
 8003250:	eb61 0105 	sbc.w	r1, r1, r5
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	018b      	lsls	r3, r1, #6
 800325e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003262:	0182      	lsls	r2, r0, #6
 8003264:	1a12      	subs	r2, r2, r0
 8003266:	eb63 0301 	sbc.w	r3, r3, r1
 800326a:	f04f 0000 	mov.w	r0, #0
 800326e:	f04f 0100 	mov.w	r1, #0
 8003272:	00d9      	lsls	r1, r3, #3
 8003274:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003278:	00d0      	lsls	r0, r2, #3
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	1912      	adds	r2, r2, r4
 8003280:	eb45 0303 	adc.w	r3, r5, r3
 8003284:	f04f 0000 	mov.w	r0, #0
 8003288:	f04f 0100 	mov.w	r1, #0
 800328c:	0299      	lsls	r1, r3, #10
 800328e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003292:	0290      	lsls	r0, r2, #10
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	461a      	mov	r2, r3
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	f7fd fce0 	bl	8000c68 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4613      	mov	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032b0:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <HAL_RCC_GetSysClockFreq+0x160>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	3301      	adds	r3, #1
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c8:	60bb      	str	r3, [r7, #8]
      break;
 80032ca:	e002      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032cc:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80032ce:	60bb      	str	r3, [r7, #8]
      break;
 80032d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032d2:	68bb      	ldr	r3, [r7, #8]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bdb0      	pop	{r4, r5, r7, pc}
 80032dc:	40023800 	.word	0x40023800
 80032e0:	00f42400 	.word	0x00f42400
 80032e4:	017d7840 	.word	0x017d7840

080032e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032ec:	4b03      	ldr	r3, [pc, #12]	; (80032fc <HAL_RCC_GetHCLKFreq+0x14>)
 80032ee:	681b      	ldr	r3, [r3, #0]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	20000000 	.word	0x20000000

08003300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003304:	f7ff fff0 	bl	80032e8 <HAL_RCC_GetHCLKFreq>
 8003308:	4602      	mov	r2, r0
 800330a:	4b05      	ldr	r3, [pc, #20]	; (8003320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	0a9b      	lsrs	r3, r3, #10
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	4903      	ldr	r1, [pc, #12]	; (8003324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003316:	5ccb      	ldrb	r3, [r1, r3]
 8003318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800331c:	4618      	mov	r0, r3
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40023800 	.word	0x40023800
 8003324:	08007be8 	.word	0x08007be8

08003328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800332c:	f7ff ffdc 	bl	80032e8 <HAL_RCC_GetHCLKFreq>
 8003330:	4602      	mov	r2, r0
 8003332:	4b05      	ldr	r3, [pc, #20]	; (8003348 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	0b5b      	lsrs	r3, r3, #13
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	4903      	ldr	r1, [pc, #12]	; (800334c <HAL_RCC_GetPCLK2Freq+0x24>)
 800333e:	5ccb      	ldrb	r3, [r1, r3]
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40023800 	.word	0x40023800
 800334c:	08007be8 	.word	0x08007be8

08003350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e041      	b.n	80033e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fe fac2 	bl	8001900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	4619      	mov	r1, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f000 f964 	bl	800365c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e041      	b.n	8003484 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d106      	bne.n	800341a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f839 	bl	800348c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2202      	movs	r2, #2
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3304      	adds	r3, #4
 800342a:	4619      	mov	r1, r3
 800342c:	4610      	mov	r0, r2
 800342e:	f000 f915 	bl	800365c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_TIM_IC_ConfigChannel+0x1e>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e088      	b.n	80035d0 <HAL_TIM_IC_ConfigChannel+0x130>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d11b      	bne.n	8003504 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	6819      	ldr	r1, [r3, #0]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f000 f9f0 	bl	80038c0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 020c 	bic.w	r2, r2, #12
 80034ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6999      	ldr	r1, [r3, #24]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	619a      	str	r2, [r3, #24]
 8003502:	e060      	b.n	80035c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b04      	cmp	r3, #4
 8003508:	d11c      	bne.n	8003544 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	6819      	ldr	r1, [r3, #0]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f000 fa74 	bl	8003a06 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699a      	ldr	r2, [r3, #24]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800352c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6999      	ldr	r1, [r3, #24]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	021a      	lsls	r2, r3, #8
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	619a      	str	r2, [r3, #24]
 8003542:	e040      	b.n	80035c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b08      	cmp	r3, #8
 8003548:	d11b      	bne.n	8003582 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	6819      	ldr	r1, [r3, #0]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f000 fac1 	bl	8003ae0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 020c 	bic.w	r2, r2, #12
 800356c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69d9      	ldr	r1, [r3, #28]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	61da      	str	r2, [r3, #28]
 8003580:	e021      	b.n	80035c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b0c      	cmp	r3, #12
 8003586:	d11c      	bne.n	80035c2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	6819      	ldr	r1, [r3, #0]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f000 fade 	bl	8003b58 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	69da      	ldr	r2, [r3, #28]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80035aa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	69d9      	ldr	r1, [r3, #28]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	021a      	lsls	r2, r3, #8
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	61da      	str	r2, [r3, #28]
 80035c0:	e001      	b.n	80035c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e031      	b.n	8003654 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003600:	6839      	ldr	r1, [r7, #0]
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f8ca 	bl	800379c <TIM_SlaveTimer_SetConfig>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e018      	b.n	8003654 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003630:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003640:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a40      	ldr	r2, [pc, #256]	; (8003770 <TIM_Base_SetConfig+0x114>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d013      	beq.n	800369c <TIM_Base_SetConfig+0x40>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367a:	d00f      	beq.n	800369c <TIM_Base_SetConfig+0x40>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a3d      	ldr	r2, [pc, #244]	; (8003774 <TIM_Base_SetConfig+0x118>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00b      	beq.n	800369c <TIM_Base_SetConfig+0x40>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a3c      	ldr	r2, [pc, #240]	; (8003778 <TIM_Base_SetConfig+0x11c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d007      	beq.n	800369c <TIM_Base_SetConfig+0x40>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a3b      	ldr	r2, [pc, #236]	; (800377c <TIM_Base_SetConfig+0x120>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d003      	beq.n	800369c <TIM_Base_SetConfig+0x40>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a3a      	ldr	r2, [pc, #232]	; (8003780 <TIM_Base_SetConfig+0x124>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d108      	bne.n	80036ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a2f      	ldr	r2, [pc, #188]	; (8003770 <TIM_Base_SetConfig+0x114>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d02b      	beq.n	800370e <TIM_Base_SetConfig+0xb2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036bc:	d027      	beq.n	800370e <TIM_Base_SetConfig+0xb2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a2c      	ldr	r2, [pc, #176]	; (8003774 <TIM_Base_SetConfig+0x118>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d023      	beq.n	800370e <TIM_Base_SetConfig+0xb2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a2b      	ldr	r2, [pc, #172]	; (8003778 <TIM_Base_SetConfig+0x11c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d01f      	beq.n	800370e <TIM_Base_SetConfig+0xb2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a2a      	ldr	r2, [pc, #168]	; (800377c <TIM_Base_SetConfig+0x120>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d01b      	beq.n	800370e <TIM_Base_SetConfig+0xb2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a29      	ldr	r2, [pc, #164]	; (8003780 <TIM_Base_SetConfig+0x124>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d017      	beq.n	800370e <TIM_Base_SetConfig+0xb2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a28      	ldr	r2, [pc, #160]	; (8003784 <TIM_Base_SetConfig+0x128>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <TIM_Base_SetConfig+0xb2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a27      	ldr	r2, [pc, #156]	; (8003788 <TIM_Base_SetConfig+0x12c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00f      	beq.n	800370e <TIM_Base_SetConfig+0xb2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a26      	ldr	r2, [pc, #152]	; (800378c <TIM_Base_SetConfig+0x130>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00b      	beq.n	800370e <TIM_Base_SetConfig+0xb2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a25      	ldr	r2, [pc, #148]	; (8003790 <TIM_Base_SetConfig+0x134>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d007      	beq.n	800370e <TIM_Base_SetConfig+0xb2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a24      	ldr	r2, [pc, #144]	; (8003794 <TIM_Base_SetConfig+0x138>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d003      	beq.n	800370e <TIM_Base_SetConfig+0xb2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a23      	ldr	r2, [pc, #140]	; (8003798 <TIM_Base_SetConfig+0x13c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d108      	bne.n	8003720 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <TIM_Base_SetConfig+0x114>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <TIM_Base_SetConfig+0xf8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <TIM_Base_SetConfig+0x124>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d103      	bne.n	800375c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	615a      	str	r2, [r3, #20]
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000
 8003774:	40000400 	.word	0x40000400
 8003778:	40000800 	.word	0x40000800
 800377c:	40000c00 	.word	0x40000c00
 8003780:	40010400 	.word	0x40010400
 8003784:	40014000 	.word	0x40014000
 8003788:	40014400 	.word	0x40014400
 800378c:	40014800 	.word	0x40014800
 8003790:	40001800 	.word	0x40001800
 8003794:	40001c00 	.word	0x40001c00
 8003798:	40002000 	.word	0x40002000

0800379c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f023 0307 	bic.w	r3, r3, #7
 80037ca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b70      	cmp	r3, #112	; 0x70
 80037e4:	d01a      	beq.n	800381c <TIM_SlaveTimer_SetConfig+0x80>
 80037e6:	2b70      	cmp	r3, #112	; 0x70
 80037e8:	d860      	bhi.n	80038ac <TIM_SlaveTimer_SetConfig+0x110>
 80037ea:	2b60      	cmp	r3, #96	; 0x60
 80037ec:	d054      	beq.n	8003898 <TIM_SlaveTimer_SetConfig+0xfc>
 80037ee:	2b60      	cmp	r3, #96	; 0x60
 80037f0:	d85c      	bhi.n	80038ac <TIM_SlaveTimer_SetConfig+0x110>
 80037f2:	2b50      	cmp	r3, #80	; 0x50
 80037f4:	d046      	beq.n	8003884 <TIM_SlaveTimer_SetConfig+0xe8>
 80037f6:	2b50      	cmp	r3, #80	; 0x50
 80037f8:	d858      	bhi.n	80038ac <TIM_SlaveTimer_SetConfig+0x110>
 80037fa:	2b40      	cmp	r3, #64	; 0x40
 80037fc:	d019      	beq.n	8003832 <TIM_SlaveTimer_SetConfig+0x96>
 80037fe:	2b40      	cmp	r3, #64	; 0x40
 8003800:	d854      	bhi.n	80038ac <TIM_SlaveTimer_SetConfig+0x110>
 8003802:	2b30      	cmp	r3, #48	; 0x30
 8003804:	d055      	beq.n	80038b2 <TIM_SlaveTimer_SetConfig+0x116>
 8003806:	2b30      	cmp	r3, #48	; 0x30
 8003808:	d850      	bhi.n	80038ac <TIM_SlaveTimer_SetConfig+0x110>
 800380a:	2b20      	cmp	r3, #32
 800380c:	d051      	beq.n	80038b2 <TIM_SlaveTimer_SetConfig+0x116>
 800380e:	2b20      	cmp	r3, #32
 8003810:	d84c      	bhi.n	80038ac <TIM_SlaveTimer_SetConfig+0x110>
 8003812:	2b00      	cmp	r3, #0
 8003814:	d04d      	beq.n	80038b2 <TIM_SlaveTimer_SetConfig+0x116>
 8003816:	2b10      	cmp	r3, #16
 8003818:	d04b      	beq.n	80038b2 <TIM_SlaveTimer_SetConfig+0x116>
 800381a:	e047      	b.n	80038ac <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68d9      	ldr	r1, [r3, #12]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f000 f9d1 	bl	8003bd2 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003830:	e040      	b.n	80038b4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b05      	cmp	r3, #5
 8003838:	d101      	bne.n	800383e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e03b      	b.n	80038b6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6a1a      	ldr	r2, [r3, #32]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0201 	bic.w	r2, r2, #1
 8003854:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003864:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	4313      	orrs	r3, r2
 8003870:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	621a      	str	r2, [r3, #32]
      break;
 8003882:	e017      	b.n	80038b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	6899      	ldr	r1, [r3, #8]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	461a      	mov	r2, r3
 8003892:	f000 f889 	bl	80039a8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003896:	e00d      	b.n	80038b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6899      	ldr	r1, [r3, #8]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	461a      	mov	r2, r3
 80038a6:	f000 f8eb 	bl	8003a80 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80038aa:	e003      	b.n	80038b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	75fb      	strb	r3, [r7, #23]
      break;
 80038b0:	e000      	b.n	80038b4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80038b2:	bf00      	nop
  }

  return status;
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	f023 0201 	bic.w	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a28      	ldr	r2, [pc, #160]	; (800398c <TIM_TI1_SetConfig+0xcc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01b      	beq.n	8003926 <TIM_TI1_SetConfig+0x66>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f4:	d017      	beq.n	8003926 <TIM_TI1_SetConfig+0x66>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4a25      	ldr	r2, [pc, #148]	; (8003990 <TIM_TI1_SetConfig+0xd0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d013      	beq.n	8003926 <TIM_TI1_SetConfig+0x66>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4a24      	ldr	r2, [pc, #144]	; (8003994 <TIM_TI1_SetConfig+0xd4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00f      	beq.n	8003926 <TIM_TI1_SetConfig+0x66>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4a23      	ldr	r2, [pc, #140]	; (8003998 <TIM_TI1_SetConfig+0xd8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d00b      	beq.n	8003926 <TIM_TI1_SetConfig+0x66>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4a22      	ldr	r2, [pc, #136]	; (800399c <TIM_TI1_SetConfig+0xdc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d007      	beq.n	8003926 <TIM_TI1_SetConfig+0x66>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4a21      	ldr	r2, [pc, #132]	; (80039a0 <TIM_TI1_SetConfig+0xe0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d003      	beq.n	8003926 <TIM_TI1_SetConfig+0x66>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4a20      	ldr	r2, [pc, #128]	; (80039a4 <TIM_TI1_SetConfig+0xe4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d101      	bne.n	800392a <TIM_TI1_SetConfig+0x6a>
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <TIM_TI1_SetConfig+0x6c>
 800392a:	2300      	movs	r3, #0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f023 0303 	bic.w	r3, r3, #3
 8003936:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	e003      	b.n	800394a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003950:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	b2db      	uxtb	r3, r3
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f023 030a 	bic.w	r3, r3, #10
 8003964:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	f003 030a 	and.w	r3, r3, #10
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	621a      	str	r2, [r3, #32]
}
 800397e:	bf00      	nop
 8003980:	371c      	adds	r7, #28
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40010000 	.word	0x40010000
 8003990:	40000400 	.word	0x40000400
 8003994:	40000800 	.word	0x40000800
 8003998:	40000c00 	.word	0x40000c00
 800399c:	40010400 	.word	0x40010400
 80039a0:	40014000 	.word	0x40014000
 80039a4:	40001800 	.word	0x40001800

080039a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f023 0201 	bic.w	r2, r3, #1
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f023 030a 	bic.w	r3, r3, #10
 80039e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	621a      	str	r2, [r3, #32]
}
 80039fa:	bf00      	nop
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b087      	sub	sp, #28
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	f023 0210 	bic.w	r2, r3, #16
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	031b      	lsls	r3, r3, #12
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	621a      	str	r2, [r3, #32]
}
 8003a74:	bf00      	nop
 8003a76:	371c      	adds	r7, #28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f023 0210 	bic.w	r2, r3, #16
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aaa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	031b      	lsls	r3, r3, #12
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003abc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	621a      	str	r2, [r3, #32]
}
 8003ad4:	bf00      	nop
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f023 0303 	bic.w	r3, r3, #3
 8003b0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003b30:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	621a      	str	r2, [r3, #32]
}
 8003b4c:	bf00      	nop
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	021b      	lsls	r3, r3, #8
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b96:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	031b      	lsls	r3, r3, #12
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003baa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	031b      	lsls	r3, r3, #12
 8003bb0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	621a      	str	r2, [r3, #32]
}
 8003bc6:	bf00      	nop
 8003bc8:	371c      	adds	r7, #28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b087      	sub	sp, #28
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	021a      	lsls	r2, r3, #8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	609a      	str	r2, [r3, #8]
}
 8003c06:	bf00      	nop
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e05a      	b.n	8003ce2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a21      	ldr	r2, [pc, #132]	; (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d022      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c78:	d01d      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a1d      	ldr	r2, [pc, #116]	; (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d018      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1b      	ldr	r2, [pc, #108]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d013      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a1a      	ldr	r2, [pc, #104]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00e      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a18      	ldr	r2, [pc, #96]	; (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d009      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a17      	ldr	r2, [pc, #92]	; (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d004      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a15      	ldr	r2, [pc, #84]	; (8003d08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40000800 	.word	0x40000800
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	40010400 	.word	0x40010400
 8003d04:	40014000 	.word	0x40014000
 8003d08:	40001800 	.word	0x40001800

08003d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e03f      	b.n	8003d9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fd fe94 	bl	8001a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2224      	movs	r2, #36	; 0x24
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 fddb 	bl	800490c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b08a      	sub	sp, #40	; 0x28
 8003daa:	af02      	add	r7, sp, #8
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	603b      	str	r3, [r7, #0]
 8003db2:	4613      	mov	r3, r2
 8003db4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d17c      	bne.n	8003ec0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <HAL_UART_Transmit+0x2c>
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e075      	b.n	8003ec2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_UART_Transmit+0x3e>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e06e      	b.n	8003ec2 <HAL_UART_Transmit+0x11c>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2221      	movs	r2, #33	; 0x21
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dfa:	f7fe f89f 	bl	8001f3c <HAL_GetTick>
 8003dfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	88fa      	ldrh	r2, [r7, #6]
 8003e04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	88fa      	ldrh	r2, [r7, #6]
 8003e0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e14:	d108      	bne.n	8003e28 <HAL_UART_Transmit+0x82>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d104      	bne.n	8003e28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	e003      	b.n	8003e30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e38:	e02a      	b.n	8003e90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2200      	movs	r2, #0
 8003e42:	2180      	movs	r1, #128	; 0x80
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 fb1f 	bl	8004488 <UART_WaitOnFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e036      	b.n	8003ec2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	61bb      	str	r3, [r7, #24]
 8003e70:	e007      	b.n	8003e82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	781a      	ldrb	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1cf      	bne.n	8003e3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2140      	movs	r1, #64	; 0x40
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 faef 	bl	8004488 <UART_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e006      	b.n	8003ec2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e000      	b.n	8003ec2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ec0:	2302      	movs	r3, #2
  }
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d11d      	bne.n	8003f20 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <HAL_UART_Receive_IT+0x26>
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e016      	b.n	8003f22 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_UART_Receive_IT+0x38>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e00f      	b.n	8003f22 <HAL_UART_Receive_IT+0x58>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f10:	88fb      	ldrh	r3, [r7, #6]
 8003f12:	461a      	mov	r2, r3
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fb24 	bl	8004564 <UART_Start_Receive_IT>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	e000      	b.n	8003f22 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003f20:	2302      	movs	r3, #2
  }
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b0ba      	sub	sp, #232	; 0xe8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10f      	bne.n	8003f92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_UART_IRQHandler+0x66>
 8003f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 fc03 	bl	8004796 <UART_Receive_IT>
      return;
 8003f90:	e256      	b.n	8004440 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 80de 	beq.w	8004158 <HAL_UART_IRQHandler+0x22c>
 8003f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d106      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80d1 	beq.w	8004158 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <HAL_UART_IRQHandler+0xae>
 8003fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f043 0201 	orr.w	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00b      	beq.n	8003ffe <HAL_UART_IRQHandler+0xd2>
 8003fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f043 0202 	orr.w	r2, r3, #2
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <HAL_UART_IRQHandler+0xf6>
 800400a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f043 0204 	orr.w	r2, r3, #4
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d011      	beq.n	8004052 <HAL_UART_IRQHandler+0x126>
 800402e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d105      	bne.n	8004046 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800403a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f043 0208 	orr.w	r2, r3, #8
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 81ed 	beq.w	8004436 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800405c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_UART_IRQHandler+0x14e>
 8004068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fb8e 	bl	8004796 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004084:	2b40      	cmp	r3, #64	; 0x40
 8004086:	bf0c      	ite	eq
 8004088:	2301      	moveq	r3, #1
 800408a:	2300      	movne	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d103      	bne.n	80040a6 <HAL_UART_IRQHandler+0x17a>
 800409e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d04f      	beq.n	8004146 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fa96 	bl	80045d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b40      	cmp	r3, #64	; 0x40
 80040b8:	d141      	bne.n	800413e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3314      	adds	r3, #20
 80040c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3314      	adds	r3, #20
 80040e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1d9      	bne.n	80040ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	2b00      	cmp	r3, #0
 800410c:	d013      	beq.n	8004136 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	4a7d      	ldr	r2, [pc, #500]	; (8004308 <HAL_UART_IRQHandler+0x3dc>)
 8004114:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	4618      	mov	r0, r3
 800411c:	f7fe f8bf 	bl	800229e <HAL_DMA_Abort_IT>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d016      	beq.n	8004154 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004130:	4610      	mov	r0, r2
 8004132:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004134:	e00e      	b.n	8004154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f990 	bl	800445c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413c:	e00a      	b.n	8004154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f98c 	bl	800445c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004144:	e006      	b.n	8004154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f988 	bl	800445c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004152:	e170      	b.n	8004436 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004154:	bf00      	nop
    return;
 8004156:	e16e      	b.n	8004436 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	2b01      	cmp	r3, #1
 800415e:	f040 814a 	bne.w	80043f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 8143 	beq.w	80043f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 813c 	beq.w	80043f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419e:	2b40      	cmp	r3, #64	; 0x40
 80041a0:	f040 80b4 	bne.w	800430c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8140 	beq.w	800443a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041c2:	429a      	cmp	r2, r3
 80041c4:	f080 8139 	bcs.w	800443a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041da:	f000 8088 	beq.w	80042ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041ec:	e853 3f00 	ldrex	r3, [r3]
 80041f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	330c      	adds	r3, #12
 8004206:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800420a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800420e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004216:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800421a:	e841 2300 	strex	r3, r2, [r1]
 800421e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004222:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1d9      	bne.n	80041de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3314      	adds	r3, #20
 8004230:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800423a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800423c:	f023 0301 	bic.w	r3, r3, #1
 8004240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3314      	adds	r3, #20
 800424a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800424e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004252:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004256:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800425a:	e841 2300 	strex	r3, r2, [r1]
 800425e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e1      	bne.n	800422a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3314      	adds	r3, #20
 800426c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004270:	e853 3f00 	ldrex	r3, [r3]
 8004274:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800427c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3314      	adds	r3, #20
 8004286:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800428a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800428c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004290:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e3      	bne.n	8004266 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	330c      	adds	r3, #12
 80042b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042be:	f023 0310 	bic.w	r3, r3, #16
 80042c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	330c      	adds	r3, #12
 80042cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80042d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80042d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e3      	bne.n	80042ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fd ff68 	bl	80021be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	4619      	mov	r1, r3
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f8b6 	bl	8004470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004304:	e099      	b.n	800443a <HAL_UART_IRQHandler+0x50e>
 8004306:	bf00      	nop
 8004308:	0800469f 	.word	0x0800469f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004314:	b29b      	uxth	r3, r3
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 808b 	beq.w	800443e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8086 	beq.w	800443e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	330c      	adds	r3, #12
 8004338:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004344:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004348:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	330c      	adds	r3, #12
 8004352:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004356:	647a      	str	r2, [r7, #68]	; 0x44
 8004358:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800435c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800435e:	e841 2300 	strex	r3, r2, [r1]
 8004362:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1e3      	bne.n	8004332 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3314      	adds	r3, #20
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	623b      	str	r3, [r7, #32]
   return(result);
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3314      	adds	r3, #20
 800438a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800438e:	633a      	str	r2, [r7, #48]	; 0x30
 8004390:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e3      	bne.n	800436a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	330c      	adds	r3, #12
 80043b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	e853 3f00 	ldrex	r3, [r3]
 80043be:	60fb      	str	r3, [r7, #12]
   return(result);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f023 0310 	bic.w	r3, r3, #16
 80043c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	330c      	adds	r3, #12
 80043d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043d4:	61fa      	str	r2, [r7, #28]
 80043d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	69b9      	ldr	r1, [r7, #24]
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	617b      	str	r3, [r7, #20]
   return(result);
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e3      	bne.n	80043b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043ec:	4619      	mov	r1, r3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f83e 	bl	8004470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043f4:	e023      	b.n	800443e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <HAL_UART_IRQHandler+0x4ea>
 8004402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f959 	bl	80046c6 <UART_Transmit_IT>
    return;
 8004414:	e014      	b.n	8004440 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00e      	beq.n	8004440 <HAL_UART_IRQHandler+0x514>
 8004422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d008      	beq.n	8004440 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f999 	bl	8004766 <UART_EndTransmit_IT>
    return;
 8004434:	e004      	b.n	8004440 <HAL_UART_IRQHandler+0x514>
    return;
 8004436:	bf00      	nop
 8004438:	e002      	b.n	8004440 <HAL_UART_IRQHandler+0x514>
      return;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <HAL_UART_IRQHandler+0x514>
      return;
 800443e:	bf00      	nop
  }
}
 8004440:	37e8      	adds	r7, #232	; 0xe8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop

08004448 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b090      	sub	sp, #64	; 0x40
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	4613      	mov	r3, r2
 8004496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004498:	e050      	b.n	800453c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a0:	d04c      	beq.n	800453c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d007      	beq.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80044a8:	f7fd fd48 	bl	8001f3c <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d241      	bcs.n	800453c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	330c      	adds	r3, #12
 80044be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044d8:	637a      	str	r2, [r7, #52]	; 0x34
 80044da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e5      	bne.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3314      	adds	r3, #20
 80044f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	613b      	str	r3, [r7, #16]
   return(result);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	63bb      	str	r3, [r7, #56]	; 0x38
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3314      	adds	r3, #20
 800450a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800450c:	623a      	str	r2, [r7, #32]
 800450e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	69f9      	ldr	r1, [r7, #28]
 8004512:	6a3a      	ldr	r2, [r7, #32]
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	61bb      	str	r3, [r7, #24]
   return(result);
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e5      	bne.n	80044ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e00f      	b.n	800455c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	4013      	ands	r3, r2
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	429a      	cmp	r2, r3
 800454a:	bf0c      	ite	eq
 800454c:	2301      	moveq	r3, #1
 800454e:	2300      	movne	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	461a      	mov	r2, r3
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	429a      	cmp	r2, r3
 8004558:	d09f      	beq.n	800449a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3740      	adds	r7, #64	; 0x40
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	4613      	mov	r3, r2
 8004570:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	88fa      	ldrh	r2, [r7, #6]
 800457c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	88fa      	ldrh	r2, [r7, #6]
 8004582:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2222      	movs	r2, #34	; 0x22
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045a8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695a      	ldr	r2, [r3, #20]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0201 	orr.w	r2, r2, #1
 80045b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0220 	orr.w	r2, r2, #32
 80045c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045d8:	b480      	push	{r7}
 80045da:	b095      	sub	sp, #84	; 0x54
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	330c      	adds	r3, #12
 80045fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004600:	643a      	str	r2, [r7, #64]	; 0x40
 8004602:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004608:	e841 2300 	strex	r3, r2, [r1]
 800460c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e5      	bne.n	80045e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3314      	adds	r3, #20
 800461a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	e853 3f00 	ldrex	r3, [r3]
 8004622:	61fb      	str	r3, [r7, #28]
   return(result);
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f023 0301 	bic.w	r3, r3, #1
 800462a:	64bb      	str	r3, [r7, #72]	; 0x48
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3314      	adds	r3, #20
 8004632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004634:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800463a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e5      	bne.n	8004614 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	2b01      	cmp	r3, #1
 800464e:	d119      	bne.n	8004684 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	e853 3f00 	ldrex	r3, [r3]
 800465e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f023 0310 	bic.w	r3, r3, #16
 8004666:	647b      	str	r3, [r7, #68]	; 0x44
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	330c      	adds	r3, #12
 800466e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004670:	61ba      	str	r2, [r7, #24]
 8004672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	6979      	ldr	r1, [r7, #20]
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	e841 2300 	strex	r3, r2, [r1]
 800467c:	613b      	str	r3, [r7, #16]
   return(result);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e5      	bne.n	8004650 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004692:	bf00      	nop
 8004694:	3754      	adds	r7, #84	; 0x54
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f7ff fecf 	bl	800445c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046be:	bf00      	nop
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b085      	sub	sp, #20
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b21      	cmp	r3, #33	; 0x21
 80046d8:	d13e      	bne.n	8004758 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e2:	d114      	bne.n	800470e <UART_Transmit_IT+0x48>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d110      	bne.n	800470e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004700:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	1c9a      	adds	r2, r3, #2
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	621a      	str	r2, [r3, #32]
 800470c:	e008      	b.n	8004720 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	1c59      	adds	r1, r3, #1
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6211      	str	r1, [r2, #32]
 8004718:	781a      	ldrb	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004724:	b29b      	uxth	r3, r3
 8004726:	3b01      	subs	r3, #1
 8004728:	b29b      	uxth	r3, r3
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	4619      	mov	r1, r3
 800472e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10f      	bne.n	8004754 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004742:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004752:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	e000      	b.n	800475a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004758:	2302      	movs	r3, #2
  }
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800477c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff fe5e 	bl	8004448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b08c      	sub	sp, #48	; 0x30
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b22      	cmp	r3, #34	; 0x22
 80047a8:	f040 80ab 	bne.w	8004902 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b4:	d117      	bne.n	80047e6 <UART_Receive_IT+0x50>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d113      	bne.n	80047e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047be:	2300      	movs	r3, #0
 80047c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	1c9a      	adds	r2, r3, #2
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	629a      	str	r2, [r3, #40]	; 0x28
 80047e4:	e026      	b.n	8004834 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f8:	d007      	beq.n	800480a <UART_Receive_IT+0x74>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <UART_Receive_IT+0x82>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	b2da      	uxtb	r2, r3
 8004812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	e008      	b.n	800482a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004824:	b2da      	uxtb	r2, r3
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004828:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004838:	b29b      	uxth	r3, r3
 800483a:	3b01      	subs	r3, #1
 800483c:	b29b      	uxth	r3, r3
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	4619      	mov	r1, r3
 8004842:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004844:	2b00      	cmp	r3, #0
 8004846:	d15a      	bne.n	80048fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0220 	bic.w	r2, r2, #32
 8004856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004866:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	2b01      	cmp	r3, #1
 8004886:	d135      	bne.n	80048f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	330c      	adds	r3, #12
 8004894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	613b      	str	r3, [r7, #16]
   return(result);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f023 0310 	bic.w	r3, r3, #16
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	330c      	adds	r3, #12
 80048ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ae:	623a      	str	r2, [r7, #32]
 80048b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	69f9      	ldr	r1, [r7, #28]
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	e841 2300 	strex	r3, r2, [r1]
 80048ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1e5      	bne.n	800488e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d10a      	bne.n	80048e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff fdbf 	bl	8004470 <HAL_UARTEx_RxEventCallback>
 80048f2:	e002      	b.n	80048fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f9d1 	bl	8004c9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e002      	b.n	8004904 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	e000      	b.n	8004904 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004902:	2302      	movs	r3, #2
  }
}
 8004904:	4618      	mov	r0, r3
 8004906:	3730      	adds	r7, #48	; 0x30
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800490c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004910:	b09f      	sub	sp, #124	; 0x7c
 8004912:	af00      	add	r7, sp, #0
 8004914:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004922:	68d9      	ldr	r1, [r3, #12]
 8004924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	ea40 0301 	orr.w	r3, r0, r1
 800492c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800492e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	431a      	orrs	r2, r3
 8004938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	431a      	orrs	r2, r3
 800493e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	4313      	orrs	r3, r2
 8004944:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004950:	f021 010c 	bic.w	r1, r1, #12
 8004954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800495a:	430b      	orrs	r3, r1
 800495c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800495e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496a:	6999      	ldr	r1, [r3, #24]
 800496c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	ea40 0301 	orr.w	r3, r0, r1
 8004974:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	4bc5      	ldr	r3, [pc, #788]	; (8004c90 <UART_SetConfig+0x384>)
 800497c:	429a      	cmp	r2, r3
 800497e:	d004      	beq.n	800498a <UART_SetConfig+0x7e>
 8004980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	4bc3      	ldr	r3, [pc, #780]	; (8004c94 <UART_SetConfig+0x388>)
 8004986:	429a      	cmp	r2, r3
 8004988:	d103      	bne.n	8004992 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800498a:	f7fe fccd 	bl	8003328 <HAL_RCC_GetPCLK2Freq>
 800498e:	6778      	str	r0, [r7, #116]	; 0x74
 8004990:	e002      	b.n	8004998 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004992:	f7fe fcb5 	bl	8003300 <HAL_RCC_GetPCLK1Freq>
 8004996:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a0:	f040 80b6 	bne.w	8004b10 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049a6:	461c      	mov	r4, r3
 80049a8:	f04f 0500 	mov.w	r5, #0
 80049ac:	4622      	mov	r2, r4
 80049ae:	462b      	mov	r3, r5
 80049b0:	1891      	adds	r1, r2, r2
 80049b2:	6439      	str	r1, [r7, #64]	; 0x40
 80049b4:	415b      	adcs	r3, r3
 80049b6:	647b      	str	r3, [r7, #68]	; 0x44
 80049b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049bc:	1912      	adds	r2, r2, r4
 80049be:	eb45 0303 	adc.w	r3, r5, r3
 80049c2:	f04f 0000 	mov.w	r0, #0
 80049c6:	f04f 0100 	mov.w	r1, #0
 80049ca:	00d9      	lsls	r1, r3, #3
 80049cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049d0:	00d0      	lsls	r0, r2, #3
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	1911      	adds	r1, r2, r4
 80049d8:	6639      	str	r1, [r7, #96]	; 0x60
 80049da:	416b      	adcs	r3, r5
 80049dc:	667b      	str	r3, [r7, #100]	; 0x64
 80049de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	1891      	adds	r1, r2, r2
 80049ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80049ec:	415b      	adcs	r3, r3
 80049ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80049f8:	f7fc f936 	bl	8000c68 <__aeabi_uldivmod>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4ba5      	ldr	r3, [pc, #660]	; (8004c98 <UART_SetConfig+0x38c>)
 8004a02:	fba3 2302 	umull	r2, r3, r3, r2
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	011e      	lsls	r6, r3, #4
 8004a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a0c:	461c      	mov	r4, r3
 8004a0e:	f04f 0500 	mov.w	r5, #0
 8004a12:	4622      	mov	r2, r4
 8004a14:	462b      	mov	r3, r5
 8004a16:	1891      	adds	r1, r2, r2
 8004a18:	6339      	str	r1, [r7, #48]	; 0x30
 8004a1a:	415b      	adcs	r3, r3
 8004a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a22:	1912      	adds	r2, r2, r4
 8004a24:	eb45 0303 	adc.w	r3, r5, r3
 8004a28:	f04f 0000 	mov.w	r0, #0
 8004a2c:	f04f 0100 	mov.w	r1, #0
 8004a30:	00d9      	lsls	r1, r3, #3
 8004a32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a36:	00d0      	lsls	r0, r2, #3
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	1911      	adds	r1, r2, r4
 8004a3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a40:	416b      	adcs	r3, r5
 8004a42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	1891      	adds	r1, r2, r2
 8004a50:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a52:	415b      	adcs	r3, r3
 8004a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004a5e:	f7fc f903 	bl	8000c68 <__aeabi_uldivmod>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	4b8c      	ldr	r3, [pc, #560]	; (8004c98 <UART_SetConfig+0x38c>)
 8004a68:	fba3 1302 	umull	r1, r3, r3, r2
 8004a6c:	095b      	lsrs	r3, r3, #5
 8004a6e:	2164      	movs	r1, #100	; 0x64
 8004a70:	fb01 f303 	mul.w	r3, r1, r3
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	3332      	adds	r3, #50	; 0x32
 8004a7a:	4a87      	ldr	r2, [pc, #540]	; (8004c98 <UART_SetConfig+0x38c>)
 8004a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a80:	095b      	lsrs	r3, r3, #5
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a88:	441e      	add	r6, r3
 8004a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f04f 0100 	mov.w	r1, #0
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	1894      	adds	r4, r2, r2
 8004a98:	623c      	str	r4, [r7, #32]
 8004a9a:	415b      	adcs	r3, r3
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aa2:	1812      	adds	r2, r2, r0
 8004aa4:	eb41 0303 	adc.w	r3, r1, r3
 8004aa8:	f04f 0400 	mov.w	r4, #0
 8004aac:	f04f 0500 	mov.w	r5, #0
 8004ab0:	00dd      	lsls	r5, r3, #3
 8004ab2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ab6:	00d4      	lsls	r4, r2, #3
 8004ab8:	4622      	mov	r2, r4
 8004aba:	462b      	mov	r3, r5
 8004abc:	1814      	adds	r4, r2, r0
 8004abe:	653c      	str	r4, [r7, #80]	; 0x50
 8004ac0:	414b      	adcs	r3, r1
 8004ac2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	1891      	adds	r1, r2, r2
 8004ad0:	61b9      	str	r1, [r7, #24]
 8004ad2:	415b      	adcs	r3, r3
 8004ad4:	61fb      	str	r3, [r7, #28]
 8004ad6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ada:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004ade:	f7fc f8c3 	bl	8000c68 <__aeabi_uldivmod>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	4b6c      	ldr	r3, [pc, #432]	; (8004c98 <UART_SetConfig+0x38c>)
 8004ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8004aec:	095b      	lsrs	r3, r3, #5
 8004aee:	2164      	movs	r1, #100	; 0x64
 8004af0:	fb01 f303 	mul.w	r3, r1, r3
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	3332      	adds	r3, #50	; 0x32
 8004afa:	4a67      	ldr	r2, [pc, #412]	; (8004c98 <UART_SetConfig+0x38c>)
 8004afc:	fba2 2303 	umull	r2, r3, r2, r3
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	f003 0207 	and.w	r2, r3, #7
 8004b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4432      	add	r2, r6
 8004b0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b0e:	e0b9      	b.n	8004c84 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b12:	461c      	mov	r4, r3
 8004b14:	f04f 0500 	mov.w	r5, #0
 8004b18:	4622      	mov	r2, r4
 8004b1a:	462b      	mov	r3, r5
 8004b1c:	1891      	adds	r1, r2, r2
 8004b1e:	6139      	str	r1, [r7, #16]
 8004b20:	415b      	adcs	r3, r3
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b28:	1912      	adds	r2, r2, r4
 8004b2a:	eb45 0303 	adc.w	r3, r5, r3
 8004b2e:	f04f 0000 	mov.w	r0, #0
 8004b32:	f04f 0100 	mov.w	r1, #0
 8004b36:	00d9      	lsls	r1, r3, #3
 8004b38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b3c:	00d0      	lsls	r0, r2, #3
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	eb12 0804 	adds.w	r8, r2, r4
 8004b46:	eb43 0905 	adc.w	r9, r3, r5
 8004b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f04f 0100 	mov.w	r1, #0
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	008b      	lsls	r3, r1, #2
 8004b5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b62:	0082      	lsls	r2, r0, #2
 8004b64:	4640      	mov	r0, r8
 8004b66:	4649      	mov	r1, r9
 8004b68:	f7fc f87e 	bl	8000c68 <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4b49      	ldr	r3, [pc, #292]	; (8004c98 <UART_SetConfig+0x38c>)
 8004b72:	fba3 2302 	umull	r2, r3, r3, r2
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	011e      	lsls	r6, r3, #4
 8004b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f04f 0100 	mov.w	r1, #0
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	1894      	adds	r4, r2, r2
 8004b88:	60bc      	str	r4, [r7, #8]
 8004b8a:	415b      	adcs	r3, r3
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b92:	1812      	adds	r2, r2, r0
 8004b94:	eb41 0303 	adc.w	r3, r1, r3
 8004b98:	f04f 0400 	mov.w	r4, #0
 8004b9c:	f04f 0500 	mov.w	r5, #0
 8004ba0:	00dd      	lsls	r5, r3, #3
 8004ba2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ba6:	00d4      	lsls	r4, r2, #3
 8004ba8:	4622      	mov	r2, r4
 8004baa:	462b      	mov	r3, r5
 8004bac:	1814      	adds	r4, r2, r0
 8004bae:	64bc      	str	r4, [r7, #72]	; 0x48
 8004bb0:	414b      	adcs	r3, r1
 8004bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f04f 0100 	mov.w	r1, #0
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	008b      	lsls	r3, r1, #2
 8004bc8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bcc:	0082      	lsls	r2, r0, #2
 8004bce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004bd2:	f7fc f849 	bl	8000c68 <__aeabi_uldivmod>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4b2f      	ldr	r3, [pc, #188]	; (8004c98 <UART_SetConfig+0x38c>)
 8004bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	2164      	movs	r1, #100	; 0x64
 8004be4:	fb01 f303 	mul.w	r3, r1, r3
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	3332      	adds	r3, #50	; 0x32
 8004bee:	4a2a      	ldr	r2, [pc, #168]	; (8004c98 <UART_SetConfig+0x38c>)
 8004bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf4:	095b      	lsrs	r3, r3, #5
 8004bf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bfa:	441e      	add	r6, r3
 8004bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f04f 0100 	mov.w	r1, #0
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	1894      	adds	r4, r2, r2
 8004c0a:	603c      	str	r4, [r7, #0]
 8004c0c:	415b      	adcs	r3, r3
 8004c0e:	607b      	str	r3, [r7, #4]
 8004c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c14:	1812      	adds	r2, r2, r0
 8004c16:	eb41 0303 	adc.w	r3, r1, r3
 8004c1a:	f04f 0400 	mov.w	r4, #0
 8004c1e:	f04f 0500 	mov.w	r5, #0
 8004c22:	00dd      	lsls	r5, r3, #3
 8004c24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c28:	00d4      	lsls	r4, r2, #3
 8004c2a:	4622      	mov	r2, r4
 8004c2c:	462b      	mov	r3, r5
 8004c2e:	eb12 0a00 	adds.w	sl, r2, r0
 8004c32:	eb43 0b01 	adc.w	fp, r3, r1
 8004c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f04f 0100 	mov.w	r1, #0
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	008b      	lsls	r3, r1, #2
 8004c4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c4e:	0082      	lsls	r2, r0, #2
 8004c50:	4650      	mov	r0, sl
 8004c52:	4659      	mov	r1, fp
 8004c54:	f7fc f808 	bl	8000c68 <__aeabi_uldivmod>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4b0e      	ldr	r3, [pc, #56]	; (8004c98 <UART_SetConfig+0x38c>)
 8004c5e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c62:	095b      	lsrs	r3, r3, #5
 8004c64:	2164      	movs	r1, #100	; 0x64
 8004c66:	fb01 f303 	mul.w	r3, r1, r3
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	3332      	adds	r3, #50	; 0x32
 8004c70:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <UART_SetConfig+0x38c>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	f003 020f 	and.w	r2, r3, #15
 8004c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4432      	add	r2, r6
 8004c82:	609a      	str	r2, [r3, #8]
}
 8004c84:	bf00      	nop
 8004c86:	377c      	adds	r7, #124	; 0x7c
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c8e:	bf00      	nop
 8004c90:	40011000 	.word	0x40011000
 8004c94:	40011400 	.word	0x40011400
 8004c98:	51eb851f 	.word	0x51eb851f

08004c9c <HAL_UART_RxCpltCallback>:
		HAL_UART_Transmit(&huart5, (uint8_t *)data_arr, sizeof(data_arr), 100);
		HAL_Delay(1500);
	}
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART5)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a08      	ldr	r2, [pc, #32]	; (8004ccc <HAL_UART_RxCpltCallback+0x30>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d10a      	bne.n	8004cc4 <HAL_UART_RxCpltCallback+0x28>
	{
		HAL_UART_Transmit(&huart3, pc_res_packet, sizeof(pc_res_packet), 100);
 8004cae:	2364      	movs	r3, #100	; 0x64
 8004cb0:	2205      	movs	r2, #5
 8004cb2:	4907      	ldr	r1, [pc, #28]	; (8004cd0 <HAL_UART_RxCpltCallback+0x34>)
 8004cb4:	4807      	ldr	r0, [pc, #28]	; (8004cd4 <HAL_UART_RxCpltCallback+0x38>)
 8004cb6:	f7ff f876 	bl	8003da6 <HAL_UART_Transmit>

	    HAL_UART_Receive_IT(&huart5, pc_res_packet, sizeof(pc_res_packet));
 8004cba:	2205      	movs	r2, #5
 8004cbc:	4904      	ldr	r1, [pc, #16]	; (8004cd0 <HAL_UART_RxCpltCallback+0x34>)
 8004cbe:	4806      	ldr	r0, [pc, #24]	; (8004cd8 <HAL_UART_RxCpltCallback+0x3c>)
 8004cc0:	f7ff f903 	bl	8003eca <HAL_UART_Receive_IT>


	}
}
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40005000 	.word	0x40005000
 8004cd0:	200001fc 	.word	0x200001fc
 8004cd4:	20000210 	.word	0x20000210
 8004cd8:	20000360 	.word	0x20000360

08004cdc <initHx711>:
#include "User_hx711.h"
#include "hx711Config.h"
#include "hx711.h"

void initHx711(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08e      	sub	sp, #56	; 0x38
 8004ce0:	af02      	add	r7, sp, #8
	// load cell
	// hx711
	hx711_t loadcellA, loadcellB;
	float weight;

	hx711_init(&loadcellA,  PD01_sck_GPIO_Port, PD01_sck_Pin,  PD01_dout_GPIO_Port, PD01_dout_Pin);
 8004ce2:	f107 0018 	add.w	r0, r7, #24
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	4b12      	ldr	r3, [pc, #72]	; (8004d34 <initHx711+0x58>)
 8004cec:	2204      	movs	r2, #4
 8004cee:	4912      	ldr	r1, [pc, #72]	; (8004d38 <initHx711+0x5c>)
 8004cf0:	f000 f85b 	bl	8004daa <hx711_init>
	hx711_coef_set(&loadcellA, 345); // read afer calibration
 8004cf4:	f107 0318 	add.w	r3, r7, #24
 8004cf8:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8004d3c <initHx711+0x60>
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 f9ad 	bl	800505c <hx711_coef_set>
	hx711_tare(&loadcellA, 10);
 8004d02:	f107 0318 	add.w	r3, r7, #24
 8004d06:	210a      	movs	r1, #10
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 f91c 	bl	8004f46 <hx711_tare>
//	hx711_init(&loadcellB,  PD01_sck_GPIO_Port, PD01_sck_Pin,  PD01_dout_GPIO_Port, PD01_dout_Pin);
//	hx711_coef_set(&loadcellA, 354.5); // read afer calibration
//	hx711_tare(&loadcellB, 10);

	while(1){
		printf("A:%d g\n", (int)(hx711_weight(&loadcellA, 10)));
 8004d0e:	f107 0318 	add.w	r3, r7, #24
 8004d12:	210a      	movs	r1, #10
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 f952 	bl	8004fbe <hx711_weight>
 8004d1a:	eef0 7a40 	vmov.f32	s15, s0
 8004d1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d22:	ee17 1a90 	vmov	r1, s15
 8004d26:	4806      	ldr	r0, [pc, #24]	; (8004d40 <initHx711+0x64>)
 8004d28:	f000 fef6 	bl	8005b18 <iprintf>
		HAL_Delay(100);
 8004d2c:	2064      	movs	r0, #100	; 0x64
 8004d2e:	f7fd f911 	bl	8001f54 <HAL_Delay>
		printf("A:%d g\n", (int)(hx711_weight(&loadcellA, 10)));
 8004d32:	e7ec      	b.n	8004d0e <initHx711+0x32>
 8004d34:	40020400 	.word	0x40020400
 8004d38:	40020800 	.word	0x40020800
 8004d3c:	43ac8000 	.word	0x43ac8000
 8004d40:	08007bc4 	.word	0x08007bc4

08004d44 <hx711_delay_us>:
#define hx711_delay(x)    HAL_Delay(x)
#endif

//#############################################################################################
void hx711_delay_us(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
  uint32_t delay = _HX711_DELAY_US_LOOP;
 8004d4a:	2304      	movs	r3, #4
 8004d4c:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 8004d4e:	e002      	b.n	8004d56 <hx711_delay_us+0x12>
  {
    delay--;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3b01      	subs	r3, #1
 8004d54:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1f9      	bne.n	8004d50 <hx711_delay_us+0xc>
//    __nop(); __nop(); __nop(); __nop();
  }
}
 8004d5c:	bf00      	nop
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b082      	sub	sp, #8
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8004d72:	e002      	b.n	8004d7a <hx711_lock+0x10>
    hx711_delay(1);
 8004d74:	2001      	movs	r0, #1
 8004d76:	f7fd f8ed 	bl	8001f54 <HAL_Delay>
  while (hx711->lock)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	7d1b      	ldrb	r3, [r3, #20]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f8      	bne.n	8004d74 <hx711_lock+0xa>
  hx711->lock = 1;      
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	751a      	strb	r2, [r3, #20]
}
 8004d88:	bf00      	nop
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	751a      	strb	r2, [r3, #20]
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b08a      	sub	sp, #40	; 0x28
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	60f8      	str	r0, [r7, #12]
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	603b      	str	r3, [r7, #0]
 8004db6:	4613      	mov	r3, r2
 8004db8:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f7ff ffd5 	bl	8004d6a <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	88fa      	ldrh	r2, [r7, #6]
 8004dca:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004dd6:	815a      	strh	r2, [r3, #10]
  
  GPIO_InitTypeDef  gpio = {0};
 8004dd8:	f107 0314 	add.w	r3, r7, #20
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	605a      	str	r2, [r3, #4]
 8004de2:	609a      	str	r2, [r3, #8]
 8004de4:	60da      	str	r2, [r3, #12]
 8004de6:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8004de8:	2301      	movs	r3, #1
 8004dea:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8004df0:	2302      	movs	r3, #2
 8004df2:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8004df4:	88fb      	ldrh	r3, [r7, #6]
 8004df6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8004df8:	f107 0314 	add.w	r3, r7, #20
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	68b8      	ldr	r0, [r7, #8]
 8004e00:	f7fd fa70 	bl	80022e4 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8004e10:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004e12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8004e14:	f107 0314 	add.w	r3, r7, #20
 8004e18:	4619      	mov	r1, r3
 8004e1a:	6838      	ldr	r0, [r7, #0]
 8004e1c:	f7fd fa62 	bl	80022e4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	891b      	ldrh	r3, [r3, #8]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	f7fd fc1e 	bl	800266c <HAL_GPIO_WritePin>
  hx711_delay(10);
 8004e30:	200a      	movs	r0, #10
 8004e32:	f7fd f88f 	bl	8001f54 <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	891b      	ldrh	r3, [r3, #8]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	4619      	mov	r1, r3
 8004e42:	f7fd fc13 	bl	800266c <HAL_GPIO_WritePin>
  hx711_delay(10);  
 8004e46:	200a      	movs	r0, #10
 8004e48:	f7fd f884 	bl	8001f54 <HAL_Delay>
  hx711_value(hx711);
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f80a 	bl	8004e66 <hx711_value>
  hx711_value(hx711);
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 f807 	bl	8004e66 <hx711_value>
  hx711_unlock(hx711); 
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f7ff ff99 	bl	8004d90 <hx711_unlock>
}
 8004e5e:	bf00      	nop
 8004e60:	3728      	adds	r7, #40	; 0x28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b086      	sub	sp, #24
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8004e72:	f7fd f863 	bl	8001f3c <HAL_GetTick>
 8004e76:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8004e78:	e00b      	b.n	8004e92 <hx711_value+0x2c>
  {
    hx711_delay(1);
 8004e7a:	2001      	movs	r0, #1
 8004e7c:	f7fd f86a 	bl	8001f54 <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 8004e80:	f7fd f85c 	bl	8001f3c <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b96      	cmp	r3, #150	; 0x96
 8004e8c:	d901      	bls.n	8004e92 <hx711_value+0x2c>
      return 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	e055      	b.n	8004f3e <hx711_value+0xd8>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	895b      	ldrh	r3, [r3, #10]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	f7fd fbcd 	bl	800263c <HAL_GPIO_ReadPin>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d0e8      	beq.n	8004e7a <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	74fb      	strb	r3, [r7, #19]
 8004eac:	e02a      	b.n	8004f04 <hx711_value+0x9e>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	891b      	ldrh	r3, [r3, #8]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	4619      	mov	r1, r3
 8004eba:	f7fd fbd7 	bl	800266c <HAL_GPIO_WritePin>
    hx711_delay_us();
 8004ebe:	f7ff ff41 	bl	8004d44 <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	891b      	ldrh	r3, [r3, #8]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	4619      	mov	r1, r3
 8004ece:	f7fd fbcd 	bl	800266c <HAL_GPIO_WritePin>
    hx711_delay_us();
 8004ed2:	f7ff ff37 	bl	8004d44 <hx711_delay_us>
    data = data << 1;    
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	895b      	ldrh	r3, [r3, #10]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f7fd fba8 	bl	800263c <HAL_GPIO_ReadPin>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d102      	bne.n	8004ef8 <hx711_value+0x92>
      data ++;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 8004ef8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	3301      	adds	r3, #1
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	74fb      	strb	r3, [r7, #19]
 8004f04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f08:	2b17      	cmp	r3, #23
 8004f0a:	ddd0      	ble.n	8004eae <hx711_value+0x48>
  }
  data = data ^ 0x800000; 
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8004f12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6818      	ldr	r0, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	891b      	ldrh	r3, [r3, #8]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	4619      	mov	r1, r3
 8004f20:	f7fd fba4 	bl	800266c <HAL_GPIO_WritePin>
  hx711_delay_us();
 8004f24:	f7ff ff0e 	bl	8004d44 <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6818      	ldr	r0, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	891b      	ldrh	r3, [r3, #8]
 8004f30:	2200      	movs	r2, #0
 8004f32:	4619      	mov	r1, r3
 8004f34:	f7fd fb9a 	bl	800266c <HAL_GPIO_WritePin>
  hx711_delay_us();
 8004f38:	f7ff ff04 	bl	8004d44 <hx711_delay_us>
  return data;    
 8004f3c:	697b      	ldr	r3, [r7, #20]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <hx711_tare>:
  hx711_unlock(hx711);
  return answer;
}
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample)
{
 8004f46:	b5b0      	push	{r4, r5, r7, lr}
 8004f48:	b086      	sub	sp, #24
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	460b      	mov	r3, r1
 8004f50:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff ff09 	bl	8004d6a <hx711_lock>
  int64_t  ave = 0;
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 8004f64:	2300      	movs	r3, #0
 8004f66:	81fb      	strh	r3, [r7, #14]
 8004f68:	e013      	b.n	8004f92 <hx711_tare+0x4c>
  {
    ave += hx711_value(hx711);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff ff7b 	bl	8004e66 <hx711_value>
 8004f70:	4603      	mov	r3, r0
 8004f72:	461a      	mov	r2, r3
 8004f74:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8004f78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f7c:	1884      	adds	r4, r0, r2
 8004f7e:	eb41 0503 	adc.w	r5, r1, r3
 8004f82:	e9c7 4504 	strd	r4, r5, [r7, #16]
    hx711_delay(5);
 8004f86:	2005      	movs	r0, #5
 8004f88:	f7fc ffe4 	bl	8001f54 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8004f8c:	89fb      	ldrh	r3, [r7, #14]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	81fb      	strh	r3, [r7, #14]
 8004f92:	89fa      	ldrh	r2, [r7, #14]
 8004f94:	887b      	ldrh	r3, [r7, #2]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d3e7      	bcc.n	8004f6a <hx711_tare+0x24>
  }
  hx711->offset = (int32_t)(ave / sample);
 8004f9a:	887a      	ldrh	r2, [r7, #2]
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004fa4:	f7fb fe10 	bl	8000bc8 <__aeabi_ldivmod>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60da      	str	r2, [r3, #12]
  hx711_unlock(hx711);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff feed 	bl	8004d90 <hx711_unlock>
}
 8004fb6:	bf00      	nop
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bdb0      	pop	{r4, r5, r7, pc}

08004fbe <hx711_weight>:
  hx711->coef = (load_raw - noload_raw) / scale;  
  hx711_unlock(hx711);
}
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 8004fbe:	b5b0      	push	{r4, r5, r7, lr}
 8004fc0:	b088      	sub	sp, #32
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff fecd 	bl	8004d6a <hx711_lock>
  int64_t  ave = 0;
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	82fb      	strh	r3, [r7, #22]
 8004fe0:	e013      	b.n	800500a <hx711_weight+0x4c>
  {
    ave += hx711_value(hx711);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7ff ff3f 	bl	8004e66 <hx711_value>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	461a      	mov	r2, r3
 8004fec:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8004ff0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004ff4:	1884      	adds	r4, r0, r2
 8004ff6:	eb41 0503 	adc.w	r5, r1, r3
 8004ffa:	e9c7 4506 	strd	r4, r5, [r7, #24]
    hx711_delay(5);
 8004ffe:	2005      	movs	r0, #5
 8005000:	f7fc ffa8 	bl	8001f54 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8005004:	8afb      	ldrh	r3, [r7, #22]
 8005006:	3301      	adds	r3, #1
 8005008:	82fb      	strh	r3, [r7, #22]
 800500a:	8afa      	ldrh	r2, [r7, #22]
 800500c:	887b      	ldrh	r3, [r7, #2]
 800500e:	429a      	cmp	r2, r3
 8005010:	d3e7      	bcc.n	8004fe2 <hx711_weight+0x24>
  }
  int32_t data = (int32_t)(ave / sample);
 8005012:	887a      	ldrh	r2, [r7, #2]
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800501c:	f7fb fdd4 	bl	8000bc8 <__aeabi_ldivmod>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4613      	mov	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
  float answer =  (data - hx711->offset) / hx711->coef;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	ee07 3a90 	vmov	s15, r3
 8005034:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	ed93 7a04 	vldr	s14, [r3, #16]
 800503e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005042:	edc7 7a03 	vstr	s15, [r7, #12]
  hx711_unlock(hx711);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7ff fea2 	bl	8004d90 <hx711_unlock>
  return answer;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	ee07 3a90 	vmov	s15, r3
}
 8005052:	eeb0 0a67 	vmov.f32	s0, s15
 8005056:	3720      	adds	r7, #32
 8005058:	46bd      	mov	sp, r7
 800505a:	bdb0      	pop	{r4, r5, r7, pc}

0800505c <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coef)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	ed87 0a00 	vstr	s0, [r7]
  hx711->coef = coef;  
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	611a      	str	r2, [r3, #16]
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
	...

0800507c <__errno>:
 800507c:	4b01      	ldr	r3, [pc, #4]	; (8005084 <__errno+0x8>)
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	2000000c 	.word	0x2000000c

08005088 <__libc_init_array>:
 8005088:	b570      	push	{r4, r5, r6, lr}
 800508a:	4d0d      	ldr	r5, [pc, #52]	; (80050c0 <__libc_init_array+0x38>)
 800508c:	4c0d      	ldr	r4, [pc, #52]	; (80050c4 <__libc_init_array+0x3c>)
 800508e:	1b64      	subs	r4, r4, r5
 8005090:	10a4      	asrs	r4, r4, #2
 8005092:	2600      	movs	r6, #0
 8005094:	42a6      	cmp	r6, r4
 8005096:	d109      	bne.n	80050ac <__libc_init_array+0x24>
 8005098:	4d0b      	ldr	r5, [pc, #44]	; (80050c8 <__libc_init_array+0x40>)
 800509a:	4c0c      	ldr	r4, [pc, #48]	; (80050cc <__libc_init_array+0x44>)
 800509c:	f002 fd7e 	bl	8007b9c <_init>
 80050a0:	1b64      	subs	r4, r4, r5
 80050a2:	10a4      	asrs	r4, r4, #2
 80050a4:	2600      	movs	r6, #0
 80050a6:	42a6      	cmp	r6, r4
 80050a8:	d105      	bne.n	80050b6 <__libc_init_array+0x2e>
 80050aa:	bd70      	pop	{r4, r5, r6, pc}
 80050ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b0:	4798      	blx	r3
 80050b2:	3601      	adds	r6, #1
 80050b4:	e7ee      	b.n	8005094 <__libc_init_array+0xc>
 80050b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ba:	4798      	blx	r3
 80050bc:	3601      	adds	r6, #1
 80050be:	e7f2      	b.n	80050a6 <__libc_init_array+0x1e>
 80050c0:	08007fdc 	.word	0x08007fdc
 80050c4:	08007fdc 	.word	0x08007fdc
 80050c8:	08007fdc 	.word	0x08007fdc
 80050cc:	08007fe0 	.word	0x08007fe0

080050d0 <malloc>:
 80050d0:	4b02      	ldr	r3, [pc, #8]	; (80050dc <malloc+0xc>)
 80050d2:	4601      	mov	r1, r0
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	f000 b85b 	b.w	8005190 <_malloc_r>
 80050da:	bf00      	nop
 80050dc:	2000000c 	.word	0x2000000c

080050e0 <memset>:
 80050e0:	4402      	add	r2, r0
 80050e2:	4603      	mov	r3, r0
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d100      	bne.n	80050ea <memset+0xa>
 80050e8:	4770      	bx	lr
 80050ea:	f803 1b01 	strb.w	r1, [r3], #1
 80050ee:	e7f9      	b.n	80050e4 <memset+0x4>

080050f0 <_free_r>:
 80050f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050f2:	2900      	cmp	r1, #0
 80050f4:	d048      	beq.n	8005188 <_free_r+0x98>
 80050f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050fa:	9001      	str	r0, [sp, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f1a1 0404 	sub.w	r4, r1, #4
 8005102:	bfb8      	it	lt
 8005104:	18e4      	addlt	r4, r4, r3
 8005106:	f001 ff11 	bl	8006f2c <__malloc_lock>
 800510a:	4a20      	ldr	r2, [pc, #128]	; (800518c <_free_r+0x9c>)
 800510c:	9801      	ldr	r0, [sp, #4]
 800510e:	6813      	ldr	r3, [r2, #0]
 8005110:	4615      	mov	r5, r2
 8005112:	b933      	cbnz	r3, 8005122 <_free_r+0x32>
 8005114:	6063      	str	r3, [r4, #4]
 8005116:	6014      	str	r4, [r2, #0]
 8005118:	b003      	add	sp, #12
 800511a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800511e:	f001 bf0b 	b.w	8006f38 <__malloc_unlock>
 8005122:	42a3      	cmp	r3, r4
 8005124:	d90b      	bls.n	800513e <_free_r+0x4e>
 8005126:	6821      	ldr	r1, [r4, #0]
 8005128:	1862      	adds	r2, r4, r1
 800512a:	4293      	cmp	r3, r2
 800512c:	bf04      	itt	eq
 800512e:	681a      	ldreq	r2, [r3, #0]
 8005130:	685b      	ldreq	r3, [r3, #4]
 8005132:	6063      	str	r3, [r4, #4]
 8005134:	bf04      	itt	eq
 8005136:	1852      	addeq	r2, r2, r1
 8005138:	6022      	streq	r2, [r4, #0]
 800513a:	602c      	str	r4, [r5, #0]
 800513c:	e7ec      	b.n	8005118 <_free_r+0x28>
 800513e:	461a      	mov	r2, r3
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	b10b      	cbz	r3, 8005148 <_free_r+0x58>
 8005144:	42a3      	cmp	r3, r4
 8005146:	d9fa      	bls.n	800513e <_free_r+0x4e>
 8005148:	6811      	ldr	r1, [r2, #0]
 800514a:	1855      	adds	r5, r2, r1
 800514c:	42a5      	cmp	r5, r4
 800514e:	d10b      	bne.n	8005168 <_free_r+0x78>
 8005150:	6824      	ldr	r4, [r4, #0]
 8005152:	4421      	add	r1, r4
 8005154:	1854      	adds	r4, r2, r1
 8005156:	42a3      	cmp	r3, r4
 8005158:	6011      	str	r1, [r2, #0]
 800515a:	d1dd      	bne.n	8005118 <_free_r+0x28>
 800515c:	681c      	ldr	r4, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	6053      	str	r3, [r2, #4]
 8005162:	4421      	add	r1, r4
 8005164:	6011      	str	r1, [r2, #0]
 8005166:	e7d7      	b.n	8005118 <_free_r+0x28>
 8005168:	d902      	bls.n	8005170 <_free_r+0x80>
 800516a:	230c      	movs	r3, #12
 800516c:	6003      	str	r3, [r0, #0]
 800516e:	e7d3      	b.n	8005118 <_free_r+0x28>
 8005170:	6825      	ldr	r5, [r4, #0]
 8005172:	1961      	adds	r1, r4, r5
 8005174:	428b      	cmp	r3, r1
 8005176:	bf04      	itt	eq
 8005178:	6819      	ldreq	r1, [r3, #0]
 800517a:	685b      	ldreq	r3, [r3, #4]
 800517c:	6063      	str	r3, [r4, #4]
 800517e:	bf04      	itt	eq
 8005180:	1949      	addeq	r1, r1, r5
 8005182:	6021      	streq	r1, [r4, #0]
 8005184:	6054      	str	r4, [r2, #4]
 8005186:	e7c7      	b.n	8005118 <_free_r+0x28>
 8005188:	b003      	add	sp, #12
 800518a:	bd30      	pop	{r4, r5, pc}
 800518c:	20000204 	.word	0x20000204

08005190 <_malloc_r>:
 8005190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005192:	1ccd      	adds	r5, r1, #3
 8005194:	f025 0503 	bic.w	r5, r5, #3
 8005198:	3508      	adds	r5, #8
 800519a:	2d0c      	cmp	r5, #12
 800519c:	bf38      	it	cc
 800519e:	250c      	movcc	r5, #12
 80051a0:	2d00      	cmp	r5, #0
 80051a2:	4606      	mov	r6, r0
 80051a4:	db01      	blt.n	80051aa <_malloc_r+0x1a>
 80051a6:	42a9      	cmp	r1, r5
 80051a8:	d903      	bls.n	80051b2 <_malloc_r+0x22>
 80051aa:	230c      	movs	r3, #12
 80051ac:	6033      	str	r3, [r6, #0]
 80051ae:	2000      	movs	r0, #0
 80051b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051b2:	f001 febb 	bl	8006f2c <__malloc_lock>
 80051b6:	4921      	ldr	r1, [pc, #132]	; (800523c <_malloc_r+0xac>)
 80051b8:	680a      	ldr	r2, [r1, #0]
 80051ba:	4614      	mov	r4, r2
 80051bc:	b99c      	cbnz	r4, 80051e6 <_malloc_r+0x56>
 80051be:	4f20      	ldr	r7, [pc, #128]	; (8005240 <_malloc_r+0xb0>)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	b923      	cbnz	r3, 80051ce <_malloc_r+0x3e>
 80051c4:	4621      	mov	r1, r4
 80051c6:	4630      	mov	r0, r6
 80051c8:	f000 fd34 	bl	8005c34 <_sbrk_r>
 80051cc:	6038      	str	r0, [r7, #0]
 80051ce:	4629      	mov	r1, r5
 80051d0:	4630      	mov	r0, r6
 80051d2:	f000 fd2f 	bl	8005c34 <_sbrk_r>
 80051d6:	1c43      	adds	r3, r0, #1
 80051d8:	d123      	bne.n	8005222 <_malloc_r+0x92>
 80051da:	230c      	movs	r3, #12
 80051dc:	6033      	str	r3, [r6, #0]
 80051de:	4630      	mov	r0, r6
 80051e0:	f001 feaa 	bl	8006f38 <__malloc_unlock>
 80051e4:	e7e3      	b.n	80051ae <_malloc_r+0x1e>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	1b5b      	subs	r3, r3, r5
 80051ea:	d417      	bmi.n	800521c <_malloc_r+0x8c>
 80051ec:	2b0b      	cmp	r3, #11
 80051ee:	d903      	bls.n	80051f8 <_malloc_r+0x68>
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	441c      	add	r4, r3
 80051f4:	6025      	str	r5, [r4, #0]
 80051f6:	e004      	b.n	8005202 <_malloc_r+0x72>
 80051f8:	6863      	ldr	r3, [r4, #4]
 80051fa:	42a2      	cmp	r2, r4
 80051fc:	bf0c      	ite	eq
 80051fe:	600b      	streq	r3, [r1, #0]
 8005200:	6053      	strne	r3, [r2, #4]
 8005202:	4630      	mov	r0, r6
 8005204:	f001 fe98 	bl	8006f38 <__malloc_unlock>
 8005208:	f104 000b 	add.w	r0, r4, #11
 800520c:	1d23      	adds	r3, r4, #4
 800520e:	f020 0007 	bic.w	r0, r0, #7
 8005212:	1ac2      	subs	r2, r0, r3
 8005214:	d0cc      	beq.n	80051b0 <_malloc_r+0x20>
 8005216:	1a1b      	subs	r3, r3, r0
 8005218:	50a3      	str	r3, [r4, r2]
 800521a:	e7c9      	b.n	80051b0 <_malloc_r+0x20>
 800521c:	4622      	mov	r2, r4
 800521e:	6864      	ldr	r4, [r4, #4]
 8005220:	e7cc      	b.n	80051bc <_malloc_r+0x2c>
 8005222:	1cc4      	adds	r4, r0, #3
 8005224:	f024 0403 	bic.w	r4, r4, #3
 8005228:	42a0      	cmp	r0, r4
 800522a:	d0e3      	beq.n	80051f4 <_malloc_r+0x64>
 800522c:	1a21      	subs	r1, r4, r0
 800522e:	4630      	mov	r0, r6
 8005230:	f000 fd00 	bl	8005c34 <_sbrk_r>
 8005234:	3001      	adds	r0, #1
 8005236:	d1dd      	bne.n	80051f4 <_malloc_r+0x64>
 8005238:	e7cf      	b.n	80051da <_malloc_r+0x4a>
 800523a:	bf00      	nop
 800523c:	20000204 	.word	0x20000204
 8005240:	20000208 	.word	0x20000208

08005244 <__cvt>:
 8005244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005248:	ec55 4b10 	vmov	r4, r5, d0
 800524c:	2d00      	cmp	r5, #0
 800524e:	460e      	mov	r6, r1
 8005250:	4619      	mov	r1, r3
 8005252:	462b      	mov	r3, r5
 8005254:	bfbb      	ittet	lt
 8005256:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800525a:	461d      	movlt	r5, r3
 800525c:	2300      	movge	r3, #0
 800525e:	232d      	movlt	r3, #45	; 0x2d
 8005260:	700b      	strb	r3, [r1, #0]
 8005262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005264:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005268:	4691      	mov	r9, r2
 800526a:	f023 0820 	bic.w	r8, r3, #32
 800526e:	bfbc      	itt	lt
 8005270:	4622      	movlt	r2, r4
 8005272:	4614      	movlt	r4, r2
 8005274:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005278:	d005      	beq.n	8005286 <__cvt+0x42>
 800527a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800527e:	d100      	bne.n	8005282 <__cvt+0x3e>
 8005280:	3601      	adds	r6, #1
 8005282:	2102      	movs	r1, #2
 8005284:	e000      	b.n	8005288 <__cvt+0x44>
 8005286:	2103      	movs	r1, #3
 8005288:	ab03      	add	r3, sp, #12
 800528a:	9301      	str	r3, [sp, #4]
 800528c:	ab02      	add	r3, sp, #8
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	ec45 4b10 	vmov	d0, r4, r5
 8005294:	4653      	mov	r3, sl
 8005296:	4632      	mov	r2, r6
 8005298:	f000 fe2a 	bl	8005ef0 <_dtoa_r>
 800529c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052a0:	4607      	mov	r7, r0
 80052a2:	d102      	bne.n	80052aa <__cvt+0x66>
 80052a4:	f019 0f01 	tst.w	r9, #1
 80052a8:	d022      	beq.n	80052f0 <__cvt+0xac>
 80052aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052ae:	eb07 0906 	add.w	r9, r7, r6
 80052b2:	d110      	bne.n	80052d6 <__cvt+0x92>
 80052b4:	783b      	ldrb	r3, [r7, #0]
 80052b6:	2b30      	cmp	r3, #48	; 0x30
 80052b8:	d10a      	bne.n	80052d0 <__cvt+0x8c>
 80052ba:	2200      	movs	r2, #0
 80052bc:	2300      	movs	r3, #0
 80052be:	4620      	mov	r0, r4
 80052c0:	4629      	mov	r1, r5
 80052c2:	f7fb fc11 	bl	8000ae8 <__aeabi_dcmpeq>
 80052c6:	b918      	cbnz	r0, 80052d0 <__cvt+0x8c>
 80052c8:	f1c6 0601 	rsb	r6, r6, #1
 80052cc:	f8ca 6000 	str.w	r6, [sl]
 80052d0:	f8da 3000 	ldr.w	r3, [sl]
 80052d4:	4499      	add	r9, r3
 80052d6:	2200      	movs	r2, #0
 80052d8:	2300      	movs	r3, #0
 80052da:	4620      	mov	r0, r4
 80052dc:	4629      	mov	r1, r5
 80052de:	f7fb fc03 	bl	8000ae8 <__aeabi_dcmpeq>
 80052e2:	b108      	cbz	r0, 80052e8 <__cvt+0xa4>
 80052e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80052e8:	2230      	movs	r2, #48	; 0x30
 80052ea:	9b03      	ldr	r3, [sp, #12]
 80052ec:	454b      	cmp	r3, r9
 80052ee:	d307      	bcc.n	8005300 <__cvt+0xbc>
 80052f0:	9b03      	ldr	r3, [sp, #12]
 80052f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052f4:	1bdb      	subs	r3, r3, r7
 80052f6:	4638      	mov	r0, r7
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	b004      	add	sp, #16
 80052fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005300:	1c59      	adds	r1, r3, #1
 8005302:	9103      	str	r1, [sp, #12]
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	e7f0      	b.n	80052ea <__cvt+0xa6>

08005308 <__exponent>:
 8005308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800530a:	4603      	mov	r3, r0
 800530c:	2900      	cmp	r1, #0
 800530e:	bfb8      	it	lt
 8005310:	4249      	neglt	r1, r1
 8005312:	f803 2b02 	strb.w	r2, [r3], #2
 8005316:	bfb4      	ite	lt
 8005318:	222d      	movlt	r2, #45	; 0x2d
 800531a:	222b      	movge	r2, #43	; 0x2b
 800531c:	2909      	cmp	r1, #9
 800531e:	7042      	strb	r2, [r0, #1]
 8005320:	dd2a      	ble.n	8005378 <__exponent+0x70>
 8005322:	f10d 0407 	add.w	r4, sp, #7
 8005326:	46a4      	mov	ip, r4
 8005328:	270a      	movs	r7, #10
 800532a:	46a6      	mov	lr, r4
 800532c:	460a      	mov	r2, r1
 800532e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005332:	fb07 1516 	mls	r5, r7, r6, r1
 8005336:	3530      	adds	r5, #48	; 0x30
 8005338:	2a63      	cmp	r2, #99	; 0x63
 800533a:	f104 34ff 	add.w	r4, r4, #4294967295
 800533e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005342:	4631      	mov	r1, r6
 8005344:	dcf1      	bgt.n	800532a <__exponent+0x22>
 8005346:	3130      	adds	r1, #48	; 0x30
 8005348:	f1ae 0502 	sub.w	r5, lr, #2
 800534c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005350:	1c44      	adds	r4, r0, #1
 8005352:	4629      	mov	r1, r5
 8005354:	4561      	cmp	r1, ip
 8005356:	d30a      	bcc.n	800536e <__exponent+0x66>
 8005358:	f10d 0209 	add.w	r2, sp, #9
 800535c:	eba2 020e 	sub.w	r2, r2, lr
 8005360:	4565      	cmp	r5, ip
 8005362:	bf88      	it	hi
 8005364:	2200      	movhi	r2, #0
 8005366:	4413      	add	r3, r2
 8005368:	1a18      	subs	r0, r3, r0
 800536a:	b003      	add	sp, #12
 800536c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800536e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005372:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005376:	e7ed      	b.n	8005354 <__exponent+0x4c>
 8005378:	2330      	movs	r3, #48	; 0x30
 800537a:	3130      	adds	r1, #48	; 0x30
 800537c:	7083      	strb	r3, [r0, #2]
 800537e:	70c1      	strb	r1, [r0, #3]
 8005380:	1d03      	adds	r3, r0, #4
 8005382:	e7f1      	b.n	8005368 <__exponent+0x60>

08005384 <_printf_float>:
 8005384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005388:	ed2d 8b02 	vpush	{d8}
 800538c:	b08d      	sub	sp, #52	; 0x34
 800538e:	460c      	mov	r4, r1
 8005390:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005394:	4616      	mov	r6, r2
 8005396:	461f      	mov	r7, r3
 8005398:	4605      	mov	r5, r0
 800539a:	f001 fd4d 	bl	8006e38 <_localeconv_r>
 800539e:	f8d0 a000 	ldr.w	sl, [r0]
 80053a2:	4650      	mov	r0, sl
 80053a4:	f7fa ff24 	bl	80001f0 <strlen>
 80053a8:	2300      	movs	r3, #0
 80053aa:	930a      	str	r3, [sp, #40]	; 0x28
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	9305      	str	r3, [sp, #20]
 80053b0:	f8d8 3000 	ldr.w	r3, [r8]
 80053b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80053b8:	3307      	adds	r3, #7
 80053ba:	f023 0307 	bic.w	r3, r3, #7
 80053be:	f103 0208 	add.w	r2, r3, #8
 80053c2:	f8c8 2000 	str.w	r2, [r8]
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80053ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80053d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053d6:	9307      	str	r3, [sp, #28]
 80053d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80053dc:	ee08 0a10 	vmov	s16, r0
 80053e0:	4b9f      	ldr	r3, [pc, #636]	; (8005660 <_printf_float+0x2dc>)
 80053e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053e6:	f04f 32ff 	mov.w	r2, #4294967295
 80053ea:	f7fb fbaf 	bl	8000b4c <__aeabi_dcmpun>
 80053ee:	bb88      	cbnz	r0, 8005454 <_printf_float+0xd0>
 80053f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053f4:	4b9a      	ldr	r3, [pc, #616]	; (8005660 <_printf_float+0x2dc>)
 80053f6:	f04f 32ff 	mov.w	r2, #4294967295
 80053fa:	f7fb fb89 	bl	8000b10 <__aeabi_dcmple>
 80053fe:	bb48      	cbnz	r0, 8005454 <_printf_float+0xd0>
 8005400:	2200      	movs	r2, #0
 8005402:	2300      	movs	r3, #0
 8005404:	4640      	mov	r0, r8
 8005406:	4649      	mov	r1, r9
 8005408:	f7fb fb78 	bl	8000afc <__aeabi_dcmplt>
 800540c:	b110      	cbz	r0, 8005414 <_printf_float+0x90>
 800540e:	232d      	movs	r3, #45	; 0x2d
 8005410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005414:	4b93      	ldr	r3, [pc, #588]	; (8005664 <_printf_float+0x2e0>)
 8005416:	4894      	ldr	r0, [pc, #592]	; (8005668 <_printf_float+0x2e4>)
 8005418:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800541c:	bf94      	ite	ls
 800541e:	4698      	movls	r8, r3
 8005420:	4680      	movhi	r8, r0
 8005422:	2303      	movs	r3, #3
 8005424:	6123      	str	r3, [r4, #16]
 8005426:	9b05      	ldr	r3, [sp, #20]
 8005428:	f023 0204 	bic.w	r2, r3, #4
 800542c:	6022      	str	r2, [r4, #0]
 800542e:	f04f 0900 	mov.w	r9, #0
 8005432:	9700      	str	r7, [sp, #0]
 8005434:	4633      	mov	r3, r6
 8005436:	aa0b      	add	r2, sp, #44	; 0x2c
 8005438:	4621      	mov	r1, r4
 800543a:	4628      	mov	r0, r5
 800543c:	f000 f9d8 	bl	80057f0 <_printf_common>
 8005440:	3001      	adds	r0, #1
 8005442:	f040 8090 	bne.w	8005566 <_printf_float+0x1e2>
 8005446:	f04f 30ff 	mov.w	r0, #4294967295
 800544a:	b00d      	add	sp, #52	; 0x34
 800544c:	ecbd 8b02 	vpop	{d8}
 8005450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005454:	4642      	mov	r2, r8
 8005456:	464b      	mov	r3, r9
 8005458:	4640      	mov	r0, r8
 800545a:	4649      	mov	r1, r9
 800545c:	f7fb fb76 	bl	8000b4c <__aeabi_dcmpun>
 8005460:	b140      	cbz	r0, 8005474 <_printf_float+0xf0>
 8005462:	464b      	mov	r3, r9
 8005464:	2b00      	cmp	r3, #0
 8005466:	bfbc      	itt	lt
 8005468:	232d      	movlt	r3, #45	; 0x2d
 800546a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800546e:	487f      	ldr	r0, [pc, #508]	; (800566c <_printf_float+0x2e8>)
 8005470:	4b7f      	ldr	r3, [pc, #508]	; (8005670 <_printf_float+0x2ec>)
 8005472:	e7d1      	b.n	8005418 <_printf_float+0x94>
 8005474:	6863      	ldr	r3, [r4, #4]
 8005476:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800547a:	9206      	str	r2, [sp, #24]
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	d13f      	bne.n	8005500 <_printf_float+0x17c>
 8005480:	2306      	movs	r3, #6
 8005482:	6063      	str	r3, [r4, #4]
 8005484:	9b05      	ldr	r3, [sp, #20]
 8005486:	6861      	ldr	r1, [r4, #4]
 8005488:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800548c:	2300      	movs	r3, #0
 800548e:	9303      	str	r3, [sp, #12]
 8005490:	ab0a      	add	r3, sp, #40	; 0x28
 8005492:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005496:	ab09      	add	r3, sp, #36	; 0x24
 8005498:	ec49 8b10 	vmov	d0, r8, r9
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	6022      	str	r2, [r4, #0]
 80054a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80054a4:	4628      	mov	r0, r5
 80054a6:	f7ff fecd 	bl	8005244 <__cvt>
 80054aa:	9b06      	ldr	r3, [sp, #24]
 80054ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054ae:	2b47      	cmp	r3, #71	; 0x47
 80054b0:	4680      	mov	r8, r0
 80054b2:	d108      	bne.n	80054c6 <_printf_float+0x142>
 80054b4:	1cc8      	adds	r0, r1, #3
 80054b6:	db02      	blt.n	80054be <_printf_float+0x13a>
 80054b8:	6863      	ldr	r3, [r4, #4]
 80054ba:	4299      	cmp	r1, r3
 80054bc:	dd41      	ble.n	8005542 <_printf_float+0x1be>
 80054be:	f1ab 0b02 	sub.w	fp, fp, #2
 80054c2:	fa5f fb8b 	uxtb.w	fp, fp
 80054c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054ca:	d820      	bhi.n	800550e <_printf_float+0x18a>
 80054cc:	3901      	subs	r1, #1
 80054ce:	465a      	mov	r2, fp
 80054d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054d4:	9109      	str	r1, [sp, #36]	; 0x24
 80054d6:	f7ff ff17 	bl	8005308 <__exponent>
 80054da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054dc:	1813      	adds	r3, r2, r0
 80054de:	2a01      	cmp	r2, #1
 80054e0:	4681      	mov	r9, r0
 80054e2:	6123      	str	r3, [r4, #16]
 80054e4:	dc02      	bgt.n	80054ec <_printf_float+0x168>
 80054e6:	6822      	ldr	r2, [r4, #0]
 80054e8:	07d2      	lsls	r2, r2, #31
 80054ea:	d501      	bpl.n	80054f0 <_printf_float+0x16c>
 80054ec:	3301      	adds	r3, #1
 80054ee:	6123      	str	r3, [r4, #16]
 80054f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d09c      	beq.n	8005432 <_printf_float+0xae>
 80054f8:	232d      	movs	r3, #45	; 0x2d
 80054fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054fe:	e798      	b.n	8005432 <_printf_float+0xae>
 8005500:	9a06      	ldr	r2, [sp, #24]
 8005502:	2a47      	cmp	r2, #71	; 0x47
 8005504:	d1be      	bne.n	8005484 <_printf_float+0x100>
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1bc      	bne.n	8005484 <_printf_float+0x100>
 800550a:	2301      	movs	r3, #1
 800550c:	e7b9      	b.n	8005482 <_printf_float+0xfe>
 800550e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005512:	d118      	bne.n	8005546 <_printf_float+0x1c2>
 8005514:	2900      	cmp	r1, #0
 8005516:	6863      	ldr	r3, [r4, #4]
 8005518:	dd0b      	ble.n	8005532 <_printf_float+0x1ae>
 800551a:	6121      	str	r1, [r4, #16]
 800551c:	b913      	cbnz	r3, 8005524 <_printf_float+0x1a0>
 800551e:	6822      	ldr	r2, [r4, #0]
 8005520:	07d0      	lsls	r0, r2, #31
 8005522:	d502      	bpl.n	800552a <_printf_float+0x1a6>
 8005524:	3301      	adds	r3, #1
 8005526:	440b      	add	r3, r1
 8005528:	6123      	str	r3, [r4, #16]
 800552a:	65a1      	str	r1, [r4, #88]	; 0x58
 800552c:	f04f 0900 	mov.w	r9, #0
 8005530:	e7de      	b.n	80054f0 <_printf_float+0x16c>
 8005532:	b913      	cbnz	r3, 800553a <_printf_float+0x1b6>
 8005534:	6822      	ldr	r2, [r4, #0]
 8005536:	07d2      	lsls	r2, r2, #31
 8005538:	d501      	bpl.n	800553e <_printf_float+0x1ba>
 800553a:	3302      	adds	r3, #2
 800553c:	e7f4      	b.n	8005528 <_printf_float+0x1a4>
 800553e:	2301      	movs	r3, #1
 8005540:	e7f2      	b.n	8005528 <_printf_float+0x1a4>
 8005542:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005548:	4299      	cmp	r1, r3
 800554a:	db05      	blt.n	8005558 <_printf_float+0x1d4>
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	6121      	str	r1, [r4, #16]
 8005550:	07d8      	lsls	r0, r3, #31
 8005552:	d5ea      	bpl.n	800552a <_printf_float+0x1a6>
 8005554:	1c4b      	adds	r3, r1, #1
 8005556:	e7e7      	b.n	8005528 <_printf_float+0x1a4>
 8005558:	2900      	cmp	r1, #0
 800555a:	bfd4      	ite	le
 800555c:	f1c1 0202 	rsble	r2, r1, #2
 8005560:	2201      	movgt	r2, #1
 8005562:	4413      	add	r3, r2
 8005564:	e7e0      	b.n	8005528 <_printf_float+0x1a4>
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	055a      	lsls	r2, r3, #21
 800556a:	d407      	bmi.n	800557c <_printf_float+0x1f8>
 800556c:	6923      	ldr	r3, [r4, #16]
 800556e:	4642      	mov	r2, r8
 8005570:	4631      	mov	r1, r6
 8005572:	4628      	mov	r0, r5
 8005574:	47b8      	blx	r7
 8005576:	3001      	adds	r0, #1
 8005578:	d12c      	bne.n	80055d4 <_printf_float+0x250>
 800557a:	e764      	b.n	8005446 <_printf_float+0xc2>
 800557c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005580:	f240 80e0 	bls.w	8005744 <_printf_float+0x3c0>
 8005584:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005588:	2200      	movs	r2, #0
 800558a:	2300      	movs	r3, #0
 800558c:	f7fb faac 	bl	8000ae8 <__aeabi_dcmpeq>
 8005590:	2800      	cmp	r0, #0
 8005592:	d034      	beq.n	80055fe <_printf_float+0x27a>
 8005594:	4a37      	ldr	r2, [pc, #220]	; (8005674 <_printf_float+0x2f0>)
 8005596:	2301      	movs	r3, #1
 8005598:	4631      	mov	r1, r6
 800559a:	4628      	mov	r0, r5
 800559c:	47b8      	blx	r7
 800559e:	3001      	adds	r0, #1
 80055a0:	f43f af51 	beq.w	8005446 <_printf_float+0xc2>
 80055a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055a8:	429a      	cmp	r2, r3
 80055aa:	db02      	blt.n	80055b2 <_printf_float+0x22e>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	07d8      	lsls	r0, r3, #31
 80055b0:	d510      	bpl.n	80055d4 <_printf_float+0x250>
 80055b2:	ee18 3a10 	vmov	r3, s16
 80055b6:	4652      	mov	r2, sl
 80055b8:	4631      	mov	r1, r6
 80055ba:	4628      	mov	r0, r5
 80055bc:	47b8      	blx	r7
 80055be:	3001      	adds	r0, #1
 80055c0:	f43f af41 	beq.w	8005446 <_printf_float+0xc2>
 80055c4:	f04f 0800 	mov.w	r8, #0
 80055c8:	f104 091a 	add.w	r9, r4, #26
 80055cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ce:	3b01      	subs	r3, #1
 80055d0:	4543      	cmp	r3, r8
 80055d2:	dc09      	bgt.n	80055e8 <_printf_float+0x264>
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	079b      	lsls	r3, r3, #30
 80055d8:	f100 8105 	bmi.w	80057e6 <_printf_float+0x462>
 80055dc:	68e0      	ldr	r0, [r4, #12]
 80055de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055e0:	4298      	cmp	r0, r3
 80055e2:	bfb8      	it	lt
 80055e4:	4618      	movlt	r0, r3
 80055e6:	e730      	b.n	800544a <_printf_float+0xc6>
 80055e8:	2301      	movs	r3, #1
 80055ea:	464a      	mov	r2, r9
 80055ec:	4631      	mov	r1, r6
 80055ee:	4628      	mov	r0, r5
 80055f0:	47b8      	blx	r7
 80055f2:	3001      	adds	r0, #1
 80055f4:	f43f af27 	beq.w	8005446 <_printf_float+0xc2>
 80055f8:	f108 0801 	add.w	r8, r8, #1
 80055fc:	e7e6      	b.n	80055cc <_printf_float+0x248>
 80055fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005600:	2b00      	cmp	r3, #0
 8005602:	dc39      	bgt.n	8005678 <_printf_float+0x2f4>
 8005604:	4a1b      	ldr	r2, [pc, #108]	; (8005674 <_printf_float+0x2f0>)
 8005606:	2301      	movs	r3, #1
 8005608:	4631      	mov	r1, r6
 800560a:	4628      	mov	r0, r5
 800560c:	47b8      	blx	r7
 800560e:	3001      	adds	r0, #1
 8005610:	f43f af19 	beq.w	8005446 <_printf_float+0xc2>
 8005614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005618:	4313      	orrs	r3, r2
 800561a:	d102      	bne.n	8005622 <_printf_float+0x29e>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	07d9      	lsls	r1, r3, #31
 8005620:	d5d8      	bpl.n	80055d4 <_printf_float+0x250>
 8005622:	ee18 3a10 	vmov	r3, s16
 8005626:	4652      	mov	r2, sl
 8005628:	4631      	mov	r1, r6
 800562a:	4628      	mov	r0, r5
 800562c:	47b8      	blx	r7
 800562e:	3001      	adds	r0, #1
 8005630:	f43f af09 	beq.w	8005446 <_printf_float+0xc2>
 8005634:	f04f 0900 	mov.w	r9, #0
 8005638:	f104 0a1a 	add.w	sl, r4, #26
 800563c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800563e:	425b      	negs	r3, r3
 8005640:	454b      	cmp	r3, r9
 8005642:	dc01      	bgt.n	8005648 <_printf_float+0x2c4>
 8005644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005646:	e792      	b.n	800556e <_printf_float+0x1ea>
 8005648:	2301      	movs	r3, #1
 800564a:	4652      	mov	r2, sl
 800564c:	4631      	mov	r1, r6
 800564e:	4628      	mov	r0, r5
 8005650:	47b8      	blx	r7
 8005652:	3001      	adds	r0, #1
 8005654:	f43f aef7 	beq.w	8005446 <_printf_float+0xc2>
 8005658:	f109 0901 	add.w	r9, r9, #1
 800565c:	e7ee      	b.n	800563c <_printf_float+0x2b8>
 800565e:	bf00      	nop
 8005660:	7fefffff 	.word	0x7fefffff
 8005664:	08007bf4 	.word	0x08007bf4
 8005668:	08007bf8 	.word	0x08007bf8
 800566c:	08007c00 	.word	0x08007c00
 8005670:	08007bfc 	.word	0x08007bfc
 8005674:	08007c04 	.word	0x08007c04
 8005678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800567a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800567c:	429a      	cmp	r2, r3
 800567e:	bfa8      	it	ge
 8005680:	461a      	movge	r2, r3
 8005682:	2a00      	cmp	r2, #0
 8005684:	4691      	mov	r9, r2
 8005686:	dc37      	bgt.n	80056f8 <_printf_float+0x374>
 8005688:	f04f 0b00 	mov.w	fp, #0
 800568c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005690:	f104 021a 	add.w	r2, r4, #26
 8005694:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005696:	9305      	str	r3, [sp, #20]
 8005698:	eba3 0309 	sub.w	r3, r3, r9
 800569c:	455b      	cmp	r3, fp
 800569e:	dc33      	bgt.n	8005708 <_printf_float+0x384>
 80056a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056a4:	429a      	cmp	r2, r3
 80056a6:	db3b      	blt.n	8005720 <_printf_float+0x39c>
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	07da      	lsls	r2, r3, #31
 80056ac:	d438      	bmi.n	8005720 <_printf_float+0x39c>
 80056ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056b0:	9b05      	ldr	r3, [sp, #20]
 80056b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	eba2 0901 	sub.w	r9, r2, r1
 80056ba:	4599      	cmp	r9, r3
 80056bc:	bfa8      	it	ge
 80056be:	4699      	movge	r9, r3
 80056c0:	f1b9 0f00 	cmp.w	r9, #0
 80056c4:	dc35      	bgt.n	8005732 <_printf_float+0x3ae>
 80056c6:	f04f 0800 	mov.w	r8, #0
 80056ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056ce:	f104 0a1a 	add.w	sl, r4, #26
 80056d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	eba3 0309 	sub.w	r3, r3, r9
 80056dc:	4543      	cmp	r3, r8
 80056de:	f77f af79 	ble.w	80055d4 <_printf_float+0x250>
 80056e2:	2301      	movs	r3, #1
 80056e4:	4652      	mov	r2, sl
 80056e6:	4631      	mov	r1, r6
 80056e8:	4628      	mov	r0, r5
 80056ea:	47b8      	blx	r7
 80056ec:	3001      	adds	r0, #1
 80056ee:	f43f aeaa 	beq.w	8005446 <_printf_float+0xc2>
 80056f2:	f108 0801 	add.w	r8, r8, #1
 80056f6:	e7ec      	b.n	80056d2 <_printf_float+0x34e>
 80056f8:	4613      	mov	r3, r2
 80056fa:	4631      	mov	r1, r6
 80056fc:	4642      	mov	r2, r8
 80056fe:	4628      	mov	r0, r5
 8005700:	47b8      	blx	r7
 8005702:	3001      	adds	r0, #1
 8005704:	d1c0      	bne.n	8005688 <_printf_float+0x304>
 8005706:	e69e      	b.n	8005446 <_printf_float+0xc2>
 8005708:	2301      	movs	r3, #1
 800570a:	4631      	mov	r1, r6
 800570c:	4628      	mov	r0, r5
 800570e:	9205      	str	r2, [sp, #20]
 8005710:	47b8      	blx	r7
 8005712:	3001      	adds	r0, #1
 8005714:	f43f ae97 	beq.w	8005446 <_printf_float+0xc2>
 8005718:	9a05      	ldr	r2, [sp, #20]
 800571a:	f10b 0b01 	add.w	fp, fp, #1
 800571e:	e7b9      	b.n	8005694 <_printf_float+0x310>
 8005720:	ee18 3a10 	vmov	r3, s16
 8005724:	4652      	mov	r2, sl
 8005726:	4631      	mov	r1, r6
 8005728:	4628      	mov	r0, r5
 800572a:	47b8      	blx	r7
 800572c:	3001      	adds	r0, #1
 800572e:	d1be      	bne.n	80056ae <_printf_float+0x32a>
 8005730:	e689      	b.n	8005446 <_printf_float+0xc2>
 8005732:	9a05      	ldr	r2, [sp, #20]
 8005734:	464b      	mov	r3, r9
 8005736:	4442      	add	r2, r8
 8005738:	4631      	mov	r1, r6
 800573a:	4628      	mov	r0, r5
 800573c:	47b8      	blx	r7
 800573e:	3001      	adds	r0, #1
 8005740:	d1c1      	bne.n	80056c6 <_printf_float+0x342>
 8005742:	e680      	b.n	8005446 <_printf_float+0xc2>
 8005744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005746:	2a01      	cmp	r2, #1
 8005748:	dc01      	bgt.n	800574e <_printf_float+0x3ca>
 800574a:	07db      	lsls	r3, r3, #31
 800574c:	d538      	bpl.n	80057c0 <_printf_float+0x43c>
 800574e:	2301      	movs	r3, #1
 8005750:	4642      	mov	r2, r8
 8005752:	4631      	mov	r1, r6
 8005754:	4628      	mov	r0, r5
 8005756:	47b8      	blx	r7
 8005758:	3001      	adds	r0, #1
 800575a:	f43f ae74 	beq.w	8005446 <_printf_float+0xc2>
 800575e:	ee18 3a10 	vmov	r3, s16
 8005762:	4652      	mov	r2, sl
 8005764:	4631      	mov	r1, r6
 8005766:	4628      	mov	r0, r5
 8005768:	47b8      	blx	r7
 800576a:	3001      	adds	r0, #1
 800576c:	f43f ae6b 	beq.w	8005446 <_printf_float+0xc2>
 8005770:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005774:	2200      	movs	r2, #0
 8005776:	2300      	movs	r3, #0
 8005778:	f7fb f9b6 	bl	8000ae8 <__aeabi_dcmpeq>
 800577c:	b9d8      	cbnz	r0, 80057b6 <_printf_float+0x432>
 800577e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005780:	f108 0201 	add.w	r2, r8, #1
 8005784:	3b01      	subs	r3, #1
 8005786:	4631      	mov	r1, r6
 8005788:	4628      	mov	r0, r5
 800578a:	47b8      	blx	r7
 800578c:	3001      	adds	r0, #1
 800578e:	d10e      	bne.n	80057ae <_printf_float+0x42a>
 8005790:	e659      	b.n	8005446 <_printf_float+0xc2>
 8005792:	2301      	movs	r3, #1
 8005794:	4652      	mov	r2, sl
 8005796:	4631      	mov	r1, r6
 8005798:	4628      	mov	r0, r5
 800579a:	47b8      	blx	r7
 800579c:	3001      	adds	r0, #1
 800579e:	f43f ae52 	beq.w	8005446 <_printf_float+0xc2>
 80057a2:	f108 0801 	add.w	r8, r8, #1
 80057a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057a8:	3b01      	subs	r3, #1
 80057aa:	4543      	cmp	r3, r8
 80057ac:	dcf1      	bgt.n	8005792 <_printf_float+0x40e>
 80057ae:	464b      	mov	r3, r9
 80057b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057b4:	e6dc      	b.n	8005570 <_printf_float+0x1ec>
 80057b6:	f04f 0800 	mov.w	r8, #0
 80057ba:	f104 0a1a 	add.w	sl, r4, #26
 80057be:	e7f2      	b.n	80057a6 <_printf_float+0x422>
 80057c0:	2301      	movs	r3, #1
 80057c2:	4642      	mov	r2, r8
 80057c4:	e7df      	b.n	8005786 <_printf_float+0x402>
 80057c6:	2301      	movs	r3, #1
 80057c8:	464a      	mov	r2, r9
 80057ca:	4631      	mov	r1, r6
 80057cc:	4628      	mov	r0, r5
 80057ce:	47b8      	blx	r7
 80057d0:	3001      	adds	r0, #1
 80057d2:	f43f ae38 	beq.w	8005446 <_printf_float+0xc2>
 80057d6:	f108 0801 	add.w	r8, r8, #1
 80057da:	68e3      	ldr	r3, [r4, #12]
 80057dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057de:	1a5b      	subs	r3, r3, r1
 80057e0:	4543      	cmp	r3, r8
 80057e2:	dcf0      	bgt.n	80057c6 <_printf_float+0x442>
 80057e4:	e6fa      	b.n	80055dc <_printf_float+0x258>
 80057e6:	f04f 0800 	mov.w	r8, #0
 80057ea:	f104 0919 	add.w	r9, r4, #25
 80057ee:	e7f4      	b.n	80057da <_printf_float+0x456>

080057f0 <_printf_common>:
 80057f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f4:	4616      	mov	r6, r2
 80057f6:	4699      	mov	r9, r3
 80057f8:	688a      	ldr	r2, [r1, #8]
 80057fa:	690b      	ldr	r3, [r1, #16]
 80057fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005800:	4293      	cmp	r3, r2
 8005802:	bfb8      	it	lt
 8005804:	4613      	movlt	r3, r2
 8005806:	6033      	str	r3, [r6, #0]
 8005808:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800580c:	4607      	mov	r7, r0
 800580e:	460c      	mov	r4, r1
 8005810:	b10a      	cbz	r2, 8005816 <_printf_common+0x26>
 8005812:	3301      	adds	r3, #1
 8005814:	6033      	str	r3, [r6, #0]
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	0699      	lsls	r1, r3, #26
 800581a:	bf42      	ittt	mi
 800581c:	6833      	ldrmi	r3, [r6, #0]
 800581e:	3302      	addmi	r3, #2
 8005820:	6033      	strmi	r3, [r6, #0]
 8005822:	6825      	ldr	r5, [r4, #0]
 8005824:	f015 0506 	ands.w	r5, r5, #6
 8005828:	d106      	bne.n	8005838 <_printf_common+0x48>
 800582a:	f104 0a19 	add.w	sl, r4, #25
 800582e:	68e3      	ldr	r3, [r4, #12]
 8005830:	6832      	ldr	r2, [r6, #0]
 8005832:	1a9b      	subs	r3, r3, r2
 8005834:	42ab      	cmp	r3, r5
 8005836:	dc26      	bgt.n	8005886 <_printf_common+0x96>
 8005838:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800583c:	1e13      	subs	r3, r2, #0
 800583e:	6822      	ldr	r2, [r4, #0]
 8005840:	bf18      	it	ne
 8005842:	2301      	movne	r3, #1
 8005844:	0692      	lsls	r2, r2, #26
 8005846:	d42b      	bmi.n	80058a0 <_printf_common+0xb0>
 8005848:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800584c:	4649      	mov	r1, r9
 800584e:	4638      	mov	r0, r7
 8005850:	47c0      	blx	r8
 8005852:	3001      	adds	r0, #1
 8005854:	d01e      	beq.n	8005894 <_printf_common+0xa4>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	68e5      	ldr	r5, [r4, #12]
 800585a:	6832      	ldr	r2, [r6, #0]
 800585c:	f003 0306 	and.w	r3, r3, #6
 8005860:	2b04      	cmp	r3, #4
 8005862:	bf08      	it	eq
 8005864:	1aad      	subeq	r5, r5, r2
 8005866:	68a3      	ldr	r3, [r4, #8]
 8005868:	6922      	ldr	r2, [r4, #16]
 800586a:	bf0c      	ite	eq
 800586c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005870:	2500      	movne	r5, #0
 8005872:	4293      	cmp	r3, r2
 8005874:	bfc4      	itt	gt
 8005876:	1a9b      	subgt	r3, r3, r2
 8005878:	18ed      	addgt	r5, r5, r3
 800587a:	2600      	movs	r6, #0
 800587c:	341a      	adds	r4, #26
 800587e:	42b5      	cmp	r5, r6
 8005880:	d11a      	bne.n	80058b8 <_printf_common+0xc8>
 8005882:	2000      	movs	r0, #0
 8005884:	e008      	b.n	8005898 <_printf_common+0xa8>
 8005886:	2301      	movs	r3, #1
 8005888:	4652      	mov	r2, sl
 800588a:	4649      	mov	r1, r9
 800588c:	4638      	mov	r0, r7
 800588e:	47c0      	blx	r8
 8005890:	3001      	adds	r0, #1
 8005892:	d103      	bne.n	800589c <_printf_common+0xac>
 8005894:	f04f 30ff 	mov.w	r0, #4294967295
 8005898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800589c:	3501      	adds	r5, #1
 800589e:	e7c6      	b.n	800582e <_printf_common+0x3e>
 80058a0:	18e1      	adds	r1, r4, r3
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	2030      	movs	r0, #48	; 0x30
 80058a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058aa:	4422      	add	r2, r4
 80058ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058b4:	3302      	adds	r3, #2
 80058b6:	e7c7      	b.n	8005848 <_printf_common+0x58>
 80058b8:	2301      	movs	r3, #1
 80058ba:	4622      	mov	r2, r4
 80058bc:	4649      	mov	r1, r9
 80058be:	4638      	mov	r0, r7
 80058c0:	47c0      	blx	r8
 80058c2:	3001      	adds	r0, #1
 80058c4:	d0e6      	beq.n	8005894 <_printf_common+0xa4>
 80058c6:	3601      	adds	r6, #1
 80058c8:	e7d9      	b.n	800587e <_printf_common+0x8e>
	...

080058cc <_printf_i>:
 80058cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058d0:	460c      	mov	r4, r1
 80058d2:	4691      	mov	r9, r2
 80058d4:	7e27      	ldrb	r7, [r4, #24]
 80058d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80058d8:	2f78      	cmp	r7, #120	; 0x78
 80058da:	4680      	mov	r8, r0
 80058dc:	469a      	mov	sl, r3
 80058de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058e2:	d807      	bhi.n	80058f4 <_printf_i+0x28>
 80058e4:	2f62      	cmp	r7, #98	; 0x62
 80058e6:	d80a      	bhi.n	80058fe <_printf_i+0x32>
 80058e8:	2f00      	cmp	r7, #0
 80058ea:	f000 80d8 	beq.w	8005a9e <_printf_i+0x1d2>
 80058ee:	2f58      	cmp	r7, #88	; 0x58
 80058f0:	f000 80a3 	beq.w	8005a3a <_printf_i+0x16e>
 80058f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058fc:	e03a      	b.n	8005974 <_printf_i+0xa8>
 80058fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005902:	2b15      	cmp	r3, #21
 8005904:	d8f6      	bhi.n	80058f4 <_printf_i+0x28>
 8005906:	a001      	add	r0, pc, #4	; (adr r0, 800590c <_printf_i+0x40>)
 8005908:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800590c:	08005965 	.word	0x08005965
 8005910:	08005979 	.word	0x08005979
 8005914:	080058f5 	.word	0x080058f5
 8005918:	080058f5 	.word	0x080058f5
 800591c:	080058f5 	.word	0x080058f5
 8005920:	080058f5 	.word	0x080058f5
 8005924:	08005979 	.word	0x08005979
 8005928:	080058f5 	.word	0x080058f5
 800592c:	080058f5 	.word	0x080058f5
 8005930:	080058f5 	.word	0x080058f5
 8005934:	080058f5 	.word	0x080058f5
 8005938:	08005a85 	.word	0x08005a85
 800593c:	080059a9 	.word	0x080059a9
 8005940:	08005a67 	.word	0x08005a67
 8005944:	080058f5 	.word	0x080058f5
 8005948:	080058f5 	.word	0x080058f5
 800594c:	08005aa7 	.word	0x08005aa7
 8005950:	080058f5 	.word	0x080058f5
 8005954:	080059a9 	.word	0x080059a9
 8005958:	080058f5 	.word	0x080058f5
 800595c:	080058f5 	.word	0x080058f5
 8005960:	08005a6f 	.word	0x08005a6f
 8005964:	680b      	ldr	r3, [r1, #0]
 8005966:	1d1a      	adds	r2, r3, #4
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	600a      	str	r2, [r1, #0]
 800596c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005974:	2301      	movs	r3, #1
 8005976:	e0a3      	b.n	8005ac0 <_printf_i+0x1f4>
 8005978:	6825      	ldr	r5, [r4, #0]
 800597a:	6808      	ldr	r0, [r1, #0]
 800597c:	062e      	lsls	r6, r5, #24
 800597e:	f100 0304 	add.w	r3, r0, #4
 8005982:	d50a      	bpl.n	800599a <_printf_i+0xce>
 8005984:	6805      	ldr	r5, [r0, #0]
 8005986:	600b      	str	r3, [r1, #0]
 8005988:	2d00      	cmp	r5, #0
 800598a:	da03      	bge.n	8005994 <_printf_i+0xc8>
 800598c:	232d      	movs	r3, #45	; 0x2d
 800598e:	426d      	negs	r5, r5
 8005990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005994:	485e      	ldr	r0, [pc, #376]	; (8005b10 <_printf_i+0x244>)
 8005996:	230a      	movs	r3, #10
 8005998:	e019      	b.n	80059ce <_printf_i+0x102>
 800599a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800599e:	6805      	ldr	r5, [r0, #0]
 80059a0:	600b      	str	r3, [r1, #0]
 80059a2:	bf18      	it	ne
 80059a4:	b22d      	sxthne	r5, r5
 80059a6:	e7ef      	b.n	8005988 <_printf_i+0xbc>
 80059a8:	680b      	ldr	r3, [r1, #0]
 80059aa:	6825      	ldr	r5, [r4, #0]
 80059ac:	1d18      	adds	r0, r3, #4
 80059ae:	6008      	str	r0, [r1, #0]
 80059b0:	0628      	lsls	r0, r5, #24
 80059b2:	d501      	bpl.n	80059b8 <_printf_i+0xec>
 80059b4:	681d      	ldr	r5, [r3, #0]
 80059b6:	e002      	b.n	80059be <_printf_i+0xf2>
 80059b8:	0669      	lsls	r1, r5, #25
 80059ba:	d5fb      	bpl.n	80059b4 <_printf_i+0xe8>
 80059bc:	881d      	ldrh	r5, [r3, #0]
 80059be:	4854      	ldr	r0, [pc, #336]	; (8005b10 <_printf_i+0x244>)
 80059c0:	2f6f      	cmp	r7, #111	; 0x6f
 80059c2:	bf0c      	ite	eq
 80059c4:	2308      	moveq	r3, #8
 80059c6:	230a      	movne	r3, #10
 80059c8:	2100      	movs	r1, #0
 80059ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059ce:	6866      	ldr	r6, [r4, #4]
 80059d0:	60a6      	str	r6, [r4, #8]
 80059d2:	2e00      	cmp	r6, #0
 80059d4:	bfa2      	ittt	ge
 80059d6:	6821      	ldrge	r1, [r4, #0]
 80059d8:	f021 0104 	bicge.w	r1, r1, #4
 80059dc:	6021      	strge	r1, [r4, #0]
 80059de:	b90d      	cbnz	r5, 80059e4 <_printf_i+0x118>
 80059e0:	2e00      	cmp	r6, #0
 80059e2:	d04d      	beq.n	8005a80 <_printf_i+0x1b4>
 80059e4:	4616      	mov	r6, r2
 80059e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80059ea:	fb03 5711 	mls	r7, r3, r1, r5
 80059ee:	5dc7      	ldrb	r7, [r0, r7]
 80059f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059f4:	462f      	mov	r7, r5
 80059f6:	42bb      	cmp	r3, r7
 80059f8:	460d      	mov	r5, r1
 80059fa:	d9f4      	bls.n	80059e6 <_printf_i+0x11a>
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d10b      	bne.n	8005a18 <_printf_i+0x14c>
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	07df      	lsls	r7, r3, #31
 8005a04:	d508      	bpl.n	8005a18 <_printf_i+0x14c>
 8005a06:	6923      	ldr	r3, [r4, #16]
 8005a08:	6861      	ldr	r1, [r4, #4]
 8005a0a:	4299      	cmp	r1, r3
 8005a0c:	bfde      	ittt	le
 8005a0e:	2330      	movle	r3, #48	; 0x30
 8005a10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a18:	1b92      	subs	r2, r2, r6
 8005a1a:	6122      	str	r2, [r4, #16]
 8005a1c:	f8cd a000 	str.w	sl, [sp]
 8005a20:	464b      	mov	r3, r9
 8005a22:	aa03      	add	r2, sp, #12
 8005a24:	4621      	mov	r1, r4
 8005a26:	4640      	mov	r0, r8
 8005a28:	f7ff fee2 	bl	80057f0 <_printf_common>
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	d14c      	bne.n	8005aca <_printf_i+0x1fe>
 8005a30:	f04f 30ff 	mov.w	r0, #4294967295
 8005a34:	b004      	add	sp, #16
 8005a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3a:	4835      	ldr	r0, [pc, #212]	; (8005b10 <_printf_i+0x244>)
 8005a3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	680e      	ldr	r6, [r1, #0]
 8005a44:	061f      	lsls	r7, r3, #24
 8005a46:	f856 5b04 	ldr.w	r5, [r6], #4
 8005a4a:	600e      	str	r6, [r1, #0]
 8005a4c:	d514      	bpl.n	8005a78 <_printf_i+0x1ac>
 8005a4e:	07d9      	lsls	r1, r3, #31
 8005a50:	bf44      	itt	mi
 8005a52:	f043 0320 	orrmi.w	r3, r3, #32
 8005a56:	6023      	strmi	r3, [r4, #0]
 8005a58:	b91d      	cbnz	r5, 8005a62 <_printf_i+0x196>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	f023 0320 	bic.w	r3, r3, #32
 8005a60:	6023      	str	r3, [r4, #0]
 8005a62:	2310      	movs	r3, #16
 8005a64:	e7b0      	b.n	80059c8 <_printf_i+0xfc>
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	f043 0320 	orr.w	r3, r3, #32
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	2378      	movs	r3, #120	; 0x78
 8005a70:	4828      	ldr	r0, [pc, #160]	; (8005b14 <_printf_i+0x248>)
 8005a72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a76:	e7e3      	b.n	8005a40 <_printf_i+0x174>
 8005a78:	065e      	lsls	r6, r3, #25
 8005a7a:	bf48      	it	mi
 8005a7c:	b2ad      	uxthmi	r5, r5
 8005a7e:	e7e6      	b.n	8005a4e <_printf_i+0x182>
 8005a80:	4616      	mov	r6, r2
 8005a82:	e7bb      	b.n	80059fc <_printf_i+0x130>
 8005a84:	680b      	ldr	r3, [r1, #0]
 8005a86:	6826      	ldr	r6, [r4, #0]
 8005a88:	6960      	ldr	r0, [r4, #20]
 8005a8a:	1d1d      	adds	r5, r3, #4
 8005a8c:	600d      	str	r5, [r1, #0]
 8005a8e:	0635      	lsls	r5, r6, #24
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	d501      	bpl.n	8005a98 <_printf_i+0x1cc>
 8005a94:	6018      	str	r0, [r3, #0]
 8005a96:	e002      	b.n	8005a9e <_printf_i+0x1d2>
 8005a98:	0671      	lsls	r1, r6, #25
 8005a9a:	d5fb      	bpl.n	8005a94 <_printf_i+0x1c8>
 8005a9c:	8018      	strh	r0, [r3, #0]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	6123      	str	r3, [r4, #16]
 8005aa2:	4616      	mov	r6, r2
 8005aa4:	e7ba      	b.n	8005a1c <_printf_i+0x150>
 8005aa6:	680b      	ldr	r3, [r1, #0]
 8005aa8:	1d1a      	adds	r2, r3, #4
 8005aaa:	600a      	str	r2, [r1, #0]
 8005aac:	681e      	ldr	r6, [r3, #0]
 8005aae:	6862      	ldr	r2, [r4, #4]
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	f7fa fba4 	bl	8000200 <memchr>
 8005ab8:	b108      	cbz	r0, 8005abe <_printf_i+0x1f2>
 8005aba:	1b80      	subs	r0, r0, r6
 8005abc:	6060      	str	r0, [r4, #4]
 8005abe:	6863      	ldr	r3, [r4, #4]
 8005ac0:	6123      	str	r3, [r4, #16]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ac8:	e7a8      	b.n	8005a1c <_printf_i+0x150>
 8005aca:	6923      	ldr	r3, [r4, #16]
 8005acc:	4632      	mov	r2, r6
 8005ace:	4649      	mov	r1, r9
 8005ad0:	4640      	mov	r0, r8
 8005ad2:	47d0      	blx	sl
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	d0ab      	beq.n	8005a30 <_printf_i+0x164>
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	079b      	lsls	r3, r3, #30
 8005adc:	d413      	bmi.n	8005b06 <_printf_i+0x23a>
 8005ade:	68e0      	ldr	r0, [r4, #12]
 8005ae0:	9b03      	ldr	r3, [sp, #12]
 8005ae2:	4298      	cmp	r0, r3
 8005ae4:	bfb8      	it	lt
 8005ae6:	4618      	movlt	r0, r3
 8005ae8:	e7a4      	b.n	8005a34 <_printf_i+0x168>
 8005aea:	2301      	movs	r3, #1
 8005aec:	4632      	mov	r2, r6
 8005aee:	4649      	mov	r1, r9
 8005af0:	4640      	mov	r0, r8
 8005af2:	47d0      	blx	sl
 8005af4:	3001      	adds	r0, #1
 8005af6:	d09b      	beq.n	8005a30 <_printf_i+0x164>
 8005af8:	3501      	adds	r5, #1
 8005afa:	68e3      	ldr	r3, [r4, #12]
 8005afc:	9903      	ldr	r1, [sp, #12]
 8005afe:	1a5b      	subs	r3, r3, r1
 8005b00:	42ab      	cmp	r3, r5
 8005b02:	dcf2      	bgt.n	8005aea <_printf_i+0x21e>
 8005b04:	e7eb      	b.n	8005ade <_printf_i+0x212>
 8005b06:	2500      	movs	r5, #0
 8005b08:	f104 0619 	add.w	r6, r4, #25
 8005b0c:	e7f5      	b.n	8005afa <_printf_i+0x22e>
 8005b0e:	bf00      	nop
 8005b10:	08007c06 	.word	0x08007c06
 8005b14:	08007c17 	.word	0x08007c17

08005b18 <iprintf>:
 8005b18:	b40f      	push	{r0, r1, r2, r3}
 8005b1a:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <iprintf+0x2c>)
 8005b1c:	b513      	push	{r0, r1, r4, lr}
 8005b1e:	681c      	ldr	r4, [r3, #0]
 8005b20:	b124      	cbz	r4, 8005b2c <iprintf+0x14>
 8005b22:	69a3      	ldr	r3, [r4, #24]
 8005b24:	b913      	cbnz	r3, 8005b2c <iprintf+0x14>
 8005b26:	4620      	mov	r0, r4
 8005b28:	f001 f8e8 	bl	8006cfc <__sinit>
 8005b2c:	ab05      	add	r3, sp, #20
 8005b2e:	9a04      	ldr	r2, [sp, #16]
 8005b30:	68a1      	ldr	r1, [r4, #8]
 8005b32:	9301      	str	r3, [sp, #4]
 8005b34:	4620      	mov	r0, r4
 8005b36:	f001 fdbb 	bl	80076b0 <_vfiprintf_r>
 8005b3a:	b002      	add	sp, #8
 8005b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b40:	b004      	add	sp, #16
 8005b42:	4770      	bx	lr
 8005b44:	2000000c 	.word	0x2000000c

08005b48 <_puts_r>:
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	460e      	mov	r6, r1
 8005b4c:	4605      	mov	r5, r0
 8005b4e:	b118      	cbz	r0, 8005b58 <_puts_r+0x10>
 8005b50:	6983      	ldr	r3, [r0, #24]
 8005b52:	b90b      	cbnz	r3, 8005b58 <_puts_r+0x10>
 8005b54:	f001 f8d2 	bl	8006cfc <__sinit>
 8005b58:	69ab      	ldr	r3, [r5, #24]
 8005b5a:	68ac      	ldr	r4, [r5, #8]
 8005b5c:	b913      	cbnz	r3, 8005b64 <_puts_r+0x1c>
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f001 f8cc 	bl	8006cfc <__sinit>
 8005b64:	4b2c      	ldr	r3, [pc, #176]	; (8005c18 <_puts_r+0xd0>)
 8005b66:	429c      	cmp	r4, r3
 8005b68:	d120      	bne.n	8005bac <_puts_r+0x64>
 8005b6a:	686c      	ldr	r4, [r5, #4]
 8005b6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b6e:	07db      	lsls	r3, r3, #31
 8005b70:	d405      	bmi.n	8005b7e <_puts_r+0x36>
 8005b72:	89a3      	ldrh	r3, [r4, #12]
 8005b74:	0598      	lsls	r0, r3, #22
 8005b76:	d402      	bmi.n	8005b7e <_puts_r+0x36>
 8005b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b7a:	f001 f962 	bl	8006e42 <__retarget_lock_acquire_recursive>
 8005b7e:	89a3      	ldrh	r3, [r4, #12]
 8005b80:	0719      	lsls	r1, r3, #28
 8005b82:	d51d      	bpl.n	8005bc0 <_puts_r+0x78>
 8005b84:	6923      	ldr	r3, [r4, #16]
 8005b86:	b1db      	cbz	r3, 8005bc0 <_puts_r+0x78>
 8005b88:	3e01      	subs	r6, #1
 8005b8a:	68a3      	ldr	r3, [r4, #8]
 8005b8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b90:	3b01      	subs	r3, #1
 8005b92:	60a3      	str	r3, [r4, #8]
 8005b94:	bb39      	cbnz	r1, 8005be6 <_puts_r+0x9e>
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	da38      	bge.n	8005c0c <_puts_r+0xc4>
 8005b9a:	4622      	mov	r2, r4
 8005b9c:	210a      	movs	r1, #10
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 f858 	bl	8005c54 <__swbuf_r>
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d011      	beq.n	8005bcc <_puts_r+0x84>
 8005ba8:	250a      	movs	r5, #10
 8005baa:	e011      	b.n	8005bd0 <_puts_r+0x88>
 8005bac:	4b1b      	ldr	r3, [pc, #108]	; (8005c1c <_puts_r+0xd4>)
 8005bae:	429c      	cmp	r4, r3
 8005bb0:	d101      	bne.n	8005bb6 <_puts_r+0x6e>
 8005bb2:	68ac      	ldr	r4, [r5, #8]
 8005bb4:	e7da      	b.n	8005b6c <_puts_r+0x24>
 8005bb6:	4b1a      	ldr	r3, [pc, #104]	; (8005c20 <_puts_r+0xd8>)
 8005bb8:	429c      	cmp	r4, r3
 8005bba:	bf08      	it	eq
 8005bbc:	68ec      	ldreq	r4, [r5, #12]
 8005bbe:	e7d5      	b.n	8005b6c <_puts_r+0x24>
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	f000 f898 	bl	8005cf8 <__swsetup_r>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d0dd      	beq.n	8005b88 <_puts_r+0x40>
 8005bcc:	f04f 35ff 	mov.w	r5, #4294967295
 8005bd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bd2:	07da      	lsls	r2, r3, #31
 8005bd4:	d405      	bmi.n	8005be2 <_puts_r+0x9a>
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	059b      	lsls	r3, r3, #22
 8005bda:	d402      	bmi.n	8005be2 <_puts_r+0x9a>
 8005bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bde:	f001 f931 	bl	8006e44 <__retarget_lock_release_recursive>
 8005be2:	4628      	mov	r0, r5
 8005be4:	bd70      	pop	{r4, r5, r6, pc}
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	da04      	bge.n	8005bf4 <_puts_r+0xac>
 8005bea:	69a2      	ldr	r2, [r4, #24]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	dc06      	bgt.n	8005bfe <_puts_r+0xb6>
 8005bf0:	290a      	cmp	r1, #10
 8005bf2:	d004      	beq.n	8005bfe <_puts_r+0xb6>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	6022      	str	r2, [r4, #0]
 8005bfa:	7019      	strb	r1, [r3, #0]
 8005bfc:	e7c5      	b.n	8005b8a <_puts_r+0x42>
 8005bfe:	4622      	mov	r2, r4
 8005c00:	4628      	mov	r0, r5
 8005c02:	f000 f827 	bl	8005c54 <__swbuf_r>
 8005c06:	3001      	adds	r0, #1
 8005c08:	d1bf      	bne.n	8005b8a <_puts_r+0x42>
 8005c0a:	e7df      	b.n	8005bcc <_puts_r+0x84>
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	250a      	movs	r5, #10
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	6022      	str	r2, [r4, #0]
 8005c14:	701d      	strb	r5, [r3, #0]
 8005c16:	e7db      	b.n	8005bd0 <_puts_r+0x88>
 8005c18:	08007cdc 	.word	0x08007cdc
 8005c1c:	08007cfc 	.word	0x08007cfc
 8005c20:	08007cbc 	.word	0x08007cbc

08005c24 <puts>:
 8005c24:	4b02      	ldr	r3, [pc, #8]	; (8005c30 <puts+0xc>)
 8005c26:	4601      	mov	r1, r0
 8005c28:	6818      	ldr	r0, [r3, #0]
 8005c2a:	f7ff bf8d 	b.w	8005b48 <_puts_r>
 8005c2e:	bf00      	nop
 8005c30:	2000000c 	.word	0x2000000c

08005c34 <_sbrk_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4d06      	ldr	r5, [pc, #24]	; (8005c50 <_sbrk_r+0x1c>)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	602b      	str	r3, [r5, #0]
 8005c40:	f7fc f8a4 	bl	8001d8c <_sbrk>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_sbrk_r+0x1a>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_sbrk_r+0x1a>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	200004e0 	.word	0x200004e0

08005c54 <__swbuf_r>:
 8005c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c56:	460e      	mov	r6, r1
 8005c58:	4614      	mov	r4, r2
 8005c5a:	4605      	mov	r5, r0
 8005c5c:	b118      	cbz	r0, 8005c66 <__swbuf_r+0x12>
 8005c5e:	6983      	ldr	r3, [r0, #24]
 8005c60:	b90b      	cbnz	r3, 8005c66 <__swbuf_r+0x12>
 8005c62:	f001 f84b 	bl	8006cfc <__sinit>
 8005c66:	4b21      	ldr	r3, [pc, #132]	; (8005cec <__swbuf_r+0x98>)
 8005c68:	429c      	cmp	r4, r3
 8005c6a:	d12b      	bne.n	8005cc4 <__swbuf_r+0x70>
 8005c6c:	686c      	ldr	r4, [r5, #4]
 8005c6e:	69a3      	ldr	r3, [r4, #24]
 8005c70:	60a3      	str	r3, [r4, #8]
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	071a      	lsls	r2, r3, #28
 8005c76:	d52f      	bpl.n	8005cd8 <__swbuf_r+0x84>
 8005c78:	6923      	ldr	r3, [r4, #16]
 8005c7a:	b36b      	cbz	r3, 8005cd8 <__swbuf_r+0x84>
 8005c7c:	6923      	ldr	r3, [r4, #16]
 8005c7e:	6820      	ldr	r0, [r4, #0]
 8005c80:	1ac0      	subs	r0, r0, r3
 8005c82:	6963      	ldr	r3, [r4, #20]
 8005c84:	b2f6      	uxtb	r6, r6
 8005c86:	4283      	cmp	r3, r0
 8005c88:	4637      	mov	r7, r6
 8005c8a:	dc04      	bgt.n	8005c96 <__swbuf_r+0x42>
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f000 ffa0 	bl	8006bd4 <_fflush_r>
 8005c94:	bb30      	cbnz	r0, 8005ce4 <__swbuf_r+0x90>
 8005c96:	68a3      	ldr	r3, [r4, #8]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	60a3      	str	r3, [r4, #8]
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	6022      	str	r2, [r4, #0]
 8005ca2:	701e      	strb	r6, [r3, #0]
 8005ca4:	6963      	ldr	r3, [r4, #20]
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	4283      	cmp	r3, r0
 8005caa:	d004      	beq.n	8005cb6 <__swbuf_r+0x62>
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	07db      	lsls	r3, r3, #31
 8005cb0:	d506      	bpl.n	8005cc0 <__swbuf_r+0x6c>
 8005cb2:	2e0a      	cmp	r6, #10
 8005cb4:	d104      	bne.n	8005cc0 <__swbuf_r+0x6c>
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	4628      	mov	r0, r5
 8005cba:	f000 ff8b 	bl	8006bd4 <_fflush_r>
 8005cbe:	b988      	cbnz	r0, 8005ce4 <__swbuf_r+0x90>
 8005cc0:	4638      	mov	r0, r7
 8005cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cc4:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <__swbuf_r+0x9c>)
 8005cc6:	429c      	cmp	r4, r3
 8005cc8:	d101      	bne.n	8005cce <__swbuf_r+0x7a>
 8005cca:	68ac      	ldr	r4, [r5, #8]
 8005ccc:	e7cf      	b.n	8005c6e <__swbuf_r+0x1a>
 8005cce:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <__swbuf_r+0xa0>)
 8005cd0:	429c      	cmp	r4, r3
 8005cd2:	bf08      	it	eq
 8005cd4:	68ec      	ldreq	r4, [r5, #12]
 8005cd6:	e7ca      	b.n	8005c6e <__swbuf_r+0x1a>
 8005cd8:	4621      	mov	r1, r4
 8005cda:	4628      	mov	r0, r5
 8005cdc:	f000 f80c 	bl	8005cf8 <__swsetup_r>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d0cb      	beq.n	8005c7c <__swbuf_r+0x28>
 8005ce4:	f04f 37ff 	mov.w	r7, #4294967295
 8005ce8:	e7ea      	b.n	8005cc0 <__swbuf_r+0x6c>
 8005cea:	bf00      	nop
 8005cec:	08007cdc 	.word	0x08007cdc
 8005cf0:	08007cfc 	.word	0x08007cfc
 8005cf4:	08007cbc 	.word	0x08007cbc

08005cf8 <__swsetup_r>:
 8005cf8:	4b32      	ldr	r3, [pc, #200]	; (8005dc4 <__swsetup_r+0xcc>)
 8005cfa:	b570      	push	{r4, r5, r6, lr}
 8005cfc:	681d      	ldr	r5, [r3, #0]
 8005cfe:	4606      	mov	r6, r0
 8005d00:	460c      	mov	r4, r1
 8005d02:	b125      	cbz	r5, 8005d0e <__swsetup_r+0x16>
 8005d04:	69ab      	ldr	r3, [r5, #24]
 8005d06:	b913      	cbnz	r3, 8005d0e <__swsetup_r+0x16>
 8005d08:	4628      	mov	r0, r5
 8005d0a:	f000 fff7 	bl	8006cfc <__sinit>
 8005d0e:	4b2e      	ldr	r3, [pc, #184]	; (8005dc8 <__swsetup_r+0xd0>)
 8005d10:	429c      	cmp	r4, r3
 8005d12:	d10f      	bne.n	8005d34 <__swsetup_r+0x3c>
 8005d14:	686c      	ldr	r4, [r5, #4]
 8005d16:	89a3      	ldrh	r3, [r4, #12]
 8005d18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d1c:	0719      	lsls	r1, r3, #28
 8005d1e:	d42c      	bmi.n	8005d7a <__swsetup_r+0x82>
 8005d20:	06dd      	lsls	r5, r3, #27
 8005d22:	d411      	bmi.n	8005d48 <__swsetup_r+0x50>
 8005d24:	2309      	movs	r3, #9
 8005d26:	6033      	str	r3, [r6, #0]
 8005d28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d2c:	81a3      	strh	r3, [r4, #12]
 8005d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d32:	e03e      	b.n	8005db2 <__swsetup_r+0xba>
 8005d34:	4b25      	ldr	r3, [pc, #148]	; (8005dcc <__swsetup_r+0xd4>)
 8005d36:	429c      	cmp	r4, r3
 8005d38:	d101      	bne.n	8005d3e <__swsetup_r+0x46>
 8005d3a:	68ac      	ldr	r4, [r5, #8]
 8005d3c:	e7eb      	b.n	8005d16 <__swsetup_r+0x1e>
 8005d3e:	4b24      	ldr	r3, [pc, #144]	; (8005dd0 <__swsetup_r+0xd8>)
 8005d40:	429c      	cmp	r4, r3
 8005d42:	bf08      	it	eq
 8005d44:	68ec      	ldreq	r4, [r5, #12]
 8005d46:	e7e6      	b.n	8005d16 <__swsetup_r+0x1e>
 8005d48:	0758      	lsls	r0, r3, #29
 8005d4a:	d512      	bpl.n	8005d72 <__swsetup_r+0x7a>
 8005d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d4e:	b141      	cbz	r1, 8005d62 <__swsetup_r+0x6a>
 8005d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d54:	4299      	cmp	r1, r3
 8005d56:	d002      	beq.n	8005d5e <__swsetup_r+0x66>
 8005d58:	4630      	mov	r0, r6
 8005d5a:	f7ff f9c9 	bl	80050f0 <_free_r>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	6363      	str	r3, [r4, #52]	; 0x34
 8005d62:	89a3      	ldrh	r3, [r4, #12]
 8005d64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d68:	81a3      	strh	r3, [r4, #12]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	6063      	str	r3, [r4, #4]
 8005d6e:	6923      	ldr	r3, [r4, #16]
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	89a3      	ldrh	r3, [r4, #12]
 8005d74:	f043 0308 	orr.w	r3, r3, #8
 8005d78:	81a3      	strh	r3, [r4, #12]
 8005d7a:	6923      	ldr	r3, [r4, #16]
 8005d7c:	b94b      	cbnz	r3, 8005d92 <__swsetup_r+0x9a>
 8005d7e:	89a3      	ldrh	r3, [r4, #12]
 8005d80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d88:	d003      	beq.n	8005d92 <__swsetup_r+0x9a>
 8005d8a:	4621      	mov	r1, r4
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	f001 f87f 	bl	8006e90 <__smakebuf_r>
 8005d92:	89a0      	ldrh	r0, [r4, #12]
 8005d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d98:	f010 0301 	ands.w	r3, r0, #1
 8005d9c:	d00a      	beq.n	8005db4 <__swsetup_r+0xbc>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60a3      	str	r3, [r4, #8]
 8005da2:	6963      	ldr	r3, [r4, #20]
 8005da4:	425b      	negs	r3, r3
 8005da6:	61a3      	str	r3, [r4, #24]
 8005da8:	6923      	ldr	r3, [r4, #16]
 8005daa:	b943      	cbnz	r3, 8005dbe <__swsetup_r+0xc6>
 8005dac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005db0:	d1ba      	bne.n	8005d28 <__swsetup_r+0x30>
 8005db2:	bd70      	pop	{r4, r5, r6, pc}
 8005db4:	0781      	lsls	r1, r0, #30
 8005db6:	bf58      	it	pl
 8005db8:	6963      	ldrpl	r3, [r4, #20]
 8005dba:	60a3      	str	r3, [r4, #8]
 8005dbc:	e7f4      	b.n	8005da8 <__swsetup_r+0xb0>
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	e7f7      	b.n	8005db2 <__swsetup_r+0xba>
 8005dc2:	bf00      	nop
 8005dc4:	2000000c 	.word	0x2000000c
 8005dc8:	08007cdc 	.word	0x08007cdc
 8005dcc:	08007cfc 	.word	0x08007cfc
 8005dd0:	08007cbc 	.word	0x08007cbc

08005dd4 <quorem>:
 8005dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd8:	6903      	ldr	r3, [r0, #16]
 8005dda:	690c      	ldr	r4, [r1, #16]
 8005ddc:	42a3      	cmp	r3, r4
 8005dde:	4607      	mov	r7, r0
 8005de0:	f2c0 8081 	blt.w	8005ee6 <quorem+0x112>
 8005de4:	3c01      	subs	r4, #1
 8005de6:	f101 0814 	add.w	r8, r1, #20
 8005dea:	f100 0514 	add.w	r5, r0, #20
 8005dee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005df2:	9301      	str	r3, [sp, #4]
 8005df4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005df8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e08:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e0c:	d331      	bcc.n	8005e72 <quorem+0x9e>
 8005e0e:	f04f 0e00 	mov.w	lr, #0
 8005e12:	4640      	mov	r0, r8
 8005e14:	46ac      	mov	ip, r5
 8005e16:	46f2      	mov	sl, lr
 8005e18:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e1c:	b293      	uxth	r3, r2
 8005e1e:	fb06 e303 	mla	r3, r6, r3, lr
 8005e22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	ebaa 0303 	sub.w	r3, sl, r3
 8005e2c:	0c12      	lsrs	r2, r2, #16
 8005e2e:	f8dc a000 	ldr.w	sl, [ip]
 8005e32:	fb06 e202 	mla	r2, r6, r2, lr
 8005e36:	fa13 f38a 	uxtah	r3, r3, sl
 8005e3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e3e:	fa1f fa82 	uxth.w	sl, r2
 8005e42:	f8dc 2000 	ldr.w	r2, [ip]
 8005e46:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005e4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e54:	4581      	cmp	r9, r0
 8005e56:	f84c 3b04 	str.w	r3, [ip], #4
 8005e5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e5e:	d2db      	bcs.n	8005e18 <quorem+0x44>
 8005e60:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e64:	b92b      	cbnz	r3, 8005e72 <quorem+0x9e>
 8005e66:	9b01      	ldr	r3, [sp, #4]
 8005e68:	3b04      	subs	r3, #4
 8005e6a:	429d      	cmp	r5, r3
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	d32e      	bcc.n	8005ece <quorem+0xfa>
 8005e70:	613c      	str	r4, [r7, #16]
 8005e72:	4638      	mov	r0, r7
 8005e74:	f001 fae4 	bl	8007440 <__mcmp>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	db24      	blt.n	8005ec6 <quorem+0xf2>
 8005e7c:	3601      	adds	r6, #1
 8005e7e:	4628      	mov	r0, r5
 8005e80:	f04f 0c00 	mov.w	ip, #0
 8005e84:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e88:	f8d0 e000 	ldr.w	lr, [r0]
 8005e8c:	b293      	uxth	r3, r2
 8005e8e:	ebac 0303 	sub.w	r3, ip, r3
 8005e92:	0c12      	lsrs	r2, r2, #16
 8005e94:	fa13 f38e 	uxtah	r3, r3, lr
 8005e98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ea6:	45c1      	cmp	r9, r8
 8005ea8:	f840 3b04 	str.w	r3, [r0], #4
 8005eac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005eb0:	d2e8      	bcs.n	8005e84 <quorem+0xb0>
 8005eb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005eb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eba:	b922      	cbnz	r2, 8005ec6 <quorem+0xf2>
 8005ebc:	3b04      	subs	r3, #4
 8005ebe:	429d      	cmp	r5, r3
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	d30a      	bcc.n	8005eda <quorem+0x106>
 8005ec4:	613c      	str	r4, [r7, #16]
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	b003      	add	sp, #12
 8005eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ece:	6812      	ldr	r2, [r2, #0]
 8005ed0:	3b04      	subs	r3, #4
 8005ed2:	2a00      	cmp	r2, #0
 8005ed4:	d1cc      	bne.n	8005e70 <quorem+0x9c>
 8005ed6:	3c01      	subs	r4, #1
 8005ed8:	e7c7      	b.n	8005e6a <quorem+0x96>
 8005eda:	6812      	ldr	r2, [r2, #0]
 8005edc:	3b04      	subs	r3, #4
 8005ede:	2a00      	cmp	r2, #0
 8005ee0:	d1f0      	bne.n	8005ec4 <quorem+0xf0>
 8005ee2:	3c01      	subs	r4, #1
 8005ee4:	e7eb      	b.n	8005ebe <quorem+0xea>
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	e7ee      	b.n	8005ec8 <quorem+0xf4>
 8005eea:	0000      	movs	r0, r0
 8005eec:	0000      	movs	r0, r0
	...

08005ef0 <_dtoa_r>:
 8005ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef4:	ed2d 8b02 	vpush	{d8}
 8005ef8:	ec57 6b10 	vmov	r6, r7, d0
 8005efc:	b095      	sub	sp, #84	; 0x54
 8005efe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f04:	9105      	str	r1, [sp, #20]
 8005f06:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f10:	b975      	cbnz	r5, 8005f30 <_dtoa_r+0x40>
 8005f12:	2010      	movs	r0, #16
 8005f14:	f7ff f8dc 	bl	80050d0 <malloc>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	6260      	str	r0, [r4, #36]	; 0x24
 8005f1c:	b920      	cbnz	r0, 8005f28 <_dtoa_r+0x38>
 8005f1e:	4bb2      	ldr	r3, [pc, #712]	; (80061e8 <_dtoa_r+0x2f8>)
 8005f20:	21ea      	movs	r1, #234	; 0xea
 8005f22:	48b2      	ldr	r0, [pc, #712]	; (80061ec <_dtoa_r+0x2fc>)
 8005f24:	f001 fd4a 	bl	80079bc <__assert_func>
 8005f28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f2c:	6005      	str	r5, [r0, #0]
 8005f2e:	60c5      	str	r5, [r0, #12]
 8005f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f32:	6819      	ldr	r1, [r3, #0]
 8005f34:	b151      	cbz	r1, 8005f4c <_dtoa_r+0x5c>
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	604a      	str	r2, [r1, #4]
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	4093      	lsls	r3, r2
 8005f3e:	608b      	str	r3, [r1, #8]
 8005f40:	4620      	mov	r0, r4
 8005f42:	f001 f83f 	bl	8006fc4 <_Bfree>
 8005f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	1e3b      	subs	r3, r7, #0
 8005f4e:	bfb9      	ittee	lt
 8005f50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f54:	9303      	strlt	r3, [sp, #12]
 8005f56:	2300      	movge	r3, #0
 8005f58:	f8c8 3000 	strge.w	r3, [r8]
 8005f5c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005f60:	4ba3      	ldr	r3, [pc, #652]	; (80061f0 <_dtoa_r+0x300>)
 8005f62:	bfbc      	itt	lt
 8005f64:	2201      	movlt	r2, #1
 8005f66:	f8c8 2000 	strlt.w	r2, [r8]
 8005f6a:	ea33 0309 	bics.w	r3, r3, r9
 8005f6e:	d11b      	bne.n	8005fa8 <_dtoa_r+0xb8>
 8005f70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f72:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f7c:	4333      	orrs	r3, r6
 8005f7e:	f000 857a 	beq.w	8006a76 <_dtoa_r+0xb86>
 8005f82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f84:	b963      	cbnz	r3, 8005fa0 <_dtoa_r+0xb0>
 8005f86:	4b9b      	ldr	r3, [pc, #620]	; (80061f4 <_dtoa_r+0x304>)
 8005f88:	e024      	b.n	8005fd4 <_dtoa_r+0xe4>
 8005f8a:	4b9b      	ldr	r3, [pc, #620]	; (80061f8 <_dtoa_r+0x308>)
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	3308      	adds	r3, #8
 8005f90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	9800      	ldr	r0, [sp, #0]
 8005f96:	b015      	add	sp, #84	; 0x54
 8005f98:	ecbd 8b02 	vpop	{d8}
 8005f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa0:	4b94      	ldr	r3, [pc, #592]	; (80061f4 <_dtoa_r+0x304>)
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	3303      	adds	r3, #3
 8005fa6:	e7f3      	b.n	8005f90 <_dtoa_r+0xa0>
 8005fa8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fac:	2200      	movs	r2, #0
 8005fae:	ec51 0b17 	vmov	r0, r1, d7
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005fb8:	f7fa fd96 	bl	8000ae8 <__aeabi_dcmpeq>
 8005fbc:	4680      	mov	r8, r0
 8005fbe:	b158      	cbz	r0, 8005fd8 <_dtoa_r+0xe8>
 8005fc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 8551 	beq.w	8006a70 <_dtoa_r+0xb80>
 8005fce:	488b      	ldr	r0, [pc, #556]	; (80061fc <_dtoa_r+0x30c>)
 8005fd0:	6018      	str	r0, [r3, #0]
 8005fd2:	1e43      	subs	r3, r0, #1
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	e7dd      	b.n	8005f94 <_dtoa_r+0xa4>
 8005fd8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005fdc:	aa12      	add	r2, sp, #72	; 0x48
 8005fde:	a913      	add	r1, sp, #76	; 0x4c
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f001 fad1 	bl	8007588 <__d2b>
 8005fe6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005fea:	4683      	mov	fp, r0
 8005fec:	2d00      	cmp	r5, #0
 8005fee:	d07c      	beq.n	80060ea <_dtoa_r+0x1fa>
 8005ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ff2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005ff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ffa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005ffe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006002:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006006:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800600a:	4b7d      	ldr	r3, [pc, #500]	; (8006200 <_dtoa_r+0x310>)
 800600c:	2200      	movs	r2, #0
 800600e:	4630      	mov	r0, r6
 8006010:	4639      	mov	r1, r7
 8006012:	f7fa f949 	bl	80002a8 <__aeabi_dsub>
 8006016:	a36e      	add	r3, pc, #440	; (adr r3, 80061d0 <_dtoa_r+0x2e0>)
 8006018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601c:	f7fa fafc 	bl	8000618 <__aeabi_dmul>
 8006020:	a36d      	add	r3, pc, #436	; (adr r3, 80061d8 <_dtoa_r+0x2e8>)
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	f7fa f941 	bl	80002ac <__adddf3>
 800602a:	4606      	mov	r6, r0
 800602c:	4628      	mov	r0, r5
 800602e:	460f      	mov	r7, r1
 8006030:	f7fa fa88 	bl	8000544 <__aeabi_i2d>
 8006034:	a36a      	add	r3, pc, #424	; (adr r3, 80061e0 <_dtoa_r+0x2f0>)
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	f7fa faed 	bl	8000618 <__aeabi_dmul>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	4630      	mov	r0, r6
 8006044:	4639      	mov	r1, r7
 8006046:	f7fa f931 	bl	80002ac <__adddf3>
 800604a:	4606      	mov	r6, r0
 800604c:	460f      	mov	r7, r1
 800604e:	f7fa fd93 	bl	8000b78 <__aeabi_d2iz>
 8006052:	2200      	movs	r2, #0
 8006054:	4682      	mov	sl, r0
 8006056:	2300      	movs	r3, #0
 8006058:	4630      	mov	r0, r6
 800605a:	4639      	mov	r1, r7
 800605c:	f7fa fd4e 	bl	8000afc <__aeabi_dcmplt>
 8006060:	b148      	cbz	r0, 8006076 <_dtoa_r+0x186>
 8006062:	4650      	mov	r0, sl
 8006064:	f7fa fa6e 	bl	8000544 <__aeabi_i2d>
 8006068:	4632      	mov	r2, r6
 800606a:	463b      	mov	r3, r7
 800606c:	f7fa fd3c 	bl	8000ae8 <__aeabi_dcmpeq>
 8006070:	b908      	cbnz	r0, 8006076 <_dtoa_r+0x186>
 8006072:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006076:	f1ba 0f16 	cmp.w	sl, #22
 800607a:	d854      	bhi.n	8006126 <_dtoa_r+0x236>
 800607c:	4b61      	ldr	r3, [pc, #388]	; (8006204 <_dtoa_r+0x314>)
 800607e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800608a:	f7fa fd37 	bl	8000afc <__aeabi_dcmplt>
 800608e:	2800      	cmp	r0, #0
 8006090:	d04b      	beq.n	800612a <_dtoa_r+0x23a>
 8006092:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006096:	2300      	movs	r3, #0
 8006098:	930e      	str	r3, [sp, #56]	; 0x38
 800609a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800609c:	1b5d      	subs	r5, r3, r5
 800609e:	1e6b      	subs	r3, r5, #1
 80060a0:	9304      	str	r3, [sp, #16]
 80060a2:	bf43      	ittte	mi
 80060a4:	2300      	movmi	r3, #0
 80060a6:	f1c5 0801 	rsbmi	r8, r5, #1
 80060aa:	9304      	strmi	r3, [sp, #16]
 80060ac:	f04f 0800 	movpl.w	r8, #0
 80060b0:	f1ba 0f00 	cmp.w	sl, #0
 80060b4:	db3b      	blt.n	800612e <_dtoa_r+0x23e>
 80060b6:	9b04      	ldr	r3, [sp, #16]
 80060b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80060bc:	4453      	add	r3, sl
 80060be:	9304      	str	r3, [sp, #16]
 80060c0:	2300      	movs	r3, #0
 80060c2:	9306      	str	r3, [sp, #24]
 80060c4:	9b05      	ldr	r3, [sp, #20]
 80060c6:	2b09      	cmp	r3, #9
 80060c8:	d869      	bhi.n	800619e <_dtoa_r+0x2ae>
 80060ca:	2b05      	cmp	r3, #5
 80060cc:	bfc4      	itt	gt
 80060ce:	3b04      	subgt	r3, #4
 80060d0:	9305      	strgt	r3, [sp, #20]
 80060d2:	9b05      	ldr	r3, [sp, #20]
 80060d4:	f1a3 0302 	sub.w	r3, r3, #2
 80060d8:	bfcc      	ite	gt
 80060da:	2500      	movgt	r5, #0
 80060dc:	2501      	movle	r5, #1
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d869      	bhi.n	80061b6 <_dtoa_r+0x2c6>
 80060e2:	e8df f003 	tbb	[pc, r3]
 80060e6:	4e2c      	.short	0x4e2c
 80060e8:	5a4c      	.short	0x5a4c
 80060ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80060ee:	441d      	add	r5, r3
 80060f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	bfc1      	itttt	gt
 80060f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80060fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006100:	fa09 f303 	lslgt.w	r3, r9, r3
 8006104:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006108:	bfda      	itte	le
 800610a:	f1c3 0320 	rsble	r3, r3, #32
 800610e:	fa06 f003 	lslle.w	r0, r6, r3
 8006112:	4318      	orrgt	r0, r3
 8006114:	f7fa fa06 	bl	8000524 <__aeabi_ui2d>
 8006118:	2301      	movs	r3, #1
 800611a:	4606      	mov	r6, r0
 800611c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006120:	3d01      	subs	r5, #1
 8006122:	9310      	str	r3, [sp, #64]	; 0x40
 8006124:	e771      	b.n	800600a <_dtoa_r+0x11a>
 8006126:	2301      	movs	r3, #1
 8006128:	e7b6      	b.n	8006098 <_dtoa_r+0x1a8>
 800612a:	900e      	str	r0, [sp, #56]	; 0x38
 800612c:	e7b5      	b.n	800609a <_dtoa_r+0x1aa>
 800612e:	f1ca 0300 	rsb	r3, sl, #0
 8006132:	9306      	str	r3, [sp, #24]
 8006134:	2300      	movs	r3, #0
 8006136:	eba8 080a 	sub.w	r8, r8, sl
 800613a:	930d      	str	r3, [sp, #52]	; 0x34
 800613c:	e7c2      	b.n	80060c4 <_dtoa_r+0x1d4>
 800613e:	2300      	movs	r3, #0
 8006140:	9308      	str	r3, [sp, #32]
 8006142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006144:	2b00      	cmp	r3, #0
 8006146:	dc39      	bgt.n	80061bc <_dtoa_r+0x2cc>
 8006148:	f04f 0901 	mov.w	r9, #1
 800614c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006150:	464b      	mov	r3, r9
 8006152:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006156:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006158:	2200      	movs	r2, #0
 800615a:	6042      	str	r2, [r0, #4]
 800615c:	2204      	movs	r2, #4
 800615e:	f102 0614 	add.w	r6, r2, #20
 8006162:	429e      	cmp	r6, r3
 8006164:	6841      	ldr	r1, [r0, #4]
 8006166:	d92f      	bls.n	80061c8 <_dtoa_r+0x2d8>
 8006168:	4620      	mov	r0, r4
 800616a:	f000 feeb 	bl	8006f44 <_Balloc>
 800616e:	9000      	str	r0, [sp, #0]
 8006170:	2800      	cmp	r0, #0
 8006172:	d14b      	bne.n	800620c <_dtoa_r+0x31c>
 8006174:	4b24      	ldr	r3, [pc, #144]	; (8006208 <_dtoa_r+0x318>)
 8006176:	4602      	mov	r2, r0
 8006178:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800617c:	e6d1      	b.n	8005f22 <_dtoa_r+0x32>
 800617e:	2301      	movs	r3, #1
 8006180:	e7de      	b.n	8006140 <_dtoa_r+0x250>
 8006182:	2300      	movs	r3, #0
 8006184:	9308      	str	r3, [sp, #32]
 8006186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006188:	eb0a 0903 	add.w	r9, sl, r3
 800618c:	f109 0301 	add.w	r3, r9, #1
 8006190:	2b01      	cmp	r3, #1
 8006192:	9301      	str	r3, [sp, #4]
 8006194:	bfb8      	it	lt
 8006196:	2301      	movlt	r3, #1
 8006198:	e7dd      	b.n	8006156 <_dtoa_r+0x266>
 800619a:	2301      	movs	r3, #1
 800619c:	e7f2      	b.n	8006184 <_dtoa_r+0x294>
 800619e:	2501      	movs	r5, #1
 80061a0:	2300      	movs	r3, #0
 80061a2:	9305      	str	r3, [sp, #20]
 80061a4:	9508      	str	r5, [sp, #32]
 80061a6:	f04f 39ff 	mov.w	r9, #4294967295
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80061b0:	2312      	movs	r3, #18
 80061b2:	9209      	str	r2, [sp, #36]	; 0x24
 80061b4:	e7cf      	b.n	8006156 <_dtoa_r+0x266>
 80061b6:	2301      	movs	r3, #1
 80061b8:	9308      	str	r3, [sp, #32]
 80061ba:	e7f4      	b.n	80061a6 <_dtoa_r+0x2b6>
 80061bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80061c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80061c4:	464b      	mov	r3, r9
 80061c6:	e7c6      	b.n	8006156 <_dtoa_r+0x266>
 80061c8:	3101      	adds	r1, #1
 80061ca:	6041      	str	r1, [r0, #4]
 80061cc:	0052      	lsls	r2, r2, #1
 80061ce:	e7c6      	b.n	800615e <_dtoa_r+0x26e>
 80061d0:	636f4361 	.word	0x636f4361
 80061d4:	3fd287a7 	.word	0x3fd287a7
 80061d8:	8b60c8b3 	.word	0x8b60c8b3
 80061dc:	3fc68a28 	.word	0x3fc68a28
 80061e0:	509f79fb 	.word	0x509f79fb
 80061e4:	3fd34413 	.word	0x3fd34413
 80061e8:	08007c35 	.word	0x08007c35
 80061ec:	08007c4c 	.word	0x08007c4c
 80061f0:	7ff00000 	.word	0x7ff00000
 80061f4:	08007c31 	.word	0x08007c31
 80061f8:	08007c28 	.word	0x08007c28
 80061fc:	08007c05 	.word	0x08007c05
 8006200:	3ff80000 	.word	0x3ff80000
 8006204:	08007da8 	.word	0x08007da8
 8006208:	08007cab 	.word	0x08007cab
 800620c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800620e:	9a00      	ldr	r2, [sp, #0]
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	9b01      	ldr	r3, [sp, #4]
 8006214:	2b0e      	cmp	r3, #14
 8006216:	f200 80ad 	bhi.w	8006374 <_dtoa_r+0x484>
 800621a:	2d00      	cmp	r5, #0
 800621c:	f000 80aa 	beq.w	8006374 <_dtoa_r+0x484>
 8006220:	f1ba 0f00 	cmp.w	sl, #0
 8006224:	dd36      	ble.n	8006294 <_dtoa_r+0x3a4>
 8006226:	4ac3      	ldr	r2, [pc, #780]	; (8006534 <_dtoa_r+0x644>)
 8006228:	f00a 030f 	and.w	r3, sl, #15
 800622c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006230:	ed93 7b00 	vldr	d7, [r3]
 8006234:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006238:	ea4f 172a 	mov.w	r7, sl, asr #4
 800623c:	eeb0 8a47 	vmov.f32	s16, s14
 8006240:	eef0 8a67 	vmov.f32	s17, s15
 8006244:	d016      	beq.n	8006274 <_dtoa_r+0x384>
 8006246:	4bbc      	ldr	r3, [pc, #752]	; (8006538 <_dtoa_r+0x648>)
 8006248:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800624c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006250:	f7fa fb0c 	bl	800086c <__aeabi_ddiv>
 8006254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006258:	f007 070f 	and.w	r7, r7, #15
 800625c:	2503      	movs	r5, #3
 800625e:	4eb6      	ldr	r6, [pc, #728]	; (8006538 <_dtoa_r+0x648>)
 8006260:	b957      	cbnz	r7, 8006278 <_dtoa_r+0x388>
 8006262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006266:	ec53 2b18 	vmov	r2, r3, d8
 800626a:	f7fa faff 	bl	800086c <__aeabi_ddiv>
 800626e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006272:	e029      	b.n	80062c8 <_dtoa_r+0x3d8>
 8006274:	2502      	movs	r5, #2
 8006276:	e7f2      	b.n	800625e <_dtoa_r+0x36e>
 8006278:	07f9      	lsls	r1, r7, #31
 800627a:	d508      	bpl.n	800628e <_dtoa_r+0x39e>
 800627c:	ec51 0b18 	vmov	r0, r1, d8
 8006280:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006284:	f7fa f9c8 	bl	8000618 <__aeabi_dmul>
 8006288:	ec41 0b18 	vmov	d8, r0, r1
 800628c:	3501      	adds	r5, #1
 800628e:	107f      	asrs	r7, r7, #1
 8006290:	3608      	adds	r6, #8
 8006292:	e7e5      	b.n	8006260 <_dtoa_r+0x370>
 8006294:	f000 80a6 	beq.w	80063e4 <_dtoa_r+0x4f4>
 8006298:	f1ca 0600 	rsb	r6, sl, #0
 800629c:	4ba5      	ldr	r3, [pc, #660]	; (8006534 <_dtoa_r+0x644>)
 800629e:	4fa6      	ldr	r7, [pc, #664]	; (8006538 <_dtoa_r+0x648>)
 80062a0:	f006 020f 	and.w	r2, r6, #15
 80062a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062b0:	f7fa f9b2 	bl	8000618 <__aeabi_dmul>
 80062b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062b8:	1136      	asrs	r6, r6, #4
 80062ba:	2300      	movs	r3, #0
 80062bc:	2502      	movs	r5, #2
 80062be:	2e00      	cmp	r6, #0
 80062c0:	f040 8085 	bne.w	80063ce <_dtoa_r+0x4de>
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1d2      	bne.n	800626e <_dtoa_r+0x37e>
 80062c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 808c 	beq.w	80063e8 <_dtoa_r+0x4f8>
 80062d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80062d4:	4b99      	ldr	r3, [pc, #612]	; (800653c <_dtoa_r+0x64c>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	4630      	mov	r0, r6
 80062da:	4639      	mov	r1, r7
 80062dc:	f7fa fc0e 	bl	8000afc <__aeabi_dcmplt>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	f000 8081 	beq.w	80063e8 <_dtoa_r+0x4f8>
 80062e6:	9b01      	ldr	r3, [sp, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d07d      	beq.n	80063e8 <_dtoa_r+0x4f8>
 80062ec:	f1b9 0f00 	cmp.w	r9, #0
 80062f0:	dd3c      	ble.n	800636c <_dtoa_r+0x47c>
 80062f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80062f6:	9307      	str	r3, [sp, #28]
 80062f8:	2200      	movs	r2, #0
 80062fa:	4b91      	ldr	r3, [pc, #580]	; (8006540 <_dtoa_r+0x650>)
 80062fc:	4630      	mov	r0, r6
 80062fe:	4639      	mov	r1, r7
 8006300:	f7fa f98a 	bl	8000618 <__aeabi_dmul>
 8006304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006308:	3501      	adds	r5, #1
 800630a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800630e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006312:	4628      	mov	r0, r5
 8006314:	f7fa f916 	bl	8000544 <__aeabi_i2d>
 8006318:	4632      	mov	r2, r6
 800631a:	463b      	mov	r3, r7
 800631c:	f7fa f97c 	bl	8000618 <__aeabi_dmul>
 8006320:	4b88      	ldr	r3, [pc, #544]	; (8006544 <_dtoa_r+0x654>)
 8006322:	2200      	movs	r2, #0
 8006324:	f7f9 ffc2 	bl	80002ac <__adddf3>
 8006328:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800632c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006330:	9303      	str	r3, [sp, #12]
 8006332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006334:	2b00      	cmp	r3, #0
 8006336:	d15c      	bne.n	80063f2 <_dtoa_r+0x502>
 8006338:	4b83      	ldr	r3, [pc, #524]	; (8006548 <_dtoa_r+0x658>)
 800633a:	2200      	movs	r2, #0
 800633c:	4630      	mov	r0, r6
 800633e:	4639      	mov	r1, r7
 8006340:	f7f9 ffb2 	bl	80002a8 <__aeabi_dsub>
 8006344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006348:	4606      	mov	r6, r0
 800634a:	460f      	mov	r7, r1
 800634c:	f7fa fbf4 	bl	8000b38 <__aeabi_dcmpgt>
 8006350:	2800      	cmp	r0, #0
 8006352:	f040 8296 	bne.w	8006882 <_dtoa_r+0x992>
 8006356:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800635a:	4630      	mov	r0, r6
 800635c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006360:	4639      	mov	r1, r7
 8006362:	f7fa fbcb 	bl	8000afc <__aeabi_dcmplt>
 8006366:	2800      	cmp	r0, #0
 8006368:	f040 8288 	bne.w	800687c <_dtoa_r+0x98c>
 800636c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006370:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006374:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006376:	2b00      	cmp	r3, #0
 8006378:	f2c0 8158 	blt.w	800662c <_dtoa_r+0x73c>
 800637c:	f1ba 0f0e 	cmp.w	sl, #14
 8006380:	f300 8154 	bgt.w	800662c <_dtoa_r+0x73c>
 8006384:	4b6b      	ldr	r3, [pc, #428]	; (8006534 <_dtoa_r+0x644>)
 8006386:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800638a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800638e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006390:	2b00      	cmp	r3, #0
 8006392:	f280 80e3 	bge.w	800655c <_dtoa_r+0x66c>
 8006396:	9b01      	ldr	r3, [sp, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	f300 80df 	bgt.w	800655c <_dtoa_r+0x66c>
 800639e:	f040 826d 	bne.w	800687c <_dtoa_r+0x98c>
 80063a2:	4b69      	ldr	r3, [pc, #420]	; (8006548 <_dtoa_r+0x658>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	4640      	mov	r0, r8
 80063a8:	4649      	mov	r1, r9
 80063aa:	f7fa f935 	bl	8000618 <__aeabi_dmul>
 80063ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063b2:	f7fa fbb7 	bl	8000b24 <__aeabi_dcmpge>
 80063b6:	9e01      	ldr	r6, [sp, #4]
 80063b8:	4637      	mov	r7, r6
 80063ba:	2800      	cmp	r0, #0
 80063bc:	f040 8243 	bne.w	8006846 <_dtoa_r+0x956>
 80063c0:	9d00      	ldr	r5, [sp, #0]
 80063c2:	2331      	movs	r3, #49	; 0x31
 80063c4:	f805 3b01 	strb.w	r3, [r5], #1
 80063c8:	f10a 0a01 	add.w	sl, sl, #1
 80063cc:	e23f      	b.n	800684e <_dtoa_r+0x95e>
 80063ce:	07f2      	lsls	r2, r6, #31
 80063d0:	d505      	bpl.n	80063de <_dtoa_r+0x4ee>
 80063d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063d6:	f7fa f91f 	bl	8000618 <__aeabi_dmul>
 80063da:	3501      	adds	r5, #1
 80063dc:	2301      	movs	r3, #1
 80063de:	1076      	asrs	r6, r6, #1
 80063e0:	3708      	adds	r7, #8
 80063e2:	e76c      	b.n	80062be <_dtoa_r+0x3ce>
 80063e4:	2502      	movs	r5, #2
 80063e6:	e76f      	b.n	80062c8 <_dtoa_r+0x3d8>
 80063e8:	9b01      	ldr	r3, [sp, #4]
 80063ea:	f8cd a01c 	str.w	sl, [sp, #28]
 80063ee:	930c      	str	r3, [sp, #48]	; 0x30
 80063f0:	e78d      	b.n	800630e <_dtoa_r+0x41e>
 80063f2:	9900      	ldr	r1, [sp, #0]
 80063f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80063f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063f8:	4b4e      	ldr	r3, [pc, #312]	; (8006534 <_dtoa_r+0x644>)
 80063fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063fe:	4401      	add	r1, r0
 8006400:	9102      	str	r1, [sp, #8]
 8006402:	9908      	ldr	r1, [sp, #32]
 8006404:	eeb0 8a47 	vmov.f32	s16, s14
 8006408:	eef0 8a67 	vmov.f32	s17, s15
 800640c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006410:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006414:	2900      	cmp	r1, #0
 8006416:	d045      	beq.n	80064a4 <_dtoa_r+0x5b4>
 8006418:	494c      	ldr	r1, [pc, #304]	; (800654c <_dtoa_r+0x65c>)
 800641a:	2000      	movs	r0, #0
 800641c:	f7fa fa26 	bl	800086c <__aeabi_ddiv>
 8006420:	ec53 2b18 	vmov	r2, r3, d8
 8006424:	f7f9 ff40 	bl	80002a8 <__aeabi_dsub>
 8006428:	9d00      	ldr	r5, [sp, #0]
 800642a:	ec41 0b18 	vmov	d8, r0, r1
 800642e:	4639      	mov	r1, r7
 8006430:	4630      	mov	r0, r6
 8006432:	f7fa fba1 	bl	8000b78 <__aeabi_d2iz>
 8006436:	900c      	str	r0, [sp, #48]	; 0x30
 8006438:	f7fa f884 	bl	8000544 <__aeabi_i2d>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4630      	mov	r0, r6
 8006442:	4639      	mov	r1, r7
 8006444:	f7f9 ff30 	bl	80002a8 <__aeabi_dsub>
 8006448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800644a:	3330      	adds	r3, #48	; 0x30
 800644c:	f805 3b01 	strb.w	r3, [r5], #1
 8006450:	ec53 2b18 	vmov	r2, r3, d8
 8006454:	4606      	mov	r6, r0
 8006456:	460f      	mov	r7, r1
 8006458:	f7fa fb50 	bl	8000afc <__aeabi_dcmplt>
 800645c:	2800      	cmp	r0, #0
 800645e:	d165      	bne.n	800652c <_dtoa_r+0x63c>
 8006460:	4632      	mov	r2, r6
 8006462:	463b      	mov	r3, r7
 8006464:	4935      	ldr	r1, [pc, #212]	; (800653c <_dtoa_r+0x64c>)
 8006466:	2000      	movs	r0, #0
 8006468:	f7f9 ff1e 	bl	80002a8 <__aeabi_dsub>
 800646c:	ec53 2b18 	vmov	r2, r3, d8
 8006470:	f7fa fb44 	bl	8000afc <__aeabi_dcmplt>
 8006474:	2800      	cmp	r0, #0
 8006476:	f040 80b9 	bne.w	80065ec <_dtoa_r+0x6fc>
 800647a:	9b02      	ldr	r3, [sp, #8]
 800647c:	429d      	cmp	r5, r3
 800647e:	f43f af75 	beq.w	800636c <_dtoa_r+0x47c>
 8006482:	4b2f      	ldr	r3, [pc, #188]	; (8006540 <_dtoa_r+0x650>)
 8006484:	ec51 0b18 	vmov	r0, r1, d8
 8006488:	2200      	movs	r2, #0
 800648a:	f7fa f8c5 	bl	8000618 <__aeabi_dmul>
 800648e:	4b2c      	ldr	r3, [pc, #176]	; (8006540 <_dtoa_r+0x650>)
 8006490:	ec41 0b18 	vmov	d8, r0, r1
 8006494:	2200      	movs	r2, #0
 8006496:	4630      	mov	r0, r6
 8006498:	4639      	mov	r1, r7
 800649a:	f7fa f8bd 	bl	8000618 <__aeabi_dmul>
 800649e:	4606      	mov	r6, r0
 80064a0:	460f      	mov	r7, r1
 80064a2:	e7c4      	b.n	800642e <_dtoa_r+0x53e>
 80064a4:	ec51 0b17 	vmov	r0, r1, d7
 80064a8:	f7fa f8b6 	bl	8000618 <__aeabi_dmul>
 80064ac:	9b02      	ldr	r3, [sp, #8]
 80064ae:	9d00      	ldr	r5, [sp, #0]
 80064b0:	930c      	str	r3, [sp, #48]	; 0x30
 80064b2:	ec41 0b18 	vmov	d8, r0, r1
 80064b6:	4639      	mov	r1, r7
 80064b8:	4630      	mov	r0, r6
 80064ba:	f7fa fb5d 	bl	8000b78 <__aeabi_d2iz>
 80064be:	9011      	str	r0, [sp, #68]	; 0x44
 80064c0:	f7fa f840 	bl	8000544 <__aeabi_i2d>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4630      	mov	r0, r6
 80064ca:	4639      	mov	r1, r7
 80064cc:	f7f9 feec 	bl	80002a8 <__aeabi_dsub>
 80064d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064d2:	3330      	adds	r3, #48	; 0x30
 80064d4:	f805 3b01 	strb.w	r3, [r5], #1
 80064d8:	9b02      	ldr	r3, [sp, #8]
 80064da:	429d      	cmp	r5, r3
 80064dc:	4606      	mov	r6, r0
 80064de:	460f      	mov	r7, r1
 80064e0:	f04f 0200 	mov.w	r2, #0
 80064e4:	d134      	bne.n	8006550 <_dtoa_r+0x660>
 80064e6:	4b19      	ldr	r3, [pc, #100]	; (800654c <_dtoa_r+0x65c>)
 80064e8:	ec51 0b18 	vmov	r0, r1, d8
 80064ec:	f7f9 fede 	bl	80002ac <__adddf3>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4630      	mov	r0, r6
 80064f6:	4639      	mov	r1, r7
 80064f8:	f7fa fb1e 	bl	8000b38 <__aeabi_dcmpgt>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d175      	bne.n	80065ec <_dtoa_r+0x6fc>
 8006500:	ec53 2b18 	vmov	r2, r3, d8
 8006504:	4911      	ldr	r1, [pc, #68]	; (800654c <_dtoa_r+0x65c>)
 8006506:	2000      	movs	r0, #0
 8006508:	f7f9 fece 	bl	80002a8 <__aeabi_dsub>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	4630      	mov	r0, r6
 8006512:	4639      	mov	r1, r7
 8006514:	f7fa faf2 	bl	8000afc <__aeabi_dcmplt>
 8006518:	2800      	cmp	r0, #0
 800651a:	f43f af27 	beq.w	800636c <_dtoa_r+0x47c>
 800651e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006520:	1e6b      	subs	r3, r5, #1
 8006522:	930c      	str	r3, [sp, #48]	; 0x30
 8006524:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006528:	2b30      	cmp	r3, #48	; 0x30
 800652a:	d0f8      	beq.n	800651e <_dtoa_r+0x62e>
 800652c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006530:	e04a      	b.n	80065c8 <_dtoa_r+0x6d8>
 8006532:	bf00      	nop
 8006534:	08007da8 	.word	0x08007da8
 8006538:	08007d80 	.word	0x08007d80
 800653c:	3ff00000 	.word	0x3ff00000
 8006540:	40240000 	.word	0x40240000
 8006544:	401c0000 	.word	0x401c0000
 8006548:	40140000 	.word	0x40140000
 800654c:	3fe00000 	.word	0x3fe00000
 8006550:	4baf      	ldr	r3, [pc, #700]	; (8006810 <_dtoa_r+0x920>)
 8006552:	f7fa f861 	bl	8000618 <__aeabi_dmul>
 8006556:	4606      	mov	r6, r0
 8006558:	460f      	mov	r7, r1
 800655a:	e7ac      	b.n	80064b6 <_dtoa_r+0x5c6>
 800655c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006560:	9d00      	ldr	r5, [sp, #0]
 8006562:	4642      	mov	r2, r8
 8006564:	464b      	mov	r3, r9
 8006566:	4630      	mov	r0, r6
 8006568:	4639      	mov	r1, r7
 800656a:	f7fa f97f 	bl	800086c <__aeabi_ddiv>
 800656e:	f7fa fb03 	bl	8000b78 <__aeabi_d2iz>
 8006572:	9002      	str	r0, [sp, #8]
 8006574:	f7f9 ffe6 	bl	8000544 <__aeabi_i2d>
 8006578:	4642      	mov	r2, r8
 800657a:	464b      	mov	r3, r9
 800657c:	f7fa f84c 	bl	8000618 <__aeabi_dmul>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4630      	mov	r0, r6
 8006586:	4639      	mov	r1, r7
 8006588:	f7f9 fe8e 	bl	80002a8 <__aeabi_dsub>
 800658c:	9e02      	ldr	r6, [sp, #8]
 800658e:	9f01      	ldr	r7, [sp, #4]
 8006590:	3630      	adds	r6, #48	; 0x30
 8006592:	f805 6b01 	strb.w	r6, [r5], #1
 8006596:	9e00      	ldr	r6, [sp, #0]
 8006598:	1bae      	subs	r6, r5, r6
 800659a:	42b7      	cmp	r7, r6
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	d137      	bne.n	8006612 <_dtoa_r+0x722>
 80065a2:	f7f9 fe83 	bl	80002ac <__adddf3>
 80065a6:	4642      	mov	r2, r8
 80065a8:	464b      	mov	r3, r9
 80065aa:	4606      	mov	r6, r0
 80065ac:	460f      	mov	r7, r1
 80065ae:	f7fa fac3 	bl	8000b38 <__aeabi_dcmpgt>
 80065b2:	b9c8      	cbnz	r0, 80065e8 <_dtoa_r+0x6f8>
 80065b4:	4642      	mov	r2, r8
 80065b6:	464b      	mov	r3, r9
 80065b8:	4630      	mov	r0, r6
 80065ba:	4639      	mov	r1, r7
 80065bc:	f7fa fa94 	bl	8000ae8 <__aeabi_dcmpeq>
 80065c0:	b110      	cbz	r0, 80065c8 <_dtoa_r+0x6d8>
 80065c2:	9b02      	ldr	r3, [sp, #8]
 80065c4:	07d9      	lsls	r1, r3, #31
 80065c6:	d40f      	bmi.n	80065e8 <_dtoa_r+0x6f8>
 80065c8:	4620      	mov	r0, r4
 80065ca:	4659      	mov	r1, fp
 80065cc:	f000 fcfa 	bl	8006fc4 <_Bfree>
 80065d0:	2300      	movs	r3, #0
 80065d2:	702b      	strb	r3, [r5, #0]
 80065d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065d6:	f10a 0001 	add.w	r0, sl, #1
 80065da:	6018      	str	r0, [r3, #0]
 80065dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f43f acd8 	beq.w	8005f94 <_dtoa_r+0xa4>
 80065e4:	601d      	str	r5, [r3, #0]
 80065e6:	e4d5      	b.n	8005f94 <_dtoa_r+0xa4>
 80065e8:	f8cd a01c 	str.w	sl, [sp, #28]
 80065ec:	462b      	mov	r3, r5
 80065ee:	461d      	mov	r5, r3
 80065f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065f4:	2a39      	cmp	r2, #57	; 0x39
 80065f6:	d108      	bne.n	800660a <_dtoa_r+0x71a>
 80065f8:	9a00      	ldr	r2, [sp, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d1f7      	bne.n	80065ee <_dtoa_r+0x6fe>
 80065fe:	9a07      	ldr	r2, [sp, #28]
 8006600:	9900      	ldr	r1, [sp, #0]
 8006602:	3201      	adds	r2, #1
 8006604:	9207      	str	r2, [sp, #28]
 8006606:	2230      	movs	r2, #48	; 0x30
 8006608:	700a      	strb	r2, [r1, #0]
 800660a:	781a      	ldrb	r2, [r3, #0]
 800660c:	3201      	adds	r2, #1
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	e78c      	b.n	800652c <_dtoa_r+0x63c>
 8006612:	4b7f      	ldr	r3, [pc, #508]	; (8006810 <_dtoa_r+0x920>)
 8006614:	2200      	movs	r2, #0
 8006616:	f7f9 ffff 	bl	8000618 <__aeabi_dmul>
 800661a:	2200      	movs	r2, #0
 800661c:	2300      	movs	r3, #0
 800661e:	4606      	mov	r6, r0
 8006620:	460f      	mov	r7, r1
 8006622:	f7fa fa61 	bl	8000ae8 <__aeabi_dcmpeq>
 8006626:	2800      	cmp	r0, #0
 8006628:	d09b      	beq.n	8006562 <_dtoa_r+0x672>
 800662a:	e7cd      	b.n	80065c8 <_dtoa_r+0x6d8>
 800662c:	9a08      	ldr	r2, [sp, #32]
 800662e:	2a00      	cmp	r2, #0
 8006630:	f000 80c4 	beq.w	80067bc <_dtoa_r+0x8cc>
 8006634:	9a05      	ldr	r2, [sp, #20]
 8006636:	2a01      	cmp	r2, #1
 8006638:	f300 80a8 	bgt.w	800678c <_dtoa_r+0x89c>
 800663c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800663e:	2a00      	cmp	r2, #0
 8006640:	f000 80a0 	beq.w	8006784 <_dtoa_r+0x894>
 8006644:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006648:	9e06      	ldr	r6, [sp, #24]
 800664a:	4645      	mov	r5, r8
 800664c:	9a04      	ldr	r2, [sp, #16]
 800664e:	2101      	movs	r1, #1
 8006650:	441a      	add	r2, r3
 8006652:	4620      	mov	r0, r4
 8006654:	4498      	add	r8, r3
 8006656:	9204      	str	r2, [sp, #16]
 8006658:	f000 fd70 	bl	800713c <__i2b>
 800665c:	4607      	mov	r7, r0
 800665e:	2d00      	cmp	r5, #0
 8006660:	dd0b      	ble.n	800667a <_dtoa_r+0x78a>
 8006662:	9b04      	ldr	r3, [sp, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	dd08      	ble.n	800667a <_dtoa_r+0x78a>
 8006668:	42ab      	cmp	r3, r5
 800666a:	9a04      	ldr	r2, [sp, #16]
 800666c:	bfa8      	it	ge
 800666e:	462b      	movge	r3, r5
 8006670:	eba8 0803 	sub.w	r8, r8, r3
 8006674:	1aed      	subs	r5, r5, r3
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	9304      	str	r3, [sp, #16]
 800667a:	9b06      	ldr	r3, [sp, #24]
 800667c:	b1fb      	cbz	r3, 80066be <_dtoa_r+0x7ce>
 800667e:	9b08      	ldr	r3, [sp, #32]
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 809f 	beq.w	80067c4 <_dtoa_r+0x8d4>
 8006686:	2e00      	cmp	r6, #0
 8006688:	dd11      	ble.n	80066ae <_dtoa_r+0x7be>
 800668a:	4639      	mov	r1, r7
 800668c:	4632      	mov	r2, r6
 800668e:	4620      	mov	r0, r4
 8006690:	f000 fe10 	bl	80072b4 <__pow5mult>
 8006694:	465a      	mov	r2, fp
 8006696:	4601      	mov	r1, r0
 8006698:	4607      	mov	r7, r0
 800669a:	4620      	mov	r0, r4
 800669c:	f000 fd64 	bl	8007168 <__multiply>
 80066a0:	4659      	mov	r1, fp
 80066a2:	9007      	str	r0, [sp, #28]
 80066a4:	4620      	mov	r0, r4
 80066a6:	f000 fc8d 	bl	8006fc4 <_Bfree>
 80066aa:	9b07      	ldr	r3, [sp, #28]
 80066ac:	469b      	mov	fp, r3
 80066ae:	9b06      	ldr	r3, [sp, #24]
 80066b0:	1b9a      	subs	r2, r3, r6
 80066b2:	d004      	beq.n	80066be <_dtoa_r+0x7ce>
 80066b4:	4659      	mov	r1, fp
 80066b6:	4620      	mov	r0, r4
 80066b8:	f000 fdfc 	bl	80072b4 <__pow5mult>
 80066bc:	4683      	mov	fp, r0
 80066be:	2101      	movs	r1, #1
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 fd3b 	bl	800713c <__i2b>
 80066c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	4606      	mov	r6, r0
 80066cc:	dd7c      	ble.n	80067c8 <_dtoa_r+0x8d8>
 80066ce:	461a      	mov	r2, r3
 80066d0:	4601      	mov	r1, r0
 80066d2:	4620      	mov	r0, r4
 80066d4:	f000 fdee 	bl	80072b4 <__pow5mult>
 80066d8:	9b05      	ldr	r3, [sp, #20]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	4606      	mov	r6, r0
 80066de:	dd76      	ble.n	80067ce <_dtoa_r+0x8de>
 80066e0:	2300      	movs	r3, #0
 80066e2:	9306      	str	r3, [sp, #24]
 80066e4:	6933      	ldr	r3, [r6, #16]
 80066e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80066ea:	6918      	ldr	r0, [r3, #16]
 80066ec:	f000 fcd6 	bl	800709c <__hi0bits>
 80066f0:	f1c0 0020 	rsb	r0, r0, #32
 80066f4:	9b04      	ldr	r3, [sp, #16]
 80066f6:	4418      	add	r0, r3
 80066f8:	f010 001f 	ands.w	r0, r0, #31
 80066fc:	f000 8086 	beq.w	800680c <_dtoa_r+0x91c>
 8006700:	f1c0 0320 	rsb	r3, r0, #32
 8006704:	2b04      	cmp	r3, #4
 8006706:	dd7f      	ble.n	8006808 <_dtoa_r+0x918>
 8006708:	f1c0 001c 	rsb	r0, r0, #28
 800670c:	9b04      	ldr	r3, [sp, #16]
 800670e:	4403      	add	r3, r0
 8006710:	4480      	add	r8, r0
 8006712:	4405      	add	r5, r0
 8006714:	9304      	str	r3, [sp, #16]
 8006716:	f1b8 0f00 	cmp.w	r8, #0
 800671a:	dd05      	ble.n	8006728 <_dtoa_r+0x838>
 800671c:	4659      	mov	r1, fp
 800671e:	4642      	mov	r2, r8
 8006720:	4620      	mov	r0, r4
 8006722:	f000 fe21 	bl	8007368 <__lshift>
 8006726:	4683      	mov	fp, r0
 8006728:	9b04      	ldr	r3, [sp, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	dd05      	ble.n	800673a <_dtoa_r+0x84a>
 800672e:	4631      	mov	r1, r6
 8006730:	461a      	mov	r2, r3
 8006732:	4620      	mov	r0, r4
 8006734:	f000 fe18 	bl	8007368 <__lshift>
 8006738:	4606      	mov	r6, r0
 800673a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800673c:	2b00      	cmp	r3, #0
 800673e:	d069      	beq.n	8006814 <_dtoa_r+0x924>
 8006740:	4631      	mov	r1, r6
 8006742:	4658      	mov	r0, fp
 8006744:	f000 fe7c 	bl	8007440 <__mcmp>
 8006748:	2800      	cmp	r0, #0
 800674a:	da63      	bge.n	8006814 <_dtoa_r+0x924>
 800674c:	2300      	movs	r3, #0
 800674e:	4659      	mov	r1, fp
 8006750:	220a      	movs	r2, #10
 8006752:	4620      	mov	r0, r4
 8006754:	f000 fc58 	bl	8007008 <__multadd>
 8006758:	9b08      	ldr	r3, [sp, #32]
 800675a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800675e:	4683      	mov	fp, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 818f 	beq.w	8006a84 <_dtoa_r+0xb94>
 8006766:	4639      	mov	r1, r7
 8006768:	2300      	movs	r3, #0
 800676a:	220a      	movs	r2, #10
 800676c:	4620      	mov	r0, r4
 800676e:	f000 fc4b 	bl	8007008 <__multadd>
 8006772:	f1b9 0f00 	cmp.w	r9, #0
 8006776:	4607      	mov	r7, r0
 8006778:	f300 808e 	bgt.w	8006898 <_dtoa_r+0x9a8>
 800677c:	9b05      	ldr	r3, [sp, #20]
 800677e:	2b02      	cmp	r3, #2
 8006780:	dc50      	bgt.n	8006824 <_dtoa_r+0x934>
 8006782:	e089      	b.n	8006898 <_dtoa_r+0x9a8>
 8006784:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006786:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800678a:	e75d      	b.n	8006648 <_dtoa_r+0x758>
 800678c:	9b01      	ldr	r3, [sp, #4]
 800678e:	1e5e      	subs	r6, r3, #1
 8006790:	9b06      	ldr	r3, [sp, #24]
 8006792:	42b3      	cmp	r3, r6
 8006794:	bfbf      	itttt	lt
 8006796:	9b06      	ldrlt	r3, [sp, #24]
 8006798:	9606      	strlt	r6, [sp, #24]
 800679a:	1af2      	sublt	r2, r6, r3
 800679c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800679e:	bfb6      	itet	lt
 80067a0:	189b      	addlt	r3, r3, r2
 80067a2:	1b9e      	subge	r6, r3, r6
 80067a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80067a6:	9b01      	ldr	r3, [sp, #4]
 80067a8:	bfb8      	it	lt
 80067aa:	2600      	movlt	r6, #0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	bfb5      	itete	lt
 80067b0:	eba8 0503 	sublt.w	r5, r8, r3
 80067b4:	9b01      	ldrge	r3, [sp, #4]
 80067b6:	2300      	movlt	r3, #0
 80067b8:	4645      	movge	r5, r8
 80067ba:	e747      	b.n	800664c <_dtoa_r+0x75c>
 80067bc:	9e06      	ldr	r6, [sp, #24]
 80067be:	9f08      	ldr	r7, [sp, #32]
 80067c0:	4645      	mov	r5, r8
 80067c2:	e74c      	b.n	800665e <_dtoa_r+0x76e>
 80067c4:	9a06      	ldr	r2, [sp, #24]
 80067c6:	e775      	b.n	80066b4 <_dtoa_r+0x7c4>
 80067c8:	9b05      	ldr	r3, [sp, #20]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	dc18      	bgt.n	8006800 <_dtoa_r+0x910>
 80067ce:	9b02      	ldr	r3, [sp, #8]
 80067d0:	b9b3      	cbnz	r3, 8006800 <_dtoa_r+0x910>
 80067d2:	9b03      	ldr	r3, [sp, #12]
 80067d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067d8:	b9a3      	cbnz	r3, 8006804 <_dtoa_r+0x914>
 80067da:	9b03      	ldr	r3, [sp, #12]
 80067dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067e0:	0d1b      	lsrs	r3, r3, #20
 80067e2:	051b      	lsls	r3, r3, #20
 80067e4:	b12b      	cbz	r3, 80067f2 <_dtoa_r+0x902>
 80067e6:	9b04      	ldr	r3, [sp, #16]
 80067e8:	3301      	adds	r3, #1
 80067ea:	9304      	str	r3, [sp, #16]
 80067ec:	f108 0801 	add.w	r8, r8, #1
 80067f0:	2301      	movs	r3, #1
 80067f2:	9306      	str	r3, [sp, #24]
 80067f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f47f af74 	bne.w	80066e4 <_dtoa_r+0x7f4>
 80067fc:	2001      	movs	r0, #1
 80067fe:	e779      	b.n	80066f4 <_dtoa_r+0x804>
 8006800:	2300      	movs	r3, #0
 8006802:	e7f6      	b.n	80067f2 <_dtoa_r+0x902>
 8006804:	9b02      	ldr	r3, [sp, #8]
 8006806:	e7f4      	b.n	80067f2 <_dtoa_r+0x902>
 8006808:	d085      	beq.n	8006716 <_dtoa_r+0x826>
 800680a:	4618      	mov	r0, r3
 800680c:	301c      	adds	r0, #28
 800680e:	e77d      	b.n	800670c <_dtoa_r+0x81c>
 8006810:	40240000 	.word	0x40240000
 8006814:	9b01      	ldr	r3, [sp, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	dc38      	bgt.n	800688c <_dtoa_r+0x99c>
 800681a:	9b05      	ldr	r3, [sp, #20]
 800681c:	2b02      	cmp	r3, #2
 800681e:	dd35      	ble.n	800688c <_dtoa_r+0x99c>
 8006820:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006824:	f1b9 0f00 	cmp.w	r9, #0
 8006828:	d10d      	bne.n	8006846 <_dtoa_r+0x956>
 800682a:	4631      	mov	r1, r6
 800682c:	464b      	mov	r3, r9
 800682e:	2205      	movs	r2, #5
 8006830:	4620      	mov	r0, r4
 8006832:	f000 fbe9 	bl	8007008 <__multadd>
 8006836:	4601      	mov	r1, r0
 8006838:	4606      	mov	r6, r0
 800683a:	4658      	mov	r0, fp
 800683c:	f000 fe00 	bl	8007440 <__mcmp>
 8006840:	2800      	cmp	r0, #0
 8006842:	f73f adbd 	bgt.w	80063c0 <_dtoa_r+0x4d0>
 8006846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006848:	9d00      	ldr	r5, [sp, #0]
 800684a:	ea6f 0a03 	mvn.w	sl, r3
 800684e:	f04f 0800 	mov.w	r8, #0
 8006852:	4631      	mov	r1, r6
 8006854:	4620      	mov	r0, r4
 8006856:	f000 fbb5 	bl	8006fc4 <_Bfree>
 800685a:	2f00      	cmp	r7, #0
 800685c:	f43f aeb4 	beq.w	80065c8 <_dtoa_r+0x6d8>
 8006860:	f1b8 0f00 	cmp.w	r8, #0
 8006864:	d005      	beq.n	8006872 <_dtoa_r+0x982>
 8006866:	45b8      	cmp	r8, r7
 8006868:	d003      	beq.n	8006872 <_dtoa_r+0x982>
 800686a:	4641      	mov	r1, r8
 800686c:	4620      	mov	r0, r4
 800686e:	f000 fba9 	bl	8006fc4 <_Bfree>
 8006872:	4639      	mov	r1, r7
 8006874:	4620      	mov	r0, r4
 8006876:	f000 fba5 	bl	8006fc4 <_Bfree>
 800687a:	e6a5      	b.n	80065c8 <_dtoa_r+0x6d8>
 800687c:	2600      	movs	r6, #0
 800687e:	4637      	mov	r7, r6
 8006880:	e7e1      	b.n	8006846 <_dtoa_r+0x956>
 8006882:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006884:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006888:	4637      	mov	r7, r6
 800688a:	e599      	b.n	80063c0 <_dtoa_r+0x4d0>
 800688c:	9b08      	ldr	r3, [sp, #32]
 800688e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 80fd 	beq.w	8006a92 <_dtoa_r+0xba2>
 8006898:	2d00      	cmp	r5, #0
 800689a:	dd05      	ble.n	80068a8 <_dtoa_r+0x9b8>
 800689c:	4639      	mov	r1, r7
 800689e:	462a      	mov	r2, r5
 80068a0:	4620      	mov	r0, r4
 80068a2:	f000 fd61 	bl	8007368 <__lshift>
 80068a6:	4607      	mov	r7, r0
 80068a8:	9b06      	ldr	r3, [sp, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d05c      	beq.n	8006968 <_dtoa_r+0xa78>
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	4620      	mov	r0, r4
 80068b2:	f000 fb47 	bl	8006f44 <_Balloc>
 80068b6:	4605      	mov	r5, r0
 80068b8:	b928      	cbnz	r0, 80068c6 <_dtoa_r+0x9d6>
 80068ba:	4b80      	ldr	r3, [pc, #512]	; (8006abc <_dtoa_r+0xbcc>)
 80068bc:	4602      	mov	r2, r0
 80068be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80068c2:	f7ff bb2e 	b.w	8005f22 <_dtoa_r+0x32>
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	3202      	adds	r2, #2
 80068ca:	0092      	lsls	r2, r2, #2
 80068cc:	f107 010c 	add.w	r1, r7, #12
 80068d0:	300c      	adds	r0, #12
 80068d2:	f000 fb1d 	bl	8006f10 <memcpy>
 80068d6:	2201      	movs	r2, #1
 80068d8:	4629      	mov	r1, r5
 80068da:	4620      	mov	r0, r4
 80068dc:	f000 fd44 	bl	8007368 <__lshift>
 80068e0:	9b00      	ldr	r3, [sp, #0]
 80068e2:	3301      	adds	r3, #1
 80068e4:	9301      	str	r3, [sp, #4]
 80068e6:	9b00      	ldr	r3, [sp, #0]
 80068e8:	444b      	add	r3, r9
 80068ea:	9307      	str	r3, [sp, #28]
 80068ec:	9b02      	ldr	r3, [sp, #8]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	46b8      	mov	r8, r7
 80068f4:	9306      	str	r3, [sp, #24]
 80068f6:	4607      	mov	r7, r0
 80068f8:	9b01      	ldr	r3, [sp, #4]
 80068fa:	4631      	mov	r1, r6
 80068fc:	3b01      	subs	r3, #1
 80068fe:	4658      	mov	r0, fp
 8006900:	9302      	str	r3, [sp, #8]
 8006902:	f7ff fa67 	bl	8005dd4 <quorem>
 8006906:	4603      	mov	r3, r0
 8006908:	3330      	adds	r3, #48	; 0x30
 800690a:	9004      	str	r0, [sp, #16]
 800690c:	4641      	mov	r1, r8
 800690e:	4658      	mov	r0, fp
 8006910:	9308      	str	r3, [sp, #32]
 8006912:	f000 fd95 	bl	8007440 <__mcmp>
 8006916:	463a      	mov	r2, r7
 8006918:	4681      	mov	r9, r0
 800691a:	4631      	mov	r1, r6
 800691c:	4620      	mov	r0, r4
 800691e:	f000 fdab 	bl	8007478 <__mdiff>
 8006922:	68c2      	ldr	r2, [r0, #12]
 8006924:	9b08      	ldr	r3, [sp, #32]
 8006926:	4605      	mov	r5, r0
 8006928:	bb02      	cbnz	r2, 800696c <_dtoa_r+0xa7c>
 800692a:	4601      	mov	r1, r0
 800692c:	4658      	mov	r0, fp
 800692e:	f000 fd87 	bl	8007440 <__mcmp>
 8006932:	9b08      	ldr	r3, [sp, #32]
 8006934:	4602      	mov	r2, r0
 8006936:	4629      	mov	r1, r5
 8006938:	4620      	mov	r0, r4
 800693a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800693e:	f000 fb41 	bl	8006fc4 <_Bfree>
 8006942:	9b05      	ldr	r3, [sp, #20]
 8006944:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006946:	9d01      	ldr	r5, [sp, #4]
 8006948:	ea43 0102 	orr.w	r1, r3, r2
 800694c:	9b06      	ldr	r3, [sp, #24]
 800694e:	430b      	orrs	r3, r1
 8006950:	9b08      	ldr	r3, [sp, #32]
 8006952:	d10d      	bne.n	8006970 <_dtoa_r+0xa80>
 8006954:	2b39      	cmp	r3, #57	; 0x39
 8006956:	d029      	beq.n	80069ac <_dtoa_r+0xabc>
 8006958:	f1b9 0f00 	cmp.w	r9, #0
 800695c:	dd01      	ble.n	8006962 <_dtoa_r+0xa72>
 800695e:	9b04      	ldr	r3, [sp, #16]
 8006960:	3331      	adds	r3, #49	; 0x31
 8006962:	9a02      	ldr	r2, [sp, #8]
 8006964:	7013      	strb	r3, [r2, #0]
 8006966:	e774      	b.n	8006852 <_dtoa_r+0x962>
 8006968:	4638      	mov	r0, r7
 800696a:	e7b9      	b.n	80068e0 <_dtoa_r+0x9f0>
 800696c:	2201      	movs	r2, #1
 800696e:	e7e2      	b.n	8006936 <_dtoa_r+0xa46>
 8006970:	f1b9 0f00 	cmp.w	r9, #0
 8006974:	db06      	blt.n	8006984 <_dtoa_r+0xa94>
 8006976:	9905      	ldr	r1, [sp, #20]
 8006978:	ea41 0909 	orr.w	r9, r1, r9
 800697c:	9906      	ldr	r1, [sp, #24]
 800697e:	ea59 0101 	orrs.w	r1, r9, r1
 8006982:	d120      	bne.n	80069c6 <_dtoa_r+0xad6>
 8006984:	2a00      	cmp	r2, #0
 8006986:	ddec      	ble.n	8006962 <_dtoa_r+0xa72>
 8006988:	4659      	mov	r1, fp
 800698a:	2201      	movs	r2, #1
 800698c:	4620      	mov	r0, r4
 800698e:	9301      	str	r3, [sp, #4]
 8006990:	f000 fcea 	bl	8007368 <__lshift>
 8006994:	4631      	mov	r1, r6
 8006996:	4683      	mov	fp, r0
 8006998:	f000 fd52 	bl	8007440 <__mcmp>
 800699c:	2800      	cmp	r0, #0
 800699e:	9b01      	ldr	r3, [sp, #4]
 80069a0:	dc02      	bgt.n	80069a8 <_dtoa_r+0xab8>
 80069a2:	d1de      	bne.n	8006962 <_dtoa_r+0xa72>
 80069a4:	07da      	lsls	r2, r3, #31
 80069a6:	d5dc      	bpl.n	8006962 <_dtoa_r+0xa72>
 80069a8:	2b39      	cmp	r3, #57	; 0x39
 80069aa:	d1d8      	bne.n	800695e <_dtoa_r+0xa6e>
 80069ac:	9a02      	ldr	r2, [sp, #8]
 80069ae:	2339      	movs	r3, #57	; 0x39
 80069b0:	7013      	strb	r3, [r2, #0]
 80069b2:	462b      	mov	r3, r5
 80069b4:	461d      	mov	r5, r3
 80069b6:	3b01      	subs	r3, #1
 80069b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069bc:	2a39      	cmp	r2, #57	; 0x39
 80069be:	d050      	beq.n	8006a62 <_dtoa_r+0xb72>
 80069c0:	3201      	adds	r2, #1
 80069c2:	701a      	strb	r2, [r3, #0]
 80069c4:	e745      	b.n	8006852 <_dtoa_r+0x962>
 80069c6:	2a00      	cmp	r2, #0
 80069c8:	dd03      	ble.n	80069d2 <_dtoa_r+0xae2>
 80069ca:	2b39      	cmp	r3, #57	; 0x39
 80069cc:	d0ee      	beq.n	80069ac <_dtoa_r+0xabc>
 80069ce:	3301      	adds	r3, #1
 80069d0:	e7c7      	b.n	8006962 <_dtoa_r+0xa72>
 80069d2:	9a01      	ldr	r2, [sp, #4]
 80069d4:	9907      	ldr	r1, [sp, #28]
 80069d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80069da:	428a      	cmp	r2, r1
 80069dc:	d02a      	beq.n	8006a34 <_dtoa_r+0xb44>
 80069de:	4659      	mov	r1, fp
 80069e0:	2300      	movs	r3, #0
 80069e2:	220a      	movs	r2, #10
 80069e4:	4620      	mov	r0, r4
 80069e6:	f000 fb0f 	bl	8007008 <__multadd>
 80069ea:	45b8      	cmp	r8, r7
 80069ec:	4683      	mov	fp, r0
 80069ee:	f04f 0300 	mov.w	r3, #0
 80069f2:	f04f 020a 	mov.w	r2, #10
 80069f6:	4641      	mov	r1, r8
 80069f8:	4620      	mov	r0, r4
 80069fa:	d107      	bne.n	8006a0c <_dtoa_r+0xb1c>
 80069fc:	f000 fb04 	bl	8007008 <__multadd>
 8006a00:	4680      	mov	r8, r0
 8006a02:	4607      	mov	r7, r0
 8006a04:	9b01      	ldr	r3, [sp, #4]
 8006a06:	3301      	adds	r3, #1
 8006a08:	9301      	str	r3, [sp, #4]
 8006a0a:	e775      	b.n	80068f8 <_dtoa_r+0xa08>
 8006a0c:	f000 fafc 	bl	8007008 <__multadd>
 8006a10:	4639      	mov	r1, r7
 8006a12:	4680      	mov	r8, r0
 8006a14:	2300      	movs	r3, #0
 8006a16:	220a      	movs	r2, #10
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f000 faf5 	bl	8007008 <__multadd>
 8006a1e:	4607      	mov	r7, r0
 8006a20:	e7f0      	b.n	8006a04 <_dtoa_r+0xb14>
 8006a22:	f1b9 0f00 	cmp.w	r9, #0
 8006a26:	9a00      	ldr	r2, [sp, #0]
 8006a28:	bfcc      	ite	gt
 8006a2a:	464d      	movgt	r5, r9
 8006a2c:	2501      	movle	r5, #1
 8006a2e:	4415      	add	r5, r2
 8006a30:	f04f 0800 	mov.w	r8, #0
 8006a34:	4659      	mov	r1, fp
 8006a36:	2201      	movs	r2, #1
 8006a38:	4620      	mov	r0, r4
 8006a3a:	9301      	str	r3, [sp, #4]
 8006a3c:	f000 fc94 	bl	8007368 <__lshift>
 8006a40:	4631      	mov	r1, r6
 8006a42:	4683      	mov	fp, r0
 8006a44:	f000 fcfc 	bl	8007440 <__mcmp>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	dcb2      	bgt.n	80069b2 <_dtoa_r+0xac2>
 8006a4c:	d102      	bne.n	8006a54 <_dtoa_r+0xb64>
 8006a4e:	9b01      	ldr	r3, [sp, #4]
 8006a50:	07db      	lsls	r3, r3, #31
 8006a52:	d4ae      	bmi.n	80069b2 <_dtoa_r+0xac2>
 8006a54:	462b      	mov	r3, r5
 8006a56:	461d      	mov	r5, r3
 8006a58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a5c:	2a30      	cmp	r2, #48	; 0x30
 8006a5e:	d0fa      	beq.n	8006a56 <_dtoa_r+0xb66>
 8006a60:	e6f7      	b.n	8006852 <_dtoa_r+0x962>
 8006a62:	9a00      	ldr	r2, [sp, #0]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d1a5      	bne.n	80069b4 <_dtoa_r+0xac4>
 8006a68:	f10a 0a01 	add.w	sl, sl, #1
 8006a6c:	2331      	movs	r3, #49	; 0x31
 8006a6e:	e779      	b.n	8006964 <_dtoa_r+0xa74>
 8006a70:	4b13      	ldr	r3, [pc, #76]	; (8006ac0 <_dtoa_r+0xbd0>)
 8006a72:	f7ff baaf 	b.w	8005fd4 <_dtoa_r+0xe4>
 8006a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f47f aa86 	bne.w	8005f8a <_dtoa_r+0x9a>
 8006a7e:	4b11      	ldr	r3, [pc, #68]	; (8006ac4 <_dtoa_r+0xbd4>)
 8006a80:	f7ff baa8 	b.w	8005fd4 <_dtoa_r+0xe4>
 8006a84:	f1b9 0f00 	cmp.w	r9, #0
 8006a88:	dc03      	bgt.n	8006a92 <_dtoa_r+0xba2>
 8006a8a:	9b05      	ldr	r3, [sp, #20]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	f73f aec9 	bgt.w	8006824 <_dtoa_r+0x934>
 8006a92:	9d00      	ldr	r5, [sp, #0]
 8006a94:	4631      	mov	r1, r6
 8006a96:	4658      	mov	r0, fp
 8006a98:	f7ff f99c 	bl	8005dd4 <quorem>
 8006a9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006aa0:	f805 3b01 	strb.w	r3, [r5], #1
 8006aa4:	9a00      	ldr	r2, [sp, #0]
 8006aa6:	1aaa      	subs	r2, r5, r2
 8006aa8:	4591      	cmp	r9, r2
 8006aaa:	ddba      	ble.n	8006a22 <_dtoa_r+0xb32>
 8006aac:	4659      	mov	r1, fp
 8006aae:	2300      	movs	r3, #0
 8006ab0:	220a      	movs	r2, #10
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f000 faa8 	bl	8007008 <__multadd>
 8006ab8:	4683      	mov	fp, r0
 8006aba:	e7eb      	b.n	8006a94 <_dtoa_r+0xba4>
 8006abc:	08007cab 	.word	0x08007cab
 8006ac0:	08007c04 	.word	0x08007c04
 8006ac4:	08007c28 	.word	0x08007c28

08006ac8 <__sflush_r>:
 8006ac8:	898a      	ldrh	r2, [r1, #12]
 8006aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ace:	4605      	mov	r5, r0
 8006ad0:	0710      	lsls	r0, r2, #28
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	d458      	bmi.n	8006b88 <__sflush_r+0xc0>
 8006ad6:	684b      	ldr	r3, [r1, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	dc05      	bgt.n	8006ae8 <__sflush_r+0x20>
 8006adc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	dc02      	bgt.n	8006ae8 <__sflush_r+0x20>
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aea:	2e00      	cmp	r6, #0
 8006aec:	d0f9      	beq.n	8006ae2 <__sflush_r+0x1a>
 8006aee:	2300      	movs	r3, #0
 8006af0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006af4:	682f      	ldr	r7, [r5, #0]
 8006af6:	602b      	str	r3, [r5, #0]
 8006af8:	d032      	beq.n	8006b60 <__sflush_r+0x98>
 8006afa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	075a      	lsls	r2, r3, #29
 8006b00:	d505      	bpl.n	8006b0e <__sflush_r+0x46>
 8006b02:	6863      	ldr	r3, [r4, #4]
 8006b04:	1ac0      	subs	r0, r0, r3
 8006b06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b08:	b10b      	cbz	r3, 8006b0e <__sflush_r+0x46>
 8006b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b0c:	1ac0      	subs	r0, r0, r3
 8006b0e:	2300      	movs	r3, #0
 8006b10:	4602      	mov	r2, r0
 8006b12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b14:	6a21      	ldr	r1, [r4, #32]
 8006b16:	4628      	mov	r0, r5
 8006b18:	47b0      	blx	r6
 8006b1a:	1c43      	adds	r3, r0, #1
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	d106      	bne.n	8006b2e <__sflush_r+0x66>
 8006b20:	6829      	ldr	r1, [r5, #0]
 8006b22:	291d      	cmp	r1, #29
 8006b24:	d82c      	bhi.n	8006b80 <__sflush_r+0xb8>
 8006b26:	4a2a      	ldr	r2, [pc, #168]	; (8006bd0 <__sflush_r+0x108>)
 8006b28:	40ca      	lsrs	r2, r1
 8006b2a:	07d6      	lsls	r6, r2, #31
 8006b2c:	d528      	bpl.n	8006b80 <__sflush_r+0xb8>
 8006b2e:	2200      	movs	r2, #0
 8006b30:	6062      	str	r2, [r4, #4]
 8006b32:	04d9      	lsls	r1, r3, #19
 8006b34:	6922      	ldr	r2, [r4, #16]
 8006b36:	6022      	str	r2, [r4, #0]
 8006b38:	d504      	bpl.n	8006b44 <__sflush_r+0x7c>
 8006b3a:	1c42      	adds	r2, r0, #1
 8006b3c:	d101      	bne.n	8006b42 <__sflush_r+0x7a>
 8006b3e:	682b      	ldr	r3, [r5, #0]
 8006b40:	b903      	cbnz	r3, 8006b44 <__sflush_r+0x7c>
 8006b42:	6560      	str	r0, [r4, #84]	; 0x54
 8006b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b46:	602f      	str	r7, [r5, #0]
 8006b48:	2900      	cmp	r1, #0
 8006b4a:	d0ca      	beq.n	8006ae2 <__sflush_r+0x1a>
 8006b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b50:	4299      	cmp	r1, r3
 8006b52:	d002      	beq.n	8006b5a <__sflush_r+0x92>
 8006b54:	4628      	mov	r0, r5
 8006b56:	f7fe facb 	bl	80050f0 <_free_r>
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	6360      	str	r0, [r4, #52]	; 0x34
 8006b5e:	e7c1      	b.n	8006ae4 <__sflush_r+0x1c>
 8006b60:	6a21      	ldr	r1, [r4, #32]
 8006b62:	2301      	movs	r3, #1
 8006b64:	4628      	mov	r0, r5
 8006b66:	47b0      	blx	r6
 8006b68:	1c41      	adds	r1, r0, #1
 8006b6a:	d1c7      	bne.n	8006afc <__sflush_r+0x34>
 8006b6c:	682b      	ldr	r3, [r5, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0c4      	beq.n	8006afc <__sflush_r+0x34>
 8006b72:	2b1d      	cmp	r3, #29
 8006b74:	d001      	beq.n	8006b7a <__sflush_r+0xb2>
 8006b76:	2b16      	cmp	r3, #22
 8006b78:	d101      	bne.n	8006b7e <__sflush_r+0xb6>
 8006b7a:	602f      	str	r7, [r5, #0]
 8006b7c:	e7b1      	b.n	8006ae2 <__sflush_r+0x1a>
 8006b7e:	89a3      	ldrh	r3, [r4, #12]
 8006b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b84:	81a3      	strh	r3, [r4, #12]
 8006b86:	e7ad      	b.n	8006ae4 <__sflush_r+0x1c>
 8006b88:	690f      	ldr	r7, [r1, #16]
 8006b8a:	2f00      	cmp	r7, #0
 8006b8c:	d0a9      	beq.n	8006ae2 <__sflush_r+0x1a>
 8006b8e:	0793      	lsls	r3, r2, #30
 8006b90:	680e      	ldr	r6, [r1, #0]
 8006b92:	bf08      	it	eq
 8006b94:	694b      	ldreq	r3, [r1, #20]
 8006b96:	600f      	str	r7, [r1, #0]
 8006b98:	bf18      	it	ne
 8006b9a:	2300      	movne	r3, #0
 8006b9c:	eba6 0807 	sub.w	r8, r6, r7
 8006ba0:	608b      	str	r3, [r1, #8]
 8006ba2:	f1b8 0f00 	cmp.w	r8, #0
 8006ba6:	dd9c      	ble.n	8006ae2 <__sflush_r+0x1a>
 8006ba8:	6a21      	ldr	r1, [r4, #32]
 8006baa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bac:	4643      	mov	r3, r8
 8006bae:	463a      	mov	r2, r7
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	47b0      	blx	r6
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	dc06      	bgt.n	8006bc6 <__sflush_r+0xfe>
 8006bb8:	89a3      	ldrh	r3, [r4, #12]
 8006bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bbe:	81a3      	strh	r3, [r4, #12]
 8006bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc4:	e78e      	b.n	8006ae4 <__sflush_r+0x1c>
 8006bc6:	4407      	add	r7, r0
 8006bc8:	eba8 0800 	sub.w	r8, r8, r0
 8006bcc:	e7e9      	b.n	8006ba2 <__sflush_r+0xda>
 8006bce:	bf00      	nop
 8006bd0:	20400001 	.word	0x20400001

08006bd4 <_fflush_r>:
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	690b      	ldr	r3, [r1, #16]
 8006bd8:	4605      	mov	r5, r0
 8006bda:	460c      	mov	r4, r1
 8006bdc:	b913      	cbnz	r3, 8006be4 <_fflush_r+0x10>
 8006bde:	2500      	movs	r5, #0
 8006be0:	4628      	mov	r0, r5
 8006be2:	bd38      	pop	{r3, r4, r5, pc}
 8006be4:	b118      	cbz	r0, 8006bee <_fflush_r+0x1a>
 8006be6:	6983      	ldr	r3, [r0, #24]
 8006be8:	b90b      	cbnz	r3, 8006bee <_fflush_r+0x1a>
 8006bea:	f000 f887 	bl	8006cfc <__sinit>
 8006bee:	4b14      	ldr	r3, [pc, #80]	; (8006c40 <_fflush_r+0x6c>)
 8006bf0:	429c      	cmp	r4, r3
 8006bf2:	d11b      	bne.n	8006c2c <_fflush_r+0x58>
 8006bf4:	686c      	ldr	r4, [r5, #4]
 8006bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0ef      	beq.n	8006bde <_fflush_r+0xa>
 8006bfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c00:	07d0      	lsls	r0, r2, #31
 8006c02:	d404      	bmi.n	8006c0e <_fflush_r+0x3a>
 8006c04:	0599      	lsls	r1, r3, #22
 8006c06:	d402      	bmi.n	8006c0e <_fflush_r+0x3a>
 8006c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c0a:	f000 f91a 	bl	8006e42 <__retarget_lock_acquire_recursive>
 8006c0e:	4628      	mov	r0, r5
 8006c10:	4621      	mov	r1, r4
 8006c12:	f7ff ff59 	bl	8006ac8 <__sflush_r>
 8006c16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c18:	07da      	lsls	r2, r3, #31
 8006c1a:	4605      	mov	r5, r0
 8006c1c:	d4e0      	bmi.n	8006be0 <_fflush_r+0xc>
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	059b      	lsls	r3, r3, #22
 8006c22:	d4dd      	bmi.n	8006be0 <_fflush_r+0xc>
 8006c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c26:	f000 f90d 	bl	8006e44 <__retarget_lock_release_recursive>
 8006c2a:	e7d9      	b.n	8006be0 <_fflush_r+0xc>
 8006c2c:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <_fflush_r+0x70>)
 8006c2e:	429c      	cmp	r4, r3
 8006c30:	d101      	bne.n	8006c36 <_fflush_r+0x62>
 8006c32:	68ac      	ldr	r4, [r5, #8]
 8006c34:	e7df      	b.n	8006bf6 <_fflush_r+0x22>
 8006c36:	4b04      	ldr	r3, [pc, #16]	; (8006c48 <_fflush_r+0x74>)
 8006c38:	429c      	cmp	r4, r3
 8006c3a:	bf08      	it	eq
 8006c3c:	68ec      	ldreq	r4, [r5, #12]
 8006c3e:	e7da      	b.n	8006bf6 <_fflush_r+0x22>
 8006c40:	08007cdc 	.word	0x08007cdc
 8006c44:	08007cfc 	.word	0x08007cfc
 8006c48:	08007cbc 	.word	0x08007cbc

08006c4c <std>:
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	b510      	push	{r4, lr}
 8006c50:	4604      	mov	r4, r0
 8006c52:	e9c0 3300 	strd	r3, r3, [r0]
 8006c56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c5a:	6083      	str	r3, [r0, #8]
 8006c5c:	8181      	strh	r1, [r0, #12]
 8006c5e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c60:	81c2      	strh	r2, [r0, #14]
 8006c62:	6183      	str	r3, [r0, #24]
 8006c64:	4619      	mov	r1, r3
 8006c66:	2208      	movs	r2, #8
 8006c68:	305c      	adds	r0, #92	; 0x5c
 8006c6a:	f7fe fa39 	bl	80050e0 <memset>
 8006c6e:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <std+0x38>)
 8006c70:	6263      	str	r3, [r4, #36]	; 0x24
 8006c72:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <std+0x3c>)
 8006c74:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c76:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <std+0x40>)
 8006c78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c7a:	4b05      	ldr	r3, [pc, #20]	; (8006c90 <std+0x44>)
 8006c7c:	6224      	str	r4, [r4, #32]
 8006c7e:	6323      	str	r3, [r4, #48]	; 0x30
 8006c80:	bd10      	pop	{r4, pc}
 8006c82:	bf00      	nop
 8006c84:	08007911 	.word	0x08007911
 8006c88:	08007933 	.word	0x08007933
 8006c8c:	0800796b 	.word	0x0800796b
 8006c90:	0800798f 	.word	0x0800798f

08006c94 <_cleanup_r>:
 8006c94:	4901      	ldr	r1, [pc, #4]	; (8006c9c <_cleanup_r+0x8>)
 8006c96:	f000 b8af 	b.w	8006df8 <_fwalk_reent>
 8006c9a:	bf00      	nop
 8006c9c:	08006bd5 	.word	0x08006bd5

08006ca0 <__sfmoreglue>:
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	1e4a      	subs	r2, r1, #1
 8006ca4:	2568      	movs	r5, #104	; 0x68
 8006ca6:	4355      	muls	r5, r2
 8006ca8:	460e      	mov	r6, r1
 8006caa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cae:	f7fe fa6f 	bl	8005190 <_malloc_r>
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	b140      	cbz	r0, 8006cc8 <__sfmoreglue+0x28>
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	e9c0 1600 	strd	r1, r6, [r0]
 8006cbc:	300c      	adds	r0, #12
 8006cbe:	60a0      	str	r0, [r4, #8]
 8006cc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cc4:	f7fe fa0c 	bl	80050e0 <memset>
 8006cc8:	4620      	mov	r0, r4
 8006cca:	bd70      	pop	{r4, r5, r6, pc}

08006ccc <__sfp_lock_acquire>:
 8006ccc:	4801      	ldr	r0, [pc, #4]	; (8006cd4 <__sfp_lock_acquire+0x8>)
 8006cce:	f000 b8b8 	b.w	8006e42 <__retarget_lock_acquire_recursive>
 8006cd2:	bf00      	nop
 8006cd4:	200004dc 	.word	0x200004dc

08006cd8 <__sfp_lock_release>:
 8006cd8:	4801      	ldr	r0, [pc, #4]	; (8006ce0 <__sfp_lock_release+0x8>)
 8006cda:	f000 b8b3 	b.w	8006e44 <__retarget_lock_release_recursive>
 8006cde:	bf00      	nop
 8006ce0:	200004dc 	.word	0x200004dc

08006ce4 <__sinit_lock_acquire>:
 8006ce4:	4801      	ldr	r0, [pc, #4]	; (8006cec <__sinit_lock_acquire+0x8>)
 8006ce6:	f000 b8ac 	b.w	8006e42 <__retarget_lock_acquire_recursive>
 8006cea:	bf00      	nop
 8006cec:	200004d7 	.word	0x200004d7

08006cf0 <__sinit_lock_release>:
 8006cf0:	4801      	ldr	r0, [pc, #4]	; (8006cf8 <__sinit_lock_release+0x8>)
 8006cf2:	f000 b8a7 	b.w	8006e44 <__retarget_lock_release_recursive>
 8006cf6:	bf00      	nop
 8006cf8:	200004d7 	.word	0x200004d7

08006cfc <__sinit>:
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	4604      	mov	r4, r0
 8006d00:	f7ff fff0 	bl	8006ce4 <__sinit_lock_acquire>
 8006d04:	69a3      	ldr	r3, [r4, #24]
 8006d06:	b11b      	cbz	r3, 8006d10 <__sinit+0x14>
 8006d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d0c:	f7ff bff0 	b.w	8006cf0 <__sinit_lock_release>
 8006d10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d14:	6523      	str	r3, [r4, #80]	; 0x50
 8006d16:	4b13      	ldr	r3, [pc, #76]	; (8006d64 <__sinit+0x68>)
 8006d18:	4a13      	ldr	r2, [pc, #76]	; (8006d68 <__sinit+0x6c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d1e:	42a3      	cmp	r3, r4
 8006d20:	bf04      	itt	eq
 8006d22:	2301      	moveq	r3, #1
 8006d24:	61a3      	streq	r3, [r4, #24]
 8006d26:	4620      	mov	r0, r4
 8006d28:	f000 f820 	bl	8006d6c <__sfp>
 8006d2c:	6060      	str	r0, [r4, #4]
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f000 f81c 	bl	8006d6c <__sfp>
 8006d34:	60a0      	str	r0, [r4, #8]
 8006d36:	4620      	mov	r0, r4
 8006d38:	f000 f818 	bl	8006d6c <__sfp>
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	60e0      	str	r0, [r4, #12]
 8006d40:	2104      	movs	r1, #4
 8006d42:	6860      	ldr	r0, [r4, #4]
 8006d44:	f7ff ff82 	bl	8006c4c <std>
 8006d48:	68a0      	ldr	r0, [r4, #8]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	2109      	movs	r1, #9
 8006d4e:	f7ff ff7d 	bl	8006c4c <std>
 8006d52:	68e0      	ldr	r0, [r4, #12]
 8006d54:	2202      	movs	r2, #2
 8006d56:	2112      	movs	r1, #18
 8006d58:	f7ff ff78 	bl	8006c4c <std>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	61a3      	str	r3, [r4, #24]
 8006d60:	e7d2      	b.n	8006d08 <__sinit+0xc>
 8006d62:	bf00      	nop
 8006d64:	08007bf0 	.word	0x08007bf0
 8006d68:	08006c95 	.word	0x08006c95

08006d6c <__sfp>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	4607      	mov	r7, r0
 8006d70:	f7ff ffac 	bl	8006ccc <__sfp_lock_acquire>
 8006d74:	4b1e      	ldr	r3, [pc, #120]	; (8006df0 <__sfp+0x84>)
 8006d76:	681e      	ldr	r6, [r3, #0]
 8006d78:	69b3      	ldr	r3, [r6, #24]
 8006d7a:	b913      	cbnz	r3, 8006d82 <__sfp+0x16>
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	f7ff ffbd 	bl	8006cfc <__sinit>
 8006d82:	3648      	adds	r6, #72	; 0x48
 8006d84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	d503      	bpl.n	8006d94 <__sfp+0x28>
 8006d8c:	6833      	ldr	r3, [r6, #0]
 8006d8e:	b30b      	cbz	r3, 8006dd4 <__sfp+0x68>
 8006d90:	6836      	ldr	r6, [r6, #0]
 8006d92:	e7f7      	b.n	8006d84 <__sfp+0x18>
 8006d94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d98:	b9d5      	cbnz	r5, 8006dd0 <__sfp+0x64>
 8006d9a:	4b16      	ldr	r3, [pc, #88]	; (8006df4 <__sfp+0x88>)
 8006d9c:	60e3      	str	r3, [r4, #12]
 8006d9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006da2:	6665      	str	r5, [r4, #100]	; 0x64
 8006da4:	f000 f84c 	bl	8006e40 <__retarget_lock_init_recursive>
 8006da8:	f7ff ff96 	bl	8006cd8 <__sfp_lock_release>
 8006dac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006db0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006db4:	6025      	str	r5, [r4, #0]
 8006db6:	61a5      	str	r5, [r4, #24]
 8006db8:	2208      	movs	r2, #8
 8006dba:	4629      	mov	r1, r5
 8006dbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006dc0:	f7fe f98e 	bl	80050e0 <memset>
 8006dc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006dc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006dcc:	4620      	mov	r0, r4
 8006dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd0:	3468      	adds	r4, #104	; 0x68
 8006dd2:	e7d9      	b.n	8006d88 <__sfp+0x1c>
 8006dd4:	2104      	movs	r1, #4
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	f7ff ff62 	bl	8006ca0 <__sfmoreglue>
 8006ddc:	4604      	mov	r4, r0
 8006dde:	6030      	str	r0, [r6, #0]
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d1d5      	bne.n	8006d90 <__sfp+0x24>
 8006de4:	f7ff ff78 	bl	8006cd8 <__sfp_lock_release>
 8006de8:	230c      	movs	r3, #12
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	e7ee      	b.n	8006dcc <__sfp+0x60>
 8006dee:	bf00      	nop
 8006df0:	08007bf0 	.word	0x08007bf0
 8006df4:	ffff0001 	.word	0xffff0001

08006df8 <_fwalk_reent>:
 8006df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dfc:	4606      	mov	r6, r0
 8006dfe:	4688      	mov	r8, r1
 8006e00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e04:	2700      	movs	r7, #0
 8006e06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e0a:	f1b9 0901 	subs.w	r9, r9, #1
 8006e0e:	d505      	bpl.n	8006e1c <_fwalk_reent+0x24>
 8006e10:	6824      	ldr	r4, [r4, #0]
 8006e12:	2c00      	cmp	r4, #0
 8006e14:	d1f7      	bne.n	8006e06 <_fwalk_reent+0xe>
 8006e16:	4638      	mov	r0, r7
 8006e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e1c:	89ab      	ldrh	r3, [r5, #12]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d907      	bls.n	8006e32 <_fwalk_reent+0x3a>
 8006e22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e26:	3301      	adds	r3, #1
 8006e28:	d003      	beq.n	8006e32 <_fwalk_reent+0x3a>
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	47c0      	blx	r8
 8006e30:	4307      	orrs	r7, r0
 8006e32:	3568      	adds	r5, #104	; 0x68
 8006e34:	e7e9      	b.n	8006e0a <_fwalk_reent+0x12>
	...

08006e38 <_localeconv_r>:
 8006e38:	4800      	ldr	r0, [pc, #0]	; (8006e3c <_localeconv_r+0x4>)
 8006e3a:	4770      	bx	lr
 8006e3c:	20000160 	.word	0x20000160

08006e40 <__retarget_lock_init_recursive>:
 8006e40:	4770      	bx	lr

08006e42 <__retarget_lock_acquire_recursive>:
 8006e42:	4770      	bx	lr

08006e44 <__retarget_lock_release_recursive>:
 8006e44:	4770      	bx	lr

08006e46 <__swhatbuf_r>:
 8006e46:	b570      	push	{r4, r5, r6, lr}
 8006e48:	460e      	mov	r6, r1
 8006e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e4e:	2900      	cmp	r1, #0
 8006e50:	b096      	sub	sp, #88	; 0x58
 8006e52:	4614      	mov	r4, r2
 8006e54:	461d      	mov	r5, r3
 8006e56:	da07      	bge.n	8006e68 <__swhatbuf_r+0x22>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	602b      	str	r3, [r5, #0]
 8006e5c:	89b3      	ldrh	r3, [r6, #12]
 8006e5e:	061a      	lsls	r2, r3, #24
 8006e60:	d410      	bmi.n	8006e84 <__swhatbuf_r+0x3e>
 8006e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e66:	e00e      	b.n	8006e86 <__swhatbuf_r+0x40>
 8006e68:	466a      	mov	r2, sp
 8006e6a:	f000 fde7 	bl	8007a3c <_fstat_r>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	dbf2      	blt.n	8006e58 <__swhatbuf_r+0x12>
 8006e72:	9a01      	ldr	r2, [sp, #4]
 8006e74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e7c:	425a      	negs	r2, r3
 8006e7e:	415a      	adcs	r2, r3
 8006e80:	602a      	str	r2, [r5, #0]
 8006e82:	e7ee      	b.n	8006e62 <__swhatbuf_r+0x1c>
 8006e84:	2340      	movs	r3, #64	; 0x40
 8006e86:	2000      	movs	r0, #0
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	b016      	add	sp, #88	; 0x58
 8006e8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e90 <__smakebuf_r>:
 8006e90:	898b      	ldrh	r3, [r1, #12]
 8006e92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e94:	079d      	lsls	r5, r3, #30
 8006e96:	4606      	mov	r6, r0
 8006e98:	460c      	mov	r4, r1
 8006e9a:	d507      	bpl.n	8006eac <__smakebuf_r+0x1c>
 8006e9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	6123      	str	r3, [r4, #16]
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	6163      	str	r3, [r4, #20]
 8006ea8:	b002      	add	sp, #8
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}
 8006eac:	ab01      	add	r3, sp, #4
 8006eae:	466a      	mov	r2, sp
 8006eb0:	f7ff ffc9 	bl	8006e46 <__swhatbuf_r>
 8006eb4:	9900      	ldr	r1, [sp, #0]
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f7fe f969 	bl	8005190 <_malloc_r>
 8006ebe:	b948      	cbnz	r0, 8006ed4 <__smakebuf_r+0x44>
 8006ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ec4:	059a      	lsls	r2, r3, #22
 8006ec6:	d4ef      	bmi.n	8006ea8 <__smakebuf_r+0x18>
 8006ec8:	f023 0303 	bic.w	r3, r3, #3
 8006ecc:	f043 0302 	orr.w	r3, r3, #2
 8006ed0:	81a3      	strh	r3, [r4, #12]
 8006ed2:	e7e3      	b.n	8006e9c <__smakebuf_r+0xc>
 8006ed4:	4b0d      	ldr	r3, [pc, #52]	; (8006f0c <__smakebuf_r+0x7c>)
 8006ed6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	6020      	str	r0, [r4, #0]
 8006edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee0:	81a3      	strh	r3, [r4, #12]
 8006ee2:	9b00      	ldr	r3, [sp, #0]
 8006ee4:	6163      	str	r3, [r4, #20]
 8006ee6:	9b01      	ldr	r3, [sp, #4]
 8006ee8:	6120      	str	r0, [r4, #16]
 8006eea:	b15b      	cbz	r3, 8006f04 <__smakebuf_r+0x74>
 8006eec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	f000 fdb5 	bl	8007a60 <_isatty_r>
 8006ef6:	b128      	cbz	r0, 8006f04 <__smakebuf_r+0x74>
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	f023 0303 	bic.w	r3, r3, #3
 8006efe:	f043 0301 	orr.w	r3, r3, #1
 8006f02:	81a3      	strh	r3, [r4, #12]
 8006f04:	89a0      	ldrh	r0, [r4, #12]
 8006f06:	4305      	orrs	r5, r0
 8006f08:	81a5      	strh	r5, [r4, #12]
 8006f0a:	e7cd      	b.n	8006ea8 <__smakebuf_r+0x18>
 8006f0c:	08006c95 	.word	0x08006c95

08006f10 <memcpy>:
 8006f10:	440a      	add	r2, r1
 8006f12:	4291      	cmp	r1, r2
 8006f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f18:	d100      	bne.n	8006f1c <memcpy+0xc>
 8006f1a:	4770      	bx	lr
 8006f1c:	b510      	push	{r4, lr}
 8006f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f26:	4291      	cmp	r1, r2
 8006f28:	d1f9      	bne.n	8006f1e <memcpy+0xe>
 8006f2a:	bd10      	pop	{r4, pc}

08006f2c <__malloc_lock>:
 8006f2c:	4801      	ldr	r0, [pc, #4]	; (8006f34 <__malloc_lock+0x8>)
 8006f2e:	f7ff bf88 	b.w	8006e42 <__retarget_lock_acquire_recursive>
 8006f32:	bf00      	nop
 8006f34:	200004d8 	.word	0x200004d8

08006f38 <__malloc_unlock>:
 8006f38:	4801      	ldr	r0, [pc, #4]	; (8006f40 <__malloc_unlock+0x8>)
 8006f3a:	f7ff bf83 	b.w	8006e44 <__retarget_lock_release_recursive>
 8006f3e:	bf00      	nop
 8006f40:	200004d8 	.word	0x200004d8

08006f44 <_Balloc>:
 8006f44:	b570      	push	{r4, r5, r6, lr}
 8006f46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f48:	4604      	mov	r4, r0
 8006f4a:	460d      	mov	r5, r1
 8006f4c:	b976      	cbnz	r6, 8006f6c <_Balloc+0x28>
 8006f4e:	2010      	movs	r0, #16
 8006f50:	f7fe f8be 	bl	80050d0 <malloc>
 8006f54:	4602      	mov	r2, r0
 8006f56:	6260      	str	r0, [r4, #36]	; 0x24
 8006f58:	b920      	cbnz	r0, 8006f64 <_Balloc+0x20>
 8006f5a:	4b18      	ldr	r3, [pc, #96]	; (8006fbc <_Balloc+0x78>)
 8006f5c:	4818      	ldr	r0, [pc, #96]	; (8006fc0 <_Balloc+0x7c>)
 8006f5e:	2166      	movs	r1, #102	; 0x66
 8006f60:	f000 fd2c 	bl	80079bc <__assert_func>
 8006f64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f68:	6006      	str	r6, [r0, #0]
 8006f6a:	60c6      	str	r6, [r0, #12]
 8006f6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f6e:	68f3      	ldr	r3, [r6, #12]
 8006f70:	b183      	cbz	r3, 8006f94 <_Balloc+0x50>
 8006f72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f7a:	b9b8      	cbnz	r0, 8006fac <_Balloc+0x68>
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	fa01 f605 	lsl.w	r6, r1, r5
 8006f82:	1d72      	adds	r2, r6, #5
 8006f84:	0092      	lsls	r2, r2, #2
 8006f86:	4620      	mov	r0, r4
 8006f88:	f000 fb5a 	bl	8007640 <_calloc_r>
 8006f8c:	b160      	cbz	r0, 8006fa8 <_Balloc+0x64>
 8006f8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f92:	e00e      	b.n	8006fb2 <_Balloc+0x6e>
 8006f94:	2221      	movs	r2, #33	; 0x21
 8006f96:	2104      	movs	r1, #4
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f000 fb51 	bl	8007640 <_calloc_r>
 8006f9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fa0:	60f0      	str	r0, [r6, #12]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e4      	bne.n	8006f72 <_Balloc+0x2e>
 8006fa8:	2000      	movs	r0, #0
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
 8006fac:	6802      	ldr	r2, [r0, #0]
 8006fae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fb8:	e7f7      	b.n	8006faa <_Balloc+0x66>
 8006fba:	bf00      	nop
 8006fbc:	08007c35 	.word	0x08007c35
 8006fc0:	08007d1c 	.word	0x08007d1c

08006fc4 <_Bfree>:
 8006fc4:	b570      	push	{r4, r5, r6, lr}
 8006fc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fc8:	4605      	mov	r5, r0
 8006fca:	460c      	mov	r4, r1
 8006fcc:	b976      	cbnz	r6, 8006fec <_Bfree+0x28>
 8006fce:	2010      	movs	r0, #16
 8006fd0:	f7fe f87e 	bl	80050d0 <malloc>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	6268      	str	r0, [r5, #36]	; 0x24
 8006fd8:	b920      	cbnz	r0, 8006fe4 <_Bfree+0x20>
 8006fda:	4b09      	ldr	r3, [pc, #36]	; (8007000 <_Bfree+0x3c>)
 8006fdc:	4809      	ldr	r0, [pc, #36]	; (8007004 <_Bfree+0x40>)
 8006fde:	218a      	movs	r1, #138	; 0x8a
 8006fe0:	f000 fcec 	bl	80079bc <__assert_func>
 8006fe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fe8:	6006      	str	r6, [r0, #0]
 8006fea:	60c6      	str	r6, [r0, #12]
 8006fec:	b13c      	cbz	r4, 8006ffe <_Bfree+0x3a>
 8006fee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ff0:	6862      	ldr	r2, [r4, #4]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ff8:	6021      	str	r1, [r4, #0]
 8006ffa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}
 8007000:	08007c35 	.word	0x08007c35
 8007004:	08007d1c 	.word	0x08007d1c

08007008 <__multadd>:
 8007008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800700c:	690e      	ldr	r6, [r1, #16]
 800700e:	4607      	mov	r7, r0
 8007010:	4698      	mov	r8, r3
 8007012:	460c      	mov	r4, r1
 8007014:	f101 0014 	add.w	r0, r1, #20
 8007018:	2300      	movs	r3, #0
 800701a:	6805      	ldr	r5, [r0, #0]
 800701c:	b2a9      	uxth	r1, r5
 800701e:	fb02 8101 	mla	r1, r2, r1, r8
 8007022:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007026:	0c2d      	lsrs	r5, r5, #16
 8007028:	fb02 c505 	mla	r5, r2, r5, ip
 800702c:	b289      	uxth	r1, r1
 800702e:	3301      	adds	r3, #1
 8007030:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007034:	429e      	cmp	r6, r3
 8007036:	f840 1b04 	str.w	r1, [r0], #4
 800703a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800703e:	dcec      	bgt.n	800701a <__multadd+0x12>
 8007040:	f1b8 0f00 	cmp.w	r8, #0
 8007044:	d022      	beq.n	800708c <__multadd+0x84>
 8007046:	68a3      	ldr	r3, [r4, #8]
 8007048:	42b3      	cmp	r3, r6
 800704a:	dc19      	bgt.n	8007080 <__multadd+0x78>
 800704c:	6861      	ldr	r1, [r4, #4]
 800704e:	4638      	mov	r0, r7
 8007050:	3101      	adds	r1, #1
 8007052:	f7ff ff77 	bl	8006f44 <_Balloc>
 8007056:	4605      	mov	r5, r0
 8007058:	b928      	cbnz	r0, 8007066 <__multadd+0x5e>
 800705a:	4602      	mov	r2, r0
 800705c:	4b0d      	ldr	r3, [pc, #52]	; (8007094 <__multadd+0x8c>)
 800705e:	480e      	ldr	r0, [pc, #56]	; (8007098 <__multadd+0x90>)
 8007060:	21b5      	movs	r1, #181	; 0xb5
 8007062:	f000 fcab 	bl	80079bc <__assert_func>
 8007066:	6922      	ldr	r2, [r4, #16]
 8007068:	3202      	adds	r2, #2
 800706a:	f104 010c 	add.w	r1, r4, #12
 800706e:	0092      	lsls	r2, r2, #2
 8007070:	300c      	adds	r0, #12
 8007072:	f7ff ff4d 	bl	8006f10 <memcpy>
 8007076:	4621      	mov	r1, r4
 8007078:	4638      	mov	r0, r7
 800707a:	f7ff ffa3 	bl	8006fc4 <_Bfree>
 800707e:	462c      	mov	r4, r5
 8007080:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007084:	3601      	adds	r6, #1
 8007086:	f8c3 8014 	str.w	r8, [r3, #20]
 800708a:	6126      	str	r6, [r4, #16]
 800708c:	4620      	mov	r0, r4
 800708e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007092:	bf00      	nop
 8007094:	08007cab 	.word	0x08007cab
 8007098:	08007d1c 	.word	0x08007d1c

0800709c <__hi0bits>:
 800709c:	0c03      	lsrs	r3, r0, #16
 800709e:	041b      	lsls	r3, r3, #16
 80070a0:	b9d3      	cbnz	r3, 80070d8 <__hi0bits+0x3c>
 80070a2:	0400      	lsls	r0, r0, #16
 80070a4:	2310      	movs	r3, #16
 80070a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80070aa:	bf04      	itt	eq
 80070ac:	0200      	lsleq	r0, r0, #8
 80070ae:	3308      	addeq	r3, #8
 80070b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80070b4:	bf04      	itt	eq
 80070b6:	0100      	lsleq	r0, r0, #4
 80070b8:	3304      	addeq	r3, #4
 80070ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80070be:	bf04      	itt	eq
 80070c0:	0080      	lsleq	r0, r0, #2
 80070c2:	3302      	addeq	r3, #2
 80070c4:	2800      	cmp	r0, #0
 80070c6:	db05      	blt.n	80070d4 <__hi0bits+0x38>
 80070c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80070cc:	f103 0301 	add.w	r3, r3, #1
 80070d0:	bf08      	it	eq
 80070d2:	2320      	moveq	r3, #32
 80070d4:	4618      	mov	r0, r3
 80070d6:	4770      	bx	lr
 80070d8:	2300      	movs	r3, #0
 80070da:	e7e4      	b.n	80070a6 <__hi0bits+0xa>

080070dc <__lo0bits>:
 80070dc:	6803      	ldr	r3, [r0, #0]
 80070de:	f013 0207 	ands.w	r2, r3, #7
 80070e2:	4601      	mov	r1, r0
 80070e4:	d00b      	beq.n	80070fe <__lo0bits+0x22>
 80070e6:	07da      	lsls	r2, r3, #31
 80070e8:	d424      	bmi.n	8007134 <__lo0bits+0x58>
 80070ea:	0798      	lsls	r0, r3, #30
 80070ec:	bf49      	itett	mi
 80070ee:	085b      	lsrmi	r3, r3, #1
 80070f0:	089b      	lsrpl	r3, r3, #2
 80070f2:	2001      	movmi	r0, #1
 80070f4:	600b      	strmi	r3, [r1, #0]
 80070f6:	bf5c      	itt	pl
 80070f8:	600b      	strpl	r3, [r1, #0]
 80070fa:	2002      	movpl	r0, #2
 80070fc:	4770      	bx	lr
 80070fe:	b298      	uxth	r0, r3
 8007100:	b9b0      	cbnz	r0, 8007130 <__lo0bits+0x54>
 8007102:	0c1b      	lsrs	r3, r3, #16
 8007104:	2010      	movs	r0, #16
 8007106:	f013 0fff 	tst.w	r3, #255	; 0xff
 800710a:	bf04      	itt	eq
 800710c:	0a1b      	lsreq	r3, r3, #8
 800710e:	3008      	addeq	r0, #8
 8007110:	071a      	lsls	r2, r3, #28
 8007112:	bf04      	itt	eq
 8007114:	091b      	lsreq	r3, r3, #4
 8007116:	3004      	addeq	r0, #4
 8007118:	079a      	lsls	r2, r3, #30
 800711a:	bf04      	itt	eq
 800711c:	089b      	lsreq	r3, r3, #2
 800711e:	3002      	addeq	r0, #2
 8007120:	07da      	lsls	r2, r3, #31
 8007122:	d403      	bmi.n	800712c <__lo0bits+0x50>
 8007124:	085b      	lsrs	r3, r3, #1
 8007126:	f100 0001 	add.w	r0, r0, #1
 800712a:	d005      	beq.n	8007138 <__lo0bits+0x5c>
 800712c:	600b      	str	r3, [r1, #0]
 800712e:	4770      	bx	lr
 8007130:	4610      	mov	r0, r2
 8007132:	e7e8      	b.n	8007106 <__lo0bits+0x2a>
 8007134:	2000      	movs	r0, #0
 8007136:	4770      	bx	lr
 8007138:	2020      	movs	r0, #32
 800713a:	4770      	bx	lr

0800713c <__i2b>:
 800713c:	b510      	push	{r4, lr}
 800713e:	460c      	mov	r4, r1
 8007140:	2101      	movs	r1, #1
 8007142:	f7ff feff 	bl	8006f44 <_Balloc>
 8007146:	4602      	mov	r2, r0
 8007148:	b928      	cbnz	r0, 8007156 <__i2b+0x1a>
 800714a:	4b05      	ldr	r3, [pc, #20]	; (8007160 <__i2b+0x24>)
 800714c:	4805      	ldr	r0, [pc, #20]	; (8007164 <__i2b+0x28>)
 800714e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007152:	f000 fc33 	bl	80079bc <__assert_func>
 8007156:	2301      	movs	r3, #1
 8007158:	6144      	str	r4, [r0, #20]
 800715a:	6103      	str	r3, [r0, #16]
 800715c:	bd10      	pop	{r4, pc}
 800715e:	bf00      	nop
 8007160:	08007cab 	.word	0x08007cab
 8007164:	08007d1c 	.word	0x08007d1c

08007168 <__multiply>:
 8007168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716c:	4614      	mov	r4, r2
 800716e:	690a      	ldr	r2, [r1, #16]
 8007170:	6923      	ldr	r3, [r4, #16]
 8007172:	429a      	cmp	r2, r3
 8007174:	bfb8      	it	lt
 8007176:	460b      	movlt	r3, r1
 8007178:	460d      	mov	r5, r1
 800717a:	bfbc      	itt	lt
 800717c:	4625      	movlt	r5, r4
 800717e:	461c      	movlt	r4, r3
 8007180:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007184:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007188:	68ab      	ldr	r3, [r5, #8]
 800718a:	6869      	ldr	r1, [r5, #4]
 800718c:	eb0a 0709 	add.w	r7, sl, r9
 8007190:	42bb      	cmp	r3, r7
 8007192:	b085      	sub	sp, #20
 8007194:	bfb8      	it	lt
 8007196:	3101      	addlt	r1, #1
 8007198:	f7ff fed4 	bl	8006f44 <_Balloc>
 800719c:	b930      	cbnz	r0, 80071ac <__multiply+0x44>
 800719e:	4602      	mov	r2, r0
 80071a0:	4b42      	ldr	r3, [pc, #264]	; (80072ac <__multiply+0x144>)
 80071a2:	4843      	ldr	r0, [pc, #268]	; (80072b0 <__multiply+0x148>)
 80071a4:	f240 115d 	movw	r1, #349	; 0x15d
 80071a8:	f000 fc08 	bl	80079bc <__assert_func>
 80071ac:	f100 0614 	add.w	r6, r0, #20
 80071b0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80071b4:	4633      	mov	r3, r6
 80071b6:	2200      	movs	r2, #0
 80071b8:	4543      	cmp	r3, r8
 80071ba:	d31e      	bcc.n	80071fa <__multiply+0x92>
 80071bc:	f105 0c14 	add.w	ip, r5, #20
 80071c0:	f104 0314 	add.w	r3, r4, #20
 80071c4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80071c8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80071cc:	9202      	str	r2, [sp, #8]
 80071ce:	ebac 0205 	sub.w	r2, ip, r5
 80071d2:	3a15      	subs	r2, #21
 80071d4:	f022 0203 	bic.w	r2, r2, #3
 80071d8:	3204      	adds	r2, #4
 80071da:	f105 0115 	add.w	r1, r5, #21
 80071de:	458c      	cmp	ip, r1
 80071e0:	bf38      	it	cc
 80071e2:	2204      	movcc	r2, #4
 80071e4:	9201      	str	r2, [sp, #4]
 80071e6:	9a02      	ldr	r2, [sp, #8]
 80071e8:	9303      	str	r3, [sp, #12]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d808      	bhi.n	8007200 <__multiply+0x98>
 80071ee:	2f00      	cmp	r7, #0
 80071f0:	dc55      	bgt.n	800729e <__multiply+0x136>
 80071f2:	6107      	str	r7, [r0, #16]
 80071f4:	b005      	add	sp, #20
 80071f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fa:	f843 2b04 	str.w	r2, [r3], #4
 80071fe:	e7db      	b.n	80071b8 <__multiply+0x50>
 8007200:	f8b3 a000 	ldrh.w	sl, [r3]
 8007204:	f1ba 0f00 	cmp.w	sl, #0
 8007208:	d020      	beq.n	800724c <__multiply+0xe4>
 800720a:	f105 0e14 	add.w	lr, r5, #20
 800720e:	46b1      	mov	r9, r6
 8007210:	2200      	movs	r2, #0
 8007212:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007216:	f8d9 b000 	ldr.w	fp, [r9]
 800721a:	b2a1      	uxth	r1, r4
 800721c:	fa1f fb8b 	uxth.w	fp, fp
 8007220:	fb0a b101 	mla	r1, sl, r1, fp
 8007224:	4411      	add	r1, r2
 8007226:	f8d9 2000 	ldr.w	r2, [r9]
 800722a:	0c24      	lsrs	r4, r4, #16
 800722c:	0c12      	lsrs	r2, r2, #16
 800722e:	fb0a 2404 	mla	r4, sl, r4, r2
 8007232:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007236:	b289      	uxth	r1, r1
 8007238:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800723c:	45f4      	cmp	ip, lr
 800723e:	f849 1b04 	str.w	r1, [r9], #4
 8007242:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007246:	d8e4      	bhi.n	8007212 <__multiply+0xaa>
 8007248:	9901      	ldr	r1, [sp, #4]
 800724a:	5072      	str	r2, [r6, r1]
 800724c:	9a03      	ldr	r2, [sp, #12]
 800724e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007252:	3304      	adds	r3, #4
 8007254:	f1b9 0f00 	cmp.w	r9, #0
 8007258:	d01f      	beq.n	800729a <__multiply+0x132>
 800725a:	6834      	ldr	r4, [r6, #0]
 800725c:	f105 0114 	add.w	r1, r5, #20
 8007260:	46b6      	mov	lr, r6
 8007262:	f04f 0a00 	mov.w	sl, #0
 8007266:	880a      	ldrh	r2, [r1, #0]
 8007268:	f8be b002 	ldrh.w	fp, [lr, #2]
 800726c:	fb09 b202 	mla	r2, r9, r2, fp
 8007270:	4492      	add	sl, r2
 8007272:	b2a4      	uxth	r4, r4
 8007274:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007278:	f84e 4b04 	str.w	r4, [lr], #4
 800727c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007280:	f8be 2000 	ldrh.w	r2, [lr]
 8007284:	0c24      	lsrs	r4, r4, #16
 8007286:	fb09 2404 	mla	r4, r9, r4, r2
 800728a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800728e:	458c      	cmp	ip, r1
 8007290:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007294:	d8e7      	bhi.n	8007266 <__multiply+0xfe>
 8007296:	9a01      	ldr	r2, [sp, #4]
 8007298:	50b4      	str	r4, [r6, r2]
 800729a:	3604      	adds	r6, #4
 800729c:	e7a3      	b.n	80071e6 <__multiply+0x7e>
 800729e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1a5      	bne.n	80071f2 <__multiply+0x8a>
 80072a6:	3f01      	subs	r7, #1
 80072a8:	e7a1      	b.n	80071ee <__multiply+0x86>
 80072aa:	bf00      	nop
 80072ac:	08007cab 	.word	0x08007cab
 80072b0:	08007d1c 	.word	0x08007d1c

080072b4 <__pow5mult>:
 80072b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072b8:	4615      	mov	r5, r2
 80072ba:	f012 0203 	ands.w	r2, r2, #3
 80072be:	4606      	mov	r6, r0
 80072c0:	460f      	mov	r7, r1
 80072c2:	d007      	beq.n	80072d4 <__pow5mult+0x20>
 80072c4:	4c25      	ldr	r4, [pc, #148]	; (800735c <__pow5mult+0xa8>)
 80072c6:	3a01      	subs	r2, #1
 80072c8:	2300      	movs	r3, #0
 80072ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072ce:	f7ff fe9b 	bl	8007008 <__multadd>
 80072d2:	4607      	mov	r7, r0
 80072d4:	10ad      	asrs	r5, r5, #2
 80072d6:	d03d      	beq.n	8007354 <__pow5mult+0xa0>
 80072d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80072da:	b97c      	cbnz	r4, 80072fc <__pow5mult+0x48>
 80072dc:	2010      	movs	r0, #16
 80072de:	f7fd fef7 	bl	80050d0 <malloc>
 80072e2:	4602      	mov	r2, r0
 80072e4:	6270      	str	r0, [r6, #36]	; 0x24
 80072e6:	b928      	cbnz	r0, 80072f4 <__pow5mult+0x40>
 80072e8:	4b1d      	ldr	r3, [pc, #116]	; (8007360 <__pow5mult+0xac>)
 80072ea:	481e      	ldr	r0, [pc, #120]	; (8007364 <__pow5mult+0xb0>)
 80072ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80072f0:	f000 fb64 	bl	80079bc <__assert_func>
 80072f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072f8:	6004      	str	r4, [r0, #0]
 80072fa:	60c4      	str	r4, [r0, #12]
 80072fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007300:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007304:	b94c      	cbnz	r4, 800731a <__pow5mult+0x66>
 8007306:	f240 2171 	movw	r1, #625	; 0x271
 800730a:	4630      	mov	r0, r6
 800730c:	f7ff ff16 	bl	800713c <__i2b>
 8007310:	2300      	movs	r3, #0
 8007312:	f8c8 0008 	str.w	r0, [r8, #8]
 8007316:	4604      	mov	r4, r0
 8007318:	6003      	str	r3, [r0, #0]
 800731a:	f04f 0900 	mov.w	r9, #0
 800731e:	07eb      	lsls	r3, r5, #31
 8007320:	d50a      	bpl.n	8007338 <__pow5mult+0x84>
 8007322:	4639      	mov	r1, r7
 8007324:	4622      	mov	r2, r4
 8007326:	4630      	mov	r0, r6
 8007328:	f7ff ff1e 	bl	8007168 <__multiply>
 800732c:	4639      	mov	r1, r7
 800732e:	4680      	mov	r8, r0
 8007330:	4630      	mov	r0, r6
 8007332:	f7ff fe47 	bl	8006fc4 <_Bfree>
 8007336:	4647      	mov	r7, r8
 8007338:	106d      	asrs	r5, r5, #1
 800733a:	d00b      	beq.n	8007354 <__pow5mult+0xa0>
 800733c:	6820      	ldr	r0, [r4, #0]
 800733e:	b938      	cbnz	r0, 8007350 <__pow5mult+0x9c>
 8007340:	4622      	mov	r2, r4
 8007342:	4621      	mov	r1, r4
 8007344:	4630      	mov	r0, r6
 8007346:	f7ff ff0f 	bl	8007168 <__multiply>
 800734a:	6020      	str	r0, [r4, #0]
 800734c:	f8c0 9000 	str.w	r9, [r0]
 8007350:	4604      	mov	r4, r0
 8007352:	e7e4      	b.n	800731e <__pow5mult+0x6a>
 8007354:	4638      	mov	r0, r7
 8007356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800735a:	bf00      	nop
 800735c:	08007e70 	.word	0x08007e70
 8007360:	08007c35 	.word	0x08007c35
 8007364:	08007d1c 	.word	0x08007d1c

08007368 <__lshift>:
 8007368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800736c:	460c      	mov	r4, r1
 800736e:	6849      	ldr	r1, [r1, #4]
 8007370:	6923      	ldr	r3, [r4, #16]
 8007372:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007376:	68a3      	ldr	r3, [r4, #8]
 8007378:	4607      	mov	r7, r0
 800737a:	4691      	mov	r9, r2
 800737c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007380:	f108 0601 	add.w	r6, r8, #1
 8007384:	42b3      	cmp	r3, r6
 8007386:	db0b      	blt.n	80073a0 <__lshift+0x38>
 8007388:	4638      	mov	r0, r7
 800738a:	f7ff fddb 	bl	8006f44 <_Balloc>
 800738e:	4605      	mov	r5, r0
 8007390:	b948      	cbnz	r0, 80073a6 <__lshift+0x3e>
 8007392:	4602      	mov	r2, r0
 8007394:	4b28      	ldr	r3, [pc, #160]	; (8007438 <__lshift+0xd0>)
 8007396:	4829      	ldr	r0, [pc, #164]	; (800743c <__lshift+0xd4>)
 8007398:	f240 11d9 	movw	r1, #473	; 0x1d9
 800739c:	f000 fb0e 	bl	80079bc <__assert_func>
 80073a0:	3101      	adds	r1, #1
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	e7ee      	b.n	8007384 <__lshift+0x1c>
 80073a6:	2300      	movs	r3, #0
 80073a8:	f100 0114 	add.w	r1, r0, #20
 80073ac:	f100 0210 	add.w	r2, r0, #16
 80073b0:	4618      	mov	r0, r3
 80073b2:	4553      	cmp	r3, sl
 80073b4:	db33      	blt.n	800741e <__lshift+0xb6>
 80073b6:	6920      	ldr	r0, [r4, #16]
 80073b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073bc:	f104 0314 	add.w	r3, r4, #20
 80073c0:	f019 091f 	ands.w	r9, r9, #31
 80073c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073cc:	d02b      	beq.n	8007426 <__lshift+0xbe>
 80073ce:	f1c9 0e20 	rsb	lr, r9, #32
 80073d2:	468a      	mov	sl, r1
 80073d4:	2200      	movs	r2, #0
 80073d6:	6818      	ldr	r0, [r3, #0]
 80073d8:	fa00 f009 	lsl.w	r0, r0, r9
 80073dc:	4302      	orrs	r2, r0
 80073de:	f84a 2b04 	str.w	r2, [sl], #4
 80073e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073e6:	459c      	cmp	ip, r3
 80073e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80073ec:	d8f3      	bhi.n	80073d6 <__lshift+0x6e>
 80073ee:	ebac 0304 	sub.w	r3, ip, r4
 80073f2:	3b15      	subs	r3, #21
 80073f4:	f023 0303 	bic.w	r3, r3, #3
 80073f8:	3304      	adds	r3, #4
 80073fa:	f104 0015 	add.w	r0, r4, #21
 80073fe:	4584      	cmp	ip, r0
 8007400:	bf38      	it	cc
 8007402:	2304      	movcc	r3, #4
 8007404:	50ca      	str	r2, [r1, r3]
 8007406:	b10a      	cbz	r2, 800740c <__lshift+0xa4>
 8007408:	f108 0602 	add.w	r6, r8, #2
 800740c:	3e01      	subs	r6, #1
 800740e:	4638      	mov	r0, r7
 8007410:	612e      	str	r6, [r5, #16]
 8007412:	4621      	mov	r1, r4
 8007414:	f7ff fdd6 	bl	8006fc4 <_Bfree>
 8007418:	4628      	mov	r0, r5
 800741a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800741e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007422:	3301      	adds	r3, #1
 8007424:	e7c5      	b.n	80073b2 <__lshift+0x4a>
 8007426:	3904      	subs	r1, #4
 8007428:	f853 2b04 	ldr.w	r2, [r3], #4
 800742c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007430:	459c      	cmp	ip, r3
 8007432:	d8f9      	bhi.n	8007428 <__lshift+0xc0>
 8007434:	e7ea      	b.n	800740c <__lshift+0xa4>
 8007436:	bf00      	nop
 8007438:	08007cab 	.word	0x08007cab
 800743c:	08007d1c 	.word	0x08007d1c

08007440 <__mcmp>:
 8007440:	b530      	push	{r4, r5, lr}
 8007442:	6902      	ldr	r2, [r0, #16]
 8007444:	690c      	ldr	r4, [r1, #16]
 8007446:	1b12      	subs	r2, r2, r4
 8007448:	d10e      	bne.n	8007468 <__mcmp+0x28>
 800744a:	f100 0314 	add.w	r3, r0, #20
 800744e:	3114      	adds	r1, #20
 8007450:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007454:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007458:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800745c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007460:	42a5      	cmp	r5, r4
 8007462:	d003      	beq.n	800746c <__mcmp+0x2c>
 8007464:	d305      	bcc.n	8007472 <__mcmp+0x32>
 8007466:	2201      	movs	r2, #1
 8007468:	4610      	mov	r0, r2
 800746a:	bd30      	pop	{r4, r5, pc}
 800746c:	4283      	cmp	r3, r0
 800746e:	d3f3      	bcc.n	8007458 <__mcmp+0x18>
 8007470:	e7fa      	b.n	8007468 <__mcmp+0x28>
 8007472:	f04f 32ff 	mov.w	r2, #4294967295
 8007476:	e7f7      	b.n	8007468 <__mcmp+0x28>

08007478 <__mdiff>:
 8007478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747c:	460c      	mov	r4, r1
 800747e:	4606      	mov	r6, r0
 8007480:	4611      	mov	r1, r2
 8007482:	4620      	mov	r0, r4
 8007484:	4617      	mov	r7, r2
 8007486:	f7ff ffdb 	bl	8007440 <__mcmp>
 800748a:	1e05      	subs	r5, r0, #0
 800748c:	d110      	bne.n	80074b0 <__mdiff+0x38>
 800748e:	4629      	mov	r1, r5
 8007490:	4630      	mov	r0, r6
 8007492:	f7ff fd57 	bl	8006f44 <_Balloc>
 8007496:	b930      	cbnz	r0, 80074a6 <__mdiff+0x2e>
 8007498:	4b39      	ldr	r3, [pc, #228]	; (8007580 <__mdiff+0x108>)
 800749a:	4602      	mov	r2, r0
 800749c:	f240 2132 	movw	r1, #562	; 0x232
 80074a0:	4838      	ldr	r0, [pc, #224]	; (8007584 <__mdiff+0x10c>)
 80074a2:	f000 fa8b 	bl	80079bc <__assert_func>
 80074a6:	2301      	movs	r3, #1
 80074a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074b0:	bfa4      	itt	ge
 80074b2:	463b      	movge	r3, r7
 80074b4:	4627      	movge	r7, r4
 80074b6:	4630      	mov	r0, r6
 80074b8:	6879      	ldr	r1, [r7, #4]
 80074ba:	bfa6      	itte	ge
 80074bc:	461c      	movge	r4, r3
 80074be:	2500      	movge	r5, #0
 80074c0:	2501      	movlt	r5, #1
 80074c2:	f7ff fd3f 	bl	8006f44 <_Balloc>
 80074c6:	b920      	cbnz	r0, 80074d2 <__mdiff+0x5a>
 80074c8:	4b2d      	ldr	r3, [pc, #180]	; (8007580 <__mdiff+0x108>)
 80074ca:	4602      	mov	r2, r0
 80074cc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80074d0:	e7e6      	b.n	80074a0 <__mdiff+0x28>
 80074d2:	693e      	ldr	r6, [r7, #16]
 80074d4:	60c5      	str	r5, [r0, #12]
 80074d6:	6925      	ldr	r5, [r4, #16]
 80074d8:	f107 0114 	add.w	r1, r7, #20
 80074dc:	f104 0914 	add.w	r9, r4, #20
 80074e0:	f100 0e14 	add.w	lr, r0, #20
 80074e4:	f107 0210 	add.w	r2, r7, #16
 80074e8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80074ec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80074f0:	46f2      	mov	sl, lr
 80074f2:	2700      	movs	r7, #0
 80074f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80074f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80074fc:	fa1f f883 	uxth.w	r8, r3
 8007500:	fa17 f78b 	uxtah	r7, r7, fp
 8007504:	0c1b      	lsrs	r3, r3, #16
 8007506:	eba7 0808 	sub.w	r8, r7, r8
 800750a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800750e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007512:	fa1f f888 	uxth.w	r8, r8
 8007516:	141f      	asrs	r7, r3, #16
 8007518:	454d      	cmp	r5, r9
 800751a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800751e:	f84a 3b04 	str.w	r3, [sl], #4
 8007522:	d8e7      	bhi.n	80074f4 <__mdiff+0x7c>
 8007524:	1b2b      	subs	r3, r5, r4
 8007526:	3b15      	subs	r3, #21
 8007528:	f023 0303 	bic.w	r3, r3, #3
 800752c:	3304      	adds	r3, #4
 800752e:	3415      	adds	r4, #21
 8007530:	42a5      	cmp	r5, r4
 8007532:	bf38      	it	cc
 8007534:	2304      	movcc	r3, #4
 8007536:	4419      	add	r1, r3
 8007538:	4473      	add	r3, lr
 800753a:	469e      	mov	lr, r3
 800753c:	460d      	mov	r5, r1
 800753e:	4565      	cmp	r5, ip
 8007540:	d30e      	bcc.n	8007560 <__mdiff+0xe8>
 8007542:	f10c 0203 	add.w	r2, ip, #3
 8007546:	1a52      	subs	r2, r2, r1
 8007548:	f022 0203 	bic.w	r2, r2, #3
 800754c:	3903      	subs	r1, #3
 800754e:	458c      	cmp	ip, r1
 8007550:	bf38      	it	cc
 8007552:	2200      	movcc	r2, #0
 8007554:	441a      	add	r2, r3
 8007556:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800755a:	b17b      	cbz	r3, 800757c <__mdiff+0x104>
 800755c:	6106      	str	r6, [r0, #16]
 800755e:	e7a5      	b.n	80074ac <__mdiff+0x34>
 8007560:	f855 8b04 	ldr.w	r8, [r5], #4
 8007564:	fa17 f488 	uxtah	r4, r7, r8
 8007568:	1422      	asrs	r2, r4, #16
 800756a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800756e:	b2a4      	uxth	r4, r4
 8007570:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007574:	f84e 4b04 	str.w	r4, [lr], #4
 8007578:	1417      	asrs	r7, r2, #16
 800757a:	e7e0      	b.n	800753e <__mdiff+0xc6>
 800757c:	3e01      	subs	r6, #1
 800757e:	e7ea      	b.n	8007556 <__mdiff+0xde>
 8007580:	08007cab 	.word	0x08007cab
 8007584:	08007d1c 	.word	0x08007d1c

08007588 <__d2b>:
 8007588:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800758c:	4689      	mov	r9, r1
 800758e:	2101      	movs	r1, #1
 8007590:	ec57 6b10 	vmov	r6, r7, d0
 8007594:	4690      	mov	r8, r2
 8007596:	f7ff fcd5 	bl	8006f44 <_Balloc>
 800759a:	4604      	mov	r4, r0
 800759c:	b930      	cbnz	r0, 80075ac <__d2b+0x24>
 800759e:	4602      	mov	r2, r0
 80075a0:	4b25      	ldr	r3, [pc, #148]	; (8007638 <__d2b+0xb0>)
 80075a2:	4826      	ldr	r0, [pc, #152]	; (800763c <__d2b+0xb4>)
 80075a4:	f240 310a 	movw	r1, #778	; 0x30a
 80075a8:	f000 fa08 	bl	80079bc <__assert_func>
 80075ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80075b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075b4:	bb35      	cbnz	r5, 8007604 <__d2b+0x7c>
 80075b6:	2e00      	cmp	r6, #0
 80075b8:	9301      	str	r3, [sp, #4]
 80075ba:	d028      	beq.n	800760e <__d2b+0x86>
 80075bc:	4668      	mov	r0, sp
 80075be:	9600      	str	r6, [sp, #0]
 80075c0:	f7ff fd8c 	bl	80070dc <__lo0bits>
 80075c4:	9900      	ldr	r1, [sp, #0]
 80075c6:	b300      	cbz	r0, 800760a <__d2b+0x82>
 80075c8:	9a01      	ldr	r2, [sp, #4]
 80075ca:	f1c0 0320 	rsb	r3, r0, #32
 80075ce:	fa02 f303 	lsl.w	r3, r2, r3
 80075d2:	430b      	orrs	r3, r1
 80075d4:	40c2      	lsrs	r2, r0
 80075d6:	6163      	str	r3, [r4, #20]
 80075d8:	9201      	str	r2, [sp, #4]
 80075da:	9b01      	ldr	r3, [sp, #4]
 80075dc:	61a3      	str	r3, [r4, #24]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	bf14      	ite	ne
 80075e2:	2202      	movne	r2, #2
 80075e4:	2201      	moveq	r2, #1
 80075e6:	6122      	str	r2, [r4, #16]
 80075e8:	b1d5      	cbz	r5, 8007620 <__d2b+0x98>
 80075ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80075ee:	4405      	add	r5, r0
 80075f0:	f8c9 5000 	str.w	r5, [r9]
 80075f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075f8:	f8c8 0000 	str.w	r0, [r8]
 80075fc:	4620      	mov	r0, r4
 80075fe:	b003      	add	sp, #12
 8007600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007608:	e7d5      	b.n	80075b6 <__d2b+0x2e>
 800760a:	6161      	str	r1, [r4, #20]
 800760c:	e7e5      	b.n	80075da <__d2b+0x52>
 800760e:	a801      	add	r0, sp, #4
 8007610:	f7ff fd64 	bl	80070dc <__lo0bits>
 8007614:	9b01      	ldr	r3, [sp, #4]
 8007616:	6163      	str	r3, [r4, #20]
 8007618:	2201      	movs	r2, #1
 800761a:	6122      	str	r2, [r4, #16]
 800761c:	3020      	adds	r0, #32
 800761e:	e7e3      	b.n	80075e8 <__d2b+0x60>
 8007620:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007624:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007628:	f8c9 0000 	str.w	r0, [r9]
 800762c:	6918      	ldr	r0, [r3, #16]
 800762e:	f7ff fd35 	bl	800709c <__hi0bits>
 8007632:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007636:	e7df      	b.n	80075f8 <__d2b+0x70>
 8007638:	08007cab 	.word	0x08007cab
 800763c:	08007d1c 	.word	0x08007d1c

08007640 <_calloc_r>:
 8007640:	b513      	push	{r0, r1, r4, lr}
 8007642:	434a      	muls	r2, r1
 8007644:	4611      	mov	r1, r2
 8007646:	9201      	str	r2, [sp, #4]
 8007648:	f7fd fda2 	bl	8005190 <_malloc_r>
 800764c:	4604      	mov	r4, r0
 800764e:	b118      	cbz	r0, 8007658 <_calloc_r+0x18>
 8007650:	9a01      	ldr	r2, [sp, #4]
 8007652:	2100      	movs	r1, #0
 8007654:	f7fd fd44 	bl	80050e0 <memset>
 8007658:	4620      	mov	r0, r4
 800765a:	b002      	add	sp, #8
 800765c:	bd10      	pop	{r4, pc}

0800765e <__sfputc_r>:
 800765e:	6893      	ldr	r3, [r2, #8]
 8007660:	3b01      	subs	r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	b410      	push	{r4}
 8007666:	6093      	str	r3, [r2, #8]
 8007668:	da08      	bge.n	800767c <__sfputc_r+0x1e>
 800766a:	6994      	ldr	r4, [r2, #24]
 800766c:	42a3      	cmp	r3, r4
 800766e:	db01      	blt.n	8007674 <__sfputc_r+0x16>
 8007670:	290a      	cmp	r1, #10
 8007672:	d103      	bne.n	800767c <__sfputc_r+0x1e>
 8007674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007678:	f7fe baec 	b.w	8005c54 <__swbuf_r>
 800767c:	6813      	ldr	r3, [r2, #0]
 800767e:	1c58      	adds	r0, r3, #1
 8007680:	6010      	str	r0, [r2, #0]
 8007682:	7019      	strb	r1, [r3, #0]
 8007684:	4608      	mov	r0, r1
 8007686:	f85d 4b04 	ldr.w	r4, [sp], #4
 800768a:	4770      	bx	lr

0800768c <__sfputs_r>:
 800768c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768e:	4606      	mov	r6, r0
 8007690:	460f      	mov	r7, r1
 8007692:	4614      	mov	r4, r2
 8007694:	18d5      	adds	r5, r2, r3
 8007696:	42ac      	cmp	r4, r5
 8007698:	d101      	bne.n	800769e <__sfputs_r+0x12>
 800769a:	2000      	movs	r0, #0
 800769c:	e007      	b.n	80076ae <__sfputs_r+0x22>
 800769e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a2:	463a      	mov	r2, r7
 80076a4:	4630      	mov	r0, r6
 80076a6:	f7ff ffda 	bl	800765e <__sfputc_r>
 80076aa:	1c43      	adds	r3, r0, #1
 80076ac:	d1f3      	bne.n	8007696 <__sfputs_r+0xa>
 80076ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076b0 <_vfiprintf_r>:
 80076b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b4:	460d      	mov	r5, r1
 80076b6:	b09d      	sub	sp, #116	; 0x74
 80076b8:	4614      	mov	r4, r2
 80076ba:	4698      	mov	r8, r3
 80076bc:	4606      	mov	r6, r0
 80076be:	b118      	cbz	r0, 80076c8 <_vfiprintf_r+0x18>
 80076c0:	6983      	ldr	r3, [r0, #24]
 80076c2:	b90b      	cbnz	r3, 80076c8 <_vfiprintf_r+0x18>
 80076c4:	f7ff fb1a 	bl	8006cfc <__sinit>
 80076c8:	4b89      	ldr	r3, [pc, #548]	; (80078f0 <_vfiprintf_r+0x240>)
 80076ca:	429d      	cmp	r5, r3
 80076cc:	d11b      	bne.n	8007706 <_vfiprintf_r+0x56>
 80076ce:	6875      	ldr	r5, [r6, #4]
 80076d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076d2:	07d9      	lsls	r1, r3, #31
 80076d4:	d405      	bmi.n	80076e2 <_vfiprintf_r+0x32>
 80076d6:	89ab      	ldrh	r3, [r5, #12]
 80076d8:	059a      	lsls	r2, r3, #22
 80076da:	d402      	bmi.n	80076e2 <_vfiprintf_r+0x32>
 80076dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076de:	f7ff fbb0 	bl	8006e42 <__retarget_lock_acquire_recursive>
 80076e2:	89ab      	ldrh	r3, [r5, #12]
 80076e4:	071b      	lsls	r3, r3, #28
 80076e6:	d501      	bpl.n	80076ec <_vfiprintf_r+0x3c>
 80076e8:	692b      	ldr	r3, [r5, #16]
 80076ea:	b9eb      	cbnz	r3, 8007728 <_vfiprintf_r+0x78>
 80076ec:	4629      	mov	r1, r5
 80076ee:	4630      	mov	r0, r6
 80076f0:	f7fe fb02 	bl	8005cf8 <__swsetup_r>
 80076f4:	b1c0      	cbz	r0, 8007728 <_vfiprintf_r+0x78>
 80076f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076f8:	07dc      	lsls	r4, r3, #31
 80076fa:	d50e      	bpl.n	800771a <_vfiprintf_r+0x6a>
 80076fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007700:	b01d      	add	sp, #116	; 0x74
 8007702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007706:	4b7b      	ldr	r3, [pc, #492]	; (80078f4 <_vfiprintf_r+0x244>)
 8007708:	429d      	cmp	r5, r3
 800770a:	d101      	bne.n	8007710 <_vfiprintf_r+0x60>
 800770c:	68b5      	ldr	r5, [r6, #8]
 800770e:	e7df      	b.n	80076d0 <_vfiprintf_r+0x20>
 8007710:	4b79      	ldr	r3, [pc, #484]	; (80078f8 <_vfiprintf_r+0x248>)
 8007712:	429d      	cmp	r5, r3
 8007714:	bf08      	it	eq
 8007716:	68f5      	ldreq	r5, [r6, #12]
 8007718:	e7da      	b.n	80076d0 <_vfiprintf_r+0x20>
 800771a:	89ab      	ldrh	r3, [r5, #12]
 800771c:	0598      	lsls	r0, r3, #22
 800771e:	d4ed      	bmi.n	80076fc <_vfiprintf_r+0x4c>
 8007720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007722:	f7ff fb8f 	bl	8006e44 <__retarget_lock_release_recursive>
 8007726:	e7e9      	b.n	80076fc <_vfiprintf_r+0x4c>
 8007728:	2300      	movs	r3, #0
 800772a:	9309      	str	r3, [sp, #36]	; 0x24
 800772c:	2320      	movs	r3, #32
 800772e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007732:	f8cd 800c 	str.w	r8, [sp, #12]
 8007736:	2330      	movs	r3, #48	; 0x30
 8007738:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80078fc <_vfiprintf_r+0x24c>
 800773c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007740:	f04f 0901 	mov.w	r9, #1
 8007744:	4623      	mov	r3, r4
 8007746:	469a      	mov	sl, r3
 8007748:	f813 2b01 	ldrb.w	r2, [r3], #1
 800774c:	b10a      	cbz	r2, 8007752 <_vfiprintf_r+0xa2>
 800774e:	2a25      	cmp	r2, #37	; 0x25
 8007750:	d1f9      	bne.n	8007746 <_vfiprintf_r+0x96>
 8007752:	ebba 0b04 	subs.w	fp, sl, r4
 8007756:	d00b      	beq.n	8007770 <_vfiprintf_r+0xc0>
 8007758:	465b      	mov	r3, fp
 800775a:	4622      	mov	r2, r4
 800775c:	4629      	mov	r1, r5
 800775e:	4630      	mov	r0, r6
 8007760:	f7ff ff94 	bl	800768c <__sfputs_r>
 8007764:	3001      	adds	r0, #1
 8007766:	f000 80aa 	beq.w	80078be <_vfiprintf_r+0x20e>
 800776a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800776c:	445a      	add	r2, fp
 800776e:	9209      	str	r2, [sp, #36]	; 0x24
 8007770:	f89a 3000 	ldrb.w	r3, [sl]
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 80a2 	beq.w	80078be <_vfiprintf_r+0x20e>
 800777a:	2300      	movs	r3, #0
 800777c:	f04f 32ff 	mov.w	r2, #4294967295
 8007780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007784:	f10a 0a01 	add.w	sl, sl, #1
 8007788:	9304      	str	r3, [sp, #16]
 800778a:	9307      	str	r3, [sp, #28]
 800778c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007790:	931a      	str	r3, [sp, #104]	; 0x68
 8007792:	4654      	mov	r4, sl
 8007794:	2205      	movs	r2, #5
 8007796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800779a:	4858      	ldr	r0, [pc, #352]	; (80078fc <_vfiprintf_r+0x24c>)
 800779c:	f7f8 fd30 	bl	8000200 <memchr>
 80077a0:	9a04      	ldr	r2, [sp, #16]
 80077a2:	b9d8      	cbnz	r0, 80077dc <_vfiprintf_r+0x12c>
 80077a4:	06d1      	lsls	r1, r2, #27
 80077a6:	bf44      	itt	mi
 80077a8:	2320      	movmi	r3, #32
 80077aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ae:	0713      	lsls	r3, r2, #28
 80077b0:	bf44      	itt	mi
 80077b2:	232b      	movmi	r3, #43	; 0x2b
 80077b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077b8:	f89a 3000 	ldrb.w	r3, [sl]
 80077bc:	2b2a      	cmp	r3, #42	; 0x2a
 80077be:	d015      	beq.n	80077ec <_vfiprintf_r+0x13c>
 80077c0:	9a07      	ldr	r2, [sp, #28]
 80077c2:	4654      	mov	r4, sl
 80077c4:	2000      	movs	r0, #0
 80077c6:	f04f 0c0a 	mov.w	ip, #10
 80077ca:	4621      	mov	r1, r4
 80077cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077d0:	3b30      	subs	r3, #48	; 0x30
 80077d2:	2b09      	cmp	r3, #9
 80077d4:	d94e      	bls.n	8007874 <_vfiprintf_r+0x1c4>
 80077d6:	b1b0      	cbz	r0, 8007806 <_vfiprintf_r+0x156>
 80077d8:	9207      	str	r2, [sp, #28]
 80077da:	e014      	b.n	8007806 <_vfiprintf_r+0x156>
 80077dc:	eba0 0308 	sub.w	r3, r0, r8
 80077e0:	fa09 f303 	lsl.w	r3, r9, r3
 80077e4:	4313      	orrs	r3, r2
 80077e6:	9304      	str	r3, [sp, #16]
 80077e8:	46a2      	mov	sl, r4
 80077ea:	e7d2      	b.n	8007792 <_vfiprintf_r+0xe2>
 80077ec:	9b03      	ldr	r3, [sp, #12]
 80077ee:	1d19      	adds	r1, r3, #4
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	9103      	str	r1, [sp, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	bfbb      	ittet	lt
 80077f8:	425b      	neglt	r3, r3
 80077fa:	f042 0202 	orrlt.w	r2, r2, #2
 80077fe:	9307      	strge	r3, [sp, #28]
 8007800:	9307      	strlt	r3, [sp, #28]
 8007802:	bfb8      	it	lt
 8007804:	9204      	strlt	r2, [sp, #16]
 8007806:	7823      	ldrb	r3, [r4, #0]
 8007808:	2b2e      	cmp	r3, #46	; 0x2e
 800780a:	d10c      	bne.n	8007826 <_vfiprintf_r+0x176>
 800780c:	7863      	ldrb	r3, [r4, #1]
 800780e:	2b2a      	cmp	r3, #42	; 0x2a
 8007810:	d135      	bne.n	800787e <_vfiprintf_r+0x1ce>
 8007812:	9b03      	ldr	r3, [sp, #12]
 8007814:	1d1a      	adds	r2, r3, #4
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	9203      	str	r2, [sp, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	bfb8      	it	lt
 800781e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007822:	3402      	adds	r4, #2
 8007824:	9305      	str	r3, [sp, #20]
 8007826:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800790c <_vfiprintf_r+0x25c>
 800782a:	7821      	ldrb	r1, [r4, #0]
 800782c:	2203      	movs	r2, #3
 800782e:	4650      	mov	r0, sl
 8007830:	f7f8 fce6 	bl	8000200 <memchr>
 8007834:	b140      	cbz	r0, 8007848 <_vfiprintf_r+0x198>
 8007836:	2340      	movs	r3, #64	; 0x40
 8007838:	eba0 000a 	sub.w	r0, r0, sl
 800783c:	fa03 f000 	lsl.w	r0, r3, r0
 8007840:	9b04      	ldr	r3, [sp, #16]
 8007842:	4303      	orrs	r3, r0
 8007844:	3401      	adds	r4, #1
 8007846:	9304      	str	r3, [sp, #16]
 8007848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800784c:	482c      	ldr	r0, [pc, #176]	; (8007900 <_vfiprintf_r+0x250>)
 800784e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007852:	2206      	movs	r2, #6
 8007854:	f7f8 fcd4 	bl	8000200 <memchr>
 8007858:	2800      	cmp	r0, #0
 800785a:	d03f      	beq.n	80078dc <_vfiprintf_r+0x22c>
 800785c:	4b29      	ldr	r3, [pc, #164]	; (8007904 <_vfiprintf_r+0x254>)
 800785e:	bb1b      	cbnz	r3, 80078a8 <_vfiprintf_r+0x1f8>
 8007860:	9b03      	ldr	r3, [sp, #12]
 8007862:	3307      	adds	r3, #7
 8007864:	f023 0307 	bic.w	r3, r3, #7
 8007868:	3308      	adds	r3, #8
 800786a:	9303      	str	r3, [sp, #12]
 800786c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800786e:	443b      	add	r3, r7
 8007870:	9309      	str	r3, [sp, #36]	; 0x24
 8007872:	e767      	b.n	8007744 <_vfiprintf_r+0x94>
 8007874:	fb0c 3202 	mla	r2, ip, r2, r3
 8007878:	460c      	mov	r4, r1
 800787a:	2001      	movs	r0, #1
 800787c:	e7a5      	b.n	80077ca <_vfiprintf_r+0x11a>
 800787e:	2300      	movs	r3, #0
 8007880:	3401      	adds	r4, #1
 8007882:	9305      	str	r3, [sp, #20]
 8007884:	4619      	mov	r1, r3
 8007886:	f04f 0c0a 	mov.w	ip, #10
 800788a:	4620      	mov	r0, r4
 800788c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007890:	3a30      	subs	r2, #48	; 0x30
 8007892:	2a09      	cmp	r2, #9
 8007894:	d903      	bls.n	800789e <_vfiprintf_r+0x1ee>
 8007896:	2b00      	cmp	r3, #0
 8007898:	d0c5      	beq.n	8007826 <_vfiprintf_r+0x176>
 800789a:	9105      	str	r1, [sp, #20]
 800789c:	e7c3      	b.n	8007826 <_vfiprintf_r+0x176>
 800789e:	fb0c 2101 	mla	r1, ip, r1, r2
 80078a2:	4604      	mov	r4, r0
 80078a4:	2301      	movs	r3, #1
 80078a6:	e7f0      	b.n	800788a <_vfiprintf_r+0x1da>
 80078a8:	ab03      	add	r3, sp, #12
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	462a      	mov	r2, r5
 80078ae:	4b16      	ldr	r3, [pc, #88]	; (8007908 <_vfiprintf_r+0x258>)
 80078b0:	a904      	add	r1, sp, #16
 80078b2:	4630      	mov	r0, r6
 80078b4:	f7fd fd66 	bl	8005384 <_printf_float>
 80078b8:	4607      	mov	r7, r0
 80078ba:	1c78      	adds	r0, r7, #1
 80078bc:	d1d6      	bne.n	800786c <_vfiprintf_r+0x1bc>
 80078be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078c0:	07d9      	lsls	r1, r3, #31
 80078c2:	d405      	bmi.n	80078d0 <_vfiprintf_r+0x220>
 80078c4:	89ab      	ldrh	r3, [r5, #12]
 80078c6:	059a      	lsls	r2, r3, #22
 80078c8:	d402      	bmi.n	80078d0 <_vfiprintf_r+0x220>
 80078ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078cc:	f7ff faba 	bl	8006e44 <__retarget_lock_release_recursive>
 80078d0:	89ab      	ldrh	r3, [r5, #12]
 80078d2:	065b      	lsls	r3, r3, #25
 80078d4:	f53f af12 	bmi.w	80076fc <_vfiprintf_r+0x4c>
 80078d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078da:	e711      	b.n	8007700 <_vfiprintf_r+0x50>
 80078dc:	ab03      	add	r3, sp, #12
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	462a      	mov	r2, r5
 80078e2:	4b09      	ldr	r3, [pc, #36]	; (8007908 <_vfiprintf_r+0x258>)
 80078e4:	a904      	add	r1, sp, #16
 80078e6:	4630      	mov	r0, r6
 80078e8:	f7fd fff0 	bl	80058cc <_printf_i>
 80078ec:	e7e4      	b.n	80078b8 <_vfiprintf_r+0x208>
 80078ee:	bf00      	nop
 80078f0:	08007cdc 	.word	0x08007cdc
 80078f4:	08007cfc 	.word	0x08007cfc
 80078f8:	08007cbc 	.word	0x08007cbc
 80078fc:	08007e7c 	.word	0x08007e7c
 8007900:	08007e86 	.word	0x08007e86
 8007904:	08005385 	.word	0x08005385
 8007908:	0800768d 	.word	0x0800768d
 800790c:	08007e82 	.word	0x08007e82

08007910 <__sread>:
 8007910:	b510      	push	{r4, lr}
 8007912:	460c      	mov	r4, r1
 8007914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007918:	f000 f8d6 	bl	8007ac8 <_read_r>
 800791c:	2800      	cmp	r0, #0
 800791e:	bfab      	itete	ge
 8007920:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007922:	89a3      	ldrhlt	r3, [r4, #12]
 8007924:	181b      	addge	r3, r3, r0
 8007926:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800792a:	bfac      	ite	ge
 800792c:	6563      	strge	r3, [r4, #84]	; 0x54
 800792e:	81a3      	strhlt	r3, [r4, #12]
 8007930:	bd10      	pop	{r4, pc}

08007932 <__swrite>:
 8007932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007936:	461f      	mov	r7, r3
 8007938:	898b      	ldrh	r3, [r1, #12]
 800793a:	05db      	lsls	r3, r3, #23
 800793c:	4605      	mov	r5, r0
 800793e:	460c      	mov	r4, r1
 8007940:	4616      	mov	r6, r2
 8007942:	d505      	bpl.n	8007950 <__swrite+0x1e>
 8007944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007948:	2302      	movs	r3, #2
 800794a:	2200      	movs	r2, #0
 800794c:	f000 f898 	bl	8007a80 <_lseek_r>
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007956:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800795a:	81a3      	strh	r3, [r4, #12]
 800795c:	4632      	mov	r2, r6
 800795e:	463b      	mov	r3, r7
 8007960:	4628      	mov	r0, r5
 8007962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007966:	f000 b817 	b.w	8007998 <_write_r>

0800796a <__sseek>:
 800796a:	b510      	push	{r4, lr}
 800796c:	460c      	mov	r4, r1
 800796e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007972:	f000 f885 	bl	8007a80 <_lseek_r>
 8007976:	1c43      	adds	r3, r0, #1
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	bf15      	itete	ne
 800797c:	6560      	strne	r0, [r4, #84]	; 0x54
 800797e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007982:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007986:	81a3      	strheq	r3, [r4, #12]
 8007988:	bf18      	it	ne
 800798a:	81a3      	strhne	r3, [r4, #12]
 800798c:	bd10      	pop	{r4, pc}

0800798e <__sclose>:
 800798e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007992:	f000 b831 	b.w	80079f8 <_close_r>
	...

08007998 <_write_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4d07      	ldr	r5, [pc, #28]	; (80079b8 <_write_r+0x20>)
 800799c:	4604      	mov	r4, r0
 800799e:	4608      	mov	r0, r1
 80079a0:	4611      	mov	r1, r2
 80079a2:	2200      	movs	r2, #0
 80079a4:	602a      	str	r2, [r5, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	f7f9 fada 	bl	8000f60 <_write>
 80079ac:	1c43      	adds	r3, r0, #1
 80079ae:	d102      	bne.n	80079b6 <_write_r+0x1e>
 80079b0:	682b      	ldr	r3, [r5, #0]
 80079b2:	b103      	cbz	r3, 80079b6 <_write_r+0x1e>
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	bd38      	pop	{r3, r4, r5, pc}
 80079b8:	200004e0 	.word	0x200004e0

080079bc <__assert_func>:
 80079bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079be:	4614      	mov	r4, r2
 80079c0:	461a      	mov	r2, r3
 80079c2:	4b09      	ldr	r3, [pc, #36]	; (80079e8 <__assert_func+0x2c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4605      	mov	r5, r0
 80079c8:	68d8      	ldr	r0, [r3, #12]
 80079ca:	b14c      	cbz	r4, 80079e0 <__assert_func+0x24>
 80079cc:	4b07      	ldr	r3, [pc, #28]	; (80079ec <__assert_func+0x30>)
 80079ce:	9100      	str	r1, [sp, #0]
 80079d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079d4:	4906      	ldr	r1, [pc, #24]	; (80079f0 <__assert_func+0x34>)
 80079d6:	462b      	mov	r3, r5
 80079d8:	f000 f81e 	bl	8007a18 <fiprintf>
 80079dc:	f000 f893 	bl	8007b06 <abort>
 80079e0:	4b04      	ldr	r3, [pc, #16]	; (80079f4 <__assert_func+0x38>)
 80079e2:	461c      	mov	r4, r3
 80079e4:	e7f3      	b.n	80079ce <__assert_func+0x12>
 80079e6:	bf00      	nop
 80079e8:	2000000c 	.word	0x2000000c
 80079ec:	08007e8d 	.word	0x08007e8d
 80079f0:	08007e9a 	.word	0x08007e9a
 80079f4:	08007ec8 	.word	0x08007ec8

080079f8 <_close_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4d06      	ldr	r5, [pc, #24]	; (8007a14 <_close_r+0x1c>)
 80079fc:	2300      	movs	r3, #0
 80079fe:	4604      	mov	r4, r0
 8007a00:	4608      	mov	r0, r1
 8007a02:	602b      	str	r3, [r5, #0]
 8007a04:	f7fa f98d 	bl	8001d22 <_close>
 8007a08:	1c43      	adds	r3, r0, #1
 8007a0a:	d102      	bne.n	8007a12 <_close_r+0x1a>
 8007a0c:	682b      	ldr	r3, [r5, #0]
 8007a0e:	b103      	cbz	r3, 8007a12 <_close_r+0x1a>
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	bd38      	pop	{r3, r4, r5, pc}
 8007a14:	200004e0 	.word	0x200004e0

08007a18 <fiprintf>:
 8007a18:	b40e      	push	{r1, r2, r3}
 8007a1a:	b503      	push	{r0, r1, lr}
 8007a1c:	4601      	mov	r1, r0
 8007a1e:	ab03      	add	r3, sp, #12
 8007a20:	4805      	ldr	r0, [pc, #20]	; (8007a38 <fiprintf+0x20>)
 8007a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a26:	6800      	ldr	r0, [r0, #0]
 8007a28:	9301      	str	r3, [sp, #4]
 8007a2a:	f7ff fe41 	bl	80076b0 <_vfiprintf_r>
 8007a2e:	b002      	add	sp, #8
 8007a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a34:	b003      	add	sp, #12
 8007a36:	4770      	bx	lr
 8007a38:	2000000c 	.word	0x2000000c

08007a3c <_fstat_r>:
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	4d07      	ldr	r5, [pc, #28]	; (8007a5c <_fstat_r+0x20>)
 8007a40:	2300      	movs	r3, #0
 8007a42:	4604      	mov	r4, r0
 8007a44:	4608      	mov	r0, r1
 8007a46:	4611      	mov	r1, r2
 8007a48:	602b      	str	r3, [r5, #0]
 8007a4a:	f7fa f976 	bl	8001d3a <_fstat>
 8007a4e:	1c43      	adds	r3, r0, #1
 8007a50:	d102      	bne.n	8007a58 <_fstat_r+0x1c>
 8007a52:	682b      	ldr	r3, [r5, #0]
 8007a54:	b103      	cbz	r3, 8007a58 <_fstat_r+0x1c>
 8007a56:	6023      	str	r3, [r4, #0]
 8007a58:	bd38      	pop	{r3, r4, r5, pc}
 8007a5a:	bf00      	nop
 8007a5c:	200004e0 	.word	0x200004e0

08007a60 <_isatty_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	4d06      	ldr	r5, [pc, #24]	; (8007a7c <_isatty_r+0x1c>)
 8007a64:	2300      	movs	r3, #0
 8007a66:	4604      	mov	r4, r0
 8007a68:	4608      	mov	r0, r1
 8007a6a:	602b      	str	r3, [r5, #0]
 8007a6c:	f7fa f975 	bl	8001d5a <_isatty>
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	d102      	bne.n	8007a7a <_isatty_r+0x1a>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	b103      	cbz	r3, 8007a7a <_isatty_r+0x1a>
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
 8007a7c:	200004e0 	.word	0x200004e0

08007a80 <_lseek_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	4d07      	ldr	r5, [pc, #28]	; (8007aa0 <_lseek_r+0x20>)
 8007a84:	4604      	mov	r4, r0
 8007a86:	4608      	mov	r0, r1
 8007a88:	4611      	mov	r1, r2
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	602a      	str	r2, [r5, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f7fa f96e 	bl	8001d70 <_lseek>
 8007a94:	1c43      	adds	r3, r0, #1
 8007a96:	d102      	bne.n	8007a9e <_lseek_r+0x1e>
 8007a98:	682b      	ldr	r3, [r5, #0]
 8007a9a:	b103      	cbz	r3, 8007a9e <_lseek_r+0x1e>
 8007a9c:	6023      	str	r3, [r4, #0]
 8007a9e:	bd38      	pop	{r3, r4, r5, pc}
 8007aa0:	200004e0 	.word	0x200004e0

08007aa4 <__ascii_mbtowc>:
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	b901      	cbnz	r1, 8007aaa <__ascii_mbtowc+0x6>
 8007aa8:	a901      	add	r1, sp, #4
 8007aaa:	b142      	cbz	r2, 8007abe <__ascii_mbtowc+0x1a>
 8007aac:	b14b      	cbz	r3, 8007ac2 <__ascii_mbtowc+0x1e>
 8007aae:	7813      	ldrb	r3, [r2, #0]
 8007ab0:	600b      	str	r3, [r1, #0]
 8007ab2:	7812      	ldrb	r2, [r2, #0]
 8007ab4:	1e10      	subs	r0, r2, #0
 8007ab6:	bf18      	it	ne
 8007ab8:	2001      	movne	r0, #1
 8007aba:	b002      	add	sp, #8
 8007abc:	4770      	bx	lr
 8007abe:	4610      	mov	r0, r2
 8007ac0:	e7fb      	b.n	8007aba <__ascii_mbtowc+0x16>
 8007ac2:	f06f 0001 	mvn.w	r0, #1
 8007ac6:	e7f8      	b.n	8007aba <__ascii_mbtowc+0x16>

08007ac8 <_read_r>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	4d07      	ldr	r5, [pc, #28]	; (8007ae8 <_read_r+0x20>)
 8007acc:	4604      	mov	r4, r0
 8007ace:	4608      	mov	r0, r1
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	602a      	str	r2, [r5, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f7fa f906 	bl	8001ce8 <_read>
 8007adc:	1c43      	adds	r3, r0, #1
 8007ade:	d102      	bne.n	8007ae6 <_read_r+0x1e>
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	b103      	cbz	r3, 8007ae6 <_read_r+0x1e>
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	bd38      	pop	{r3, r4, r5, pc}
 8007ae8:	200004e0 	.word	0x200004e0

08007aec <__ascii_wctomb>:
 8007aec:	b149      	cbz	r1, 8007b02 <__ascii_wctomb+0x16>
 8007aee:	2aff      	cmp	r2, #255	; 0xff
 8007af0:	bf85      	ittet	hi
 8007af2:	238a      	movhi	r3, #138	; 0x8a
 8007af4:	6003      	strhi	r3, [r0, #0]
 8007af6:	700a      	strbls	r2, [r1, #0]
 8007af8:	f04f 30ff 	movhi.w	r0, #4294967295
 8007afc:	bf98      	it	ls
 8007afe:	2001      	movls	r0, #1
 8007b00:	4770      	bx	lr
 8007b02:	4608      	mov	r0, r1
 8007b04:	4770      	bx	lr

08007b06 <abort>:
 8007b06:	b508      	push	{r3, lr}
 8007b08:	2006      	movs	r0, #6
 8007b0a:	f000 f82b 	bl	8007b64 <raise>
 8007b0e:	2001      	movs	r0, #1
 8007b10:	f7fa f8e0 	bl	8001cd4 <_exit>

08007b14 <_raise_r>:
 8007b14:	291f      	cmp	r1, #31
 8007b16:	b538      	push	{r3, r4, r5, lr}
 8007b18:	4604      	mov	r4, r0
 8007b1a:	460d      	mov	r5, r1
 8007b1c:	d904      	bls.n	8007b28 <_raise_r+0x14>
 8007b1e:	2316      	movs	r3, #22
 8007b20:	6003      	str	r3, [r0, #0]
 8007b22:	f04f 30ff 	mov.w	r0, #4294967295
 8007b26:	bd38      	pop	{r3, r4, r5, pc}
 8007b28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b2a:	b112      	cbz	r2, 8007b32 <_raise_r+0x1e>
 8007b2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b30:	b94b      	cbnz	r3, 8007b46 <_raise_r+0x32>
 8007b32:	4620      	mov	r0, r4
 8007b34:	f000 f830 	bl	8007b98 <_getpid_r>
 8007b38:	462a      	mov	r2, r5
 8007b3a:	4601      	mov	r1, r0
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b42:	f000 b817 	b.w	8007b74 <_kill_r>
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d00a      	beq.n	8007b60 <_raise_r+0x4c>
 8007b4a:	1c59      	adds	r1, r3, #1
 8007b4c:	d103      	bne.n	8007b56 <_raise_r+0x42>
 8007b4e:	2316      	movs	r3, #22
 8007b50:	6003      	str	r3, [r0, #0]
 8007b52:	2001      	movs	r0, #1
 8007b54:	e7e7      	b.n	8007b26 <_raise_r+0x12>
 8007b56:	2400      	movs	r4, #0
 8007b58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	4798      	blx	r3
 8007b60:	2000      	movs	r0, #0
 8007b62:	e7e0      	b.n	8007b26 <_raise_r+0x12>

08007b64 <raise>:
 8007b64:	4b02      	ldr	r3, [pc, #8]	; (8007b70 <raise+0xc>)
 8007b66:	4601      	mov	r1, r0
 8007b68:	6818      	ldr	r0, [r3, #0]
 8007b6a:	f7ff bfd3 	b.w	8007b14 <_raise_r>
 8007b6e:	bf00      	nop
 8007b70:	2000000c 	.word	0x2000000c

08007b74 <_kill_r>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	4d07      	ldr	r5, [pc, #28]	; (8007b94 <_kill_r+0x20>)
 8007b78:	2300      	movs	r3, #0
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	4608      	mov	r0, r1
 8007b7e:	4611      	mov	r1, r2
 8007b80:	602b      	str	r3, [r5, #0]
 8007b82:	f7fa f897 	bl	8001cb4 <_kill>
 8007b86:	1c43      	adds	r3, r0, #1
 8007b88:	d102      	bne.n	8007b90 <_kill_r+0x1c>
 8007b8a:	682b      	ldr	r3, [r5, #0]
 8007b8c:	b103      	cbz	r3, 8007b90 <_kill_r+0x1c>
 8007b8e:	6023      	str	r3, [r4, #0]
 8007b90:	bd38      	pop	{r3, r4, r5, pc}
 8007b92:	bf00      	nop
 8007b94:	200004e0 	.word	0x200004e0

08007b98 <_getpid_r>:
 8007b98:	f7fa b884 	b.w	8001ca4 <_getpid>

08007b9c <_init>:
 8007b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9e:	bf00      	nop
 8007ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ba2:	bc08      	pop	{r3}
 8007ba4:	469e      	mov	lr, r3
 8007ba6:	4770      	bx	lr

08007ba8 <_fini>:
 8007ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007baa:	bf00      	nop
 8007bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bae:	bc08      	pop	{r3}
 8007bb0:	469e      	mov	lr, r3
 8007bb2:	4770      	bx	lr
