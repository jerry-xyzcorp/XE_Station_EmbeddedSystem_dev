
XEstation_InventoryManagement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007610  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  080077c0  080077c0  000177c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bbc  08007bbc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007bbc  08007bbc  00017bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bc4  08007bc4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bc4  08007bc4  00017bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bc8  08007bc8  00017bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000003c8  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005a4  200005a4  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015af8  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028bd  00000000  00000000  00035d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001070  00000000  00000000  000385c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa0  00000000  00000000  00039638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025969  00000000  00000000  0003a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145ea  00000000  00000000  0005ff41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de968  00000000  00000000  0007452b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00152e93  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005580  00000000  00000000  00152ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080077a8 	.word	0x080077a8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	080077a8 	.word	0x080077a8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 10) == HAL_OK)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <_write+0x30>)
 8000ed6:	f002 fefa 	bl	8003cce <HAL_UART_Transmit>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d101      	bne.n	8000ee4 <_write+0x24>
		return len;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	e001      	b.n	8000ee8 <_write+0x28>
	return -1;
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200002d0 	.word	0x200002d0

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef8:	f000 ff66 	bl	8001dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efc:	f000 f81a 	bl	8000f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f00:	f000 fb06 	bl	8001510 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f04:	f000 f886 	bl	8001014 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f08:	f000 f8c4 	bl	8001094 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000f0c:	f000 f902 	bl	8001114 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f10:	f000 f98c 	bl	800122c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f14:	f000 f9fc 	bl	8001310 <MX_TIM3_Init>
  MX_UART5_Init();
 8000f18:	f000 fa7a 	bl	8001410 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8000f1c:	f000 faa4 	bl	8001468 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000f20:	f000 facc 	bl	80014bc <MX_USART6_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Lidar3dTest(1);
 8000f24:	2001      	movs	r0, #1
 8000f26:	f003 fe57 	bl	8004bd8 <Lidar3dTest>
	  HAL_Delay(1000);
 8000f2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f2e:	f000 ffbd 	bl	8001eac <HAL_Delay>
	  Lidar3dTest(1);
 8000f32:	e7f7      	b.n	8000f24 <main+0x30>

08000f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b094      	sub	sp, #80	; 0x50
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 0320 	add.w	r3, r7, #32
 8000f3e:	2230      	movs	r2, #48	; 0x30
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f003 ff60 	bl	8004e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	4b2b      	ldr	r3, [pc, #172]	; (800100c <SystemClock_Config+0xd8>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	4a2a      	ldr	r2, [pc, #168]	; (800100c <SystemClock_Config+0xd8>)
 8000f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f66:	6413      	str	r3, [r2, #64]	; 0x40
 8000f68:	4b28      	ldr	r3, [pc, #160]	; (800100c <SystemClock_Config+0xd8>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f74:	2300      	movs	r3, #0
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	4b25      	ldr	r3, [pc, #148]	; (8001010 <SystemClock_Config+0xdc>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a24      	ldr	r2, [pc, #144]	; (8001010 <SystemClock_Config+0xdc>)
 8000f7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b22      	ldr	r3, [pc, #136]	; (8001010 <SystemClock_Config+0xdc>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f90:	2302      	movs	r3, #2
 8000f92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f94:	2301      	movs	r3, #1
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f98:	2310      	movs	r3, #16
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000fa8:	23b4      	movs	r3, #180	; 0xb4
 8000faa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb4:	f107 0320 	add.w	r3, r7, #32
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 fd15 	bl	80029e8 <HAL_RCC_OscConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fc4:	f000 fb9c 	bl	8001700 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fc8:	f001 fcbe 	bl	8002948 <HAL_PWREx_EnableOverDrive>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000fd2:	f000 fb95 	bl	8001700 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fe6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	2105      	movs	r1, #5
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f001 ff6f 	bl	8002ed8 <HAL_RCC_ClockConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001000:	f000 fb7e 	bl	8001700 <Error_Handler>
  }
}
 8001004:	bf00      	nop
 8001006:	3750      	adds	r7, #80	; 0x50
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	40007000 	.word	0x40007000

08001014 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_I2C1_Init+0x74>)
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <MX_I2C1_Init+0x78>)
 800101c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_I2C1_Init+0x74>)
 8001020:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <MX_I2C1_Init+0x7c>)
 8001022:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_I2C1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_I2C1_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_I2C1_Init+0x74>)
 8001032:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001036:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_I2C1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_I2C1_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <MX_I2C1_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_I2C1_Init+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001050:	480d      	ldr	r0, [pc, #52]	; (8001088 <MX_I2C1_Init+0x74>)
 8001052:	f001 fab9 	bl	80025c8 <HAL_I2C_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800105c:	f000 fb50 	bl	8001700 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001060:	2100      	movs	r1, #0
 8001062:	4809      	ldr	r0, [pc, #36]	; (8001088 <MX_I2C1_Init+0x74>)
 8001064:	f001 fbf4 	bl	8002850 <HAL_I2CEx_ConfigAnalogFilter>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800106e:	f000 fb47 	bl	8001700 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001072:	2100      	movs	r1, #0
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <MX_I2C1_Init+0x74>)
 8001076:	f001 fc27 	bl	80028c8 <HAL_I2CEx_ConfigDigitalFilter>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001080:	f000 fb3e 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000314 	.word	0x20000314
 800108c:	40005400 	.word	0x40005400
 8001090:	000186a0 	.word	0x000186a0

08001094 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <MX_I2C2_Init+0x74>)
 800109a:	4a1c      	ldr	r2, [pc, #112]	; (800110c <MX_I2C2_Init+0x78>)
 800109c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_I2C2_Init+0x74>)
 80010a0:	4a1b      	ldr	r2, [pc, #108]	; (8001110 <MX_I2C2_Init+0x7c>)
 80010a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <MX_I2C2_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <MX_I2C2_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_I2C2_Init+0x74>)
 80010b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <MX_I2C2_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_I2C2_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c4:	4b10      	ldr	r3, [pc, #64]	; (8001108 <MX_I2C2_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_I2C2_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <MX_I2C2_Init+0x74>)
 80010d2:	f001 fa79 	bl	80025c8 <HAL_I2C_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010dc:	f000 fb10 	bl	8001700 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010e0:	2100      	movs	r1, #0
 80010e2:	4809      	ldr	r0, [pc, #36]	; (8001108 <MX_I2C2_Init+0x74>)
 80010e4:	f001 fbb4 	bl	8002850 <HAL_I2CEx_ConfigAnalogFilter>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80010ee:	f000 fb07 	bl	8001700 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010f2:	2100      	movs	r1, #0
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_I2C2_Init+0x74>)
 80010f6:	f001 fbe7 	bl	80028c8 <HAL_I2CEx_ConfigDigitalFilter>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001100:	f000 fafe 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000368 	.word	0x20000368
 800110c:	40005800 	.word	0x40005800
 8001110:	000186a0 	.word	0x000186a0

08001114 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	; 0x30
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001140:	4b38      	ldr	r3, [pc, #224]	; (8001224 <MX_TIM1_Init+0x110>)
 8001142:	4a39      	ldr	r2, [pc, #228]	; (8001228 <MX_TIM1_Init+0x114>)
 8001144:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001146:	4b37      	ldr	r3, [pc, #220]	; (8001224 <MX_TIM1_Init+0x110>)
 8001148:	2200      	movs	r2, #0
 800114a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	4b35      	ldr	r3, [pc, #212]	; (8001224 <MX_TIM1_Init+0x110>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001152:	4b34      	ldr	r3, [pc, #208]	; (8001224 <MX_TIM1_Init+0x110>)
 8001154:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001158:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115a:	4b32      	ldr	r3, [pc, #200]	; (8001224 <MX_TIM1_Init+0x110>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001160:	4b30      	ldr	r3, [pc, #192]	; (8001224 <MX_TIM1_Init+0x110>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001166:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <MX_TIM1_Init+0x110>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800116c:	482d      	ldr	r0, [pc, #180]	; (8001224 <MX_TIM1_Init+0x110>)
 800116e:	f002 f883 	bl	8003278 <HAL_TIM_Base_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001178:	f000 fac2 	bl	8001700 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800117c:	4829      	ldr	r0, [pc, #164]	; (8001224 <MX_TIM1_Init+0x110>)
 800117e:	f002 f8ca 	bl	8003316 <HAL_TIM_IC_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001188:	f000 faba 	bl	8001700 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	4822      	ldr	r0, [pc, #136]	; (8001224 <MX_TIM1_Init+0x110>)
 800119c:	f002 f9b0 	bl	8003500 <HAL_TIM_SlaveConfigSynchro>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011a6:	f000 faab 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	481a      	ldr	r0, [pc, #104]	; (8001224 <MX_TIM1_Init+0x110>)
 80011ba:	f002 fcbf 	bl	8003b3c <HAL_TIMEx_MasterConfigSynchronization>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80011c4:	f000 fa9c 	bl	8001700 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011cc:	2301      	movs	r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2200      	movs	r2, #0
 80011dc:	4619      	mov	r1, r3
 80011de:	4811      	ldr	r0, [pc, #68]	; (8001224 <MX_TIM1_Init+0x110>)
 80011e0:	f002 f8f2 	bl	80033c8 <HAL_TIM_IC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80011ea:	f000 fa89 	bl	8001700 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2204      	movs	r2, #4
 80011f2:	4619      	mov	r1, r3
 80011f4:	480b      	ldr	r0, [pc, #44]	; (8001224 <MX_TIM1_Init+0x110>)
 80011f6:	f002 f8e7 	bl	80033c8 <HAL_TIM_IC_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001200:	f000 fa7e 	bl	8001700 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2208      	movs	r2, #8
 8001208:	4619      	mov	r1, r3
 800120a:	4806      	ldr	r0, [pc, #24]	; (8001224 <MX_TIM1_Init+0x110>)
 800120c:	f002 f8dc 	bl	80033c8 <HAL_TIM_IC_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001216:	f000 fa73 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	3730      	adds	r7, #48	; 0x30
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000468 	.word	0x20000468
 8001228:	40010000 	.word	0x40010000

0800122c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	; 0x30
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001258:	4b2c      	ldr	r3, [pc, #176]	; (800130c <MX_TIM2_Init+0xe0>)
 800125a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800125e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001260:	4b2a      	ldr	r3, [pc, #168]	; (800130c <MX_TIM2_Init+0xe0>)
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b29      	ldr	r3, [pc, #164]	; (800130c <MX_TIM2_Init+0xe0>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <MX_TIM2_Init+0xe0>)
 800126e:	f04f 32ff 	mov.w	r2, #4294967295
 8001272:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b25      	ldr	r3, [pc, #148]	; (800130c <MX_TIM2_Init+0xe0>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b24      	ldr	r3, [pc, #144]	; (800130c <MX_TIM2_Init+0xe0>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001280:	4822      	ldr	r0, [pc, #136]	; (800130c <MX_TIM2_Init+0xe0>)
 8001282:	f001 fff9 	bl	8003278 <HAL_TIM_Base_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 800128c:	f000 fa38 	bl	8001700 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001290:	481e      	ldr	r0, [pc, #120]	; (800130c <MX_TIM2_Init+0xe0>)
 8001292:	f002 f840 	bl	8003316 <HAL_TIM_IC_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800129c:	f000 fa30 	bl	8001700 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	4817      	ldr	r0, [pc, #92]	; (800130c <MX_TIM2_Init+0xe0>)
 80012b0:	f002 f926 	bl	8003500 <HAL_TIM_SlaveConfigSynchro>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80012ba:	f000 fa21 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	480f      	ldr	r0, [pc, #60]	; (800130c <MX_TIM2_Init+0xe0>)
 80012ce:	f002 fc35 	bl	8003b3c <HAL_TIMEx_MasterConfigSynchronization>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80012d8:	f000 fa12 	bl	8001700 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012e0:	2301      	movs	r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2204      	movs	r2, #4
 80012f0:	4619      	mov	r1, r3
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <MX_TIM2_Init+0xe0>)
 80012f4:	f002 f868 	bl	80033c8 <HAL_TIM_IC_ConfigChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80012fe:	f000 f9ff 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	3730      	adds	r7, #48	; 0x30
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000548 	.word	0x20000548

08001310 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08c      	sub	sp, #48	; 0x30
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800133c:	4b32      	ldr	r3, [pc, #200]	; (8001408 <MX_TIM3_Init+0xf8>)
 800133e:	4a33      	ldr	r2, [pc, #204]	; (800140c <MX_TIM3_Init+0xfc>)
 8001340:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535-1;
 8001342:	4b31      	ldr	r3, [pc, #196]	; (8001408 <MX_TIM3_Init+0xf8>)
 8001344:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001348:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134a:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <MX_TIM3_Init+0xf8>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001350:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <MX_TIM3_Init+0xf8>)
 8001352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001356:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001358:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <MX_TIM3_Init+0xf8>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135e:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <MX_TIM3_Init+0xf8>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001364:	4828      	ldr	r0, [pc, #160]	; (8001408 <MX_TIM3_Init+0xf8>)
 8001366:	f001 ff87 	bl	8003278 <HAL_TIM_Base_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001370:	f000 f9c6 	bl	8001700 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001374:	4824      	ldr	r0, [pc, #144]	; (8001408 <MX_TIM3_Init+0xf8>)
 8001376:	f001 ffce 	bl	8003316 <HAL_TIM_IC_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001380:	f000 f9be 	bl	8001700 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8001388:	2340      	movs	r3, #64	; 0x40
 800138a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	4619      	mov	r1, r3
 8001396:	481c      	ldr	r0, [pc, #112]	; (8001408 <MX_TIM3_Init+0xf8>)
 8001398:	f002 f8b2 	bl	8003500 <HAL_TIM_SlaveConfigSynchro>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80013a2:	f000 f9ad 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4814      	ldr	r0, [pc, #80]	; (8001408 <MX_TIM3_Init+0xf8>)
 80013b6:	f002 fbc1 	bl	8003b3c <HAL_TIMEx_MasterConfigSynchronization>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80013c0:	f000 f99e 	bl	8001700 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013c4:	2300      	movs	r3, #0
 80013c6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013c8:	2301      	movs	r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2204      	movs	r2, #4
 80013d8:	4619      	mov	r1, r3
 80013da:	480b      	ldr	r0, [pc, #44]	; (8001408 <MX_TIM3_Init+0xf8>)
 80013dc:	f001 fff4 	bl	80033c8 <HAL_TIM_IC_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80013e6:	f000 f98b 	bl	8001700 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2208      	movs	r2, #8
 80013ee:	4619      	mov	r1, r3
 80013f0:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_TIM3_Init+0xf8>)
 80013f2:	f001 ffe9 	bl	80033c8 <HAL_TIM_IC_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80013fc:	f000 f980 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	3730      	adds	r7, #48	; 0x30
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200003d8 	.word	0x200003d8
 800140c:	40000400 	.word	0x40000400

08001410 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_UART5_Init+0x4c>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <MX_UART5_Init+0x50>)
 8001418:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 3000000;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_UART5_Init+0x4c>)
 800141c:	4a11      	ldr	r2, [pc, #68]	; (8001464 <MX_UART5_Init+0x54>)
 800141e:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_UART5_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <MX_UART5_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_UART5_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <MX_UART5_Init+0x4c>)
 8001434:	220c      	movs	r2, #12
 8001436:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_UART5_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_8;
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <MX_UART5_Init+0x4c>)
 8001440:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_UART5_Init+0x4c>)
 8001448:	f002 fbf4 	bl	8003c34 <HAL_UART_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001452:	f000 f955 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000420 	.word	0x20000420
 8001460:	40005000 	.word	0x40005000
 8001464:	002dc6c0 	.word	0x002dc6c0

08001468 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <MX_USART3_UART_Init+0x4c>)
 800146e:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <MX_USART3_UART_Init+0x50>)
 8001470:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <MX_USART3_UART_Init+0x4c>)
 8001474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001478:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <MX_USART3_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <MX_USART3_UART_Init+0x4c>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <MX_USART3_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_USART3_UART_Init+0x4c>)
 800148e:	220c      	movs	r2, #12
 8001490:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <MX_USART3_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_USART3_UART_Init+0x4c>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_USART3_UART_Init+0x4c>)
 80014a0:	f002 fbc8 	bl	8003c34 <HAL_UART_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014aa:	f000 f929 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200002d0 	.word	0x200002d0
 80014b8:	40004800 	.word	0x40004800

080014bc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_USART6_UART_Init+0x4c>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <MX_USART6_UART_Init+0x50>)
 80014c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <MX_USART6_UART_Init+0x4c>)
 80014c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <MX_USART6_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <MX_USART6_UART_Init+0x4c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <MX_USART6_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <MX_USART6_UART_Init+0x4c>)
 80014e2:	220c      	movs	r2, #12
 80014e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <MX_USART6_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <MX_USART6_UART_Init+0x4c>)
 80014ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014f2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014f4:	4804      	ldr	r0, [pc, #16]	; (8001508 <MX_USART6_UART_Init+0x4c>)
 80014f6:	f002 fb9d 	bl	8003c34 <HAL_UART_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 8001500:	f000 f8fe 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000500 	.word	0x20000500
 800150c:	40011400 	.word	0x40011400

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	; 0x30
 8001514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	4b6e      	ldr	r3, [pc, #440]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a6d      	ldr	r2, [pc, #436]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 8001530:	f043 0310 	orr.w	r3, r3, #16
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b6b      	ldr	r3, [pc, #428]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	61bb      	str	r3, [r7, #24]
 8001540:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	4b67      	ldr	r3, [pc, #412]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a66      	ldr	r2, [pc, #408]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 800154c:	f043 0320 	orr.w	r3, r3, #32
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b64      	ldr	r3, [pc, #400]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0320 	and.w	r3, r3, #32
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b60      	ldr	r3, [pc, #384]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a5f      	ldr	r2, [pc, #380]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b5d      	ldr	r3, [pc, #372]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b59      	ldr	r3, [pc, #356]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a58      	ldr	r2, [pc, #352]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b56      	ldr	r3, [pc, #344]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b52      	ldr	r3, [pc, #328]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a51      	ldr	r2, [pc, #324]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b4f      	ldr	r3, [pc, #316]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b4b      	ldr	r3, [pc, #300]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a4a      	ldr	r2, [pc, #296]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 80015bc:	f043 0308 	orr.w	r3, r3, #8
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b48      	ldr	r3, [pc, #288]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	4b44      	ldr	r3, [pc, #272]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a43      	ldr	r2, [pc, #268]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 80015d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b41      	ldr	r3, [pc, #260]	; (80016e4 <MX_GPIO_Init+0x1d4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EXPD01_sck_Pin|PD05_dout_Pin|PD03_sck_Pin|PD05_sck_Pin
 80015ea:	2200      	movs	r2, #0
 80015ec:	f245 5184 	movw	r1, #21892	; 0x5584
 80015f0:	483d      	ldr	r0, [pc, #244]	; (80016e8 <MX_GPIO_Init+0x1d8>)
 80015f2:	f000 ffcf 	bl	8002594 <HAL_GPIO_WritePin>
                          |EXIC01_dout_Pin|EXIC01_sck_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PD02_dout_Pin|PD01_echo_Pin|JG01_echo_Pin|JG02_echo_Pin
 80015f6:	2200      	movs	r2, #0
 80015f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80015fc:	483b      	ldr	r0, [pc, #236]	; (80016ec <MX_GPIO_Init+0x1dc>)
 80015fe:	f000 ffc9 	bl	8002594 <HAL_GPIO_WritePin>
                          |LD01_echo_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD01_sck_GPIO_Port, PD01_sck_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2104      	movs	r1, #4
 8001606:	483a      	ldr	r0, [pc, #232]	; (80016f0 <MX_GPIO_Init+0x1e0>)
 8001608:	f000 ffc4 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CP01_echo_GPIO_Port, CP01_echo_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	4838      	ldr	r0, [pc, #224]	; (80016f4 <MX_GPIO_Init+0x1e4>)
 8001612:	f000 ffbf 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PD01_dout_Pin|PD03_dout_Pin|PD02_sck_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	2146      	movs	r1, #70	; 0x46
 800161a:	4837      	ldr	r0, [pc, #220]	; (80016f8 <MX_GPIO_Init+0x1e8>)
 800161c:	f000 ffba 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EXPD01_dout_Pin|PD04_sck_Pin|PD04_dout_Pin|CF01_echo_Pin, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8001626:	4835      	ldr	r0, [pc, #212]	; (80016fc <MX_GPIO_Init+0x1ec>)
 8001628:	f000 ffb4 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EXPD01_sck_Pin PD05_dout_Pin PD03_sck_Pin PD05_sck_Pin
                           EXIC01_dout_Pin EXIC01_sck_Pin */
  GPIO_InitStruct.Pin = EXPD01_sck_Pin|PD05_dout_Pin|PD03_sck_Pin|PD05_sck_Pin
 800162c:	f245 5384 	movw	r3, #21892	; 0x5584
 8001630:	61fb      	str	r3, [r7, #28]
                          |EXIC01_dout_Pin|EXIC01_sck_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	4828      	ldr	r0, [pc, #160]	; (80016e8 <MX_GPIO_Init+0x1d8>)
 8001646:	f000 fdf9 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD02_dout_Pin PD01_echo_Pin JG01_echo_Pin JG02_echo_Pin
                           LD01_echo_Pin */
  GPIO_InitStruct.Pin = PD02_dout_Pin|PD01_echo_Pin|JG01_echo_Pin|JG02_echo_Pin
 800164a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800164e:	61fb      	str	r3, [r7, #28]
                          |LD01_echo_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001650:	2301      	movs	r3, #1
 8001652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4619      	mov	r1, r3
 8001662:	4822      	ldr	r0, [pc, #136]	; (80016ec <MX_GPIO_Init+0x1dc>)
 8001664:	f000 fdea 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD01_sck_Pin */
  GPIO_InitStruct.Pin = PD01_sck_Pin;
 8001668:	2304      	movs	r3, #4
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PD01_sck_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4619      	mov	r1, r3
 800167e:	481c      	ldr	r0, [pc, #112]	; (80016f0 <MX_GPIO_Init+0x1e0>)
 8001680:	f000 fddc 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : CP01_echo_Pin */
  GPIO_InitStruct.Pin = CP01_echo_Pin;
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CP01_echo_GPIO_Port, &GPIO_InitStruct);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	4816      	ldr	r0, [pc, #88]	; (80016f4 <MX_GPIO_Init+0x1e4>)
 800169c:	f000 fdce 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD01_dout_Pin PD03_dout_Pin PD02_sck_Pin */
  GPIO_InitStruct.Pin = PD01_dout_Pin|PD03_dout_Pin|PD02_sck_Pin;
 80016a0:	2346      	movs	r3, #70	; 0x46
 80016a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	4619      	mov	r1, r3
 80016b6:	4810      	ldr	r0, [pc, #64]	; (80016f8 <MX_GPIO_Init+0x1e8>)
 80016b8:	f000 fdc0 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXPD01_dout_Pin PD04_sck_Pin PD04_dout_Pin CF01_echo_Pin */
  GPIO_InitStruct.Pin = EXPD01_dout_Pin|PD04_sck_Pin|PD04_dout_Pin|CF01_echo_Pin;
 80016bc:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80016c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	4619      	mov	r1, r3
 80016d4:	4809      	ldr	r0, [pc, #36]	; (80016fc <MX_GPIO_Init+0x1ec>)
 80016d6:	f000 fdb1 	bl	800223c <HAL_GPIO_Init>

}
 80016da:	bf00      	nop
 80016dc:	3730      	adds	r7, #48	; 0x30
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40021400 	.word	0x40021400
 80016f0:	40020800 	.word	0x40020800
 80016f4:	40020000 	.word	0x40020000
 80016f8:	40020400 	.word	0x40020400
 80016fc:	40020c00 	.word	0x40020c00

08001700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001704:	b672      	cpsid	i
}
 8001706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001708:	e7fe      	b.n	8001708 <Error_Handler+0x8>
	...

0800170c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <HAL_MspInit+0x4c>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <HAL_MspInit+0x4c>)
 800171c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001720:	6453      	str	r3, [r2, #68]	; 0x44
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <HAL_MspInit+0x4c>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_MspInit+0x4c>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a08      	ldr	r2, [pc, #32]	; (8001758 <HAL_MspInit+0x4c>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_MspInit+0x4c>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800

0800175c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	; 0x30
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a33      	ldr	r2, [pc, #204]	; (8001848 <HAL_I2C_MspInit+0xec>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d12d      	bne.n	80017da <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	4b32      	ldr	r3, [pc, #200]	; (800184c <HAL_I2C_MspInit+0xf0>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a31      	ldr	r2, [pc, #196]	; (800184c <HAL_I2C_MspInit+0xf0>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b2f      	ldr	r3, [pc, #188]	; (800184c <HAL_I2C_MspInit+0xf0>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Cup_Bakery_SCL_Pin|Cup_Bakery_SDA_Pin;
 800179a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800179e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a0:	2312      	movs	r3, #18
 80017a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a8:	2303      	movs	r3, #3
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ac:	2304      	movs	r3, #4
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b0:	f107 031c 	add.w	r3, r7, #28
 80017b4:	4619      	mov	r1, r3
 80017b6:	4826      	ldr	r0, [pc, #152]	; (8001850 <HAL_I2C_MspInit+0xf4>)
 80017b8:	f000 fd40 	bl	800223c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	4b22      	ldr	r3, [pc, #136]	; (800184c <HAL_I2C_MspInit+0xf0>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	4a21      	ldr	r2, [pc, #132]	; (800184c <HAL_I2C_MspInit+0xf0>)
 80017c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017ca:	6413      	str	r3, [r2, #64]	; 0x40
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <HAL_I2C_MspInit+0xf0>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017d8:	e031      	b.n	800183e <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a1d      	ldr	r2, [pc, #116]	; (8001854 <HAL_I2C_MspInit+0xf8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d12c      	bne.n	800183e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_I2C_MspInit+0xf0>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	4a17      	ldr	r2, [pc, #92]	; (800184c <HAL_I2C_MspInit+0xf0>)
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	6313      	str	r3, [r2, #48]	; 0x30
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_I2C_MspInit+0xf0>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Lid_SCL_Pin|Lid_SDA_Pin;
 8001800:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001806:	2312      	movs	r3, #18
 8001808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001812:	2304      	movs	r3, #4
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	4619      	mov	r1, r3
 800181c:	480c      	ldr	r0, [pc, #48]	; (8001850 <HAL_I2C_MspInit+0xf4>)
 800181e:	f000 fd0d 	bl	800223c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_I2C_MspInit+0xf0>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <HAL_I2C_MspInit+0xf0>)
 800182c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_I2C_MspInit+0xf0>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
}
 800183e:	bf00      	nop
 8001840:	3730      	adds	r7, #48	; 0x30
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40005400 	.word	0x40005400
 800184c:	40023800 	.word	0x40023800
 8001850:	40020400 	.word	0x40020400
 8001854:	40005800 	.word	0x40005800

08001858 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08e      	sub	sp, #56	; 0x38
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a4b      	ldr	r2, [pc, #300]	; (80019a4 <HAL_TIM_Base_MspInit+0x14c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d12d      	bne.n	80018d6 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
 800187e:	4b4a      	ldr	r3, [pc, #296]	; (80019a8 <HAL_TIM_Base_MspInit+0x150>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	4a49      	ldr	r2, [pc, #292]	; (80019a8 <HAL_TIM_Base_MspInit+0x150>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6453      	str	r3, [r2, #68]	; 0x44
 800188a:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <HAL_TIM_Base_MspInit+0x150>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	623b      	str	r3, [r7, #32]
 8001894:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	4b43      	ldr	r3, [pc, #268]	; (80019a8 <HAL_TIM_Base_MspInit+0x150>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a42      	ldr	r2, [pc, #264]	; (80019a8 <HAL_TIM_Base_MspInit+0x150>)
 80018a0:	f043 0310 	orr.w	r3, r3, #16
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <HAL_TIM_Base_MspInit+0x150>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	61fb      	str	r3, [r7, #28]
 80018b0:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = JG01_TIM_Pin|JG02_TIM_Pin|LD01_TIM_Pin;
 80018b2:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018c4:	2301      	movs	r3, #1
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018cc:	4619      	mov	r1, r3
 80018ce:	4837      	ldr	r0, [pc, #220]	; (80019ac <HAL_TIM_Base_MspInit+0x154>)
 80018d0:	f000 fcb4 	bl	800223c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018d4:	e062      	b.n	800199c <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM2)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018de:	d12c      	bne.n	800193a <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <HAL_TIM_Base_MspInit+0x150>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	4a2f      	ldr	r2, [pc, #188]	; (80019a8 <HAL_TIM_Base_MspInit+0x150>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6413      	str	r3, [r2, #64]	; 0x40
 80018f0:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <HAL_TIM_Base_MspInit+0x150>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	4b29      	ldr	r3, [pc, #164]	; (80019a8 <HAL_TIM_Base_MspInit+0x150>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	4a28      	ldr	r2, [pc, #160]	; (80019a8 <HAL_TIM_Base_MspInit+0x150>)
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	6313      	str	r3, [r2, #48]	; 0x30
 800190c:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <HAL_TIM_Base_MspInit+0x150>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PD01_TIM_Pin;
 8001918:	2308      	movs	r3, #8
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001928:	2301      	movs	r3, #1
 800192a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PD01_TIM_GPIO_Port, &GPIO_InitStruct);
 800192c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001930:	4619      	mov	r1, r3
 8001932:	481f      	ldr	r0, [pc, #124]	; (80019b0 <HAL_TIM_Base_MspInit+0x158>)
 8001934:	f000 fc82 	bl	800223c <HAL_GPIO_Init>
}
 8001938:	e030      	b.n	800199c <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM3)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <HAL_TIM_Base_MspInit+0x15c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d12b      	bne.n	800199c <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_TIM_Base_MspInit+0x150>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	4a16      	ldr	r2, [pc, #88]	; (80019a8 <HAL_TIM_Base_MspInit+0x150>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	6413      	str	r3, [r2, #64]	; 0x40
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_TIM_Base_MspInit+0x150>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_TIM_Base_MspInit+0x150>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	4a0f      	ldr	r2, [pc, #60]	; (80019a8 <HAL_TIM_Base_MspInit+0x150>)
 800196a:	f043 0302 	orr.w	r3, r3, #2
 800196e:	6313      	str	r3, [r2, #48]	; 0x30
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_TIM_Base_MspInit+0x150>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|CF01_TIM_Pin|CP01_TIM_Pin;
 800197c:	2331      	movs	r3, #49	; 0x31
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800198c:	2302      	movs	r3, #2
 800198e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001994:	4619      	mov	r1, r3
 8001996:	4806      	ldr	r0, [pc, #24]	; (80019b0 <HAL_TIM_Base_MspInit+0x158>)
 8001998:	f000 fc50 	bl	800223c <HAL_GPIO_Init>
}
 800199c:	bf00      	nop
 800199e:	3738      	adds	r7, #56	; 0x38
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40010000 	.word	0x40010000
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40020400 	.word	0x40020400
 80019b4:	40000400 	.word	0x40000400

080019b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08e      	sub	sp, #56	; 0x38
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a63      	ldr	r2, [pc, #396]	; (8001b64 <HAL_UART_MspInit+0x1ac>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d153      	bne.n	8001a82 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
 80019de:	4b62      	ldr	r3, [pc, #392]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a61      	ldr	r2, [pc, #388]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 80019e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b5f      	ldr	r3, [pc, #380]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f2:	623b      	str	r3, [r7, #32]
 80019f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	4b5b      	ldr	r3, [pc, #364]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a5a      	ldr	r2, [pc, #360]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b58      	ldr	r3, [pc, #352]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	4b54      	ldr	r3, [pc, #336]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a53      	ldr	r2, [pc, #332]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 8001a1c:	f043 0308 	orr.w	r3, r3, #8
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = Lidar1_TX_Pin;
 8001a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001a40:	2308      	movs	r3, #8
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Lidar1_TX_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4848      	ldr	r0, [pc, #288]	; (8001b6c <HAL_UART_MspInit+0x1b4>)
 8001a4c:	f000 fbf6 	bl	800223c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Lidar1_RX_Pin;
 8001a50:	2304      	movs	r3, #4
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001a60:	2308      	movs	r3, #8
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Lidar1_RX_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4841      	ldr	r0, [pc, #260]	; (8001b70 <HAL_UART_MspInit+0x1b8>)
 8001a6c:	f000 fbe6 	bl	800223c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	2035      	movs	r0, #53	; 0x35
 8001a76:	f000 fb18 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001a7a:	2035      	movs	r0, #53	; 0x35
 8001a7c:	f000 fb31 	bl	80020e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a80:	e06c      	b.n	8001b5c <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART3)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a3b      	ldr	r2, [pc, #236]	; (8001b74 <HAL_UART_MspInit+0x1bc>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d135      	bne.n	8001af8 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	4a34      	ldr	r2, [pc, #208]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 8001a96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9c:	4b32      	ldr	r3, [pc, #200]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	4a2d      	ldr	r2, [pc, #180]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 8001ab2:	f043 0308 	orr.w	r3, r3, #8
 8001ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 8001ac4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4823      	ldr	r0, [pc, #140]	; (8001b70 <HAL_UART_MspInit+0x1b8>)
 8001ae2:	f000 fbab 	bl	800223c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2027      	movs	r0, #39	; 0x27
 8001aec:	f000 fadd 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001af0:	2027      	movs	r0, #39	; 0x27
 8001af2:	f000 faf6 	bl	80020e2 <HAL_NVIC_EnableIRQ>
}
 8001af6:	e031      	b.n	8001b5c <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART6)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <HAL_UART_MspInit+0x1c0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d12c      	bne.n	8001b5c <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	4a17      	ldr	r2, [pc, #92]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 8001b0c:	f043 0320 	orr.w	r3, r3, #32
 8001b10:	6453      	str	r3, [r2, #68]	; 0x44
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	f003 0320 	and.w	r3, r3, #32
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a10      	ldr	r2, [pc, #64]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 8001b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_UART_MspInit+0x1b0>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Lidar2_RX_Pin|Lidar2_TX_Pin;
 8001b3a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b54:	4619      	mov	r1, r3
 8001b56:	4809      	ldr	r0, [pc, #36]	; (8001b7c <HAL_UART_MspInit+0x1c4>)
 8001b58:	f000 fb70 	bl	800223c <HAL_GPIO_Init>
}
 8001b5c:	bf00      	nop
 8001b5e:	3738      	adds	r7, #56	; 0x38
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40005000 	.word	0x40005000
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	40020c00 	.word	0x40020c00
 8001b74:	40004800 	.word	0x40004800
 8001b78:	40011400 	.word	0x40011400
 8001b7c:	40021800 	.word	0x40021800

08001b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <NMI_Handler+0x4>

08001b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <HardFault_Handler+0x4>

08001b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <MemManage_Handler+0x4>

08001b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <BusFault_Handler+0x4>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <UsageFault_Handler+0x4>

08001b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bcc:	f000 f94e 	bl	8001e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <USART3_IRQHandler+0x10>)
 8001bda:	f002 f93b 	bl	8003e54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200002d0 	.word	0x200002d0

08001be8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <UART5_IRQHandler+0x10>)
 8001bee:	f002 f931 	bl	8003e54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000420 	.word	0x20000420

08001bfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
	return 1;
 8001c00:	2301      	movs	r3, #1
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_kill>:

int _kill(int pid, int sig)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c16:	f003 f8c5 	bl	8004da4 <__errno>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2216      	movs	r2, #22
 8001c1e:	601a      	str	r2, [r3, #0]
	return -1;
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_exit>:

void _exit (int status)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ffe7 	bl	8001c0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c3e:	e7fe      	b.n	8001c3e <_exit+0x12>

08001c40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	e00a      	b.n	8001c68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c52:	f3af 8000 	nop.w
 8001c56:	4601      	mov	r1, r0
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	60ba      	str	r2, [r7, #8]
 8001c5e:	b2ca      	uxtb	r2, r1
 8001c60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	3301      	adds	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	dbf0      	blt.n	8001c52 <_read+0x12>
	}

return len;
 8001c70:	687b      	ldr	r3, [r7, #4]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <_close>:
	}
	return len;
}

int _close(int file)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
	return -1;
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ca2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_isatty>:

int _isatty(int file)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
	return 1;
 8001cba:	2301      	movs	r3, #1
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
	return 0;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cec:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <_sbrk+0x5c>)
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <_sbrk+0x60>)
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf8:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <_sbrk+0x64>)
 8001d02:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <_sbrk+0x68>)
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <_sbrk+0x64>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d207      	bcs.n	8001d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d14:	f003 f846 	bl	8004da4 <__errno>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d22:	e009      	b.n	8001d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	4a05      	ldr	r2, [pc, #20]	; (8001d48 <_sbrk+0x64>)
 8001d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d36:	68fb      	ldr	r3, [r7, #12]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20030000 	.word	0x20030000
 8001d44:	00000400 	.word	0x00000400
 8001d48:	200001f8 	.word	0x200001f8
 8001d4c:	200005a8 	.word	0x200005a8

08001d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <SystemInit+0x20>)
 8001d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <SystemInit+0x20>)
 8001d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dac <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d78:	480d      	ldr	r0, [pc, #52]	; (8001db0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d7a:	490e      	ldr	r1, [pc, #56]	; (8001db4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d7c:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d80:	e002      	b.n	8001d88 <LoopCopyDataInit>

08001d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d86:	3304      	adds	r3, #4

08001d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d8c:	d3f9      	bcc.n	8001d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8e:	4a0b      	ldr	r2, [pc, #44]	; (8001dbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d90:	4c0b      	ldr	r4, [pc, #44]	; (8001dc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d94:	e001      	b.n	8001d9a <LoopFillZerobss>

08001d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d98:	3204      	adds	r2, #4

08001d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d9c:	d3fb      	bcc.n	8001d96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d9e:	f7ff ffd7 	bl	8001d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001da2:	f003 f805 	bl	8004db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da6:	f7ff f8a5 	bl	8000ef4 <main>
  bx  lr    
 8001daa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001dac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001db8:	08007bcc 	.word	0x08007bcc
  ldr r2, =_sbss
 8001dbc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001dc0:	200005a4 	.word	0x200005a4

08001dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc4:	e7fe      	b.n	8001dc4 <ADC_IRQHandler>
	...

08001dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <HAL_Init+0x40>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	; (8001e08 <HAL_Init+0x40>)
 8001dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_Init+0x40>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <HAL_Init+0x40>)
 8001dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <HAL_Init+0x40>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <HAL_Init+0x40>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df0:	2003      	movs	r0, #3
 8001df2:	f000 f94f 	bl	8002094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df6:	200f      	movs	r0, #15
 8001df8:	f000 f808 	bl	8001e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dfc:	f7ff fc86 	bl	800170c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40023c00 	.word	0x40023c00

08001e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_InitTick+0x54>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_InitTick+0x58>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 f967 	bl	80020fe <HAL_SYSTICK_Config>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e00e      	b.n	8001e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b0f      	cmp	r3, #15
 8001e3e:	d80a      	bhi.n	8001e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e40:	2200      	movs	r2, #0
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	f04f 30ff 	mov.w	r0, #4294967295
 8001e48:	f000 f92f 	bl	80020aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e4c:	4a06      	ldr	r2, [pc, #24]	; (8001e68 <HAL_InitTick+0x5c>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e000      	b.n	8001e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000000 	.word	0x20000000
 8001e64:	20000008 	.word	0x20000008
 8001e68:	20000004 	.word	0x20000004

08001e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_IncTick+0x20>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_IncTick+0x24>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <HAL_IncTick+0x24>)
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000008 	.word	0x20000008
 8001e90:	20000590 	.word	0x20000590

08001e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return uwTick;
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <HAL_GetTick+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000590 	.word	0x20000590

08001eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb4:	f7ff ffee 	bl	8001e94 <HAL_GetTick>
 8001eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec4:	d005      	beq.n	8001ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_Delay+0x44>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4413      	add	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ed2:	bf00      	nop
 8001ed4:	f7ff ffde 	bl	8001e94 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d8f7      	bhi.n	8001ed4 <HAL_Delay+0x28>
  {
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000008 	.word	0x20000008

08001ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f10:	4013      	ands	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f26:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	60d3      	str	r3, [r2, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <__NVIC_GetPriorityGrouping+0x18>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0a1b      	lsrs	r3, r3, #8
 8001f46:	f003 0307 	and.w	r3, r3, #7
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	db0b      	blt.n	8001f82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	f003 021f 	and.w	r2, r3, #31
 8001f70:	4907      	ldr	r1, [pc, #28]	; (8001f90 <__NVIC_EnableIRQ+0x38>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	2001      	movs	r0, #1
 8001f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000e100 	.word	0xe000e100

08001f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6039      	str	r1, [r7, #0]
 8001f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	db0a      	blt.n	8001fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	490c      	ldr	r1, [pc, #48]	; (8001fe0 <__NVIC_SetPriority+0x4c>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	0112      	lsls	r2, r2, #4
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fbc:	e00a      	b.n	8001fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4908      	ldr	r1, [pc, #32]	; (8001fe4 <__NVIC_SetPriority+0x50>)
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	3b04      	subs	r3, #4
 8001fcc:	0112      	lsls	r2, r2, #4
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	761a      	strb	r2, [r3, #24]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000e100 	.word	0xe000e100
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	; 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f1c3 0307 	rsb	r3, r3, #7
 8002002:	2b04      	cmp	r3, #4
 8002004:	bf28      	it	cs
 8002006:	2304      	movcs	r3, #4
 8002008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3304      	adds	r3, #4
 800200e:	2b06      	cmp	r3, #6
 8002010:	d902      	bls.n	8002018 <NVIC_EncodePriority+0x30>
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3b03      	subs	r3, #3
 8002016:	e000      	b.n	800201a <NVIC_EncodePriority+0x32>
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	f04f 32ff 	mov.w	r2, #4294967295
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43da      	mvns	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	401a      	ands	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002030:	f04f 31ff 	mov.w	r1, #4294967295
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	43d9      	mvns	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	4313      	orrs	r3, r2
         );
}
 8002042:	4618      	mov	r0, r3
 8002044:	3724      	adds	r7, #36	; 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002060:	d301      	bcc.n	8002066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002062:	2301      	movs	r3, #1
 8002064:	e00f      	b.n	8002086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002066:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <SysTick_Config+0x40>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206e:	210f      	movs	r1, #15
 8002070:	f04f 30ff 	mov.w	r0, #4294967295
 8002074:	f7ff ff8e 	bl	8001f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <SysTick_Config+0x40>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207e:	4b04      	ldr	r3, [pc, #16]	; (8002090 <SysTick_Config+0x40>)
 8002080:	2207      	movs	r2, #7
 8002082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	e000e010 	.word	0xe000e010

08002094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff29 	bl	8001ef4 <__NVIC_SetPriorityGrouping>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020bc:	f7ff ff3e 	bl	8001f3c <__NVIC_GetPriorityGrouping>
 80020c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	6978      	ldr	r0, [r7, #20]
 80020c8:	f7ff ff8e 	bl	8001fe8 <NVIC_EncodePriority>
 80020cc:	4602      	mov	r2, r0
 80020ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff5d 	bl	8001f94 <__NVIC_SetPriority>
}
 80020da:	bf00      	nop
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff31 	bl	8001f58 <__NVIC_EnableIRQ>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ffa2 	bl	8002050 <SysTick_Config>
 800210c:	4603      	mov	r3, r0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002124:	f7ff feb6 	bl	8001e94 <HAL_GetTick>
 8002128:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d008      	beq.n	8002148 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2280      	movs	r2, #128	; 0x80
 800213a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e052      	b.n	80021ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0216 	bic.w	r2, r2, #22
 8002156:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002166:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	2b00      	cmp	r3, #0
 800216e:	d103      	bne.n	8002178 <HAL_DMA_Abort+0x62>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002174:	2b00      	cmp	r3, #0
 8002176:	d007      	beq.n	8002188 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0208 	bic.w	r2, r2, #8
 8002186:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002198:	e013      	b.n	80021c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800219a:	f7ff fe7b 	bl	8001e94 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b05      	cmp	r3, #5
 80021a6:	d90c      	bls.n	80021c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2220      	movs	r2, #32
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2203      	movs	r2, #3
 80021b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e015      	b.n	80021ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1e4      	bne.n	800219a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	223f      	movs	r2, #63	; 0x3f
 80021d6:	409a      	lsls	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d004      	beq.n	8002214 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2280      	movs	r2, #128	; 0x80
 800220e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e00c      	b.n	800222e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2205      	movs	r2, #5
 8002218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	; 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800224e:	2300      	movs	r3, #0
 8002250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	e177      	b.n	8002548 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002258:	2201      	movs	r2, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	429a      	cmp	r2, r3
 8002272:	f040 8166 	bne.w	8002542 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b01      	cmp	r3, #1
 8002280:	d005      	beq.n	800228e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800228a:	2b02      	cmp	r3, #2
 800228c:	d130      	bne.n	80022f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	2203      	movs	r2, #3
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c4:	2201      	movs	r2, #1
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 0201 	and.w	r2, r3, #1
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d017      	beq.n	800232c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2203      	movs	r2, #3
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d123      	bne.n	8002380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	08da      	lsrs	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3208      	adds	r2, #8
 8002340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	220f      	movs	r2, #15
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	08da      	lsrs	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3208      	adds	r2, #8
 800237a:	69b9      	ldr	r1, [r7, #24]
 800237c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2203      	movs	r2, #3
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0203 	and.w	r2, r3, #3
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80c0 	beq.w	8002542 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	4b66      	ldr	r3, [pc, #408]	; (8002560 <HAL_GPIO_Init+0x324>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	4a65      	ldr	r2, [pc, #404]	; (8002560 <HAL_GPIO_Init+0x324>)
 80023cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d0:	6453      	str	r3, [r2, #68]	; 0x44
 80023d2:	4b63      	ldr	r3, [pc, #396]	; (8002560 <HAL_GPIO_Init+0x324>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023de:	4a61      	ldr	r2, [pc, #388]	; (8002564 <HAL_GPIO_Init+0x328>)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	3302      	adds	r3, #2
 80023e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	220f      	movs	r2, #15
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a58      	ldr	r2, [pc, #352]	; (8002568 <HAL_GPIO_Init+0x32c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d037      	beq.n	800247a <HAL_GPIO_Init+0x23e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a57      	ldr	r2, [pc, #348]	; (800256c <HAL_GPIO_Init+0x330>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d031      	beq.n	8002476 <HAL_GPIO_Init+0x23a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a56      	ldr	r2, [pc, #344]	; (8002570 <HAL_GPIO_Init+0x334>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d02b      	beq.n	8002472 <HAL_GPIO_Init+0x236>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a55      	ldr	r2, [pc, #340]	; (8002574 <HAL_GPIO_Init+0x338>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d025      	beq.n	800246e <HAL_GPIO_Init+0x232>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a54      	ldr	r2, [pc, #336]	; (8002578 <HAL_GPIO_Init+0x33c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d01f      	beq.n	800246a <HAL_GPIO_Init+0x22e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a53      	ldr	r2, [pc, #332]	; (800257c <HAL_GPIO_Init+0x340>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d019      	beq.n	8002466 <HAL_GPIO_Init+0x22a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a52      	ldr	r2, [pc, #328]	; (8002580 <HAL_GPIO_Init+0x344>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d013      	beq.n	8002462 <HAL_GPIO_Init+0x226>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a51      	ldr	r2, [pc, #324]	; (8002584 <HAL_GPIO_Init+0x348>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00d      	beq.n	800245e <HAL_GPIO_Init+0x222>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a50      	ldr	r2, [pc, #320]	; (8002588 <HAL_GPIO_Init+0x34c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d007      	beq.n	800245a <HAL_GPIO_Init+0x21e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4f      	ldr	r2, [pc, #316]	; (800258c <HAL_GPIO_Init+0x350>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d101      	bne.n	8002456 <HAL_GPIO_Init+0x21a>
 8002452:	2309      	movs	r3, #9
 8002454:	e012      	b.n	800247c <HAL_GPIO_Init+0x240>
 8002456:	230a      	movs	r3, #10
 8002458:	e010      	b.n	800247c <HAL_GPIO_Init+0x240>
 800245a:	2308      	movs	r3, #8
 800245c:	e00e      	b.n	800247c <HAL_GPIO_Init+0x240>
 800245e:	2307      	movs	r3, #7
 8002460:	e00c      	b.n	800247c <HAL_GPIO_Init+0x240>
 8002462:	2306      	movs	r3, #6
 8002464:	e00a      	b.n	800247c <HAL_GPIO_Init+0x240>
 8002466:	2305      	movs	r3, #5
 8002468:	e008      	b.n	800247c <HAL_GPIO_Init+0x240>
 800246a:	2304      	movs	r3, #4
 800246c:	e006      	b.n	800247c <HAL_GPIO_Init+0x240>
 800246e:	2303      	movs	r3, #3
 8002470:	e004      	b.n	800247c <HAL_GPIO_Init+0x240>
 8002472:	2302      	movs	r3, #2
 8002474:	e002      	b.n	800247c <HAL_GPIO_Init+0x240>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <HAL_GPIO_Init+0x240>
 800247a:	2300      	movs	r3, #0
 800247c:	69fa      	ldr	r2, [r7, #28]
 800247e:	f002 0203 	and.w	r2, r2, #3
 8002482:	0092      	lsls	r2, r2, #2
 8002484:	4093      	lsls	r3, r2
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800248c:	4935      	ldr	r1, [pc, #212]	; (8002564 <HAL_GPIO_Init+0x328>)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	089b      	lsrs	r3, r3, #2
 8002492:	3302      	adds	r3, #2
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800249a:	4b3d      	ldr	r3, [pc, #244]	; (8002590 <HAL_GPIO_Init+0x354>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024be:	4a34      	ldr	r2, [pc, #208]	; (8002590 <HAL_GPIO_Init+0x354>)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024c4:	4b32      	ldr	r3, [pc, #200]	; (8002590 <HAL_GPIO_Init+0x354>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024e8:	4a29      	ldr	r2, [pc, #164]	; (8002590 <HAL_GPIO_Init+0x354>)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ee:	4b28      	ldr	r3, [pc, #160]	; (8002590 <HAL_GPIO_Init+0x354>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002512:	4a1f      	ldr	r2, [pc, #124]	; (8002590 <HAL_GPIO_Init+0x354>)
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002518:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <HAL_GPIO_Init+0x354>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800253c:	4a14      	ldr	r2, [pc, #80]	; (8002590 <HAL_GPIO_Init+0x354>)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3301      	adds	r3, #1
 8002546:	61fb      	str	r3, [r7, #28]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	2b0f      	cmp	r3, #15
 800254c:	f67f ae84 	bls.w	8002258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	3724      	adds	r7, #36	; 0x24
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800
 8002564:	40013800 	.word	0x40013800
 8002568:	40020000 	.word	0x40020000
 800256c:	40020400 	.word	0x40020400
 8002570:	40020800 	.word	0x40020800
 8002574:	40020c00 	.word	0x40020c00
 8002578:	40021000 	.word	0x40021000
 800257c:	40021400 	.word	0x40021400
 8002580:	40021800 	.word	0x40021800
 8002584:	40021c00 	.word	0x40021c00
 8002588:	40022000 	.word	0x40022000
 800258c:	40022400 	.word	0x40022400
 8002590:	40013c00 	.word	0x40013c00

08002594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
 80025a0:	4613      	mov	r3, r2
 80025a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a4:	787b      	ldrb	r3, [r7, #1]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025b0:	e003      	b.n	80025ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025b2:	887b      	ldrh	r3, [r7, #2]
 80025b4:	041a      	lsls	r2, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	619a      	str	r2, [r3, #24]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e12b      	b.n	8002832 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff f8b4 	bl	800175c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2224      	movs	r2, #36	; 0x24
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800261a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800262a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800262c:	f000 fdfc 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8002630:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4a81      	ldr	r2, [pc, #516]	; (800283c <HAL_I2C_Init+0x274>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d807      	bhi.n	800264c <HAL_I2C_Init+0x84>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4a80      	ldr	r2, [pc, #512]	; (8002840 <HAL_I2C_Init+0x278>)
 8002640:	4293      	cmp	r3, r2
 8002642:	bf94      	ite	ls
 8002644:	2301      	movls	r3, #1
 8002646:	2300      	movhi	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e006      	b.n	800265a <HAL_I2C_Init+0x92>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4a7d      	ldr	r2, [pc, #500]	; (8002844 <HAL_I2C_Init+0x27c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	bf94      	ite	ls
 8002654:	2301      	movls	r3, #1
 8002656:	2300      	movhi	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0e7      	b.n	8002832 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4a78      	ldr	r2, [pc, #480]	; (8002848 <HAL_I2C_Init+0x280>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0c9b      	lsrs	r3, r3, #18
 800266c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4a6a      	ldr	r2, [pc, #424]	; (800283c <HAL_I2C_Init+0x274>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d802      	bhi.n	800269c <HAL_I2C_Init+0xd4>
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	3301      	adds	r3, #1
 800269a:	e009      	b.n	80026b0 <HAL_I2C_Init+0xe8>
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	4a69      	ldr	r2, [pc, #420]	; (800284c <HAL_I2C_Init+0x284>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	3301      	adds	r3, #1
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	430b      	orrs	r3, r1
 80026b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	495c      	ldr	r1, [pc, #368]	; (800283c <HAL_I2C_Init+0x274>)
 80026cc:	428b      	cmp	r3, r1
 80026ce:	d819      	bhi.n	8002704 <HAL_I2C_Init+0x13c>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1e59      	subs	r1, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	fbb1 f3f3 	udiv	r3, r1, r3
 80026de:	1c59      	adds	r1, r3, #1
 80026e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026e4:	400b      	ands	r3, r1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_I2C_Init+0x138>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1e59      	subs	r1, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fe:	e051      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 8002700:	2304      	movs	r3, #4
 8002702:	e04f      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d111      	bne.n	8002730 <HAL_I2C_Init+0x168>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1e58      	subs	r0, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	440b      	add	r3, r1
 800271a:	fbb0 f3f3 	udiv	r3, r0, r3
 800271e:	3301      	adds	r3, #1
 8002720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf0c      	ite	eq
 8002728:	2301      	moveq	r3, #1
 800272a:	2300      	movne	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e012      	b.n	8002756 <HAL_I2C_Init+0x18e>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1e58      	subs	r0, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	0099      	lsls	r1, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	fbb0 f3f3 	udiv	r3, r0, r3
 8002746:	3301      	adds	r3, #1
 8002748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2C_Init+0x196>
 800275a:	2301      	movs	r3, #1
 800275c:	e022      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10e      	bne.n	8002784 <HAL_I2C_Init+0x1bc>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1e58      	subs	r0, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6859      	ldr	r1, [r3, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	440b      	add	r3, r1
 8002774:	fbb0 f3f3 	udiv	r3, r0, r3
 8002778:	3301      	adds	r3, #1
 800277a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800277e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002782:	e00f      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1e58      	subs	r0, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	0099      	lsls	r1, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	fbb0 f3f3 	udiv	r3, r0, r3
 800279a:	3301      	adds	r3, #1
 800279c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	6809      	ldr	r1, [r1, #0]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6911      	ldr	r1, [r2, #16]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68d2      	ldr	r2, [r2, #12]
 80027de:	4311      	orrs	r1, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	430b      	orrs	r3, r1
 80027e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	000186a0 	.word	0x000186a0
 8002840:	001e847f 	.word	0x001e847f
 8002844:	003d08ff 	.word	0x003d08ff
 8002848:	431bde83 	.word	0x431bde83
 800284c:	10624dd3 	.word	0x10624dd3

08002850 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b20      	cmp	r3, #32
 8002864:	d129      	bne.n	80028ba <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2224      	movs	r2, #36	; 0x24
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0201 	bic.w	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0210 	bic.w	r2, r2, #16
 800288c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e000      	b.n	80028bc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80028ba:	2302      	movs	r3, #2
  }
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b20      	cmp	r3, #32
 80028e0:	d12a      	bne.n	8002938 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2224      	movs	r2, #36	; 0x24
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0201 	bic.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002902:	89fb      	ldrh	r3, [r7, #14]
 8002904:	f023 030f 	bic.w	r3, r3, #15
 8002908:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	b29a      	uxth	r2, r3
 800290e:	89fb      	ldrh	r3, [r7, #14]
 8002910:	4313      	orrs	r3, r2
 8002912:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	89fa      	ldrh	r2, [r7, #14]
 800291a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	e000      	b.n	800293a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002938:	2302      	movs	r3, #2
  }
}
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	603b      	str	r3, [r7, #0]
 8002956:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	4a1f      	ldr	r2, [pc, #124]	; (80029d8 <HAL_PWREx_EnableOverDrive+0x90>)
 800295c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002960:	6413      	str	r3, [r2, #64]	; 0x40
 8002962:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800296e:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <HAL_PWREx_EnableOverDrive+0x94>)
 8002970:	2201      	movs	r2, #1
 8002972:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002974:	f7ff fa8e 	bl	8001e94 <HAL_GetTick>
 8002978:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800297a:	e009      	b.n	8002990 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800297c:	f7ff fa8a 	bl	8001e94 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800298a:	d901      	bls.n	8002990 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e01f      	b.n	80029d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002990:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299c:	d1ee      	bne.n	800297c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800299e:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029a4:	f7ff fa76 	bl	8001e94 <HAL_GetTick>
 80029a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029aa:	e009      	b.n	80029c0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029ac:	f7ff fa72 	bl	8001e94 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029ba:	d901      	bls.n	80029c0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e007      	b.n	80029d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <HAL_PWREx_EnableOverDrive+0x98>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029cc:	d1ee      	bne.n	80029ac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40023800 	.word	0x40023800
 80029dc:	420e0040 	.word	0x420e0040
 80029e0:	40007000 	.word	0x40007000
 80029e4:	420e0044 	.word	0x420e0044

080029e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e264      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d075      	beq.n	8002af2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a06:	4ba3      	ldr	r3, [pc, #652]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d00c      	beq.n	8002a2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a12:	4ba0      	ldr	r3, [pc, #640]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d112      	bne.n	8002a44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1e:	4b9d      	ldr	r3, [pc, #628]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a2a:	d10b      	bne.n	8002a44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2c:	4b99      	ldr	r3, [pc, #612]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d05b      	beq.n	8002af0 <HAL_RCC_OscConfig+0x108>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d157      	bne.n	8002af0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e23f      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4c:	d106      	bne.n	8002a5c <HAL_RCC_OscConfig+0x74>
 8002a4e:	4b91      	ldr	r3, [pc, #580]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a90      	ldr	r2, [pc, #576]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e01d      	b.n	8002a98 <HAL_RCC_OscConfig+0xb0>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x98>
 8002a66:	4b8b      	ldr	r3, [pc, #556]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a8a      	ldr	r2, [pc, #552]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	4b88      	ldr	r3, [pc, #544]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a87      	ldr	r2, [pc, #540]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e00b      	b.n	8002a98 <HAL_RCC_OscConfig+0xb0>
 8002a80:	4b84      	ldr	r3, [pc, #528]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a83      	ldr	r2, [pc, #524]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b81      	ldr	r3, [pc, #516]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a80      	ldr	r2, [pc, #512]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d013      	beq.n	8002ac8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa0:	f7ff f9f8 	bl	8001e94 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7ff f9f4 	bl	8001e94 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	; 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e204      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	4b76      	ldr	r3, [pc, #472]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xc0>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7ff f9e4 	bl	8001e94 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad0:	f7ff f9e0 	bl	8001e94 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	; 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e1f0      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae2:	4b6c      	ldr	r3, [pc, #432]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0xe8>
 8002aee:	e000      	b.n	8002af2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d063      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002afe:	4b65      	ldr	r3, [pc, #404]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00b      	beq.n	8002b22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b0a:	4b62      	ldr	r3, [pc, #392]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d11c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b16:	4b5f      	ldr	r3, [pc, #380]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d116      	bne.n	8002b50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b22:	4b5c      	ldr	r3, [pc, #368]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_RCC_OscConfig+0x152>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d001      	beq.n	8002b3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e1c4      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3a:	4b56      	ldr	r3, [pc, #344]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4952      	ldr	r1, [pc, #328]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4e:	e03a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d020      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b58:	4b4f      	ldr	r3, [pc, #316]	; (8002c98 <HAL_RCC_OscConfig+0x2b0>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5e:	f7ff f999 	bl	8001e94 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b66:	f7ff f995 	bl	8001e94 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e1a5      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b78:	4b46      	ldr	r3, [pc, #280]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b84:	4b43      	ldr	r3, [pc, #268]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4940      	ldr	r1, [pc, #256]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	600b      	str	r3, [r1, #0]
 8002b98:	e015      	b.n	8002bc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b9a:	4b3f      	ldr	r3, [pc, #252]	; (8002c98 <HAL_RCC_OscConfig+0x2b0>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7ff f978 	bl	8001e94 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba8:	f7ff f974 	bl	8001e94 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e184      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bba:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d030      	beq.n	8002c34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d016      	beq.n	8002c08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bda:	4b30      	ldr	r3, [pc, #192]	; (8002c9c <HAL_RCC_OscConfig+0x2b4>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be0:	f7ff f958 	bl	8001e94 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be8:	f7ff f954 	bl	8001e94 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e164      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfa:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x200>
 8002c06:	e015      	b.n	8002c34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c08:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <HAL_RCC_OscConfig+0x2b4>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0e:	f7ff f941 	bl	8001e94 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c16:	f7ff f93d 	bl	8001e94 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e14d      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c28:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f0      	bne.n	8002c16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 80a0 	beq.w	8002d82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c42:	2300      	movs	r3, #0
 8002c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c46:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10f      	bne.n	8002c72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	60bb      	str	r3, [r7, #8]
 8002c56:	4b0f      	ldr	r3, [pc, #60]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	4a0e      	ldr	r2, [pc, #56]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c60:	6413      	str	r3, [r2, #64]	; 0x40
 8002c62:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c72:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_RCC_OscConfig+0x2b8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d121      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c7e:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <HAL_RCC_OscConfig+0x2b8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a07      	ldr	r2, [pc, #28]	; (8002ca0 <HAL_RCC_OscConfig+0x2b8>)
 8002c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8a:	f7ff f903 	bl	8001e94 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c90:	e011      	b.n	8002cb6 <HAL_RCC_OscConfig+0x2ce>
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800
 8002c98:	42470000 	.word	0x42470000
 8002c9c:	42470e80 	.word	0x42470e80
 8002ca0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca4:	f7ff f8f6 	bl	8001e94 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e106      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb6:	4b85      	ldr	r3, [pc, #532]	; (8002ecc <HAL_RCC_OscConfig+0x4e4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d106      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x2f0>
 8002cca:	4b81      	ldr	r3, [pc, #516]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	4a80      	ldr	r2, [pc, #512]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd6:	e01c      	b.n	8002d12 <HAL_RCC_OscConfig+0x32a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b05      	cmp	r3, #5
 8002cde:	d10c      	bne.n	8002cfa <HAL_RCC_OscConfig+0x312>
 8002ce0:	4b7b      	ldr	r3, [pc, #492]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	4a7a      	ldr	r2, [pc, #488]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002ce6:	f043 0304 	orr.w	r3, r3, #4
 8002cea:	6713      	str	r3, [r2, #112]	; 0x70
 8002cec:	4b78      	ldr	r3, [pc, #480]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	4a77      	ldr	r2, [pc, #476]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf8:	e00b      	b.n	8002d12 <HAL_RCC_OscConfig+0x32a>
 8002cfa:	4b75      	ldr	r3, [pc, #468]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfe:	4a74      	ldr	r2, [pc, #464]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	6713      	str	r3, [r2, #112]	; 0x70
 8002d06:	4b72      	ldr	r3, [pc, #456]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	4a71      	ldr	r2, [pc, #452]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002d0c:	f023 0304 	bic.w	r3, r3, #4
 8002d10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d015      	beq.n	8002d46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1a:	f7ff f8bb 	bl	8001e94 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d20:	e00a      	b.n	8002d38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d22:	f7ff f8b7 	bl	8001e94 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e0c5      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d38:	4b65      	ldr	r3, [pc, #404]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0ee      	beq.n	8002d22 <HAL_RCC_OscConfig+0x33a>
 8002d44:	e014      	b.n	8002d70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d46:	f7ff f8a5 	bl	8001e94 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f7ff f8a1 	bl	8001e94 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e0af      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d64:	4b5a      	ldr	r3, [pc, #360]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1ee      	bne.n	8002d4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d105      	bne.n	8002d82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d76:	4b56      	ldr	r3, [pc, #344]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	4a55      	ldr	r2, [pc, #340]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 809b 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d8c:	4b50      	ldr	r3, [pc, #320]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d05c      	beq.n	8002e52 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d141      	bne.n	8002e24 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da0:	4b4c      	ldr	r3, [pc, #304]	; (8002ed4 <HAL_RCC_OscConfig+0x4ec>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da6:	f7ff f875 	bl	8001e94 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dae:	f7ff f871 	bl	8001e94 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e081      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc0:	4b43      	ldr	r3, [pc, #268]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f0      	bne.n	8002dae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69da      	ldr	r2, [r3, #28]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	019b      	lsls	r3, r3, #6
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	085b      	lsrs	r3, r3, #1
 8002de4:	3b01      	subs	r3, #1
 8002de6:	041b      	lsls	r3, r3, #16
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	061b      	lsls	r3, r3, #24
 8002df0:	4937      	ldr	r1, [pc, #220]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df6:	4b37      	ldr	r3, [pc, #220]	; (8002ed4 <HAL_RCC_OscConfig+0x4ec>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7ff f84a 	bl	8001e94 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e04:	f7ff f846 	bl	8001e94 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e056      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e16:	4b2e      	ldr	r3, [pc, #184]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x41c>
 8002e22:	e04e      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e24:	4b2b      	ldr	r3, [pc, #172]	; (8002ed4 <HAL_RCC_OscConfig+0x4ec>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2a:	f7ff f833 	bl	8001e94 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e32:	f7ff f82f 	bl	8001e94 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e03f      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e44:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f0      	bne.n	8002e32 <HAL_RCC_OscConfig+0x44a>
 8002e50:	e037      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e032      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <HAL_RCC_OscConfig+0x4e8>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d028      	beq.n	8002ebe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d121      	bne.n	8002ebe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d11a      	bne.n	8002ebe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e8e:	4013      	ands	r3, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e94:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d111      	bne.n	8002ebe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d107      	bne.n	8002ebe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40007000 	.word	0x40007000
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	42470060 	.word	0x42470060

08002ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0cc      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eec:	4b68      	ldr	r3, [pc, #416]	; (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d90c      	bls.n	8002f14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b65      	ldr	r3, [pc, #404]	; (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b63      	ldr	r3, [pc, #396]	; (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0b8      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d020      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f2c:	4b59      	ldr	r3, [pc, #356]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	4a58      	ldr	r2, [pc, #352]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f44:	4b53      	ldr	r3, [pc, #332]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4a52      	ldr	r2, [pc, #328]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f50:	4b50      	ldr	r3, [pc, #320]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	494d      	ldr	r1, [pc, #308]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d044      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d107      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f76:	4b47      	ldr	r3, [pc, #284]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d119      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e07f      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d003      	beq.n	8002f96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f96:	4b3f      	ldr	r3, [pc, #252]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e06f      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa6:	4b3b      	ldr	r3, [pc, #236]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e067      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fb6:	4b37      	ldr	r3, [pc, #220]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f023 0203 	bic.w	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4934      	ldr	r1, [pc, #208]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc8:	f7fe ff64 	bl	8001e94 <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd0:	f7fe ff60 	bl	8001e94 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e04f      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe6:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 020c 	and.w	r2, r3, #12
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d1eb      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff8:	4b25      	ldr	r3, [pc, #148]	; (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 030f 	and.w	r3, r3, #15
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d20c      	bcs.n	8003020 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003006:	4b22      	ldr	r3, [pc, #136]	; (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e032      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800302c:	4b19      	ldr	r3, [pc, #100]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4916      	ldr	r1, [pc, #88]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	4313      	orrs	r3, r2
 800303c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	490e      	ldr	r1, [pc, #56]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800305e:	f000 f821 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 8003062:	4602      	mov	r2, r0
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	490a      	ldr	r1, [pc, #40]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	5ccb      	ldrb	r3, [r1, r3]
 8003072:	fa22 f303 	lsr.w	r3, r2, r3
 8003076:	4a09      	ldr	r2, [pc, #36]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800307a:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7fe fec4 	bl	8001e0c <HAL_InitTick>

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40023c00 	.word	0x40023c00
 8003094:	40023800 	.word	0x40023800
 8003098:	080077c0 	.word	0x080077c0
 800309c:	20000000 	.word	0x20000000
 80030a0:	20000004 	.word	0x20000004

080030a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a4:	b5b0      	push	{r4, r5, r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030aa:	2100      	movs	r1, #0
 80030ac:	6079      	str	r1, [r7, #4]
 80030ae:	2100      	movs	r1, #0
 80030b0:	60f9      	str	r1, [r7, #12]
 80030b2:	2100      	movs	r1, #0
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030b6:	2100      	movs	r1, #0
 80030b8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ba:	4952      	ldr	r1, [pc, #328]	; (8003204 <HAL_RCC_GetSysClockFreq+0x160>)
 80030bc:	6889      	ldr	r1, [r1, #8]
 80030be:	f001 010c 	and.w	r1, r1, #12
 80030c2:	2908      	cmp	r1, #8
 80030c4:	d00d      	beq.n	80030e2 <HAL_RCC_GetSysClockFreq+0x3e>
 80030c6:	2908      	cmp	r1, #8
 80030c8:	f200 8094 	bhi.w	80031f4 <HAL_RCC_GetSysClockFreq+0x150>
 80030cc:	2900      	cmp	r1, #0
 80030ce:	d002      	beq.n	80030d6 <HAL_RCC_GetSysClockFreq+0x32>
 80030d0:	2904      	cmp	r1, #4
 80030d2:	d003      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x38>
 80030d4:	e08e      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030d6:	4b4c      	ldr	r3, [pc, #304]	; (8003208 <HAL_RCC_GetSysClockFreq+0x164>)
 80030d8:	60bb      	str	r3, [r7, #8]
       break;
 80030da:	e08e      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030dc:	4b4b      	ldr	r3, [pc, #300]	; (800320c <HAL_RCC_GetSysClockFreq+0x168>)
 80030de:	60bb      	str	r3, [r7, #8]
      break;
 80030e0:	e08b      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030e2:	4948      	ldr	r1, [pc, #288]	; (8003204 <HAL_RCC_GetSysClockFreq+0x160>)
 80030e4:	6849      	ldr	r1, [r1, #4]
 80030e6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80030ea:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ec:	4945      	ldr	r1, [pc, #276]	; (8003204 <HAL_RCC_GetSysClockFreq+0x160>)
 80030ee:	6849      	ldr	r1, [r1, #4]
 80030f0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80030f4:	2900      	cmp	r1, #0
 80030f6:	d024      	beq.n	8003142 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f8:	4942      	ldr	r1, [pc, #264]	; (8003204 <HAL_RCC_GetSysClockFreq+0x160>)
 80030fa:	6849      	ldr	r1, [r1, #4]
 80030fc:	0989      	lsrs	r1, r1, #6
 80030fe:	4608      	mov	r0, r1
 8003100:	f04f 0100 	mov.w	r1, #0
 8003104:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003108:	f04f 0500 	mov.w	r5, #0
 800310c:	ea00 0204 	and.w	r2, r0, r4
 8003110:	ea01 0305 	and.w	r3, r1, r5
 8003114:	493d      	ldr	r1, [pc, #244]	; (800320c <HAL_RCC_GetSysClockFreq+0x168>)
 8003116:	fb01 f003 	mul.w	r0, r1, r3
 800311a:	2100      	movs	r1, #0
 800311c:	fb01 f102 	mul.w	r1, r1, r2
 8003120:	1844      	adds	r4, r0, r1
 8003122:	493a      	ldr	r1, [pc, #232]	; (800320c <HAL_RCC_GetSysClockFreq+0x168>)
 8003124:	fba2 0101 	umull	r0, r1, r2, r1
 8003128:	1863      	adds	r3, r4, r1
 800312a:	4619      	mov	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	461a      	mov	r2, r3
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	f7fd fd48 	bl	8000bc8 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4613      	mov	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	e04a      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003142:	4b30      	ldr	r3, [pc, #192]	; (8003204 <HAL_RCC_GetSysClockFreq+0x160>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	099b      	lsrs	r3, r3, #6
 8003148:	461a      	mov	r2, r3
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003152:	f04f 0100 	mov.w	r1, #0
 8003156:	ea02 0400 	and.w	r4, r2, r0
 800315a:	ea03 0501 	and.w	r5, r3, r1
 800315e:	4620      	mov	r0, r4
 8003160:	4629      	mov	r1, r5
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	014b      	lsls	r3, r1, #5
 800316c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003170:	0142      	lsls	r2, r0, #5
 8003172:	4610      	mov	r0, r2
 8003174:	4619      	mov	r1, r3
 8003176:	1b00      	subs	r0, r0, r4
 8003178:	eb61 0105 	sbc.w	r1, r1, r5
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	018b      	lsls	r3, r1, #6
 8003186:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800318a:	0182      	lsls	r2, r0, #6
 800318c:	1a12      	subs	r2, r2, r0
 800318e:	eb63 0301 	sbc.w	r3, r3, r1
 8003192:	f04f 0000 	mov.w	r0, #0
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	00d9      	lsls	r1, r3, #3
 800319c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031a0:	00d0      	lsls	r0, r2, #3
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	1912      	adds	r2, r2, r4
 80031a8:	eb45 0303 	adc.w	r3, r5, r3
 80031ac:	f04f 0000 	mov.w	r0, #0
 80031b0:	f04f 0100 	mov.w	r1, #0
 80031b4:	0299      	lsls	r1, r3, #10
 80031b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80031ba:	0290      	lsls	r0, r2, #10
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4610      	mov	r0, r2
 80031c2:	4619      	mov	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	f7fd fcfc 	bl	8000bc8 <__aeabi_uldivmod>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4613      	mov	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031d8:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <HAL_RCC_GetSysClockFreq+0x160>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	0c1b      	lsrs	r3, r3, #16
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	3301      	adds	r3, #1
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	60bb      	str	r3, [r7, #8]
      break;
 80031f2:	e002      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <HAL_RCC_GetSysClockFreq+0x164>)
 80031f6:	60bb      	str	r3, [r7, #8]
      break;
 80031f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031fa:	68bb      	ldr	r3, [r7, #8]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bdb0      	pop	{r4, r5, r7, pc}
 8003204:	40023800 	.word	0x40023800
 8003208:	00f42400 	.word	0x00f42400
 800320c:	017d7840 	.word	0x017d7840

08003210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003214:	4b03      	ldr	r3, [pc, #12]	; (8003224 <HAL_RCC_GetHCLKFreq+0x14>)
 8003216:	681b      	ldr	r3, [r3, #0]
}
 8003218:	4618      	mov	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000000 	.word	0x20000000

08003228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800322c:	f7ff fff0 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 8003230:	4602      	mov	r2, r0
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	0a9b      	lsrs	r3, r3, #10
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	4903      	ldr	r1, [pc, #12]	; (800324c <HAL_RCC_GetPCLK1Freq+0x24>)
 800323e:	5ccb      	ldrb	r3, [r1, r3]
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003244:	4618      	mov	r0, r3
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40023800 	.word	0x40023800
 800324c:	080077d0 	.word	0x080077d0

08003250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003254:	f7ff ffdc 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b05      	ldr	r3, [pc, #20]	; (8003270 <HAL_RCC_GetPCLK2Freq+0x20>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	0b5b      	lsrs	r3, r3, #13
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	4903      	ldr	r1, [pc, #12]	; (8003274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003266:	5ccb      	ldrb	r3, [r1, r3]
 8003268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800326c:	4618      	mov	r0, r3
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40023800 	.word	0x40023800
 8003274:	080077d0 	.word	0x080077d0

08003278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e041      	b.n	800330e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fe fada 	bl	8001858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3304      	adds	r3, #4
 80032b4:	4619      	mov	r1, r3
 80032b6:	4610      	mov	r0, r2
 80032b8:	f000 f964 	bl	8003584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e041      	b.n	80033ac <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d106      	bne.n	8003342 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f839 	bl	80033b4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2202      	movs	r2, #2
 8003346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3304      	adds	r3, #4
 8003352:	4619      	mov	r1, r3
 8003354:	4610      	mov	r0, r2
 8003356:	f000 f915 	bl	8003584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e088      	b.n	80034f8 <HAL_TIM_IC_ConfigChannel+0x130>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d11b      	bne.n	800342c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	6819      	ldr	r1, [r3, #0]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f000 f9f0 	bl	80037e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 020c 	bic.w	r2, r2, #12
 8003416:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6999      	ldr	r1, [r3, #24]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	619a      	str	r2, [r3, #24]
 800342a:	e060      	b.n	80034ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b04      	cmp	r3, #4
 8003430:	d11c      	bne.n	800346c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	6819      	ldr	r1, [r3, #0]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f000 fa74 	bl	800392e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699a      	ldr	r2, [r3, #24]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003454:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6999      	ldr	r1, [r3, #24]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	021a      	lsls	r2, r3, #8
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	619a      	str	r2, [r3, #24]
 800346a:	e040      	b.n	80034ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b08      	cmp	r3, #8
 8003470:	d11b      	bne.n	80034aa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	6819      	ldr	r1, [r3, #0]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f000 fac1 	bl	8003a08 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69da      	ldr	r2, [r3, #28]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 020c 	bic.w	r2, r2, #12
 8003494:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69d9      	ldr	r1, [r3, #28]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	61da      	str	r2, [r3, #28]
 80034a8:	e021      	b.n	80034ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b0c      	cmp	r3, #12
 80034ae:	d11c      	bne.n	80034ea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	6819      	ldr	r1, [r3, #0]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f000 fade 	bl	8003a80 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	69da      	ldr	r2, [r3, #28]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80034d2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	69d9      	ldr	r1, [r3, #28]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	021a      	lsls	r2, r3, #8
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	61da      	str	r2, [r3, #28]
 80034e8:	e001      	b.n	80034ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003514:	2302      	movs	r3, #2
 8003516:	e031      	b.n	800357c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003528:	6839      	ldr	r1, [r7, #0]
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f8ca 	bl	80036c4 <TIM_SlaveTimer_SetConfig>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d009      	beq.n	800354a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e018      	b.n	800357c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003558:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003568:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a40      	ldr	r2, [pc, #256]	; (8003698 <TIM_Base_SetConfig+0x114>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d013      	beq.n	80035c4 <TIM_Base_SetConfig+0x40>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a2:	d00f      	beq.n	80035c4 <TIM_Base_SetConfig+0x40>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a3d      	ldr	r2, [pc, #244]	; (800369c <TIM_Base_SetConfig+0x118>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00b      	beq.n	80035c4 <TIM_Base_SetConfig+0x40>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a3c      	ldr	r2, [pc, #240]	; (80036a0 <TIM_Base_SetConfig+0x11c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d007      	beq.n	80035c4 <TIM_Base_SetConfig+0x40>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a3b      	ldr	r2, [pc, #236]	; (80036a4 <TIM_Base_SetConfig+0x120>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d003      	beq.n	80035c4 <TIM_Base_SetConfig+0x40>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a3a      	ldr	r2, [pc, #232]	; (80036a8 <TIM_Base_SetConfig+0x124>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d108      	bne.n	80035d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a2f      	ldr	r2, [pc, #188]	; (8003698 <TIM_Base_SetConfig+0x114>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d02b      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e4:	d027      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a2c      	ldr	r2, [pc, #176]	; (800369c <TIM_Base_SetConfig+0x118>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d023      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a2b      	ldr	r2, [pc, #172]	; (80036a0 <TIM_Base_SetConfig+0x11c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d01f      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a2a      	ldr	r2, [pc, #168]	; (80036a4 <TIM_Base_SetConfig+0x120>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d01b      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a29      	ldr	r2, [pc, #164]	; (80036a8 <TIM_Base_SetConfig+0x124>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d017      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a28      	ldr	r2, [pc, #160]	; (80036ac <TIM_Base_SetConfig+0x128>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d013      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a27      	ldr	r2, [pc, #156]	; (80036b0 <TIM_Base_SetConfig+0x12c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00f      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a26      	ldr	r2, [pc, #152]	; (80036b4 <TIM_Base_SetConfig+0x130>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00b      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a25      	ldr	r2, [pc, #148]	; (80036b8 <TIM_Base_SetConfig+0x134>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d007      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a24      	ldr	r2, [pc, #144]	; (80036bc <TIM_Base_SetConfig+0x138>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d003      	beq.n	8003636 <TIM_Base_SetConfig+0xb2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a23      	ldr	r2, [pc, #140]	; (80036c0 <TIM_Base_SetConfig+0x13c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d108      	bne.n	8003648 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a0a      	ldr	r2, [pc, #40]	; (8003698 <TIM_Base_SetConfig+0x114>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d003      	beq.n	800367c <TIM_Base_SetConfig+0xf8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a0c      	ldr	r2, [pc, #48]	; (80036a8 <TIM_Base_SetConfig+0x124>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d103      	bne.n	8003684 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	615a      	str	r2, [r3, #20]
}
 800368a:	bf00      	nop
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40010000 	.word	0x40010000
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800
 80036a4:	40000c00 	.word	0x40000c00
 80036a8:	40010400 	.word	0x40010400
 80036ac:	40014000 	.word	0x40014000
 80036b0:	40014400 	.word	0x40014400
 80036b4:	40014800 	.word	0x40014800
 80036b8:	40001800 	.word	0x40001800
 80036bc:	40001c00 	.word	0x40001c00
 80036c0:	40002000 	.word	0x40002000

080036c4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f023 0307 	bic.w	r3, r3, #7
 80036f2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b70      	cmp	r3, #112	; 0x70
 800370c:	d01a      	beq.n	8003744 <TIM_SlaveTimer_SetConfig+0x80>
 800370e:	2b70      	cmp	r3, #112	; 0x70
 8003710:	d860      	bhi.n	80037d4 <TIM_SlaveTimer_SetConfig+0x110>
 8003712:	2b60      	cmp	r3, #96	; 0x60
 8003714:	d054      	beq.n	80037c0 <TIM_SlaveTimer_SetConfig+0xfc>
 8003716:	2b60      	cmp	r3, #96	; 0x60
 8003718:	d85c      	bhi.n	80037d4 <TIM_SlaveTimer_SetConfig+0x110>
 800371a:	2b50      	cmp	r3, #80	; 0x50
 800371c:	d046      	beq.n	80037ac <TIM_SlaveTimer_SetConfig+0xe8>
 800371e:	2b50      	cmp	r3, #80	; 0x50
 8003720:	d858      	bhi.n	80037d4 <TIM_SlaveTimer_SetConfig+0x110>
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	d019      	beq.n	800375a <TIM_SlaveTimer_SetConfig+0x96>
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	d854      	bhi.n	80037d4 <TIM_SlaveTimer_SetConfig+0x110>
 800372a:	2b30      	cmp	r3, #48	; 0x30
 800372c:	d055      	beq.n	80037da <TIM_SlaveTimer_SetConfig+0x116>
 800372e:	2b30      	cmp	r3, #48	; 0x30
 8003730:	d850      	bhi.n	80037d4 <TIM_SlaveTimer_SetConfig+0x110>
 8003732:	2b20      	cmp	r3, #32
 8003734:	d051      	beq.n	80037da <TIM_SlaveTimer_SetConfig+0x116>
 8003736:	2b20      	cmp	r3, #32
 8003738:	d84c      	bhi.n	80037d4 <TIM_SlaveTimer_SetConfig+0x110>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d04d      	beq.n	80037da <TIM_SlaveTimer_SetConfig+0x116>
 800373e:	2b10      	cmp	r3, #16
 8003740:	d04b      	beq.n	80037da <TIM_SlaveTimer_SetConfig+0x116>
 8003742:	e047      	b.n	80037d4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6818      	ldr	r0, [r3, #0]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68d9      	ldr	r1, [r3, #12]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	f000 f9d1 	bl	8003afa <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003758:	e040      	b.n	80037dc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b05      	cmp	r3, #5
 8003760:	d101      	bne.n	8003766 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e03b      	b.n	80037de <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6a1a      	ldr	r2, [r3, #32]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0201 	bic.w	r2, r2, #1
 800377c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800378c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	4313      	orrs	r3, r2
 8003798:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	621a      	str	r2, [r3, #32]
      break;
 80037aa:	e017      	b.n	80037dc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	6899      	ldr	r1, [r3, #8]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	461a      	mov	r2, r3
 80037ba:	f000 f889 	bl	80038d0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80037be:	e00d      	b.n	80037dc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	6899      	ldr	r1, [r3, #8]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	461a      	mov	r2, r3
 80037ce:	f000 f8eb 	bl	80039a8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80037d2:	e003      	b.n	80037dc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	75fb      	strb	r3, [r7, #23]
      break;
 80037d8:	e000      	b.n	80037dc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80037da:	bf00      	nop
  }

  return status;
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	f023 0201 	bic.w	r2, r3, #1
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4a28      	ldr	r2, [pc, #160]	; (80038b4 <TIM_TI1_SetConfig+0xcc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d01b      	beq.n	800384e <TIM_TI1_SetConfig+0x66>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381c:	d017      	beq.n	800384e <TIM_TI1_SetConfig+0x66>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4a25      	ldr	r2, [pc, #148]	; (80038b8 <TIM_TI1_SetConfig+0xd0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d013      	beq.n	800384e <TIM_TI1_SetConfig+0x66>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a24      	ldr	r2, [pc, #144]	; (80038bc <TIM_TI1_SetConfig+0xd4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00f      	beq.n	800384e <TIM_TI1_SetConfig+0x66>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4a23      	ldr	r2, [pc, #140]	; (80038c0 <TIM_TI1_SetConfig+0xd8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00b      	beq.n	800384e <TIM_TI1_SetConfig+0x66>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4a22      	ldr	r2, [pc, #136]	; (80038c4 <TIM_TI1_SetConfig+0xdc>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d007      	beq.n	800384e <TIM_TI1_SetConfig+0x66>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4a21      	ldr	r2, [pc, #132]	; (80038c8 <TIM_TI1_SetConfig+0xe0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d003      	beq.n	800384e <TIM_TI1_SetConfig+0x66>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4a20      	ldr	r2, [pc, #128]	; (80038cc <TIM_TI1_SetConfig+0xe4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d101      	bne.n	8003852 <TIM_TI1_SetConfig+0x6a>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <TIM_TI1_SetConfig+0x6c>
 8003852:	2300      	movs	r3, #0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f023 0303 	bic.w	r3, r3, #3
 800385e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	e003      	b.n	8003872 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003878:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	b2db      	uxtb	r3, r3
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f023 030a 	bic.w	r3, r3, #10
 800388c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f003 030a 	and.w	r3, r3, #10
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	621a      	str	r2, [r3, #32]
}
 80038a6:	bf00      	nop
 80038a8:	371c      	adds	r7, #28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40010000 	.word	0x40010000
 80038b8:	40000400 	.word	0x40000400
 80038bc:	40000800 	.word	0x40000800
 80038c0:	40000c00 	.word	0x40000c00
 80038c4:	40010400 	.word	0x40010400
 80038c8:	40014000 	.word	0x40014000
 80038cc:	40001800 	.word	0x40001800

080038d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	f023 0201 	bic.w	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f023 030a 	bic.w	r3, r3, #10
 800390c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4313      	orrs	r3, r2
 8003914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800392e:	b480      	push	{r7}
 8003930:	b087      	sub	sp, #28
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f023 0210 	bic.w	r2, r3, #16
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	4313      	orrs	r3, r2
 8003964:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800396c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	031b      	lsls	r3, r3, #12
 8003972:	b29b      	uxth	r3, r3
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4313      	orrs	r3, r2
 8003978:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003980:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	621a      	str	r2, [r3, #32]
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f023 0210 	bic.w	r2, r3, #16
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	031b      	lsls	r3, r3, #12
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	621a      	str	r2, [r3, #32]
}
 80039fc:	bf00      	nop
 80039fe:	371c      	adds	r7, #28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f023 0303 	bic.w	r3, r3, #3
 8003a34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003a58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	621a      	str	r2, [r3, #32]
}
 8003a74:	bf00      	nop
 8003a76:	371c      	adds	r7, #28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003abe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	031b      	lsls	r3, r3, #12
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003ad2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	031b      	lsls	r3, r3, #12
 8003ad8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	621a      	str	r2, [r3, #32]
}
 8003aee:	bf00      	nop
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b087      	sub	sp, #28
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
 8003b06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	021a      	lsls	r2, r3, #8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	609a      	str	r2, [r3, #8]
}
 8003b2e:	bf00      	nop
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
	...

08003b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e05a      	b.n	8003c0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a21      	ldr	r2, [pc, #132]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d022      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba0:	d01d      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d018      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1b      	ldr	r2, [pc, #108]	; (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d013      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1a      	ldr	r2, [pc, #104]	; (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00e      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d009      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d004      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	40000400 	.word	0x40000400
 8003c20:	40000800 	.word	0x40000800
 8003c24:	40000c00 	.word	0x40000c00
 8003c28:	40010400 	.word	0x40010400
 8003c2c:	40014000 	.word	0x40014000
 8003c30:	40001800 	.word	0x40001800

08003c34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e03f      	b.n	8003cc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fd feac 	bl	80019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2224      	movs	r2, #36	; 0x24
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fde5 	bl	8004848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b08a      	sub	sp, #40	; 0x28
 8003cd2:	af02      	add	r7, sp, #8
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	603b      	str	r3, [r7, #0]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d17c      	bne.n	8003de8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_UART_Transmit+0x2c>
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e075      	b.n	8003dea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_UART_Transmit+0x3e>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e06e      	b.n	8003dea <HAL_UART_Transmit+0x11c>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2221      	movs	r2, #33	; 0x21
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d22:	f7fe f8b7 	bl	8001e94 <HAL_GetTick>
 8003d26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	88fa      	ldrh	r2, [r7, #6]
 8003d2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	88fa      	ldrh	r2, [r7, #6]
 8003d32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d3c:	d108      	bne.n	8003d50 <HAL_UART_Transmit+0x82>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d104      	bne.n	8003d50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	61bb      	str	r3, [r7, #24]
 8003d4e:	e003      	b.n	8003d58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d60:	e02a      	b.n	8003db8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2180      	movs	r1, #128	; 0x80
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 fb29 	bl	80043c4 <UART_WaitOnFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e036      	b.n	8003dea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10b      	bne.n	8003d9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	3302      	adds	r3, #2
 8003d96:	61bb      	str	r3, [r7, #24]
 8003d98:	e007      	b.n	8003daa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	781a      	ldrb	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	3301      	adds	r3, #1
 8003da8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1cf      	bne.n	8003d62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2140      	movs	r1, #64	; 0x40
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 faf9 	bl	80043c4 <UART_WaitOnFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e006      	b.n	8003dea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	e000      	b.n	8003dea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003de8:	2302      	movs	r3, #2
  }
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3720      	adds	r7, #32
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d11d      	bne.n	8003e48 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_UART_Receive_IT+0x26>
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e016      	b.n	8003e4a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_UART_Receive_IT+0x38>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e00f      	b.n	8003e4a <HAL_UART_Receive_IT+0x58>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 fb2e 	bl	80044a0 <UART_Start_Receive_IT>
 8003e44:	4603      	mov	r3, r0
 8003e46:	e000      	b.n	8003e4a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e48:	2302      	movs	r3, #2
  }
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b0ba      	sub	sp, #232	; 0xe8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10f      	bne.n	8003eba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <HAL_UART_IRQHandler+0x66>
 8003ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fc0d 	bl	80046d2 <UART_Receive_IT>
      return;
 8003eb8:	e256      	b.n	8004368 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80de 	beq.w	8004080 <HAL_UART_IRQHandler+0x22c>
 8003ec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d106      	bne.n	8003ede <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80d1 	beq.w	8004080 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00b      	beq.n	8003f02 <HAL_UART_IRQHandler+0xae>
 8003eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f043 0201 	orr.w	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00b      	beq.n	8003f26 <HAL_UART_IRQHandler+0xd2>
 8003f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f043 0202 	orr.w	r2, r3, #2
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00b      	beq.n	8003f4a <HAL_UART_IRQHandler+0xf6>
 8003f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f043 0204 	orr.w	r2, r3, #4
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d011      	beq.n	8003f7a <HAL_UART_IRQHandler+0x126>
 8003f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d105      	bne.n	8003f6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d005      	beq.n	8003f7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f043 0208 	orr.w	r2, r3, #8
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 81ed 	beq.w	800435e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x14e>
 8003f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fb98 	bl	80046d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b40      	cmp	r3, #64	; 0x40
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <HAL_UART_IRQHandler+0x17a>
 8003fc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d04f      	beq.n	800406e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 faa0 	bl	8004514 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fde:	2b40      	cmp	r3, #64	; 0x40
 8003fe0:	d141      	bne.n	8004066 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3314      	adds	r3, #20
 800400a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800400e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004012:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800401a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1d9      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	2b00      	cmp	r3, #0
 8004034:	d013      	beq.n	800405e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	4a7d      	ldr	r2, [pc, #500]	; (8004230 <HAL_UART_IRQHandler+0x3dc>)
 800403c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	4618      	mov	r0, r3
 8004044:	f7fe f8d7 	bl	80021f6 <HAL_DMA_Abort_IT>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d016      	beq.n	800407c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004058:	4610      	mov	r0, r2
 800405a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800405c:	e00e      	b.n	800407c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f99a 	bl	8004398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004064:	e00a      	b.n	800407c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f996 	bl	8004398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406c:	e006      	b.n	800407c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f992 	bl	8004398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800407a:	e170      	b.n	800435e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800407c:	bf00      	nop
    return;
 800407e:	e16e      	b.n	800435e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	2b01      	cmp	r3, #1
 8004086:	f040 814a 	bne.w	800431e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800408a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 8143 	beq.w	800431e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 813c 	beq.w	800431e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040a6:	2300      	movs	r3, #0
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c6:	2b40      	cmp	r3, #64	; 0x40
 80040c8:	f040 80b4 	bne.w	8004234 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 8140 	beq.w	8004362 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040ea:	429a      	cmp	r2, r3
 80040ec:	f080 8139 	bcs.w	8004362 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004102:	f000 8088 	beq.w	8004216 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	330c      	adds	r3, #12
 800410c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800411c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004124:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	330c      	adds	r3, #12
 800412e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004132:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004136:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800413e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800414a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1d9      	bne.n	8004106 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3314      	adds	r3, #20
 8004158:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004164:	f023 0301 	bic.w	r3, r3, #1
 8004168:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3314      	adds	r3, #20
 8004172:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004176:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800417a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800417e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e1      	bne.n	8004152 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3314      	adds	r3, #20
 8004194:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800419e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3314      	adds	r3, #20
 80041ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e3      	bne.n	800418e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	330c      	adds	r3, #12
 80041da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041de:	e853 3f00 	ldrex	r3, [r3]
 80041e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e6:	f023 0310 	bic.w	r3, r3, #16
 80041ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	330c      	adds	r3, #12
 80041f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80041fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e3      	bne.n	80041d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	4618      	mov	r0, r3
 8004212:	f7fd ff80 	bl	8002116 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800421e:	b29b      	uxth	r3, r3
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	b29b      	uxth	r3, r3
 8004224:	4619      	mov	r1, r3
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f8c0 	bl	80043ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800422c:	e099      	b.n	8004362 <HAL_UART_IRQHandler+0x50e>
 800422e:	bf00      	nop
 8004230:	080045db 	.word	0x080045db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800423c:	b29b      	uxth	r3, r3
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 808b 	beq.w	8004366 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004250:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 8086 	beq.w	8004366 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	330c      	adds	r3, #12
 8004260:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800426a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004270:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	330c      	adds	r3, #12
 800427a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800427e:	647a      	str	r2, [r7, #68]	; 0x44
 8004280:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004284:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800428c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e3      	bne.n	800425a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3314      	adds	r3, #20
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	623b      	str	r3, [r7, #32]
   return(result);
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3314      	adds	r3, #20
 80042b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042b6:	633a      	str	r2, [r7, #48]	; 0x30
 80042b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e3      	bne.n	8004292 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	330c      	adds	r3, #12
 80042de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	e853 3f00 	ldrex	r3, [r3]
 80042e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0310 	bic.w	r3, r3, #16
 80042ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80042fc:	61fa      	str	r2, [r7, #28]
 80042fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	69b9      	ldr	r1, [r7, #24]
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	e841 2300 	strex	r3, r2, [r1]
 8004308:	617b      	str	r3, [r7, #20]
   return(result);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e3      	bne.n	80042d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004314:	4619      	mov	r1, r3
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f848 	bl	80043ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800431c:	e023      	b.n	8004366 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800431e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <HAL_UART_IRQHandler+0x4ea>
 800432a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800432e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f963 	bl	8004602 <UART_Transmit_IT>
    return;
 800433c:	e014      	b.n	8004368 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800433e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00e      	beq.n	8004368 <HAL_UART_IRQHandler+0x514>
 800434a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	d008      	beq.n	8004368 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f9a3 	bl	80046a2 <UART_EndTransmit_IT>
    return;
 800435c:	e004      	b.n	8004368 <HAL_UART_IRQHandler+0x514>
    return;
 800435e:	bf00      	nop
 8004360:	e002      	b.n	8004368 <HAL_UART_IRQHandler+0x514>
      return;
 8004362:	bf00      	nop
 8004364:	e000      	b.n	8004368 <HAL_UART_IRQHandler+0x514>
      return;
 8004366:	bf00      	nop
  }
}
 8004368:	37e8      	adds	r7, #232	; 0xe8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop

08004370 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b090      	sub	sp, #64	; 0x40
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	4613      	mov	r3, r2
 80043d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d4:	e050      	b.n	8004478 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d04c      	beq.n	8004478 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80043e4:	f7fd fd56 	bl	8001e94 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d241      	bcs.n	8004478 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	330c      	adds	r3, #12
 80043fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800440a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	330c      	adds	r3, #12
 8004412:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004414:	637a      	str	r2, [r7, #52]	; 0x34
 8004416:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800441a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e5      	bne.n	80043f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3314      	adds	r3, #20
 800442e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	e853 3f00 	ldrex	r3, [r3]
 8004436:	613b      	str	r3, [r7, #16]
   return(result);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f023 0301 	bic.w	r3, r3, #1
 800443e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3314      	adds	r3, #20
 8004446:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004448:	623a      	str	r2, [r7, #32]
 800444a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444c:	69f9      	ldr	r1, [r7, #28]
 800444e:	6a3a      	ldr	r2, [r7, #32]
 8004450:	e841 2300 	strex	r3, r2, [r1]
 8004454:	61bb      	str	r3, [r7, #24]
   return(result);
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e5      	bne.n	8004428 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e00f      	b.n	8004498 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	4013      	ands	r3, r2
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	429a      	cmp	r2, r3
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	429a      	cmp	r2, r3
 8004494:	d09f      	beq.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3740      	adds	r7, #64	; 0x40
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	4613      	mov	r3, r2
 80044ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	88fa      	ldrh	r2, [r7, #6]
 80044b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	88fa      	ldrh	r2, [r7, #6]
 80044be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2222      	movs	r2, #34	; 0x22
 80044ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044e4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695a      	ldr	r2, [r3, #20]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0201 	orr.w	r2, r2, #1
 80044f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f042 0220 	orr.w	r2, r2, #32
 8004504:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004514:	b480      	push	{r7}
 8004516:	b095      	sub	sp, #84	; 0x54
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	330c      	adds	r3, #12
 8004522:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004526:	e853 3f00 	ldrex	r3, [r3]
 800452a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	330c      	adds	r3, #12
 800453a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800453c:	643a      	str	r2, [r7, #64]	; 0x40
 800453e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004544:	e841 2300 	strex	r3, r2, [r1]
 8004548:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e5      	bne.n	800451c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3314      	adds	r3, #20
 8004556:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f023 0301 	bic.w	r3, r3, #1
 8004566:	64bb      	str	r3, [r7, #72]	; 0x48
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3314      	adds	r3, #20
 800456e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004570:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e5      	bne.n	8004550 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	2b01      	cmp	r3, #1
 800458a:	d119      	bne.n	80045c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	330c      	adds	r3, #12
 8004592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	e853 3f00 	ldrex	r3, [r3]
 800459a:	60bb      	str	r3, [r7, #8]
   return(result);
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f023 0310 	bic.w	r3, r3, #16
 80045a2:	647b      	str	r3, [r7, #68]	; 0x44
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	330c      	adds	r3, #12
 80045aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045ac:	61ba      	str	r2, [r7, #24]
 80045ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b0:	6979      	ldr	r1, [r7, #20]
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	e841 2300 	strex	r3, r2, [r1]
 80045b8:	613b      	str	r3, [r7, #16]
   return(result);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1e5      	bne.n	800458c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045ce:	bf00      	nop
 80045d0:	3754      	adds	r7, #84	; 0x54
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7ff fecf 	bl	8004398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045fa:	bf00      	nop
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004602:	b480      	push	{r7}
 8004604:	b085      	sub	sp, #20
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b21      	cmp	r3, #33	; 0x21
 8004614:	d13e      	bne.n	8004694 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461e:	d114      	bne.n	800464a <UART_Transmit_IT+0x48>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d110      	bne.n	800464a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800463c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	1c9a      	adds	r2, r3, #2
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	621a      	str	r2, [r3, #32]
 8004648:	e008      	b.n	800465c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	1c59      	adds	r1, r3, #1
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6211      	str	r1, [r2, #32]
 8004654:	781a      	ldrb	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29b      	uxth	r3, r3
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	4619      	mov	r1, r3
 800466a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10f      	bne.n	8004690 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800467e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800468e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	e000      	b.n	8004696 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004694:	2302      	movs	r3, #2
  }
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff fe54 	bl	8004370 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b08c      	sub	sp, #48	; 0x30
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b22      	cmp	r3, #34	; 0x22
 80046e4:	f040 80ab 	bne.w	800483e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f0:	d117      	bne.n	8004722 <UART_Receive_IT+0x50>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d113      	bne.n	8004722 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	b29b      	uxth	r3, r3
 800470c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004710:	b29a      	uxth	r2, r3
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471a:	1c9a      	adds	r2, r3, #2
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	629a      	str	r2, [r3, #40]	; 0x28
 8004720:	e026      	b.n	8004770 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004728:	2300      	movs	r3, #0
 800472a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004734:	d007      	beq.n	8004746 <UART_Receive_IT+0x74>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <UART_Receive_IT+0x82>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	b2da      	uxtb	r2, r3
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	701a      	strb	r2, [r3, #0]
 8004752:	e008      	b.n	8004766 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004760:	b2da      	uxtb	r2, r3
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29b      	uxth	r3, r3
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4619      	mov	r1, r3
 800477e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004780:	2b00      	cmp	r3, #0
 8004782:	d15a      	bne.n	800483a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0220 	bic.w	r2, r2, #32
 8004792:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d135      	bne.n	8004830 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	330c      	adds	r3, #12
 80047d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	613b      	str	r3, [r7, #16]
   return(result);
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f023 0310 	bic.w	r3, r3, #16
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	330c      	adds	r3, #12
 80047e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ea:	623a      	str	r2, [r7, #32]
 80047ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	69f9      	ldr	r1, [r7, #28]
 80047f0:	6a3a      	ldr	r2, [r7, #32]
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e5      	bne.n	80047ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b10      	cmp	r3, #16
 800480a:	d10a      	bne.n	8004822 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800480c:	2300      	movs	r3, #0
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004826:	4619      	mov	r1, r3
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff fdbf 	bl	80043ac <HAL_UARTEx_RxEventCallback>
 800482e:	e002      	b.n	8004836 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff fda7 	bl	8004384 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	e002      	b.n	8004840 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e000      	b.n	8004840 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800483e:	2302      	movs	r3, #2
  }
}
 8004840:	4618      	mov	r0, r3
 8004842:	3730      	adds	r7, #48	; 0x30
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800484c:	b09f      	sub	sp, #124	; 0x7c
 800484e:	af00      	add	r7, sp, #0
 8004850:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800485c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485e:	68d9      	ldr	r1, [r3, #12]
 8004860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	ea40 0301 	orr.w	r3, r0, r1
 8004868:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800486a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	431a      	orrs	r2, r3
 8004874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	431a      	orrs	r2, r3
 800487a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	4313      	orrs	r3, r2
 8004880:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800488c:	f021 010c 	bic.w	r1, r1, #12
 8004890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004896:	430b      	orrs	r3, r1
 8004898:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800489a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a6:	6999      	ldr	r1, [r3, #24]
 80048a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	ea40 0301 	orr.w	r3, r0, r1
 80048b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4bc5      	ldr	r3, [pc, #788]	; (8004bcc <UART_SetConfig+0x384>)
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d004      	beq.n	80048c6 <UART_SetConfig+0x7e>
 80048bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4bc3      	ldr	r3, [pc, #780]	; (8004bd0 <UART_SetConfig+0x388>)
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d103      	bne.n	80048ce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048c6:	f7fe fcc3 	bl	8003250 <HAL_RCC_GetPCLK2Freq>
 80048ca:	6778      	str	r0, [r7, #116]	; 0x74
 80048cc:	e002      	b.n	80048d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ce:	f7fe fcab 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 80048d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048dc:	f040 80b6 	bne.w	8004a4c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048e2:	461c      	mov	r4, r3
 80048e4:	f04f 0500 	mov.w	r5, #0
 80048e8:	4622      	mov	r2, r4
 80048ea:	462b      	mov	r3, r5
 80048ec:	1891      	adds	r1, r2, r2
 80048ee:	6439      	str	r1, [r7, #64]	; 0x40
 80048f0:	415b      	adcs	r3, r3
 80048f2:	647b      	str	r3, [r7, #68]	; 0x44
 80048f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048f8:	1912      	adds	r2, r2, r4
 80048fa:	eb45 0303 	adc.w	r3, r5, r3
 80048fe:	f04f 0000 	mov.w	r0, #0
 8004902:	f04f 0100 	mov.w	r1, #0
 8004906:	00d9      	lsls	r1, r3, #3
 8004908:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800490c:	00d0      	lsls	r0, r2, #3
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	1911      	adds	r1, r2, r4
 8004914:	6639      	str	r1, [r7, #96]	; 0x60
 8004916:	416b      	adcs	r3, r5
 8004918:	667b      	str	r3, [r7, #100]	; 0x64
 800491a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	461a      	mov	r2, r3
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	1891      	adds	r1, r2, r2
 8004926:	63b9      	str	r1, [r7, #56]	; 0x38
 8004928:	415b      	adcs	r3, r3
 800492a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800492c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004930:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004934:	f7fc f948 	bl	8000bc8 <__aeabi_uldivmod>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4ba5      	ldr	r3, [pc, #660]	; (8004bd4 <UART_SetConfig+0x38c>)
 800493e:	fba3 2302 	umull	r2, r3, r3, r2
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	011e      	lsls	r6, r3, #4
 8004946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004948:	461c      	mov	r4, r3
 800494a:	f04f 0500 	mov.w	r5, #0
 800494e:	4622      	mov	r2, r4
 8004950:	462b      	mov	r3, r5
 8004952:	1891      	adds	r1, r2, r2
 8004954:	6339      	str	r1, [r7, #48]	; 0x30
 8004956:	415b      	adcs	r3, r3
 8004958:	637b      	str	r3, [r7, #52]	; 0x34
 800495a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800495e:	1912      	adds	r2, r2, r4
 8004960:	eb45 0303 	adc.w	r3, r5, r3
 8004964:	f04f 0000 	mov.w	r0, #0
 8004968:	f04f 0100 	mov.w	r1, #0
 800496c:	00d9      	lsls	r1, r3, #3
 800496e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004972:	00d0      	lsls	r0, r2, #3
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	1911      	adds	r1, r2, r4
 800497a:	65b9      	str	r1, [r7, #88]	; 0x58
 800497c:	416b      	adcs	r3, r5
 800497e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	461a      	mov	r2, r3
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	1891      	adds	r1, r2, r2
 800498c:	62b9      	str	r1, [r7, #40]	; 0x28
 800498e:	415b      	adcs	r3, r3
 8004990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004992:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004996:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800499a:	f7fc f915 	bl	8000bc8 <__aeabi_uldivmod>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4b8c      	ldr	r3, [pc, #560]	; (8004bd4 <UART_SetConfig+0x38c>)
 80049a4:	fba3 1302 	umull	r1, r3, r3, r2
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	2164      	movs	r1, #100	; 0x64
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	3332      	adds	r3, #50	; 0x32
 80049b6:	4a87      	ldr	r2, [pc, #540]	; (8004bd4 <UART_SetConfig+0x38c>)
 80049b8:	fba2 2303 	umull	r2, r3, r2, r3
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049c4:	441e      	add	r6, r3
 80049c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049c8:	4618      	mov	r0, r3
 80049ca:	f04f 0100 	mov.w	r1, #0
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	1894      	adds	r4, r2, r2
 80049d4:	623c      	str	r4, [r7, #32]
 80049d6:	415b      	adcs	r3, r3
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
 80049da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049de:	1812      	adds	r2, r2, r0
 80049e0:	eb41 0303 	adc.w	r3, r1, r3
 80049e4:	f04f 0400 	mov.w	r4, #0
 80049e8:	f04f 0500 	mov.w	r5, #0
 80049ec:	00dd      	lsls	r5, r3, #3
 80049ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049f2:	00d4      	lsls	r4, r2, #3
 80049f4:	4622      	mov	r2, r4
 80049f6:	462b      	mov	r3, r5
 80049f8:	1814      	adds	r4, r2, r0
 80049fa:	653c      	str	r4, [r7, #80]	; 0x50
 80049fc:	414b      	adcs	r3, r1
 80049fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	461a      	mov	r2, r3
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	1891      	adds	r1, r2, r2
 8004a0c:	61b9      	str	r1, [r7, #24]
 8004a0e:	415b      	adcs	r3, r3
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004a1a:	f7fc f8d5 	bl	8000bc8 <__aeabi_uldivmod>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	4b6c      	ldr	r3, [pc, #432]	; (8004bd4 <UART_SetConfig+0x38c>)
 8004a24:	fba3 1302 	umull	r1, r3, r3, r2
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	2164      	movs	r1, #100	; 0x64
 8004a2c:	fb01 f303 	mul.w	r3, r1, r3
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	3332      	adds	r3, #50	; 0x32
 8004a36:	4a67      	ldr	r2, [pc, #412]	; (8004bd4 <UART_SetConfig+0x38c>)
 8004a38:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	f003 0207 	and.w	r2, r3, #7
 8004a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4432      	add	r2, r6
 8004a48:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a4a:	e0b9      	b.n	8004bc0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a4e:	461c      	mov	r4, r3
 8004a50:	f04f 0500 	mov.w	r5, #0
 8004a54:	4622      	mov	r2, r4
 8004a56:	462b      	mov	r3, r5
 8004a58:	1891      	adds	r1, r2, r2
 8004a5a:	6139      	str	r1, [r7, #16]
 8004a5c:	415b      	adcs	r3, r3
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a64:	1912      	adds	r2, r2, r4
 8004a66:	eb45 0303 	adc.w	r3, r5, r3
 8004a6a:	f04f 0000 	mov.w	r0, #0
 8004a6e:	f04f 0100 	mov.w	r1, #0
 8004a72:	00d9      	lsls	r1, r3, #3
 8004a74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a78:	00d0      	lsls	r0, r2, #3
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	eb12 0804 	adds.w	r8, r2, r4
 8004a82:	eb43 0905 	adc.w	r9, r3, r5
 8004a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f04f 0100 	mov.w	r1, #0
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	008b      	lsls	r3, r1, #2
 8004a9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a9e:	0082      	lsls	r2, r0, #2
 8004aa0:	4640      	mov	r0, r8
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	f7fc f890 	bl	8000bc8 <__aeabi_uldivmod>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4b49      	ldr	r3, [pc, #292]	; (8004bd4 <UART_SetConfig+0x38c>)
 8004aae:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	011e      	lsls	r6, r3, #4
 8004ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f04f 0100 	mov.w	r1, #0
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	1894      	adds	r4, r2, r2
 8004ac4:	60bc      	str	r4, [r7, #8]
 8004ac6:	415b      	adcs	r3, r3
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ace:	1812      	adds	r2, r2, r0
 8004ad0:	eb41 0303 	adc.w	r3, r1, r3
 8004ad4:	f04f 0400 	mov.w	r4, #0
 8004ad8:	f04f 0500 	mov.w	r5, #0
 8004adc:	00dd      	lsls	r5, r3, #3
 8004ade:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ae2:	00d4      	lsls	r4, r2, #3
 8004ae4:	4622      	mov	r2, r4
 8004ae6:	462b      	mov	r3, r5
 8004ae8:	1814      	adds	r4, r2, r0
 8004aea:	64bc      	str	r4, [r7, #72]	; 0x48
 8004aec:	414b      	adcs	r3, r1
 8004aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f04f 0100 	mov.w	r1, #0
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	008b      	lsls	r3, r1, #2
 8004b04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b08:	0082      	lsls	r2, r0, #2
 8004b0a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004b0e:	f7fc f85b 	bl	8000bc8 <__aeabi_uldivmod>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4b2f      	ldr	r3, [pc, #188]	; (8004bd4 <UART_SetConfig+0x38c>)
 8004b18:	fba3 1302 	umull	r1, r3, r3, r2
 8004b1c:	095b      	lsrs	r3, r3, #5
 8004b1e:	2164      	movs	r1, #100	; 0x64
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	3332      	adds	r3, #50	; 0x32
 8004b2a:	4a2a      	ldr	r2, [pc, #168]	; (8004bd4 <UART_SetConfig+0x38c>)
 8004b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b30:	095b      	lsrs	r3, r3, #5
 8004b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b36:	441e      	add	r6, r3
 8004b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f04f 0100 	mov.w	r1, #0
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	1894      	adds	r4, r2, r2
 8004b46:	603c      	str	r4, [r7, #0]
 8004b48:	415b      	adcs	r3, r3
 8004b4a:	607b      	str	r3, [r7, #4]
 8004b4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b50:	1812      	adds	r2, r2, r0
 8004b52:	eb41 0303 	adc.w	r3, r1, r3
 8004b56:	f04f 0400 	mov.w	r4, #0
 8004b5a:	f04f 0500 	mov.w	r5, #0
 8004b5e:	00dd      	lsls	r5, r3, #3
 8004b60:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b64:	00d4      	lsls	r4, r2, #3
 8004b66:	4622      	mov	r2, r4
 8004b68:	462b      	mov	r3, r5
 8004b6a:	eb12 0a00 	adds.w	sl, r2, r0
 8004b6e:	eb43 0b01 	adc.w	fp, r3, r1
 8004b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f04f 0100 	mov.w	r1, #0
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	008b      	lsls	r3, r1, #2
 8004b86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b8a:	0082      	lsls	r2, r0, #2
 8004b8c:	4650      	mov	r0, sl
 8004b8e:	4659      	mov	r1, fp
 8004b90:	f7fc f81a 	bl	8000bc8 <__aeabi_uldivmod>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <UART_SetConfig+0x38c>)
 8004b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	2164      	movs	r1, #100	; 0x64
 8004ba2:	fb01 f303 	mul.w	r3, r1, r3
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	3332      	adds	r3, #50	; 0x32
 8004bac:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <UART_SetConfig+0x38c>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	f003 020f 	and.w	r2, r3, #15
 8004bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4432      	add	r2, r6
 8004bbe:	609a      	str	r2, [r3, #8]
}
 8004bc0:	bf00      	nop
 8004bc2:	377c      	adds	r7, #124	; 0x7c
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bca:	bf00      	nop
 8004bcc:	40011000 	.word	0x40011000
 8004bd0:	40011400 	.word	0x40011400
 8004bd4:	51eb851f 	.word	0x51eb851f

08004bd8 <Lidar3dTest>:
//	    HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, sizeof(UART5_rxBuffer));
//	}
//}

void Lidar3dTest(uint8_t version)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, sizeof(UART5_rxBuffer));
 8004be2:	22c8      	movs	r2, #200	; 0xc8
 8004be4:	490d      	ldr	r1, [pc, #52]	; (8004c1c <Lidar3dTest+0x44>)
 8004be6:	480e      	ldr	r0, [pc, #56]	; (8004c20 <Lidar3dTest+0x48>)
 8004be8:	f7ff f903 	bl	8003df2 <HAL_UART_Receive_IT>

	uint32_t baud_rate = 115200;
 8004bec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004bf0:	60fb      	str	r3, [r7, #12]
//	requestPacket(SET_BAUDRATE, baud_rate);
//	 HAL_Delay(2000);
	requestPacket(GET_DEVICE_INFO, baud_rate);
 8004bf2:	68f9      	ldr	r1, [r7, #12]
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	f000 f815 	bl	8004c24 <requestPacket>
	  HAL_Delay(5000);
 8004bfa:	f241 3088 	movw	r0, #5000	; 0x1388
 8004bfe:	f7fd f955 	bl	8001eac <HAL_Delay>
	  requestPacket(RUN_3D_MODE, baud_rate);
 8004c02:	68f9      	ldr	r1, [r7, #12]
 8004c04:	2002      	movs	r0, #2
 8004c06:	f000 f80d 	bl	8004c24 <requestPacket>
	  HAL_Delay(2000);
 8004c0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004c0e:	f7fd f94d 	bl	8001eac <HAL_Delay>
}
 8004c12:	bf00      	nop
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	200001fc 	.word	0x200001fc
 8004c20:	20000420 	.word	0x20000420

08004c24 <requestPacket>:


void requestPacket(uint8_t packet_cmd, uint32_t value)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08c      	sub	sp, #48	; 0x30
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	6039      	str	r1, [r7, #0]
 8004c2e:	71fb      	strb	r3, [r7, #7]
	uint8_t packet_value = 0x00;
 8004c30:	2300      	movs	r3, #0
 8004c32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch(packet_cmd){
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d861      	bhi.n	8004d00 <requestPacket+0xdc>
 8004c3c:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <requestPacket+0x20>)
 8004c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c42:	bf00      	nop
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004c6f 	.word	0x08004c6f
 8004c4c:	08004c75 	.word	0x08004c75
 8004c50:	08004c7b 	.word	0x08004c7b
 8004c54:	08004c81 	.word	0x08004c81
 8004c58:	08004c87 	.word	0x08004c87
 8004c5c:	08004c8d 	.word	0x08004c8d
 8004c60:	08004c93 	.word	0x08004c93
 8004c64:	08004c99 	.word	0x08004c99
	case GET_DEVICE_INFO: // Get Device Info
		packet_cmd = 0x10;
 8004c68:	2310      	movs	r3, #16
 8004c6a:	71fb      	strb	r3, [r7, #7]
		break;
 8004c6c:	e048      	b.n	8004d00 <requestPacket+0xdc>
	case RUN_2D_MODE: // Run 2D Mode
		packet_cmd = 0x01;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	71fb      	strb	r3, [r7, #7]
		break;
 8004c72:	e045      	b.n	8004d00 <requestPacket+0xdc>
	case RUN_3D_MODE: // Run 3D Mode
		packet_cmd = 0x08;
 8004c74:	2308      	movs	r3, #8
 8004c76:	71fb      	strb	r3, [r7, #7]
		break;
 8004c78:	e042      	b.n	8004d00 <requestPacket+0xdc>
	case RUN_DUAL_MODE: // Run Dual Mode
		packet_cmd = 0x07;
 8004c7a:	2307      	movs	r3, #7
 8004c7c:	71fb      	strb	r3, [r7, #7]
		break;
 8004c7e:	e03f      	b.n	8004d00 <requestPacket+0xdc>
	case STOP: // Stop
		packet_cmd = 0x02;
 8004c80:	2302      	movs	r3, #2
 8004c82:	71fb      	strb	r3, [r7, #7]
		break;
 8004c84:	e03c      	b.n	8004d00 <requestPacket+0xdc>
	case SET_3D_PULSE_DURATION_REQUEST: // Set 3D Pulse Duration Request
		packet_cmd = 0x0c;
 8004c86:	230c      	movs	r3, #12
 8004c88:	71fb      	strb	r3, [r7, #7]
		break;
 8004c8a:	e039      	b.n	8004d00 <requestPacket+0xdc>
	case SET_FREQ_REQUEST: // Frequency Setting Request
		packet_cmd = 0x0f;
 8004c8c:	230f      	movs	r3, #15
 8004c8e:	71fb      	strb	r3, [r7, #7]
		break;
 8004c90:	e036      	b.n	8004d00 <requestPacket+0xdc>
	case SET_SENSITIVITY_REQUEST: // Sensitivity Setting Request
		packet_cmd = 0x11;
 8004c92:	2311      	movs	r3, #17
 8004c94:	71fb      	strb	r3, [r7, #7]
		break;
 8004c96:	e033      	b.n	8004d00 <requestPacket+0xdc>
	case SET_BAUDRATE: // Set Serial Baud Rate
		packet_cmd = 0x12;
 8004c98:	2312      	movs	r3, #18
 8004c9a:	71fb      	strb	r3, [r7, #7]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	4a3e      	ldr	r2, [pc, #248]	; (8004d98 <requestPacket+0x174>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d028      	beq.n	8004cf6 <requestPacket+0xd2>
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	4a3c      	ldr	r2, [pc, #240]	; (8004d98 <requestPacket+0x174>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d828      	bhi.n	8004cfe <requestPacket+0xda>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	4a3b      	ldr	r2, [pc, #236]	; (8004d9c <requestPacket+0x178>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d01c      	beq.n	8004cee <requestPacket+0xca>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	4a39      	ldr	r2, [pc, #228]	; (8004d9c <requestPacket+0x178>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d820      	bhi.n	8004cfe <requestPacket+0xda>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8004cc2:	d004      	beq.n	8004cce <requestPacket+0xaa>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 8004cca:	d008      	beq.n	8004cde <requestPacket+0xba>
		}
//		if (HAL_UART_Init(&huart5) != HAL_OK)
//		{
//			Error_Handler();
//		}
		break;
 8004ccc:	e017      	b.n	8004cfe <requestPacket+0xda>
			packet_value = 0x39;
 8004cce:	2339      	movs	r3, #57	; 0x39
 8004cd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			huart5.Init.BaudRate = 57600;
 8004cd4:	4b32      	ldr	r3, [pc, #200]	; (8004da0 <requestPacket+0x17c>)
 8004cd6:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8004cda:	605a      	str	r2, [r3, #4]
			break;
 8004cdc:	e00f      	b.n	8004cfe <requestPacket+0xda>
			packet_value = 0xaa;
 8004cde:	23aa      	movs	r3, #170	; 0xaa
 8004ce0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			huart5.Init.BaudRate = 115200;
 8004ce4:	4b2e      	ldr	r3, [pc, #184]	; (8004da0 <requestPacket+0x17c>)
 8004ce6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004cea:	605a      	str	r2, [r3, #4]
			break;
 8004cec:	e007      	b.n	8004cfe <requestPacket+0xda>
			packet_value = 0x77;
 8004cee:	2377      	movs	r3, #119	; 0x77
 8004cf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8004cf4:	e003      	b.n	8004cfe <requestPacket+0xda>
			packet_value = 0x55;
 8004cf6:	2355      	movs	r3, #85	; 0x55
 8004cf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8004cfc:	bf00      	nop
		break;
 8004cfe:	bf00      	nop
	}

	uint8_t lidar_req_packet[] = {0x5a, 0x77, 0xff, 0x02, 0x00, packet_cmd, packet_value, 0x00};
 8004d00:	235a      	movs	r3, #90	; 0x5a
 8004d02:	773b      	strb	r3, [r7, #28]
 8004d04:	2377      	movs	r3, #119	; 0x77
 8004d06:	777b      	strb	r3, [r7, #29]
 8004d08:	23ff      	movs	r3, #255	; 0xff
 8004d0a:	77bb      	strb	r3, [r7, #30]
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	2300      	movs	r3, #0
 8004d12:	f887 3020 	strb.w	r3, [r7, #32]
 8004d16:	79fb      	ldrb	r3, [r7, #7]
 8004d18:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8004d1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d24:	2300      	movs	r3, #0
 8004d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	// calc checksum
	uint8_t CheckSum = 0;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	int PAYLOAD_LENGTH_LSB_INDEX = 3;
 8004d30:	2303      	movs	r3, #3
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = PAYLOAD_LENGTH_LSB_INDEX; i < sizeof(lidar_req_packet)- 2; i++)
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d38:	e00c      	b.n	8004d54 <requestPacket+0x130>
	{
		CheckSum ^= lidar_req_packet[i];
 8004d3a:	f107 021c 	add.w	r2, r7, #28
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	4413      	add	r3, r2
 8004d42:	781a      	ldrb	r2, [r3, #0]
 8004d44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d48:	4053      	eors	r3, r2
 8004d4a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for(int i = PAYLOAD_LENGTH_LSB_INDEX; i < sizeof(lidar_req_packet)- 2; i++)
 8004d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d50:	3301      	adds	r3, #1
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	2b05      	cmp	r3, #5
 8004d58:	d9ef      	bls.n	8004d3a <requestPacket+0x116>
	}
	lidar_req_packet[7] = CheckSum;
 8004d5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
//
//	sprintf(uartBuf, "-> request packet\n");			//convert to string
//	HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, strlen(uartBuf), 100);

	// request packet
	uint8_t tmpBuf[15] = {0,};
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	f107 0310 	add.w	r3, r7, #16
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	605a      	str	r2, [r3, #4]
 8004d70:	f8c3 2007 	str.w	r2, [r3, #7]
	HAL_UART_Transmit(&huart5, (uint8_t *)lidar_req_packet, sizeof(lidar_req_packet), 100);
 8004d74:	f107 011c 	add.w	r1, r7, #28
 8004d78:	2364      	movs	r3, #100	; 0x64
 8004d7a:	2208      	movs	r2, #8
 8004d7c:	4808      	ldr	r0, [pc, #32]	; (8004da0 <requestPacket+0x17c>)
 8004d7e:	f7fe ffa6 	bl	8003cce <HAL_UART_Transmit>
	HAL_Delay(40);
 8004d82:	2028      	movs	r0, #40	; 0x28
 8004d84:	f7fd f892 	bl	8001eac <HAL_Delay>
//			HAL_UART_Transmit(&huart3, (uint8_t *)uartBuf, sizeof(uartBuf), 100);
//			break;
//		}
//	}

	HAL_Delay(1000);
 8004d88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d8c:	f7fd f88e 	bl	8001eac <HAL_Delay>
}
 8004d90:	bf00      	nop
 8004d92:	3730      	adds	r7, #48	; 0x30
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	002dc6c0 	.word	0x002dc6c0
 8004d9c:	0003d090 	.word	0x0003d090
 8004da0:	20000420 	.word	0x20000420

08004da4 <__errno>:
 8004da4:	4b01      	ldr	r3, [pc, #4]	; (8004dac <__errno+0x8>)
 8004da6:	6818      	ldr	r0, [r3, #0]
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	2000000c 	.word	0x2000000c

08004db0 <__libc_init_array>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	4d0d      	ldr	r5, [pc, #52]	; (8004de8 <__libc_init_array+0x38>)
 8004db4:	4c0d      	ldr	r4, [pc, #52]	; (8004dec <__libc_init_array+0x3c>)
 8004db6:	1b64      	subs	r4, r4, r5
 8004db8:	10a4      	asrs	r4, r4, #2
 8004dba:	2600      	movs	r6, #0
 8004dbc:	42a6      	cmp	r6, r4
 8004dbe:	d109      	bne.n	8004dd4 <__libc_init_array+0x24>
 8004dc0:	4d0b      	ldr	r5, [pc, #44]	; (8004df0 <__libc_init_array+0x40>)
 8004dc2:	4c0c      	ldr	r4, [pc, #48]	; (8004df4 <__libc_init_array+0x44>)
 8004dc4:	f002 fcf0 	bl	80077a8 <_init>
 8004dc8:	1b64      	subs	r4, r4, r5
 8004dca:	10a4      	asrs	r4, r4, #2
 8004dcc:	2600      	movs	r6, #0
 8004dce:	42a6      	cmp	r6, r4
 8004dd0:	d105      	bne.n	8004dde <__libc_init_array+0x2e>
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
 8004dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd8:	4798      	blx	r3
 8004dda:	3601      	adds	r6, #1
 8004ddc:	e7ee      	b.n	8004dbc <__libc_init_array+0xc>
 8004dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de2:	4798      	blx	r3
 8004de4:	3601      	adds	r6, #1
 8004de6:	e7f2      	b.n	8004dce <__libc_init_array+0x1e>
 8004de8:	08007bc4 	.word	0x08007bc4
 8004dec:	08007bc4 	.word	0x08007bc4
 8004df0:	08007bc4 	.word	0x08007bc4
 8004df4:	08007bc8 	.word	0x08007bc8

08004df8 <malloc>:
 8004df8:	4b02      	ldr	r3, [pc, #8]	; (8004e04 <malloc+0xc>)
 8004dfa:	4601      	mov	r1, r0
 8004dfc:	6818      	ldr	r0, [r3, #0]
 8004dfe:	f000 b85b 	b.w	8004eb8 <_malloc_r>
 8004e02:	bf00      	nop
 8004e04:	2000000c 	.word	0x2000000c

08004e08 <memset>:
 8004e08:	4402      	add	r2, r0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d100      	bne.n	8004e12 <memset+0xa>
 8004e10:	4770      	bx	lr
 8004e12:	f803 1b01 	strb.w	r1, [r3], #1
 8004e16:	e7f9      	b.n	8004e0c <memset+0x4>

08004e18 <_free_r>:
 8004e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e1a:	2900      	cmp	r1, #0
 8004e1c:	d048      	beq.n	8004eb0 <_free_r+0x98>
 8004e1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e22:	9001      	str	r0, [sp, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f1a1 0404 	sub.w	r4, r1, #4
 8004e2a:	bfb8      	it	lt
 8004e2c:	18e4      	addlt	r4, r4, r3
 8004e2e:	f001 fba1 	bl	8006574 <__malloc_lock>
 8004e32:	4a20      	ldr	r2, [pc, #128]	; (8004eb4 <_free_r+0x9c>)
 8004e34:	9801      	ldr	r0, [sp, #4]
 8004e36:	6813      	ldr	r3, [r2, #0]
 8004e38:	4615      	mov	r5, r2
 8004e3a:	b933      	cbnz	r3, 8004e4a <_free_r+0x32>
 8004e3c:	6063      	str	r3, [r4, #4]
 8004e3e:	6014      	str	r4, [r2, #0]
 8004e40:	b003      	add	sp, #12
 8004e42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e46:	f001 bb9b 	b.w	8006580 <__malloc_unlock>
 8004e4a:	42a3      	cmp	r3, r4
 8004e4c:	d90b      	bls.n	8004e66 <_free_r+0x4e>
 8004e4e:	6821      	ldr	r1, [r4, #0]
 8004e50:	1862      	adds	r2, r4, r1
 8004e52:	4293      	cmp	r3, r2
 8004e54:	bf04      	itt	eq
 8004e56:	681a      	ldreq	r2, [r3, #0]
 8004e58:	685b      	ldreq	r3, [r3, #4]
 8004e5a:	6063      	str	r3, [r4, #4]
 8004e5c:	bf04      	itt	eq
 8004e5e:	1852      	addeq	r2, r2, r1
 8004e60:	6022      	streq	r2, [r4, #0]
 8004e62:	602c      	str	r4, [r5, #0]
 8004e64:	e7ec      	b.n	8004e40 <_free_r+0x28>
 8004e66:	461a      	mov	r2, r3
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	b10b      	cbz	r3, 8004e70 <_free_r+0x58>
 8004e6c:	42a3      	cmp	r3, r4
 8004e6e:	d9fa      	bls.n	8004e66 <_free_r+0x4e>
 8004e70:	6811      	ldr	r1, [r2, #0]
 8004e72:	1855      	adds	r5, r2, r1
 8004e74:	42a5      	cmp	r5, r4
 8004e76:	d10b      	bne.n	8004e90 <_free_r+0x78>
 8004e78:	6824      	ldr	r4, [r4, #0]
 8004e7a:	4421      	add	r1, r4
 8004e7c:	1854      	adds	r4, r2, r1
 8004e7e:	42a3      	cmp	r3, r4
 8004e80:	6011      	str	r1, [r2, #0]
 8004e82:	d1dd      	bne.n	8004e40 <_free_r+0x28>
 8004e84:	681c      	ldr	r4, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	6053      	str	r3, [r2, #4]
 8004e8a:	4421      	add	r1, r4
 8004e8c:	6011      	str	r1, [r2, #0]
 8004e8e:	e7d7      	b.n	8004e40 <_free_r+0x28>
 8004e90:	d902      	bls.n	8004e98 <_free_r+0x80>
 8004e92:	230c      	movs	r3, #12
 8004e94:	6003      	str	r3, [r0, #0]
 8004e96:	e7d3      	b.n	8004e40 <_free_r+0x28>
 8004e98:	6825      	ldr	r5, [r4, #0]
 8004e9a:	1961      	adds	r1, r4, r5
 8004e9c:	428b      	cmp	r3, r1
 8004e9e:	bf04      	itt	eq
 8004ea0:	6819      	ldreq	r1, [r3, #0]
 8004ea2:	685b      	ldreq	r3, [r3, #4]
 8004ea4:	6063      	str	r3, [r4, #4]
 8004ea6:	bf04      	itt	eq
 8004ea8:	1949      	addeq	r1, r1, r5
 8004eaa:	6021      	streq	r1, [r4, #0]
 8004eac:	6054      	str	r4, [r2, #4]
 8004eae:	e7c7      	b.n	8004e40 <_free_r+0x28>
 8004eb0:	b003      	add	sp, #12
 8004eb2:	bd30      	pop	{r4, r5, pc}
 8004eb4:	200002c4 	.word	0x200002c4

08004eb8 <_malloc_r>:
 8004eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eba:	1ccd      	adds	r5, r1, #3
 8004ebc:	f025 0503 	bic.w	r5, r5, #3
 8004ec0:	3508      	adds	r5, #8
 8004ec2:	2d0c      	cmp	r5, #12
 8004ec4:	bf38      	it	cc
 8004ec6:	250c      	movcc	r5, #12
 8004ec8:	2d00      	cmp	r5, #0
 8004eca:	4606      	mov	r6, r0
 8004ecc:	db01      	blt.n	8004ed2 <_malloc_r+0x1a>
 8004ece:	42a9      	cmp	r1, r5
 8004ed0:	d903      	bls.n	8004eda <_malloc_r+0x22>
 8004ed2:	230c      	movs	r3, #12
 8004ed4:	6033      	str	r3, [r6, #0]
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eda:	f001 fb4b 	bl	8006574 <__malloc_lock>
 8004ede:	4921      	ldr	r1, [pc, #132]	; (8004f64 <_malloc_r+0xac>)
 8004ee0:	680a      	ldr	r2, [r1, #0]
 8004ee2:	4614      	mov	r4, r2
 8004ee4:	b99c      	cbnz	r4, 8004f0e <_malloc_r+0x56>
 8004ee6:	4f20      	ldr	r7, [pc, #128]	; (8004f68 <_malloc_r+0xb0>)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	b923      	cbnz	r3, 8004ef6 <_malloc_r+0x3e>
 8004eec:	4621      	mov	r1, r4
 8004eee:	4630      	mov	r0, r6
 8004ef0:	f000 fca6 	bl	8005840 <_sbrk_r>
 8004ef4:	6038      	str	r0, [r7, #0]
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	4630      	mov	r0, r6
 8004efa:	f000 fca1 	bl	8005840 <_sbrk_r>
 8004efe:	1c43      	adds	r3, r0, #1
 8004f00:	d123      	bne.n	8004f4a <_malloc_r+0x92>
 8004f02:	230c      	movs	r3, #12
 8004f04:	6033      	str	r3, [r6, #0]
 8004f06:	4630      	mov	r0, r6
 8004f08:	f001 fb3a 	bl	8006580 <__malloc_unlock>
 8004f0c:	e7e3      	b.n	8004ed6 <_malloc_r+0x1e>
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	1b5b      	subs	r3, r3, r5
 8004f12:	d417      	bmi.n	8004f44 <_malloc_r+0x8c>
 8004f14:	2b0b      	cmp	r3, #11
 8004f16:	d903      	bls.n	8004f20 <_malloc_r+0x68>
 8004f18:	6023      	str	r3, [r4, #0]
 8004f1a:	441c      	add	r4, r3
 8004f1c:	6025      	str	r5, [r4, #0]
 8004f1e:	e004      	b.n	8004f2a <_malloc_r+0x72>
 8004f20:	6863      	ldr	r3, [r4, #4]
 8004f22:	42a2      	cmp	r2, r4
 8004f24:	bf0c      	ite	eq
 8004f26:	600b      	streq	r3, [r1, #0]
 8004f28:	6053      	strne	r3, [r2, #4]
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	f001 fb28 	bl	8006580 <__malloc_unlock>
 8004f30:	f104 000b 	add.w	r0, r4, #11
 8004f34:	1d23      	adds	r3, r4, #4
 8004f36:	f020 0007 	bic.w	r0, r0, #7
 8004f3a:	1ac2      	subs	r2, r0, r3
 8004f3c:	d0cc      	beq.n	8004ed8 <_malloc_r+0x20>
 8004f3e:	1a1b      	subs	r3, r3, r0
 8004f40:	50a3      	str	r3, [r4, r2]
 8004f42:	e7c9      	b.n	8004ed8 <_malloc_r+0x20>
 8004f44:	4622      	mov	r2, r4
 8004f46:	6864      	ldr	r4, [r4, #4]
 8004f48:	e7cc      	b.n	8004ee4 <_malloc_r+0x2c>
 8004f4a:	1cc4      	adds	r4, r0, #3
 8004f4c:	f024 0403 	bic.w	r4, r4, #3
 8004f50:	42a0      	cmp	r0, r4
 8004f52:	d0e3      	beq.n	8004f1c <_malloc_r+0x64>
 8004f54:	1a21      	subs	r1, r4, r0
 8004f56:	4630      	mov	r0, r6
 8004f58:	f000 fc72 	bl	8005840 <_sbrk_r>
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	d1dd      	bne.n	8004f1c <_malloc_r+0x64>
 8004f60:	e7cf      	b.n	8004f02 <_malloc_r+0x4a>
 8004f62:	bf00      	nop
 8004f64:	200002c4 	.word	0x200002c4
 8004f68:	200002c8 	.word	0x200002c8

08004f6c <__cvt>:
 8004f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f70:	ec55 4b10 	vmov	r4, r5, d0
 8004f74:	2d00      	cmp	r5, #0
 8004f76:	460e      	mov	r6, r1
 8004f78:	4619      	mov	r1, r3
 8004f7a:	462b      	mov	r3, r5
 8004f7c:	bfbb      	ittet	lt
 8004f7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004f82:	461d      	movlt	r5, r3
 8004f84:	2300      	movge	r3, #0
 8004f86:	232d      	movlt	r3, #45	; 0x2d
 8004f88:	700b      	strb	r3, [r1, #0]
 8004f8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004f90:	4691      	mov	r9, r2
 8004f92:	f023 0820 	bic.w	r8, r3, #32
 8004f96:	bfbc      	itt	lt
 8004f98:	4622      	movlt	r2, r4
 8004f9a:	4614      	movlt	r4, r2
 8004f9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fa0:	d005      	beq.n	8004fae <__cvt+0x42>
 8004fa2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004fa6:	d100      	bne.n	8004faa <__cvt+0x3e>
 8004fa8:	3601      	adds	r6, #1
 8004faa:	2102      	movs	r1, #2
 8004fac:	e000      	b.n	8004fb0 <__cvt+0x44>
 8004fae:	2103      	movs	r1, #3
 8004fb0:	ab03      	add	r3, sp, #12
 8004fb2:	9301      	str	r3, [sp, #4]
 8004fb4:	ab02      	add	r3, sp, #8
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	ec45 4b10 	vmov	d0, r4, r5
 8004fbc:	4653      	mov	r3, sl
 8004fbe:	4632      	mov	r2, r6
 8004fc0:	f000 fcda 	bl	8005978 <_dtoa_r>
 8004fc4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004fc8:	4607      	mov	r7, r0
 8004fca:	d102      	bne.n	8004fd2 <__cvt+0x66>
 8004fcc:	f019 0f01 	tst.w	r9, #1
 8004fd0:	d022      	beq.n	8005018 <__cvt+0xac>
 8004fd2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fd6:	eb07 0906 	add.w	r9, r7, r6
 8004fda:	d110      	bne.n	8004ffe <__cvt+0x92>
 8004fdc:	783b      	ldrb	r3, [r7, #0]
 8004fde:	2b30      	cmp	r3, #48	; 0x30
 8004fe0:	d10a      	bne.n	8004ff8 <__cvt+0x8c>
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	4629      	mov	r1, r5
 8004fea:	f7fb fd7d 	bl	8000ae8 <__aeabi_dcmpeq>
 8004fee:	b918      	cbnz	r0, 8004ff8 <__cvt+0x8c>
 8004ff0:	f1c6 0601 	rsb	r6, r6, #1
 8004ff4:	f8ca 6000 	str.w	r6, [sl]
 8004ff8:	f8da 3000 	ldr.w	r3, [sl]
 8004ffc:	4499      	add	r9, r3
 8004ffe:	2200      	movs	r2, #0
 8005000:	2300      	movs	r3, #0
 8005002:	4620      	mov	r0, r4
 8005004:	4629      	mov	r1, r5
 8005006:	f7fb fd6f 	bl	8000ae8 <__aeabi_dcmpeq>
 800500a:	b108      	cbz	r0, 8005010 <__cvt+0xa4>
 800500c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005010:	2230      	movs	r2, #48	; 0x30
 8005012:	9b03      	ldr	r3, [sp, #12]
 8005014:	454b      	cmp	r3, r9
 8005016:	d307      	bcc.n	8005028 <__cvt+0xbc>
 8005018:	9b03      	ldr	r3, [sp, #12]
 800501a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800501c:	1bdb      	subs	r3, r3, r7
 800501e:	4638      	mov	r0, r7
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	b004      	add	sp, #16
 8005024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005028:	1c59      	adds	r1, r3, #1
 800502a:	9103      	str	r1, [sp, #12]
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	e7f0      	b.n	8005012 <__cvt+0xa6>

08005030 <__exponent>:
 8005030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005032:	4603      	mov	r3, r0
 8005034:	2900      	cmp	r1, #0
 8005036:	bfb8      	it	lt
 8005038:	4249      	neglt	r1, r1
 800503a:	f803 2b02 	strb.w	r2, [r3], #2
 800503e:	bfb4      	ite	lt
 8005040:	222d      	movlt	r2, #45	; 0x2d
 8005042:	222b      	movge	r2, #43	; 0x2b
 8005044:	2909      	cmp	r1, #9
 8005046:	7042      	strb	r2, [r0, #1]
 8005048:	dd2a      	ble.n	80050a0 <__exponent+0x70>
 800504a:	f10d 0407 	add.w	r4, sp, #7
 800504e:	46a4      	mov	ip, r4
 8005050:	270a      	movs	r7, #10
 8005052:	46a6      	mov	lr, r4
 8005054:	460a      	mov	r2, r1
 8005056:	fb91 f6f7 	sdiv	r6, r1, r7
 800505a:	fb07 1516 	mls	r5, r7, r6, r1
 800505e:	3530      	adds	r5, #48	; 0x30
 8005060:	2a63      	cmp	r2, #99	; 0x63
 8005062:	f104 34ff 	add.w	r4, r4, #4294967295
 8005066:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800506a:	4631      	mov	r1, r6
 800506c:	dcf1      	bgt.n	8005052 <__exponent+0x22>
 800506e:	3130      	adds	r1, #48	; 0x30
 8005070:	f1ae 0502 	sub.w	r5, lr, #2
 8005074:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005078:	1c44      	adds	r4, r0, #1
 800507a:	4629      	mov	r1, r5
 800507c:	4561      	cmp	r1, ip
 800507e:	d30a      	bcc.n	8005096 <__exponent+0x66>
 8005080:	f10d 0209 	add.w	r2, sp, #9
 8005084:	eba2 020e 	sub.w	r2, r2, lr
 8005088:	4565      	cmp	r5, ip
 800508a:	bf88      	it	hi
 800508c:	2200      	movhi	r2, #0
 800508e:	4413      	add	r3, r2
 8005090:	1a18      	subs	r0, r3, r0
 8005092:	b003      	add	sp, #12
 8005094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005096:	f811 2b01 	ldrb.w	r2, [r1], #1
 800509a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800509e:	e7ed      	b.n	800507c <__exponent+0x4c>
 80050a0:	2330      	movs	r3, #48	; 0x30
 80050a2:	3130      	adds	r1, #48	; 0x30
 80050a4:	7083      	strb	r3, [r0, #2]
 80050a6:	70c1      	strb	r1, [r0, #3]
 80050a8:	1d03      	adds	r3, r0, #4
 80050aa:	e7f1      	b.n	8005090 <__exponent+0x60>

080050ac <_printf_float>:
 80050ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b0:	ed2d 8b02 	vpush	{d8}
 80050b4:	b08d      	sub	sp, #52	; 0x34
 80050b6:	460c      	mov	r4, r1
 80050b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80050bc:	4616      	mov	r6, r2
 80050be:	461f      	mov	r7, r3
 80050c0:	4605      	mov	r5, r0
 80050c2:	f001 fa45 	bl	8006550 <_localeconv_r>
 80050c6:	f8d0 a000 	ldr.w	sl, [r0]
 80050ca:	4650      	mov	r0, sl
 80050cc:	f7fb f890 	bl	80001f0 <strlen>
 80050d0:	2300      	movs	r3, #0
 80050d2:	930a      	str	r3, [sp, #40]	; 0x28
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	9305      	str	r3, [sp, #20]
 80050d8:	f8d8 3000 	ldr.w	r3, [r8]
 80050dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80050e0:	3307      	adds	r3, #7
 80050e2:	f023 0307 	bic.w	r3, r3, #7
 80050e6:	f103 0208 	add.w	r2, r3, #8
 80050ea:	f8c8 2000 	str.w	r2, [r8]
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80050f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80050fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80050fe:	9307      	str	r3, [sp, #28]
 8005100:	f8cd 8018 	str.w	r8, [sp, #24]
 8005104:	ee08 0a10 	vmov	s16, r0
 8005108:	4b9f      	ldr	r3, [pc, #636]	; (8005388 <_printf_float+0x2dc>)
 800510a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800510e:	f04f 32ff 	mov.w	r2, #4294967295
 8005112:	f7fb fd1b 	bl	8000b4c <__aeabi_dcmpun>
 8005116:	bb88      	cbnz	r0, 800517c <_printf_float+0xd0>
 8005118:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800511c:	4b9a      	ldr	r3, [pc, #616]	; (8005388 <_printf_float+0x2dc>)
 800511e:	f04f 32ff 	mov.w	r2, #4294967295
 8005122:	f7fb fcf5 	bl	8000b10 <__aeabi_dcmple>
 8005126:	bb48      	cbnz	r0, 800517c <_printf_float+0xd0>
 8005128:	2200      	movs	r2, #0
 800512a:	2300      	movs	r3, #0
 800512c:	4640      	mov	r0, r8
 800512e:	4649      	mov	r1, r9
 8005130:	f7fb fce4 	bl	8000afc <__aeabi_dcmplt>
 8005134:	b110      	cbz	r0, 800513c <_printf_float+0x90>
 8005136:	232d      	movs	r3, #45	; 0x2d
 8005138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800513c:	4b93      	ldr	r3, [pc, #588]	; (800538c <_printf_float+0x2e0>)
 800513e:	4894      	ldr	r0, [pc, #592]	; (8005390 <_printf_float+0x2e4>)
 8005140:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005144:	bf94      	ite	ls
 8005146:	4698      	movls	r8, r3
 8005148:	4680      	movhi	r8, r0
 800514a:	2303      	movs	r3, #3
 800514c:	6123      	str	r3, [r4, #16]
 800514e:	9b05      	ldr	r3, [sp, #20]
 8005150:	f023 0204 	bic.w	r2, r3, #4
 8005154:	6022      	str	r2, [r4, #0]
 8005156:	f04f 0900 	mov.w	r9, #0
 800515a:	9700      	str	r7, [sp, #0]
 800515c:	4633      	mov	r3, r6
 800515e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005160:	4621      	mov	r1, r4
 8005162:	4628      	mov	r0, r5
 8005164:	f000 f9d8 	bl	8005518 <_printf_common>
 8005168:	3001      	adds	r0, #1
 800516a:	f040 8090 	bne.w	800528e <_printf_float+0x1e2>
 800516e:	f04f 30ff 	mov.w	r0, #4294967295
 8005172:	b00d      	add	sp, #52	; 0x34
 8005174:	ecbd 8b02 	vpop	{d8}
 8005178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517c:	4642      	mov	r2, r8
 800517e:	464b      	mov	r3, r9
 8005180:	4640      	mov	r0, r8
 8005182:	4649      	mov	r1, r9
 8005184:	f7fb fce2 	bl	8000b4c <__aeabi_dcmpun>
 8005188:	b140      	cbz	r0, 800519c <_printf_float+0xf0>
 800518a:	464b      	mov	r3, r9
 800518c:	2b00      	cmp	r3, #0
 800518e:	bfbc      	itt	lt
 8005190:	232d      	movlt	r3, #45	; 0x2d
 8005192:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005196:	487f      	ldr	r0, [pc, #508]	; (8005394 <_printf_float+0x2e8>)
 8005198:	4b7f      	ldr	r3, [pc, #508]	; (8005398 <_printf_float+0x2ec>)
 800519a:	e7d1      	b.n	8005140 <_printf_float+0x94>
 800519c:	6863      	ldr	r3, [r4, #4]
 800519e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80051a2:	9206      	str	r2, [sp, #24]
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	d13f      	bne.n	8005228 <_printf_float+0x17c>
 80051a8:	2306      	movs	r3, #6
 80051aa:	6063      	str	r3, [r4, #4]
 80051ac:	9b05      	ldr	r3, [sp, #20]
 80051ae:	6861      	ldr	r1, [r4, #4]
 80051b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80051b4:	2300      	movs	r3, #0
 80051b6:	9303      	str	r3, [sp, #12]
 80051b8:	ab0a      	add	r3, sp, #40	; 0x28
 80051ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80051be:	ab09      	add	r3, sp, #36	; 0x24
 80051c0:	ec49 8b10 	vmov	d0, r8, r9
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	6022      	str	r2, [r4, #0]
 80051c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80051cc:	4628      	mov	r0, r5
 80051ce:	f7ff fecd 	bl	8004f6c <__cvt>
 80051d2:	9b06      	ldr	r3, [sp, #24]
 80051d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051d6:	2b47      	cmp	r3, #71	; 0x47
 80051d8:	4680      	mov	r8, r0
 80051da:	d108      	bne.n	80051ee <_printf_float+0x142>
 80051dc:	1cc8      	adds	r0, r1, #3
 80051de:	db02      	blt.n	80051e6 <_printf_float+0x13a>
 80051e0:	6863      	ldr	r3, [r4, #4]
 80051e2:	4299      	cmp	r1, r3
 80051e4:	dd41      	ble.n	800526a <_printf_float+0x1be>
 80051e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80051ea:	fa5f fb8b 	uxtb.w	fp, fp
 80051ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051f2:	d820      	bhi.n	8005236 <_printf_float+0x18a>
 80051f4:	3901      	subs	r1, #1
 80051f6:	465a      	mov	r2, fp
 80051f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80051fc:	9109      	str	r1, [sp, #36]	; 0x24
 80051fe:	f7ff ff17 	bl	8005030 <__exponent>
 8005202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005204:	1813      	adds	r3, r2, r0
 8005206:	2a01      	cmp	r2, #1
 8005208:	4681      	mov	r9, r0
 800520a:	6123      	str	r3, [r4, #16]
 800520c:	dc02      	bgt.n	8005214 <_printf_float+0x168>
 800520e:	6822      	ldr	r2, [r4, #0]
 8005210:	07d2      	lsls	r2, r2, #31
 8005212:	d501      	bpl.n	8005218 <_printf_float+0x16c>
 8005214:	3301      	adds	r3, #1
 8005216:	6123      	str	r3, [r4, #16]
 8005218:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800521c:	2b00      	cmp	r3, #0
 800521e:	d09c      	beq.n	800515a <_printf_float+0xae>
 8005220:	232d      	movs	r3, #45	; 0x2d
 8005222:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005226:	e798      	b.n	800515a <_printf_float+0xae>
 8005228:	9a06      	ldr	r2, [sp, #24]
 800522a:	2a47      	cmp	r2, #71	; 0x47
 800522c:	d1be      	bne.n	80051ac <_printf_float+0x100>
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1bc      	bne.n	80051ac <_printf_float+0x100>
 8005232:	2301      	movs	r3, #1
 8005234:	e7b9      	b.n	80051aa <_printf_float+0xfe>
 8005236:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800523a:	d118      	bne.n	800526e <_printf_float+0x1c2>
 800523c:	2900      	cmp	r1, #0
 800523e:	6863      	ldr	r3, [r4, #4]
 8005240:	dd0b      	ble.n	800525a <_printf_float+0x1ae>
 8005242:	6121      	str	r1, [r4, #16]
 8005244:	b913      	cbnz	r3, 800524c <_printf_float+0x1a0>
 8005246:	6822      	ldr	r2, [r4, #0]
 8005248:	07d0      	lsls	r0, r2, #31
 800524a:	d502      	bpl.n	8005252 <_printf_float+0x1a6>
 800524c:	3301      	adds	r3, #1
 800524e:	440b      	add	r3, r1
 8005250:	6123      	str	r3, [r4, #16]
 8005252:	65a1      	str	r1, [r4, #88]	; 0x58
 8005254:	f04f 0900 	mov.w	r9, #0
 8005258:	e7de      	b.n	8005218 <_printf_float+0x16c>
 800525a:	b913      	cbnz	r3, 8005262 <_printf_float+0x1b6>
 800525c:	6822      	ldr	r2, [r4, #0]
 800525e:	07d2      	lsls	r2, r2, #31
 8005260:	d501      	bpl.n	8005266 <_printf_float+0x1ba>
 8005262:	3302      	adds	r3, #2
 8005264:	e7f4      	b.n	8005250 <_printf_float+0x1a4>
 8005266:	2301      	movs	r3, #1
 8005268:	e7f2      	b.n	8005250 <_printf_float+0x1a4>
 800526a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800526e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005270:	4299      	cmp	r1, r3
 8005272:	db05      	blt.n	8005280 <_printf_float+0x1d4>
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	6121      	str	r1, [r4, #16]
 8005278:	07d8      	lsls	r0, r3, #31
 800527a:	d5ea      	bpl.n	8005252 <_printf_float+0x1a6>
 800527c:	1c4b      	adds	r3, r1, #1
 800527e:	e7e7      	b.n	8005250 <_printf_float+0x1a4>
 8005280:	2900      	cmp	r1, #0
 8005282:	bfd4      	ite	le
 8005284:	f1c1 0202 	rsble	r2, r1, #2
 8005288:	2201      	movgt	r2, #1
 800528a:	4413      	add	r3, r2
 800528c:	e7e0      	b.n	8005250 <_printf_float+0x1a4>
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	055a      	lsls	r2, r3, #21
 8005292:	d407      	bmi.n	80052a4 <_printf_float+0x1f8>
 8005294:	6923      	ldr	r3, [r4, #16]
 8005296:	4642      	mov	r2, r8
 8005298:	4631      	mov	r1, r6
 800529a:	4628      	mov	r0, r5
 800529c:	47b8      	blx	r7
 800529e:	3001      	adds	r0, #1
 80052a0:	d12c      	bne.n	80052fc <_printf_float+0x250>
 80052a2:	e764      	b.n	800516e <_printf_float+0xc2>
 80052a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80052a8:	f240 80e0 	bls.w	800546c <_printf_float+0x3c0>
 80052ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052b0:	2200      	movs	r2, #0
 80052b2:	2300      	movs	r3, #0
 80052b4:	f7fb fc18 	bl	8000ae8 <__aeabi_dcmpeq>
 80052b8:	2800      	cmp	r0, #0
 80052ba:	d034      	beq.n	8005326 <_printf_float+0x27a>
 80052bc:	4a37      	ldr	r2, [pc, #220]	; (800539c <_printf_float+0x2f0>)
 80052be:	2301      	movs	r3, #1
 80052c0:	4631      	mov	r1, r6
 80052c2:	4628      	mov	r0, r5
 80052c4:	47b8      	blx	r7
 80052c6:	3001      	adds	r0, #1
 80052c8:	f43f af51 	beq.w	800516e <_printf_float+0xc2>
 80052cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052d0:	429a      	cmp	r2, r3
 80052d2:	db02      	blt.n	80052da <_printf_float+0x22e>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	07d8      	lsls	r0, r3, #31
 80052d8:	d510      	bpl.n	80052fc <_printf_float+0x250>
 80052da:	ee18 3a10 	vmov	r3, s16
 80052de:	4652      	mov	r2, sl
 80052e0:	4631      	mov	r1, r6
 80052e2:	4628      	mov	r0, r5
 80052e4:	47b8      	blx	r7
 80052e6:	3001      	adds	r0, #1
 80052e8:	f43f af41 	beq.w	800516e <_printf_float+0xc2>
 80052ec:	f04f 0800 	mov.w	r8, #0
 80052f0:	f104 091a 	add.w	r9, r4, #26
 80052f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052f6:	3b01      	subs	r3, #1
 80052f8:	4543      	cmp	r3, r8
 80052fa:	dc09      	bgt.n	8005310 <_printf_float+0x264>
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	079b      	lsls	r3, r3, #30
 8005300:	f100 8105 	bmi.w	800550e <_printf_float+0x462>
 8005304:	68e0      	ldr	r0, [r4, #12]
 8005306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005308:	4298      	cmp	r0, r3
 800530a:	bfb8      	it	lt
 800530c:	4618      	movlt	r0, r3
 800530e:	e730      	b.n	8005172 <_printf_float+0xc6>
 8005310:	2301      	movs	r3, #1
 8005312:	464a      	mov	r2, r9
 8005314:	4631      	mov	r1, r6
 8005316:	4628      	mov	r0, r5
 8005318:	47b8      	blx	r7
 800531a:	3001      	adds	r0, #1
 800531c:	f43f af27 	beq.w	800516e <_printf_float+0xc2>
 8005320:	f108 0801 	add.w	r8, r8, #1
 8005324:	e7e6      	b.n	80052f4 <_printf_float+0x248>
 8005326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005328:	2b00      	cmp	r3, #0
 800532a:	dc39      	bgt.n	80053a0 <_printf_float+0x2f4>
 800532c:	4a1b      	ldr	r2, [pc, #108]	; (800539c <_printf_float+0x2f0>)
 800532e:	2301      	movs	r3, #1
 8005330:	4631      	mov	r1, r6
 8005332:	4628      	mov	r0, r5
 8005334:	47b8      	blx	r7
 8005336:	3001      	adds	r0, #1
 8005338:	f43f af19 	beq.w	800516e <_printf_float+0xc2>
 800533c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005340:	4313      	orrs	r3, r2
 8005342:	d102      	bne.n	800534a <_printf_float+0x29e>
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	07d9      	lsls	r1, r3, #31
 8005348:	d5d8      	bpl.n	80052fc <_printf_float+0x250>
 800534a:	ee18 3a10 	vmov	r3, s16
 800534e:	4652      	mov	r2, sl
 8005350:	4631      	mov	r1, r6
 8005352:	4628      	mov	r0, r5
 8005354:	47b8      	blx	r7
 8005356:	3001      	adds	r0, #1
 8005358:	f43f af09 	beq.w	800516e <_printf_float+0xc2>
 800535c:	f04f 0900 	mov.w	r9, #0
 8005360:	f104 0a1a 	add.w	sl, r4, #26
 8005364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005366:	425b      	negs	r3, r3
 8005368:	454b      	cmp	r3, r9
 800536a:	dc01      	bgt.n	8005370 <_printf_float+0x2c4>
 800536c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800536e:	e792      	b.n	8005296 <_printf_float+0x1ea>
 8005370:	2301      	movs	r3, #1
 8005372:	4652      	mov	r2, sl
 8005374:	4631      	mov	r1, r6
 8005376:	4628      	mov	r0, r5
 8005378:	47b8      	blx	r7
 800537a:	3001      	adds	r0, #1
 800537c:	f43f aef7 	beq.w	800516e <_printf_float+0xc2>
 8005380:	f109 0901 	add.w	r9, r9, #1
 8005384:	e7ee      	b.n	8005364 <_printf_float+0x2b8>
 8005386:	bf00      	nop
 8005388:	7fefffff 	.word	0x7fefffff
 800538c:	080077dc 	.word	0x080077dc
 8005390:	080077e0 	.word	0x080077e0
 8005394:	080077e8 	.word	0x080077e8
 8005398:	080077e4 	.word	0x080077e4
 800539c:	080077ec 	.word	0x080077ec
 80053a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053a4:	429a      	cmp	r2, r3
 80053a6:	bfa8      	it	ge
 80053a8:	461a      	movge	r2, r3
 80053aa:	2a00      	cmp	r2, #0
 80053ac:	4691      	mov	r9, r2
 80053ae:	dc37      	bgt.n	8005420 <_printf_float+0x374>
 80053b0:	f04f 0b00 	mov.w	fp, #0
 80053b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053b8:	f104 021a 	add.w	r2, r4, #26
 80053bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053be:	9305      	str	r3, [sp, #20]
 80053c0:	eba3 0309 	sub.w	r3, r3, r9
 80053c4:	455b      	cmp	r3, fp
 80053c6:	dc33      	bgt.n	8005430 <_printf_float+0x384>
 80053c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053cc:	429a      	cmp	r2, r3
 80053ce:	db3b      	blt.n	8005448 <_printf_float+0x39c>
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	07da      	lsls	r2, r3, #31
 80053d4:	d438      	bmi.n	8005448 <_printf_float+0x39c>
 80053d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053d8:	9b05      	ldr	r3, [sp, #20]
 80053da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	eba2 0901 	sub.w	r9, r2, r1
 80053e2:	4599      	cmp	r9, r3
 80053e4:	bfa8      	it	ge
 80053e6:	4699      	movge	r9, r3
 80053e8:	f1b9 0f00 	cmp.w	r9, #0
 80053ec:	dc35      	bgt.n	800545a <_printf_float+0x3ae>
 80053ee:	f04f 0800 	mov.w	r8, #0
 80053f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053f6:	f104 0a1a 	add.w	sl, r4, #26
 80053fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053fe:	1a9b      	subs	r3, r3, r2
 8005400:	eba3 0309 	sub.w	r3, r3, r9
 8005404:	4543      	cmp	r3, r8
 8005406:	f77f af79 	ble.w	80052fc <_printf_float+0x250>
 800540a:	2301      	movs	r3, #1
 800540c:	4652      	mov	r2, sl
 800540e:	4631      	mov	r1, r6
 8005410:	4628      	mov	r0, r5
 8005412:	47b8      	blx	r7
 8005414:	3001      	adds	r0, #1
 8005416:	f43f aeaa 	beq.w	800516e <_printf_float+0xc2>
 800541a:	f108 0801 	add.w	r8, r8, #1
 800541e:	e7ec      	b.n	80053fa <_printf_float+0x34e>
 8005420:	4613      	mov	r3, r2
 8005422:	4631      	mov	r1, r6
 8005424:	4642      	mov	r2, r8
 8005426:	4628      	mov	r0, r5
 8005428:	47b8      	blx	r7
 800542a:	3001      	adds	r0, #1
 800542c:	d1c0      	bne.n	80053b0 <_printf_float+0x304>
 800542e:	e69e      	b.n	800516e <_printf_float+0xc2>
 8005430:	2301      	movs	r3, #1
 8005432:	4631      	mov	r1, r6
 8005434:	4628      	mov	r0, r5
 8005436:	9205      	str	r2, [sp, #20]
 8005438:	47b8      	blx	r7
 800543a:	3001      	adds	r0, #1
 800543c:	f43f ae97 	beq.w	800516e <_printf_float+0xc2>
 8005440:	9a05      	ldr	r2, [sp, #20]
 8005442:	f10b 0b01 	add.w	fp, fp, #1
 8005446:	e7b9      	b.n	80053bc <_printf_float+0x310>
 8005448:	ee18 3a10 	vmov	r3, s16
 800544c:	4652      	mov	r2, sl
 800544e:	4631      	mov	r1, r6
 8005450:	4628      	mov	r0, r5
 8005452:	47b8      	blx	r7
 8005454:	3001      	adds	r0, #1
 8005456:	d1be      	bne.n	80053d6 <_printf_float+0x32a>
 8005458:	e689      	b.n	800516e <_printf_float+0xc2>
 800545a:	9a05      	ldr	r2, [sp, #20]
 800545c:	464b      	mov	r3, r9
 800545e:	4442      	add	r2, r8
 8005460:	4631      	mov	r1, r6
 8005462:	4628      	mov	r0, r5
 8005464:	47b8      	blx	r7
 8005466:	3001      	adds	r0, #1
 8005468:	d1c1      	bne.n	80053ee <_printf_float+0x342>
 800546a:	e680      	b.n	800516e <_printf_float+0xc2>
 800546c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800546e:	2a01      	cmp	r2, #1
 8005470:	dc01      	bgt.n	8005476 <_printf_float+0x3ca>
 8005472:	07db      	lsls	r3, r3, #31
 8005474:	d538      	bpl.n	80054e8 <_printf_float+0x43c>
 8005476:	2301      	movs	r3, #1
 8005478:	4642      	mov	r2, r8
 800547a:	4631      	mov	r1, r6
 800547c:	4628      	mov	r0, r5
 800547e:	47b8      	blx	r7
 8005480:	3001      	adds	r0, #1
 8005482:	f43f ae74 	beq.w	800516e <_printf_float+0xc2>
 8005486:	ee18 3a10 	vmov	r3, s16
 800548a:	4652      	mov	r2, sl
 800548c:	4631      	mov	r1, r6
 800548e:	4628      	mov	r0, r5
 8005490:	47b8      	blx	r7
 8005492:	3001      	adds	r0, #1
 8005494:	f43f ae6b 	beq.w	800516e <_printf_float+0xc2>
 8005498:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800549c:	2200      	movs	r2, #0
 800549e:	2300      	movs	r3, #0
 80054a0:	f7fb fb22 	bl	8000ae8 <__aeabi_dcmpeq>
 80054a4:	b9d8      	cbnz	r0, 80054de <_printf_float+0x432>
 80054a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054a8:	f108 0201 	add.w	r2, r8, #1
 80054ac:	3b01      	subs	r3, #1
 80054ae:	4631      	mov	r1, r6
 80054b0:	4628      	mov	r0, r5
 80054b2:	47b8      	blx	r7
 80054b4:	3001      	adds	r0, #1
 80054b6:	d10e      	bne.n	80054d6 <_printf_float+0x42a>
 80054b8:	e659      	b.n	800516e <_printf_float+0xc2>
 80054ba:	2301      	movs	r3, #1
 80054bc:	4652      	mov	r2, sl
 80054be:	4631      	mov	r1, r6
 80054c0:	4628      	mov	r0, r5
 80054c2:	47b8      	blx	r7
 80054c4:	3001      	adds	r0, #1
 80054c6:	f43f ae52 	beq.w	800516e <_printf_float+0xc2>
 80054ca:	f108 0801 	add.w	r8, r8, #1
 80054ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054d0:	3b01      	subs	r3, #1
 80054d2:	4543      	cmp	r3, r8
 80054d4:	dcf1      	bgt.n	80054ba <_printf_float+0x40e>
 80054d6:	464b      	mov	r3, r9
 80054d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80054dc:	e6dc      	b.n	8005298 <_printf_float+0x1ec>
 80054de:	f04f 0800 	mov.w	r8, #0
 80054e2:	f104 0a1a 	add.w	sl, r4, #26
 80054e6:	e7f2      	b.n	80054ce <_printf_float+0x422>
 80054e8:	2301      	movs	r3, #1
 80054ea:	4642      	mov	r2, r8
 80054ec:	e7df      	b.n	80054ae <_printf_float+0x402>
 80054ee:	2301      	movs	r3, #1
 80054f0:	464a      	mov	r2, r9
 80054f2:	4631      	mov	r1, r6
 80054f4:	4628      	mov	r0, r5
 80054f6:	47b8      	blx	r7
 80054f8:	3001      	adds	r0, #1
 80054fa:	f43f ae38 	beq.w	800516e <_printf_float+0xc2>
 80054fe:	f108 0801 	add.w	r8, r8, #1
 8005502:	68e3      	ldr	r3, [r4, #12]
 8005504:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005506:	1a5b      	subs	r3, r3, r1
 8005508:	4543      	cmp	r3, r8
 800550a:	dcf0      	bgt.n	80054ee <_printf_float+0x442>
 800550c:	e6fa      	b.n	8005304 <_printf_float+0x258>
 800550e:	f04f 0800 	mov.w	r8, #0
 8005512:	f104 0919 	add.w	r9, r4, #25
 8005516:	e7f4      	b.n	8005502 <_printf_float+0x456>

08005518 <_printf_common>:
 8005518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800551c:	4616      	mov	r6, r2
 800551e:	4699      	mov	r9, r3
 8005520:	688a      	ldr	r2, [r1, #8]
 8005522:	690b      	ldr	r3, [r1, #16]
 8005524:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005528:	4293      	cmp	r3, r2
 800552a:	bfb8      	it	lt
 800552c:	4613      	movlt	r3, r2
 800552e:	6033      	str	r3, [r6, #0]
 8005530:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005534:	4607      	mov	r7, r0
 8005536:	460c      	mov	r4, r1
 8005538:	b10a      	cbz	r2, 800553e <_printf_common+0x26>
 800553a:	3301      	adds	r3, #1
 800553c:	6033      	str	r3, [r6, #0]
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	0699      	lsls	r1, r3, #26
 8005542:	bf42      	ittt	mi
 8005544:	6833      	ldrmi	r3, [r6, #0]
 8005546:	3302      	addmi	r3, #2
 8005548:	6033      	strmi	r3, [r6, #0]
 800554a:	6825      	ldr	r5, [r4, #0]
 800554c:	f015 0506 	ands.w	r5, r5, #6
 8005550:	d106      	bne.n	8005560 <_printf_common+0x48>
 8005552:	f104 0a19 	add.w	sl, r4, #25
 8005556:	68e3      	ldr	r3, [r4, #12]
 8005558:	6832      	ldr	r2, [r6, #0]
 800555a:	1a9b      	subs	r3, r3, r2
 800555c:	42ab      	cmp	r3, r5
 800555e:	dc26      	bgt.n	80055ae <_printf_common+0x96>
 8005560:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005564:	1e13      	subs	r3, r2, #0
 8005566:	6822      	ldr	r2, [r4, #0]
 8005568:	bf18      	it	ne
 800556a:	2301      	movne	r3, #1
 800556c:	0692      	lsls	r2, r2, #26
 800556e:	d42b      	bmi.n	80055c8 <_printf_common+0xb0>
 8005570:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005574:	4649      	mov	r1, r9
 8005576:	4638      	mov	r0, r7
 8005578:	47c0      	blx	r8
 800557a:	3001      	adds	r0, #1
 800557c:	d01e      	beq.n	80055bc <_printf_common+0xa4>
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	68e5      	ldr	r5, [r4, #12]
 8005582:	6832      	ldr	r2, [r6, #0]
 8005584:	f003 0306 	and.w	r3, r3, #6
 8005588:	2b04      	cmp	r3, #4
 800558a:	bf08      	it	eq
 800558c:	1aad      	subeq	r5, r5, r2
 800558e:	68a3      	ldr	r3, [r4, #8]
 8005590:	6922      	ldr	r2, [r4, #16]
 8005592:	bf0c      	ite	eq
 8005594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005598:	2500      	movne	r5, #0
 800559a:	4293      	cmp	r3, r2
 800559c:	bfc4      	itt	gt
 800559e:	1a9b      	subgt	r3, r3, r2
 80055a0:	18ed      	addgt	r5, r5, r3
 80055a2:	2600      	movs	r6, #0
 80055a4:	341a      	adds	r4, #26
 80055a6:	42b5      	cmp	r5, r6
 80055a8:	d11a      	bne.n	80055e0 <_printf_common+0xc8>
 80055aa:	2000      	movs	r0, #0
 80055ac:	e008      	b.n	80055c0 <_printf_common+0xa8>
 80055ae:	2301      	movs	r3, #1
 80055b0:	4652      	mov	r2, sl
 80055b2:	4649      	mov	r1, r9
 80055b4:	4638      	mov	r0, r7
 80055b6:	47c0      	blx	r8
 80055b8:	3001      	adds	r0, #1
 80055ba:	d103      	bne.n	80055c4 <_printf_common+0xac>
 80055bc:	f04f 30ff 	mov.w	r0, #4294967295
 80055c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c4:	3501      	adds	r5, #1
 80055c6:	e7c6      	b.n	8005556 <_printf_common+0x3e>
 80055c8:	18e1      	adds	r1, r4, r3
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	2030      	movs	r0, #48	; 0x30
 80055ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055d2:	4422      	add	r2, r4
 80055d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055dc:	3302      	adds	r3, #2
 80055de:	e7c7      	b.n	8005570 <_printf_common+0x58>
 80055e0:	2301      	movs	r3, #1
 80055e2:	4622      	mov	r2, r4
 80055e4:	4649      	mov	r1, r9
 80055e6:	4638      	mov	r0, r7
 80055e8:	47c0      	blx	r8
 80055ea:	3001      	adds	r0, #1
 80055ec:	d0e6      	beq.n	80055bc <_printf_common+0xa4>
 80055ee:	3601      	adds	r6, #1
 80055f0:	e7d9      	b.n	80055a6 <_printf_common+0x8e>
	...

080055f4 <_printf_i>:
 80055f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055f8:	460c      	mov	r4, r1
 80055fa:	4691      	mov	r9, r2
 80055fc:	7e27      	ldrb	r7, [r4, #24]
 80055fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005600:	2f78      	cmp	r7, #120	; 0x78
 8005602:	4680      	mov	r8, r0
 8005604:	469a      	mov	sl, r3
 8005606:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800560a:	d807      	bhi.n	800561c <_printf_i+0x28>
 800560c:	2f62      	cmp	r7, #98	; 0x62
 800560e:	d80a      	bhi.n	8005626 <_printf_i+0x32>
 8005610:	2f00      	cmp	r7, #0
 8005612:	f000 80d8 	beq.w	80057c6 <_printf_i+0x1d2>
 8005616:	2f58      	cmp	r7, #88	; 0x58
 8005618:	f000 80a3 	beq.w	8005762 <_printf_i+0x16e>
 800561c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005620:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005624:	e03a      	b.n	800569c <_printf_i+0xa8>
 8005626:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800562a:	2b15      	cmp	r3, #21
 800562c:	d8f6      	bhi.n	800561c <_printf_i+0x28>
 800562e:	a001      	add	r0, pc, #4	; (adr r0, 8005634 <_printf_i+0x40>)
 8005630:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005634:	0800568d 	.word	0x0800568d
 8005638:	080056a1 	.word	0x080056a1
 800563c:	0800561d 	.word	0x0800561d
 8005640:	0800561d 	.word	0x0800561d
 8005644:	0800561d 	.word	0x0800561d
 8005648:	0800561d 	.word	0x0800561d
 800564c:	080056a1 	.word	0x080056a1
 8005650:	0800561d 	.word	0x0800561d
 8005654:	0800561d 	.word	0x0800561d
 8005658:	0800561d 	.word	0x0800561d
 800565c:	0800561d 	.word	0x0800561d
 8005660:	080057ad 	.word	0x080057ad
 8005664:	080056d1 	.word	0x080056d1
 8005668:	0800578f 	.word	0x0800578f
 800566c:	0800561d 	.word	0x0800561d
 8005670:	0800561d 	.word	0x0800561d
 8005674:	080057cf 	.word	0x080057cf
 8005678:	0800561d 	.word	0x0800561d
 800567c:	080056d1 	.word	0x080056d1
 8005680:	0800561d 	.word	0x0800561d
 8005684:	0800561d 	.word	0x0800561d
 8005688:	08005797 	.word	0x08005797
 800568c:	680b      	ldr	r3, [r1, #0]
 800568e:	1d1a      	adds	r2, r3, #4
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	600a      	str	r2, [r1, #0]
 8005694:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005698:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800569c:	2301      	movs	r3, #1
 800569e:	e0a3      	b.n	80057e8 <_printf_i+0x1f4>
 80056a0:	6825      	ldr	r5, [r4, #0]
 80056a2:	6808      	ldr	r0, [r1, #0]
 80056a4:	062e      	lsls	r6, r5, #24
 80056a6:	f100 0304 	add.w	r3, r0, #4
 80056aa:	d50a      	bpl.n	80056c2 <_printf_i+0xce>
 80056ac:	6805      	ldr	r5, [r0, #0]
 80056ae:	600b      	str	r3, [r1, #0]
 80056b0:	2d00      	cmp	r5, #0
 80056b2:	da03      	bge.n	80056bc <_printf_i+0xc8>
 80056b4:	232d      	movs	r3, #45	; 0x2d
 80056b6:	426d      	negs	r5, r5
 80056b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056bc:	485e      	ldr	r0, [pc, #376]	; (8005838 <_printf_i+0x244>)
 80056be:	230a      	movs	r3, #10
 80056c0:	e019      	b.n	80056f6 <_printf_i+0x102>
 80056c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80056c6:	6805      	ldr	r5, [r0, #0]
 80056c8:	600b      	str	r3, [r1, #0]
 80056ca:	bf18      	it	ne
 80056cc:	b22d      	sxthne	r5, r5
 80056ce:	e7ef      	b.n	80056b0 <_printf_i+0xbc>
 80056d0:	680b      	ldr	r3, [r1, #0]
 80056d2:	6825      	ldr	r5, [r4, #0]
 80056d4:	1d18      	adds	r0, r3, #4
 80056d6:	6008      	str	r0, [r1, #0]
 80056d8:	0628      	lsls	r0, r5, #24
 80056da:	d501      	bpl.n	80056e0 <_printf_i+0xec>
 80056dc:	681d      	ldr	r5, [r3, #0]
 80056de:	e002      	b.n	80056e6 <_printf_i+0xf2>
 80056e0:	0669      	lsls	r1, r5, #25
 80056e2:	d5fb      	bpl.n	80056dc <_printf_i+0xe8>
 80056e4:	881d      	ldrh	r5, [r3, #0]
 80056e6:	4854      	ldr	r0, [pc, #336]	; (8005838 <_printf_i+0x244>)
 80056e8:	2f6f      	cmp	r7, #111	; 0x6f
 80056ea:	bf0c      	ite	eq
 80056ec:	2308      	moveq	r3, #8
 80056ee:	230a      	movne	r3, #10
 80056f0:	2100      	movs	r1, #0
 80056f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056f6:	6866      	ldr	r6, [r4, #4]
 80056f8:	60a6      	str	r6, [r4, #8]
 80056fa:	2e00      	cmp	r6, #0
 80056fc:	bfa2      	ittt	ge
 80056fe:	6821      	ldrge	r1, [r4, #0]
 8005700:	f021 0104 	bicge.w	r1, r1, #4
 8005704:	6021      	strge	r1, [r4, #0]
 8005706:	b90d      	cbnz	r5, 800570c <_printf_i+0x118>
 8005708:	2e00      	cmp	r6, #0
 800570a:	d04d      	beq.n	80057a8 <_printf_i+0x1b4>
 800570c:	4616      	mov	r6, r2
 800570e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005712:	fb03 5711 	mls	r7, r3, r1, r5
 8005716:	5dc7      	ldrb	r7, [r0, r7]
 8005718:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800571c:	462f      	mov	r7, r5
 800571e:	42bb      	cmp	r3, r7
 8005720:	460d      	mov	r5, r1
 8005722:	d9f4      	bls.n	800570e <_printf_i+0x11a>
 8005724:	2b08      	cmp	r3, #8
 8005726:	d10b      	bne.n	8005740 <_printf_i+0x14c>
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	07df      	lsls	r7, r3, #31
 800572c:	d508      	bpl.n	8005740 <_printf_i+0x14c>
 800572e:	6923      	ldr	r3, [r4, #16]
 8005730:	6861      	ldr	r1, [r4, #4]
 8005732:	4299      	cmp	r1, r3
 8005734:	bfde      	ittt	le
 8005736:	2330      	movle	r3, #48	; 0x30
 8005738:	f806 3c01 	strble.w	r3, [r6, #-1]
 800573c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005740:	1b92      	subs	r2, r2, r6
 8005742:	6122      	str	r2, [r4, #16]
 8005744:	f8cd a000 	str.w	sl, [sp]
 8005748:	464b      	mov	r3, r9
 800574a:	aa03      	add	r2, sp, #12
 800574c:	4621      	mov	r1, r4
 800574e:	4640      	mov	r0, r8
 8005750:	f7ff fee2 	bl	8005518 <_printf_common>
 8005754:	3001      	adds	r0, #1
 8005756:	d14c      	bne.n	80057f2 <_printf_i+0x1fe>
 8005758:	f04f 30ff 	mov.w	r0, #4294967295
 800575c:	b004      	add	sp, #16
 800575e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005762:	4835      	ldr	r0, [pc, #212]	; (8005838 <_printf_i+0x244>)
 8005764:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	680e      	ldr	r6, [r1, #0]
 800576c:	061f      	lsls	r7, r3, #24
 800576e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005772:	600e      	str	r6, [r1, #0]
 8005774:	d514      	bpl.n	80057a0 <_printf_i+0x1ac>
 8005776:	07d9      	lsls	r1, r3, #31
 8005778:	bf44      	itt	mi
 800577a:	f043 0320 	orrmi.w	r3, r3, #32
 800577e:	6023      	strmi	r3, [r4, #0]
 8005780:	b91d      	cbnz	r5, 800578a <_printf_i+0x196>
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	f023 0320 	bic.w	r3, r3, #32
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	2310      	movs	r3, #16
 800578c:	e7b0      	b.n	80056f0 <_printf_i+0xfc>
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	f043 0320 	orr.w	r3, r3, #32
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	2378      	movs	r3, #120	; 0x78
 8005798:	4828      	ldr	r0, [pc, #160]	; (800583c <_printf_i+0x248>)
 800579a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800579e:	e7e3      	b.n	8005768 <_printf_i+0x174>
 80057a0:	065e      	lsls	r6, r3, #25
 80057a2:	bf48      	it	mi
 80057a4:	b2ad      	uxthmi	r5, r5
 80057a6:	e7e6      	b.n	8005776 <_printf_i+0x182>
 80057a8:	4616      	mov	r6, r2
 80057aa:	e7bb      	b.n	8005724 <_printf_i+0x130>
 80057ac:	680b      	ldr	r3, [r1, #0]
 80057ae:	6826      	ldr	r6, [r4, #0]
 80057b0:	6960      	ldr	r0, [r4, #20]
 80057b2:	1d1d      	adds	r5, r3, #4
 80057b4:	600d      	str	r5, [r1, #0]
 80057b6:	0635      	lsls	r5, r6, #24
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	d501      	bpl.n	80057c0 <_printf_i+0x1cc>
 80057bc:	6018      	str	r0, [r3, #0]
 80057be:	e002      	b.n	80057c6 <_printf_i+0x1d2>
 80057c0:	0671      	lsls	r1, r6, #25
 80057c2:	d5fb      	bpl.n	80057bc <_printf_i+0x1c8>
 80057c4:	8018      	strh	r0, [r3, #0]
 80057c6:	2300      	movs	r3, #0
 80057c8:	6123      	str	r3, [r4, #16]
 80057ca:	4616      	mov	r6, r2
 80057cc:	e7ba      	b.n	8005744 <_printf_i+0x150>
 80057ce:	680b      	ldr	r3, [r1, #0]
 80057d0:	1d1a      	adds	r2, r3, #4
 80057d2:	600a      	str	r2, [r1, #0]
 80057d4:	681e      	ldr	r6, [r3, #0]
 80057d6:	6862      	ldr	r2, [r4, #4]
 80057d8:	2100      	movs	r1, #0
 80057da:	4630      	mov	r0, r6
 80057dc:	f7fa fd10 	bl	8000200 <memchr>
 80057e0:	b108      	cbz	r0, 80057e6 <_printf_i+0x1f2>
 80057e2:	1b80      	subs	r0, r0, r6
 80057e4:	6060      	str	r0, [r4, #4]
 80057e6:	6863      	ldr	r3, [r4, #4]
 80057e8:	6123      	str	r3, [r4, #16]
 80057ea:	2300      	movs	r3, #0
 80057ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057f0:	e7a8      	b.n	8005744 <_printf_i+0x150>
 80057f2:	6923      	ldr	r3, [r4, #16]
 80057f4:	4632      	mov	r2, r6
 80057f6:	4649      	mov	r1, r9
 80057f8:	4640      	mov	r0, r8
 80057fa:	47d0      	blx	sl
 80057fc:	3001      	adds	r0, #1
 80057fe:	d0ab      	beq.n	8005758 <_printf_i+0x164>
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	079b      	lsls	r3, r3, #30
 8005804:	d413      	bmi.n	800582e <_printf_i+0x23a>
 8005806:	68e0      	ldr	r0, [r4, #12]
 8005808:	9b03      	ldr	r3, [sp, #12]
 800580a:	4298      	cmp	r0, r3
 800580c:	bfb8      	it	lt
 800580e:	4618      	movlt	r0, r3
 8005810:	e7a4      	b.n	800575c <_printf_i+0x168>
 8005812:	2301      	movs	r3, #1
 8005814:	4632      	mov	r2, r6
 8005816:	4649      	mov	r1, r9
 8005818:	4640      	mov	r0, r8
 800581a:	47d0      	blx	sl
 800581c:	3001      	adds	r0, #1
 800581e:	d09b      	beq.n	8005758 <_printf_i+0x164>
 8005820:	3501      	adds	r5, #1
 8005822:	68e3      	ldr	r3, [r4, #12]
 8005824:	9903      	ldr	r1, [sp, #12]
 8005826:	1a5b      	subs	r3, r3, r1
 8005828:	42ab      	cmp	r3, r5
 800582a:	dcf2      	bgt.n	8005812 <_printf_i+0x21e>
 800582c:	e7eb      	b.n	8005806 <_printf_i+0x212>
 800582e:	2500      	movs	r5, #0
 8005830:	f104 0619 	add.w	r6, r4, #25
 8005834:	e7f5      	b.n	8005822 <_printf_i+0x22e>
 8005836:	bf00      	nop
 8005838:	080077ee 	.word	0x080077ee
 800583c:	080077ff 	.word	0x080077ff

08005840 <_sbrk_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	4d06      	ldr	r5, [pc, #24]	; (800585c <_sbrk_r+0x1c>)
 8005844:	2300      	movs	r3, #0
 8005846:	4604      	mov	r4, r0
 8005848:	4608      	mov	r0, r1
 800584a:	602b      	str	r3, [r5, #0]
 800584c:	f7fc fa4a 	bl	8001ce4 <_sbrk>
 8005850:	1c43      	adds	r3, r0, #1
 8005852:	d102      	bne.n	800585a <_sbrk_r+0x1a>
 8005854:	682b      	ldr	r3, [r5, #0]
 8005856:	b103      	cbz	r3, 800585a <_sbrk_r+0x1a>
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	bd38      	pop	{r3, r4, r5, pc}
 800585c:	20000594 	.word	0x20000594

08005860 <quorem>:
 8005860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005864:	6903      	ldr	r3, [r0, #16]
 8005866:	690c      	ldr	r4, [r1, #16]
 8005868:	42a3      	cmp	r3, r4
 800586a:	4607      	mov	r7, r0
 800586c:	f2c0 8081 	blt.w	8005972 <quorem+0x112>
 8005870:	3c01      	subs	r4, #1
 8005872:	f101 0814 	add.w	r8, r1, #20
 8005876:	f100 0514 	add.w	r5, r0, #20
 800587a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005884:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005888:	3301      	adds	r3, #1
 800588a:	429a      	cmp	r2, r3
 800588c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005890:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005894:	fbb2 f6f3 	udiv	r6, r2, r3
 8005898:	d331      	bcc.n	80058fe <quorem+0x9e>
 800589a:	f04f 0e00 	mov.w	lr, #0
 800589e:	4640      	mov	r0, r8
 80058a0:	46ac      	mov	ip, r5
 80058a2:	46f2      	mov	sl, lr
 80058a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80058a8:	b293      	uxth	r3, r2
 80058aa:	fb06 e303 	mla	r3, r6, r3, lr
 80058ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	ebaa 0303 	sub.w	r3, sl, r3
 80058b8:	0c12      	lsrs	r2, r2, #16
 80058ba:	f8dc a000 	ldr.w	sl, [ip]
 80058be:	fb06 e202 	mla	r2, r6, r2, lr
 80058c2:	fa13 f38a 	uxtah	r3, r3, sl
 80058c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80058ca:	fa1f fa82 	uxth.w	sl, r2
 80058ce:	f8dc 2000 	ldr.w	r2, [ip]
 80058d2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80058d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058da:	b29b      	uxth	r3, r3
 80058dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058e0:	4581      	cmp	r9, r0
 80058e2:	f84c 3b04 	str.w	r3, [ip], #4
 80058e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80058ea:	d2db      	bcs.n	80058a4 <quorem+0x44>
 80058ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80058f0:	b92b      	cbnz	r3, 80058fe <quorem+0x9e>
 80058f2:	9b01      	ldr	r3, [sp, #4]
 80058f4:	3b04      	subs	r3, #4
 80058f6:	429d      	cmp	r5, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	d32e      	bcc.n	800595a <quorem+0xfa>
 80058fc:	613c      	str	r4, [r7, #16]
 80058fe:	4638      	mov	r0, r7
 8005900:	f001 f8c2 	bl	8006a88 <__mcmp>
 8005904:	2800      	cmp	r0, #0
 8005906:	db24      	blt.n	8005952 <quorem+0xf2>
 8005908:	3601      	adds	r6, #1
 800590a:	4628      	mov	r0, r5
 800590c:	f04f 0c00 	mov.w	ip, #0
 8005910:	f858 2b04 	ldr.w	r2, [r8], #4
 8005914:	f8d0 e000 	ldr.w	lr, [r0]
 8005918:	b293      	uxth	r3, r2
 800591a:	ebac 0303 	sub.w	r3, ip, r3
 800591e:	0c12      	lsrs	r2, r2, #16
 8005920:	fa13 f38e 	uxtah	r3, r3, lr
 8005924:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005928:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800592c:	b29b      	uxth	r3, r3
 800592e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005932:	45c1      	cmp	r9, r8
 8005934:	f840 3b04 	str.w	r3, [r0], #4
 8005938:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800593c:	d2e8      	bcs.n	8005910 <quorem+0xb0>
 800593e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005942:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005946:	b922      	cbnz	r2, 8005952 <quorem+0xf2>
 8005948:	3b04      	subs	r3, #4
 800594a:	429d      	cmp	r5, r3
 800594c:	461a      	mov	r2, r3
 800594e:	d30a      	bcc.n	8005966 <quorem+0x106>
 8005950:	613c      	str	r4, [r7, #16]
 8005952:	4630      	mov	r0, r6
 8005954:	b003      	add	sp, #12
 8005956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800595a:	6812      	ldr	r2, [r2, #0]
 800595c:	3b04      	subs	r3, #4
 800595e:	2a00      	cmp	r2, #0
 8005960:	d1cc      	bne.n	80058fc <quorem+0x9c>
 8005962:	3c01      	subs	r4, #1
 8005964:	e7c7      	b.n	80058f6 <quorem+0x96>
 8005966:	6812      	ldr	r2, [r2, #0]
 8005968:	3b04      	subs	r3, #4
 800596a:	2a00      	cmp	r2, #0
 800596c:	d1f0      	bne.n	8005950 <quorem+0xf0>
 800596e:	3c01      	subs	r4, #1
 8005970:	e7eb      	b.n	800594a <quorem+0xea>
 8005972:	2000      	movs	r0, #0
 8005974:	e7ee      	b.n	8005954 <quorem+0xf4>
	...

08005978 <_dtoa_r>:
 8005978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800597c:	ed2d 8b02 	vpush	{d8}
 8005980:	ec57 6b10 	vmov	r6, r7, d0
 8005984:	b095      	sub	sp, #84	; 0x54
 8005986:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005988:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800598c:	9105      	str	r1, [sp, #20]
 800598e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005992:	4604      	mov	r4, r0
 8005994:	9209      	str	r2, [sp, #36]	; 0x24
 8005996:	930f      	str	r3, [sp, #60]	; 0x3c
 8005998:	b975      	cbnz	r5, 80059b8 <_dtoa_r+0x40>
 800599a:	2010      	movs	r0, #16
 800599c:	f7ff fa2c 	bl	8004df8 <malloc>
 80059a0:	4602      	mov	r2, r0
 80059a2:	6260      	str	r0, [r4, #36]	; 0x24
 80059a4:	b920      	cbnz	r0, 80059b0 <_dtoa_r+0x38>
 80059a6:	4bb2      	ldr	r3, [pc, #712]	; (8005c70 <_dtoa_r+0x2f8>)
 80059a8:	21ea      	movs	r1, #234	; 0xea
 80059aa:	48b2      	ldr	r0, [pc, #712]	; (8005c74 <_dtoa_r+0x2fc>)
 80059ac:	f001 f97c 	bl	8006ca8 <__assert_func>
 80059b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80059b4:	6005      	str	r5, [r0, #0]
 80059b6:	60c5      	str	r5, [r0, #12]
 80059b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059ba:	6819      	ldr	r1, [r3, #0]
 80059bc:	b151      	cbz	r1, 80059d4 <_dtoa_r+0x5c>
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	604a      	str	r2, [r1, #4]
 80059c2:	2301      	movs	r3, #1
 80059c4:	4093      	lsls	r3, r2
 80059c6:	608b      	str	r3, [r1, #8]
 80059c8:	4620      	mov	r0, r4
 80059ca:	f000 fe1f 	bl	800660c <_Bfree>
 80059ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	1e3b      	subs	r3, r7, #0
 80059d6:	bfb9      	ittee	lt
 80059d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80059dc:	9303      	strlt	r3, [sp, #12]
 80059de:	2300      	movge	r3, #0
 80059e0:	f8c8 3000 	strge.w	r3, [r8]
 80059e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80059e8:	4ba3      	ldr	r3, [pc, #652]	; (8005c78 <_dtoa_r+0x300>)
 80059ea:	bfbc      	itt	lt
 80059ec:	2201      	movlt	r2, #1
 80059ee:	f8c8 2000 	strlt.w	r2, [r8]
 80059f2:	ea33 0309 	bics.w	r3, r3, r9
 80059f6:	d11b      	bne.n	8005a30 <_dtoa_r+0xb8>
 80059f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a04:	4333      	orrs	r3, r6
 8005a06:	f000 857a 	beq.w	80064fe <_dtoa_r+0xb86>
 8005a0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a0c:	b963      	cbnz	r3, 8005a28 <_dtoa_r+0xb0>
 8005a0e:	4b9b      	ldr	r3, [pc, #620]	; (8005c7c <_dtoa_r+0x304>)
 8005a10:	e024      	b.n	8005a5c <_dtoa_r+0xe4>
 8005a12:	4b9b      	ldr	r3, [pc, #620]	; (8005c80 <_dtoa_r+0x308>)
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	3308      	adds	r3, #8
 8005a18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	9800      	ldr	r0, [sp, #0]
 8005a1e:	b015      	add	sp, #84	; 0x54
 8005a20:	ecbd 8b02 	vpop	{d8}
 8005a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a28:	4b94      	ldr	r3, [pc, #592]	; (8005c7c <_dtoa_r+0x304>)
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	3303      	adds	r3, #3
 8005a2e:	e7f3      	b.n	8005a18 <_dtoa_r+0xa0>
 8005a30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005a34:	2200      	movs	r2, #0
 8005a36:	ec51 0b17 	vmov	r0, r1, d7
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005a40:	f7fb f852 	bl	8000ae8 <__aeabi_dcmpeq>
 8005a44:	4680      	mov	r8, r0
 8005a46:	b158      	cbz	r0, 8005a60 <_dtoa_r+0xe8>
 8005a48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8551 	beq.w	80064f8 <_dtoa_r+0xb80>
 8005a56:	488b      	ldr	r0, [pc, #556]	; (8005c84 <_dtoa_r+0x30c>)
 8005a58:	6018      	str	r0, [r3, #0]
 8005a5a:	1e43      	subs	r3, r0, #1
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	e7dd      	b.n	8005a1c <_dtoa_r+0xa4>
 8005a60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005a64:	aa12      	add	r2, sp, #72	; 0x48
 8005a66:	a913      	add	r1, sp, #76	; 0x4c
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f001 f8b1 	bl	8006bd0 <__d2b>
 8005a6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005a72:	4683      	mov	fp, r0
 8005a74:	2d00      	cmp	r5, #0
 8005a76:	d07c      	beq.n	8005b72 <_dtoa_r+0x1fa>
 8005a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005a7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005a86:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005a8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005a8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a92:	4b7d      	ldr	r3, [pc, #500]	; (8005c88 <_dtoa_r+0x310>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	4630      	mov	r0, r6
 8005a98:	4639      	mov	r1, r7
 8005a9a:	f7fa fc05 	bl	80002a8 <__aeabi_dsub>
 8005a9e:	a36e      	add	r3, pc, #440	; (adr r3, 8005c58 <_dtoa_r+0x2e0>)
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	f7fa fdb8 	bl	8000618 <__aeabi_dmul>
 8005aa8:	a36d      	add	r3, pc, #436	; (adr r3, 8005c60 <_dtoa_r+0x2e8>)
 8005aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aae:	f7fa fbfd 	bl	80002ac <__adddf3>
 8005ab2:	4606      	mov	r6, r0
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	460f      	mov	r7, r1
 8005ab8:	f7fa fd44 	bl	8000544 <__aeabi_i2d>
 8005abc:	a36a      	add	r3, pc, #424	; (adr r3, 8005c68 <_dtoa_r+0x2f0>)
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	f7fa fda9 	bl	8000618 <__aeabi_dmul>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4630      	mov	r0, r6
 8005acc:	4639      	mov	r1, r7
 8005ace:	f7fa fbed 	bl	80002ac <__adddf3>
 8005ad2:	4606      	mov	r6, r0
 8005ad4:	460f      	mov	r7, r1
 8005ad6:	f7fb f84f 	bl	8000b78 <__aeabi_d2iz>
 8005ada:	2200      	movs	r2, #0
 8005adc:	4682      	mov	sl, r0
 8005ade:	2300      	movs	r3, #0
 8005ae0:	4630      	mov	r0, r6
 8005ae2:	4639      	mov	r1, r7
 8005ae4:	f7fb f80a 	bl	8000afc <__aeabi_dcmplt>
 8005ae8:	b148      	cbz	r0, 8005afe <_dtoa_r+0x186>
 8005aea:	4650      	mov	r0, sl
 8005aec:	f7fa fd2a 	bl	8000544 <__aeabi_i2d>
 8005af0:	4632      	mov	r2, r6
 8005af2:	463b      	mov	r3, r7
 8005af4:	f7fa fff8 	bl	8000ae8 <__aeabi_dcmpeq>
 8005af8:	b908      	cbnz	r0, 8005afe <_dtoa_r+0x186>
 8005afa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005afe:	f1ba 0f16 	cmp.w	sl, #22
 8005b02:	d854      	bhi.n	8005bae <_dtoa_r+0x236>
 8005b04:	4b61      	ldr	r3, [pc, #388]	; (8005c8c <_dtoa_r+0x314>)
 8005b06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b12:	f7fa fff3 	bl	8000afc <__aeabi_dcmplt>
 8005b16:	2800      	cmp	r0, #0
 8005b18:	d04b      	beq.n	8005bb2 <_dtoa_r+0x23a>
 8005b1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b1e:	2300      	movs	r3, #0
 8005b20:	930e      	str	r3, [sp, #56]	; 0x38
 8005b22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b24:	1b5d      	subs	r5, r3, r5
 8005b26:	1e6b      	subs	r3, r5, #1
 8005b28:	9304      	str	r3, [sp, #16]
 8005b2a:	bf43      	ittte	mi
 8005b2c:	2300      	movmi	r3, #0
 8005b2e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005b32:	9304      	strmi	r3, [sp, #16]
 8005b34:	f04f 0800 	movpl.w	r8, #0
 8005b38:	f1ba 0f00 	cmp.w	sl, #0
 8005b3c:	db3b      	blt.n	8005bb6 <_dtoa_r+0x23e>
 8005b3e:	9b04      	ldr	r3, [sp, #16]
 8005b40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005b44:	4453      	add	r3, sl
 8005b46:	9304      	str	r3, [sp, #16]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	9306      	str	r3, [sp, #24]
 8005b4c:	9b05      	ldr	r3, [sp, #20]
 8005b4e:	2b09      	cmp	r3, #9
 8005b50:	d869      	bhi.n	8005c26 <_dtoa_r+0x2ae>
 8005b52:	2b05      	cmp	r3, #5
 8005b54:	bfc4      	itt	gt
 8005b56:	3b04      	subgt	r3, #4
 8005b58:	9305      	strgt	r3, [sp, #20]
 8005b5a:	9b05      	ldr	r3, [sp, #20]
 8005b5c:	f1a3 0302 	sub.w	r3, r3, #2
 8005b60:	bfcc      	ite	gt
 8005b62:	2500      	movgt	r5, #0
 8005b64:	2501      	movle	r5, #1
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d869      	bhi.n	8005c3e <_dtoa_r+0x2c6>
 8005b6a:	e8df f003 	tbb	[pc, r3]
 8005b6e:	4e2c      	.short	0x4e2c
 8005b70:	5a4c      	.short	0x5a4c
 8005b72:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005b76:	441d      	add	r5, r3
 8005b78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	bfc1      	itttt	gt
 8005b80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b84:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005b88:	fa09 f303 	lslgt.w	r3, r9, r3
 8005b8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005b90:	bfda      	itte	le
 8005b92:	f1c3 0320 	rsble	r3, r3, #32
 8005b96:	fa06 f003 	lslle.w	r0, r6, r3
 8005b9a:	4318      	orrgt	r0, r3
 8005b9c:	f7fa fcc2 	bl	8000524 <__aeabi_ui2d>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005ba8:	3d01      	subs	r5, #1
 8005baa:	9310      	str	r3, [sp, #64]	; 0x40
 8005bac:	e771      	b.n	8005a92 <_dtoa_r+0x11a>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e7b6      	b.n	8005b20 <_dtoa_r+0x1a8>
 8005bb2:	900e      	str	r0, [sp, #56]	; 0x38
 8005bb4:	e7b5      	b.n	8005b22 <_dtoa_r+0x1aa>
 8005bb6:	f1ca 0300 	rsb	r3, sl, #0
 8005bba:	9306      	str	r3, [sp, #24]
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	eba8 080a 	sub.w	r8, r8, sl
 8005bc2:	930d      	str	r3, [sp, #52]	; 0x34
 8005bc4:	e7c2      	b.n	8005b4c <_dtoa_r+0x1d4>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	9308      	str	r3, [sp, #32]
 8005bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	dc39      	bgt.n	8005c44 <_dtoa_r+0x2cc>
 8005bd0:	f04f 0901 	mov.w	r9, #1
 8005bd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005bd8:	464b      	mov	r3, r9
 8005bda:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005bde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005be0:	2200      	movs	r2, #0
 8005be2:	6042      	str	r2, [r0, #4]
 8005be4:	2204      	movs	r2, #4
 8005be6:	f102 0614 	add.w	r6, r2, #20
 8005bea:	429e      	cmp	r6, r3
 8005bec:	6841      	ldr	r1, [r0, #4]
 8005bee:	d92f      	bls.n	8005c50 <_dtoa_r+0x2d8>
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f000 fccb 	bl	800658c <_Balloc>
 8005bf6:	9000      	str	r0, [sp, #0]
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d14b      	bne.n	8005c94 <_dtoa_r+0x31c>
 8005bfc:	4b24      	ldr	r3, [pc, #144]	; (8005c90 <_dtoa_r+0x318>)
 8005bfe:	4602      	mov	r2, r0
 8005c00:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005c04:	e6d1      	b.n	80059aa <_dtoa_r+0x32>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e7de      	b.n	8005bc8 <_dtoa_r+0x250>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	9308      	str	r3, [sp, #32]
 8005c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c10:	eb0a 0903 	add.w	r9, sl, r3
 8005c14:	f109 0301 	add.w	r3, r9, #1
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	bfb8      	it	lt
 8005c1e:	2301      	movlt	r3, #1
 8005c20:	e7dd      	b.n	8005bde <_dtoa_r+0x266>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e7f2      	b.n	8005c0c <_dtoa_r+0x294>
 8005c26:	2501      	movs	r5, #1
 8005c28:	2300      	movs	r3, #0
 8005c2a:	9305      	str	r3, [sp, #20]
 8005c2c:	9508      	str	r5, [sp, #32]
 8005c2e:	f04f 39ff 	mov.w	r9, #4294967295
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c38:	2312      	movs	r3, #18
 8005c3a:	9209      	str	r2, [sp, #36]	; 0x24
 8005c3c:	e7cf      	b.n	8005bde <_dtoa_r+0x266>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	9308      	str	r3, [sp, #32]
 8005c42:	e7f4      	b.n	8005c2e <_dtoa_r+0x2b6>
 8005c44:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005c48:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c4c:	464b      	mov	r3, r9
 8005c4e:	e7c6      	b.n	8005bde <_dtoa_r+0x266>
 8005c50:	3101      	adds	r1, #1
 8005c52:	6041      	str	r1, [r0, #4]
 8005c54:	0052      	lsls	r2, r2, #1
 8005c56:	e7c6      	b.n	8005be6 <_dtoa_r+0x26e>
 8005c58:	636f4361 	.word	0x636f4361
 8005c5c:	3fd287a7 	.word	0x3fd287a7
 8005c60:	8b60c8b3 	.word	0x8b60c8b3
 8005c64:	3fc68a28 	.word	0x3fc68a28
 8005c68:	509f79fb 	.word	0x509f79fb
 8005c6c:	3fd34413 	.word	0x3fd34413
 8005c70:	0800781d 	.word	0x0800781d
 8005c74:	08007834 	.word	0x08007834
 8005c78:	7ff00000 	.word	0x7ff00000
 8005c7c:	08007819 	.word	0x08007819
 8005c80:	08007810 	.word	0x08007810
 8005c84:	080077ed 	.word	0x080077ed
 8005c88:	3ff80000 	.word	0x3ff80000
 8005c8c:	08007930 	.word	0x08007930
 8005c90:	08007893 	.word	0x08007893
 8005c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c96:	9a00      	ldr	r2, [sp, #0]
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	9b01      	ldr	r3, [sp, #4]
 8005c9c:	2b0e      	cmp	r3, #14
 8005c9e:	f200 80ad 	bhi.w	8005dfc <_dtoa_r+0x484>
 8005ca2:	2d00      	cmp	r5, #0
 8005ca4:	f000 80aa 	beq.w	8005dfc <_dtoa_r+0x484>
 8005ca8:	f1ba 0f00 	cmp.w	sl, #0
 8005cac:	dd36      	ble.n	8005d1c <_dtoa_r+0x3a4>
 8005cae:	4ac3      	ldr	r2, [pc, #780]	; (8005fbc <_dtoa_r+0x644>)
 8005cb0:	f00a 030f 	and.w	r3, sl, #15
 8005cb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005cb8:	ed93 7b00 	vldr	d7, [r3]
 8005cbc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005cc0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005cc4:	eeb0 8a47 	vmov.f32	s16, s14
 8005cc8:	eef0 8a67 	vmov.f32	s17, s15
 8005ccc:	d016      	beq.n	8005cfc <_dtoa_r+0x384>
 8005cce:	4bbc      	ldr	r3, [pc, #752]	; (8005fc0 <_dtoa_r+0x648>)
 8005cd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005cd8:	f7fa fdc8 	bl	800086c <__aeabi_ddiv>
 8005cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ce0:	f007 070f 	and.w	r7, r7, #15
 8005ce4:	2503      	movs	r5, #3
 8005ce6:	4eb6      	ldr	r6, [pc, #728]	; (8005fc0 <_dtoa_r+0x648>)
 8005ce8:	b957      	cbnz	r7, 8005d00 <_dtoa_r+0x388>
 8005cea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cee:	ec53 2b18 	vmov	r2, r3, d8
 8005cf2:	f7fa fdbb 	bl	800086c <__aeabi_ddiv>
 8005cf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cfa:	e029      	b.n	8005d50 <_dtoa_r+0x3d8>
 8005cfc:	2502      	movs	r5, #2
 8005cfe:	e7f2      	b.n	8005ce6 <_dtoa_r+0x36e>
 8005d00:	07f9      	lsls	r1, r7, #31
 8005d02:	d508      	bpl.n	8005d16 <_dtoa_r+0x39e>
 8005d04:	ec51 0b18 	vmov	r0, r1, d8
 8005d08:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d0c:	f7fa fc84 	bl	8000618 <__aeabi_dmul>
 8005d10:	ec41 0b18 	vmov	d8, r0, r1
 8005d14:	3501      	adds	r5, #1
 8005d16:	107f      	asrs	r7, r7, #1
 8005d18:	3608      	adds	r6, #8
 8005d1a:	e7e5      	b.n	8005ce8 <_dtoa_r+0x370>
 8005d1c:	f000 80a6 	beq.w	8005e6c <_dtoa_r+0x4f4>
 8005d20:	f1ca 0600 	rsb	r6, sl, #0
 8005d24:	4ba5      	ldr	r3, [pc, #660]	; (8005fbc <_dtoa_r+0x644>)
 8005d26:	4fa6      	ldr	r7, [pc, #664]	; (8005fc0 <_dtoa_r+0x648>)
 8005d28:	f006 020f 	and.w	r2, r6, #15
 8005d2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d38:	f7fa fc6e 	bl	8000618 <__aeabi_dmul>
 8005d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d40:	1136      	asrs	r6, r6, #4
 8005d42:	2300      	movs	r3, #0
 8005d44:	2502      	movs	r5, #2
 8005d46:	2e00      	cmp	r6, #0
 8005d48:	f040 8085 	bne.w	8005e56 <_dtoa_r+0x4de>
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1d2      	bne.n	8005cf6 <_dtoa_r+0x37e>
 8005d50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 808c 	beq.w	8005e70 <_dtoa_r+0x4f8>
 8005d58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d5c:	4b99      	ldr	r3, [pc, #612]	; (8005fc4 <_dtoa_r+0x64c>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	4630      	mov	r0, r6
 8005d62:	4639      	mov	r1, r7
 8005d64:	f7fa feca 	bl	8000afc <__aeabi_dcmplt>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	f000 8081 	beq.w	8005e70 <_dtoa_r+0x4f8>
 8005d6e:	9b01      	ldr	r3, [sp, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d07d      	beq.n	8005e70 <_dtoa_r+0x4f8>
 8005d74:	f1b9 0f00 	cmp.w	r9, #0
 8005d78:	dd3c      	ble.n	8005df4 <_dtoa_r+0x47c>
 8005d7a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005d7e:	9307      	str	r3, [sp, #28]
 8005d80:	2200      	movs	r2, #0
 8005d82:	4b91      	ldr	r3, [pc, #580]	; (8005fc8 <_dtoa_r+0x650>)
 8005d84:	4630      	mov	r0, r6
 8005d86:	4639      	mov	r1, r7
 8005d88:	f7fa fc46 	bl	8000618 <__aeabi_dmul>
 8005d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d90:	3501      	adds	r5, #1
 8005d92:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005d96:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	f7fa fbd2 	bl	8000544 <__aeabi_i2d>
 8005da0:	4632      	mov	r2, r6
 8005da2:	463b      	mov	r3, r7
 8005da4:	f7fa fc38 	bl	8000618 <__aeabi_dmul>
 8005da8:	4b88      	ldr	r3, [pc, #544]	; (8005fcc <_dtoa_r+0x654>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	f7fa fa7e 	bl	80002ac <__adddf3>
 8005db0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005db4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005db8:	9303      	str	r3, [sp, #12]
 8005dba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d15c      	bne.n	8005e7a <_dtoa_r+0x502>
 8005dc0:	4b83      	ldr	r3, [pc, #524]	; (8005fd0 <_dtoa_r+0x658>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	4639      	mov	r1, r7
 8005dc8:	f7fa fa6e 	bl	80002a8 <__aeabi_dsub>
 8005dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dd0:	4606      	mov	r6, r0
 8005dd2:	460f      	mov	r7, r1
 8005dd4:	f7fa feb0 	bl	8000b38 <__aeabi_dcmpgt>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	f040 8296 	bne.w	800630a <_dtoa_r+0x992>
 8005dde:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005de2:	4630      	mov	r0, r6
 8005de4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005de8:	4639      	mov	r1, r7
 8005dea:	f7fa fe87 	bl	8000afc <__aeabi_dcmplt>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	f040 8288 	bne.w	8006304 <_dtoa_r+0x98c>
 8005df4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005df8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005dfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f2c0 8158 	blt.w	80060b4 <_dtoa_r+0x73c>
 8005e04:	f1ba 0f0e 	cmp.w	sl, #14
 8005e08:	f300 8154 	bgt.w	80060b4 <_dtoa_r+0x73c>
 8005e0c:	4b6b      	ldr	r3, [pc, #428]	; (8005fbc <_dtoa_r+0x644>)
 8005e0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e12:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f280 80e3 	bge.w	8005fe4 <_dtoa_r+0x66c>
 8005e1e:	9b01      	ldr	r3, [sp, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f300 80df 	bgt.w	8005fe4 <_dtoa_r+0x66c>
 8005e26:	f040 826d 	bne.w	8006304 <_dtoa_r+0x98c>
 8005e2a:	4b69      	ldr	r3, [pc, #420]	; (8005fd0 <_dtoa_r+0x658>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	4640      	mov	r0, r8
 8005e30:	4649      	mov	r1, r9
 8005e32:	f7fa fbf1 	bl	8000618 <__aeabi_dmul>
 8005e36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e3a:	f7fa fe73 	bl	8000b24 <__aeabi_dcmpge>
 8005e3e:	9e01      	ldr	r6, [sp, #4]
 8005e40:	4637      	mov	r7, r6
 8005e42:	2800      	cmp	r0, #0
 8005e44:	f040 8243 	bne.w	80062ce <_dtoa_r+0x956>
 8005e48:	9d00      	ldr	r5, [sp, #0]
 8005e4a:	2331      	movs	r3, #49	; 0x31
 8005e4c:	f805 3b01 	strb.w	r3, [r5], #1
 8005e50:	f10a 0a01 	add.w	sl, sl, #1
 8005e54:	e23f      	b.n	80062d6 <_dtoa_r+0x95e>
 8005e56:	07f2      	lsls	r2, r6, #31
 8005e58:	d505      	bpl.n	8005e66 <_dtoa_r+0x4ee>
 8005e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e5e:	f7fa fbdb 	bl	8000618 <__aeabi_dmul>
 8005e62:	3501      	adds	r5, #1
 8005e64:	2301      	movs	r3, #1
 8005e66:	1076      	asrs	r6, r6, #1
 8005e68:	3708      	adds	r7, #8
 8005e6a:	e76c      	b.n	8005d46 <_dtoa_r+0x3ce>
 8005e6c:	2502      	movs	r5, #2
 8005e6e:	e76f      	b.n	8005d50 <_dtoa_r+0x3d8>
 8005e70:	9b01      	ldr	r3, [sp, #4]
 8005e72:	f8cd a01c 	str.w	sl, [sp, #28]
 8005e76:	930c      	str	r3, [sp, #48]	; 0x30
 8005e78:	e78d      	b.n	8005d96 <_dtoa_r+0x41e>
 8005e7a:	9900      	ldr	r1, [sp, #0]
 8005e7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005e7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e80:	4b4e      	ldr	r3, [pc, #312]	; (8005fbc <_dtoa_r+0x644>)
 8005e82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e86:	4401      	add	r1, r0
 8005e88:	9102      	str	r1, [sp, #8]
 8005e8a:	9908      	ldr	r1, [sp, #32]
 8005e8c:	eeb0 8a47 	vmov.f32	s16, s14
 8005e90:	eef0 8a67 	vmov.f32	s17, s15
 8005e94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e9c:	2900      	cmp	r1, #0
 8005e9e:	d045      	beq.n	8005f2c <_dtoa_r+0x5b4>
 8005ea0:	494c      	ldr	r1, [pc, #304]	; (8005fd4 <_dtoa_r+0x65c>)
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	f7fa fce2 	bl	800086c <__aeabi_ddiv>
 8005ea8:	ec53 2b18 	vmov	r2, r3, d8
 8005eac:	f7fa f9fc 	bl	80002a8 <__aeabi_dsub>
 8005eb0:	9d00      	ldr	r5, [sp, #0]
 8005eb2:	ec41 0b18 	vmov	d8, r0, r1
 8005eb6:	4639      	mov	r1, r7
 8005eb8:	4630      	mov	r0, r6
 8005eba:	f7fa fe5d 	bl	8000b78 <__aeabi_d2iz>
 8005ebe:	900c      	str	r0, [sp, #48]	; 0x30
 8005ec0:	f7fa fb40 	bl	8000544 <__aeabi_i2d>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4630      	mov	r0, r6
 8005eca:	4639      	mov	r1, r7
 8005ecc:	f7fa f9ec 	bl	80002a8 <__aeabi_dsub>
 8005ed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ed2:	3330      	adds	r3, #48	; 0x30
 8005ed4:	f805 3b01 	strb.w	r3, [r5], #1
 8005ed8:	ec53 2b18 	vmov	r2, r3, d8
 8005edc:	4606      	mov	r6, r0
 8005ede:	460f      	mov	r7, r1
 8005ee0:	f7fa fe0c 	bl	8000afc <__aeabi_dcmplt>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d165      	bne.n	8005fb4 <_dtoa_r+0x63c>
 8005ee8:	4632      	mov	r2, r6
 8005eea:	463b      	mov	r3, r7
 8005eec:	4935      	ldr	r1, [pc, #212]	; (8005fc4 <_dtoa_r+0x64c>)
 8005eee:	2000      	movs	r0, #0
 8005ef0:	f7fa f9da 	bl	80002a8 <__aeabi_dsub>
 8005ef4:	ec53 2b18 	vmov	r2, r3, d8
 8005ef8:	f7fa fe00 	bl	8000afc <__aeabi_dcmplt>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	f040 80b9 	bne.w	8006074 <_dtoa_r+0x6fc>
 8005f02:	9b02      	ldr	r3, [sp, #8]
 8005f04:	429d      	cmp	r5, r3
 8005f06:	f43f af75 	beq.w	8005df4 <_dtoa_r+0x47c>
 8005f0a:	4b2f      	ldr	r3, [pc, #188]	; (8005fc8 <_dtoa_r+0x650>)
 8005f0c:	ec51 0b18 	vmov	r0, r1, d8
 8005f10:	2200      	movs	r2, #0
 8005f12:	f7fa fb81 	bl	8000618 <__aeabi_dmul>
 8005f16:	4b2c      	ldr	r3, [pc, #176]	; (8005fc8 <_dtoa_r+0x650>)
 8005f18:	ec41 0b18 	vmov	d8, r0, r1
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	4630      	mov	r0, r6
 8005f20:	4639      	mov	r1, r7
 8005f22:	f7fa fb79 	bl	8000618 <__aeabi_dmul>
 8005f26:	4606      	mov	r6, r0
 8005f28:	460f      	mov	r7, r1
 8005f2a:	e7c4      	b.n	8005eb6 <_dtoa_r+0x53e>
 8005f2c:	ec51 0b17 	vmov	r0, r1, d7
 8005f30:	f7fa fb72 	bl	8000618 <__aeabi_dmul>
 8005f34:	9b02      	ldr	r3, [sp, #8]
 8005f36:	9d00      	ldr	r5, [sp, #0]
 8005f38:	930c      	str	r3, [sp, #48]	; 0x30
 8005f3a:	ec41 0b18 	vmov	d8, r0, r1
 8005f3e:	4639      	mov	r1, r7
 8005f40:	4630      	mov	r0, r6
 8005f42:	f7fa fe19 	bl	8000b78 <__aeabi_d2iz>
 8005f46:	9011      	str	r0, [sp, #68]	; 0x44
 8005f48:	f7fa fafc 	bl	8000544 <__aeabi_i2d>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4630      	mov	r0, r6
 8005f52:	4639      	mov	r1, r7
 8005f54:	f7fa f9a8 	bl	80002a8 <__aeabi_dsub>
 8005f58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f5a:	3330      	adds	r3, #48	; 0x30
 8005f5c:	f805 3b01 	strb.w	r3, [r5], #1
 8005f60:	9b02      	ldr	r3, [sp, #8]
 8005f62:	429d      	cmp	r5, r3
 8005f64:	4606      	mov	r6, r0
 8005f66:	460f      	mov	r7, r1
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	d134      	bne.n	8005fd8 <_dtoa_r+0x660>
 8005f6e:	4b19      	ldr	r3, [pc, #100]	; (8005fd4 <_dtoa_r+0x65c>)
 8005f70:	ec51 0b18 	vmov	r0, r1, d8
 8005f74:	f7fa f99a 	bl	80002ac <__adddf3>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	4639      	mov	r1, r7
 8005f80:	f7fa fdda 	bl	8000b38 <__aeabi_dcmpgt>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d175      	bne.n	8006074 <_dtoa_r+0x6fc>
 8005f88:	ec53 2b18 	vmov	r2, r3, d8
 8005f8c:	4911      	ldr	r1, [pc, #68]	; (8005fd4 <_dtoa_r+0x65c>)
 8005f8e:	2000      	movs	r0, #0
 8005f90:	f7fa f98a 	bl	80002a8 <__aeabi_dsub>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4630      	mov	r0, r6
 8005f9a:	4639      	mov	r1, r7
 8005f9c:	f7fa fdae 	bl	8000afc <__aeabi_dcmplt>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	f43f af27 	beq.w	8005df4 <_dtoa_r+0x47c>
 8005fa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fa8:	1e6b      	subs	r3, r5, #1
 8005faa:	930c      	str	r3, [sp, #48]	; 0x30
 8005fac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005fb0:	2b30      	cmp	r3, #48	; 0x30
 8005fb2:	d0f8      	beq.n	8005fa6 <_dtoa_r+0x62e>
 8005fb4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005fb8:	e04a      	b.n	8006050 <_dtoa_r+0x6d8>
 8005fba:	bf00      	nop
 8005fbc:	08007930 	.word	0x08007930
 8005fc0:	08007908 	.word	0x08007908
 8005fc4:	3ff00000 	.word	0x3ff00000
 8005fc8:	40240000 	.word	0x40240000
 8005fcc:	401c0000 	.word	0x401c0000
 8005fd0:	40140000 	.word	0x40140000
 8005fd4:	3fe00000 	.word	0x3fe00000
 8005fd8:	4baf      	ldr	r3, [pc, #700]	; (8006298 <_dtoa_r+0x920>)
 8005fda:	f7fa fb1d 	bl	8000618 <__aeabi_dmul>
 8005fde:	4606      	mov	r6, r0
 8005fe0:	460f      	mov	r7, r1
 8005fe2:	e7ac      	b.n	8005f3e <_dtoa_r+0x5c6>
 8005fe4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005fe8:	9d00      	ldr	r5, [sp, #0]
 8005fea:	4642      	mov	r2, r8
 8005fec:	464b      	mov	r3, r9
 8005fee:	4630      	mov	r0, r6
 8005ff0:	4639      	mov	r1, r7
 8005ff2:	f7fa fc3b 	bl	800086c <__aeabi_ddiv>
 8005ff6:	f7fa fdbf 	bl	8000b78 <__aeabi_d2iz>
 8005ffa:	9002      	str	r0, [sp, #8]
 8005ffc:	f7fa faa2 	bl	8000544 <__aeabi_i2d>
 8006000:	4642      	mov	r2, r8
 8006002:	464b      	mov	r3, r9
 8006004:	f7fa fb08 	bl	8000618 <__aeabi_dmul>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4630      	mov	r0, r6
 800600e:	4639      	mov	r1, r7
 8006010:	f7fa f94a 	bl	80002a8 <__aeabi_dsub>
 8006014:	9e02      	ldr	r6, [sp, #8]
 8006016:	9f01      	ldr	r7, [sp, #4]
 8006018:	3630      	adds	r6, #48	; 0x30
 800601a:	f805 6b01 	strb.w	r6, [r5], #1
 800601e:	9e00      	ldr	r6, [sp, #0]
 8006020:	1bae      	subs	r6, r5, r6
 8006022:	42b7      	cmp	r7, r6
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	d137      	bne.n	800609a <_dtoa_r+0x722>
 800602a:	f7fa f93f 	bl	80002ac <__adddf3>
 800602e:	4642      	mov	r2, r8
 8006030:	464b      	mov	r3, r9
 8006032:	4606      	mov	r6, r0
 8006034:	460f      	mov	r7, r1
 8006036:	f7fa fd7f 	bl	8000b38 <__aeabi_dcmpgt>
 800603a:	b9c8      	cbnz	r0, 8006070 <_dtoa_r+0x6f8>
 800603c:	4642      	mov	r2, r8
 800603e:	464b      	mov	r3, r9
 8006040:	4630      	mov	r0, r6
 8006042:	4639      	mov	r1, r7
 8006044:	f7fa fd50 	bl	8000ae8 <__aeabi_dcmpeq>
 8006048:	b110      	cbz	r0, 8006050 <_dtoa_r+0x6d8>
 800604a:	9b02      	ldr	r3, [sp, #8]
 800604c:	07d9      	lsls	r1, r3, #31
 800604e:	d40f      	bmi.n	8006070 <_dtoa_r+0x6f8>
 8006050:	4620      	mov	r0, r4
 8006052:	4659      	mov	r1, fp
 8006054:	f000 fada 	bl	800660c <_Bfree>
 8006058:	2300      	movs	r3, #0
 800605a:	702b      	strb	r3, [r5, #0]
 800605c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800605e:	f10a 0001 	add.w	r0, sl, #1
 8006062:	6018      	str	r0, [r3, #0]
 8006064:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006066:	2b00      	cmp	r3, #0
 8006068:	f43f acd8 	beq.w	8005a1c <_dtoa_r+0xa4>
 800606c:	601d      	str	r5, [r3, #0]
 800606e:	e4d5      	b.n	8005a1c <_dtoa_r+0xa4>
 8006070:	f8cd a01c 	str.w	sl, [sp, #28]
 8006074:	462b      	mov	r3, r5
 8006076:	461d      	mov	r5, r3
 8006078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800607c:	2a39      	cmp	r2, #57	; 0x39
 800607e:	d108      	bne.n	8006092 <_dtoa_r+0x71a>
 8006080:	9a00      	ldr	r2, [sp, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d1f7      	bne.n	8006076 <_dtoa_r+0x6fe>
 8006086:	9a07      	ldr	r2, [sp, #28]
 8006088:	9900      	ldr	r1, [sp, #0]
 800608a:	3201      	adds	r2, #1
 800608c:	9207      	str	r2, [sp, #28]
 800608e:	2230      	movs	r2, #48	; 0x30
 8006090:	700a      	strb	r2, [r1, #0]
 8006092:	781a      	ldrb	r2, [r3, #0]
 8006094:	3201      	adds	r2, #1
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	e78c      	b.n	8005fb4 <_dtoa_r+0x63c>
 800609a:	4b7f      	ldr	r3, [pc, #508]	; (8006298 <_dtoa_r+0x920>)
 800609c:	2200      	movs	r2, #0
 800609e:	f7fa fabb 	bl	8000618 <__aeabi_dmul>
 80060a2:	2200      	movs	r2, #0
 80060a4:	2300      	movs	r3, #0
 80060a6:	4606      	mov	r6, r0
 80060a8:	460f      	mov	r7, r1
 80060aa:	f7fa fd1d 	bl	8000ae8 <__aeabi_dcmpeq>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d09b      	beq.n	8005fea <_dtoa_r+0x672>
 80060b2:	e7cd      	b.n	8006050 <_dtoa_r+0x6d8>
 80060b4:	9a08      	ldr	r2, [sp, #32]
 80060b6:	2a00      	cmp	r2, #0
 80060b8:	f000 80c4 	beq.w	8006244 <_dtoa_r+0x8cc>
 80060bc:	9a05      	ldr	r2, [sp, #20]
 80060be:	2a01      	cmp	r2, #1
 80060c0:	f300 80a8 	bgt.w	8006214 <_dtoa_r+0x89c>
 80060c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	f000 80a0 	beq.w	800620c <_dtoa_r+0x894>
 80060cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80060d0:	9e06      	ldr	r6, [sp, #24]
 80060d2:	4645      	mov	r5, r8
 80060d4:	9a04      	ldr	r2, [sp, #16]
 80060d6:	2101      	movs	r1, #1
 80060d8:	441a      	add	r2, r3
 80060da:	4620      	mov	r0, r4
 80060dc:	4498      	add	r8, r3
 80060de:	9204      	str	r2, [sp, #16]
 80060e0:	f000 fb50 	bl	8006784 <__i2b>
 80060e4:	4607      	mov	r7, r0
 80060e6:	2d00      	cmp	r5, #0
 80060e8:	dd0b      	ble.n	8006102 <_dtoa_r+0x78a>
 80060ea:	9b04      	ldr	r3, [sp, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	dd08      	ble.n	8006102 <_dtoa_r+0x78a>
 80060f0:	42ab      	cmp	r3, r5
 80060f2:	9a04      	ldr	r2, [sp, #16]
 80060f4:	bfa8      	it	ge
 80060f6:	462b      	movge	r3, r5
 80060f8:	eba8 0803 	sub.w	r8, r8, r3
 80060fc:	1aed      	subs	r5, r5, r3
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	9304      	str	r3, [sp, #16]
 8006102:	9b06      	ldr	r3, [sp, #24]
 8006104:	b1fb      	cbz	r3, 8006146 <_dtoa_r+0x7ce>
 8006106:	9b08      	ldr	r3, [sp, #32]
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 809f 	beq.w	800624c <_dtoa_r+0x8d4>
 800610e:	2e00      	cmp	r6, #0
 8006110:	dd11      	ble.n	8006136 <_dtoa_r+0x7be>
 8006112:	4639      	mov	r1, r7
 8006114:	4632      	mov	r2, r6
 8006116:	4620      	mov	r0, r4
 8006118:	f000 fbf0 	bl	80068fc <__pow5mult>
 800611c:	465a      	mov	r2, fp
 800611e:	4601      	mov	r1, r0
 8006120:	4607      	mov	r7, r0
 8006122:	4620      	mov	r0, r4
 8006124:	f000 fb44 	bl	80067b0 <__multiply>
 8006128:	4659      	mov	r1, fp
 800612a:	9007      	str	r0, [sp, #28]
 800612c:	4620      	mov	r0, r4
 800612e:	f000 fa6d 	bl	800660c <_Bfree>
 8006132:	9b07      	ldr	r3, [sp, #28]
 8006134:	469b      	mov	fp, r3
 8006136:	9b06      	ldr	r3, [sp, #24]
 8006138:	1b9a      	subs	r2, r3, r6
 800613a:	d004      	beq.n	8006146 <_dtoa_r+0x7ce>
 800613c:	4659      	mov	r1, fp
 800613e:	4620      	mov	r0, r4
 8006140:	f000 fbdc 	bl	80068fc <__pow5mult>
 8006144:	4683      	mov	fp, r0
 8006146:	2101      	movs	r1, #1
 8006148:	4620      	mov	r0, r4
 800614a:	f000 fb1b 	bl	8006784 <__i2b>
 800614e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006150:	2b00      	cmp	r3, #0
 8006152:	4606      	mov	r6, r0
 8006154:	dd7c      	ble.n	8006250 <_dtoa_r+0x8d8>
 8006156:	461a      	mov	r2, r3
 8006158:	4601      	mov	r1, r0
 800615a:	4620      	mov	r0, r4
 800615c:	f000 fbce 	bl	80068fc <__pow5mult>
 8006160:	9b05      	ldr	r3, [sp, #20]
 8006162:	2b01      	cmp	r3, #1
 8006164:	4606      	mov	r6, r0
 8006166:	dd76      	ble.n	8006256 <_dtoa_r+0x8de>
 8006168:	2300      	movs	r3, #0
 800616a:	9306      	str	r3, [sp, #24]
 800616c:	6933      	ldr	r3, [r6, #16]
 800616e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006172:	6918      	ldr	r0, [r3, #16]
 8006174:	f000 fab6 	bl	80066e4 <__hi0bits>
 8006178:	f1c0 0020 	rsb	r0, r0, #32
 800617c:	9b04      	ldr	r3, [sp, #16]
 800617e:	4418      	add	r0, r3
 8006180:	f010 001f 	ands.w	r0, r0, #31
 8006184:	f000 8086 	beq.w	8006294 <_dtoa_r+0x91c>
 8006188:	f1c0 0320 	rsb	r3, r0, #32
 800618c:	2b04      	cmp	r3, #4
 800618e:	dd7f      	ble.n	8006290 <_dtoa_r+0x918>
 8006190:	f1c0 001c 	rsb	r0, r0, #28
 8006194:	9b04      	ldr	r3, [sp, #16]
 8006196:	4403      	add	r3, r0
 8006198:	4480      	add	r8, r0
 800619a:	4405      	add	r5, r0
 800619c:	9304      	str	r3, [sp, #16]
 800619e:	f1b8 0f00 	cmp.w	r8, #0
 80061a2:	dd05      	ble.n	80061b0 <_dtoa_r+0x838>
 80061a4:	4659      	mov	r1, fp
 80061a6:	4642      	mov	r2, r8
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 fc01 	bl	80069b0 <__lshift>
 80061ae:	4683      	mov	fp, r0
 80061b0:	9b04      	ldr	r3, [sp, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	dd05      	ble.n	80061c2 <_dtoa_r+0x84a>
 80061b6:	4631      	mov	r1, r6
 80061b8:	461a      	mov	r2, r3
 80061ba:	4620      	mov	r0, r4
 80061bc:	f000 fbf8 	bl	80069b0 <__lshift>
 80061c0:	4606      	mov	r6, r0
 80061c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d069      	beq.n	800629c <_dtoa_r+0x924>
 80061c8:	4631      	mov	r1, r6
 80061ca:	4658      	mov	r0, fp
 80061cc:	f000 fc5c 	bl	8006a88 <__mcmp>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	da63      	bge.n	800629c <_dtoa_r+0x924>
 80061d4:	2300      	movs	r3, #0
 80061d6:	4659      	mov	r1, fp
 80061d8:	220a      	movs	r2, #10
 80061da:	4620      	mov	r0, r4
 80061dc:	f000 fa38 	bl	8006650 <__multadd>
 80061e0:	9b08      	ldr	r3, [sp, #32]
 80061e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061e6:	4683      	mov	fp, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f000 818f 	beq.w	800650c <_dtoa_r+0xb94>
 80061ee:	4639      	mov	r1, r7
 80061f0:	2300      	movs	r3, #0
 80061f2:	220a      	movs	r2, #10
 80061f4:	4620      	mov	r0, r4
 80061f6:	f000 fa2b 	bl	8006650 <__multadd>
 80061fa:	f1b9 0f00 	cmp.w	r9, #0
 80061fe:	4607      	mov	r7, r0
 8006200:	f300 808e 	bgt.w	8006320 <_dtoa_r+0x9a8>
 8006204:	9b05      	ldr	r3, [sp, #20]
 8006206:	2b02      	cmp	r3, #2
 8006208:	dc50      	bgt.n	80062ac <_dtoa_r+0x934>
 800620a:	e089      	b.n	8006320 <_dtoa_r+0x9a8>
 800620c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800620e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006212:	e75d      	b.n	80060d0 <_dtoa_r+0x758>
 8006214:	9b01      	ldr	r3, [sp, #4]
 8006216:	1e5e      	subs	r6, r3, #1
 8006218:	9b06      	ldr	r3, [sp, #24]
 800621a:	42b3      	cmp	r3, r6
 800621c:	bfbf      	itttt	lt
 800621e:	9b06      	ldrlt	r3, [sp, #24]
 8006220:	9606      	strlt	r6, [sp, #24]
 8006222:	1af2      	sublt	r2, r6, r3
 8006224:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006226:	bfb6      	itet	lt
 8006228:	189b      	addlt	r3, r3, r2
 800622a:	1b9e      	subge	r6, r3, r6
 800622c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800622e:	9b01      	ldr	r3, [sp, #4]
 8006230:	bfb8      	it	lt
 8006232:	2600      	movlt	r6, #0
 8006234:	2b00      	cmp	r3, #0
 8006236:	bfb5      	itete	lt
 8006238:	eba8 0503 	sublt.w	r5, r8, r3
 800623c:	9b01      	ldrge	r3, [sp, #4]
 800623e:	2300      	movlt	r3, #0
 8006240:	4645      	movge	r5, r8
 8006242:	e747      	b.n	80060d4 <_dtoa_r+0x75c>
 8006244:	9e06      	ldr	r6, [sp, #24]
 8006246:	9f08      	ldr	r7, [sp, #32]
 8006248:	4645      	mov	r5, r8
 800624a:	e74c      	b.n	80060e6 <_dtoa_r+0x76e>
 800624c:	9a06      	ldr	r2, [sp, #24]
 800624e:	e775      	b.n	800613c <_dtoa_r+0x7c4>
 8006250:	9b05      	ldr	r3, [sp, #20]
 8006252:	2b01      	cmp	r3, #1
 8006254:	dc18      	bgt.n	8006288 <_dtoa_r+0x910>
 8006256:	9b02      	ldr	r3, [sp, #8]
 8006258:	b9b3      	cbnz	r3, 8006288 <_dtoa_r+0x910>
 800625a:	9b03      	ldr	r3, [sp, #12]
 800625c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006260:	b9a3      	cbnz	r3, 800628c <_dtoa_r+0x914>
 8006262:	9b03      	ldr	r3, [sp, #12]
 8006264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006268:	0d1b      	lsrs	r3, r3, #20
 800626a:	051b      	lsls	r3, r3, #20
 800626c:	b12b      	cbz	r3, 800627a <_dtoa_r+0x902>
 800626e:	9b04      	ldr	r3, [sp, #16]
 8006270:	3301      	adds	r3, #1
 8006272:	9304      	str	r3, [sp, #16]
 8006274:	f108 0801 	add.w	r8, r8, #1
 8006278:	2301      	movs	r3, #1
 800627a:	9306      	str	r3, [sp, #24]
 800627c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800627e:	2b00      	cmp	r3, #0
 8006280:	f47f af74 	bne.w	800616c <_dtoa_r+0x7f4>
 8006284:	2001      	movs	r0, #1
 8006286:	e779      	b.n	800617c <_dtoa_r+0x804>
 8006288:	2300      	movs	r3, #0
 800628a:	e7f6      	b.n	800627a <_dtoa_r+0x902>
 800628c:	9b02      	ldr	r3, [sp, #8]
 800628e:	e7f4      	b.n	800627a <_dtoa_r+0x902>
 8006290:	d085      	beq.n	800619e <_dtoa_r+0x826>
 8006292:	4618      	mov	r0, r3
 8006294:	301c      	adds	r0, #28
 8006296:	e77d      	b.n	8006194 <_dtoa_r+0x81c>
 8006298:	40240000 	.word	0x40240000
 800629c:	9b01      	ldr	r3, [sp, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	dc38      	bgt.n	8006314 <_dtoa_r+0x99c>
 80062a2:	9b05      	ldr	r3, [sp, #20]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	dd35      	ble.n	8006314 <_dtoa_r+0x99c>
 80062a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80062ac:	f1b9 0f00 	cmp.w	r9, #0
 80062b0:	d10d      	bne.n	80062ce <_dtoa_r+0x956>
 80062b2:	4631      	mov	r1, r6
 80062b4:	464b      	mov	r3, r9
 80062b6:	2205      	movs	r2, #5
 80062b8:	4620      	mov	r0, r4
 80062ba:	f000 f9c9 	bl	8006650 <__multadd>
 80062be:	4601      	mov	r1, r0
 80062c0:	4606      	mov	r6, r0
 80062c2:	4658      	mov	r0, fp
 80062c4:	f000 fbe0 	bl	8006a88 <__mcmp>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	f73f adbd 	bgt.w	8005e48 <_dtoa_r+0x4d0>
 80062ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d0:	9d00      	ldr	r5, [sp, #0]
 80062d2:	ea6f 0a03 	mvn.w	sl, r3
 80062d6:	f04f 0800 	mov.w	r8, #0
 80062da:	4631      	mov	r1, r6
 80062dc:	4620      	mov	r0, r4
 80062de:	f000 f995 	bl	800660c <_Bfree>
 80062e2:	2f00      	cmp	r7, #0
 80062e4:	f43f aeb4 	beq.w	8006050 <_dtoa_r+0x6d8>
 80062e8:	f1b8 0f00 	cmp.w	r8, #0
 80062ec:	d005      	beq.n	80062fa <_dtoa_r+0x982>
 80062ee:	45b8      	cmp	r8, r7
 80062f0:	d003      	beq.n	80062fa <_dtoa_r+0x982>
 80062f2:	4641      	mov	r1, r8
 80062f4:	4620      	mov	r0, r4
 80062f6:	f000 f989 	bl	800660c <_Bfree>
 80062fa:	4639      	mov	r1, r7
 80062fc:	4620      	mov	r0, r4
 80062fe:	f000 f985 	bl	800660c <_Bfree>
 8006302:	e6a5      	b.n	8006050 <_dtoa_r+0x6d8>
 8006304:	2600      	movs	r6, #0
 8006306:	4637      	mov	r7, r6
 8006308:	e7e1      	b.n	80062ce <_dtoa_r+0x956>
 800630a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800630c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006310:	4637      	mov	r7, r6
 8006312:	e599      	b.n	8005e48 <_dtoa_r+0x4d0>
 8006314:	9b08      	ldr	r3, [sp, #32]
 8006316:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 80fd 	beq.w	800651a <_dtoa_r+0xba2>
 8006320:	2d00      	cmp	r5, #0
 8006322:	dd05      	ble.n	8006330 <_dtoa_r+0x9b8>
 8006324:	4639      	mov	r1, r7
 8006326:	462a      	mov	r2, r5
 8006328:	4620      	mov	r0, r4
 800632a:	f000 fb41 	bl	80069b0 <__lshift>
 800632e:	4607      	mov	r7, r0
 8006330:	9b06      	ldr	r3, [sp, #24]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d05c      	beq.n	80063f0 <_dtoa_r+0xa78>
 8006336:	6879      	ldr	r1, [r7, #4]
 8006338:	4620      	mov	r0, r4
 800633a:	f000 f927 	bl	800658c <_Balloc>
 800633e:	4605      	mov	r5, r0
 8006340:	b928      	cbnz	r0, 800634e <_dtoa_r+0x9d6>
 8006342:	4b80      	ldr	r3, [pc, #512]	; (8006544 <_dtoa_r+0xbcc>)
 8006344:	4602      	mov	r2, r0
 8006346:	f240 21ea 	movw	r1, #746	; 0x2ea
 800634a:	f7ff bb2e 	b.w	80059aa <_dtoa_r+0x32>
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	3202      	adds	r2, #2
 8006352:	0092      	lsls	r2, r2, #2
 8006354:	f107 010c 	add.w	r1, r7, #12
 8006358:	300c      	adds	r0, #12
 800635a:	f000 f8fd 	bl	8006558 <memcpy>
 800635e:	2201      	movs	r2, #1
 8006360:	4629      	mov	r1, r5
 8006362:	4620      	mov	r0, r4
 8006364:	f000 fb24 	bl	80069b0 <__lshift>
 8006368:	9b00      	ldr	r3, [sp, #0]
 800636a:	3301      	adds	r3, #1
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	9b00      	ldr	r3, [sp, #0]
 8006370:	444b      	add	r3, r9
 8006372:	9307      	str	r3, [sp, #28]
 8006374:	9b02      	ldr	r3, [sp, #8]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	46b8      	mov	r8, r7
 800637c:	9306      	str	r3, [sp, #24]
 800637e:	4607      	mov	r7, r0
 8006380:	9b01      	ldr	r3, [sp, #4]
 8006382:	4631      	mov	r1, r6
 8006384:	3b01      	subs	r3, #1
 8006386:	4658      	mov	r0, fp
 8006388:	9302      	str	r3, [sp, #8]
 800638a:	f7ff fa69 	bl	8005860 <quorem>
 800638e:	4603      	mov	r3, r0
 8006390:	3330      	adds	r3, #48	; 0x30
 8006392:	9004      	str	r0, [sp, #16]
 8006394:	4641      	mov	r1, r8
 8006396:	4658      	mov	r0, fp
 8006398:	9308      	str	r3, [sp, #32]
 800639a:	f000 fb75 	bl	8006a88 <__mcmp>
 800639e:	463a      	mov	r2, r7
 80063a0:	4681      	mov	r9, r0
 80063a2:	4631      	mov	r1, r6
 80063a4:	4620      	mov	r0, r4
 80063a6:	f000 fb8b 	bl	8006ac0 <__mdiff>
 80063aa:	68c2      	ldr	r2, [r0, #12]
 80063ac:	9b08      	ldr	r3, [sp, #32]
 80063ae:	4605      	mov	r5, r0
 80063b0:	bb02      	cbnz	r2, 80063f4 <_dtoa_r+0xa7c>
 80063b2:	4601      	mov	r1, r0
 80063b4:	4658      	mov	r0, fp
 80063b6:	f000 fb67 	bl	8006a88 <__mcmp>
 80063ba:	9b08      	ldr	r3, [sp, #32]
 80063bc:	4602      	mov	r2, r0
 80063be:	4629      	mov	r1, r5
 80063c0:	4620      	mov	r0, r4
 80063c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80063c6:	f000 f921 	bl	800660c <_Bfree>
 80063ca:	9b05      	ldr	r3, [sp, #20]
 80063cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063ce:	9d01      	ldr	r5, [sp, #4]
 80063d0:	ea43 0102 	orr.w	r1, r3, r2
 80063d4:	9b06      	ldr	r3, [sp, #24]
 80063d6:	430b      	orrs	r3, r1
 80063d8:	9b08      	ldr	r3, [sp, #32]
 80063da:	d10d      	bne.n	80063f8 <_dtoa_r+0xa80>
 80063dc:	2b39      	cmp	r3, #57	; 0x39
 80063de:	d029      	beq.n	8006434 <_dtoa_r+0xabc>
 80063e0:	f1b9 0f00 	cmp.w	r9, #0
 80063e4:	dd01      	ble.n	80063ea <_dtoa_r+0xa72>
 80063e6:	9b04      	ldr	r3, [sp, #16]
 80063e8:	3331      	adds	r3, #49	; 0x31
 80063ea:	9a02      	ldr	r2, [sp, #8]
 80063ec:	7013      	strb	r3, [r2, #0]
 80063ee:	e774      	b.n	80062da <_dtoa_r+0x962>
 80063f0:	4638      	mov	r0, r7
 80063f2:	e7b9      	b.n	8006368 <_dtoa_r+0x9f0>
 80063f4:	2201      	movs	r2, #1
 80063f6:	e7e2      	b.n	80063be <_dtoa_r+0xa46>
 80063f8:	f1b9 0f00 	cmp.w	r9, #0
 80063fc:	db06      	blt.n	800640c <_dtoa_r+0xa94>
 80063fe:	9905      	ldr	r1, [sp, #20]
 8006400:	ea41 0909 	orr.w	r9, r1, r9
 8006404:	9906      	ldr	r1, [sp, #24]
 8006406:	ea59 0101 	orrs.w	r1, r9, r1
 800640a:	d120      	bne.n	800644e <_dtoa_r+0xad6>
 800640c:	2a00      	cmp	r2, #0
 800640e:	ddec      	ble.n	80063ea <_dtoa_r+0xa72>
 8006410:	4659      	mov	r1, fp
 8006412:	2201      	movs	r2, #1
 8006414:	4620      	mov	r0, r4
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	f000 faca 	bl	80069b0 <__lshift>
 800641c:	4631      	mov	r1, r6
 800641e:	4683      	mov	fp, r0
 8006420:	f000 fb32 	bl	8006a88 <__mcmp>
 8006424:	2800      	cmp	r0, #0
 8006426:	9b01      	ldr	r3, [sp, #4]
 8006428:	dc02      	bgt.n	8006430 <_dtoa_r+0xab8>
 800642a:	d1de      	bne.n	80063ea <_dtoa_r+0xa72>
 800642c:	07da      	lsls	r2, r3, #31
 800642e:	d5dc      	bpl.n	80063ea <_dtoa_r+0xa72>
 8006430:	2b39      	cmp	r3, #57	; 0x39
 8006432:	d1d8      	bne.n	80063e6 <_dtoa_r+0xa6e>
 8006434:	9a02      	ldr	r2, [sp, #8]
 8006436:	2339      	movs	r3, #57	; 0x39
 8006438:	7013      	strb	r3, [r2, #0]
 800643a:	462b      	mov	r3, r5
 800643c:	461d      	mov	r5, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006444:	2a39      	cmp	r2, #57	; 0x39
 8006446:	d050      	beq.n	80064ea <_dtoa_r+0xb72>
 8006448:	3201      	adds	r2, #1
 800644a:	701a      	strb	r2, [r3, #0]
 800644c:	e745      	b.n	80062da <_dtoa_r+0x962>
 800644e:	2a00      	cmp	r2, #0
 8006450:	dd03      	ble.n	800645a <_dtoa_r+0xae2>
 8006452:	2b39      	cmp	r3, #57	; 0x39
 8006454:	d0ee      	beq.n	8006434 <_dtoa_r+0xabc>
 8006456:	3301      	adds	r3, #1
 8006458:	e7c7      	b.n	80063ea <_dtoa_r+0xa72>
 800645a:	9a01      	ldr	r2, [sp, #4]
 800645c:	9907      	ldr	r1, [sp, #28]
 800645e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006462:	428a      	cmp	r2, r1
 8006464:	d02a      	beq.n	80064bc <_dtoa_r+0xb44>
 8006466:	4659      	mov	r1, fp
 8006468:	2300      	movs	r3, #0
 800646a:	220a      	movs	r2, #10
 800646c:	4620      	mov	r0, r4
 800646e:	f000 f8ef 	bl	8006650 <__multadd>
 8006472:	45b8      	cmp	r8, r7
 8006474:	4683      	mov	fp, r0
 8006476:	f04f 0300 	mov.w	r3, #0
 800647a:	f04f 020a 	mov.w	r2, #10
 800647e:	4641      	mov	r1, r8
 8006480:	4620      	mov	r0, r4
 8006482:	d107      	bne.n	8006494 <_dtoa_r+0xb1c>
 8006484:	f000 f8e4 	bl	8006650 <__multadd>
 8006488:	4680      	mov	r8, r0
 800648a:	4607      	mov	r7, r0
 800648c:	9b01      	ldr	r3, [sp, #4]
 800648e:	3301      	adds	r3, #1
 8006490:	9301      	str	r3, [sp, #4]
 8006492:	e775      	b.n	8006380 <_dtoa_r+0xa08>
 8006494:	f000 f8dc 	bl	8006650 <__multadd>
 8006498:	4639      	mov	r1, r7
 800649a:	4680      	mov	r8, r0
 800649c:	2300      	movs	r3, #0
 800649e:	220a      	movs	r2, #10
 80064a0:	4620      	mov	r0, r4
 80064a2:	f000 f8d5 	bl	8006650 <__multadd>
 80064a6:	4607      	mov	r7, r0
 80064a8:	e7f0      	b.n	800648c <_dtoa_r+0xb14>
 80064aa:	f1b9 0f00 	cmp.w	r9, #0
 80064ae:	9a00      	ldr	r2, [sp, #0]
 80064b0:	bfcc      	ite	gt
 80064b2:	464d      	movgt	r5, r9
 80064b4:	2501      	movle	r5, #1
 80064b6:	4415      	add	r5, r2
 80064b8:	f04f 0800 	mov.w	r8, #0
 80064bc:	4659      	mov	r1, fp
 80064be:	2201      	movs	r2, #1
 80064c0:	4620      	mov	r0, r4
 80064c2:	9301      	str	r3, [sp, #4]
 80064c4:	f000 fa74 	bl	80069b0 <__lshift>
 80064c8:	4631      	mov	r1, r6
 80064ca:	4683      	mov	fp, r0
 80064cc:	f000 fadc 	bl	8006a88 <__mcmp>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	dcb2      	bgt.n	800643a <_dtoa_r+0xac2>
 80064d4:	d102      	bne.n	80064dc <_dtoa_r+0xb64>
 80064d6:	9b01      	ldr	r3, [sp, #4]
 80064d8:	07db      	lsls	r3, r3, #31
 80064da:	d4ae      	bmi.n	800643a <_dtoa_r+0xac2>
 80064dc:	462b      	mov	r3, r5
 80064de:	461d      	mov	r5, r3
 80064e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064e4:	2a30      	cmp	r2, #48	; 0x30
 80064e6:	d0fa      	beq.n	80064de <_dtoa_r+0xb66>
 80064e8:	e6f7      	b.n	80062da <_dtoa_r+0x962>
 80064ea:	9a00      	ldr	r2, [sp, #0]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d1a5      	bne.n	800643c <_dtoa_r+0xac4>
 80064f0:	f10a 0a01 	add.w	sl, sl, #1
 80064f4:	2331      	movs	r3, #49	; 0x31
 80064f6:	e779      	b.n	80063ec <_dtoa_r+0xa74>
 80064f8:	4b13      	ldr	r3, [pc, #76]	; (8006548 <_dtoa_r+0xbd0>)
 80064fa:	f7ff baaf 	b.w	8005a5c <_dtoa_r+0xe4>
 80064fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006500:	2b00      	cmp	r3, #0
 8006502:	f47f aa86 	bne.w	8005a12 <_dtoa_r+0x9a>
 8006506:	4b11      	ldr	r3, [pc, #68]	; (800654c <_dtoa_r+0xbd4>)
 8006508:	f7ff baa8 	b.w	8005a5c <_dtoa_r+0xe4>
 800650c:	f1b9 0f00 	cmp.w	r9, #0
 8006510:	dc03      	bgt.n	800651a <_dtoa_r+0xba2>
 8006512:	9b05      	ldr	r3, [sp, #20]
 8006514:	2b02      	cmp	r3, #2
 8006516:	f73f aec9 	bgt.w	80062ac <_dtoa_r+0x934>
 800651a:	9d00      	ldr	r5, [sp, #0]
 800651c:	4631      	mov	r1, r6
 800651e:	4658      	mov	r0, fp
 8006520:	f7ff f99e 	bl	8005860 <quorem>
 8006524:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006528:	f805 3b01 	strb.w	r3, [r5], #1
 800652c:	9a00      	ldr	r2, [sp, #0]
 800652e:	1aaa      	subs	r2, r5, r2
 8006530:	4591      	cmp	r9, r2
 8006532:	ddba      	ble.n	80064aa <_dtoa_r+0xb32>
 8006534:	4659      	mov	r1, fp
 8006536:	2300      	movs	r3, #0
 8006538:	220a      	movs	r2, #10
 800653a:	4620      	mov	r0, r4
 800653c:	f000 f888 	bl	8006650 <__multadd>
 8006540:	4683      	mov	fp, r0
 8006542:	e7eb      	b.n	800651c <_dtoa_r+0xba4>
 8006544:	08007893 	.word	0x08007893
 8006548:	080077ec 	.word	0x080077ec
 800654c:	08007810 	.word	0x08007810

08006550 <_localeconv_r>:
 8006550:	4800      	ldr	r0, [pc, #0]	; (8006554 <_localeconv_r+0x4>)
 8006552:	4770      	bx	lr
 8006554:	20000160 	.word	0x20000160

08006558 <memcpy>:
 8006558:	440a      	add	r2, r1
 800655a:	4291      	cmp	r1, r2
 800655c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006560:	d100      	bne.n	8006564 <memcpy+0xc>
 8006562:	4770      	bx	lr
 8006564:	b510      	push	{r4, lr}
 8006566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800656a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800656e:	4291      	cmp	r1, r2
 8006570:	d1f9      	bne.n	8006566 <memcpy+0xe>
 8006572:	bd10      	pop	{r4, pc}

08006574 <__malloc_lock>:
 8006574:	4801      	ldr	r0, [pc, #4]	; (800657c <__malloc_lock+0x8>)
 8006576:	f000 bbc8 	b.w	8006d0a <__retarget_lock_acquire_recursive>
 800657a:	bf00      	nop
 800657c:	2000059c 	.word	0x2000059c

08006580 <__malloc_unlock>:
 8006580:	4801      	ldr	r0, [pc, #4]	; (8006588 <__malloc_unlock+0x8>)
 8006582:	f000 bbc3 	b.w	8006d0c <__retarget_lock_release_recursive>
 8006586:	bf00      	nop
 8006588:	2000059c 	.word	0x2000059c

0800658c <_Balloc>:
 800658c:	b570      	push	{r4, r5, r6, lr}
 800658e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006590:	4604      	mov	r4, r0
 8006592:	460d      	mov	r5, r1
 8006594:	b976      	cbnz	r6, 80065b4 <_Balloc+0x28>
 8006596:	2010      	movs	r0, #16
 8006598:	f7fe fc2e 	bl	8004df8 <malloc>
 800659c:	4602      	mov	r2, r0
 800659e:	6260      	str	r0, [r4, #36]	; 0x24
 80065a0:	b920      	cbnz	r0, 80065ac <_Balloc+0x20>
 80065a2:	4b18      	ldr	r3, [pc, #96]	; (8006604 <_Balloc+0x78>)
 80065a4:	4818      	ldr	r0, [pc, #96]	; (8006608 <_Balloc+0x7c>)
 80065a6:	2166      	movs	r1, #102	; 0x66
 80065a8:	f000 fb7e 	bl	8006ca8 <__assert_func>
 80065ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065b0:	6006      	str	r6, [r0, #0]
 80065b2:	60c6      	str	r6, [r0, #12]
 80065b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80065b6:	68f3      	ldr	r3, [r6, #12]
 80065b8:	b183      	cbz	r3, 80065dc <_Balloc+0x50>
 80065ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80065c2:	b9b8      	cbnz	r0, 80065f4 <_Balloc+0x68>
 80065c4:	2101      	movs	r1, #1
 80065c6:	fa01 f605 	lsl.w	r6, r1, r5
 80065ca:	1d72      	adds	r2, r6, #5
 80065cc:	0092      	lsls	r2, r2, #2
 80065ce:	4620      	mov	r0, r4
 80065d0:	f000 fb5a 	bl	8006c88 <_calloc_r>
 80065d4:	b160      	cbz	r0, 80065f0 <_Balloc+0x64>
 80065d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065da:	e00e      	b.n	80065fa <_Balloc+0x6e>
 80065dc:	2221      	movs	r2, #33	; 0x21
 80065de:	2104      	movs	r1, #4
 80065e0:	4620      	mov	r0, r4
 80065e2:	f000 fb51 	bl	8006c88 <_calloc_r>
 80065e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065e8:	60f0      	str	r0, [r6, #12]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e4      	bne.n	80065ba <_Balloc+0x2e>
 80065f0:	2000      	movs	r0, #0
 80065f2:	bd70      	pop	{r4, r5, r6, pc}
 80065f4:	6802      	ldr	r2, [r0, #0]
 80065f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065fa:	2300      	movs	r3, #0
 80065fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006600:	e7f7      	b.n	80065f2 <_Balloc+0x66>
 8006602:	bf00      	nop
 8006604:	0800781d 	.word	0x0800781d
 8006608:	080078a4 	.word	0x080078a4

0800660c <_Bfree>:
 800660c:	b570      	push	{r4, r5, r6, lr}
 800660e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006610:	4605      	mov	r5, r0
 8006612:	460c      	mov	r4, r1
 8006614:	b976      	cbnz	r6, 8006634 <_Bfree+0x28>
 8006616:	2010      	movs	r0, #16
 8006618:	f7fe fbee 	bl	8004df8 <malloc>
 800661c:	4602      	mov	r2, r0
 800661e:	6268      	str	r0, [r5, #36]	; 0x24
 8006620:	b920      	cbnz	r0, 800662c <_Bfree+0x20>
 8006622:	4b09      	ldr	r3, [pc, #36]	; (8006648 <_Bfree+0x3c>)
 8006624:	4809      	ldr	r0, [pc, #36]	; (800664c <_Bfree+0x40>)
 8006626:	218a      	movs	r1, #138	; 0x8a
 8006628:	f000 fb3e 	bl	8006ca8 <__assert_func>
 800662c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006630:	6006      	str	r6, [r0, #0]
 8006632:	60c6      	str	r6, [r0, #12]
 8006634:	b13c      	cbz	r4, 8006646 <_Bfree+0x3a>
 8006636:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006638:	6862      	ldr	r2, [r4, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006640:	6021      	str	r1, [r4, #0]
 8006642:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006646:	bd70      	pop	{r4, r5, r6, pc}
 8006648:	0800781d 	.word	0x0800781d
 800664c:	080078a4 	.word	0x080078a4

08006650 <__multadd>:
 8006650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006654:	690e      	ldr	r6, [r1, #16]
 8006656:	4607      	mov	r7, r0
 8006658:	4698      	mov	r8, r3
 800665a:	460c      	mov	r4, r1
 800665c:	f101 0014 	add.w	r0, r1, #20
 8006660:	2300      	movs	r3, #0
 8006662:	6805      	ldr	r5, [r0, #0]
 8006664:	b2a9      	uxth	r1, r5
 8006666:	fb02 8101 	mla	r1, r2, r1, r8
 800666a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800666e:	0c2d      	lsrs	r5, r5, #16
 8006670:	fb02 c505 	mla	r5, r2, r5, ip
 8006674:	b289      	uxth	r1, r1
 8006676:	3301      	adds	r3, #1
 8006678:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800667c:	429e      	cmp	r6, r3
 800667e:	f840 1b04 	str.w	r1, [r0], #4
 8006682:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006686:	dcec      	bgt.n	8006662 <__multadd+0x12>
 8006688:	f1b8 0f00 	cmp.w	r8, #0
 800668c:	d022      	beq.n	80066d4 <__multadd+0x84>
 800668e:	68a3      	ldr	r3, [r4, #8]
 8006690:	42b3      	cmp	r3, r6
 8006692:	dc19      	bgt.n	80066c8 <__multadd+0x78>
 8006694:	6861      	ldr	r1, [r4, #4]
 8006696:	4638      	mov	r0, r7
 8006698:	3101      	adds	r1, #1
 800669a:	f7ff ff77 	bl	800658c <_Balloc>
 800669e:	4605      	mov	r5, r0
 80066a0:	b928      	cbnz	r0, 80066ae <__multadd+0x5e>
 80066a2:	4602      	mov	r2, r0
 80066a4:	4b0d      	ldr	r3, [pc, #52]	; (80066dc <__multadd+0x8c>)
 80066a6:	480e      	ldr	r0, [pc, #56]	; (80066e0 <__multadd+0x90>)
 80066a8:	21b5      	movs	r1, #181	; 0xb5
 80066aa:	f000 fafd 	bl	8006ca8 <__assert_func>
 80066ae:	6922      	ldr	r2, [r4, #16]
 80066b0:	3202      	adds	r2, #2
 80066b2:	f104 010c 	add.w	r1, r4, #12
 80066b6:	0092      	lsls	r2, r2, #2
 80066b8:	300c      	adds	r0, #12
 80066ba:	f7ff ff4d 	bl	8006558 <memcpy>
 80066be:	4621      	mov	r1, r4
 80066c0:	4638      	mov	r0, r7
 80066c2:	f7ff ffa3 	bl	800660c <_Bfree>
 80066c6:	462c      	mov	r4, r5
 80066c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80066cc:	3601      	adds	r6, #1
 80066ce:	f8c3 8014 	str.w	r8, [r3, #20]
 80066d2:	6126      	str	r6, [r4, #16]
 80066d4:	4620      	mov	r0, r4
 80066d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066da:	bf00      	nop
 80066dc:	08007893 	.word	0x08007893
 80066e0:	080078a4 	.word	0x080078a4

080066e4 <__hi0bits>:
 80066e4:	0c03      	lsrs	r3, r0, #16
 80066e6:	041b      	lsls	r3, r3, #16
 80066e8:	b9d3      	cbnz	r3, 8006720 <__hi0bits+0x3c>
 80066ea:	0400      	lsls	r0, r0, #16
 80066ec:	2310      	movs	r3, #16
 80066ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80066f2:	bf04      	itt	eq
 80066f4:	0200      	lsleq	r0, r0, #8
 80066f6:	3308      	addeq	r3, #8
 80066f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80066fc:	bf04      	itt	eq
 80066fe:	0100      	lsleq	r0, r0, #4
 8006700:	3304      	addeq	r3, #4
 8006702:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006706:	bf04      	itt	eq
 8006708:	0080      	lsleq	r0, r0, #2
 800670a:	3302      	addeq	r3, #2
 800670c:	2800      	cmp	r0, #0
 800670e:	db05      	blt.n	800671c <__hi0bits+0x38>
 8006710:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006714:	f103 0301 	add.w	r3, r3, #1
 8006718:	bf08      	it	eq
 800671a:	2320      	moveq	r3, #32
 800671c:	4618      	mov	r0, r3
 800671e:	4770      	bx	lr
 8006720:	2300      	movs	r3, #0
 8006722:	e7e4      	b.n	80066ee <__hi0bits+0xa>

08006724 <__lo0bits>:
 8006724:	6803      	ldr	r3, [r0, #0]
 8006726:	f013 0207 	ands.w	r2, r3, #7
 800672a:	4601      	mov	r1, r0
 800672c:	d00b      	beq.n	8006746 <__lo0bits+0x22>
 800672e:	07da      	lsls	r2, r3, #31
 8006730:	d424      	bmi.n	800677c <__lo0bits+0x58>
 8006732:	0798      	lsls	r0, r3, #30
 8006734:	bf49      	itett	mi
 8006736:	085b      	lsrmi	r3, r3, #1
 8006738:	089b      	lsrpl	r3, r3, #2
 800673a:	2001      	movmi	r0, #1
 800673c:	600b      	strmi	r3, [r1, #0]
 800673e:	bf5c      	itt	pl
 8006740:	600b      	strpl	r3, [r1, #0]
 8006742:	2002      	movpl	r0, #2
 8006744:	4770      	bx	lr
 8006746:	b298      	uxth	r0, r3
 8006748:	b9b0      	cbnz	r0, 8006778 <__lo0bits+0x54>
 800674a:	0c1b      	lsrs	r3, r3, #16
 800674c:	2010      	movs	r0, #16
 800674e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006752:	bf04      	itt	eq
 8006754:	0a1b      	lsreq	r3, r3, #8
 8006756:	3008      	addeq	r0, #8
 8006758:	071a      	lsls	r2, r3, #28
 800675a:	bf04      	itt	eq
 800675c:	091b      	lsreq	r3, r3, #4
 800675e:	3004      	addeq	r0, #4
 8006760:	079a      	lsls	r2, r3, #30
 8006762:	bf04      	itt	eq
 8006764:	089b      	lsreq	r3, r3, #2
 8006766:	3002      	addeq	r0, #2
 8006768:	07da      	lsls	r2, r3, #31
 800676a:	d403      	bmi.n	8006774 <__lo0bits+0x50>
 800676c:	085b      	lsrs	r3, r3, #1
 800676e:	f100 0001 	add.w	r0, r0, #1
 8006772:	d005      	beq.n	8006780 <__lo0bits+0x5c>
 8006774:	600b      	str	r3, [r1, #0]
 8006776:	4770      	bx	lr
 8006778:	4610      	mov	r0, r2
 800677a:	e7e8      	b.n	800674e <__lo0bits+0x2a>
 800677c:	2000      	movs	r0, #0
 800677e:	4770      	bx	lr
 8006780:	2020      	movs	r0, #32
 8006782:	4770      	bx	lr

08006784 <__i2b>:
 8006784:	b510      	push	{r4, lr}
 8006786:	460c      	mov	r4, r1
 8006788:	2101      	movs	r1, #1
 800678a:	f7ff feff 	bl	800658c <_Balloc>
 800678e:	4602      	mov	r2, r0
 8006790:	b928      	cbnz	r0, 800679e <__i2b+0x1a>
 8006792:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <__i2b+0x24>)
 8006794:	4805      	ldr	r0, [pc, #20]	; (80067ac <__i2b+0x28>)
 8006796:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800679a:	f000 fa85 	bl	8006ca8 <__assert_func>
 800679e:	2301      	movs	r3, #1
 80067a0:	6144      	str	r4, [r0, #20]
 80067a2:	6103      	str	r3, [r0, #16]
 80067a4:	bd10      	pop	{r4, pc}
 80067a6:	bf00      	nop
 80067a8:	08007893 	.word	0x08007893
 80067ac:	080078a4 	.word	0x080078a4

080067b0 <__multiply>:
 80067b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b4:	4614      	mov	r4, r2
 80067b6:	690a      	ldr	r2, [r1, #16]
 80067b8:	6923      	ldr	r3, [r4, #16]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	bfb8      	it	lt
 80067be:	460b      	movlt	r3, r1
 80067c0:	460d      	mov	r5, r1
 80067c2:	bfbc      	itt	lt
 80067c4:	4625      	movlt	r5, r4
 80067c6:	461c      	movlt	r4, r3
 80067c8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80067cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80067d0:	68ab      	ldr	r3, [r5, #8]
 80067d2:	6869      	ldr	r1, [r5, #4]
 80067d4:	eb0a 0709 	add.w	r7, sl, r9
 80067d8:	42bb      	cmp	r3, r7
 80067da:	b085      	sub	sp, #20
 80067dc:	bfb8      	it	lt
 80067de:	3101      	addlt	r1, #1
 80067e0:	f7ff fed4 	bl	800658c <_Balloc>
 80067e4:	b930      	cbnz	r0, 80067f4 <__multiply+0x44>
 80067e6:	4602      	mov	r2, r0
 80067e8:	4b42      	ldr	r3, [pc, #264]	; (80068f4 <__multiply+0x144>)
 80067ea:	4843      	ldr	r0, [pc, #268]	; (80068f8 <__multiply+0x148>)
 80067ec:	f240 115d 	movw	r1, #349	; 0x15d
 80067f0:	f000 fa5a 	bl	8006ca8 <__assert_func>
 80067f4:	f100 0614 	add.w	r6, r0, #20
 80067f8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80067fc:	4633      	mov	r3, r6
 80067fe:	2200      	movs	r2, #0
 8006800:	4543      	cmp	r3, r8
 8006802:	d31e      	bcc.n	8006842 <__multiply+0x92>
 8006804:	f105 0c14 	add.w	ip, r5, #20
 8006808:	f104 0314 	add.w	r3, r4, #20
 800680c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006810:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006814:	9202      	str	r2, [sp, #8]
 8006816:	ebac 0205 	sub.w	r2, ip, r5
 800681a:	3a15      	subs	r2, #21
 800681c:	f022 0203 	bic.w	r2, r2, #3
 8006820:	3204      	adds	r2, #4
 8006822:	f105 0115 	add.w	r1, r5, #21
 8006826:	458c      	cmp	ip, r1
 8006828:	bf38      	it	cc
 800682a:	2204      	movcc	r2, #4
 800682c:	9201      	str	r2, [sp, #4]
 800682e:	9a02      	ldr	r2, [sp, #8]
 8006830:	9303      	str	r3, [sp, #12]
 8006832:	429a      	cmp	r2, r3
 8006834:	d808      	bhi.n	8006848 <__multiply+0x98>
 8006836:	2f00      	cmp	r7, #0
 8006838:	dc55      	bgt.n	80068e6 <__multiply+0x136>
 800683a:	6107      	str	r7, [r0, #16]
 800683c:	b005      	add	sp, #20
 800683e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006842:	f843 2b04 	str.w	r2, [r3], #4
 8006846:	e7db      	b.n	8006800 <__multiply+0x50>
 8006848:	f8b3 a000 	ldrh.w	sl, [r3]
 800684c:	f1ba 0f00 	cmp.w	sl, #0
 8006850:	d020      	beq.n	8006894 <__multiply+0xe4>
 8006852:	f105 0e14 	add.w	lr, r5, #20
 8006856:	46b1      	mov	r9, r6
 8006858:	2200      	movs	r2, #0
 800685a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800685e:	f8d9 b000 	ldr.w	fp, [r9]
 8006862:	b2a1      	uxth	r1, r4
 8006864:	fa1f fb8b 	uxth.w	fp, fp
 8006868:	fb0a b101 	mla	r1, sl, r1, fp
 800686c:	4411      	add	r1, r2
 800686e:	f8d9 2000 	ldr.w	r2, [r9]
 8006872:	0c24      	lsrs	r4, r4, #16
 8006874:	0c12      	lsrs	r2, r2, #16
 8006876:	fb0a 2404 	mla	r4, sl, r4, r2
 800687a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800687e:	b289      	uxth	r1, r1
 8006880:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006884:	45f4      	cmp	ip, lr
 8006886:	f849 1b04 	str.w	r1, [r9], #4
 800688a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800688e:	d8e4      	bhi.n	800685a <__multiply+0xaa>
 8006890:	9901      	ldr	r1, [sp, #4]
 8006892:	5072      	str	r2, [r6, r1]
 8006894:	9a03      	ldr	r2, [sp, #12]
 8006896:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800689a:	3304      	adds	r3, #4
 800689c:	f1b9 0f00 	cmp.w	r9, #0
 80068a0:	d01f      	beq.n	80068e2 <__multiply+0x132>
 80068a2:	6834      	ldr	r4, [r6, #0]
 80068a4:	f105 0114 	add.w	r1, r5, #20
 80068a8:	46b6      	mov	lr, r6
 80068aa:	f04f 0a00 	mov.w	sl, #0
 80068ae:	880a      	ldrh	r2, [r1, #0]
 80068b0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80068b4:	fb09 b202 	mla	r2, r9, r2, fp
 80068b8:	4492      	add	sl, r2
 80068ba:	b2a4      	uxth	r4, r4
 80068bc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80068c0:	f84e 4b04 	str.w	r4, [lr], #4
 80068c4:	f851 4b04 	ldr.w	r4, [r1], #4
 80068c8:	f8be 2000 	ldrh.w	r2, [lr]
 80068cc:	0c24      	lsrs	r4, r4, #16
 80068ce:	fb09 2404 	mla	r4, r9, r4, r2
 80068d2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80068d6:	458c      	cmp	ip, r1
 80068d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80068dc:	d8e7      	bhi.n	80068ae <__multiply+0xfe>
 80068de:	9a01      	ldr	r2, [sp, #4]
 80068e0:	50b4      	str	r4, [r6, r2]
 80068e2:	3604      	adds	r6, #4
 80068e4:	e7a3      	b.n	800682e <__multiply+0x7e>
 80068e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1a5      	bne.n	800683a <__multiply+0x8a>
 80068ee:	3f01      	subs	r7, #1
 80068f0:	e7a1      	b.n	8006836 <__multiply+0x86>
 80068f2:	bf00      	nop
 80068f4:	08007893 	.word	0x08007893
 80068f8:	080078a4 	.word	0x080078a4

080068fc <__pow5mult>:
 80068fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006900:	4615      	mov	r5, r2
 8006902:	f012 0203 	ands.w	r2, r2, #3
 8006906:	4606      	mov	r6, r0
 8006908:	460f      	mov	r7, r1
 800690a:	d007      	beq.n	800691c <__pow5mult+0x20>
 800690c:	4c25      	ldr	r4, [pc, #148]	; (80069a4 <__pow5mult+0xa8>)
 800690e:	3a01      	subs	r2, #1
 8006910:	2300      	movs	r3, #0
 8006912:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006916:	f7ff fe9b 	bl	8006650 <__multadd>
 800691a:	4607      	mov	r7, r0
 800691c:	10ad      	asrs	r5, r5, #2
 800691e:	d03d      	beq.n	800699c <__pow5mult+0xa0>
 8006920:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006922:	b97c      	cbnz	r4, 8006944 <__pow5mult+0x48>
 8006924:	2010      	movs	r0, #16
 8006926:	f7fe fa67 	bl	8004df8 <malloc>
 800692a:	4602      	mov	r2, r0
 800692c:	6270      	str	r0, [r6, #36]	; 0x24
 800692e:	b928      	cbnz	r0, 800693c <__pow5mult+0x40>
 8006930:	4b1d      	ldr	r3, [pc, #116]	; (80069a8 <__pow5mult+0xac>)
 8006932:	481e      	ldr	r0, [pc, #120]	; (80069ac <__pow5mult+0xb0>)
 8006934:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006938:	f000 f9b6 	bl	8006ca8 <__assert_func>
 800693c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006940:	6004      	str	r4, [r0, #0]
 8006942:	60c4      	str	r4, [r0, #12]
 8006944:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006948:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800694c:	b94c      	cbnz	r4, 8006962 <__pow5mult+0x66>
 800694e:	f240 2171 	movw	r1, #625	; 0x271
 8006952:	4630      	mov	r0, r6
 8006954:	f7ff ff16 	bl	8006784 <__i2b>
 8006958:	2300      	movs	r3, #0
 800695a:	f8c8 0008 	str.w	r0, [r8, #8]
 800695e:	4604      	mov	r4, r0
 8006960:	6003      	str	r3, [r0, #0]
 8006962:	f04f 0900 	mov.w	r9, #0
 8006966:	07eb      	lsls	r3, r5, #31
 8006968:	d50a      	bpl.n	8006980 <__pow5mult+0x84>
 800696a:	4639      	mov	r1, r7
 800696c:	4622      	mov	r2, r4
 800696e:	4630      	mov	r0, r6
 8006970:	f7ff ff1e 	bl	80067b0 <__multiply>
 8006974:	4639      	mov	r1, r7
 8006976:	4680      	mov	r8, r0
 8006978:	4630      	mov	r0, r6
 800697a:	f7ff fe47 	bl	800660c <_Bfree>
 800697e:	4647      	mov	r7, r8
 8006980:	106d      	asrs	r5, r5, #1
 8006982:	d00b      	beq.n	800699c <__pow5mult+0xa0>
 8006984:	6820      	ldr	r0, [r4, #0]
 8006986:	b938      	cbnz	r0, 8006998 <__pow5mult+0x9c>
 8006988:	4622      	mov	r2, r4
 800698a:	4621      	mov	r1, r4
 800698c:	4630      	mov	r0, r6
 800698e:	f7ff ff0f 	bl	80067b0 <__multiply>
 8006992:	6020      	str	r0, [r4, #0]
 8006994:	f8c0 9000 	str.w	r9, [r0]
 8006998:	4604      	mov	r4, r0
 800699a:	e7e4      	b.n	8006966 <__pow5mult+0x6a>
 800699c:	4638      	mov	r0, r7
 800699e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069a2:	bf00      	nop
 80069a4:	080079f8 	.word	0x080079f8
 80069a8:	0800781d 	.word	0x0800781d
 80069ac:	080078a4 	.word	0x080078a4

080069b0 <__lshift>:
 80069b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069b4:	460c      	mov	r4, r1
 80069b6:	6849      	ldr	r1, [r1, #4]
 80069b8:	6923      	ldr	r3, [r4, #16]
 80069ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80069be:	68a3      	ldr	r3, [r4, #8]
 80069c0:	4607      	mov	r7, r0
 80069c2:	4691      	mov	r9, r2
 80069c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80069c8:	f108 0601 	add.w	r6, r8, #1
 80069cc:	42b3      	cmp	r3, r6
 80069ce:	db0b      	blt.n	80069e8 <__lshift+0x38>
 80069d0:	4638      	mov	r0, r7
 80069d2:	f7ff fddb 	bl	800658c <_Balloc>
 80069d6:	4605      	mov	r5, r0
 80069d8:	b948      	cbnz	r0, 80069ee <__lshift+0x3e>
 80069da:	4602      	mov	r2, r0
 80069dc:	4b28      	ldr	r3, [pc, #160]	; (8006a80 <__lshift+0xd0>)
 80069de:	4829      	ldr	r0, [pc, #164]	; (8006a84 <__lshift+0xd4>)
 80069e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80069e4:	f000 f960 	bl	8006ca8 <__assert_func>
 80069e8:	3101      	adds	r1, #1
 80069ea:	005b      	lsls	r3, r3, #1
 80069ec:	e7ee      	b.n	80069cc <__lshift+0x1c>
 80069ee:	2300      	movs	r3, #0
 80069f0:	f100 0114 	add.w	r1, r0, #20
 80069f4:	f100 0210 	add.w	r2, r0, #16
 80069f8:	4618      	mov	r0, r3
 80069fa:	4553      	cmp	r3, sl
 80069fc:	db33      	blt.n	8006a66 <__lshift+0xb6>
 80069fe:	6920      	ldr	r0, [r4, #16]
 8006a00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a04:	f104 0314 	add.w	r3, r4, #20
 8006a08:	f019 091f 	ands.w	r9, r9, #31
 8006a0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a14:	d02b      	beq.n	8006a6e <__lshift+0xbe>
 8006a16:	f1c9 0e20 	rsb	lr, r9, #32
 8006a1a:	468a      	mov	sl, r1
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	6818      	ldr	r0, [r3, #0]
 8006a20:	fa00 f009 	lsl.w	r0, r0, r9
 8006a24:	4302      	orrs	r2, r0
 8006a26:	f84a 2b04 	str.w	r2, [sl], #4
 8006a2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a2e:	459c      	cmp	ip, r3
 8006a30:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a34:	d8f3      	bhi.n	8006a1e <__lshift+0x6e>
 8006a36:	ebac 0304 	sub.w	r3, ip, r4
 8006a3a:	3b15      	subs	r3, #21
 8006a3c:	f023 0303 	bic.w	r3, r3, #3
 8006a40:	3304      	adds	r3, #4
 8006a42:	f104 0015 	add.w	r0, r4, #21
 8006a46:	4584      	cmp	ip, r0
 8006a48:	bf38      	it	cc
 8006a4a:	2304      	movcc	r3, #4
 8006a4c:	50ca      	str	r2, [r1, r3]
 8006a4e:	b10a      	cbz	r2, 8006a54 <__lshift+0xa4>
 8006a50:	f108 0602 	add.w	r6, r8, #2
 8006a54:	3e01      	subs	r6, #1
 8006a56:	4638      	mov	r0, r7
 8006a58:	612e      	str	r6, [r5, #16]
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	f7ff fdd6 	bl	800660c <_Bfree>
 8006a60:	4628      	mov	r0, r5
 8006a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a66:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	e7c5      	b.n	80069fa <__lshift+0x4a>
 8006a6e:	3904      	subs	r1, #4
 8006a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a74:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a78:	459c      	cmp	ip, r3
 8006a7a:	d8f9      	bhi.n	8006a70 <__lshift+0xc0>
 8006a7c:	e7ea      	b.n	8006a54 <__lshift+0xa4>
 8006a7e:	bf00      	nop
 8006a80:	08007893 	.word	0x08007893
 8006a84:	080078a4 	.word	0x080078a4

08006a88 <__mcmp>:
 8006a88:	b530      	push	{r4, r5, lr}
 8006a8a:	6902      	ldr	r2, [r0, #16]
 8006a8c:	690c      	ldr	r4, [r1, #16]
 8006a8e:	1b12      	subs	r2, r2, r4
 8006a90:	d10e      	bne.n	8006ab0 <__mcmp+0x28>
 8006a92:	f100 0314 	add.w	r3, r0, #20
 8006a96:	3114      	adds	r1, #20
 8006a98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006a9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006aa0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006aa4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006aa8:	42a5      	cmp	r5, r4
 8006aaa:	d003      	beq.n	8006ab4 <__mcmp+0x2c>
 8006aac:	d305      	bcc.n	8006aba <__mcmp+0x32>
 8006aae:	2201      	movs	r2, #1
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	bd30      	pop	{r4, r5, pc}
 8006ab4:	4283      	cmp	r3, r0
 8006ab6:	d3f3      	bcc.n	8006aa0 <__mcmp+0x18>
 8006ab8:	e7fa      	b.n	8006ab0 <__mcmp+0x28>
 8006aba:	f04f 32ff 	mov.w	r2, #4294967295
 8006abe:	e7f7      	b.n	8006ab0 <__mcmp+0x28>

08006ac0 <__mdiff>:
 8006ac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac4:	460c      	mov	r4, r1
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	4611      	mov	r1, r2
 8006aca:	4620      	mov	r0, r4
 8006acc:	4617      	mov	r7, r2
 8006ace:	f7ff ffdb 	bl	8006a88 <__mcmp>
 8006ad2:	1e05      	subs	r5, r0, #0
 8006ad4:	d110      	bne.n	8006af8 <__mdiff+0x38>
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	4630      	mov	r0, r6
 8006ada:	f7ff fd57 	bl	800658c <_Balloc>
 8006ade:	b930      	cbnz	r0, 8006aee <__mdiff+0x2e>
 8006ae0:	4b39      	ldr	r3, [pc, #228]	; (8006bc8 <__mdiff+0x108>)
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	f240 2132 	movw	r1, #562	; 0x232
 8006ae8:	4838      	ldr	r0, [pc, #224]	; (8006bcc <__mdiff+0x10c>)
 8006aea:	f000 f8dd 	bl	8006ca8 <__assert_func>
 8006aee:	2301      	movs	r3, #1
 8006af0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006af4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af8:	bfa4      	itt	ge
 8006afa:	463b      	movge	r3, r7
 8006afc:	4627      	movge	r7, r4
 8006afe:	4630      	mov	r0, r6
 8006b00:	6879      	ldr	r1, [r7, #4]
 8006b02:	bfa6      	itte	ge
 8006b04:	461c      	movge	r4, r3
 8006b06:	2500      	movge	r5, #0
 8006b08:	2501      	movlt	r5, #1
 8006b0a:	f7ff fd3f 	bl	800658c <_Balloc>
 8006b0e:	b920      	cbnz	r0, 8006b1a <__mdiff+0x5a>
 8006b10:	4b2d      	ldr	r3, [pc, #180]	; (8006bc8 <__mdiff+0x108>)
 8006b12:	4602      	mov	r2, r0
 8006b14:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006b18:	e7e6      	b.n	8006ae8 <__mdiff+0x28>
 8006b1a:	693e      	ldr	r6, [r7, #16]
 8006b1c:	60c5      	str	r5, [r0, #12]
 8006b1e:	6925      	ldr	r5, [r4, #16]
 8006b20:	f107 0114 	add.w	r1, r7, #20
 8006b24:	f104 0914 	add.w	r9, r4, #20
 8006b28:	f100 0e14 	add.w	lr, r0, #20
 8006b2c:	f107 0210 	add.w	r2, r7, #16
 8006b30:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006b34:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006b38:	46f2      	mov	sl, lr
 8006b3a:	2700      	movs	r7, #0
 8006b3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006b44:	fa1f f883 	uxth.w	r8, r3
 8006b48:	fa17 f78b 	uxtah	r7, r7, fp
 8006b4c:	0c1b      	lsrs	r3, r3, #16
 8006b4e:	eba7 0808 	sub.w	r8, r7, r8
 8006b52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006b56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006b5a:	fa1f f888 	uxth.w	r8, r8
 8006b5e:	141f      	asrs	r7, r3, #16
 8006b60:	454d      	cmp	r5, r9
 8006b62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006b66:	f84a 3b04 	str.w	r3, [sl], #4
 8006b6a:	d8e7      	bhi.n	8006b3c <__mdiff+0x7c>
 8006b6c:	1b2b      	subs	r3, r5, r4
 8006b6e:	3b15      	subs	r3, #21
 8006b70:	f023 0303 	bic.w	r3, r3, #3
 8006b74:	3304      	adds	r3, #4
 8006b76:	3415      	adds	r4, #21
 8006b78:	42a5      	cmp	r5, r4
 8006b7a:	bf38      	it	cc
 8006b7c:	2304      	movcc	r3, #4
 8006b7e:	4419      	add	r1, r3
 8006b80:	4473      	add	r3, lr
 8006b82:	469e      	mov	lr, r3
 8006b84:	460d      	mov	r5, r1
 8006b86:	4565      	cmp	r5, ip
 8006b88:	d30e      	bcc.n	8006ba8 <__mdiff+0xe8>
 8006b8a:	f10c 0203 	add.w	r2, ip, #3
 8006b8e:	1a52      	subs	r2, r2, r1
 8006b90:	f022 0203 	bic.w	r2, r2, #3
 8006b94:	3903      	subs	r1, #3
 8006b96:	458c      	cmp	ip, r1
 8006b98:	bf38      	it	cc
 8006b9a:	2200      	movcc	r2, #0
 8006b9c:	441a      	add	r2, r3
 8006b9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006ba2:	b17b      	cbz	r3, 8006bc4 <__mdiff+0x104>
 8006ba4:	6106      	str	r6, [r0, #16]
 8006ba6:	e7a5      	b.n	8006af4 <__mdiff+0x34>
 8006ba8:	f855 8b04 	ldr.w	r8, [r5], #4
 8006bac:	fa17 f488 	uxtah	r4, r7, r8
 8006bb0:	1422      	asrs	r2, r4, #16
 8006bb2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006bb6:	b2a4      	uxth	r4, r4
 8006bb8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006bbc:	f84e 4b04 	str.w	r4, [lr], #4
 8006bc0:	1417      	asrs	r7, r2, #16
 8006bc2:	e7e0      	b.n	8006b86 <__mdiff+0xc6>
 8006bc4:	3e01      	subs	r6, #1
 8006bc6:	e7ea      	b.n	8006b9e <__mdiff+0xde>
 8006bc8:	08007893 	.word	0x08007893
 8006bcc:	080078a4 	.word	0x080078a4

08006bd0 <__d2b>:
 8006bd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006bd4:	4689      	mov	r9, r1
 8006bd6:	2101      	movs	r1, #1
 8006bd8:	ec57 6b10 	vmov	r6, r7, d0
 8006bdc:	4690      	mov	r8, r2
 8006bde:	f7ff fcd5 	bl	800658c <_Balloc>
 8006be2:	4604      	mov	r4, r0
 8006be4:	b930      	cbnz	r0, 8006bf4 <__d2b+0x24>
 8006be6:	4602      	mov	r2, r0
 8006be8:	4b25      	ldr	r3, [pc, #148]	; (8006c80 <__d2b+0xb0>)
 8006bea:	4826      	ldr	r0, [pc, #152]	; (8006c84 <__d2b+0xb4>)
 8006bec:	f240 310a 	movw	r1, #778	; 0x30a
 8006bf0:	f000 f85a 	bl	8006ca8 <__assert_func>
 8006bf4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006bf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006bfc:	bb35      	cbnz	r5, 8006c4c <__d2b+0x7c>
 8006bfe:	2e00      	cmp	r6, #0
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	d028      	beq.n	8006c56 <__d2b+0x86>
 8006c04:	4668      	mov	r0, sp
 8006c06:	9600      	str	r6, [sp, #0]
 8006c08:	f7ff fd8c 	bl	8006724 <__lo0bits>
 8006c0c:	9900      	ldr	r1, [sp, #0]
 8006c0e:	b300      	cbz	r0, 8006c52 <__d2b+0x82>
 8006c10:	9a01      	ldr	r2, [sp, #4]
 8006c12:	f1c0 0320 	rsb	r3, r0, #32
 8006c16:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1a:	430b      	orrs	r3, r1
 8006c1c:	40c2      	lsrs	r2, r0
 8006c1e:	6163      	str	r3, [r4, #20]
 8006c20:	9201      	str	r2, [sp, #4]
 8006c22:	9b01      	ldr	r3, [sp, #4]
 8006c24:	61a3      	str	r3, [r4, #24]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	bf14      	ite	ne
 8006c2a:	2202      	movne	r2, #2
 8006c2c:	2201      	moveq	r2, #1
 8006c2e:	6122      	str	r2, [r4, #16]
 8006c30:	b1d5      	cbz	r5, 8006c68 <__d2b+0x98>
 8006c32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c36:	4405      	add	r5, r0
 8006c38:	f8c9 5000 	str.w	r5, [r9]
 8006c3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c40:	f8c8 0000 	str.w	r0, [r8]
 8006c44:	4620      	mov	r0, r4
 8006c46:	b003      	add	sp, #12
 8006c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c50:	e7d5      	b.n	8006bfe <__d2b+0x2e>
 8006c52:	6161      	str	r1, [r4, #20]
 8006c54:	e7e5      	b.n	8006c22 <__d2b+0x52>
 8006c56:	a801      	add	r0, sp, #4
 8006c58:	f7ff fd64 	bl	8006724 <__lo0bits>
 8006c5c:	9b01      	ldr	r3, [sp, #4]
 8006c5e:	6163      	str	r3, [r4, #20]
 8006c60:	2201      	movs	r2, #1
 8006c62:	6122      	str	r2, [r4, #16]
 8006c64:	3020      	adds	r0, #32
 8006c66:	e7e3      	b.n	8006c30 <__d2b+0x60>
 8006c68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c70:	f8c9 0000 	str.w	r0, [r9]
 8006c74:	6918      	ldr	r0, [r3, #16]
 8006c76:	f7ff fd35 	bl	80066e4 <__hi0bits>
 8006c7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c7e:	e7df      	b.n	8006c40 <__d2b+0x70>
 8006c80:	08007893 	.word	0x08007893
 8006c84:	080078a4 	.word	0x080078a4

08006c88 <_calloc_r>:
 8006c88:	b513      	push	{r0, r1, r4, lr}
 8006c8a:	434a      	muls	r2, r1
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	9201      	str	r2, [sp, #4]
 8006c90:	f7fe f912 	bl	8004eb8 <_malloc_r>
 8006c94:	4604      	mov	r4, r0
 8006c96:	b118      	cbz	r0, 8006ca0 <_calloc_r+0x18>
 8006c98:	9a01      	ldr	r2, [sp, #4]
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	f7fe f8b4 	bl	8004e08 <memset>
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	b002      	add	sp, #8
 8006ca4:	bd10      	pop	{r4, pc}
	...

08006ca8 <__assert_func>:
 8006ca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006caa:	4614      	mov	r4, r2
 8006cac:	461a      	mov	r2, r3
 8006cae:	4b09      	ldr	r3, [pc, #36]	; (8006cd4 <__assert_func+0x2c>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4605      	mov	r5, r0
 8006cb4:	68d8      	ldr	r0, [r3, #12]
 8006cb6:	b14c      	cbz	r4, 8006ccc <__assert_func+0x24>
 8006cb8:	4b07      	ldr	r3, [pc, #28]	; (8006cd8 <__assert_func+0x30>)
 8006cba:	9100      	str	r1, [sp, #0]
 8006cbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006cc0:	4906      	ldr	r1, [pc, #24]	; (8006cdc <__assert_func+0x34>)
 8006cc2:	462b      	mov	r3, r5
 8006cc4:	f000 f80e 	bl	8006ce4 <fiprintf>
 8006cc8:	f000 fa5a 	bl	8007180 <abort>
 8006ccc:	4b04      	ldr	r3, [pc, #16]	; (8006ce0 <__assert_func+0x38>)
 8006cce:	461c      	mov	r4, r3
 8006cd0:	e7f3      	b.n	8006cba <__assert_func+0x12>
 8006cd2:	bf00      	nop
 8006cd4:	2000000c 	.word	0x2000000c
 8006cd8:	08007a04 	.word	0x08007a04
 8006cdc:	08007a11 	.word	0x08007a11
 8006ce0:	08007a3f 	.word	0x08007a3f

08006ce4 <fiprintf>:
 8006ce4:	b40e      	push	{r1, r2, r3}
 8006ce6:	b503      	push	{r0, r1, lr}
 8006ce8:	4601      	mov	r1, r0
 8006cea:	ab03      	add	r3, sp, #12
 8006cec:	4805      	ldr	r0, [pc, #20]	; (8006d04 <fiprintf+0x20>)
 8006cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cf2:	6800      	ldr	r0, [r0, #0]
 8006cf4:	9301      	str	r3, [sp, #4]
 8006cf6:	f000 f845 	bl	8006d84 <_vfiprintf_r>
 8006cfa:	b002      	add	sp, #8
 8006cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d00:	b003      	add	sp, #12
 8006d02:	4770      	bx	lr
 8006d04:	2000000c 	.word	0x2000000c

08006d08 <__retarget_lock_init_recursive>:
 8006d08:	4770      	bx	lr

08006d0a <__retarget_lock_acquire_recursive>:
 8006d0a:	4770      	bx	lr

08006d0c <__retarget_lock_release_recursive>:
 8006d0c:	4770      	bx	lr

08006d0e <__ascii_mbtowc>:
 8006d0e:	b082      	sub	sp, #8
 8006d10:	b901      	cbnz	r1, 8006d14 <__ascii_mbtowc+0x6>
 8006d12:	a901      	add	r1, sp, #4
 8006d14:	b142      	cbz	r2, 8006d28 <__ascii_mbtowc+0x1a>
 8006d16:	b14b      	cbz	r3, 8006d2c <__ascii_mbtowc+0x1e>
 8006d18:	7813      	ldrb	r3, [r2, #0]
 8006d1a:	600b      	str	r3, [r1, #0]
 8006d1c:	7812      	ldrb	r2, [r2, #0]
 8006d1e:	1e10      	subs	r0, r2, #0
 8006d20:	bf18      	it	ne
 8006d22:	2001      	movne	r0, #1
 8006d24:	b002      	add	sp, #8
 8006d26:	4770      	bx	lr
 8006d28:	4610      	mov	r0, r2
 8006d2a:	e7fb      	b.n	8006d24 <__ascii_mbtowc+0x16>
 8006d2c:	f06f 0001 	mvn.w	r0, #1
 8006d30:	e7f8      	b.n	8006d24 <__ascii_mbtowc+0x16>

08006d32 <__sfputc_r>:
 8006d32:	6893      	ldr	r3, [r2, #8]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	b410      	push	{r4}
 8006d3a:	6093      	str	r3, [r2, #8]
 8006d3c:	da08      	bge.n	8006d50 <__sfputc_r+0x1e>
 8006d3e:	6994      	ldr	r4, [r2, #24]
 8006d40:	42a3      	cmp	r3, r4
 8006d42:	db01      	blt.n	8006d48 <__sfputc_r+0x16>
 8006d44:	290a      	cmp	r1, #10
 8006d46:	d103      	bne.n	8006d50 <__sfputc_r+0x1e>
 8006d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d4c:	f000 b94a 	b.w	8006fe4 <__swbuf_r>
 8006d50:	6813      	ldr	r3, [r2, #0]
 8006d52:	1c58      	adds	r0, r3, #1
 8006d54:	6010      	str	r0, [r2, #0]
 8006d56:	7019      	strb	r1, [r3, #0]
 8006d58:	4608      	mov	r0, r1
 8006d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <__sfputs_r>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	4606      	mov	r6, r0
 8006d64:	460f      	mov	r7, r1
 8006d66:	4614      	mov	r4, r2
 8006d68:	18d5      	adds	r5, r2, r3
 8006d6a:	42ac      	cmp	r4, r5
 8006d6c:	d101      	bne.n	8006d72 <__sfputs_r+0x12>
 8006d6e:	2000      	movs	r0, #0
 8006d70:	e007      	b.n	8006d82 <__sfputs_r+0x22>
 8006d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d76:	463a      	mov	r2, r7
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f7ff ffda 	bl	8006d32 <__sfputc_r>
 8006d7e:	1c43      	adds	r3, r0, #1
 8006d80:	d1f3      	bne.n	8006d6a <__sfputs_r+0xa>
 8006d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d84 <_vfiprintf_r>:
 8006d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d88:	460d      	mov	r5, r1
 8006d8a:	b09d      	sub	sp, #116	; 0x74
 8006d8c:	4614      	mov	r4, r2
 8006d8e:	4698      	mov	r8, r3
 8006d90:	4606      	mov	r6, r0
 8006d92:	b118      	cbz	r0, 8006d9c <_vfiprintf_r+0x18>
 8006d94:	6983      	ldr	r3, [r0, #24]
 8006d96:	b90b      	cbnz	r3, 8006d9c <_vfiprintf_r+0x18>
 8006d98:	f000 fb14 	bl	80073c4 <__sinit>
 8006d9c:	4b89      	ldr	r3, [pc, #548]	; (8006fc4 <_vfiprintf_r+0x240>)
 8006d9e:	429d      	cmp	r5, r3
 8006da0:	d11b      	bne.n	8006dda <_vfiprintf_r+0x56>
 8006da2:	6875      	ldr	r5, [r6, #4]
 8006da4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006da6:	07d9      	lsls	r1, r3, #31
 8006da8:	d405      	bmi.n	8006db6 <_vfiprintf_r+0x32>
 8006daa:	89ab      	ldrh	r3, [r5, #12]
 8006dac:	059a      	lsls	r2, r3, #22
 8006dae:	d402      	bmi.n	8006db6 <_vfiprintf_r+0x32>
 8006db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006db2:	f7ff ffaa 	bl	8006d0a <__retarget_lock_acquire_recursive>
 8006db6:	89ab      	ldrh	r3, [r5, #12]
 8006db8:	071b      	lsls	r3, r3, #28
 8006dba:	d501      	bpl.n	8006dc0 <_vfiprintf_r+0x3c>
 8006dbc:	692b      	ldr	r3, [r5, #16]
 8006dbe:	b9eb      	cbnz	r3, 8006dfc <_vfiprintf_r+0x78>
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	f000 f96e 	bl	80070a4 <__swsetup_r>
 8006dc8:	b1c0      	cbz	r0, 8006dfc <_vfiprintf_r+0x78>
 8006dca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dcc:	07dc      	lsls	r4, r3, #31
 8006dce:	d50e      	bpl.n	8006dee <_vfiprintf_r+0x6a>
 8006dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd4:	b01d      	add	sp, #116	; 0x74
 8006dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dda:	4b7b      	ldr	r3, [pc, #492]	; (8006fc8 <_vfiprintf_r+0x244>)
 8006ddc:	429d      	cmp	r5, r3
 8006dde:	d101      	bne.n	8006de4 <_vfiprintf_r+0x60>
 8006de0:	68b5      	ldr	r5, [r6, #8]
 8006de2:	e7df      	b.n	8006da4 <_vfiprintf_r+0x20>
 8006de4:	4b79      	ldr	r3, [pc, #484]	; (8006fcc <_vfiprintf_r+0x248>)
 8006de6:	429d      	cmp	r5, r3
 8006de8:	bf08      	it	eq
 8006dea:	68f5      	ldreq	r5, [r6, #12]
 8006dec:	e7da      	b.n	8006da4 <_vfiprintf_r+0x20>
 8006dee:	89ab      	ldrh	r3, [r5, #12]
 8006df0:	0598      	lsls	r0, r3, #22
 8006df2:	d4ed      	bmi.n	8006dd0 <_vfiprintf_r+0x4c>
 8006df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006df6:	f7ff ff89 	bl	8006d0c <__retarget_lock_release_recursive>
 8006dfa:	e7e9      	b.n	8006dd0 <_vfiprintf_r+0x4c>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8006e00:	2320      	movs	r3, #32
 8006e02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e06:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e0a:	2330      	movs	r3, #48	; 0x30
 8006e0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006fd0 <_vfiprintf_r+0x24c>
 8006e10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e14:	f04f 0901 	mov.w	r9, #1
 8006e18:	4623      	mov	r3, r4
 8006e1a:	469a      	mov	sl, r3
 8006e1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e20:	b10a      	cbz	r2, 8006e26 <_vfiprintf_r+0xa2>
 8006e22:	2a25      	cmp	r2, #37	; 0x25
 8006e24:	d1f9      	bne.n	8006e1a <_vfiprintf_r+0x96>
 8006e26:	ebba 0b04 	subs.w	fp, sl, r4
 8006e2a:	d00b      	beq.n	8006e44 <_vfiprintf_r+0xc0>
 8006e2c:	465b      	mov	r3, fp
 8006e2e:	4622      	mov	r2, r4
 8006e30:	4629      	mov	r1, r5
 8006e32:	4630      	mov	r0, r6
 8006e34:	f7ff ff94 	bl	8006d60 <__sfputs_r>
 8006e38:	3001      	adds	r0, #1
 8006e3a:	f000 80aa 	beq.w	8006f92 <_vfiprintf_r+0x20e>
 8006e3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e40:	445a      	add	r2, fp
 8006e42:	9209      	str	r2, [sp, #36]	; 0x24
 8006e44:	f89a 3000 	ldrb.w	r3, [sl]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 80a2 	beq.w	8006f92 <_vfiprintf_r+0x20e>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f04f 32ff 	mov.w	r2, #4294967295
 8006e54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e58:	f10a 0a01 	add.w	sl, sl, #1
 8006e5c:	9304      	str	r3, [sp, #16]
 8006e5e:	9307      	str	r3, [sp, #28]
 8006e60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e64:	931a      	str	r3, [sp, #104]	; 0x68
 8006e66:	4654      	mov	r4, sl
 8006e68:	2205      	movs	r2, #5
 8006e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e6e:	4858      	ldr	r0, [pc, #352]	; (8006fd0 <_vfiprintf_r+0x24c>)
 8006e70:	f7f9 f9c6 	bl	8000200 <memchr>
 8006e74:	9a04      	ldr	r2, [sp, #16]
 8006e76:	b9d8      	cbnz	r0, 8006eb0 <_vfiprintf_r+0x12c>
 8006e78:	06d1      	lsls	r1, r2, #27
 8006e7a:	bf44      	itt	mi
 8006e7c:	2320      	movmi	r3, #32
 8006e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e82:	0713      	lsls	r3, r2, #28
 8006e84:	bf44      	itt	mi
 8006e86:	232b      	movmi	r3, #43	; 0x2b
 8006e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e90:	2b2a      	cmp	r3, #42	; 0x2a
 8006e92:	d015      	beq.n	8006ec0 <_vfiprintf_r+0x13c>
 8006e94:	9a07      	ldr	r2, [sp, #28]
 8006e96:	4654      	mov	r4, sl
 8006e98:	2000      	movs	r0, #0
 8006e9a:	f04f 0c0a 	mov.w	ip, #10
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ea4:	3b30      	subs	r3, #48	; 0x30
 8006ea6:	2b09      	cmp	r3, #9
 8006ea8:	d94e      	bls.n	8006f48 <_vfiprintf_r+0x1c4>
 8006eaa:	b1b0      	cbz	r0, 8006eda <_vfiprintf_r+0x156>
 8006eac:	9207      	str	r2, [sp, #28]
 8006eae:	e014      	b.n	8006eda <_vfiprintf_r+0x156>
 8006eb0:	eba0 0308 	sub.w	r3, r0, r8
 8006eb4:	fa09 f303 	lsl.w	r3, r9, r3
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	9304      	str	r3, [sp, #16]
 8006ebc:	46a2      	mov	sl, r4
 8006ebe:	e7d2      	b.n	8006e66 <_vfiprintf_r+0xe2>
 8006ec0:	9b03      	ldr	r3, [sp, #12]
 8006ec2:	1d19      	adds	r1, r3, #4
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	9103      	str	r1, [sp, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	bfbb      	ittet	lt
 8006ecc:	425b      	neglt	r3, r3
 8006ece:	f042 0202 	orrlt.w	r2, r2, #2
 8006ed2:	9307      	strge	r3, [sp, #28]
 8006ed4:	9307      	strlt	r3, [sp, #28]
 8006ed6:	bfb8      	it	lt
 8006ed8:	9204      	strlt	r2, [sp, #16]
 8006eda:	7823      	ldrb	r3, [r4, #0]
 8006edc:	2b2e      	cmp	r3, #46	; 0x2e
 8006ede:	d10c      	bne.n	8006efa <_vfiprintf_r+0x176>
 8006ee0:	7863      	ldrb	r3, [r4, #1]
 8006ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ee4:	d135      	bne.n	8006f52 <_vfiprintf_r+0x1ce>
 8006ee6:	9b03      	ldr	r3, [sp, #12]
 8006ee8:	1d1a      	adds	r2, r3, #4
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	9203      	str	r2, [sp, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	bfb8      	it	lt
 8006ef2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ef6:	3402      	adds	r4, #2
 8006ef8:	9305      	str	r3, [sp, #20]
 8006efa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006fe0 <_vfiprintf_r+0x25c>
 8006efe:	7821      	ldrb	r1, [r4, #0]
 8006f00:	2203      	movs	r2, #3
 8006f02:	4650      	mov	r0, sl
 8006f04:	f7f9 f97c 	bl	8000200 <memchr>
 8006f08:	b140      	cbz	r0, 8006f1c <_vfiprintf_r+0x198>
 8006f0a:	2340      	movs	r3, #64	; 0x40
 8006f0c:	eba0 000a 	sub.w	r0, r0, sl
 8006f10:	fa03 f000 	lsl.w	r0, r3, r0
 8006f14:	9b04      	ldr	r3, [sp, #16]
 8006f16:	4303      	orrs	r3, r0
 8006f18:	3401      	adds	r4, #1
 8006f1a:	9304      	str	r3, [sp, #16]
 8006f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f20:	482c      	ldr	r0, [pc, #176]	; (8006fd4 <_vfiprintf_r+0x250>)
 8006f22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f26:	2206      	movs	r2, #6
 8006f28:	f7f9 f96a 	bl	8000200 <memchr>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d03f      	beq.n	8006fb0 <_vfiprintf_r+0x22c>
 8006f30:	4b29      	ldr	r3, [pc, #164]	; (8006fd8 <_vfiprintf_r+0x254>)
 8006f32:	bb1b      	cbnz	r3, 8006f7c <_vfiprintf_r+0x1f8>
 8006f34:	9b03      	ldr	r3, [sp, #12]
 8006f36:	3307      	adds	r3, #7
 8006f38:	f023 0307 	bic.w	r3, r3, #7
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	9303      	str	r3, [sp, #12]
 8006f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f42:	443b      	add	r3, r7
 8006f44:	9309      	str	r3, [sp, #36]	; 0x24
 8006f46:	e767      	b.n	8006e18 <_vfiprintf_r+0x94>
 8006f48:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	2001      	movs	r0, #1
 8006f50:	e7a5      	b.n	8006e9e <_vfiprintf_r+0x11a>
 8006f52:	2300      	movs	r3, #0
 8006f54:	3401      	adds	r4, #1
 8006f56:	9305      	str	r3, [sp, #20]
 8006f58:	4619      	mov	r1, r3
 8006f5a:	f04f 0c0a 	mov.w	ip, #10
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f64:	3a30      	subs	r2, #48	; 0x30
 8006f66:	2a09      	cmp	r2, #9
 8006f68:	d903      	bls.n	8006f72 <_vfiprintf_r+0x1ee>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0c5      	beq.n	8006efa <_vfiprintf_r+0x176>
 8006f6e:	9105      	str	r1, [sp, #20]
 8006f70:	e7c3      	b.n	8006efa <_vfiprintf_r+0x176>
 8006f72:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f76:	4604      	mov	r4, r0
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e7f0      	b.n	8006f5e <_vfiprintf_r+0x1da>
 8006f7c:	ab03      	add	r3, sp, #12
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	462a      	mov	r2, r5
 8006f82:	4b16      	ldr	r3, [pc, #88]	; (8006fdc <_vfiprintf_r+0x258>)
 8006f84:	a904      	add	r1, sp, #16
 8006f86:	4630      	mov	r0, r6
 8006f88:	f7fe f890 	bl	80050ac <_printf_float>
 8006f8c:	4607      	mov	r7, r0
 8006f8e:	1c78      	adds	r0, r7, #1
 8006f90:	d1d6      	bne.n	8006f40 <_vfiprintf_r+0x1bc>
 8006f92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f94:	07d9      	lsls	r1, r3, #31
 8006f96:	d405      	bmi.n	8006fa4 <_vfiprintf_r+0x220>
 8006f98:	89ab      	ldrh	r3, [r5, #12]
 8006f9a:	059a      	lsls	r2, r3, #22
 8006f9c:	d402      	bmi.n	8006fa4 <_vfiprintf_r+0x220>
 8006f9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fa0:	f7ff feb4 	bl	8006d0c <__retarget_lock_release_recursive>
 8006fa4:	89ab      	ldrh	r3, [r5, #12]
 8006fa6:	065b      	lsls	r3, r3, #25
 8006fa8:	f53f af12 	bmi.w	8006dd0 <_vfiprintf_r+0x4c>
 8006fac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fae:	e711      	b.n	8006dd4 <_vfiprintf_r+0x50>
 8006fb0:	ab03      	add	r3, sp, #12
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	462a      	mov	r2, r5
 8006fb6:	4b09      	ldr	r3, [pc, #36]	; (8006fdc <_vfiprintf_r+0x258>)
 8006fb8:	a904      	add	r1, sp, #16
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f7fe fb1a 	bl	80055f4 <_printf_i>
 8006fc0:	e7e4      	b.n	8006f8c <_vfiprintf_r+0x208>
 8006fc2:	bf00      	nop
 8006fc4:	08007b7c 	.word	0x08007b7c
 8006fc8:	08007b9c 	.word	0x08007b9c
 8006fcc:	08007b5c 	.word	0x08007b5c
 8006fd0:	08007a4a 	.word	0x08007a4a
 8006fd4:	08007a54 	.word	0x08007a54
 8006fd8:	080050ad 	.word	0x080050ad
 8006fdc:	08006d61 	.word	0x08006d61
 8006fe0:	08007a50 	.word	0x08007a50

08006fe4 <__swbuf_r>:
 8006fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe6:	460e      	mov	r6, r1
 8006fe8:	4614      	mov	r4, r2
 8006fea:	4605      	mov	r5, r0
 8006fec:	b118      	cbz	r0, 8006ff6 <__swbuf_r+0x12>
 8006fee:	6983      	ldr	r3, [r0, #24]
 8006ff0:	b90b      	cbnz	r3, 8006ff6 <__swbuf_r+0x12>
 8006ff2:	f000 f9e7 	bl	80073c4 <__sinit>
 8006ff6:	4b21      	ldr	r3, [pc, #132]	; (800707c <__swbuf_r+0x98>)
 8006ff8:	429c      	cmp	r4, r3
 8006ffa:	d12b      	bne.n	8007054 <__swbuf_r+0x70>
 8006ffc:	686c      	ldr	r4, [r5, #4]
 8006ffe:	69a3      	ldr	r3, [r4, #24]
 8007000:	60a3      	str	r3, [r4, #8]
 8007002:	89a3      	ldrh	r3, [r4, #12]
 8007004:	071a      	lsls	r2, r3, #28
 8007006:	d52f      	bpl.n	8007068 <__swbuf_r+0x84>
 8007008:	6923      	ldr	r3, [r4, #16]
 800700a:	b36b      	cbz	r3, 8007068 <__swbuf_r+0x84>
 800700c:	6923      	ldr	r3, [r4, #16]
 800700e:	6820      	ldr	r0, [r4, #0]
 8007010:	1ac0      	subs	r0, r0, r3
 8007012:	6963      	ldr	r3, [r4, #20]
 8007014:	b2f6      	uxtb	r6, r6
 8007016:	4283      	cmp	r3, r0
 8007018:	4637      	mov	r7, r6
 800701a:	dc04      	bgt.n	8007026 <__swbuf_r+0x42>
 800701c:	4621      	mov	r1, r4
 800701e:	4628      	mov	r0, r5
 8007020:	f000 f93c 	bl	800729c <_fflush_r>
 8007024:	bb30      	cbnz	r0, 8007074 <__swbuf_r+0x90>
 8007026:	68a3      	ldr	r3, [r4, #8]
 8007028:	3b01      	subs	r3, #1
 800702a:	60a3      	str	r3, [r4, #8]
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	6022      	str	r2, [r4, #0]
 8007032:	701e      	strb	r6, [r3, #0]
 8007034:	6963      	ldr	r3, [r4, #20]
 8007036:	3001      	adds	r0, #1
 8007038:	4283      	cmp	r3, r0
 800703a:	d004      	beq.n	8007046 <__swbuf_r+0x62>
 800703c:	89a3      	ldrh	r3, [r4, #12]
 800703e:	07db      	lsls	r3, r3, #31
 8007040:	d506      	bpl.n	8007050 <__swbuf_r+0x6c>
 8007042:	2e0a      	cmp	r6, #10
 8007044:	d104      	bne.n	8007050 <__swbuf_r+0x6c>
 8007046:	4621      	mov	r1, r4
 8007048:	4628      	mov	r0, r5
 800704a:	f000 f927 	bl	800729c <_fflush_r>
 800704e:	b988      	cbnz	r0, 8007074 <__swbuf_r+0x90>
 8007050:	4638      	mov	r0, r7
 8007052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007054:	4b0a      	ldr	r3, [pc, #40]	; (8007080 <__swbuf_r+0x9c>)
 8007056:	429c      	cmp	r4, r3
 8007058:	d101      	bne.n	800705e <__swbuf_r+0x7a>
 800705a:	68ac      	ldr	r4, [r5, #8]
 800705c:	e7cf      	b.n	8006ffe <__swbuf_r+0x1a>
 800705e:	4b09      	ldr	r3, [pc, #36]	; (8007084 <__swbuf_r+0xa0>)
 8007060:	429c      	cmp	r4, r3
 8007062:	bf08      	it	eq
 8007064:	68ec      	ldreq	r4, [r5, #12]
 8007066:	e7ca      	b.n	8006ffe <__swbuf_r+0x1a>
 8007068:	4621      	mov	r1, r4
 800706a:	4628      	mov	r0, r5
 800706c:	f000 f81a 	bl	80070a4 <__swsetup_r>
 8007070:	2800      	cmp	r0, #0
 8007072:	d0cb      	beq.n	800700c <__swbuf_r+0x28>
 8007074:	f04f 37ff 	mov.w	r7, #4294967295
 8007078:	e7ea      	b.n	8007050 <__swbuf_r+0x6c>
 800707a:	bf00      	nop
 800707c:	08007b7c 	.word	0x08007b7c
 8007080:	08007b9c 	.word	0x08007b9c
 8007084:	08007b5c 	.word	0x08007b5c

08007088 <__ascii_wctomb>:
 8007088:	b149      	cbz	r1, 800709e <__ascii_wctomb+0x16>
 800708a:	2aff      	cmp	r2, #255	; 0xff
 800708c:	bf85      	ittet	hi
 800708e:	238a      	movhi	r3, #138	; 0x8a
 8007090:	6003      	strhi	r3, [r0, #0]
 8007092:	700a      	strbls	r2, [r1, #0]
 8007094:	f04f 30ff 	movhi.w	r0, #4294967295
 8007098:	bf98      	it	ls
 800709a:	2001      	movls	r0, #1
 800709c:	4770      	bx	lr
 800709e:	4608      	mov	r0, r1
 80070a0:	4770      	bx	lr
	...

080070a4 <__swsetup_r>:
 80070a4:	4b32      	ldr	r3, [pc, #200]	; (8007170 <__swsetup_r+0xcc>)
 80070a6:	b570      	push	{r4, r5, r6, lr}
 80070a8:	681d      	ldr	r5, [r3, #0]
 80070aa:	4606      	mov	r6, r0
 80070ac:	460c      	mov	r4, r1
 80070ae:	b125      	cbz	r5, 80070ba <__swsetup_r+0x16>
 80070b0:	69ab      	ldr	r3, [r5, #24]
 80070b2:	b913      	cbnz	r3, 80070ba <__swsetup_r+0x16>
 80070b4:	4628      	mov	r0, r5
 80070b6:	f000 f985 	bl	80073c4 <__sinit>
 80070ba:	4b2e      	ldr	r3, [pc, #184]	; (8007174 <__swsetup_r+0xd0>)
 80070bc:	429c      	cmp	r4, r3
 80070be:	d10f      	bne.n	80070e0 <__swsetup_r+0x3c>
 80070c0:	686c      	ldr	r4, [r5, #4]
 80070c2:	89a3      	ldrh	r3, [r4, #12]
 80070c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070c8:	0719      	lsls	r1, r3, #28
 80070ca:	d42c      	bmi.n	8007126 <__swsetup_r+0x82>
 80070cc:	06dd      	lsls	r5, r3, #27
 80070ce:	d411      	bmi.n	80070f4 <__swsetup_r+0x50>
 80070d0:	2309      	movs	r3, #9
 80070d2:	6033      	str	r3, [r6, #0]
 80070d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070d8:	81a3      	strh	r3, [r4, #12]
 80070da:	f04f 30ff 	mov.w	r0, #4294967295
 80070de:	e03e      	b.n	800715e <__swsetup_r+0xba>
 80070e0:	4b25      	ldr	r3, [pc, #148]	; (8007178 <__swsetup_r+0xd4>)
 80070e2:	429c      	cmp	r4, r3
 80070e4:	d101      	bne.n	80070ea <__swsetup_r+0x46>
 80070e6:	68ac      	ldr	r4, [r5, #8]
 80070e8:	e7eb      	b.n	80070c2 <__swsetup_r+0x1e>
 80070ea:	4b24      	ldr	r3, [pc, #144]	; (800717c <__swsetup_r+0xd8>)
 80070ec:	429c      	cmp	r4, r3
 80070ee:	bf08      	it	eq
 80070f0:	68ec      	ldreq	r4, [r5, #12]
 80070f2:	e7e6      	b.n	80070c2 <__swsetup_r+0x1e>
 80070f4:	0758      	lsls	r0, r3, #29
 80070f6:	d512      	bpl.n	800711e <__swsetup_r+0x7a>
 80070f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070fa:	b141      	cbz	r1, 800710e <__swsetup_r+0x6a>
 80070fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007100:	4299      	cmp	r1, r3
 8007102:	d002      	beq.n	800710a <__swsetup_r+0x66>
 8007104:	4630      	mov	r0, r6
 8007106:	f7fd fe87 	bl	8004e18 <_free_r>
 800710a:	2300      	movs	r3, #0
 800710c:	6363      	str	r3, [r4, #52]	; 0x34
 800710e:	89a3      	ldrh	r3, [r4, #12]
 8007110:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007114:	81a3      	strh	r3, [r4, #12]
 8007116:	2300      	movs	r3, #0
 8007118:	6063      	str	r3, [r4, #4]
 800711a:	6923      	ldr	r3, [r4, #16]
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	f043 0308 	orr.w	r3, r3, #8
 8007124:	81a3      	strh	r3, [r4, #12]
 8007126:	6923      	ldr	r3, [r4, #16]
 8007128:	b94b      	cbnz	r3, 800713e <__swsetup_r+0x9a>
 800712a:	89a3      	ldrh	r3, [r4, #12]
 800712c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007134:	d003      	beq.n	800713e <__swsetup_r+0x9a>
 8007136:	4621      	mov	r1, r4
 8007138:	4630      	mov	r0, r6
 800713a:	f000 fa05 	bl	8007548 <__smakebuf_r>
 800713e:	89a0      	ldrh	r0, [r4, #12]
 8007140:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007144:	f010 0301 	ands.w	r3, r0, #1
 8007148:	d00a      	beq.n	8007160 <__swsetup_r+0xbc>
 800714a:	2300      	movs	r3, #0
 800714c:	60a3      	str	r3, [r4, #8]
 800714e:	6963      	ldr	r3, [r4, #20]
 8007150:	425b      	negs	r3, r3
 8007152:	61a3      	str	r3, [r4, #24]
 8007154:	6923      	ldr	r3, [r4, #16]
 8007156:	b943      	cbnz	r3, 800716a <__swsetup_r+0xc6>
 8007158:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800715c:	d1ba      	bne.n	80070d4 <__swsetup_r+0x30>
 800715e:	bd70      	pop	{r4, r5, r6, pc}
 8007160:	0781      	lsls	r1, r0, #30
 8007162:	bf58      	it	pl
 8007164:	6963      	ldrpl	r3, [r4, #20]
 8007166:	60a3      	str	r3, [r4, #8]
 8007168:	e7f4      	b.n	8007154 <__swsetup_r+0xb0>
 800716a:	2000      	movs	r0, #0
 800716c:	e7f7      	b.n	800715e <__swsetup_r+0xba>
 800716e:	bf00      	nop
 8007170:	2000000c 	.word	0x2000000c
 8007174:	08007b7c 	.word	0x08007b7c
 8007178:	08007b9c 	.word	0x08007b9c
 800717c:	08007b5c 	.word	0x08007b5c

08007180 <abort>:
 8007180:	b508      	push	{r3, lr}
 8007182:	2006      	movs	r0, #6
 8007184:	f000 fa48 	bl	8007618 <raise>
 8007188:	2001      	movs	r0, #1
 800718a:	f7fa fd4f 	bl	8001c2c <_exit>
	...

08007190 <__sflush_r>:
 8007190:	898a      	ldrh	r2, [r1, #12]
 8007192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007196:	4605      	mov	r5, r0
 8007198:	0710      	lsls	r0, r2, #28
 800719a:	460c      	mov	r4, r1
 800719c:	d458      	bmi.n	8007250 <__sflush_r+0xc0>
 800719e:	684b      	ldr	r3, [r1, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	dc05      	bgt.n	80071b0 <__sflush_r+0x20>
 80071a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	dc02      	bgt.n	80071b0 <__sflush_r+0x20>
 80071aa:	2000      	movs	r0, #0
 80071ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071b2:	2e00      	cmp	r6, #0
 80071b4:	d0f9      	beq.n	80071aa <__sflush_r+0x1a>
 80071b6:	2300      	movs	r3, #0
 80071b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071bc:	682f      	ldr	r7, [r5, #0]
 80071be:	602b      	str	r3, [r5, #0]
 80071c0:	d032      	beq.n	8007228 <__sflush_r+0x98>
 80071c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	075a      	lsls	r2, r3, #29
 80071c8:	d505      	bpl.n	80071d6 <__sflush_r+0x46>
 80071ca:	6863      	ldr	r3, [r4, #4]
 80071cc:	1ac0      	subs	r0, r0, r3
 80071ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071d0:	b10b      	cbz	r3, 80071d6 <__sflush_r+0x46>
 80071d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071d4:	1ac0      	subs	r0, r0, r3
 80071d6:	2300      	movs	r3, #0
 80071d8:	4602      	mov	r2, r0
 80071da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071dc:	6a21      	ldr	r1, [r4, #32]
 80071de:	4628      	mov	r0, r5
 80071e0:	47b0      	blx	r6
 80071e2:	1c43      	adds	r3, r0, #1
 80071e4:	89a3      	ldrh	r3, [r4, #12]
 80071e6:	d106      	bne.n	80071f6 <__sflush_r+0x66>
 80071e8:	6829      	ldr	r1, [r5, #0]
 80071ea:	291d      	cmp	r1, #29
 80071ec:	d82c      	bhi.n	8007248 <__sflush_r+0xb8>
 80071ee:	4a2a      	ldr	r2, [pc, #168]	; (8007298 <__sflush_r+0x108>)
 80071f0:	40ca      	lsrs	r2, r1
 80071f2:	07d6      	lsls	r6, r2, #31
 80071f4:	d528      	bpl.n	8007248 <__sflush_r+0xb8>
 80071f6:	2200      	movs	r2, #0
 80071f8:	6062      	str	r2, [r4, #4]
 80071fa:	04d9      	lsls	r1, r3, #19
 80071fc:	6922      	ldr	r2, [r4, #16]
 80071fe:	6022      	str	r2, [r4, #0]
 8007200:	d504      	bpl.n	800720c <__sflush_r+0x7c>
 8007202:	1c42      	adds	r2, r0, #1
 8007204:	d101      	bne.n	800720a <__sflush_r+0x7a>
 8007206:	682b      	ldr	r3, [r5, #0]
 8007208:	b903      	cbnz	r3, 800720c <__sflush_r+0x7c>
 800720a:	6560      	str	r0, [r4, #84]	; 0x54
 800720c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800720e:	602f      	str	r7, [r5, #0]
 8007210:	2900      	cmp	r1, #0
 8007212:	d0ca      	beq.n	80071aa <__sflush_r+0x1a>
 8007214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007218:	4299      	cmp	r1, r3
 800721a:	d002      	beq.n	8007222 <__sflush_r+0x92>
 800721c:	4628      	mov	r0, r5
 800721e:	f7fd fdfb 	bl	8004e18 <_free_r>
 8007222:	2000      	movs	r0, #0
 8007224:	6360      	str	r0, [r4, #52]	; 0x34
 8007226:	e7c1      	b.n	80071ac <__sflush_r+0x1c>
 8007228:	6a21      	ldr	r1, [r4, #32]
 800722a:	2301      	movs	r3, #1
 800722c:	4628      	mov	r0, r5
 800722e:	47b0      	blx	r6
 8007230:	1c41      	adds	r1, r0, #1
 8007232:	d1c7      	bne.n	80071c4 <__sflush_r+0x34>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0c4      	beq.n	80071c4 <__sflush_r+0x34>
 800723a:	2b1d      	cmp	r3, #29
 800723c:	d001      	beq.n	8007242 <__sflush_r+0xb2>
 800723e:	2b16      	cmp	r3, #22
 8007240:	d101      	bne.n	8007246 <__sflush_r+0xb6>
 8007242:	602f      	str	r7, [r5, #0]
 8007244:	e7b1      	b.n	80071aa <__sflush_r+0x1a>
 8007246:	89a3      	ldrh	r3, [r4, #12]
 8007248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800724c:	81a3      	strh	r3, [r4, #12]
 800724e:	e7ad      	b.n	80071ac <__sflush_r+0x1c>
 8007250:	690f      	ldr	r7, [r1, #16]
 8007252:	2f00      	cmp	r7, #0
 8007254:	d0a9      	beq.n	80071aa <__sflush_r+0x1a>
 8007256:	0793      	lsls	r3, r2, #30
 8007258:	680e      	ldr	r6, [r1, #0]
 800725a:	bf08      	it	eq
 800725c:	694b      	ldreq	r3, [r1, #20]
 800725e:	600f      	str	r7, [r1, #0]
 8007260:	bf18      	it	ne
 8007262:	2300      	movne	r3, #0
 8007264:	eba6 0807 	sub.w	r8, r6, r7
 8007268:	608b      	str	r3, [r1, #8]
 800726a:	f1b8 0f00 	cmp.w	r8, #0
 800726e:	dd9c      	ble.n	80071aa <__sflush_r+0x1a>
 8007270:	6a21      	ldr	r1, [r4, #32]
 8007272:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007274:	4643      	mov	r3, r8
 8007276:	463a      	mov	r2, r7
 8007278:	4628      	mov	r0, r5
 800727a:	47b0      	blx	r6
 800727c:	2800      	cmp	r0, #0
 800727e:	dc06      	bgt.n	800728e <__sflush_r+0xfe>
 8007280:	89a3      	ldrh	r3, [r4, #12]
 8007282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007286:	81a3      	strh	r3, [r4, #12]
 8007288:	f04f 30ff 	mov.w	r0, #4294967295
 800728c:	e78e      	b.n	80071ac <__sflush_r+0x1c>
 800728e:	4407      	add	r7, r0
 8007290:	eba8 0800 	sub.w	r8, r8, r0
 8007294:	e7e9      	b.n	800726a <__sflush_r+0xda>
 8007296:	bf00      	nop
 8007298:	20400001 	.word	0x20400001

0800729c <_fflush_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	690b      	ldr	r3, [r1, #16]
 80072a0:	4605      	mov	r5, r0
 80072a2:	460c      	mov	r4, r1
 80072a4:	b913      	cbnz	r3, 80072ac <_fflush_r+0x10>
 80072a6:	2500      	movs	r5, #0
 80072a8:	4628      	mov	r0, r5
 80072aa:	bd38      	pop	{r3, r4, r5, pc}
 80072ac:	b118      	cbz	r0, 80072b6 <_fflush_r+0x1a>
 80072ae:	6983      	ldr	r3, [r0, #24]
 80072b0:	b90b      	cbnz	r3, 80072b6 <_fflush_r+0x1a>
 80072b2:	f000 f887 	bl	80073c4 <__sinit>
 80072b6:	4b14      	ldr	r3, [pc, #80]	; (8007308 <_fflush_r+0x6c>)
 80072b8:	429c      	cmp	r4, r3
 80072ba:	d11b      	bne.n	80072f4 <_fflush_r+0x58>
 80072bc:	686c      	ldr	r4, [r5, #4]
 80072be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d0ef      	beq.n	80072a6 <_fflush_r+0xa>
 80072c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072c8:	07d0      	lsls	r0, r2, #31
 80072ca:	d404      	bmi.n	80072d6 <_fflush_r+0x3a>
 80072cc:	0599      	lsls	r1, r3, #22
 80072ce:	d402      	bmi.n	80072d6 <_fflush_r+0x3a>
 80072d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072d2:	f7ff fd1a 	bl	8006d0a <__retarget_lock_acquire_recursive>
 80072d6:	4628      	mov	r0, r5
 80072d8:	4621      	mov	r1, r4
 80072da:	f7ff ff59 	bl	8007190 <__sflush_r>
 80072de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072e0:	07da      	lsls	r2, r3, #31
 80072e2:	4605      	mov	r5, r0
 80072e4:	d4e0      	bmi.n	80072a8 <_fflush_r+0xc>
 80072e6:	89a3      	ldrh	r3, [r4, #12]
 80072e8:	059b      	lsls	r3, r3, #22
 80072ea:	d4dd      	bmi.n	80072a8 <_fflush_r+0xc>
 80072ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072ee:	f7ff fd0d 	bl	8006d0c <__retarget_lock_release_recursive>
 80072f2:	e7d9      	b.n	80072a8 <_fflush_r+0xc>
 80072f4:	4b05      	ldr	r3, [pc, #20]	; (800730c <_fflush_r+0x70>)
 80072f6:	429c      	cmp	r4, r3
 80072f8:	d101      	bne.n	80072fe <_fflush_r+0x62>
 80072fa:	68ac      	ldr	r4, [r5, #8]
 80072fc:	e7df      	b.n	80072be <_fflush_r+0x22>
 80072fe:	4b04      	ldr	r3, [pc, #16]	; (8007310 <_fflush_r+0x74>)
 8007300:	429c      	cmp	r4, r3
 8007302:	bf08      	it	eq
 8007304:	68ec      	ldreq	r4, [r5, #12]
 8007306:	e7da      	b.n	80072be <_fflush_r+0x22>
 8007308:	08007b7c 	.word	0x08007b7c
 800730c:	08007b9c 	.word	0x08007b9c
 8007310:	08007b5c 	.word	0x08007b5c

08007314 <std>:
 8007314:	2300      	movs	r3, #0
 8007316:	b510      	push	{r4, lr}
 8007318:	4604      	mov	r4, r0
 800731a:	e9c0 3300 	strd	r3, r3, [r0]
 800731e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007322:	6083      	str	r3, [r0, #8]
 8007324:	8181      	strh	r1, [r0, #12]
 8007326:	6643      	str	r3, [r0, #100]	; 0x64
 8007328:	81c2      	strh	r2, [r0, #14]
 800732a:	6183      	str	r3, [r0, #24]
 800732c:	4619      	mov	r1, r3
 800732e:	2208      	movs	r2, #8
 8007330:	305c      	adds	r0, #92	; 0x5c
 8007332:	f7fd fd69 	bl	8004e08 <memset>
 8007336:	4b05      	ldr	r3, [pc, #20]	; (800734c <std+0x38>)
 8007338:	6263      	str	r3, [r4, #36]	; 0x24
 800733a:	4b05      	ldr	r3, [pc, #20]	; (8007350 <std+0x3c>)
 800733c:	62a3      	str	r3, [r4, #40]	; 0x28
 800733e:	4b05      	ldr	r3, [pc, #20]	; (8007354 <std+0x40>)
 8007340:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007342:	4b05      	ldr	r3, [pc, #20]	; (8007358 <std+0x44>)
 8007344:	6224      	str	r4, [r4, #32]
 8007346:	6323      	str	r3, [r4, #48]	; 0x30
 8007348:	bd10      	pop	{r4, pc}
 800734a:	bf00      	nop
 800734c:	08007651 	.word	0x08007651
 8007350:	08007673 	.word	0x08007673
 8007354:	080076ab 	.word	0x080076ab
 8007358:	080076cf 	.word	0x080076cf

0800735c <_cleanup_r>:
 800735c:	4901      	ldr	r1, [pc, #4]	; (8007364 <_cleanup_r+0x8>)
 800735e:	f000 b8af 	b.w	80074c0 <_fwalk_reent>
 8007362:	bf00      	nop
 8007364:	0800729d 	.word	0x0800729d

08007368 <__sfmoreglue>:
 8007368:	b570      	push	{r4, r5, r6, lr}
 800736a:	1e4a      	subs	r2, r1, #1
 800736c:	2568      	movs	r5, #104	; 0x68
 800736e:	4355      	muls	r5, r2
 8007370:	460e      	mov	r6, r1
 8007372:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007376:	f7fd fd9f 	bl	8004eb8 <_malloc_r>
 800737a:	4604      	mov	r4, r0
 800737c:	b140      	cbz	r0, 8007390 <__sfmoreglue+0x28>
 800737e:	2100      	movs	r1, #0
 8007380:	e9c0 1600 	strd	r1, r6, [r0]
 8007384:	300c      	adds	r0, #12
 8007386:	60a0      	str	r0, [r4, #8]
 8007388:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800738c:	f7fd fd3c 	bl	8004e08 <memset>
 8007390:	4620      	mov	r0, r4
 8007392:	bd70      	pop	{r4, r5, r6, pc}

08007394 <__sfp_lock_acquire>:
 8007394:	4801      	ldr	r0, [pc, #4]	; (800739c <__sfp_lock_acquire+0x8>)
 8007396:	f7ff bcb8 	b.w	8006d0a <__retarget_lock_acquire_recursive>
 800739a:	bf00      	nop
 800739c:	200005a0 	.word	0x200005a0

080073a0 <__sfp_lock_release>:
 80073a0:	4801      	ldr	r0, [pc, #4]	; (80073a8 <__sfp_lock_release+0x8>)
 80073a2:	f7ff bcb3 	b.w	8006d0c <__retarget_lock_release_recursive>
 80073a6:	bf00      	nop
 80073a8:	200005a0 	.word	0x200005a0

080073ac <__sinit_lock_acquire>:
 80073ac:	4801      	ldr	r0, [pc, #4]	; (80073b4 <__sinit_lock_acquire+0x8>)
 80073ae:	f7ff bcac 	b.w	8006d0a <__retarget_lock_acquire_recursive>
 80073b2:	bf00      	nop
 80073b4:	2000059b 	.word	0x2000059b

080073b8 <__sinit_lock_release>:
 80073b8:	4801      	ldr	r0, [pc, #4]	; (80073c0 <__sinit_lock_release+0x8>)
 80073ba:	f7ff bca7 	b.w	8006d0c <__retarget_lock_release_recursive>
 80073be:	bf00      	nop
 80073c0:	2000059b 	.word	0x2000059b

080073c4 <__sinit>:
 80073c4:	b510      	push	{r4, lr}
 80073c6:	4604      	mov	r4, r0
 80073c8:	f7ff fff0 	bl	80073ac <__sinit_lock_acquire>
 80073cc:	69a3      	ldr	r3, [r4, #24]
 80073ce:	b11b      	cbz	r3, 80073d8 <__sinit+0x14>
 80073d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073d4:	f7ff bff0 	b.w	80073b8 <__sinit_lock_release>
 80073d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80073dc:	6523      	str	r3, [r4, #80]	; 0x50
 80073de:	4b13      	ldr	r3, [pc, #76]	; (800742c <__sinit+0x68>)
 80073e0:	4a13      	ldr	r2, [pc, #76]	; (8007430 <__sinit+0x6c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80073e6:	42a3      	cmp	r3, r4
 80073e8:	bf04      	itt	eq
 80073ea:	2301      	moveq	r3, #1
 80073ec:	61a3      	streq	r3, [r4, #24]
 80073ee:	4620      	mov	r0, r4
 80073f0:	f000 f820 	bl	8007434 <__sfp>
 80073f4:	6060      	str	r0, [r4, #4]
 80073f6:	4620      	mov	r0, r4
 80073f8:	f000 f81c 	bl	8007434 <__sfp>
 80073fc:	60a0      	str	r0, [r4, #8]
 80073fe:	4620      	mov	r0, r4
 8007400:	f000 f818 	bl	8007434 <__sfp>
 8007404:	2200      	movs	r2, #0
 8007406:	60e0      	str	r0, [r4, #12]
 8007408:	2104      	movs	r1, #4
 800740a:	6860      	ldr	r0, [r4, #4]
 800740c:	f7ff ff82 	bl	8007314 <std>
 8007410:	68a0      	ldr	r0, [r4, #8]
 8007412:	2201      	movs	r2, #1
 8007414:	2109      	movs	r1, #9
 8007416:	f7ff ff7d 	bl	8007314 <std>
 800741a:	68e0      	ldr	r0, [r4, #12]
 800741c:	2202      	movs	r2, #2
 800741e:	2112      	movs	r1, #18
 8007420:	f7ff ff78 	bl	8007314 <std>
 8007424:	2301      	movs	r3, #1
 8007426:	61a3      	str	r3, [r4, #24]
 8007428:	e7d2      	b.n	80073d0 <__sinit+0xc>
 800742a:	bf00      	nop
 800742c:	080077d8 	.word	0x080077d8
 8007430:	0800735d 	.word	0x0800735d

08007434 <__sfp>:
 8007434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007436:	4607      	mov	r7, r0
 8007438:	f7ff ffac 	bl	8007394 <__sfp_lock_acquire>
 800743c:	4b1e      	ldr	r3, [pc, #120]	; (80074b8 <__sfp+0x84>)
 800743e:	681e      	ldr	r6, [r3, #0]
 8007440:	69b3      	ldr	r3, [r6, #24]
 8007442:	b913      	cbnz	r3, 800744a <__sfp+0x16>
 8007444:	4630      	mov	r0, r6
 8007446:	f7ff ffbd 	bl	80073c4 <__sinit>
 800744a:	3648      	adds	r6, #72	; 0x48
 800744c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007450:	3b01      	subs	r3, #1
 8007452:	d503      	bpl.n	800745c <__sfp+0x28>
 8007454:	6833      	ldr	r3, [r6, #0]
 8007456:	b30b      	cbz	r3, 800749c <__sfp+0x68>
 8007458:	6836      	ldr	r6, [r6, #0]
 800745a:	e7f7      	b.n	800744c <__sfp+0x18>
 800745c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007460:	b9d5      	cbnz	r5, 8007498 <__sfp+0x64>
 8007462:	4b16      	ldr	r3, [pc, #88]	; (80074bc <__sfp+0x88>)
 8007464:	60e3      	str	r3, [r4, #12]
 8007466:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800746a:	6665      	str	r5, [r4, #100]	; 0x64
 800746c:	f7ff fc4c 	bl	8006d08 <__retarget_lock_init_recursive>
 8007470:	f7ff ff96 	bl	80073a0 <__sfp_lock_release>
 8007474:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007478:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800747c:	6025      	str	r5, [r4, #0]
 800747e:	61a5      	str	r5, [r4, #24]
 8007480:	2208      	movs	r2, #8
 8007482:	4629      	mov	r1, r5
 8007484:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007488:	f7fd fcbe 	bl	8004e08 <memset>
 800748c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007490:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007494:	4620      	mov	r0, r4
 8007496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007498:	3468      	adds	r4, #104	; 0x68
 800749a:	e7d9      	b.n	8007450 <__sfp+0x1c>
 800749c:	2104      	movs	r1, #4
 800749e:	4638      	mov	r0, r7
 80074a0:	f7ff ff62 	bl	8007368 <__sfmoreglue>
 80074a4:	4604      	mov	r4, r0
 80074a6:	6030      	str	r0, [r6, #0]
 80074a8:	2800      	cmp	r0, #0
 80074aa:	d1d5      	bne.n	8007458 <__sfp+0x24>
 80074ac:	f7ff ff78 	bl	80073a0 <__sfp_lock_release>
 80074b0:	230c      	movs	r3, #12
 80074b2:	603b      	str	r3, [r7, #0]
 80074b4:	e7ee      	b.n	8007494 <__sfp+0x60>
 80074b6:	bf00      	nop
 80074b8:	080077d8 	.word	0x080077d8
 80074bc:	ffff0001 	.word	0xffff0001

080074c0 <_fwalk_reent>:
 80074c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074c4:	4606      	mov	r6, r0
 80074c6:	4688      	mov	r8, r1
 80074c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80074cc:	2700      	movs	r7, #0
 80074ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074d2:	f1b9 0901 	subs.w	r9, r9, #1
 80074d6:	d505      	bpl.n	80074e4 <_fwalk_reent+0x24>
 80074d8:	6824      	ldr	r4, [r4, #0]
 80074da:	2c00      	cmp	r4, #0
 80074dc:	d1f7      	bne.n	80074ce <_fwalk_reent+0xe>
 80074de:	4638      	mov	r0, r7
 80074e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074e4:	89ab      	ldrh	r3, [r5, #12]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d907      	bls.n	80074fa <_fwalk_reent+0x3a>
 80074ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074ee:	3301      	adds	r3, #1
 80074f0:	d003      	beq.n	80074fa <_fwalk_reent+0x3a>
 80074f2:	4629      	mov	r1, r5
 80074f4:	4630      	mov	r0, r6
 80074f6:	47c0      	blx	r8
 80074f8:	4307      	orrs	r7, r0
 80074fa:	3568      	adds	r5, #104	; 0x68
 80074fc:	e7e9      	b.n	80074d2 <_fwalk_reent+0x12>

080074fe <__swhatbuf_r>:
 80074fe:	b570      	push	{r4, r5, r6, lr}
 8007500:	460e      	mov	r6, r1
 8007502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007506:	2900      	cmp	r1, #0
 8007508:	b096      	sub	sp, #88	; 0x58
 800750a:	4614      	mov	r4, r2
 800750c:	461d      	mov	r5, r3
 800750e:	da07      	bge.n	8007520 <__swhatbuf_r+0x22>
 8007510:	2300      	movs	r3, #0
 8007512:	602b      	str	r3, [r5, #0]
 8007514:	89b3      	ldrh	r3, [r6, #12]
 8007516:	061a      	lsls	r2, r3, #24
 8007518:	d410      	bmi.n	800753c <__swhatbuf_r+0x3e>
 800751a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800751e:	e00e      	b.n	800753e <__swhatbuf_r+0x40>
 8007520:	466a      	mov	r2, sp
 8007522:	f000 f8fb 	bl	800771c <_fstat_r>
 8007526:	2800      	cmp	r0, #0
 8007528:	dbf2      	blt.n	8007510 <__swhatbuf_r+0x12>
 800752a:	9a01      	ldr	r2, [sp, #4]
 800752c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007530:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007534:	425a      	negs	r2, r3
 8007536:	415a      	adcs	r2, r3
 8007538:	602a      	str	r2, [r5, #0]
 800753a:	e7ee      	b.n	800751a <__swhatbuf_r+0x1c>
 800753c:	2340      	movs	r3, #64	; 0x40
 800753e:	2000      	movs	r0, #0
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	b016      	add	sp, #88	; 0x58
 8007544:	bd70      	pop	{r4, r5, r6, pc}
	...

08007548 <__smakebuf_r>:
 8007548:	898b      	ldrh	r3, [r1, #12]
 800754a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800754c:	079d      	lsls	r5, r3, #30
 800754e:	4606      	mov	r6, r0
 8007550:	460c      	mov	r4, r1
 8007552:	d507      	bpl.n	8007564 <__smakebuf_r+0x1c>
 8007554:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007558:	6023      	str	r3, [r4, #0]
 800755a:	6123      	str	r3, [r4, #16]
 800755c:	2301      	movs	r3, #1
 800755e:	6163      	str	r3, [r4, #20]
 8007560:	b002      	add	sp, #8
 8007562:	bd70      	pop	{r4, r5, r6, pc}
 8007564:	ab01      	add	r3, sp, #4
 8007566:	466a      	mov	r2, sp
 8007568:	f7ff ffc9 	bl	80074fe <__swhatbuf_r>
 800756c:	9900      	ldr	r1, [sp, #0]
 800756e:	4605      	mov	r5, r0
 8007570:	4630      	mov	r0, r6
 8007572:	f7fd fca1 	bl	8004eb8 <_malloc_r>
 8007576:	b948      	cbnz	r0, 800758c <__smakebuf_r+0x44>
 8007578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800757c:	059a      	lsls	r2, r3, #22
 800757e:	d4ef      	bmi.n	8007560 <__smakebuf_r+0x18>
 8007580:	f023 0303 	bic.w	r3, r3, #3
 8007584:	f043 0302 	orr.w	r3, r3, #2
 8007588:	81a3      	strh	r3, [r4, #12]
 800758a:	e7e3      	b.n	8007554 <__smakebuf_r+0xc>
 800758c:	4b0d      	ldr	r3, [pc, #52]	; (80075c4 <__smakebuf_r+0x7c>)
 800758e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007590:	89a3      	ldrh	r3, [r4, #12]
 8007592:	6020      	str	r0, [r4, #0]
 8007594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007598:	81a3      	strh	r3, [r4, #12]
 800759a:	9b00      	ldr	r3, [sp, #0]
 800759c:	6163      	str	r3, [r4, #20]
 800759e:	9b01      	ldr	r3, [sp, #4]
 80075a0:	6120      	str	r0, [r4, #16]
 80075a2:	b15b      	cbz	r3, 80075bc <__smakebuf_r+0x74>
 80075a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075a8:	4630      	mov	r0, r6
 80075aa:	f000 f8c9 	bl	8007740 <_isatty_r>
 80075ae:	b128      	cbz	r0, 80075bc <__smakebuf_r+0x74>
 80075b0:	89a3      	ldrh	r3, [r4, #12]
 80075b2:	f023 0303 	bic.w	r3, r3, #3
 80075b6:	f043 0301 	orr.w	r3, r3, #1
 80075ba:	81a3      	strh	r3, [r4, #12]
 80075bc:	89a0      	ldrh	r0, [r4, #12]
 80075be:	4305      	orrs	r5, r0
 80075c0:	81a5      	strh	r5, [r4, #12]
 80075c2:	e7cd      	b.n	8007560 <__smakebuf_r+0x18>
 80075c4:	0800735d 	.word	0x0800735d

080075c8 <_raise_r>:
 80075c8:	291f      	cmp	r1, #31
 80075ca:	b538      	push	{r3, r4, r5, lr}
 80075cc:	4604      	mov	r4, r0
 80075ce:	460d      	mov	r5, r1
 80075d0:	d904      	bls.n	80075dc <_raise_r+0x14>
 80075d2:	2316      	movs	r3, #22
 80075d4:	6003      	str	r3, [r0, #0]
 80075d6:	f04f 30ff 	mov.w	r0, #4294967295
 80075da:	bd38      	pop	{r3, r4, r5, pc}
 80075dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80075de:	b112      	cbz	r2, 80075e6 <_raise_r+0x1e>
 80075e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075e4:	b94b      	cbnz	r3, 80075fa <_raise_r+0x32>
 80075e6:	4620      	mov	r0, r4
 80075e8:	f000 f830 	bl	800764c <_getpid_r>
 80075ec:	462a      	mov	r2, r5
 80075ee:	4601      	mov	r1, r0
 80075f0:	4620      	mov	r0, r4
 80075f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075f6:	f000 b817 	b.w	8007628 <_kill_r>
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d00a      	beq.n	8007614 <_raise_r+0x4c>
 80075fe:	1c59      	adds	r1, r3, #1
 8007600:	d103      	bne.n	800760a <_raise_r+0x42>
 8007602:	2316      	movs	r3, #22
 8007604:	6003      	str	r3, [r0, #0]
 8007606:	2001      	movs	r0, #1
 8007608:	e7e7      	b.n	80075da <_raise_r+0x12>
 800760a:	2400      	movs	r4, #0
 800760c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007610:	4628      	mov	r0, r5
 8007612:	4798      	blx	r3
 8007614:	2000      	movs	r0, #0
 8007616:	e7e0      	b.n	80075da <_raise_r+0x12>

08007618 <raise>:
 8007618:	4b02      	ldr	r3, [pc, #8]	; (8007624 <raise+0xc>)
 800761a:	4601      	mov	r1, r0
 800761c:	6818      	ldr	r0, [r3, #0]
 800761e:	f7ff bfd3 	b.w	80075c8 <_raise_r>
 8007622:	bf00      	nop
 8007624:	2000000c 	.word	0x2000000c

08007628 <_kill_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	4d07      	ldr	r5, [pc, #28]	; (8007648 <_kill_r+0x20>)
 800762c:	2300      	movs	r3, #0
 800762e:	4604      	mov	r4, r0
 8007630:	4608      	mov	r0, r1
 8007632:	4611      	mov	r1, r2
 8007634:	602b      	str	r3, [r5, #0]
 8007636:	f7fa fae9 	bl	8001c0c <_kill>
 800763a:	1c43      	adds	r3, r0, #1
 800763c:	d102      	bne.n	8007644 <_kill_r+0x1c>
 800763e:	682b      	ldr	r3, [r5, #0]
 8007640:	b103      	cbz	r3, 8007644 <_kill_r+0x1c>
 8007642:	6023      	str	r3, [r4, #0]
 8007644:	bd38      	pop	{r3, r4, r5, pc}
 8007646:	bf00      	nop
 8007648:	20000594 	.word	0x20000594

0800764c <_getpid_r>:
 800764c:	f7fa bad6 	b.w	8001bfc <_getpid>

08007650 <__sread>:
 8007650:	b510      	push	{r4, lr}
 8007652:	460c      	mov	r4, r1
 8007654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007658:	f000 f894 	bl	8007784 <_read_r>
 800765c:	2800      	cmp	r0, #0
 800765e:	bfab      	itete	ge
 8007660:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007662:	89a3      	ldrhlt	r3, [r4, #12]
 8007664:	181b      	addge	r3, r3, r0
 8007666:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800766a:	bfac      	ite	ge
 800766c:	6563      	strge	r3, [r4, #84]	; 0x54
 800766e:	81a3      	strhlt	r3, [r4, #12]
 8007670:	bd10      	pop	{r4, pc}

08007672 <__swrite>:
 8007672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007676:	461f      	mov	r7, r3
 8007678:	898b      	ldrh	r3, [r1, #12]
 800767a:	05db      	lsls	r3, r3, #23
 800767c:	4605      	mov	r5, r0
 800767e:	460c      	mov	r4, r1
 8007680:	4616      	mov	r6, r2
 8007682:	d505      	bpl.n	8007690 <__swrite+0x1e>
 8007684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007688:	2302      	movs	r3, #2
 800768a:	2200      	movs	r2, #0
 800768c:	f000 f868 	bl	8007760 <_lseek_r>
 8007690:	89a3      	ldrh	r3, [r4, #12]
 8007692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800769a:	81a3      	strh	r3, [r4, #12]
 800769c:	4632      	mov	r2, r6
 800769e:	463b      	mov	r3, r7
 80076a0:	4628      	mov	r0, r5
 80076a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076a6:	f000 b817 	b.w	80076d8 <_write_r>

080076aa <__sseek>:
 80076aa:	b510      	push	{r4, lr}
 80076ac:	460c      	mov	r4, r1
 80076ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b2:	f000 f855 	bl	8007760 <_lseek_r>
 80076b6:	1c43      	adds	r3, r0, #1
 80076b8:	89a3      	ldrh	r3, [r4, #12]
 80076ba:	bf15      	itete	ne
 80076bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80076be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076c6:	81a3      	strheq	r3, [r4, #12]
 80076c8:	bf18      	it	ne
 80076ca:	81a3      	strhne	r3, [r4, #12]
 80076cc:	bd10      	pop	{r4, pc}

080076ce <__sclose>:
 80076ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076d2:	f000 b813 	b.w	80076fc <_close_r>
	...

080076d8 <_write_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4d07      	ldr	r5, [pc, #28]	; (80076f8 <_write_r+0x20>)
 80076dc:	4604      	mov	r4, r0
 80076de:	4608      	mov	r0, r1
 80076e0:	4611      	mov	r1, r2
 80076e2:	2200      	movs	r2, #0
 80076e4:	602a      	str	r2, [r5, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	f7f9 fbea 	bl	8000ec0 <_write>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d102      	bne.n	80076f6 <_write_r+0x1e>
 80076f0:	682b      	ldr	r3, [r5, #0]
 80076f2:	b103      	cbz	r3, 80076f6 <_write_r+0x1e>
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
 80076f8:	20000594 	.word	0x20000594

080076fc <_close_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	4d06      	ldr	r5, [pc, #24]	; (8007718 <_close_r+0x1c>)
 8007700:	2300      	movs	r3, #0
 8007702:	4604      	mov	r4, r0
 8007704:	4608      	mov	r0, r1
 8007706:	602b      	str	r3, [r5, #0]
 8007708:	f7fa fab7 	bl	8001c7a <_close>
 800770c:	1c43      	adds	r3, r0, #1
 800770e:	d102      	bne.n	8007716 <_close_r+0x1a>
 8007710:	682b      	ldr	r3, [r5, #0]
 8007712:	b103      	cbz	r3, 8007716 <_close_r+0x1a>
 8007714:	6023      	str	r3, [r4, #0]
 8007716:	bd38      	pop	{r3, r4, r5, pc}
 8007718:	20000594 	.word	0x20000594

0800771c <_fstat_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4d07      	ldr	r5, [pc, #28]	; (800773c <_fstat_r+0x20>)
 8007720:	2300      	movs	r3, #0
 8007722:	4604      	mov	r4, r0
 8007724:	4608      	mov	r0, r1
 8007726:	4611      	mov	r1, r2
 8007728:	602b      	str	r3, [r5, #0]
 800772a:	f7fa fab2 	bl	8001c92 <_fstat>
 800772e:	1c43      	adds	r3, r0, #1
 8007730:	d102      	bne.n	8007738 <_fstat_r+0x1c>
 8007732:	682b      	ldr	r3, [r5, #0]
 8007734:	b103      	cbz	r3, 8007738 <_fstat_r+0x1c>
 8007736:	6023      	str	r3, [r4, #0]
 8007738:	bd38      	pop	{r3, r4, r5, pc}
 800773a:	bf00      	nop
 800773c:	20000594 	.word	0x20000594

08007740 <_isatty_r>:
 8007740:	b538      	push	{r3, r4, r5, lr}
 8007742:	4d06      	ldr	r5, [pc, #24]	; (800775c <_isatty_r+0x1c>)
 8007744:	2300      	movs	r3, #0
 8007746:	4604      	mov	r4, r0
 8007748:	4608      	mov	r0, r1
 800774a:	602b      	str	r3, [r5, #0]
 800774c:	f7fa fab1 	bl	8001cb2 <_isatty>
 8007750:	1c43      	adds	r3, r0, #1
 8007752:	d102      	bne.n	800775a <_isatty_r+0x1a>
 8007754:	682b      	ldr	r3, [r5, #0]
 8007756:	b103      	cbz	r3, 800775a <_isatty_r+0x1a>
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	bd38      	pop	{r3, r4, r5, pc}
 800775c:	20000594 	.word	0x20000594

08007760 <_lseek_r>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	4d07      	ldr	r5, [pc, #28]	; (8007780 <_lseek_r+0x20>)
 8007764:	4604      	mov	r4, r0
 8007766:	4608      	mov	r0, r1
 8007768:	4611      	mov	r1, r2
 800776a:	2200      	movs	r2, #0
 800776c:	602a      	str	r2, [r5, #0]
 800776e:	461a      	mov	r2, r3
 8007770:	f7fa faaa 	bl	8001cc8 <_lseek>
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	d102      	bne.n	800777e <_lseek_r+0x1e>
 8007778:	682b      	ldr	r3, [r5, #0]
 800777a:	b103      	cbz	r3, 800777e <_lseek_r+0x1e>
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	bd38      	pop	{r3, r4, r5, pc}
 8007780:	20000594 	.word	0x20000594

08007784 <_read_r>:
 8007784:	b538      	push	{r3, r4, r5, lr}
 8007786:	4d07      	ldr	r5, [pc, #28]	; (80077a4 <_read_r+0x20>)
 8007788:	4604      	mov	r4, r0
 800778a:	4608      	mov	r0, r1
 800778c:	4611      	mov	r1, r2
 800778e:	2200      	movs	r2, #0
 8007790:	602a      	str	r2, [r5, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	f7fa fa54 	bl	8001c40 <_read>
 8007798:	1c43      	adds	r3, r0, #1
 800779a:	d102      	bne.n	80077a2 <_read_r+0x1e>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	b103      	cbz	r3, 80077a2 <_read_r+0x1e>
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	bd38      	pop	{r3, r4, r5, pc}
 80077a4:	20000594 	.word	0x20000594

080077a8 <_init>:
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	bf00      	nop
 80077ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ae:	bc08      	pop	{r3}
 80077b0:	469e      	mov	lr, r3
 80077b2:	4770      	bx	lr

080077b4 <_fini>:
 80077b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b6:	bf00      	nop
 80077b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ba:	bc08      	pop	{r3}
 80077bc:	469e      	mov	lr, r3
 80077be:	4770      	bx	lr
